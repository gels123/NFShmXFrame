// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_douniu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_douniu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* douniuuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  douniuuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* douniuinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  douniuinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* douniuhandpoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  douniuhandpoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* douniuspecialtype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  douniuspecialtype_reflection_ = NULL;
const ::google::protobuf::Descriptor* douniuhistoryitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  douniuhistoryitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* douniuhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  douniuhistory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fdouniu_2eproto() {
  protobuf_AddDesc_st_5fdouniu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_douniu.proto");
  GOOGLE_CHECK(file != NULL);
  douniuuser_descriptor_ = file->message_type(0);
  static const int douniuuser_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, handpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, carryjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, pourtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, nntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, basicsmul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, maxdntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, bankernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, volun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, overtimenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, trusteeship_),
  };
  douniuuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      douniuuser_descriptor_,
      douniuuser::default_instance_,
      douniuuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(douniuuser));
  douniuinfo_descriptor_ = file->message_type(1);
  static const int douniuinfo_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, tablemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, tabletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, viptable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, julebuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, dntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, maxplaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, mullist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, typeodds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, specialtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, restrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, integralmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, bankermultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, usevipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, dissolveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, straction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, basicsmul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, bankerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, payway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, paynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, pokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, autoready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, banker_no_),
  };
  douniuinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      douniuinfo_descriptor_,
      douniuinfo::default_instance_,
      douniuinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(douniuinfo));
  douniuhandpoker_descriptor_ = file->message_type(2);
  static const int douniuhandpoker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhandpoker, handpoker_),
  };
  douniuhandpoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      douniuhandpoker_descriptor_,
      douniuhandpoker::default_instance_,
      douniuhandpoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhandpoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhandpoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(douniuhandpoker));
  douniuspecialtype_descriptor_ = file->message_type(3);
  static const int douniuspecialtype_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuspecialtype, zhadan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuspecialtype, wuhua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuspecialtype, wuxiao_),
  };
  douniuspecialtype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      douniuspecialtype_descriptor_,
      douniuspecialtype::default_instance_,
      douniuspecialtype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuspecialtype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuspecialtype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(douniuspecialtype));
  douniuhistoryitem_descriptor_ = file->message_type(4);
  static const int douniuhistoryitem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, pokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, nntypelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, qzbslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, pournumlist_),
  };
  douniuhistoryitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      douniuhistoryitem_descriptor_,
      douniuhistoryitem::default_instance_,
      douniuhistoryitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistoryitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(douniuhistoryitem));
  douniuhistory_descriptor_ = file->message_type(5);
  static const int douniuhistory_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, playnummax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, playnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, dntypelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, hitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, tablemark_),
  };
  douniuhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      douniuhistory_descriptor_,
      douniuhistory::default_instance_,
      douniuhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(douniuhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(douniuhistory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fdouniu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    douniuuser_descriptor_, &douniuuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    douniuinfo_descriptor_, &douniuinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    douniuhandpoker_descriptor_, &douniuhandpoker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    douniuspecialtype_descriptor_, &douniuspecialtype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    douniuhistoryitem_descriptor_, &douniuhistoryitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    douniuhistory_descriptor_, &douniuhistory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fdouniu_2eproto() {
  delete douniuuser::default_instance_;
  delete douniuuser_reflection_;
  delete douniuinfo::default_instance_;
  delete douniuinfo_reflection_;
  delete douniuhandpoker::default_instance_;
  delete douniuhandpoker_reflection_;
  delete douniuspecialtype::default_instance_;
  delete douniuspecialtype_reflection_;
  delete douniuhistoryitem::default_instance_;
  delete douniuhistoryitem_reflection_;
  delete douniuhistory::default_instance_;
  delete douniuhistory_reflection_;
}

void protobuf_AddDesc_st_5fdouniu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017st_douniu.proto\022\007progame\032\016st_human.pro"
    "to\"\353\002\n\ndouniuuser\022\016\n\006userid\030\001 \001(\005\022\021\n\than"
    "dpoker\030\002 \003(\005\022\020\n\010nickname\030\003 \001(\t\022\023\n\013carryj"
    "etton\030\004 \001(\t\022\016\n\006faceid\030\005 \001(\t\022\017\n\007chairid\030\006"
    " \001(\005\022\013\n\003sex\030\007 \001(\005\022\020\n\010pourtype\030\010 \001(\005\022\016\n\006j"
    "etton\030\t \001(\005\022\r\n\005state\030\n \001(\005\022\016\n\006nntype\030\013 \001"
    "(\005\022\021\n\tbasicsmul\030\014 \001(\005\022\020\n\010location\030\r \001(\t\022"
    "\016\n\006winnum\030\016 \001(\005\022\021\n\tmaxdntype\030\017 \001(\005\022\020\n\010ma"
    "xscore\030\020 \001(\005\022\021\n\tbankernum\030\021 \001(\005\022\r\n\005volun"
    "\030\022 \001(\005\022\023\n\013overtimenum\030\023 \001(\005\022\023\n\013trusteesh"
    "ip\030\024 \001(\005\"\221\005\n\ndouniuinfo\022\017\n\007tableid\030\001 \001(\005"
    "\022\021\n\ttablemark\030\002 \001(\005\022\021\n\ttabletime\030\003 \001(\005\022\r"
    "\n\005state\030\004 \001(\005\022\020\n\010timemark\030\005 \001(\005\022\020\n\010vipta"
    "ble\030\006 \001(\005\022\020\n\010julebuid\030\007 \001(\005\022\021\n\ttabletype"
    "\030\010 \001(\005\022\016\n\006dntype\030\t \001(\005\022\r\n\005difen\030\n \001(\005\022\022\n"
    "\nmaxplaynum\030\013 \001(\005\022\017\n\007paytype\030\014 \001(\005\022\017\n\007mu"
    "llist\030\r \003(\005\022\020\n\010typeodds\030\016 \001(\005\022\023\n\013special"
    "type\030\017 \001(\t\022\020\n\010restrict\030\020 \001(\005\022\023\n\013integral"
    "max\030\021 \001(\005\022\026\n\016bankermultiple\030\022 \001(\005\022\017\n\007own"
    "erid\030\023 \001(\005\022\020\n\010bankerID\030\024 \001(\005\022$\n\007situser\030"
    "\025 \003(\0132\023.progame.douniuuser\022\021\n\tstanduser\030"
    "\026 \003(\005\022\017\n\007usernum\030\027 \001(\005\022\021\n\tusevipnum\030\030 \001("
    "\005\022\024\n\014dissolveinfo\030\031 \001(\005\022\021\n\tstraction\030\032 \001"
    "(\t\022\017\n\007frameid\030\033 \001(\005\022\021\n\tbasicsmul\030\034 \001(\005\022\023"
    "\n\013bankerindex\030\035 \001(\005\022\016\n\006payway\030\036 \001(\005\022\016\n\006p"
    "aynum\030\037 \001(\005\022\021\n\tpokerlist\030  \003(\005\022\021\n\tautore"
    "ady\030! \001(\005\022\021\n\tbanker_no\030\" \001(\005\"$\n\017douniuha"
    "ndpoker\022\021\n\thandpoker\030\001 \003(\005\"B\n\021douniuspec"
    "ialtype\022\016\n\006zhadan\030\001 \001(\005\022\r\n\005wuhua\030\002 \001(\005\022\016"
    "\n\006wuxiao\030\003 \001(\005\"\321\001\n\021douniuhistoryitem\022\013\n\003"
    "leg\030\001 \001(\005\022\020\n\010bankerID\030\002 \001(\005\022\022\n\nuseridlis"
    "t\030\003 \003(\005\022\020\n\010nicklist\030\004 \003(\t\022\017\n\007winlist\030\005 \003"
    "(\005\022+\n\tpokerlist\030\006 \003(\0132\030.progame.douniuha"
    "ndpoker\022\022\n\nnntypelist\030\007 \003(\005\022\020\n\010qzbslist\030"
    "\010 \003(\005\022\023\n\013pournumlist\030\t \003(\005\"\204\002\n\rdouniuhis"
    "tory\022\017\n\007tableid\030\001 \001(\005\022\022\n\nplaynummax\030\002 \001("
    "\005\022\017\n\007playnum\030\003 \001(\005\022\r\n\005difen\030\004 \001(\005\022\022\n\ndnt"
    "ypelist\030\005 \001(\005\022\020\n\010gametime\030\006 \001(\005\022\017\n\007owner"
    "id\030\007 \001(\005\022\020\n\010nicklist\030\010 \003(\t\022\022\n\nuseridlist"
    "\030\t \003(\005\022\017\n\007winlist\030\n \003(\005\022-\n\thitemlist\030\013 \003"
    "(\0132\032.progame.douniuhistoryitem\022\021\n\ttablem"
    "ark\030\014 \001(\005", 1649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_douniu.proto", &protobuf_RegisterTypes);
  douniuuser::default_instance_ = new douniuuser();
  douniuinfo::default_instance_ = new douniuinfo();
  douniuhandpoker::default_instance_ = new douniuhandpoker();
  douniuspecialtype::default_instance_ = new douniuspecialtype();
  douniuhistoryitem::default_instance_ = new douniuhistoryitem();
  douniuhistory::default_instance_ = new douniuhistory();
  douniuuser::default_instance_->InitAsDefaultInstance();
  douniuinfo::default_instance_->InitAsDefaultInstance();
  douniuhandpoker::default_instance_->InitAsDefaultInstance();
  douniuspecialtype::default_instance_->InitAsDefaultInstance();
  douniuhistoryitem::default_instance_->InitAsDefaultInstance();
  douniuhistory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fdouniu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fdouniu_2eproto {
  StaticDescriptorInitializer_st_5fdouniu_2eproto() {
    protobuf_AddDesc_st_5fdouniu_2eproto();
  }
} static_descriptor_initializer_st_5fdouniu_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int douniuuser::kUseridFieldNumber;
const int douniuuser::kHandpokerFieldNumber;
const int douniuuser::kNicknameFieldNumber;
const int douniuuser::kCarryjettonFieldNumber;
const int douniuuser::kFaceidFieldNumber;
const int douniuuser::kChairidFieldNumber;
const int douniuuser::kSexFieldNumber;
const int douniuuser::kPourtypeFieldNumber;
const int douniuuser::kJettonFieldNumber;
const int douniuuser::kStateFieldNumber;
const int douniuuser::kNntypeFieldNumber;
const int douniuuser::kBasicsmulFieldNumber;
const int douniuuser::kLocationFieldNumber;
const int douniuuser::kWinnumFieldNumber;
const int douniuuser::kMaxdntypeFieldNumber;
const int douniuuser::kMaxscoreFieldNumber;
const int douniuuser::kBankernumFieldNumber;
const int douniuuser::kVolunFieldNumber;
const int douniuuser::kOvertimenumFieldNumber;
const int douniuuser::kTrusteeshipFieldNumber;
#endif  // !_MSC_VER

douniuuser::douniuuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void douniuuser::InitAsDefaultInstance() {
}

douniuuser::douniuuser(const douniuuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void douniuuser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carryjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chairid_ = 0;
  sex_ = 0;
  pourtype_ = 0;
  jetton_ = 0;
  state_ = 0;
  nntype_ = 0;
  basicsmul_ = 0;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winnum_ = 0;
  maxdntype_ = 0;
  maxscore_ = 0;
  bankernum_ = 0;
  volun_ = 0;
  overtimenum_ = 0;
  trusteeship_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

douniuuser::~douniuuser() {
  SharedDtor();
}

void douniuuser::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (carryjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete carryjetton_;
  }
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void douniuuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* douniuuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return douniuuser_descriptor_;
}

const douniuuser& douniuuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fdouniu_2eproto();
  return *default_instance_;
}

douniuuser* douniuuser::default_instance_ = NULL;

douniuuser* douniuuser::New() const {
  return new douniuuser;
}

void douniuuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_carryjetton()) {
      if (carryjetton_ != &::google::protobuf::internal::kEmptyString) {
        carryjetton_->clear();
      }
    }
    if (has_faceid()) {
      if (faceid_ != &::google::protobuf::internal::kEmptyString) {
        faceid_->clear();
      }
    }
    chairid_ = 0;
    sex_ = 0;
    pourtype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    jetton_ = 0;
    state_ = 0;
    nntype_ = 0;
    basicsmul_ = 0;
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    winnum_ = 0;
    maxdntype_ = 0;
    maxscore_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bankernum_ = 0;
    volun_ = 0;
    overtimenum_ = 0;
    trusteeship_ = 0;
  }
  handpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool douniuuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handpoker;
        break;
      }

      // repeated int32 handpoker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handpoker;
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_carryjetton;
        break;
      }

      // optional string carryjetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carryjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carryjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carryjetton().data(), this->carryjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_faceid;
        break;
      }

      // optional string faceid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faceid().data(), this->faceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional int32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pourtype;
        break;
      }

      // optional int32 pourtype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourtype_)));
          set_has_pourtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }

      // optional int32 state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nntype;
        break;
      }

      // optional int32 nntype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nntype_)));
          set_has_nntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_basicsmul;
        break;
      }

      // optional int32 basicsmul = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basicsmul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basicsmul_)));
          set_has_basicsmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_location;
        break;
      }

      // optional string location = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_maxdntype;
        break;
      }

      // optional int32 maxdntype = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxdntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdntype_)));
          set_has_maxdntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_maxscore;
        break;
      }

      // optional int32 maxscore = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxscore_)));
          set_has_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bankernum;
        break;
      }

      // optional int32 bankernum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankernum_)));
          set_has_bankernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_volun;
        break;
      }

      // optional int32 volun = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volun_)));
          set_has_volun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_overtimenum;
        break;
      }

      // optional int32 overtimenum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overtimenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overtimenum_)));
          set_has_overtimenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_trusteeship;
        break;
      }

      // optional int32 trusteeship = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trusteeship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trusteeship_)));
          set_has_trusteeship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void douniuuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated int32 handpoker = 2;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->handpoker(i), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional string carryjetton = 4;
  if (has_carryjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carryjetton().data(), this->carryjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->carryjetton(), output);
  }

  // optional string faceid = 5;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->faceid(), output);
  }

  // optional int32 chairid = 6;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->chairid(), output);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }

  // optional int32 pourtype = 8;
  if (has_pourtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pourtype(), output);
  }

  // optional int32 jetton = 9;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->jetton(), output);
  }

  // optional int32 state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->state(), output);
  }

  // optional int32 nntype = 11;
  if (has_nntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nntype(), output);
  }

  // optional int32 basicsmul = 12;
  if (has_basicsmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->basicsmul(), output);
  }

  // optional string location = 13;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->location(), output);
  }

  // optional int32 winnum = 14;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->winnum(), output);
  }

  // optional int32 maxdntype = 15;
  if (has_maxdntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->maxdntype(), output);
  }

  // optional int32 maxscore = 16;
  if (has_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->maxscore(), output);
  }

  // optional int32 bankernum = 17;
  if (has_bankernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bankernum(), output);
  }

  // optional int32 volun = 18;
  if (has_volun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->volun(), output);
  }

  // optional int32 overtimenum = 19;
  if (has_overtimenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->overtimenum(), output);
  }

  // optional int32 trusteeship = 20;
  if (has_trusteeship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->trusteeship(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* douniuuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated int32 handpoker = 2;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->handpoker(i), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string carryjetton = 4;
  if (has_carryjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carryjetton().data(), this->carryjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->carryjetton(), target);
  }

  // optional string faceid = 5;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->faceid(), target);
  }

  // optional int32 chairid = 6;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chairid(), target);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }

  // optional int32 pourtype = 8;
  if (has_pourtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pourtype(), target);
  }

  // optional int32 jetton = 9;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->jetton(), target);
  }

  // optional int32 state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->state(), target);
  }

  // optional int32 nntype = 11;
  if (has_nntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nntype(), target);
  }

  // optional int32 basicsmul = 12;
  if (has_basicsmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->basicsmul(), target);
  }

  // optional string location = 13;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->location(), target);
  }

  // optional int32 winnum = 14;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->winnum(), target);
  }

  // optional int32 maxdntype = 15;
  if (has_maxdntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->maxdntype(), target);
  }

  // optional int32 maxscore = 16;
  if (has_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->maxscore(), target);
  }

  // optional int32 bankernum = 17;
  if (has_bankernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bankernum(), target);
  }

  // optional int32 volun = 18;
  if (has_volun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->volun(), target);
  }

  // optional int32 overtimenum = 19;
  if (has_overtimenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->overtimenum(), target);
  }

  // optional int32 trusteeship = 20;
  if (has_trusteeship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->trusteeship(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int douniuuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string carryjetton = 4;
    if (has_carryjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carryjetton());
    }

    // optional string faceid = 5;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceid());
    }

    // optional int32 chairid = 6;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 pourtype = 8;
    if (has_pourtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 jetton = 9;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 nntype = 11;
    if (has_nntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nntype());
    }

    // optional int32 basicsmul = 12;
    if (has_basicsmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basicsmul());
    }

    // optional string location = 13;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional int32 winnum = 14;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional int32 maxdntype = 15;
    if (has_maxdntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxdntype());
    }

    // optional int32 maxscore = 16;
    if (has_maxscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxscore());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bankernum = 17;
    if (has_bankernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankernum());
    }

    // optional int32 volun = 18;
    if (has_volun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volun());
    }

    // optional int32 overtimenum = 19;
    if (has_overtimenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overtimenum());
    }

    // optional int32 trusteeship = 20;
    if (has_trusteeship()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trusteeship());
    }

  }
  // repeated int32 handpoker = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void douniuuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const douniuuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const douniuuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void douniuuser::MergeFrom(const douniuuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_carryjetton()) {
      set_carryjetton(from.carryjetton());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_pourtype()) {
      set_pourtype(from.pourtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_nntype()) {
      set_nntype(from.nntype());
    }
    if (from.has_basicsmul()) {
      set_basicsmul(from.basicsmul());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_maxdntype()) {
      set_maxdntype(from.maxdntype());
    }
    if (from.has_maxscore()) {
      set_maxscore(from.maxscore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bankernum()) {
      set_bankernum(from.bankernum());
    }
    if (from.has_volun()) {
      set_volun(from.volun());
    }
    if (from.has_overtimenum()) {
      set_overtimenum(from.overtimenum());
    }
    if (from.has_trusteeship()) {
      set_trusteeship(from.trusteeship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void douniuuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void douniuuser::CopyFrom(const douniuuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool douniuuser::IsInitialized() const {

  return true;
}

void douniuuser::Swap(douniuuser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    handpoker_.Swap(&other->handpoker_);
    std::swap(nickname_, other->nickname_);
    std::swap(carryjetton_, other->carryjetton_);
    std::swap(faceid_, other->faceid_);
    std::swap(chairid_, other->chairid_);
    std::swap(sex_, other->sex_);
    std::swap(pourtype_, other->pourtype_);
    std::swap(jetton_, other->jetton_);
    std::swap(state_, other->state_);
    std::swap(nntype_, other->nntype_);
    std::swap(basicsmul_, other->basicsmul_);
    std::swap(location_, other->location_);
    std::swap(winnum_, other->winnum_);
    std::swap(maxdntype_, other->maxdntype_);
    std::swap(maxscore_, other->maxscore_);
    std::swap(bankernum_, other->bankernum_);
    std::swap(volun_, other->volun_);
    std::swap(overtimenum_, other->overtimenum_);
    std::swap(trusteeship_, other->trusteeship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata douniuuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = douniuuser_descriptor_;
  metadata.reflection = douniuuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int douniuinfo::kTableidFieldNumber;
const int douniuinfo::kTablemarkFieldNumber;
const int douniuinfo::kTabletimeFieldNumber;
const int douniuinfo::kStateFieldNumber;
const int douniuinfo::kTimemarkFieldNumber;
const int douniuinfo::kViptableFieldNumber;
const int douniuinfo::kJulebuidFieldNumber;
const int douniuinfo::kTabletypeFieldNumber;
const int douniuinfo::kDntypeFieldNumber;
const int douniuinfo::kDifenFieldNumber;
const int douniuinfo::kMaxplaynumFieldNumber;
const int douniuinfo::kPaytypeFieldNumber;
const int douniuinfo::kMullistFieldNumber;
const int douniuinfo::kTypeoddsFieldNumber;
const int douniuinfo::kSpecialtypeFieldNumber;
const int douniuinfo::kRestrictFieldNumber;
const int douniuinfo::kIntegralmaxFieldNumber;
const int douniuinfo::kBankermultipleFieldNumber;
const int douniuinfo::kOwneridFieldNumber;
const int douniuinfo::kBankerIDFieldNumber;
const int douniuinfo::kSituserFieldNumber;
const int douniuinfo::kStanduserFieldNumber;
const int douniuinfo::kUsernumFieldNumber;
const int douniuinfo::kUsevipnumFieldNumber;
const int douniuinfo::kDissolveinfoFieldNumber;
const int douniuinfo::kStractionFieldNumber;
const int douniuinfo::kFrameidFieldNumber;
const int douniuinfo::kBasicsmulFieldNumber;
const int douniuinfo::kBankerindexFieldNumber;
const int douniuinfo::kPaywayFieldNumber;
const int douniuinfo::kPaynumFieldNumber;
const int douniuinfo::kPokerlistFieldNumber;
const int douniuinfo::kAutoreadyFieldNumber;
const int douniuinfo::kBankerNoFieldNumber;
#endif  // !_MSC_VER

douniuinfo::douniuinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void douniuinfo::InitAsDefaultInstance() {
}

douniuinfo::douniuinfo(const douniuinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void douniuinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablemark_ = 0;
  tabletime_ = 0;
  state_ = 0;
  timemark_ = 0;
  viptable_ = 0;
  julebuid_ = 0;
  tabletype_ = 0;
  dntype_ = 0;
  difen_ = 0;
  maxplaynum_ = 0;
  paytype_ = 0;
  typeodds_ = 0;
  specialtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  restrict_ = 0;
  integralmax_ = 0;
  bankermultiple_ = 0;
  ownerid_ = 0;
  bankerid_ = 0;
  usernum_ = 0;
  usevipnum_ = 0;
  dissolveinfo_ = 0;
  straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameid_ = 0;
  basicsmul_ = 0;
  bankerindex_ = 0;
  payway_ = 0;
  paynum_ = 0;
  autoready_ = 0;
  banker_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

douniuinfo::~douniuinfo() {
  SharedDtor();
}

void douniuinfo::SharedDtor() {
  if (specialtype_ != &::google::protobuf::internal::kEmptyString) {
    delete specialtype_;
  }
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (this != default_instance_) {
  }
}

void douniuinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* douniuinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return douniuinfo_descriptor_;
}

const douniuinfo& douniuinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fdouniu_2eproto();
  return *default_instance_;
}

douniuinfo* douniuinfo::default_instance_ = NULL;

douniuinfo* douniuinfo::New() const {
  return new douniuinfo;
}

void douniuinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tablemark_ = 0;
    tabletime_ = 0;
    state_ = 0;
    timemark_ = 0;
    viptable_ = 0;
    julebuid_ = 0;
    tabletype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dntype_ = 0;
    difen_ = 0;
    maxplaynum_ = 0;
    paytype_ = 0;
    typeodds_ = 0;
    if (has_specialtype()) {
      if (specialtype_ != &::google::protobuf::internal::kEmptyString) {
        specialtype_->clear();
      }
    }
    restrict_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    integralmax_ = 0;
    bankermultiple_ = 0;
    ownerid_ = 0;
    bankerid_ = 0;
    usernum_ = 0;
    usevipnum_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    dissolveinfo_ = 0;
    if (has_straction()) {
      if (straction_ != &::google::protobuf::internal::kEmptyString) {
        straction_->clear();
      }
    }
    frameid_ = 0;
    basicsmul_ = 0;
    bankerindex_ = 0;
    payway_ = 0;
    paynum_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    autoready_ = 0;
    banker_no_ = 0;
  }
  mullist_.Clear();
  situser_.Clear();
  standuser_.Clear();
  pokerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool douniuinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tablemark;
        break;
      }

      // optional int32 tablemark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemark_)));
          set_has_tablemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tabletime;
        break;
      }

      // optional int32 tabletime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletime_)));
          set_has_tabletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viptable;
        break;
      }

      // optional int32 viptable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viptable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptable_)));
          set_has_viptable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_julebuid;
        break;
      }

      // optional int32 julebuid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebuid_)));
          set_has_julebuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dntype;
        break;
      }

      // optional int32 dntype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dntype_)));
          set_has_dntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_difen;
        break;
      }

      // optional int32 difen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difen_)));
          set_has_difen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_maxplaynum;
        break;
      }

      // optional int32 maxplaynum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxplaynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplaynum_)));
          set_has_maxplaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_paytype;
        break;
      }

      // optional int32 paytype = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytype_)));
          set_has_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mullist;
        break;
      }

      // repeated int32 mullist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mullist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_mullist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mullist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mullist;
        if (input->ExpectTag(112)) goto parse_typeodds;
        break;
      }

      // optional int32 typeodds = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeodds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeodds_)));
          set_has_typeodds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_specialtype;
        break;
      }

      // optional string specialtype = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specialtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specialtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specialtype().data(), this->specialtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_restrict;
        break;
      }

      // optional int32 restrict = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restrict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restrict_)));
          set_has_restrict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_integralmax;
        break;
      }

      // optional int32 integralmax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integralmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integralmax_)));
          set_has_integralmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bankermultiple;
        break;
      }

      // optional int32 bankermultiple = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankermultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankermultiple_)));
          set_has_bankermultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bankerID;
        break;
      }

      // optional int32 bankerID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_situser;
        break;
      }

      // repeated .progame.douniuuser situser = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_situser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_situser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_situser;
        if (input->ExpectTag(176)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_standuser;
        if (input->ExpectTag(184)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_usevipnum;
        break;
      }

      // optional int32 usevipnum = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usevipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usevipnum_)));
          set_has_usevipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_dissolveinfo;
        break;
      }

      // optional int32 dissolveinfo = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolveinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissolveinfo_)));
          set_has_dissolveinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_straction;
        break;
      }

      // optional string straction = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_straction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straction().data(), this->straction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_frameid;
        break;
      }

      // optional int32 frameid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_basicsmul;
        break;
      }

      // optional int32 basicsmul = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basicsmul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basicsmul_)));
          set_has_basicsmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_bankerindex;
        break;
      }

      // optional int32 bankerindex = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerindex_)));
          set_has_bankerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_payway;
        break;
      }

      // optional int32 payway = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payway_)));
          set_has_payway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_paynum;
        break;
      }

      // optional int32 paynum = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paynum_)));
          set_has_paynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_pokerlist;
        break;
      }

      // repeated int32 pokerlist = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 256, input, this->mutable_pokerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pokerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_pokerlist;
        if (input->ExpectTag(264)) goto parse_autoready;
        break;
      }

      // optional int32 autoready = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoready_)));
          set_has_autoready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_banker_no;
        break;
      }

      // optional int32 banker_no = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_no_)));
          set_has_banker_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void douniuinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tablemark(), output);
  }

  // optional int32 tabletime = 3;
  if (has_tabletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tabletime(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  // optional int32 viptable = 6;
  if (has_viptable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viptable(), output);
  }

  // optional int32 julebuid = 7;
  if (has_julebuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->julebuid(), output);
  }

  // optional int32 tabletype = 8;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tabletype(), output);
  }

  // optional int32 dntype = 9;
  if (has_dntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dntype(), output);
  }

  // optional int32 difen = 10;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->difen(), output);
  }

  // optional int32 maxplaynum = 11;
  if (has_maxplaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxplaynum(), output);
  }

  // optional int32 paytype = 12;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->paytype(), output);
  }

  // repeated int32 mullist = 13;
  for (int i = 0; i < this->mullist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->mullist(i), output);
  }

  // optional int32 typeodds = 14;
  if (has_typeodds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->typeodds(), output);
  }

  // optional string specialtype = 15;
  if (has_specialtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialtype().data(), this->specialtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->specialtype(), output);
  }

  // optional int32 restrict = 16;
  if (has_restrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->restrict(), output);
  }

  // optional int32 integralmax = 17;
  if (has_integralmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->integralmax(), output);
  }

  // optional int32 bankermultiple = 18;
  if (has_bankermultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bankermultiple(), output);
  }

  // optional int32 ownerid = 19;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ownerid(), output);
  }

  // optional int32 bankerID = 20;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bankerid(), output);
  }

  // repeated .progame.douniuuser situser = 21;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->situser(i), output);
  }

  // repeated int32 standuser = 22;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->standuser(i), output);
  }

  // optional int32 usernum = 23;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->usernum(), output);
  }

  // optional int32 usevipnum = 24;
  if (has_usevipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->usevipnum(), output);
  }

  // optional int32 dissolveinfo = 25;
  if (has_dissolveinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->dissolveinfo(), output);
  }

  // optional string straction = 26;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->straction(), output);
  }

  // optional int32 frameid = 27;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->frameid(), output);
  }

  // optional int32 basicsmul = 28;
  if (has_basicsmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->basicsmul(), output);
  }

  // optional int32 bankerindex = 29;
  if (has_bankerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->bankerindex(), output);
  }

  // optional int32 payway = 30;
  if (has_payway()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->payway(), output);
  }

  // optional int32 paynum = 31;
  if (has_paynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->paynum(), output);
  }

  // repeated int32 pokerlist = 32;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      32, this->pokerlist(i), output);
  }

  // optional int32 autoready = 33;
  if (has_autoready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->autoready(), output);
  }

  // optional int32 banker_no = 34;
  if (has_banker_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->banker_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* douniuinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tablemark(), target);
  }

  // optional int32 tabletime = 3;
  if (has_tabletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tabletime(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  // optional int32 viptable = 6;
  if (has_viptable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viptable(), target);
  }

  // optional int32 julebuid = 7;
  if (has_julebuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->julebuid(), target);
  }

  // optional int32 tabletype = 8;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tabletype(), target);
  }

  // optional int32 dntype = 9;
  if (has_dntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dntype(), target);
  }

  // optional int32 difen = 10;
  if (has_difen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->difen(), target);
  }

  // optional int32 maxplaynum = 11;
  if (has_maxplaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxplaynum(), target);
  }

  // optional int32 paytype = 12;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->paytype(), target);
  }

  // repeated int32 mullist = 13;
  for (int i = 0; i < this->mullist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->mullist(i), target);
  }

  // optional int32 typeodds = 14;
  if (has_typeodds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->typeodds(), target);
  }

  // optional string specialtype = 15;
  if (has_specialtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialtype().data(), this->specialtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->specialtype(), target);
  }

  // optional int32 restrict = 16;
  if (has_restrict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->restrict(), target);
  }

  // optional int32 integralmax = 17;
  if (has_integralmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->integralmax(), target);
  }

  // optional int32 bankermultiple = 18;
  if (has_bankermultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bankermultiple(), target);
  }

  // optional int32 ownerid = 19;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ownerid(), target);
  }

  // optional int32 bankerID = 20;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bankerid(), target);
  }

  // repeated .progame.douniuuser situser = 21;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->situser(i), target);
  }

  // repeated int32 standuser = 22;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->standuser(i), target);
  }

  // optional int32 usernum = 23;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->usernum(), target);
  }

  // optional int32 usevipnum = 24;
  if (has_usevipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->usevipnum(), target);
  }

  // optional int32 dissolveinfo = 25;
  if (has_dissolveinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->dissolveinfo(), target);
  }

  // optional string straction = 26;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->straction(), target);
  }

  // optional int32 frameid = 27;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->frameid(), target);
  }

  // optional int32 basicsmul = 28;
  if (has_basicsmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->basicsmul(), target);
  }

  // optional int32 bankerindex = 29;
  if (has_bankerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->bankerindex(), target);
  }

  // optional int32 payway = 30;
  if (has_payway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->payway(), target);
  }

  // optional int32 paynum = 31;
  if (has_paynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->paynum(), target);
  }

  // repeated int32 pokerlist = 32;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(32, this->pokerlist(i), target);
  }

  // optional int32 autoready = 33;
  if (has_autoready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->autoready(), target);
  }

  // optional int32 banker_no = 34;
  if (has_banker_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->banker_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int douniuinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tablemark = 2;
    if (has_tablemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemark());
    }

    // optional int32 tabletime = 3;
    if (has_tabletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletime());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 viptable = 6;
    if (has_viptable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptable());
    }

    // optional int32 julebuid = 7;
    if (has_julebuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebuid());
    }

    // optional int32 tabletype = 8;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dntype = 9;
    if (has_dntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dntype());
    }

    // optional int32 difen = 10;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difen());
    }

    // optional int32 maxplaynum = 11;
    if (has_maxplaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplaynum());
    }

    // optional int32 paytype = 12;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }

    // optional int32 typeodds = 14;
    if (has_typeodds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeodds());
    }

    // optional string specialtype = 15;
    if (has_specialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specialtype());
    }

    // optional int32 restrict = 16;
    if (has_restrict()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restrict());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 integralmax = 17;
    if (has_integralmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integralmax());
    }

    // optional int32 bankermultiple = 18;
    if (has_bankermultiple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankermultiple());
    }

    // optional int32 ownerid = 19;
    if (has_ownerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // optional int32 bankerID = 20;
    if (has_bankerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional int32 usernum = 23;
    if (has_usernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

    // optional int32 usevipnum = 24;
    if (has_usevipnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usevipnum());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 dissolveinfo = 25;
    if (has_dissolveinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissolveinfo());
    }

    // optional string straction = 26;
    if (has_straction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straction());
    }

    // optional int32 frameid = 27;
    if (has_frameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 basicsmul = 28;
    if (has_basicsmul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basicsmul());
    }

    // optional int32 bankerindex = 29;
    if (has_bankerindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerindex());
    }

    // optional int32 payway = 30;
    if (has_payway()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payway());
    }

    // optional int32 paynum = 31;
    if (has_paynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paynum());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 autoready = 33;
    if (has_autoready()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoready());
    }

    // optional int32 banker_no = 34;
    if (has_banker_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_no());
    }

  }
  // repeated int32 mullist = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->mullist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mullist(i));
    }
    total_size += 1 * this->mullist_size() + data_size;
  }

  // repeated .progame.douniuuser situser = 21;
  total_size += 2 * this->situser_size();
  for (int i = 0; i < this->situser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->situser(i));
  }

  // repeated int32 standuser = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 2 * this->standuser_size() + data_size;
  }

  // repeated int32 pokerlist = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->pokerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pokerlist(i));
    }
    total_size += 2 * this->pokerlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void douniuinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const douniuinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const douniuinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void douniuinfo::MergeFrom(const douniuinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mullist_.MergeFrom(from.mullist_);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  pokerlist_.MergeFrom(from.pokerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablemark()) {
      set_tablemark(from.tablemark());
    }
    if (from.has_tabletime()) {
      set_tabletime(from.tabletime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_viptable()) {
      set_viptable(from.viptable());
    }
    if (from.has_julebuid()) {
      set_julebuid(from.julebuid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dntype()) {
      set_dntype(from.dntype());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_maxplaynum()) {
      set_maxplaynum(from.maxplaynum());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_typeodds()) {
      set_typeodds(from.typeodds());
    }
    if (from.has_specialtype()) {
      set_specialtype(from.specialtype());
    }
    if (from.has_restrict()) {
      set_restrict(from.restrict());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_integralmax()) {
      set_integralmax(from.integralmax());
    }
    if (from.has_bankermultiple()) {
      set_bankermultiple(from.bankermultiple());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_usevipnum()) {
      set_usevipnum(from.usevipnum());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dissolveinfo()) {
      set_dissolveinfo(from.dissolveinfo());
    }
    if (from.has_straction()) {
      set_straction(from.straction());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_basicsmul()) {
      set_basicsmul(from.basicsmul());
    }
    if (from.has_bankerindex()) {
      set_bankerindex(from.bankerindex());
    }
    if (from.has_payway()) {
      set_payway(from.payway());
    }
    if (from.has_paynum()) {
      set_paynum(from.paynum());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_autoready()) {
      set_autoready(from.autoready());
    }
    if (from.has_banker_no()) {
      set_banker_no(from.banker_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void douniuinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void douniuinfo::CopyFrom(const douniuinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool douniuinfo::IsInitialized() const {

  return true;
}

void douniuinfo::Swap(douniuinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablemark_, other->tablemark_);
    std::swap(tabletime_, other->tabletime_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    std::swap(viptable_, other->viptable_);
    std::swap(julebuid_, other->julebuid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(dntype_, other->dntype_);
    std::swap(difen_, other->difen_);
    std::swap(maxplaynum_, other->maxplaynum_);
    std::swap(paytype_, other->paytype_);
    mullist_.Swap(&other->mullist_);
    std::swap(typeodds_, other->typeodds_);
    std::swap(specialtype_, other->specialtype_);
    std::swap(restrict_, other->restrict_);
    std::swap(integralmax_, other->integralmax_);
    std::swap(bankermultiple_, other->bankermultiple_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(bankerid_, other->bankerid_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    std::swap(usernum_, other->usernum_);
    std::swap(usevipnum_, other->usevipnum_);
    std::swap(dissolveinfo_, other->dissolveinfo_);
    std::swap(straction_, other->straction_);
    std::swap(frameid_, other->frameid_);
    std::swap(basicsmul_, other->basicsmul_);
    std::swap(bankerindex_, other->bankerindex_);
    std::swap(payway_, other->payway_);
    std::swap(paynum_, other->paynum_);
    pokerlist_.Swap(&other->pokerlist_);
    std::swap(autoready_, other->autoready_);
    std::swap(banker_no_, other->banker_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata douniuinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = douniuinfo_descriptor_;
  metadata.reflection = douniuinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int douniuhandpoker::kHandpokerFieldNumber;
#endif  // !_MSC_VER

douniuhandpoker::douniuhandpoker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void douniuhandpoker::InitAsDefaultInstance() {
}

douniuhandpoker::douniuhandpoker(const douniuhandpoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void douniuhandpoker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

douniuhandpoker::~douniuhandpoker() {
  SharedDtor();
}

void douniuhandpoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void douniuhandpoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* douniuhandpoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return douniuhandpoker_descriptor_;
}

const douniuhandpoker& douniuhandpoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fdouniu_2eproto();
  return *default_instance_;
}

douniuhandpoker* douniuhandpoker::default_instance_ = NULL;

douniuhandpoker* douniuhandpoker::New() const {
  return new douniuhandpoker;
}

void douniuhandpoker::Clear() {
  handpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool douniuhandpoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 handpoker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_handpoker;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void douniuhandpoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 handpoker = 1;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->handpoker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* douniuhandpoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 handpoker = 1;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->handpoker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int douniuhandpoker::ByteSize() const {
  int total_size = 0;

  // repeated int32 handpoker = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void douniuhandpoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const douniuhandpoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const douniuhandpoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void douniuhandpoker::MergeFrom(const douniuhandpoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void douniuhandpoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void douniuhandpoker::CopyFrom(const douniuhandpoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool douniuhandpoker::IsInitialized() const {

  return true;
}

void douniuhandpoker::Swap(douniuhandpoker* other) {
  if (other != this) {
    handpoker_.Swap(&other->handpoker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata douniuhandpoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = douniuhandpoker_descriptor_;
  metadata.reflection = douniuhandpoker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int douniuspecialtype::kZhadanFieldNumber;
const int douniuspecialtype::kWuhuaFieldNumber;
const int douniuspecialtype::kWuxiaoFieldNumber;
#endif  // !_MSC_VER

douniuspecialtype::douniuspecialtype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void douniuspecialtype::InitAsDefaultInstance() {
}

douniuspecialtype::douniuspecialtype(const douniuspecialtype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void douniuspecialtype::SharedCtor() {
  _cached_size_ = 0;
  zhadan_ = 0;
  wuhua_ = 0;
  wuxiao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

douniuspecialtype::~douniuspecialtype() {
  SharedDtor();
}

void douniuspecialtype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void douniuspecialtype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* douniuspecialtype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return douniuspecialtype_descriptor_;
}

const douniuspecialtype& douniuspecialtype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fdouniu_2eproto();
  return *default_instance_;
}

douniuspecialtype* douniuspecialtype::default_instance_ = NULL;

douniuspecialtype* douniuspecialtype::New() const {
  return new douniuspecialtype;
}

void douniuspecialtype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zhadan_ = 0;
    wuhua_ = 0;
    wuxiao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool douniuspecialtype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zhadan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhadan_)));
          set_has_zhadan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wuhua;
        break;
      }

      // optional int32 wuhua = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wuhua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wuhua_)));
          set_has_wuhua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wuxiao;
        break;
      }

      // optional int32 wuxiao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wuxiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wuxiao_)));
          set_has_wuxiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void douniuspecialtype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 zhadan = 1;
  if (has_zhadan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zhadan(), output);
  }

  // optional int32 wuhua = 2;
  if (has_wuhua()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wuhua(), output);
  }

  // optional int32 wuxiao = 3;
  if (has_wuxiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wuxiao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* douniuspecialtype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 zhadan = 1;
  if (has_zhadan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zhadan(), target);
  }

  // optional int32 wuhua = 2;
  if (has_wuhua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wuhua(), target);
  }

  // optional int32 wuxiao = 3;
  if (has_wuxiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wuxiao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int douniuspecialtype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zhadan = 1;
    if (has_zhadan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhadan());
    }

    // optional int32 wuhua = 2;
    if (has_wuhua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wuhua());
    }

    // optional int32 wuxiao = 3;
    if (has_wuxiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wuxiao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void douniuspecialtype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const douniuspecialtype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const douniuspecialtype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void douniuspecialtype::MergeFrom(const douniuspecialtype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zhadan()) {
      set_zhadan(from.zhadan());
    }
    if (from.has_wuhua()) {
      set_wuhua(from.wuhua());
    }
    if (from.has_wuxiao()) {
      set_wuxiao(from.wuxiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void douniuspecialtype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void douniuspecialtype::CopyFrom(const douniuspecialtype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool douniuspecialtype::IsInitialized() const {

  return true;
}

void douniuspecialtype::Swap(douniuspecialtype* other) {
  if (other != this) {
    std::swap(zhadan_, other->zhadan_);
    std::swap(wuhua_, other->wuhua_);
    std::swap(wuxiao_, other->wuxiao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata douniuspecialtype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = douniuspecialtype_descriptor_;
  metadata.reflection = douniuspecialtype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int douniuhistoryitem::kLegFieldNumber;
const int douniuhistoryitem::kBankerIDFieldNumber;
const int douniuhistoryitem::kUseridlistFieldNumber;
const int douniuhistoryitem::kNicklistFieldNumber;
const int douniuhistoryitem::kWinlistFieldNumber;
const int douniuhistoryitem::kPokerlistFieldNumber;
const int douniuhistoryitem::kNntypelistFieldNumber;
const int douniuhistoryitem::kQzbslistFieldNumber;
const int douniuhistoryitem::kPournumlistFieldNumber;
#endif  // !_MSC_VER

douniuhistoryitem::douniuhistoryitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void douniuhistoryitem::InitAsDefaultInstance() {
}

douniuhistoryitem::douniuhistoryitem(const douniuhistoryitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void douniuhistoryitem::SharedCtor() {
  _cached_size_ = 0;
  leg_ = 0;
  bankerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

douniuhistoryitem::~douniuhistoryitem() {
  SharedDtor();
}

void douniuhistoryitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void douniuhistoryitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* douniuhistoryitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return douniuhistoryitem_descriptor_;
}

const douniuhistoryitem& douniuhistoryitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fdouniu_2eproto();
  return *default_instance_;
}

douniuhistoryitem* douniuhistoryitem::default_instance_ = NULL;

douniuhistoryitem* douniuhistoryitem::New() const {
  return new douniuhistoryitem;
}

void douniuhistoryitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leg_ = 0;
    bankerid_ = 0;
  }
  useridlist_.Clear();
  nicklist_.Clear();
  winlist_.Clear();
  pokerlist_.Clear();
  nntypelist_.Clear();
  qzbslist_.Clear();
  pournumlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool douniuhistoryitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leg_)));
          set_has_leg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bankerID;
        break;
      }

      // optional int32 bankerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useridlist;
        if (input->ExpectTag(34)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nicklist;
        if (input->ExpectTag(40)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winlist;
        if (input->ExpectTag(50)) goto parse_pokerlist;
        break;
      }

      // repeated .progame.douniuhandpoker pokerlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pokerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pokerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pokerlist;
        if (input->ExpectTag(56)) goto parse_nntypelist;
        break;
      }

      // repeated int32 nntypelist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nntypelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_nntypelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nntypelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nntypelist;
        if (input->ExpectTag(64)) goto parse_qzbslist;
        break;
      }

      // repeated int32 qzbslist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qzbslist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_qzbslist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qzbslist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_qzbslist;
        if (input->ExpectTag(72)) goto parse_pournumlist;
        break;
      }

      // repeated int32 pournumlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pournumlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_pournumlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pournumlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pournumlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void douniuhistoryitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 leg = 1;
  if (has_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leg(), output);
  }

  // optional int32 bankerID = 2;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerid(), output);
  }

  // repeated int32 useridlist = 3;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->useridlist(i), output);
  }

  // repeated string nicklist = 4;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nicklist(i), output);
  }

  // repeated int32 winlist = 5;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->winlist(i), output);
  }

  // repeated .progame.douniuhandpoker pokerlist = 6;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pokerlist(i), output);
  }

  // repeated int32 nntypelist = 7;
  for (int i = 0; i < this->nntypelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->nntypelist(i), output);
  }

  // repeated int32 qzbslist = 8;
  for (int i = 0; i < this->qzbslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->qzbslist(i), output);
  }

  // repeated int32 pournumlist = 9;
  for (int i = 0; i < this->pournumlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->pournumlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* douniuhistoryitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 leg = 1;
  if (has_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leg(), target);
  }

  // optional int32 bankerID = 2;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerid(), target);
  }

  // repeated int32 useridlist = 3;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->useridlist(i), target);
  }

  // repeated string nicklist = 4;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->nicklist(i), target);
  }

  // repeated int32 winlist = 5;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->winlist(i), target);
  }

  // repeated .progame.douniuhandpoker pokerlist = 6;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pokerlist(i), target);
  }

  // repeated int32 nntypelist = 7;
  for (int i = 0; i < this->nntypelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->nntypelist(i), target);
  }

  // repeated int32 qzbslist = 8;
  for (int i = 0; i < this->qzbslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->qzbslist(i), target);
  }

  // repeated int32 pournumlist = 9;
  for (int i = 0; i < this->pournumlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->pournumlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int douniuhistoryitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 leg = 1;
    if (has_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leg());
    }

    // optional int32 bankerID = 2;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

  }
  // repeated int32 useridlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated string nicklist = 4;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 winlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated .progame.douniuhandpoker pokerlist = 6;
  total_size += 1 * this->pokerlist_size();
  for (int i = 0; i < this->pokerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokerlist(i));
  }

  // repeated int32 nntypelist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->nntypelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nntypelist(i));
    }
    total_size += 1 * this->nntypelist_size() + data_size;
  }

  // repeated int32 qzbslist = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->qzbslist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qzbslist(i));
    }
    total_size += 1 * this->qzbslist_size() + data_size;
  }

  // repeated int32 pournumlist = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->pournumlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pournumlist(i));
    }
    total_size += 1 * this->pournumlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void douniuhistoryitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const douniuhistoryitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const douniuhistoryitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void douniuhistoryitem::MergeFrom(const douniuhistoryitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  nicklist_.MergeFrom(from.nicklist_);
  winlist_.MergeFrom(from.winlist_);
  pokerlist_.MergeFrom(from.pokerlist_);
  nntypelist_.MergeFrom(from.nntypelist_);
  qzbslist_.MergeFrom(from.qzbslist_);
  pournumlist_.MergeFrom(from.pournumlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg()) {
      set_leg(from.leg());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void douniuhistoryitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void douniuhistoryitem::CopyFrom(const douniuhistoryitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool douniuhistoryitem::IsInitialized() const {

  return true;
}

void douniuhistoryitem::Swap(douniuhistoryitem* other) {
  if (other != this) {
    std::swap(leg_, other->leg_);
    std::swap(bankerid_, other->bankerid_);
    useridlist_.Swap(&other->useridlist_);
    nicklist_.Swap(&other->nicklist_);
    winlist_.Swap(&other->winlist_);
    pokerlist_.Swap(&other->pokerlist_);
    nntypelist_.Swap(&other->nntypelist_);
    qzbslist_.Swap(&other->qzbslist_);
    pournumlist_.Swap(&other->pournumlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata douniuhistoryitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = douniuhistoryitem_descriptor_;
  metadata.reflection = douniuhistoryitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int douniuhistory::kTableidFieldNumber;
const int douniuhistory::kPlaynummaxFieldNumber;
const int douniuhistory::kPlaynumFieldNumber;
const int douniuhistory::kDifenFieldNumber;
const int douniuhistory::kDntypelistFieldNumber;
const int douniuhistory::kGametimeFieldNumber;
const int douniuhistory::kOwneridFieldNumber;
const int douniuhistory::kNicklistFieldNumber;
const int douniuhistory::kUseridlistFieldNumber;
const int douniuhistory::kWinlistFieldNumber;
const int douniuhistory::kHitemlistFieldNumber;
const int douniuhistory::kTablemarkFieldNumber;
#endif  // !_MSC_VER

douniuhistory::douniuhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void douniuhistory::InitAsDefaultInstance() {
}

douniuhistory::douniuhistory(const douniuhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void douniuhistory::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  playnummax_ = 0;
  playnum_ = 0;
  difen_ = 0;
  dntypelist_ = 0;
  gametime_ = 0;
  ownerid_ = 0;
  tablemark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

douniuhistory::~douniuhistory() {
  SharedDtor();
}

void douniuhistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void douniuhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* douniuhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return douniuhistory_descriptor_;
}

const douniuhistory& douniuhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fdouniu_2eproto();
  return *default_instance_;
}

douniuhistory* douniuhistory::default_instance_ = NULL;

douniuhistory* douniuhistory::New() const {
  return new douniuhistory;
}

void douniuhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    playnummax_ = 0;
    playnum_ = 0;
    difen_ = 0;
    dntypelist_ = 0;
    gametime_ = 0;
    ownerid_ = 0;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    tablemark_ = 0;
  }
  nicklist_.Clear();
  useridlist_.Clear();
  winlist_.Clear();
  hitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool douniuhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playnummax;
        break;
      }

      // optional int32 playnummax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playnummax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnummax_)));
          set_has_playnummax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playnum;
        break;
      }

      // optional int32 playnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnum_)));
          set_has_playnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_difen;
        break;
      }

      // optional int32 difen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difen_)));
          set_has_difen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dntypelist;
        break;
      }

      // optional int32 dntypelist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dntypelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dntypelist_)));
          set_has_dntypelist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gametime;
        break;
      }

      // optional int32 gametime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nicklist;
        if (input->ExpectTag(72)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_useridlist;
        if (input->ExpectTag(80)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_winlist;
        if (input->ExpectTag(90)) goto parse_hitemlist;
        break;
      }

      // repeated .progame.douniuhistoryitem hitemlist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hitemlist;
        if (input->ExpectTag(96)) goto parse_tablemark;
        break;
      }

      // optional int32 tablemark = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemark_)));
          set_has_tablemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void douniuhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 playnummax = 2;
  if (has_playnummax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playnummax(), output);
  }

  // optional int32 playnum = 3;
  if (has_playnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playnum(), output);
  }

  // optional int32 difen = 4;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difen(), output);
  }

  // optional int32 dntypelist = 5;
  if (has_dntypelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dntypelist(), output);
  }

  // optional int32 gametime = 6;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gametime(), output);
  }

  // optional int32 ownerid = 7;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ownerid(), output);
  }

  // repeated string nicklist = 8;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->nicklist(i), output);
  }

  // repeated int32 useridlist = 9;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->useridlist(i), output);
  }

  // repeated int32 winlist = 10;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->winlist(i), output);
  }

  // repeated .progame.douniuhistoryitem hitemlist = 11;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hitemlist(i), output);
  }

  // optional int32 tablemark = 12;
  if (has_tablemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tablemark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* douniuhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 playnummax = 2;
  if (has_playnummax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playnummax(), target);
  }

  // optional int32 playnum = 3;
  if (has_playnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playnum(), target);
  }

  // optional int32 difen = 4;
  if (has_difen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difen(), target);
  }

  // optional int32 dntypelist = 5;
  if (has_dntypelist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dntypelist(), target);
  }

  // optional int32 gametime = 6;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gametime(), target);
  }

  // optional int32 ownerid = 7;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ownerid(), target);
  }

  // repeated string nicklist = 8;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->nicklist(i), target);
  }

  // repeated int32 useridlist = 9;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->useridlist(i), target);
  }

  // repeated int32 winlist = 10;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->winlist(i), target);
  }

  // repeated .progame.douniuhistoryitem hitemlist = 11;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hitemlist(i), target);
  }

  // optional int32 tablemark = 12;
  if (has_tablemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tablemark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int douniuhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 playnummax = 2;
    if (has_playnummax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnummax());
    }

    // optional int32 playnum = 3;
    if (has_playnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnum());
    }

    // optional int32 difen = 4;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difen());
    }

    // optional int32 dntypelist = 5;
    if (has_dntypelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dntypelist());
    }

    // optional int32 gametime = 6;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametime());
    }

    // optional int32 ownerid = 7;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional int32 tablemark = 12;
    if (has_tablemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemark());
    }

  }
  // repeated string nicklist = 8;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 useridlist = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated int32 winlist = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated .progame.douniuhistoryitem hitemlist = 11;
  total_size += 1 * this->hitemlist_size();
  for (int i = 0; i < this->hitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void douniuhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const douniuhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const douniuhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void douniuhistory::MergeFrom(const douniuhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  nicklist_.MergeFrom(from.nicklist_);
  useridlist_.MergeFrom(from.useridlist_);
  winlist_.MergeFrom(from.winlist_);
  hitemlist_.MergeFrom(from.hitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_playnummax()) {
      set_playnummax(from.playnummax());
    }
    if (from.has_playnum()) {
      set_playnum(from.playnum());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_dntypelist()) {
      set_dntypelist(from.dntypelist());
    }
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_tablemark()) {
      set_tablemark(from.tablemark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void douniuhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void douniuhistory::CopyFrom(const douniuhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool douniuhistory::IsInitialized() const {

  return true;
}

void douniuhistory::Swap(douniuhistory* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(playnummax_, other->playnummax_);
    std::swap(playnum_, other->playnum_);
    std::swap(difen_, other->difen_);
    std::swap(dntypelist_, other->dntypelist_);
    std::swap(gametime_, other->gametime_);
    std::swap(ownerid_, other->ownerid_);
    nicklist_.Swap(&other->nicklist_);
    useridlist_.Swap(&other->useridlist_);
    winlist_.Swap(&other->winlist_);
    hitemlist_.Swap(&other->hitemlist_);
    std::swap(tablemark_, other->tablemark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata douniuhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = douniuhistory_descriptor_;
  metadata.reflection = douniuhistory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
