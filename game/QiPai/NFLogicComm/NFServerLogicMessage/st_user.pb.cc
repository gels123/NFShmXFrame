// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* rosterinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rosterinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fuser_2eproto() {
  protobuf_AddDesc_st_5fuser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_user.proto");
  GOOGLE_CHECK(file != NULL);
  rosterinfo_descriptor_ = file->message_type(0);
  static const int rosterinfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, rostertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, optmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, probability_),
  };
  rosterinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rosterinfo_descriptor_,
      rosterinfo::default_instance_,
      rosterinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rosterinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rosterinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fuser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rosterinfo_descriptor_, &rosterinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fuser_2eproto() {
  delete rosterinfo::default_instance_;
  delete rosterinfo_reflection_;
}

void protobuf_AddDesc_st_5fuser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_user.proto\022\007progame\"\237\001\n\nrosterinfo\022"
    "\016\n\006userid\030\001 \001(\005\022\020\n\010gametype\030\002 \003(\005\022\021\n\ttab"
    "letype\030\003 \003(\005\022\022\n\nrostertype\030\004 \003(\005\022\021\n\tstar"
    "ttime\030\005 \003(\005\022\017\n\007endtime\030\006 \003(\005\022\017\n\007optmark\030"
    "\007 \003(\005\022\023\n\013probability\030\010 \003(\002", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_user.proto", &protobuf_RegisterTypes);
  rosterinfo::default_instance_ = new rosterinfo();
  rosterinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fuser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fuser_2eproto {
  StaticDescriptorInitializer_st_5fuser_2eproto() {
    protobuf_AddDesc_st_5fuser_2eproto();
  }
} static_descriptor_initializer_st_5fuser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rosterinfo::kUseridFieldNumber;
const int rosterinfo::kGametypeFieldNumber;
const int rosterinfo::kTabletypeFieldNumber;
const int rosterinfo::kRostertypeFieldNumber;
const int rosterinfo::kStarttimeFieldNumber;
const int rosterinfo::kEndtimeFieldNumber;
const int rosterinfo::kOptmarkFieldNumber;
const int rosterinfo::kProbabilityFieldNumber;
#endif  // !_MSC_VER

rosterinfo::rosterinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rosterinfo::InitAsDefaultInstance() {
}

rosterinfo::rosterinfo(const rosterinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rosterinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rosterinfo::~rosterinfo() {
  SharedDtor();
}

void rosterinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rosterinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rosterinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rosterinfo_descriptor_;
}

const rosterinfo& rosterinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fuser_2eproto();
  return *default_instance_;
}

rosterinfo* rosterinfo::default_instance_ = NULL;

rosterinfo* rosterinfo::New() const {
  return new rosterinfo;
}

void rosterinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  gametype_.Clear();
  tabletype_.Clear();
  rostertype_.Clear();
  starttime_.Clear();
  endtime_.Clear();
  optmark_.Clear();
  probability_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rosterinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gametype;
        break;
      }

      // repeated int32 gametype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_gametype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gametype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gametype;
        if (input->ExpectTag(24)) goto parse_tabletype;
        break;
      }

      // repeated int32 tabletype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_tabletype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tabletype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tabletype;
        if (input->ExpectTag(32)) goto parse_rostertype;
        break;
      }

      // repeated int32 rostertype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rostertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_rostertype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rostertype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rostertype;
        if (input->ExpectTag(40)) goto parse_starttime;
        break;
      }

      // repeated int32 starttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_starttime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_starttime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_starttime;
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // repeated int32 endtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_endtime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_endtime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        if (input->ExpectTag(56)) goto parse_optmark;
        break;
      }

      // repeated int32 optmark = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optmark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_optmark())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_optmark())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_optmark;
        if (input->ExpectTag(69)) goto parse_probability;
        break;
      }

      // repeated float probability = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_probability())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_probability())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_probability;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rosterinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated int32 gametype = 2;
  for (int i = 0; i < this->gametype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->gametype(i), output);
  }

  // repeated int32 tabletype = 3;
  for (int i = 0; i < this->tabletype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->tabletype(i), output);
  }

  // repeated int32 rostertype = 4;
  for (int i = 0; i < this->rostertype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->rostertype(i), output);
  }

  // repeated int32 starttime = 5;
  for (int i = 0; i < this->starttime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->starttime(i), output);
  }

  // repeated int32 endtime = 6;
  for (int i = 0; i < this->endtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->endtime(i), output);
  }

  // repeated int32 optmark = 7;
  for (int i = 0; i < this->optmark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->optmark(i), output);
  }

  // repeated float probability = 8;
  for (int i = 0; i < this->probability_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->probability(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rosterinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated int32 gametype = 2;
  for (int i = 0; i < this->gametype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->gametype(i), target);
  }

  // repeated int32 tabletype = 3;
  for (int i = 0; i < this->tabletype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->tabletype(i), target);
  }

  // repeated int32 rostertype = 4;
  for (int i = 0; i < this->rostertype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->rostertype(i), target);
  }

  // repeated int32 starttime = 5;
  for (int i = 0; i < this->starttime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->starttime(i), target);
  }

  // repeated int32 endtime = 6;
  for (int i = 0; i < this->endtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->endtime(i), target);
  }

  // repeated int32 optmark = 7;
  for (int i = 0; i < this->optmark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->optmark(i), target);
  }

  // repeated float probability = 8;
  for (int i = 0; i < this->probability_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->probability(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rosterinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  // repeated int32 gametype = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gametype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gametype(i));
    }
    total_size += 1 * this->gametype_size() + data_size;
  }

  // repeated int32 tabletype = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->tabletype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tabletype(i));
    }
    total_size += 1 * this->tabletype_size() + data_size;
  }

  // repeated int32 rostertype = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rostertype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rostertype(i));
    }
    total_size += 1 * this->rostertype_size() + data_size;
  }

  // repeated int32 starttime = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->starttime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->starttime(i));
    }
    total_size += 1 * this->starttime_size() + data_size;
  }

  // repeated int32 endtime = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->endtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->endtime(i));
    }
    total_size += 1 * this->endtime_size() + data_size;
  }

  // repeated int32 optmark = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->optmark_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->optmark(i));
    }
    total_size += 1 * this->optmark_size() + data_size;
  }

  // repeated float probability = 8;
  {
    int data_size = 0;
    data_size = 4 * this->probability_size();
    total_size += 1 * this->probability_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rosterinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rosterinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rosterinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rosterinfo::MergeFrom(const rosterinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gametype_.MergeFrom(from.gametype_);
  tabletype_.MergeFrom(from.tabletype_);
  rostertype_.MergeFrom(from.rostertype_);
  starttime_.MergeFrom(from.starttime_);
  endtime_.MergeFrom(from.endtime_);
  optmark_.MergeFrom(from.optmark_);
  probability_.MergeFrom(from.probability_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rosterinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rosterinfo::CopyFrom(const rosterinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rosterinfo::IsInitialized() const {

  return true;
}

void rosterinfo::Swap(rosterinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    gametype_.Swap(&other->gametype_);
    tabletype_.Swap(&other->tabletype_);
    rostertype_.Swap(&other->rostertype_);
    starttime_.Swap(&other->starttime_);
    endtime_.Swap(&other->endtime_);
    optmark_.Swap(&other->optmark_);
    probability_.Swap(&other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rosterinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rosterinfo_descriptor_;
  metadata.reflection = rosterinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
