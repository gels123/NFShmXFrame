// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_tgpd.proto

#ifndef PROTOBUF_st_5ftgpd_2eproto__INCLUDED
#define PROTOBUF_st_5ftgpd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5ftgpd_2eproto();
void protobuf_AssignDesc_st_5ftgpd_2eproto();
void protobuf_ShutdownFile_st_5ftgpd_2eproto();

class tgpdinfo;
class tgpdpoint;
class tgpdgemcolumn;
class tgpdscoreitem;
class tgpdscorelist;
class tgpdpriavedata;

// ===================================================================

class tgpdinfo : public ::google::protobuf::Message {
 public:
  tgpdinfo();
  virtual ~tgpdinfo();

  tgpdinfo(const tgpdinfo& from);

  inline tgpdinfo& operator=(const tgpdinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tgpdinfo& default_instance();

  void Swap(tgpdinfo* other);

  // implements Message ----------------------------------------------

  tgpdinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tgpdinfo& from);
  void MergeFrom(const tgpdinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 2;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 2;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 4;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 4;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated int32 useridlist = 5;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 5;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // optional string minjetton = 6;
  inline bool has_minjetton() const;
  inline void clear_minjetton();
  static const int kMinjettonFieldNumber = 6;
  inline const ::std::string& minjetton() const;
  inline void set_minjetton(const ::std::string& value);
  inline void set_minjetton(const char* value);
  inline void set_minjetton(const char* value, size_t size);
  inline ::std::string* mutable_minjetton();
  inline ::std::string* release_minjetton();
  inline void set_allocated_minjetton(::std::string* minjetton);

  // optional int32 bankerid = 8;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankeridFieldNumber = 8;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // optional string bankerjetton = 9;
  inline bool has_bankerjetton() const;
  inline void clear_bankerjetton();
  static const int kBankerjettonFieldNumber = 9;
  inline const ::std::string& bankerjetton() const;
  inline void set_bankerjetton(const ::std::string& value);
  inline void set_bankerjetton(const char* value);
  inline void set_bankerjetton(const char* value, size_t size);
  inline ::std::string* mutable_bankerjetton();
  inline ::std::string* release_bankerjetton();
  inline void set_allocated_bankerjetton(::std::string* bankerjetton);

  // optional string bankername = 10;
  inline bool has_bankername() const;
  inline void clear_bankername();
  static const int kBankernameFieldNumber = 10;
  inline const ::std::string& bankername() const;
  inline void set_bankername(const ::std::string& value);
  inline void set_bankername(const char* value);
  inline void set_bankername(const char* value, size_t size);
  inline ::std::string* mutable_bankername();
  inline ::std::string* release_bankername();
  inline void set_allocated_bankername(::std::string* bankername);

  // optional string bankerfaceid = 11;
  inline bool has_bankerfaceid() const;
  inline void clear_bankerfaceid();
  static const int kBankerfaceidFieldNumber = 11;
  inline const ::std::string& bankerfaceid() const;
  inline void set_bankerfaceid(const ::std::string& value);
  inline void set_bankerfaceid(const char* value);
  inline void set_bankerfaceid(const char* value, size_t size);
  inline ::std::string* mutable_bankerfaceid();
  inline ::std::string* release_bankerfaceid();
  inline void set_allocated_bankerfaceid(::std::string* bankerfaceid);

  // optional string bankerlimit = 12;
  inline bool has_bankerlimit() const;
  inline void clear_bankerlimit();
  static const int kBankerlimitFieldNumber = 12;
  inline const ::std::string& bankerlimit() const;
  inline void set_bankerlimit(const ::std::string& value);
  inline void set_bankerlimit(const char* value);
  inline void set_bankerlimit(const char* value, size_t size);
  inline ::std::string* mutable_bankerlimit();
  inline ::std::string* release_bankerlimit();
  inline void set_allocated_bankerlimit(::std::string* bankerlimit);

  // optional int32 dropbanker = 13;
  inline bool has_dropbanker() const;
  inline void clear_dropbanker();
  static const int kDropbankerFieldNumber = 13;
  inline ::google::protobuf::int32 dropbanker() const;
  inline void set_dropbanker(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.tgpdinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_minjetton();
  inline void clear_has_minjetton();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_bankerjetton();
  inline void clear_has_bankerjetton();
  inline void set_has_bankername();
  inline void clear_has_bankername();
  inline void set_has_bankerfaceid();
  inline void clear_has_bankerfaceid();
  inline void set_has_bankerlimit();
  inline void clear_has_bankerlimit();
  inline void set_has_dropbanker();
  inline void clear_has_dropbanker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::std::string* minjetton_;
  ::std::string* bankerjetton_;
  ::std::string* bankername_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::int32 dropbanker_;
  ::std::string* bankerfaceid_;
  ::std::string* bankerlimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftgpd_2eproto();
  friend void protobuf_AssignDesc_st_5ftgpd_2eproto();
  friend void protobuf_ShutdownFile_st_5ftgpd_2eproto();

  void InitAsDefaultInstance();
  static tgpdinfo* default_instance_;
};
// -------------------------------------------------------------------

class tgpdpoint : public ::google::protobuf::Message {
 public:
  tgpdpoint();
  virtual ~tgpdpoint();

  tgpdpoint(const tgpdpoint& from);

  inline tgpdpoint& operator=(const tgpdpoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tgpdpoint& default_instance();

  void Swap(tgpdpoint* other);

  // implements Message ----------------------------------------------

  tgpdpoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tgpdpoint& from);
  void MergeFrom(const tgpdpoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.tgpdpoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftgpd_2eproto();
  friend void protobuf_AssignDesc_st_5ftgpd_2eproto();
  friend void protobuf_ShutdownFile_st_5ftgpd_2eproto();

  void InitAsDefaultInstance();
  static tgpdpoint* default_instance_;
};
// -------------------------------------------------------------------

class tgpdgemcolumn : public ::google::protobuf::Message {
 public:
  tgpdgemcolumn();
  virtual ~tgpdgemcolumn();

  tgpdgemcolumn(const tgpdgemcolumn& from);

  inline tgpdgemcolumn& operator=(const tgpdgemcolumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tgpdgemcolumn& default_instance();

  void Swap(tgpdgemcolumn* other);

  // implements Message ----------------------------------------------

  tgpdgemcolumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tgpdgemcolumn& from);
  void MergeFrom(const tgpdgemcolumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline ::google::protobuf::int32 list(int index) const;
  inline void set_list(int index, ::google::protobuf::int32 value);
  inline void add_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:progame.tgpdgemcolumn)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftgpd_2eproto();
  friend void protobuf_AssignDesc_st_5ftgpd_2eproto();
  friend void protobuf_ShutdownFile_st_5ftgpd_2eproto();

  void InitAsDefaultInstance();
  static tgpdgemcolumn* default_instance_;
};
// -------------------------------------------------------------------

class tgpdscoreitem : public ::google::protobuf::Message {
 public:
  tgpdscoreitem();
  virtual ~tgpdscoreitem();

  tgpdscoreitem(const tgpdscoreitem& from);

  inline tgpdscoreitem& operator=(const tgpdscoreitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tgpdscoreitem& default_instance();

  void Swap(tgpdscoreitem* other);

  // implements Message ----------------------------------------------

  tgpdscoreitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tgpdscoreitem& from);
  void MergeFrom(const tgpdscoreitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gem = 1;
  inline bool has_gem() const;
  inline void clear_gem();
  static const int kGemFieldNumber = 1;
  inline ::google::protobuf::int32 gem() const;
  inline void set_gem(::google::protobuf::int32 value);

  // repeated string scorelist = 2;
  inline int scorelist_size() const;
  inline void clear_scorelist();
  static const int kScorelistFieldNumber = 2;
  inline const ::std::string& scorelist(int index) const;
  inline ::std::string* mutable_scorelist(int index);
  inline void set_scorelist(int index, const ::std::string& value);
  inline void set_scorelist(int index, const char* value);
  inline void set_scorelist(int index, const char* value, size_t size);
  inline ::std::string* add_scorelist();
  inline void add_scorelist(const ::std::string& value);
  inline void add_scorelist(const char* value);
  inline void add_scorelist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& scorelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scorelist();

  // repeated .progame.tgpdpoint pointlist = 3;
  inline int pointlist_size() const;
  inline void clear_pointlist();
  static const int kPointlistFieldNumber = 3;
  inline const ::progame::tgpdpoint& pointlist(int index) const;
  inline ::progame::tgpdpoint* mutable_pointlist(int index);
  inline ::progame::tgpdpoint* add_pointlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::tgpdpoint >&
      pointlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::tgpdpoint >*
      mutable_pointlist();

  // @@protoc_insertion_point(class_scope:progame.tgpdscoreitem)
 private:
  inline void set_has_gem();
  inline void clear_has_gem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> scorelist_;
  ::google::protobuf::RepeatedPtrField< ::progame::tgpdpoint > pointlist_;
  ::google::protobuf::int32 gem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftgpd_2eproto();
  friend void protobuf_AssignDesc_st_5ftgpd_2eproto();
  friend void protobuf_ShutdownFile_st_5ftgpd_2eproto();

  void InitAsDefaultInstance();
  static tgpdscoreitem* default_instance_;
};
// -------------------------------------------------------------------

class tgpdscorelist : public ::google::protobuf::Message {
 public:
  tgpdscorelist();
  virtual ~tgpdscorelist();

  tgpdscorelist(const tgpdscorelist& from);

  inline tgpdscorelist& operator=(const tgpdscorelist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tgpdscorelist& default_instance();

  void Swap(tgpdscorelist* other);

  // implements Message ----------------------------------------------

  tgpdscorelist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tgpdscorelist& from);
  void MergeFrom(const tgpdscorelist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .progame.tgpdscoreitem list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::progame::tgpdscoreitem& list(int index) const;
  inline ::progame::tgpdscoreitem* mutable_list(int index);
  inline ::progame::tgpdscoreitem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::tgpdscoreitem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::tgpdscoreitem >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:progame.tgpdscorelist)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::progame::tgpdscoreitem > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftgpd_2eproto();
  friend void protobuf_AssignDesc_st_5ftgpd_2eproto();
  friend void protobuf_ShutdownFile_st_5ftgpd_2eproto();

  void InitAsDefaultInstance();
  static tgpdscorelist* default_instance_;
};
// -------------------------------------------------------------------

class tgpdpriavedata : public ::google::protobuf::Message {
 public:
  tgpdpriavedata();
  virtual ~tgpdpriavedata();

  tgpdpriavedata(const tgpdpriavedata& from);

  inline tgpdpriavedata& operator=(const tgpdpriavedata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tgpdpriavedata& default_instance();

  void Swap(tgpdpriavedata* other);

  // implements Message ----------------------------------------------

  tgpdpriavedata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tgpdpriavedata& from);
  void MergeFrom(const tgpdpriavedata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string totalscore = 1;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalscoreFieldNumber = 1;
  inline const ::std::string& totalscore() const;
  inline void set_totalscore(const ::std::string& value);
  inline void set_totalscore(const char* value);
  inline void set_totalscore(const char* value, size_t size);
  inline ::std::string* mutable_totalscore();
  inline ::std::string* release_totalscore();
  inline void set_allocated_totalscore(::std::string* totalscore);

  // optional int32 round = 2;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 2;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);

  // optional int32 boardlength = 3;
  inline bool has_boardlength() const;
  inline void clear_boardlength();
  static const int kBoardlengthFieldNumber = 3;
  inline ::google::protobuf::int32 boardlength() const;
  inline void set_boardlength(::google::protobuf::int32 value);

  // repeated .progame.tgpdgemcolumn gemmap = 4;
  inline int gemmap_size() const;
  inline void clear_gemmap();
  static const int kGemmapFieldNumber = 4;
  inline const ::progame::tgpdgemcolumn& gemmap(int index) const;
  inline ::progame::tgpdgemcolumn* mutable_gemmap(int index);
  inline ::progame::tgpdgemcolumn* add_gemmap();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn >&
      gemmap() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn >*
      mutable_gemmap();

  // repeated .progame.tgpdgemcolumn reservegemmap = 5;
  inline int reservegemmap_size() const;
  inline void clear_reservegemmap();
  static const int kReservegemmapFieldNumber = 5;
  inline const ::progame::tgpdgemcolumn& reservegemmap(int index) const;
  inline ::progame::tgpdgemcolumn* mutable_reservegemmap(int index);
  inline ::progame::tgpdgemcolumn* add_reservegemmap();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn >&
      reservegemmap() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn >*
      mutable_reservegemmap();

  // repeated string pourjettonlist = 6;
  inline int pourjettonlist_size() const;
  inline void clear_pourjettonlist();
  static const int kPourjettonlistFieldNumber = 6;
  inline const ::std::string& pourjettonlist(int index) const;
  inline ::std::string* mutable_pourjettonlist(int index);
  inline void set_pourjettonlist(int index, const ::std::string& value);
  inline void set_pourjettonlist(int index, const char* value);
  inline void set_pourjettonlist(int index, const char* value, size_t size);
  inline ::std::string* add_pourjettonlist();
  inline void add_pourjettonlist(const ::std::string& value);
  inline void add_pourjettonlist(const char* value);
  inline void add_pourjettonlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pourjettonlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pourjettonlist();

  // optional int64 timemark = 7;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 7;
  inline ::google::protobuf::int64 timemark() const;
  inline void set_timemark(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:progame.tgpdpriavedata)
 private:
  inline void set_has_totalscore();
  inline void clear_has_totalscore();
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_boardlength();
  inline void clear_has_boardlength();
  inline void set_has_timemark();
  inline void clear_has_timemark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* totalscore_;
  ::google::protobuf::int32 round_;
  ::google::protobuf::int32 boardlength_;
  ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn > gemmap_;
  ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn > reservegemmap_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pourjettonlist_;
  ::google::protobuf::int64 timemark_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftgpd_2eproto();
  friend void protobuf_AssignDesc_st_5ftgpd_2eproto();
  friend void protobuf_ShutdownFile_st_5ftgpd_2eproto();

  void InitAsDefaultInstance();
  static tgpdpriavedata* default_instance_;
};
// ===================================================================


// ===================================================================

// tgpdinfo

// optional int32 tableid = 1;
inline bool tgpdinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tgpdinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tgpdinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tgpdinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 tgpdinfo::tableid() const {
  return tableid_;
}
inline void tgpdinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tabletype = 2;
inline bool tgpdinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tgpdinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tgpdinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tgpdinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 tgpdinfo::tabletype() const {
  return tabletype_;
}
inline void tgpdinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 state = 3;
inline bool tgpdinfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tgpdinfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tgpdinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tgpdinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 tgpdinfo::state() const {
  return state_;
}
inline void tgpdinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 4;
inline bool tgpdinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tgpdinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tgpdinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tgpdinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 tgpdinfo::timemark() const {
  return timemark_;
}
inline void tgpdinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated int32 useridlist = 5;
inline int tgpdinfo::useridlist_size() const {
  return useridlist_.size();
}
inline void tgpdinfo::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 tgpdinfo::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void tgpdinfo::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void tgpdinfo::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tgpdinfo::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tgpdinfo::mutable_useridlist() {
  return &useridlist_;
}

// optional string minjetton = 6;
inline bool tgpdinfo::has_minjetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tgpdinfo::set_has_minjetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tgpdinfo::clear_has_minjetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tgpdinfo::clear_minjetton() {
  if (minjetton_ != &::google::protobuf::internal::kEmptyString) {
    minjetton_->clear();
  }
  clear_has_minjetton();
}
inline const ::std::string& tgpdinfo::minjetton() const {
  return *minjetton_;
}
inline void tgpdinfo::set_minjetton(const ::std::string& value) {
  set_has_minjetton();
  if (minjetton_ == &::google::protobuf::internal::kEmptyString) {
    minjetton_ = new ::std::string;
  }
  minjetton_->assign(value);
}
inline void tgpdinfo::set_minjetton(const char* value) {
  set_has_minjetton();
  if (minjetton_ == &::google::protobuf::internal::kEmptyString) {
    minjetton_ = new ::std::string;
  }
  minjetton_->assign(value);
}
inline void tgpdinfo::set_minjetton(const char* value, size_t size) {
  set_has_minjetton();
  if (minjetton_ == &::google::protobuf::internal::kEmptyString) {
    minjetton_ = new ::std::string;
  }
  minjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tgpdinfo::mutable_minjetton() {
  set_has_minjetton();
  if (minjetton_ == &::google::protobuf::internal::kEmptyString) {
    minjetton_ = new ::std::string;
  }
  return minjetton_;
}
inline ::std::string* tgpdinfo::release_minjetton() {
  clear_has_minjetton();
  if (minjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = minjetton_;
    minjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tgpdinfo::set_allocated_minjetton(::std::string* minjetton) {
  if (minjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete minjetton_;
  }
  if (minjetton) {
    set_has_minjetton();
    minjetton_ = minjetton;
  } else {
    clear_has_minjetton();
    minjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bankerid = 8;
inline bool tgpdinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tgpdinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tgpdinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tgpdinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 tgpdinfo::bankerid() const {
  return bankerid_;
}
inline void tgpdinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// optional string bankerjetton = 9;
inline bool tgpdinfo::has_bankerjetton() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tgpdinfo::set_has_bankerjetton() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tgpdinfo::clear_has_bankerjetton() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tgpdinfo::clear_bankerjetton() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    bankerjetton_->clear();
  }
  clear_has_bankerjetton();
}
inline const ::std::string& tgpdinfo::bankerjetton() const {
  return *bankerjetton_;
}
inline void tgpdinfo::set_bankerjetton(const ::std::string& value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void tgpdinfo::set_bankerjetton(const char* value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void tgpdinfo::set_bankerjetton(const char* value, size_t size) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tgpdinfo::mutable_bankerjetton() {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  return bankerjetton_;
}
inline ::std::string* tgpdinfo::release_bankerjetton() {
  clear_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerjetton_;
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tgpdinfo::set_allocated_bankerjetton(::std::string* bankerjetton) {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankerjetton) {
    set_has_bankerjetton();
    bankerjetton_ = bankerjetton;
  } else {
    clear_has_bankerjetton();
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankername = 10;
inline bool tgpdinfo::has_bankername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tgpdinfo::set_has_bankername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tgpdinfo::clear_has_bankername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tgpdinfo::clear_bankername() {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    bankername_->clear();
  }
  clear_has_bankername();
}
inline const ::std::string& tgpdinfo::bankername() const {
  return *bankername_;
}
inline void tgpdinfo::set_bankername(const ::std::string& value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void tgpdinfo::set_bankername(const char* value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void tgpdinfo::set_bankername(const char* value, size_t size) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tgpdinfo::mutable_bankername() {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  return bankername_;
}
inline ::std::string* tgpdinfo::release_bankername() {
  clear_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankername_;
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tgpdinfo::set_allocated_bankername(::std::string* bankername) {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankername) {
    set_has_bankername();
    bankername_ = bankername;
  } else {
    clear_has_bankername();
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankerfaceid = 11;
inline bool tgpdinfo::has_bankerfaceid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tgpdinfo::set_has_bankerfaceid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tgpdinfo::clear_has_bankerfaceid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tgpdinfo::clear_bankerfaceid() {
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_->clear();
  }
  clear_has_bankerfaceid();
}
inline const ::std::string& tgpdinfo::bankerfaceid() const {
  return *bankerfaceid_;
}
inline void tgpdinfo::set_bankerfaceid(const ::std::string& value) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(value);
}
inline void tgpdinfo::set_bankerfaceid(const char* value) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(value);
}
inline void tgpdinfo::set_bankerfaceid(const char* value, size_t size) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tgpdinfo::mutable_bankerfaceid() {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  return bankerfaceid_;
}
inline ::std::string* tgpdinfo::release_bankerfaceid() {
  clear_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerfaceid_;
    bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tgpdinfo::set_allocated_bankerfaceid(::std::string* bankerfaceid) {
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerfaceid_;
  }
  if (bankerfaceid) {
    set_has_bankerfaceid();
    bankerfaceid_ = bankerfaceid;
  } else {
    clear_has_bankerfaceid();
    bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankerlimit = 12;
inline bool tgpdinfo::has_bankerlimit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tgpdinfo::set_has_bankerlimit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tgpdinfo::clear_has_bankerlimit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tgpdinfo::clear_bankerlimit() {
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    bankerlimit_->clear();
  }
  clear_has_bankerlimit();
}
inline const ::std::string& tgpdinfo::bankerlimit() const {
  return *bankerlimit_;
}
inline void tgpdinfo::set_bankerlimit(const ::std::string& value) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(value);
}
inline void tgpdinfo::set_bankerlimit(const char* value) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(value);
}
inline void tgpdinfo::set_bankerlimit(const char* value, size_t size) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tgpdinfo::mutable_bankerlimit() {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  return bankerlimit_;
}
inline ::std::string* tgpdinfo::release_bankerlimit() {
  clear_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerlimit_;
    bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tgpdinfo::set_allocated_bankerlimit(::std::string* bankerlimit) {
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (bankerlimit) {
    set_has_bankerlimit();
    bankerlimit_ = bankerlimit;
  } else {
    clear_has_bankerlimit();
    bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 dropbanker = 13;
inline bool tgpdinfo::has_dropbanker() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tgpdinfo::set_has_dropbanker() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tgpdinfo::clear_has_dropbanker() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tgpdinfo::clear_dropbanker() {
  dropbanker_ = 0;
  clear_has_dropbanker();
}
inline ::google::protobuf::int32 tgpdinfo::dropbanker() const {
  return dropbanker_;
}
inline void tgpdinfo::set_dropbanker(::google::protobuf::int32 value) {
  set_has_dropbanker();
  dropbanker_ = value;
}

// -------------------------------------------------------------------

// tgpdpoint

// optional int32 x = 1;
inline bool tgpdpoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tgpdpoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tgpdpoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tgpdpoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 tgpdpoint::x() const {
  return x_;
}
inline void tgpdpoint::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool tgpdpoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tgpdpoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tgpdpoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tgpdpoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 tgpdpoint::y() const {
  return y_;
}
inline void tgpdpoint::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// tgpdgemcolumn

// repeated int32 list = 1;
inline int tgpdgemcolumn::list_size() const {
  return list_.size();
}
inline void tgpdgemcolumn::clear_list() {
  list_.Clear();
}
inline ::google::protobuf::int32 tgpdgemcolumn::list(int index) const {
  return list_.Get(index);
}
inline void tgpdgemcolumn::set_list(int index, ::google::protobuf::int32 value) {
  list_.Set(index, value);
}
inline void tgpdgemcolumn::add_list(::google::protobuf::int32 value) {
  list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tgpdgemcolumn::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tgpdgemcolumn::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// tgpdscoreitem

// optional int32 gem = 1;
inline bool tgpdscoreitem::has_gem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tgpdscoreitem::set_has_gem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tgpdscoreitem::clear_has_gem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tgpdscoreitem::clear_gem() {
  gem_ = 0;
  clear_has_gem();
}
inline ::google::protobuf::int32 tgpdscoreitem::gem() const {
  return gem_;
}
inline void tgpdscoreitem::set_gem(::google::protobuf::int32 value) {
  set_has_gem();
  gem_ = value;
}

// repeated string scorelist = 2;
inline int tgpdscoreitem::scorelist_size() const {
  return scorelist_.size();
}
inline void tgpdscoreitem::clear_scorelist() {
  scorelist_.Clear();
}
inline const ::std::string& tgpdscoreitem::scorelist(int index) const {
  return scorelist_.Get(index);
}
inline ::std::string* tgpdscoreitem::mutable_scorelist(int index) {
  return scorelist_.Mutable(index);
}
inline void tgpdscoreitem::set_scorelist(int index, const ::std::string& value) {
  scorelist_.Mutable(index)->assign(value);
}
inline void tgpdscoreitem::set_scorelist(int index, const char* value) {
  scorelist_.Mutable(index)->assign(value);
}
inline void tgpdscoreitem::set_scorelist(int index, const char* value, size_t size) {
  scorelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tgpdscoreitem::add_scorelist() {
  return scorelist_.Add();
}
inline void tgpdscoreitem::add_scorelist(const ::std::string& value) {
  scorelist_.Add()->assign(value);
}
inline void tgpdscoreitem::add_scorelist(const char* value) {
  scorelist_.Add()->assign(value);
}
inline void tgpdscoreitem::add_scorelist(const char* value, size_t size) {
  scorelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tgpdscoreitem::scorelist() const {
  return scorelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tgpdscoreitem::mutable_scorelist() {
  return &scorelist_;
}

// repeated .progame.tgpdpoint pointlist = 3;
inline int tgpdscoreitem::pointlist_size() const {
  return pointlist_.size();
}
inline void tgpdscoreitem::clear_pointlist() {
  pointlist_.Clear();
}
inline const ::progame::tgpdpoint& tgpdscoreitem::pointlist(int index) const {
  return pointlist_.Get(index);
}
inline ::progame::tgpdpoint* tgpdscoreitem::mutable_pointlist(int index) {
  return pointlist_.Mutable(index);
}
inline ::progame::tgpdpoint* tgpdscoreitem::add_pointlist() {
  return pointlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::tgpdpoint >&
tgpdscoreitem::pointlist() const {
  return pointlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::tgpdpoint >*
tgpdscoreitem::mutable_pointlist() {
  return &pointlist_;
}

// -------------------------------------------------------------------

// tgpdscorelist

// repeated .progame.tgpdscoreitem list = 1;
inline int tgpdscorelist::list_size() const {
  return list_.size();
}
inline void tgpdscorelist::clear_list() {
  list_.Clear();
}
inline const ::progame::tgpdscoreitem& tgpdscorelist::list(int index) const {
  return list_.Get(index);
}
inline ::progame::tgpdscoreitem* tgpdscorelist::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::progame::tgpdscoreitem* tgpdscorelist::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::tgpdscoreitem >&
tgpdscorelist::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::tgpdscoreitem >*
tgpdscorelist::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// tgpdpriavedata

// optional string totalscore = 1;
inline bool tgpdpriavedata::has_totalscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tgpdpriavedata::set_has_totalscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tgpdpriavedata::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tgpdpriavedata::clear_totalscore() {
  if (totalscore_ != &::google::protobuf::internal::kEmptyString) {
    totalscore_->clear();
  }
  clear_has_totalscore();
}
inline const ::std::string& tgpdpriavedata::totalscore() const {
  return *totalscore_;
}
inline void tgpdpriavedata::set_totalscore(const ::std::string& value) {
  set_has_totalscore();
  if (totalscore_ == &::google::protobuf::internal::kEmptyString) {
    totalscore_ = new ::std::string;
  }
  totalscore_->assign(value);
}
inline void tgpdpriavedata::set_totalscore(const char* value) {
  set_has_totalscore();
  if (totalscore_ == &::google::protobuf::internal::kEmptyString) {
    totalscore_ = new ::std::string;
  }
  totalscore_->assign(value);
}
inline void tgpdpriavedata::set_totalscore(const char* value, size_t size) {
  set_has_totalscore();
  if (totalscore_ == &::google::protobuf::internal::kEmptyString) {
    totalscore_ = new ::std::string;
  }
  totalscore_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tgpdpriavedata::mutable_totalscore() {
  set_has_totalscore();
  if (totalscore_ == &::google::protobuf::internal::kEmptyString) {
    totalscore_ = new ::std::string;
  }
  return totalscore_;
}
inline ::std::string* tgpdpriavedata::release_totalscore() {
  clear_has_totalscore();
  if (totalscore_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totalscore_;
    totalscore_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tgpdpriavedata::set_allocated_totalscore(::std::string* totalscore) {
  if (totalscore_ != &::google::protobuf::internal::kEmptyString) {
    delete totalscore_;
  }
  if (totalscore) {
    set_has_totalscore();
    totalscore_ = totalscore;
  } else {
    clear_has_totalscore();
    totalscore_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 round = 2;
inline bool tgpdpriavedata::has_round() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tgpdpriavedata::set_has_round() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tgpdpriavedata::clear_has_round() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tgpdpriavedata::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 tgpdpriavedata::round() const {
  return round_;
}
inline void tgpdpriavedata::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
}

// optional int32 boardlength = 3;
inline bool tgpdpriavedata::has_boardlength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tgpdpriavedata::set_has_boardlength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tgpdpriavedata::clear_has_boardlength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tgpdpriavedata::clear_boardlength() {
  boardlength_ = 0;
  clear_has_boardlength();
}
inline ::google::protobuf::int32 tgpdpriavedata::boardlength() const {
  return boardlength_;
}
inline void tgpdpriavedata::set_boardlength(::google::protobuf::int32 value) {
  set_has_boardlength();
  boardlength_ = value;
}

// repeated .progame.tgpdgemcolumn gemmap = 4;
inline int tgpdpriavedata::gemmap_size() const {
  return gemmap_.size();
}
inline void tgpdpriavedata::clear_gemmap() {
  gemmap_.Clear();
}
inline const ::progame::tgpdgemcolumn& tgpdpriavedata::gemmap(int index) const {
  return gemmap_.Get(index);
}
inline ::progame::tgpdgemcolumn* tgpdpriavedata::mutable_gemmap(int index) {
  return gemmap_.Mutable(index);
}
inline ::progame::tgpdgemcolumn* tgpdpriavedata::add_gemmap() {
  return gemmap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn >&
tgpdpriavedata::gemmap() const {
  return gemmap_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn >*
tgpdpriavedata::mutable_gemmap() {
  return &gemmap_;
}

// repeated .progame.tgpdgemcolumn reservegemmap = 5;
inline int tgpdpriavedata::reservegemmap_size() const {
  return reservegemmap_.size();
}
inline void tgpdpriavedata::clear_reservegemmap() {
  reservegemmap_.Clear();
}
inline const ::progame::tgpdgemcolumn& tgpdpriavedata::reservegemmap(int index) const {
  return reservegemmap_.Get(index);
}
inline ::progame::tgpdgemcolumn* tgpdpriavedata::mutable_reservegemmap(int index) {
  return reservegemmap_.Mutable(index);
}
inline ::progame::tgpdgemcolumn* tgpdpriavedata::add_reservegemmap() {
  return reservegemmap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn >&
tgpdpriavedata::reservegemmap() const {
  return reservegemmap_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::tgpdgemcolumn >*
tgpdpriavedata::mutable_reservegemmap() {
  return &reservegemmap_;
}

// repeated string pourjettonlist = 6;
inline int tgpdpriavedata::pourjettonlist_size() const {
  return pourjettonlist_.size();
}
inline void tgpdpriavedata::clear_pourjettonlist() {
  pourjettonlist_.Clear();
}
inline const ::std::string& tgpdpriavedata::pourjettonlist(int index) const {
  return pourjettonlist_.Get(index);
}
inline ::std::string* tgpdpriavedata::mutable_pourjettonlist(int index) {
  return pourjettonlist_.Mutable(index);
}
inline void tgpdpriavedata::set_pourjettonlist(int index, const ::std::string& value) {
  pourjettonlist_.Mutable(index)->assign(value);
}
inline void tgpdpriavedata::set_pourjettonlist(int index, const char* value) {
  pourjettonlist_.Mutable(index)->assign(value);
}
inline void tgpdpriavedata::set_pourjettonlist(int index, const char* value, size_t size) {
  pourjettonlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tgpdpriavedata::add_pourjettonlist() {
  return pourjettonlist_.Add();
}
inline void tgpdpriavedata::add_pourjettonlist(const ::std::string& value) {
  pourjettonlist_.Add()->assign(value);
}
inline void tgpdpriavedata::add_pourjettonlist(const char* value) {
  pourjettonlist_.Add()->assign(value);
}
inline void tgpdpriavedata::add_pourjettonlist(const char* value, size_t size) {
  pourjettonlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tgpdpriavedata::pourjettonlist() const {
  return pourjettonlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tgpdpriavedata::mutable_pourjettonlist() {
  return &pourjettonlist_;
}

// optional int64 timemark = 7;
inline bool tgpdpriavedata::has_timemark() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tgpdpriavedata::set_has_timemark() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tgpdpriavedata::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tgpdpriavedata::clear_timemark() {
  timemark_ = GOOGLE_LONGLONG(0);
  clear_has_timemark();
}
inline ::google::protobuf::int64 tgpdpriavedata::timemark() const {
  return timemark_;
}
inline void tgpdpriavedata::set_timemark(::google::protobuf::int64 value) {
  set_has_timemark();
  timemark_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5ftgpd_2eproto__INCLUDED
