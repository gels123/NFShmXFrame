// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_slot.proto

#ifndef PROTOBUF_st_5fslot_2eproto__INCLUDED
#define PROTOBUF_st_5fslot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fslot_2eproto();
void protobuf_AssignDesc_st_5fslot_2eproto();
void protobuf_ShutdownFile_st_5fslot_2eproto();

class soltinfo;
class soltplayer;
class soltwin;
class soltuser;
class soltuserlist;

// ===================================================================

class soltinfo : public ::google::protobuf::Message {
 public:
  soltinfo();
  virtual ~soltinfo();

  soltinfo(const soltinfo& from);

  inline soltinfo& operator=(const soltinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soltinfo& default_instance();

  void Swap(soltinfo* other);

  // implements Message ----------------------------------------------

  soltinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soltinfo& from);
  void MergeFrom(const soltinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fruittype = 1;
  inline bool has_fruittype() const;
  inline void clear_fruittype();
  static const int kFruittypeFieldNumber = 1;
  inline ::google::protobuf::int32 fruittype() const;
  inline void set_fruittype(::google::protobuf::int32 value);

  // optional int32 pooljetton = 2;
  inline bool has_pooljetton() const;
  inline void clear_pooljetton();
  static const int kPooljettonFieldNumber = 2;
  inline ::google::protobuf::int32 pooljetton() const;
  inline void set_pooljetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.soltinfo)
 private:
  inline void set_has_fruittype();
  inline void clear_has_fruittype();
  inline void set_has_pooljetton();
  inline void clear_has_pooljetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fruittype_;
  ::google::protobuf::int32 pooljetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslot_2eproto();
  friend void protobuf_AssignDesc_st_5fslot_2eproto();
  friend void protobuf_ShutdownFile_st_5fslot_2eproto();

  void InitAsDefaultInstance();
  static soltinfo* default_instance_;
};
// -------------------------------------------------------------------

class soltplayer : public ::google::protobuf::Message {
 public:
  soltplayer();
  virtual ~soltplayer();

  soltplayer(const soltplayer& from);

  inline soltplayer& operator=(const soltplayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soltplayer& default_instance();

  void Swap(soltplayer* other);

  // implements Message ----------------------------------------------

  soltplayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soltplayer& from);
  void MergeFrom(const soltplayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 fruittype = 2;
  inline bool has_fruittype() const;
  inline void clear_fruittype();
  static const int kFruittypeFieldNumber = 2;
  inline ::google::protobuf::int32 fruittype() const;
  inline void set_fruittype(::google::protobuf::int32 value);

  // optional string fruitdate = 3;
  inline bool has_fruitdate() const;
  inline void clear_fruitdate();
  static const int kFruitdateFieldNumber = 3;
  inline const ::std::string& fruitdate() const;
  inline void set_fruitdate(const ::std::string& value);
  inline void set_fruitdate(const char* value);
  inline void set_fruitdate(const char* value, size_t size);
  inline ::std::string* mutable_fruitdate();
  inline ::std::string* release_fruitdate();
  inline void set_allocated_fruitdate(::std::string* fruitdate);

  // optional int32 betjetton = 4;
  inline bool has_betjetton() const;
  inline void clear_betjetton();
  static const int kBetjettonFieldNumber = 4;
  inline ::google::protobuf::int32 betjetton() const;
  inline void set_betjetton(::google::protobuf::int32 value);

  // optional int32 recvjetton = 5;
  inline bool has_recvjetton() const;
  inline void clear_recvjetton();
  static const int kRecvjettonFieldNumber = 5;
  inline ::google::protobuf::int32 recvjetton() const;
  inline void set_recvjetton(::google::protobuf::int32 value);

  // optional int32 breakret = 6;
  inline bool has_breakret() const;
  inline void clear_breakret();
  static const int kBreakretFieldNumber = 6;
  inline ::google::protobuf::int32 breakret() const;
  inline void set_breakret(::google::protobuf::int32 value);

  // optional int32 continuous = 7;
  inline bool has_continuous() const;
  inline void clear_continuous();
  static const int kContinuousFieldNumber = 7;
  inline ::google::protobuf::int32 continuous() const;
  inline void set_continuous(::google::protobuf::int32 value);

  // optional int32 retamount = 8;
  inline bool has_retamount() const;
  inline void clear_retamount();
  static const int kRetamountFieldNumber = 8;
  inline ::google::protobuf::int32 retamount() const;
  inline void set_retamount(::google::protobuf::int32 value);

  // optional int32 retjetton = 9;
  inline bool has_retjetton() const;
  inline void clear_retjetton();
  static const int kRetjettonFieldNumber = 9;
  inline ::google::protobuf::int32 retjetton() const;
  inline void set_retjetton(::google::protobuf::int32 value);

  // optional int32 freeamount = 10;
  inline bool has_freeamount() const;
  inline void clear_freeamount();
  static const int kFreeamountFieldNumber = 10;
  inline ::google::protobuf::int32 freeamount() const;
  inline void set_freeamount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.soltplayer)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_fruittype();
  inline void clear_has_fruittype();
  inline void set_has_fruitdate();
  inline void clear_has_fruitdate();
  inline void set_has_betjetton();
  inline void clear_has_betjetton();
  inline void set_has_recvjetton();
  inline void clear_has_recvjetton();
  inline void set_has_breakret();
  inline void clear_has_breakret();
  inline void set_has_continuous();
  inline void clear_has_continuous();
  inline void set_has_retamount();
  inline void clear_has_retamount();
  inline void set_has_retjetton();
  inline void clear_has_retjetton();
  inline void set_has_freeamount();
  inline void clear_has_freeamount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 fruittype_;
  ::std::string* fruitdate_;
  ::google::protobuf::int32 betjetton_;
  ::google::protobuf::int32 recvjetton_;
  ::google::protobuf::int32 breakret_;
  ::google::protobuf::int32 continuous_;
  ::google::protobuf::int32 retamount_;
  ::google::protobuf::int32 retjetton_;
  ::google::protobuf::int32 freeamount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslot_2eproto();
  friend void protobuf_AssignDesc_st_5fslot_2eproto();
  friend void protobuf_ShutdownFile_st_5fslot_2eproto();

  void InitAsDefaultInstance();
  static soltplayer* default_instance_;
};
// -------------------------------------------------------------------

class soltwin : public ::google::protobuf::Message {
 public:
  soltwin();
  virtual ~soltwin();

  soltwin(const soltwin& from);

  inline soltwin& operator=(const soltwin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soltwin& default_instance();

  void Swap(soltwin* other);

  // implements Message ----------------------------------------------

  soltwin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soltwin& from);
  void MergeFrom(const soltwin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 awardtype = 1;
  inline bool has_awardtype() const;
  inline void clear_awardtype();
  static const int kAwardtypeFieldNumber = 1;
  inline ::google::protobuf::int32 awardtype() const;
  inline void set_awardtype(::google::protobuf::int32 value);

  // optional int32 marknum = 2;
  inline bool has_marknum() const;
  inline void clear_marknum();
  static const int kMarknumFieldNumber = 2;
  inline ::google::protobuf::int32 marknum() const;
  inline void set_marknum(::google::protobuf::int32 value);

  // optional int32 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);

  // optional int32 iswin = 4;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIswinFieldNumber = 4;
  inline ::google::protobuf::int32 iswin() const;
  inline void set_iswin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.soltwin)
 private:
  inline void set_has_awardtype();
  inline void clear_has_awardtype();
  inline void set_has_marknum();
  inline void clear_has_marknum();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 awardtype_;
  ::google::protobuf::int32 marknum_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 iswin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslot_2eproto();
  friend void protobuf_AssignDesc_st_5fslot_2eproto();
  friend void protobuf_ShutdownFile_st_5fslot_2eproto();

  void InitAsDefaultInstance();
  static soltwin* default_instance_;
};
// -------------------------------------------------------------------

class soltuser : public ::google::protobuf::Message {
 public:
  soltuser();
  virtual ~soltuser();

  soltuser(const soltuser& from);

  inline soltuser& operator=(const soltuser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soltuser& default_instance();

  void Swap(soltuser* other);

  // implements Message ----------------------------------------------

  soltuser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soltuser& from);
  void MergeFrom(const soltuser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 fruittype = 2;
  inline bool has_fruittype() const;
  inline void clear_fruittype();
  static const int kFruittypeFieldNumber = 2;
  inline ::google::protobuf::int32 fruittype() const;
  inline void set_fruittype(::google::protobuf::int32 value);

  // repeated .progame.soltwin fwlist = 3;
  inline int fwlist_size() const;
  inline void clear_fwlist();
  static const int kFwlistFieldNumber = 3;
  inline const ::progame::soltwin& fwlist(int index) const;
  inline ::progame::soltwin* mutable_fwlist(int index);
  inline ::progame::soltwin* add_fwlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::soltwin >&
      fwlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::soltwin >*
      mutable_fwlist();

  // optional int32 maxaction = 4;
  inline bool has_maxaction() const;
  inline void clear_maxaction();
  static const int kMaxactionFieldNumber = 4;
  inline ::google::protobuf::int32 maxaction() const;
  inline void set_maxaction(::google::protobuf::int32 value);

  // optional int32 pourjetton = 5;
  inline bool has_pourjetton() const;
  inline void clear_pourjetton();
  static const int kPourjettonFieldNumber = 5;
  inline ::google::protobuf::int32 pourjetton() const;
  inline void set_pourjetton(::google::protobuf::int32 value);

  // optional int32 winjetton = 6;
  inline bool has_winjetton() const;
  inline void clear_winjetton();
  static const int kWinjettonFieldNumber = 6;
  inline ::google::protobuf::int32 winjetton() const;
  inline void set_winjetton(::google::protobuf::int32 value);

  // optional int32 wintype1 = 7;
  inline bool has_wintype1() const;
  inline void clear_wintype1();
  static const int kWintype1FieldNumber = 7;
  inline ::google::protobuf::int32 wintype1() const;
  inline void set_wintype1(::google::protobuf::int32 value);

  // optional int32 wintype2 = 8;
  inline bool has_wintype2() const;
  inline void clear_wintype2();
  static const int kWintype2FieldNumber = 8;
  inline ::google::protobuf::int32 wintype2() const;
  inline void set_wintype2(::google::protobuf::int32 value);

  // optional int32 wintype3 = 9;
  inline bool has_wintype3() const;
  inline void clear_wintype3();
  static const int kWintype3FieldNumber = 9;
  inline ::google::protobuf::int32 wintype3() const;
  inline void set_wintype3(::google::protobuf::int32 value);

  // optional int32 wintype4 = 10;
  inline bool has_wintype4() const;
  inline void clear_wintype4();
  static const int kWintype4FieldNumber = 10;
  inline ::google::protobuf::int32 wintype4() const;
  inline void set_wintype4(::google::protobuf::int32 value);

  // optional int32 wintype5 = 11;
  inline bool has_wintype5() const;
  inline void clear_wintype5();
  static const int kWintype5FieldNumber = 11;
  inline ::google::protobuf::int32 wintype5() const;
  inline void set_wintype5(::google::protobuf::int32 value);

  // optional int32 wintype6 = 12;
  inline bool has_wintype6() const;
  inline void clear_wintype6();
  static const int kWintype6FieldNumber = 12;
  inline ::google::protobuf::int32 wintype6() const;
  inline void set_wintype6(::google::protobuf::int32 value);

  // optional int32 wintype7 = 13;
  inline bool has_wintype7() const;
  inline void clear_wintype7();
  static const int kWintype7FieldNumber = 13;
  inline ::google::protobuf::int32 wintype7() const;
  inline void set_wintype7(::google::protobuf::int32 value);

  // optional int32 wintype8 = 14;
  inline bool has_wintype8() const;
  inline void clear_wintype8();
  static const int kWintype8FieldNumber = 14;
  inline ::google::protobuf::int32 wintype8() const;
  inline void set_wintype8(::google::protobuf::int32 value);

  // optional int32 wintype9 = 15;
  inline bool has_wintype9() const;
  inline void clear_wintype9();
  static const int kWintype9FieldNumber = 15;
  inline ::google::protobuf::int32 wintype9() const;
  inline void set_wintype9(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.soltuser)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fruittype();
  inline void clear_has_fruittype();
  inline void set_has_maxaction();
  inline void clear_has_maxaction();
  inline void set_has_pourjetton();
  inline void clear_has_pourjetton();
  inline void set_has_winjetton();
  inline void clear_has_winjetton();
  inline void set_has_wintype1();
  inline void clear_has_wintype1();
  inline void set_has_wintype2();
  inline void clear_has_wintype2();
  inline void set_has_wintype3();
  inline void clear_has_wintype3();
  inline void set_has_wintype4();
  inline void clear_has_wintype4();
  inline void set_has_wintype5();
  inline void clear_has_wintype5();
  inline void set_has_wintype6();
  inline void clear_has_wintype6();
  inline void set_has_wintype7();
  inline void clear_has_wintype7();
  inline void set_has_wintype8();
  inline void clear_has_wintype8();
  inline void set_has_wintype9();
  inline void clear_has_wintype9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fruittype_;
  ::google::protobuf::RepeatedPtrField< ::progame::soltwin > fwlist_;
  ::google::protobuf::int32 maxaction_;
  ::google::protobuf::int32 pourjetton_;
  ::google::protobuf::int32 winjetton_;
  ::google::protobuf::int32 wintype1_;
  ::google::protobuf::int32 wintype2_;
  ::google::protobuf::int32 wintype3_;
  ::google::protobuf::int32 wintype4_;
  ::google::protobuf::int32 wintype5_;
  ::google::protobuf::int32 wintype6_;
  ::google::protobuf::int32 wintype7_;
  ::google::protobuf::int32 wintype8_;
  ::google::protobuf::int32 wintype9_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslot_2eproto();
  friend void protobuf_AssignDesc_st_5fslot_2eproto();
  friend void protobuf_ShutdownFile_st_5fslot_2eproto();

  void InitAsDefaultInstance();
  static soltuser* default_instance_;
};
// -------------------------------------------------------------------

class soltuserlist : public ::google::protobuf::Message {
 public:
  soltuserlist();
  virtual ~soltuserlist();

  soltuserlist(const soltuserlist& from);

  inline soltuserlist& operator=(const soltuserlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soltuserlist& default_instance();

  void Swap(soltuserlist* other);

  // implements Message ----------------------------------------------

  soltuserlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soltuserlist& from);
  void MergeFrom(const soltuserlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // repeated .progame.soltuser fulist = 2;
  inline int fulist_size() const;
  inline void clear_fulist();
  static const int kFulistFieldNumber = 2;
  inline const ::progame::soltuser& fulist(int index) const;
  inline ::progame::soltuser* mutable_fulist(int index);
  inline ::progame::soltuser* add_fulist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::soltuser >&
      fulist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::soltuser >*
      mutable_fulist();

  // @@protoc_insertion_point(class_scope:progame.soltuserlist)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::progame::soltuser > fulist_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslot_2eproto();
  friend void protobuf_AssignDesc_st_5fslot_2eproto();
  friend void protobuf_ShutdownFile_st_5fslot_2eproto();

  void InitAsDefaultInstance();
  static soltuserlist* default_instance_;
};
// ===================================================================


// ===================================================================

// soltinfo

// optional int32 fruittype = 1;
inline bool soltinfo::has_fruittype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soltinfo::set_has_fruittype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soltinfo::clear_has_fruittype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soltinfo::clear_fruittype() {
  fruittype_ = 0;
  clear_has_fruittype();
}
inline ::google::protobuf::int32 soltinfo::fruittype() const {
  return fruittype_;
}
inline void soltinfo::set_fruittype(::google::protobuf::int32 value) {
  set_has_fruittype();
  fruittype_ = value;
}

// optional int32 pooljetton = 2;
inline bool soltinfo::has_pooljetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soltinfo::set_has_pooljetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soltinfo::clear_has_pooljetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soltinfo::clear_pooljetton() {
  pooljetton_ = 0;
  clear_has_pooljetton();
}
inline ::google::protobuf::int32 soltinfo::pooljetton() const {
  return pooljetton_;
}
inline void soltinfo::set_pooljetton(::google::protobuf::int32 value) {
  set_has_pooljetton();
  pooljetton_ = value;
}

// -------------------------------------------------------------------

// soltplayer

// optional int32 userid = 1;
inline bool soltplayer::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soltplayer::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soltplayer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soltplayer::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 soltplayer::userid() const {
  return userid_;
}
inline void soltplayer::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 fruittype = 2;
inline bool soltplayer::has_fruittype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soltplayer::set_has_fruittype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soltplayer::clear_has_fruittype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soltplayer::clear_fruittype() {
  fruittype_ = 0;
  clear_has_fruittype();
}
inline ::google::protobuf::int32 soltplayer::fruittype() const {
  return fruittype_;
}
inline void soltplayer::set_fruittype(::google::protobuf::int32 value) {
  set_has_fruittype();
  fruittype_ = value;
}

// optional string fruitdate = 3;
inline bool soltplayer::has_fruitdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soltplayer::set_has_fruitdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soltplayer::clear_has_fruitdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soltplayer::clear_fruitdate() {
  if (fruitdate_ != &::google::protobuf::internal::kEmptyString) {
    fruitdate_->clear();
  }
  clear_has_fruitdate();
}
inline const ::std::string& soltplayer::fruitdate() const {
  return *fruitdate_;
}
inline void soltplayer::set_fruitdate(const ::std::string& value) {
  set_has_fruitdate();
  if (fruitdate_ == &::google::protobuf::internal::kEmptyString) {
    fruitdate_ = new ::std::string;
  }
  fruitdate_->assign(value);
}
inline void soltplayer::set_fruitdate(const char* value) {
  set_has_fruitdate();
  if (fruitdate_ == &::google::protobuf::internal::kEmptyString) {
    fruitdate_ = new ::std::string;
  }
  fruitdate_->assign(value);
}
inline void soltplayer::set_fruitdate(const char* value, size_t size) {
  set_has_fruitdate();
  if (fruitdate_ == &::google::protobuf::internal::kEmptyString) {
    fruitdate_ = new ::std::string;
  }
  fruitdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* soltplayer::mutable_fruitdate() {
  set_has_fruitdate();
  if (fruitdate_ == &::google::protobuf::internal::kEmptyString) {
    fruitdate_ = new ::std::string;
  }
  return fruitdate_;
}
inline ::std::string* soltplayer::release_fruitdate() {
  clear_has_fruitdate();
  if (fruitdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fruitdate_;
    fruitdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void soltplayer::set_allocated_fruitdate(::std::string* fruitdate) {
  if (fruitdate_ != &::google::protobuf::internal::kEmptyString) {
    delete fruitdate_;
  }
  if (fruitdate) {
    set_has_fruitdate();
    fruitdate_ = fruitdate;
  } else {
    clear_has_fruitdate();
    fruitdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 betjetton = 4;
inline bool soltplayer::has_betjetton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void soltplayer::set_has_betjetton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void soltplayer::clear_has_betjetton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void soltplayer::clear_betjetton() {
  betjetton_ = 0;
  clear_has_betjetton();
}
inline ::google::protobuf::int32 soltplayer::betjetton() const {
  return betjetton_;
}
inline void soltplayer::set_betjetton(::google::protobuf::int32 value) {
  set_has_betjetton();
  betjetton_ = value;
}

// optional int32 recvjetton = 5;
inline bool soltplayer::has_recvjetton() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void soltplayer::set_has_recvjetton() {
  _has_bits_[0] |= 0x00000010u;
}
inline void soltplayer::clear_has_recvjetton() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void soltplayer::clear_recvjetton() {
  recvjetton_ = 0;
  clear_has_recvjetton();
}
inline ::google::protobuf::int32 soltplayer::recvjetton() const {
  return recvjetton_;
}
inline void soltplayer::set_recvjetton(::google::protobuf::int32 value) {
  set_has_recvjetton();
  recvjetton_ = value;
}

// optional int32 breakret = 6;
inline bool soltplayer::has_breakret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void soltplayer::set_has_breakret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void soltplayer::clear_has_breakret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void soltplayer::clear_breakret() {
  breakret_ = 0;
  clear_has_breakret();
}
inline ::google::protobuf::int32 soltplayer::breakret() const {
  return breakret_;
}
inline void soltplayer::set_breakret(::google::protobuf::int32 value) {
  set_has_breakret();
  breakret_ = value;
}

// optional int32 continuous = 7;
inline bool soltplayer::has_continuous() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void soltplayer::set_has_continuous() {
  _has_bits_[0] |= 0x00000040u;
}
inline void soltplayer::clear_has_continuous() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void soltplayer::clear_continuous() {
  continuous_ = 0;
  clear_has_continuous();
}
inline ::google::protobuf::int32 soltplayer::continuous() const {
  return continuous_;
}
inline void soltplayer::set_continuous(::google::protobuf::int32 value) {
  set_has_continuous();
  continuous_ = value;
}

// optional int32 retamount = 8;
inline bool soltplayer::has_retamount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void soltplayer::set_has_retamount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void soltplayer::clear_has_retamount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void soltplayer::clear_retamount() {
  retamount_ = 0;
  clear_has_retamount();
}
inline ::google::protobuf::int32 soltplayer::retamount() const {
  return retamount_;
}
inline void soltplayer::set_retamount(::google::protobuf::int32 value) {
  set_has_retamount();
  retamount_ = value;
}

// optional int32 retjetton = 9;
inline bool soltplayer::has_retjetton() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void soltplayer::set_has_retjetton() {
  _has_bits_[0] |= 0x00000100u;
}
inline void soltplayer::clear_has_retjetton() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void soltplayer::clear_retjetton() {
  retjetton_ = 0;
  clear_has_retjetton();
}
inline ::google::protobuf::int32 soltplayer::retjetton() const {
  return retjetton_;
}
inline void soltplayer::set_retjetton(::google::protobuf::int32 value) {
  set_has_retjetton();
  retjetton_ = value;
}

// optional int32 freeamount = 10;
inline bool soltplayer::has_freeamount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void soltplayer::set_has_freeamount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void soltplayer::clear_has_freeamount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void soltplayer::clear_freeamount() {
  freeamount_ = 0;
  clear_has_freeamount();
}
inline ::google::protobuf::int32 soltplayer::freeamount() const {
  return freeamount_;
}
inline void soltplayer::set_freeamount(::google::protobuf::int32 value) {
  set_has_freeamount();
  freeamount_ = value;
}

// -------------------------------------------------------------------

// soltwin

// optional int32 awardtype = 1;
inline bool soltwin::has_awardtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soltwin::set_has_awardtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soltwin::clear_has_awardtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soltwin::clear_awardtype() {
  awardtype_ = 0;
  clear_has_awardtype();
}
inline ::google::protobuf::int32 soltwin::awardtype() const {
  return awardtype_;
}
inline void soltwin::set_awardtype(::google::protobuf::int32 value) {
  set_has_awardtype();
  awardtype_ = value;
}

// optional int32 marknum = 2;
inline bool soltwin::has_marknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soltwin::set_has_marknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soltwin::clear_has_marknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soltwin::clear_marknum() {
  marknum_ = 0;
  clear_has_marknum();
}
inline ::google::protobuf::int32 soltwin::marknum() const {
  return marknum_;
}
inline void soltwin::set_marknum(::google::protobuf::int32 value) {
  set_has_marknum();
  marknum_ = value;
}

// optional int32 amount = 3;
inline bool soltwin::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soltwin::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soltwin::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soltwin::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 soltwin::amount() const {
  return amount_;
}
inline void soltwin::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 iswin = 4;
inline bool soltwin::has_iswin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void soltwin::set_has_iswin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void soltwin::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void soltwin::clear_iswin() {
  iswin_ = 0;
  clear_has_iswin();
}
inline ::google::protobuf::int32 soltwin::iswin() const {
  return iswin_;
}
inline void soltwin::set_iswin(::google::protobuf::int32 value) {
  set_has_iswin();
  iswin_ = value;
}

// -------------------------------------------------------------------

// soltuser

// optional int32 id = 1;
inline bool soltuser::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soltuser::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soltuser::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soltuser::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 soltuser::id() const {
  return id_;
}
inline void soltuser::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 fruittype = 2;
inline bool soltuser::has_fruittype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soltuser::set_has_fruittype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soltuser::clear_has_fruittype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soltuser::clear_fruittype() {
  fruittype_ = 0;
  clear_has_fruittype();
}
inline ::google::protobuf::int32 soltuser::fruittype() const {
  return fruittype_;
}
inline void soltuser::set_fruittype(::google::protobuf::int32 value) {
  set_has_fruittype();
  fruittype_ = value;
}

// repeated .progame.soltwin fwlist = 3;
inline int soltuser::fwlist_size() const {
  return fwlist_.size();
}
inline void soltuser::clear_fwlist() {
  fwlist_.Clear();
}
inline const ::progame::soltwin& soltuser::fwlist(int index) const {
  return fwlist_.Get(index);
}
inline ::progame::soltwin* soltuser::mutable_fwlist(int index) {
  return fwlist_.Mutable(index);
}
inline ::progame::soltwin* soltuser::add_fwlist() {
  return fwlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::soltwin >&
soltuser::fwlist() const {
  return fwlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::soltwin >*
soltuser::mutable_fwlist() {
  return &fwlist_;
}

// optional int32 maxaction = 4;
inline bool soltuser::has_maxaction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void soltuser::set_has_maxaction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void soltuser::clear_has_maxaction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void soltuser::clear_maxaction() {
  maxaction_ = 0;
  clear_has_maxaction();
}
inline ::google::protobuf::int32 soltuser::maxaction() const {
  return maxaction_;
}
inline void soltuser::set_maxaction(::google::protobuf::int32 value) {
  set_has_maxaction();
  maxaction_ = value;
}

// optional int32 pourjetton = 5;
inline bool soltuser::has_pourjetton() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void soltuser::set_has_pourjetton() {
  _has_bits_[0] |= 0x00000010u;
}
inline void soltuser::clear_has_pourjetton() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void soltuser::clear_pourjetton() {
  pourjetton_ = 0;
  clear_has_pourjetton();
}
inline ::google::protobuf::int32 soltuser::pourjetton() const {
  return pourjetton_;
}
inline void soltuser::set_pourjetton(::google::protobuf::int32 value) {
  set_has_pourjetton();
  pourjetton_ = value;
}

// optional int32 winjetton = 6;
inline bool soltuser::has_winjetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void soltuser::set_has_winjetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void soltuser::clear_has_winjetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void soltuser::clear_winjetton() {
  winjetton_ = 0;
  clear_has_winjetton();
}
inline ::google::protobuf::int32 soltuser::winjetton() const {
  return winjetton_;
}
inline void soltuser::set_winjetton(::google::protobuf::int32 value) {
  set_has_winjetton();
  winjetton_ = value;
}

// optional int32 wintype1 = 7;
inline bool soltuser::has_wintype1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void soltuser::set_has_wintype1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void soltuser::clear_has_wintype1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void soltuser::clear_wintype1() {
  wintype1_ = 0;
  clear_has_wintype1();
}
inline ::google::protobuf::int32 soltuser::wintype1() const {
  return wintype1_;
}
inline void soltuser::set_wintype1(::google::protobuf::int32 value) {
  set_has_wintype1();
  wintype1_ = value;
}

// optional int32 wintype2 = 8;
inline bool soltuser::has_wintype2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void soltuser::set_has_wintype2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void soltuser::clear_has_wintype2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void soltuser::clear_wintype2() {
  wintype2_ = 0;
  clear_has_wintype2();
}
inline ::google::protobuf::int32 soltuser::wintype2() const {
  return wintype2_;
}
inline void soltuser::set_wintype2(::google::protobuf::int32 value) {
  set_has_wintype2();
  wintype2_ = value;
}

// optional int32 wintype3 = 9;
inline bool soltuser::has_wintype3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void soltuser::set_has_wintype3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void soltuser::clear_has_wintype3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void soltuser::clear_wintype3() {
  wintype3_ = 0;
  clear_has_wintype3();
}
inline ::google::protobuf::int32 soltuser::wintype3() const {
  return wintype3_;
}
inline void soltuser::set_wintype3(::google::protobuf::int32 value) {
  set_has_wintype3();
  wintype3_ = value;
}

// optional int32 wintype4 = 10;
inline bool soltuser::has_wintype4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void soltuser::set_has_wintype4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void soltuser::clear_has_wintype4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void soltuser::clear_wintype4() {
  wintype4_ = 0;
  clear_has_wintype4();
}
inline ::google::protobuf::int32 soltuser::wintype4() const {
  return wintype4_;
}
inline void soltuser::set_wintype4(::google::protobuf::int32 value) {
  set_has_wintype4();
  wintype4_ = value;
}

// optional int32 wintype5 = 11;
inline bool soltuser::has_wintype5() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void soltuser::set_has_wintype5() {
  _has_bits_[0] |= 0x00000400u;
}
inline void soltuser::clear_has_wintype5() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void soltuser::clear_wintype5() {
  wintype5_ = 0;
  clear_has_wintype5();
}
inline ::google::protobuf::int32 soltuser::wintype5() const {
  return wintype5_;
}
inline void soltuser::set_wintype5(::google::protobuf::int32 value) {
  set_has_wintype5();
  wintype5_ = value;
}

// optional int32 wintype6 = 12;
inline bool soltuser::has_wintype6() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void soltuser::set_has_wintype6() {
  _has_bits_[0] |= 0x00000800u;
}
inline void soltuser::clear_has_wintype6() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void soltuser::clear_wintype6() {
  wintype6_ = 0;
  clear_has_wintype6();
}
inline ::google::protobuf::int32 soltuser::wintype6() const {
  return wintype6_;
}
inline void soltuser::set_wintype6(::google::protobuf::int32 value) {
  set_has_wintype6();
  wintype6_ = value;
}

// optional int32 wintype7 = 13;
inline bool soltuser::has_wintype7() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void soltuser::set_has_wintype7() {
  _has_bits_[0] |= 0x00001000u;
}
inline void soltuser::clear_has_wintype7() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void soltuser::clear_wintype7() {
  wintype7_ = 0;
  clear_has_wintype7();
}
inline ::google::protobuf::int32 soltuser::wintype7() const {
  return wintype7_;
}
inline void soltuser::set_wintype7(::google::protobuf::int32 value) {
  set_has_wintype7();
  wintype7_ = value;
}

// optional int32 wintype8 = 14;
inline bool soltuser::has_wintype8() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void soltuser::set_has_wintype8() {
  _has_bits_[0] |= 0x00002000u;
}
inline void soltuser::clear_has_wintype8() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void soltuser::clear_wintype8() {
  wintype8_ = 0;
  clear_has_wintype8();
}
inline ::google::protobuf::int32 soltuser::wintype8() const {
  return wintype8_;
}
inline void soltuser::set_wintype8(::google::protobuf::int32 value) {
  set_has_wintype8();
  wintype8_ = value;
}

// optional int32 wintype9 = 15;
inline bool soltuser::has_wintype9() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void soltuser::set_has_wintype9() {
  _has_bits_[0] |= 0x00004000u;
}
inline void soltuser::clear_has_wintype9() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void soltuser::clear_wintype9() {
  wintype9_ = 0;
  clear_has_wintype9();
}
inline ::google::protobuf::int32 soltuser::wintype9() const {
  return wintype9_;
}
inline void soltuser::set_wintype9(::google::protobuf::int32 value) {
  set_has_wintype9();
  wintype9_ = value;
}

// -------------------------------------------------------------------

// soltuserlist

// optional int32 userid = 1;
inline bool soltuserlist::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soltuserlist::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soltuserlist::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soltuserlist::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 soltuserlist::userid() const {
  return userid_;
}
inline void soltuserlist::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// repeated .progame.soltuser fulist = 2;
inline int soltuserlist::fulist_size() const {
  return fulist_.size();
}
inline void soltuserlist::clear_fulist() {
  fulist_.Clear();
}
inline const ::progame::soltuser& soltuserlist::fulist(int index) const {
  return fulist_.Get(index);
}
inline ::progame::soltuser* soltuserlist::mutable_fulist(int index) {
  return fulist_.Mutable(index);
}
inline ::progame::soltuser* soltuserlist::add_fulist() {
  return fulist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::soltuser >&
soltuserlist::fulist() const {
  return fulist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::soltuser >*
soltuserlist::mutable_fulist() {
  return &fulist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fslot_2eproto__INCLUDED
