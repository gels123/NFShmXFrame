// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_lkpy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_lkpy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* lkpyconffish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpyconffish_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpyconfcannon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpyconfcannon_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpyconfitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpyconfitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpygameconf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpygameconf_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpycreatefish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpycreatefish_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpycreatebullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpycreatebullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpyitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpyitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpyuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpyuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpyuseitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpyuseitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpyinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpyinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* lkpycatchfish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lkpycatchfish_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5flkpy_2eproto() {
  protobuf_AddDesc_st_5flkpy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_lkpy.proto");
  GOOGLE_CHECK(file != NULL);
  lkpyconffish_descriptor_ = file->message_type(0);
  static const int lkpyconffish_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, pathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, scoretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, score_),
  };
  lkpyconffish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpyconffish_descriptor_,
      lkpyconffish::default_instance_,
      lkpyconffish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconffish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpyconffish));
  lkpyconfcannon_descriptor_ = file->message_type(1);
  static const int lkpyconfcannon_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, tubenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, givejetton_),
  };
  lkpyconfcannon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpyconfcannon_descriptor_,
      lkpyconfcannon::default_instance_,
      lkpyconfcannon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfcannon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpyconfcannon));
  lkpyconfitem_descriptor_ = file->message_type(2);
  static const int lkpyconfitem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfitem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfitem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfitem, consumetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfitem, consume_),
  };
  lkpyconfitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpyconfitem_descriptor_,
      lkpyconfitem::default_instance_,
      lkpyconfitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyconfitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpyconfitem));
  lkpygameconf_descriptor_ = file->message_type(3);
  static const int lkpygameconf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, fishlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, cannonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, fireinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, ionneedpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, rangebombradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, freezetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, freezecooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, locktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, lockcooldown_),
  };
  lkpygameconf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpygameconf_descriptor_,
      lkpygameconf::default_instance_,
      lkpygameconf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpygameconf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpygameconf));
  lkpycreatefish_descriptor_ = file->message_type(4);
  static const int lkpycreatefish_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, pathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, pathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, elaspe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, borntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, lifecycle_),
  };
  lkpycreatefish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpycreatefish_descriptor_,
      lkpycreatefish::default_instance_,
      lkpycreatefish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatefish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpycreatefish));
  lkpycreatebullet_descriptor_ = file->message_type(5);
  static const int lkpycreatebullet_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, cannontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, elaspe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, mul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, new__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, tubenum_),
  };
  lkpycreatebullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpycreatebullet_descriptor_,
      lkpycreatebullet::default_instance_,
      lkpycreatebullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycreatebullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpycreatebullet));
  lkpyitem_descriptor_ = file->message_type(6);
  static const int lkpyitem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyitem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyitem, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyitem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyitem, type_),
  };
  lkpyitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpyitem_descriptor_,
      lkpyitem::default_instance_,
      lkpyitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpyitem));
  lkpyuser_descriptor_ = file->message_type(7);
  static const int lkpyuser_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, cannontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, cannonlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, bank_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, cannonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, createbulletlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, backpack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, tubenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, cannonmul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, lastfiretime_),
  };
  lkpyuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpyuser_descriptor_,
      lkpyuser::default_instance_,
      lkpyuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpyuser));
  lkpyuseitem_descriptor_ = file->message_type(8);
  static const int lkpyuseitem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuseitem, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuseitem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuseitem, time_),
  };
  lkpyuseitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpyuseitem_descriptor_,
      lkpyuseitem::default_instance_,
      lkpyuseitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuseitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyuseitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpyuseitem));
  lkpyinfo_descriptor_ = file->message_type(9);
  static const int lkpyinfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, minenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, maxenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, createfishlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, cursceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, presceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, nextfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, useitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, shoalpathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, systime_),
  };
  lkpyinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpyinfo_descriptor_,
      lkpyinfo::default_instance_,
      lkpyinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpyinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpyinfo));
  lkpycatchfish_descriptor_ = file->message_type(10);
  static const int lkpycatchfish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycatchfish, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycatchfish, scoretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycatchfish, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycatchfish, scoremul_),
  };
  lkpycatchfish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lkpycatchfish_descriptor_,
      lkpycatchfish::default_instance_,
      lkpycatchfish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycatchfish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lkpycatchfish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lkpycatchfish));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5flkpy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpyconffish_descriptor_, &lkpyconffish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpyconfcannon_descriptor_, &lkpyconfcannon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpyconfitem_descriptor_, &lkpyconfitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpygameconf_descriptor_, &lkpygameconf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpycreatefish_descriptor_, &lkpycreatefish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpycreatebullet_descriptor_, &lkpycreatebullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpyitem_descriptor_, &lkpyitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpyuser_descriptor_, &lkpyuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpyuseitem_descriptor_, &lkpyuseitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpyinfo_descriptor_, &lkpyinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lkpycatchfish_descriptor_, &lkpycatchfish::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5flkpy_2eproto() {
  delete lkpyconffish::default_instance_;
  delete lkpyconffish_reflection_;
  delete lkpyconfcannon::default_instance_;
  delete lkpyconfcannon_reflection_;
  delete lkpyconfitem::default_instance_;
  delete lkpyconfitem_reflection_;
  delete lkpygameconf::default_instance_;
  delete lkpygameconf_reflection_;
  delete lkpycreatefish::default_instance_;
  delete lkpycreatefish_reflection_;
  delete lkpycreatebullet::default_instance_;
  delete lkpycreatebullet_reflection_;
  delete lkpyitem::default_instance_;
  delete lkpyitem_reflection_;
  delete lkpyuser::default_instance_;
  delete lkpyuser_reflection_;
  delete lkpyuseitem::default_instance_;
  delete lkpyuseitem_reflection_;
  delete lkpyinfo::default_instance_;
  delete lkpyinfo_reflection_;
  delete lkpycatchfish::default_instance_;
  delete lkpycatchfish_reflection_;
}

void protobuf_AddDesc_st_5flkpy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_lkpy.proto\022\007progame\032\016st_human.proto"
    "\"\177\n\014lkpyconffish\022\014\n\004type\030\001 \001(\005\022\016\n\006enable"
    "\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\020\n"
    "\010pathtype\030\005 \001(\005\022\021\n\tscoretype\030\006 \001(\005\022\r\n\005sc"
    "ore\030\007 \001(\t\"\220\001\n\016lkpyconfcannon\022\014\n\004type\030\001 \001"
    "(\005\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\r\n\005spe"
    "ed\030\004 \001(\002\022\017\n\007tubenum\030\005 \001(\005\022\016\n\006jetton\030\006 \001("
    "\t\022\r\n\005money\030\007 \001(\005\022\022\n\ngivejetton\030\010 \001(\005\"P\n\014"
    "lkpyconfitem\022\014\n\004type\030\001 \001(\005\022\014\n\004name\030\002 \001(\t"
    "\022\023\n\013consumetype\030\003 \001(\005\022\017\n\007consume\030\004 \001(\005\"\246"
    "\002\n\014lkpygameconf\022\'\n\010fishlist\030\001 \003(\0132\025.prog"
    "ame.lkpyconffish\022+\n\ncannonlist\030\002 \003(\0132\027.p"
    "rogame.lkpyconfcannon\022\024\n\014fireinterval\030\003 "
    "\001(\002\022\024\n\014ionneedpower\030\004 \001(\005\022\027\n\017rangebombra"
    "dius\030\005 \001(\005\022\022\n\nfreezetime\030\006 \001(\002\022\'\n\010itemli"
    "st\030\007 \003(\0132\025.progame.lkpyconfitem\022\026\n\016freez"
    "ecooldown\030\010 \001(\002\022\020\n\010locktime\030\t \001(\002\022\024\n\014loc"
    "kcooldown\030\n \001(\002\"\236\002\n\016lkpycreatefish\022\014\n\004ty"
    "pe\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\016\n\006pathid\030\003 \001(\005\022\020\n\010"
    "pathtype\030\004 \001(\005\022\r\n\005width\030\005 \001(\005\022\016\n\006height\030"
    "\006 \001(\005\022\017\n\007offsetx\030\007 \001(\002\022\017\n\007offsety\030\010 \001(\002\022"
    "\r\n\005delay\030\t \001(\002\022\016\n\006elaspe\030\n \001(\002\022\r\n\005speed\030"
    "\013 \001(\002\022\020\n\010borntime\030\014 \001(\001\022\014\n\004data\030\r \001(\005\022\r\n"
    "\005score\030\016 \001(\005\022\016\n\006attrid\030\017 \001(\005\022\017\n\007chairid\030"
    "\020 \001(\005\022\021\n\tlifecycle\030\021 \001(\002\"\313\001\n\020lkpycreateb"
    "ullet\022\022\n\ncannontype\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n"
    "\005speed\030\003 \001(\002\022\014\n\004posx\030\004 \001(\002\022\014\n\004posy\030\005 \001(\002"
    "\022\021\n\tdirection\030\006 \001(\002\022\016\n\006elaspe\030\007 \001(\005\022\016\n\006i"
    "temid\030\010 \001(\005\022\016\n\006fishid\030\t \001(\005\022\013\n\003mul\030\n \001(\005"
    "\022\013\n\003new\030\013 \001(\005\022\017\n\007tubenum\030\014 \001(\005\"I\n\010lkpyit"
    "em\022\016\n\006itemid\030\001 \001(\005\022\016\n\006slotid\030\002 \001(\005\022\017\n\007it"
    "emnum\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\"\374\002\n\010lkpyuser\022\016"
    "\n\006userid\030\001 \001(\005\022\017\n\007chairid\030\002 \001(\005\022\020\n\010nickn"
    "ame\030\003 \001(\t\022\016\n\006faceid\030\004 \001(\t\022\013\n\003sex\030\005 \001(\005\022\016"
    "\n\006jetton\030\006 \001(\t\022\r\n\005money\030\007 \001(\t\022\017\n\007isrobot"
    "\030\010 \001(\005\022\022\n\ncannontype\030\t \001(\005\022\020\n\010cannonlv\030\n"
    " \001(\005\022\023\n\013bank_jetton\030\013 \001(\t\022\r\n\005state\030\014 \001(\005"
    "\022\022\n\ncannonlist\030\r \003(\005\0223\n\020createbulletlist"
    "\030\016 \003(\0132\031.progame.lkpycreatebullet\022#\n\010bac"
    "kpack\030\017 \003(\0132\021.progame.lkpyitem\022\017\n\007tubenu"
    "m\030\020 \001(\005\022\021\n\tcannonmul\030\021 \001(\005\022\024\n\014lastfireti"
    "me\030\022 \001(\001\"9\n\013lkpyuseitem\022\016\n\006userid\030\001 \001(\005\022"
    "\014\n\004type\030\002 \001(\005\022\014\n\004time\030\003 \001(\001\"\373\002\n\010lkpyinfo"
    "\022\017\n\007tableid\030\001 \001(\005\022\021\n\ttabletype\030\002 \001(\005\022\r\n\005"
    "state\030\003 \001(\005\022\020\n\010timemark\030\004 \001(\005\022\020\n\010minente"
    "r\030\005 \001(\t\022\020\n\010maxenter\030\006 \001(\t\022\017\n\007maxuser\030\r \001"
    "(\005\022\"\n\007situser\030\016 \003(\0132\021.progame.lkpyuser\022\021"
    "\n\tstanduser\030\017 \003(\005\022/\n\016createfishlist\030\020 \003("
    "\0132\027.progame.lkpycreatefish\022\022\n\ncursceneid"
    "\030\021 \001(\005\022\022\n\npresceneid\030\022 \001(\005\022\022\n\nnextfishid"
    "\030\023 \001(\005\022)\n\013useitemlist\030\024 \003(\0132\024.progame.lk"
    "pyuseitem\022\025\n\rshoalpathtype\030\025 \001(\005\022\017\n\007syst"
    "ime\030\026 \001(\001\"O\n\rlkpycatchfish\022\n\n\002id\030\001 \001(\005\022\021"
    "\n\tscoretype\030\002 \001(\005\022\r\n\005score\030\003 \001(\005\022\020\n\010scor"
    "emul\030\004 \001(\005", 2170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_lkpy.proto", &protobuf_RegisterTypes);
  lkpyconffish::default_instance_ = new lkpyconffish();
  lkpyconfcannon::default_instance_ = new lkpyconfcannon();
  lkpyconfitem::default_instance_ = new lkpyconfitem();
  lkpygameconf::default_instance_ = new lkpygameconf();
  lkpycreatefish::default_instance_ = new lkpycreatefish();
  lkpycreatebullet::default_instance_ = new lkpycreatebullet();
  lkpyitem::default_instance_ = new lkpyitem();
  lkpyuser::default_instance_ = new lkpyuser();
  lkpyuseitem::default_instance_ = new lkpyuseitem();
  lkpyinfo::default_instance_ = new lkpyinfo();
  lkpycatchfish::default_instance_ = new lkpycatchfish();
  lkpyconffish::default_instance_->InitAsDefaultInstance();
  lkpyconfcannon::default_instance_->InitAsDefaultInstance();
  lkpyconfitem::default_instance_->InitAsDefaultInstance();
  lkpygameconf::default_instance_->InitAsDefaultInstance();
  lkpycreatefish::default_instance_->InitAsDefaultInstance();
  lkpycreatebullet::default_instance_->InitAsDefaultInstance();
  lkpyitem::default_instance_->InitAsDefaultInstance();
  lkpyuser::default_instance_->InitAsDefaultInstance();
  lkpyuseitem::default_instance_->InitAsDefaultInstance();
  lkpyinfo::default_instance_->InitAsDefaultInstance();
  lkpycatchfish::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5flkpy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5flkpy_2eproto {
  StaticDescriptorInitializer_st_5flkpy_2eproto() {
    protobuf_AddDesc_st_5flkpy_2eproto();
  }
} static_descriptor_initializer_st_5flkpy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int lkpyconffish::kTypeFieldNumber;
const int lkpyconffish::kEnableFieldNumber;
const int lkpyconffish::kWidthFieldNumber;
const int lkpyconffish::kHeightFieldNumber;
const int lkpyconffish::kPathtypeFieldNumber;
const int lkpyconffish::kScoretypeFieldNumber;
const int lkpyconffish::kScoreFieldNumber;
#endif  // !_MSC_VER

lkpyconffish::lkpyconffish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpyconffish::InitAsDefaultInstance() {
}

lkpyconffish::lkpyconffish(const lkpyconffish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpyconffish::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  enable_ = 0;
  width_ = 0;
  height_ = 0;
  pathtype_ = 0;
  scoretype_ = 0;
  score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpyconffish::~lkpyconffish() {
  SharedDtor();
}

void lkpyconffish::SharedDtor() {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (this != default_instance_) {
  }
}

void lkpyconffish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpyconffish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpyconffish_descriptor_;
}

const lkpyconffish& lkpyconffish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpyconffish* lkpyconffish::default_instance_ = NULL;

lkpyconffish* lkpyconffish::New() const {
  return new lkpyconffish;
}

void lkpyconffish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    enable_ = 0;
    width_ = 0;
    height_ = 0;
    pathtype_ = 0;
    scoretype_ = 0;
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpyconffish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enable;
        break;
      }

      // optional int32 enable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pathtype;
        break;
      }

      // optional int32 pathtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathtype_)));
          set_has_pathtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scoretype;
        break;
      }

      // optional int32 scoretype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoretype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoretype_)));
          set_has_scoretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_score;
        break;
      }

      // optional string score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score().data(), this->score().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpyconffish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 enable = 2;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enable(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional int32 pathtype = 5;
  if (has_pathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pathtype(), output);
  }

  // optional int32 scoretype = 6;
  if (has_scoretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->scoretype(), output);
  }

  // optional string score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpyconffish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 enable = 2;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enable(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional int32 pathtype = 5;
  if (has_pathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pathtype(), target);
  }

  // optional int32 scoretype = 6;
  if (has_scoretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->scoretype(), target);
  }

  // optional string score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpyconffish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 enable = 2;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 pathtype = 5;
    if (has_pathtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathtype());
    }

    // optional int32 scoretype = 6;
    if (has_scoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoretype());
    }

    // optional string score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpyconffish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpyconffish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpyconffish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpyconffish::MergeFrom(const lkpyconffish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_pathtype()) {
      set_pathtype(from.pathtype());
    }
    if (from.has_scoretype()) {
      set_scoretype(from.scoretype());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpyconffish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpyconffish::CopyFrom(const lkpyconffish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpyconffish::IsInitialized() const {

  return true;
}

void lkpyconffish::Swap(lkpyconffish* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enable_, other->enable_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(pathtype_, other->pathtype_);
    std::swap(scoretype_, other->scoretype_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpyconffish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpyconffish_descriptor_;
  metadata.reflection = lkpyconffish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpyconfcannon::kTypeFieldNumber;
const int lkpyconfcannon::kWidthFieldNumber;
const int lkpyconfcannon::kHeightFieldNumber;
const int lkpyconfcannon::kSpeedFieldNumber;
const int lkpyconfcannon::kTubenumFieldNumber;
const int lkpyconfcannon::kJettonFieldNumber;
const int lkpyconfcannon::kMoneyFieldNumber;
const int lkpyconfcannon::kGivejettonFieldNumber;
#endif  // !_MSC_VER

lkpyconfcannon::lkpyconfcannon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpyconfcannon::InitAsDefaultInstance() {
}

lkpyconfcannon::lkpyconfcannon(const lkpyconfcannon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpyconfcannon::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  width_ = 0;
  height_ = 0;
  speed_ = 0;
  tubenum_ = 0;
  jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0;
  givejetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpyconfcannon::~lkpyconfcannon() {
  SharedDtor();
}

void lkpyconfcannon::SharedDtor() {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (this != default_instance_) {
  }
}

void lkpyconfcannon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpyconfcannon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpyconfcannon_descriptor_;
}

const lkpyconfcannon& lkpyconfcannon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpyconfcannon* lkpyconfcannon::default_instance_ = NULL;

lkpyconfcannon* lkpyconfcannon::New() const {
  return new lkpyconfcannon;
}

void lkpyconfcannon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    width_ = 0;
    height_ = 0;
    speed_ = 0;
    tubenum_ = 0;
    if (has_jetton()) {
      if (jetton_ != &::google::protobuf::internal::kEmptyString) {
        jetton_->clear();
      }
    }
    money_ = 0;
    givejetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpyconfcannon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_speed;
        break;
      }

      // optional float speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tubenum;
        break;
      }

      // optional int32 tubenum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tubenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubenum_)));
          set_has_tubenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_jetton;
        break;
      }

      // optional string jetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jetton().data(), this->jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }

      // optional int32 money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_givejetton;
        break;
      }

      // optional int32 givejetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_givejetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &givejetton_)));
          set_has_givejetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpyconfcannon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional float speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // optional int32 tubenum = 5;
  if (has_tubenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tubenum(), output);
  }

  // optional string jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->jetton(), output);
  }

  // optional int32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money(), output);
  }

  // optional int32 givejetton = 8;
  if (has_givejetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->givejetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpyconfcannon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional float speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // optional int32 tubenum = 5;
  if (has_tubenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tubenum(), target);
  }

  // optional string jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->jetton(), target);
  }

  // optional int32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money(), target);
  }

  // optional int32 givejetton = 8;
  if (has_givejetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->givejetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpyconfcannon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int32 tubenum = 5;
    if (has_tubenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubenum());
    }

    // optional string jetton = 6;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jetton());
    }

    // optional int32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 givejetton = 8;
    if (has_givejetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->givejetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpyconfcannon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpyconfcannon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpyconfcannon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpyconfcannon::MergeFrom(const lkpyconfcannon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_tubenum()) {
      set_tubenum(from.tubenum());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_givejetton()) {
      set_givejetton(from.givejetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpyconfcannon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpyconfcannon::CopyFrom(const lkpyconfcannon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpyconfcannon::IsInitialized() const {

  return true;
}

void lkpyconfcannon::Swap(lkpyconfcannon* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(speed_, other->speed_);
    std::swap(tubenum_, other->tubenum_);
    std::swap(jetton_, other->jetton_);
    std::swap(money_, other->money_);
    std::swap(givejetton_, other->givejetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpyconfcannon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpyconfcannon_descriptor_;
  metadata.reflection = lkpyconfcannon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpyconfitem::kTypeFieldNumber;
const int lkpyconfitem::kNameFieldNumber;
const int lkpyconfitem::kConsumetypeFieldNumber;
const int lkpyconfitem::kConsumeFieldNumber;
#endif  // !_MSC_VER

lkpyconfitem::lkpyconfitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpyconfitem::InitAsDefaultInstance() {
}

lkpyconfitem::lkpyconfitem(const lkpyconfitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpyconfitem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  consumetype_ = 0;
  consume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpyconfitem::~lkpyconfitem() {
  SharedDtor();
}

void lkpyconfitem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void lkpyconfitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpyconfitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpyconfitem_descriptor_;
}

const lkpyconfitem& lkpyconfitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpyconfitem* lkpyconfitem::default_instance_ = NULL;

lkpyconfitem* lkpyconfitem::New() const {
  return new lkpyconfitem;
}

void lkpyconfitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    consumetype_ = 0;
    consume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpyconfitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consumetype;
        break;
      }

      // optional int32 consumetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumetype_)));
          set_has_consumetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consume;
        break;
      }

      // optional int32 consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpyconfitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 consumetype = 3;
  if (has_consumetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consumetype(), output);
  }

  // optional int32 consume = 4;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->consume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpyconfitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 consumetype = 3;
  if (has_consumetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->consumetype(), target);
  }

  // optional int32 consume = 4;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->consume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpyconfitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 consumetype = 3;
    if (has_consumetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consumetype());
    }

    // optional int32 consume = 4;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpyconfitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpyconfitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpyconfitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpyconfitem::MergeFrom(const lkpyconfitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_consumetype()) {
      set_consumetype(from.consumetype());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpyconfitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpyconfitem::CopyFrom(const lkpyconfitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpyconfitem::IsInitialized() const {

  return true;
}

void lkpyconfitem::Swap(lkpyconfitem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(consumetype_, other->consumetype_);
    std::swap(consume_, other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpyconfitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpyconfitem_descriptor_;
  metadata.reflection = lkpyconfitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpygameconf::kFishlistFieldNumber;
const int lkpygameconf::kCannonlistFieldNumber;
const int lkpygameconf::kFireintervalFieldNumber;
const int lkpygameconf::kIonneedpowerFieldNumber;
const int lkpygameconf::kRangebombradiusFieldNumber;
const int lkpygameconf::kFreezetimeFieldNumber;
const int lkpygameconf::kItemlistFieldNumber;
const int lkpygameconf::kFreezecooldownFieldNumber;
const int lkpygameconf::kLocktimeFieldNumber;
const int lkpygameconf::kLockcooldownFieldNumber;
#endif  // !_MSC_VER

lkpygameconf::lkpygameconf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpygameconf::InitAsDefaultInstance() {
}

lkpygameconf::lkpygameconf(const lkpygameconf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpygameconf::SharedCtor() {
  _cached_size_ = 0;
  fireinterval_ = 0;
  ionneedpower_ = 0;
  rangebombradius_ = 0;
  freezetime_ = 0;
  freezecooldown_ = 0;
  locktime_ = 0;
  lockcooldown_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpygameconf::~lkpygameconf() {
  SharedDtor();
}

void lkpygameconf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lkpygameconf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpygameconf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpygameconf_descriptor_;
}

const lkpygameconf& lkpygameconf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpygameconf* lkpygameconf::default_instance_ = NULL;

lkpygameconf* lkpygameconf::New() const {
  return new lkpygameconf;
}

void lkpygameconf::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    fireinterval_ = 0;
    ionneedpower_ = 0;
    rangebombradius_ = 0;
    freezetime_ = 0;
    freezecooldown_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    locktime_ = 0;
    lockcooldown_ = 0;
  }
  fishlist_.Clear();
  cannonlist_.Clear();
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpygameconf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .progame.lkpyconffish fishlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fishlist;
        if (input->ExpectTag(18)) goto parse_cannonlist;
        break;
      }

      // repeated .progame.lkpyconfcannon cannonlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cannonlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cannonlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cannonlist;
        if (input->ExpectTag(29)) goto parse_fireinterval;
        break;
      }

      // optional float fireinterval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fireinterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fireinterval_)));
          set_has_fireinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ionneedpower;
        break;
      }

      // optional int32 ionneedpower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ionneedpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ionneedpower_)));
          set_has_ionneedpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rangebombradius;
        break;
      }

      // optional int32 rangebombradius = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rangebombradius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rangebombradius_)));
          set_has_rangebombradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_freezetime;
        break;
      }

      // optional float freezetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freezetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freezetime_)));
          set_has_freezetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_itemlist;
        break;
      }

      // repeated .progame.lkpyconfitem itemlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_itemlist;
        if (input->ExpectTag(69)) goto parse_freezecooldown;
        break;
      }

      // optional float freezecooldown = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freezecooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freezecooldown_)));
          set_has_freezecooldown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_locktime;
        break;
      }

      // optional float locktime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_locktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &locktime_)));
          set_has_locktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_lockcooldown;
        break;
      }

      // optional float lockcooldown = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lockcooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lockcooldown_)));
          set_has_lockcooldown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpygameconf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .progame.lkpyconffish fishlist = 1;
  for (int i = 0; i < this->fishlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fishlist(i), output);
  }

  // repeated .progame.lkpyconfcannon cannonlist = 2;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cannonlist(i), output);
  }

  // optional float fireinterval = 3;
  if (has_fireinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fireinterval(), output);
  }

  // optional int32 ionneedpower = 4;
  if (has_ionneedpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ionneedpower(), output);
  }

  // optional int32 rangebombradius = 5;
  if (has_rangebombradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rangebombradius(), output);
  }

  // optional float freezetime = 6;
  if (has_freezetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->freezetime(), output);
  }

  // repeated .progame.lkpyconfitem itemlist = 7;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->itemlist(i), output);
  }

  // optional float freezecooldown = 8;
  if (has_freezecooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->freezecooldown(), output);
  }

  // optional float locktime = 9;
  if (has_locktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->locktime(), output);
  }

  // optional float lockcooldown = 10;
  if (has_lockcooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lockcooldown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpygameconf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .progame.lkpyconffish fishlist = 1;
  for (int i = 0; i < this->fishlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fishlist(i), target);
  }

  // repeated .progame.lkpyconfcannon cannonlist = 2;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cannonlist(i), target);
  }

  // optional float fireinterval = 3;
  if (has_fireinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fireinterval(), target);
  }

  // optional int32 ionneedpower = 4;
  if (has_ionneedpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ionneedpower(), target);
  }

  // optional int32 rangebombradius = 5;
  if (has_rangebombradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rangebombradius(), target);
  }

  // optional float freezetime = 6;
  if (has_freezetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->freezetime(), target);
  }

  // repeated .progame.lkpyconfitem itemlist = 7;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->itemlist(i), target);
  }

  // optional float freezecooldown = 8;
  if (has_freezecooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->freezecooldown(), target);
  }

  // optional float locktime = 9;
  if (has_locktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->locktime(), target);
  }

  // optional float lockcooldown = 10;
  if (has_lockcooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lockcooldown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpygameconf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional float fireinterval = 3;
    if (has_fireinterval()) {
      total_size += 1 + 4;
    }

    // optional int32 ionneedpower = 4;
    if (has_ionneedpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ionneedpower());
    }

    // optional int32 rangebombradius = 5;
    if (has_rangebombradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rangebombradius());
    }

    // optional float freezetime = 6;
    if (has_freezetime()) {
      total_size += 1 + 4;
    }

    // optional float freezecooldown = 8;
    if (has_freezecooldown()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float locktime = 9;
    if (has_locktime()) {
      total_size += 1 + 4;
    }

    // optional float lockcooldown = 10;
    if (has_lockcooldown()) {
      total_size += 1 + 4;
    }

  }
  // repeated .progame.lkpyconffish fishlist = 1;
  total_size += 1 * this->fishlist_size();
  for (int i = 0; i < this->fishlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishlist(i));
  }

  // repeated .progame.lkpyconfcannon cannonlist = 2;
  total_size += 1 * this->cannonlist_size();
  for (int i = 0; i < this->cannonlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cannonlist(i));
  }

  // repeated .progame.lkpyconfitem itemlist = 7;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpygameconf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpygameconf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpygameconf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpygameconf::MergeFrom(const lkpygameconf& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishlist_.MergeFrom(from.fishlist_);
  cannonlist_.MergeFrom(from.cannonlist_);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_fireinterval()) {
      set_fireinterval(from.fireinterval());
    }
    if (from.has_ionneedpower()) {
      set_ionneedpower(from.ionneedpower());
    }
    if (from.has_rangebombradius()) {
      set_rangebombradius(from.rangebombradius());
    }
    if (from.has_freezetime()) {
      set_freezetime(from.freezetime());
    }
    if (from.has_freezecooldown()) {
      set_freezecooldown(from.freezecooldown());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_locktime()) {
      set_locktime(from.locktime());
    }
    if (from.has_lockcooldown()) {
      set_lockcooldown(from.lockcooldown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpygameconf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpygameconf::CopyFrom(const lkpygameconf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpygameconf::IsInitialized() const {

  return true;
}

void lkpygameconf::Swap(lkpygameconf* other) {
  if (other != this) {
    fishlist_.Swap(&other->fishlist_);
    cannonlist_.Swap(&other->cannonlist_);
    std::swap(fireinterval_, other->fireinterval_);
    std::swap(ionneedpower_, other->ionneedpower_);
    std::swap(rangebombradius_, other->rangebombradius_);
    std::swap(freezetime_, other->freezetime_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(freezecooldown_, other->freezecooldown_);
    std::swap(locktime_, other->locktime_);
    std::swap(lockcooldown_, other->lockcooldown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpygameconf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpygameconf_descriptor_;
  metadata.reflection = lkpygameconf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpycreatefish::kTypeFieldNumber;
const int lkpycreatefish::kIdFieldNumber;
const int lkpycreatefish::kPathidFieldNumber;
const int lkpycreatefish::kPathtypeFieldNumber;
const int lkpycreatefish::kWidthFieldNumber;
const int lkpycreatefish::kHeightFieldNumber;
const int lkpycreatefish::kOffsetxFieldNumber;
const int lkpycreatefish::kOffsetyFieldNumber;
const int lkpycreatefish::kDelayFieldNumber;
const int lkpycreatefish::kElaspeFieldNumber;
const int lkpycreatefish::kSpeedFieldNumber;
const int lkpycreatefish::kBorntimeFieldNumber;
const int lkpycreatefish::kDataFieldNumber;
const int lkpycreatefish::kScoreFieldNumber;
const int lkpycreatefish::kAttridFieldNumber;
const int lkpycreatefish::kChairidFieldNumber;
const int lkpycreatefish::kLifecycleFieldNumber;
#endif  // !_MSC_VER

lkpycreatefish::lkpycreatefish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpycreatefish::InitAsDefaultInstance() {
}

lkpycreatefish::lkpycreatefish(const lkpycreatefish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpycreatefish::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  pathid_ = 0;
  pathtype_ = 0;
  width_ = 0;
  height_ = 0;
  offsetx_ = 0;
  offsety_ = 0;
  delay_ = 0;
  elaspe_ = 0;
  speed_ = 0;
  borntime_ = 0;
  data_ = 0;
  score_ = 0;
  attrid_ = 0;
  chairid_ = 0;
  lifecycle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpycreatefish::~lkpycreatefish() {
  SharedDtor();
}

void lkpycreatefish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lkpycreatefish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpycreatefish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpycreatefish_descriptor_;
}

const lkpycreatefish& lkpycreatefish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpycreatefish* lkpycreatefish::default_instance_ = NULL;

lkpycreatefish* lkpycreatefish::New() const {
  return new lkpycreatefish;
}

void lkpycreatefish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    pathid_ = 0;
    pathtype_ = 0;
    width_ = 0;
    height_ = 0;
    offsetx_ = 0;
    offsety_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    delay_ = 0;
    elaspe_ = 0;
    speed_ = 0;
    borntime_ = 0;
    data_ = 0;
    score_ = 0;
    attrid_ = 0;
    chairid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lifecycle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpycreatefish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pathid;
        break;
      }

      // optional int32 pathid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathid_)));
          set_has_pathid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pathtype;
        break;
      }

      // optional int32 pathtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathtype_)));
          set_has_pathtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // optional int32 width = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // optional int32 height = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_offsetx;
        break;
      }

      // optional float offsetx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_offsety;
        break;
      }

      // optional float offsety = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_delay;
        break;
      }

      // optional float delay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_elaspe;
        break;
      }

      // optional float elaspe = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elaspe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elaspe_)));
          set_has_elaspe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_speed;
        break;
      }

      // optional float speed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_borntime;
        break;
      }

      // optional double borntime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_borntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &borntime_)));
          set_has_borntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_data;
        break;
      }

      // optional int32 data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_score;
        break;
      }

      // optional int32 score = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_attrid;
        break;
      }

      // optional int32 attrid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_lifecycle;
        break;
      }

      // optional float lifecycle = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lifecycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lifecycle_)));
          set_has_lifecycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpycreatefish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 pathid = 3;
  if (has_pathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pathid(), output);
  }

  // optional int32 pathtype = 4;
  if (has_pathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pathtype(), output);
  }

  // optional int32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional int32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  // optional float offsetx = 7;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->offsetx(), output);
  }

  // optional float offsety = 8;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->offsety(), output);
  }

  // optional float delay = 9;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->delay(), output);
  }

  // optional float elaspe = 10;
  if (has_elaspe()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->elaspe(), output);
  }

  // optional float speed = 11;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->speed(), output);
  }

  // optional double borntime = 12;
  if (has_borntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->borntime(), output);
  }

  // optional int32 data = 13;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->data(), output);
  }

  // optional int32 score = 14;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->score(), output);
  }

  // optional int32 attrid = 15;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->attrid(), output);
  }

  // optional int32 chairid = 16;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->chairid(), output);
  }

  // optional float lifecycle = 17;
  if (has_lifecycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->lifecycle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpycreatefish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 pathid = 3;
  if (has_pathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pathid(), target);
  }

  // optional int32 pathtype = 4;
  if (has_pathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pathtype(), target);
  }

  // optional int32 width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // optional int32 height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height(), target);
  }

  // optional float offsetx = 7;
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->offsetx(), target);
  }

  // optional float offsety = 8;
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->offsety(), target);
  }

  // optional float delay = 9;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->delay(), target);
  }

  // optional float elaspe = 10;
  if (has_elaspe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->elaspe(), target);
  }

  // optional float speed = 11;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->speed(), target);
  }

  // optional double borntime = 12;
  if (has_borntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->borntime(), target);
  }

  // optional int32 data = 13;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->data(), target);
  }

  // optional int32 score = 14;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->score(), target);
  }

  // optional int32 attrid = 15;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->attrid(), target);
  }

  // optional int32 chairid = 16;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->chairid(), target);
  }

  // optional float lifecycle = 17;
  if (has_lifecycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->lifecycle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpycreatefish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 pathid = 3;
    if (has_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathid());
    }

    // optional int32 pathtype = 4;
    if (has_pathtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathtype());
    }

    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional float offsetx = 7;
    if (has_offsetx()) {
      total_size += 1 + 4;
    }

    // optional float offsety = 8;
    if (has_offsety()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float delay = 9;
    if (has_delay()) {
      total_size += 1 + 4;
    }

    // optional float elaspe = 10;
    if (has_elaspe()) {
      total_size += 1 + 4;
    }

    // optional float speed = 11;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional double borntime = 12;
    if (has_borntime()) {
      total_size += 1 + 8;
    }

    // optional int32 data = 13;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

    // optional int32 score = 14;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 attrid = 15;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrid());
    }

    // optional int32 chairid = 16;
    if (has_chairid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float lifecycle = 17;
    if (has_lifecycle()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpycreatefish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpycreatefish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpycreatefish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpycreatefish::MergeFrom(const lkpycreatefish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pathid()) {
      set_pathid(from.pathid());
    }
    if (from.has_pathtype()) {
      set_pathtype(from.pathtype());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_elaspe()) {
      set_elaspe(from.elaspe());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_borntime()) {
      set_borntime(from.borntime());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lifecycle()) {
      set_lifecycle(from.lifecycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpycreatefish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpycreatefish::CopyFrom(const lkpycreatefish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpycreatefish::IsInitialized() const {

  return true;
}

void lkpycreatefish::Swap(lkpycreatefish* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(pathid_, other->pathid_);
    std::swap(pathtype_, other->pathtype_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(delay_, other->delay_);
    std::swap(elaspe_, other->elaspe_);
    std::swap(speed_, other->speed_);
    std::swap(borntime_, other->borntime_);
    std::swap(data_, other->data_);
    std::swap(score_, other->score_);
    std::swap(attrid_, other->attrid_);
    std::swap(chairid_, other->chairid_);
    std::swap(lifecycle_, other->lifecycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpycreatefish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpycreatefish_descriptor_;
  metadata.reflection = lkpycreatefish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpycreatebullet::kCannontypeFieldNumber;
const int lkpycreatebullet::kIdFieldNumber;
const int lkpycreatebullet::kSpeedFieldNumber;
const int lkpycreatebullet::kPosxFieldNumber;
const int lkpycreatebullet::kPosyFieldNumber;
const int lkpycreatebullet::kDirectionFieldNumber;
const int lkpycreatebullet::kElaspeFieldNumber;
const int lkpycreatebullet::kItemidFieldNumber;
const int lkpycreatebullet::kFishidFieldNumber;
const int lkpycreatebullet::kMulFieldNumber;
const int lkpycreatebullet::kNewFieldNumber;
const int lkpycreatebullet::kTubenumFieldNumber;
#endif  // !_MSC_VER

lkpycreatebullet::lkpycreatebullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpycreatebullet::InitAsDefaultInstance() {
}

lkpycreatebullet::lkpycreatebullet(const lkpycreatebullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpycreatebullet::SharedCtor() {
  _cached_size_ = 0;
  cannontype_ = 0;
  id_ = 0;
  speed_ = 0;
  posx_ = 0;
  posy_ = 0;
  direction_ = 0;
  elaspe_ = 0;
  itemid_ = 0;
  fishid_ = 0;
  mul_ = 0;
  new__ = 0;
  tubenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpycreatebullet::~lkpycreatebullet() {
  SharedDtor();
}

void lkpycreatebullet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lkpycreatebullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpycreatebullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpycreatebullet_descriptor_;
}

const lkpycreatebullet& lkpycreatebullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpycreatebullet* lkpycreatebullet::default_instance_ = NULL;

lkpycreatebullet* lkpycreatebullet::New() const {
  return new lkpycreatebullet;
}

void lkpycreatebullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cannontype_ = 0;
    id_ = 0;
    speed_ = 0;
    posx_ = 0;
    posy_ = 0;
    direction_ = 0;
    elaspe_ = 0;
    itemid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fishid_ = 0;
    mul_ = 0;
    new__ = 0;
    tubenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpycreatebullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cannontype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannontype_)));
          set_has_cannontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speed;
        break;
      }

      // optional float speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posx;
        break;
      }

      // optional float posx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posy;
        break;
      }

      // optional float posy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_direction;
        break;
      }

      // optional float direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_elaspe;
        break;
      }

      // optional int32 elaspe = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elaspe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elaspe_)));
          set_has_elaspe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fishid;
        break;
      }

      // optional int32 fishid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mul;
        break;
      }

      // optional int32 mul = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mul_)));
          set_has_mul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_new;
        break;
      }

      // optional int32 new = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new__)));
          set_has_new_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tubenum;
        break;
      }

      // optional int32 tubenum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tubenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubenum_)));
          set_has_tubenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpycreatebullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cannontype = 1;
  if (has_cannontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cannontype(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional float speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // optional float posx = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posx(), output);
  }

  // optional float posy = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posy(), output);
  }

  // optional float direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->direction(), output);
  }

  // optional int32 elaspe = 7;
  if (has_elaspe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->elaspe(), output);
  }

  // optional int32 itemid = 8;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->itemid(), output);
  }

  // optional int32 fishid = 9;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fishid(), output);
  }

  // optional int32 mul = 10;
  if (has_mul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mul(), output);
  }

  // optional int32 new = 11;
  if (has_new_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->new_(), output);
  }

  // optional int32 tubenum = 12;
  if (has_tubenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tubenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpycreatebullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cannontype = 1;
  if (has_cannontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cannontype(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional float speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // optional float posx = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posx(), target);
  }

  // optional float posy = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posy(), target);
  }

  // optional float direction = 6;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->direction(), target);
  }

  // optional int32 elaspe = 7;
  if (has_elaspe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->elaspe(), target);
  }

  // optional int32 itemid = 8;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->itemid(), target);
  }

  // optional int32 fishid = 9;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fishid(), target);
  }

  // optional int32 mul = 10;
  if (has_mul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mul(), target);
  }

  // optional int32 new = 11;
  if (has_new_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->new_(), target);
  }

  // optional int32 tubenum = 12;
  if (has_tubenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tubenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpycreatebullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cannontype = 1;
    if (has_cannontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannontype());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional float speed = 3;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float posx = 4;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // optional float posy = 5;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // optional float direction = 6;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // optional int32 elaspe = 7;
    if (has_elaspe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elaspe());
    }

    // optional int32 itemid = 8;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fishid = 9;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

    // optional int32 mul = 10;
    if (has_mul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mul());
    }

    // optional int32 new = 11;
    if (has_new_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_());
    }

    // optional int32 tubenum = 12;
    if (has_tubenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpycreatebullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpycreatebullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpycreatebullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpycreatebullet::MergeFrom(const lkpycreatebullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cannontype()) {
      set_cannontype(from.cannontype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_elaspe()) {
      set_elaspe(from.elaspe());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_mul()) {
      set_mul(from.mul());
    }
    if (from.has_new_()) {
      set_new_(from.new_());
    }
    if (from.has_tubenum()) {
      set_tubenum(from.tubenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpycreatebullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpycreatebullet::CopyFrom(const lkpycreatebullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpycreatebullet::IsInitialized() const {

  return true;
}

void lkpycreatebullet::Swap(lkpycreatebullet* other) {
  if (other != this) {
    std::swap(cannontype_, other->cannontype_);
    std::swap(id_, other->id_);
    std::swap(speed_, other->speed_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(direction_, other->direction_);
    std::swap(elaspe_, other->elaspe_);
    std::swap(itemid_, other->itemid_);
    std::swap(fishid_, other->fishid_);
    std::swap(mul_, other->mul_);
    std::swap(new__, other->new__);
    std::swap(tubenum_, other->tubenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpycreatebullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpycreatebullet_descriptor_;
  metadata.reflection = lkpycreatebullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpyitem::kItemidFieldNumber;
const int lkpyitem::kSlotidFieldNumber;
const int lkpyitem::kItemnumFieldNumber;
const int lkpyitem::kTypeFieldNumber;
#endif  // !_MSC_VER

lkpyitem::lkpyitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpyitem::InitAsDefaultInstance() {
}

lkpyitem::lkpyitem(const lkpyitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpyitem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  slotid_ = 0;
  itemnum_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpyitem::~lkpyitem() {
  SharedDtor();
}

void lkpyitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lkpyitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpyitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpyitem_descriptor_;
}

const lkpyitem& lkpyitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpyitem* lkpyitem::default_instance_ = NULL;

lkpyitem* lkpyitem::New() const {
  return new lkpyitem;
}

void lkpyitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    slotid_ = 0;
    itemnum_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpyitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slotid;
        break;
      }

      // optional int32 slotid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemnum;
        break;
      }

      // optional int32 itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpyitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 slotid = 2;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slotid(), output);
  }

  // optional int32 itemnum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpyitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 slotid = 2;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slotid(), target);
  }

  // optional int32 itemnum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpyitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 slotid = 2;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slotid());
    }

    // optional int32 itemnum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpyitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpyitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpyitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpyitem::MergeFrom(const lkpyitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpyitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpyitem::CopyFrom(const lkpyitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpyitem::IsInitialized() const {

  return true;
}

void lkpyitem::Swap(lkpyitem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(slotid_, other->slotid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpyitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpyitem_descriptor_;
  metadata.reflection = lkpyitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpyuser::kUseridFieldNumber;
const int lkpyuser::kChairidFieldNumber;
const int lkpyuser::kNicknameFieldNumber;
const int lkpyuser::kFaceidFieldNumber;
const int lkpyuser::kSexFieldNumber;
const int lkpyuser::kJettonFieldNumber;
const int lkpyuser::kMoneyFieldNumber;
const int lkpyuser::kIsrobotFieldNumber;
const int lkpyuser::kCannontypeFieldNumber;
const int lkpyuser::kCannonlvFieldNumber;
const int lkpyuser::kBankJettonFieldNumber;
const int lkpyuser::kStateFieldNumber;
const int lkpyuser::kCannonlistFieldNumber;
const int lkpyuser::kCreatebulletlistFieldNumber;
const int lkpyuser::kBackpackFieldNumber;
const int lkpyuser::kTubenumFieldNumber;
const int lkpyuser::kCannonmulFieldNumber;
const int lkpyuser::kLastfiretimeFieldNumber;
#endif  // !_MSC_VER

lkpyuser::lkpyuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpyuser::InitAsDefaultInstance() {
}

lkpyuser::lkpyuser(const lkpyuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpyuser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  chairid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isrobot_ = 0;
  cannontype_ = 0;
  cannonlv_ = 0;
  bank_jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  tubenum_ = 0;
  cannonmul_ = 0;
  lastfiretime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpyuser::~lkpyuser() {
  SharedDtor();
}

void lkpyuser::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (bank_jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_jetton_;
  }
  if (this != default_instance_) {
  }
}

void lkpyuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpyuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpyuser_descriptor_;
}

const lkpyuser& lkpyuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpyuser* lkpyuser::default_instance_ = NULL;

lkpyuser* lkpyuser::New() const {
  return new lkpyuser;
}

void lkpyuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    chairid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_faceid()) {
      if (faceid_ != &::google::protobuf::internal::kEmptyString) {
        faceid_->clear();
      }
    }
    sex_ = 0;
    if (has_jetton()) {
      if (jetton_ != &::google::protobuf::internal::kEmptyString) {
        jetton_->clear();
      }
    }
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    isrobot_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cannontype_ = 0;
    cannonlv_ = 0;
    if (has_bank_jetton()) {
      if (bank_jetton_ != &::google::protobuf::internal::kEmptyString) {
        bank_jetton_->clear();
      }
    }
    state_ = 0;
    tubenum_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cannonmul_ = 0;
    lastfiretime_ = 0;
  }
  cannonlist_.Clear();
  createbulletlist_.Clear();
  backpack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpyuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_faceid;
        break;
      }

      // optional string faceid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faceid().data(), this->faceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_jetton;
        break;
      }

      // optional string jetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jetton().data(), this->jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_money;
        break;
      }

      // optional string money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->money().data(), this->money().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isrobot;
        break;
      }

      // optional int32 isrobot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cannontype;
        break;
      }

      // optional int32 cannontype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannontype_)));
          set_has_cannontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cannonlv;
        break;
      }

      // optional int32 cannonlv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannonlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannonlv_)));
          set_has_cannonlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bank_jetton;
        break;
      }

      // optional string bank_jetton = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_jetton().data(), this->bank_jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_state;
        break;
      }

      // optional int32 state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cannonlist;
        break;
      }

      // repeated int32 cannonlist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannonlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_cannonlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cannonlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cannonlist;
        if (input->ExpectTag(114)) goto parse_createbulletlist;
        break;
      }

      // repeated .progame.lkpycreatebullet createbulletlist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createbulletlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_createbulletlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_createbulletlist;
        if (input->ExpectTag(122)) goto parse_backpack;
        break;
      }

      // repeated .progame.lkpyitem backpack = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backpack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backpack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_backpack;
        if (input->ExpectTag(128)) goto parse_tubenum;
        break;
      }

      // optional int32 tubenum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tubenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubenum_)));
          set_has_tubenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cannonmul;
        break;
      }

      // optional int32 cannonmul = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannonmul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannonmul_)));
          set_has_cannonmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_lastfiretime;
        break;
      }

      // optional double lastfiretime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastfiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastfiretime_)));
          set_has_lastfiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpyuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional string faceid = 4;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->faceid(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional string jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->jetton(), output);
  }

  // optional string money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->money(), output);
  }

  // optional int32 isrobot = 8;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isrobot(), output);
  }

  // optional int32 cannontype = 9;
  if (has_cannontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cannontype(), output);
  }

  // optional int32 cannonlv = 10;
  if (has_cannonlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cannonlv(), output);
  }

  // optional string bank_jetton = 11;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_jetton().data(), this->bank_jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bank_jetton(), output);
  }

  // optional int32 state = 12;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->state(), output);
  }

  // repeated int32 cannonlist = 13;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->cannonlist(i), output);
  }

  // repeated .progame.lkpycreatebullet createbulletlist = 14;
  for (int i = 0; i < this->createbulletlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->createbulletlist(i), output);
  }

  // repeated .progame.lkpyitem backpack = 15;
  for (int i = 0; i < this->backpack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->backpack(i), output);
  }

  // optional int32 tubenum = 16;
  if (has_tubenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tubenum(), output);
  }

  // optional int32 cannonmul = 17;
  if (has_cannonmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cannonmul(), output);
  }

  // optional double lastfiretime = 18;
  if (has_lastfiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lastfiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpyuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string faceid = 4;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->faceid(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional string jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->jetton(), target);
  }

  // optional string money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->money(), target);
  }

  // optional int32 isrobot = 8;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isrobot(), target);
  }

  // optional int32 cannontype = 9;
  if (has_cannontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cannontype(), target);
  }

  // optional int32 cannonlv = 10;
  if (has_cannonlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cannonlv(), target);
  }

  // optional string bank_jetton = 11;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_jetton().data(), this->bank_jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bank_jetton(), target);
  }

  // optional int32 state = 12;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->state(), target);
  }

  // repeated int32 cannonlist = 13;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->cannonlist(i), target);
  }

  // repeated .progame.lkpycreatebullet createbulletlist = 14;
  for (int i = 0; i < this->createbulletlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->createbulletlist(i), target);
  }

  // repeated .progame.lkpyitem backpack = 15;
  for (int i = 0; i < this->backpack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->backpack(i), target);
  }

  // optional int32 tubenum = 16;
  if (has_tubenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tubenum(), target);
  }

  // optional int32 cannonmul = 17;
  if (has_cannonmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cannonmul(), target);
  }

  // optional double lastfiretime = 18;
  if (has_lastfiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lastfiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpyuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string faceid = 4;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceid());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string jetton = 6;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jetton());
    }

    // optional string money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }

    // optional int32 isrobot = 8;
    if (has_isrobot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrobot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cannontype = 9;
    if (has_cannontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannontype());
    }

    // optional int32 cannonlv = 10;
    if (has_cannonlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannonlv());
    }

    // optional string bank_jetton = 11;
    if (has_bank_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_jetton());
    }

    // optional int32 state = 12;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 tubenum = 16;
    if (has_tubenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubenum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 cannonmul = 17;
    if (has_cannonmul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannonmul());
    }

    // optional double lastfiretime = 18;
    if (has_lastfiretime()) {
      total_size += 2 + 8;
    }

  }
  // repeated int32 cannonlist = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->cannonlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cannonlist(i));
    }
    total_size += 1 * this->cannonlist_size() + data_size;
  }

  // repeated .progame.lkpycreatebullet createbulletlist = 14;
  total_size += 1 * this->createbulletlist_size();
  for (int i = 0; i < this->createbulletlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->createbulletlist(i));
  }

  // repeated .progame.lkpyitem backpack = 15;
  total_size += 1 * this->backpack_size();
  for (int i = 0; i < this->backpack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backpack(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpyuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpyuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpyuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpyuser::MergeFrom(const lkpyuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  cannonlist_.MergeFrom(from.cannonlist_);
  createbulletlist_.MergeFrom(from.createbulletlist_);
  backpack_.MergeFrom(from.backpack_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cannontype()) {
      set_cannontype(from.cannontype());
    }
    if (from.has_cannonlv()) {
      set_cannonlv(from.cannonlv());
    }
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_tubenum()) {
      set_tubenum(from.tubenum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cannonmul()) {
      set_cannonmul(from.cannonmul());
    }
    if (from.has_lastfiretime()) {
      set_lastfiretime(from.lastfiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpyuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpyuser::CopyFrom(const lkpyuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpyuser::IsInitialized() const {

  return true;
}

void lkpyuser::Swap(lkpyuser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(chairid_, other->chairid_);
    std::swap(nickname_, other->nickname_);
    std::swap(faceid_, other->faceid_);
    std::swap(sex_, other->sex_);
    std::swap(jetton_, other->jetton_);
    std::swap(money_, other->money_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(cannontype_, other->cannontype_);
    std::swap(cannonlv_, other->cannonlv_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(state_, other->state_);
    cannonlist_.Swap(&other->cannonlist_);
    createbulletlist_.Swap(&other->createbulletlist_);
    backpack_.Swap(&other->backpack_);
    std::swap(tubenum_, other->tubenum_);
    std::swap(cannonmul_, other->cannonmul_);
    std::swap(lastfiretime_, other->lastfiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpyuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpyuser_descriptor_;
  metadata.reflection = lkpyuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpyuseitem::kUseridFieldNumber;
const int lkpyuseitem::kTypeFieldNumber;
const int lkpyuseitem::kTimeFieldNumber;
#endif  // !_MSC_VER

lkpyuseitem::lkpyuseitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpyuseitem::InitAsDefaultInstance() {
}

lkpyuseitem::lkpyuseitem(const lkpyuseitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpyuseitem::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpyuseitem::~lkpyuseitem() {
  SharedDtor();
}

void lkpyuseitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lkpyuseitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpyuseitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpyuseitem_descriptor_;
}

const lkpyuseitem& lkpyuseitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpyuseitem* lkpyuseitem::default_instance_ = NULL;

lkpyuseitem* lkpyuseitem::New() const {
  return new lkpyuseitem;
}

void lkpyuseitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpyuseitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time;
        break;
      }

      // optional double time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpyuseitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional double time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpyuseitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional double time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpyuseitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional double time = 3;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpyuseitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpyuseitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpyuseitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpyuseitem::MergeFrom(const lkpyuseitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpyuseitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpyuseitem::CopyFrom(const lkpyuseitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpyuseitem::IsInitialized() const {

  return true;
}

void lkpyuseitem::Swap(lkpyuseitem* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpyuseitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpyuseitem_descriptor_;
  metadata.reflection = lkpyuseitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpyinfo::kTableidFieldNumber;
const int lkpyinfo::kTabletypeFieldNumber;
const int lkpyinfo::kStateFieldNumber;
const int lkpyinfo::kTimemarkFieldNumber;
const int lkpyinfo::kMinenterFieldNumber;
const int lkpyinfo::kMaxenterFieldNumber;
const int lkpyinfo::kMaxuserFieldNumber;
const int lkpyinfo::kSituserFieldNumber;
const int lkpyinfo::kStanduserFieldNumber;
const int lkpyinfo::kCreatefishlistFieldNumber;
const int lkpyinfo::kCursceneidFieldNumber;
const int lkpyinfo::kPresceneidFieldNumber;
const int lkpyinfo::kNextfishidFieldNumber;
const int lkpyinfo::kUseitemlistFieldNumber;
const int lkpyinfo::kShoalpathtypeFieldNumber;
const int lkpyinfo::kSystimeFieldNumber;
#endif  // !_MSC_VER

lkpyinfo::lkpyinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpyinfo::InitAsDefaultInstance() {
}

lkpyinfo::lkpyinfo(const lkpyinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpyinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  state_ = 0;
  timemark_ = 0;
  minenter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxenter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxuser_ = 0;
  cursceneid_ = 0;
  presceneid_ = 0;
  nextfishid_ = 0;
  shoalpathtype_ = 0;
  systime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpyinfo::~lkpyinfo() {
  SharedDtor();
}

void lkpyinfo::SharedDtor() {
  if (minenter_ != &::google::protobuf::internal::kEmptyString) {
    delete minenter_;
  }
  if (maxenter_ != &::google::protobuf::internal::kEmptyString) {
    delete maxenter_;
  }
  if (this != default_instance_) {
  }
}

void lkpyinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpyinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpyinfo_descriptor_;
}

const lkpyinfo& lkpyinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpyinfo* lkpyinfo::default_instance_ = NULL;

lkpyinfo* lkpyinfo::New() const {
  return new lkpyinfo;
}

void lkpyinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tabletype_ = 0;
    state_ = 0;
    timemark_ = 0;
    if (has_minenter()) {
      if (minenter_ != &::google::protobuf::internal::kEmptyString) {
        minenter_->clear();
      }
    }
    if (has_maxenter()) {
      if (maxenter_ != &::google::protobuf::internal::kEmptyString) {
        maxenter_->clear();
      }
    }
    maxuser_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    cursceneid_ = 0;
    presceneid_ = 0;
    nextfishid_ = 0;
    shoalpathtype_ = 0;
    systime_ = 0;
  }
  situser_.Clear();
  standuser_.Clear();
  createfishlist_.Clear();
  useitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpyinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_minenter;
        break;
      }

      // optional string minenter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minenter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minenter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->minenter().data(), this->minenter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_maxenter;
        break;
      }

      // optional string maxenter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxenter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxenter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maxenter().data(), this->maxenter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_situser;
        break;
      }

      // repeated .progame.lkpyuser situser = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_situser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_situser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_situser;
        if (input->ExpectTag(120)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_standuser;
        if (input->ExpectTag(130)) goto parse_createfishlist;
        break;
      }

      // repeated .progame.lkpycreatefish createfishlist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createfishlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_createfishlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_createfishlist;
        if (input->ExpectTag(136)) goto parse_cursceneid;
        break;
      }

      // optional int32 cursceneid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursceneid_)));
          set_has_cursceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_presceneid;
        break;
      }

      // optional int32 presceneid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presceneid_)));
          set_has_presceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_nextfishid;
        break;
      }

      // optional int32 nextfishid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextfishid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextfishid_)));
          set_has_nextfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_useitemlist;
        break;
      }

      // repeated .progame.lkpyuseitem useitemlist = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useitemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_useitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_useitemlist;
        if (input->ExpectTag(168)) goto parse_shoalpathtype;
        break;
      }

      // optional int32 shoalpathtype = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoalpathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoalpathtype_)));
          set_has_shoalpathtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_systime;
        break;
      }

      // optional double systime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_systime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &systime_)));
          set_has_systime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpyinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timemark(), output);
  }

  // optional string minenter = 5;
  if (has_minenter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minenter().data(), this->minenter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->minenter(), output);
  }

  // optional string maxenter = 6;
  if (has_maxenter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxenter().data(), this->maxenter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->maxenter(), output);
  }

  // optional int32 maxuser = 13;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxuser(), output);
  }

  // repeated .progame.lkpyuser situser = 14;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->situser(i), output);
  }

  // repeated int32 standuser = 15;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->standuser(i), output);
  }

  // repeated .progame.lkpycreatefish createfishlist = 16;
  for (int i = 0; i < this->createfishlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->createfishlist(i), output);
  }

  // optional int32 cursceneid = 17;
  if (has_cursceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cursceneid(), output);
  }

  // optional int32 presceneid = 18;
  if (has_presceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->presceneid(), output);
  }

  // optional int32 nextfishid = 19;
  if (has_nextfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nextfishid(), output);
  }

  // repeated .progame.lkpyuseitem useitemlist = 20;
  for (int i = 0; i < this->useitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->useitemlist(i), output);
  }

  // optional int32 shoalpathtype = 21;
  if (has_shoalpathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->shoalpathtype(), output);
  }

  // optional double systime = 22;
  if (has_systime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->systime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpyinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timemark(), target);
  }

  // optional string minenter = 5;
  if (has_minenter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minenter().data(), this->minenter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->minenter(), target);
  }

  // optional string maxenter = 6;
  if (has_maxenter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxenter().data(), this->maxenter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->maxenter(), target);
  }

  // optional int32 maxuser = 13;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxuser(), target);
  }

  // repeated .progame.lkpyuser situser = 14;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->situser(i), target);
  }

  // repeated int32 standuser = 15;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->standuser(i), target);
  }

  // repeated .progame.lkpycreatefish createfishlist = 16;
  for (int i = 0; i < this->createfishlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->createfishlist(i), target);
  }

  // optional int32 cursceneid = 17;
  if (has_cursceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cursceneid(), target);
  }

  // optional int32 presceneid = 18;
  if (has_presceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->presceneid(), target);
  }

  // optional int32 nextfishid = 19;
  if (has_nextfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->nextfishid(), target);
  }

  // repeated .progame.lkpyuseitem useitemlist = 20;
  for (int i = 0; i < this->useitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->useitemlist(i), target);
  }

  // optional int32 shoalpathtype = 21;
  if (has_shoalpathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->shoalpathtype(), target);
  }

  // optional double systime = 22;
  if (has_systime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->systime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpyinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 4;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional string minenter = 5;
    if (has_minenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minenter());
    }

    // optional string maxenter = 6;
    if (has_maxenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maxenter());
    }

    // optional int32 maxuser = 13;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 cursceneid = 17;
    if (has_cursceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursceneid());
    }

    // optional int32 presceneid = 18;
    if (has_presceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presceneid());
    }

    // optional int32 nextfishid = 19;
    if (has_nextfishid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextfishid());
    }

    // optional int32 shoalpathtype = 21;
    if (has_shoalpathtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoalpathtype());
    }

    // optional double systime = 22;
    if (has_systime()) {
      total_size += 2 + 8;
    }

  }
  // repeated .progame.lkpyuser situser = 14;
  total_size += 1 * this->situser_size();
  for (int i = 0; i < this->situser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->situser(i));
  }

  // repeated int32 standuser = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 1 * this->standuser_size() + data_size;
  }

  // repeated .progame.lkpycreatefish createfishlist = 16;
  total_size += 2 * this->createfishlist_size();
  for (int i = 0; i < this->createfishlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->createfishlist(i));
  }

  // repeated .progame.lkpyuseitem useitemlist = 20;
  total_size += 2 * this->useitemlist_size();
  for (int i = 0; i < this->useitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->useitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpyinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpyinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpyinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpyinfo::MergeFrom(const lkpyinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  createfishlist_.MergeFrom(from.createfishlist_);
  useitemlist_.MergeFrom(from.useitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_minenter()) {
      set_minenter(from.minenter());
    }
    if (from.has_maxenter()) {
      set_maxenter(from.maxenter());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_cursceneid()) {
      set_cursceneid(from.cursceneid());
    }
    if (from.has_presceneid()) {
      set_presceneid(from.presceneid());
    }
    if (from.has_nextfishid()) {
      set_nextfishid(from.nextfishid());
    }
    if (from.has_shoalpathtype()) {
      set_shoalpathtype(from.shoalpathtype());
    }
    if (from.has_systime()) {
      set_systime(from.systime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpyinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpyinfo::CopyFrom(const lkpyinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpyinfo::IsInitialized() const {

  return true;
}

void lkpyinfo::Swap(lkpyinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    std::swap(minenter_, other->minenter_);
    std::swap(maxenter_, other->maxenter_);
    std::swap(maxuser_, other->maxuser_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    createfishlist_.Swap(&other->createfishlist_);
    std::swap(cursceneid_, other->cursceneid_);
    std::swap(presceneid_, other->presceneid_);
    std::swap(nextfishid_, other->nextfishid_);
    useitemlist_.Swap(&other->useitemlist_);
    std::swap(shoalpathtype_, other->shoalpathtype_);
    std::swap(systime_, other->systime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpyinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpyinfo_descriptor_;
  metadata.reflection = lkpyinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lkpycatchfish::kIdFieldNumber;
const int lkpycatchfish::kScoretypeFieldNumber;
const int lkpycatchfish::kScoreFieldNumber;
const int lkpycatchfish::kScoremulFieldNumber;
#endif  // !_MSC_VER

lkpycatchfish::lkpycatchfish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lkpycatchfish::InitAsDefaultInstance() {
}

lkpycatchfish::lkpycatchfish(const lkpycatchfish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lkpycatchfish::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  scoretype_ = 0;
  score_ = 0;
  scoremul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lkpycatchfish::~lkpycatchfish() {
  SharedDtor();
}

void lkpycatchfish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lkpycatchfish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lkpycatchfish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lkpycatchfish_descriptor_;
}

const lkpycatchfish& lkpycatchfish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flkpy_2eproto();
  return *default_instance_;
}

lkpycatchfish* lkpycatchfish::default_instance_ = NULL;

lkpycatchfish* lkpycatchfish::New() const {
  return new lkpycatchfish;
}

void lkpycatchfish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    scoretype_ = 0;
    score_ = 0;
    scoremul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lkpycatchfish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scoretype;
        break;
      }

      // optional int32 scoretype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoretype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoretype_)));
          set_has_scoretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scoremul;
        break;
      }

      // optional int32 scoremul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoremul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoremul_)));
          set_has_scoremul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lkpycatchfish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 scoretype = 2;
  if (has_scoretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scoretype(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional int32 scoremul = 4;
  if (has_scoremul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scoremul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lkpycatchfish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 scoretype = 2;
  if (has_scoretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scoretype(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional int32 scoremul = 4;
  if (has_scoremul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scoremul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lkpycatchfish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 scoretype = 2;
    if (has_scoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoretype());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 scoremul = 4;
    if (has_scoremul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoremul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lkpycatchfish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lkpycatchfish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lkpycatchfish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lkpycatchfish::MergeFrom(const lkpycatchfish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scoretype()) {
      set_scoretype(from.scoretype());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_scoremul()) {
      set_scoremul(from.scoremul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lkpycatchfish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lkpycatchfish::CopyFrom(const lkpycatchfish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lkpycatchfish::IsInitialized() const {

  return true;
}

void lkpycatchfish::Swap(lkpycatchfish* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scoretype_, other->scoretype_);
    std::swap(score_, other->score_);
    std::swap(scoremul_, other->scoremul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lkpycatchfish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lkpycatchfish_descriptor_;
  metadata.reflection = lkpycatchfish_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
