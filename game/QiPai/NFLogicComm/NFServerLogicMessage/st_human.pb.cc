// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_human.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_human.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* playerinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerstats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerstats_reflection_ = NULL;
const ::google::protobuf::Descriptor* goodsinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  goodsinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* goodslist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  goodslist_reflection_ = NULL;
const ::google::protobuf::Descriptor* noticeinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  noticeinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* playersimpleinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playersimpleinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcastinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcastinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mailinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mailinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* maillist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  maillist_reflection_ = NULL;
const ::google::protobuf::Descriptor* inviteinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  inviteinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* agencyinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agencyinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* intlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  intlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* stringlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stringlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* useraward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  useraward_reflection_ = NULL;
const ::google::protobuf::Descriptor* banktransferrecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  banktransferrecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* specialcardreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  specialcardreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* specialinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  specialinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fhuman_2eproto() {
  protobuf_AddDesc_st_5fhuman_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_human.proto");
  GOOGLE_CHECK(file != NULL);
  playerinfo_descriptor_ = file->message_type(0);
  static const int playerinfo_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, regdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, idenstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, bindtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, bindnick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, platformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, devname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, mobiletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, penulttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, silent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, isban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, face_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, face_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, face_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, face_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, playtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, bankjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, location_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, location_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, bank_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, bank_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, agent1_),
  };
  playerinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerinfo_descriptor_,
      playerinfo::default_instance_,
      playerinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerinfo));
  playerstats_descriptor_ = file->message_type(1);
  static const int playerstats_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, mdynickamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, loginday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, loginconday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, maxloginconday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, loginamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, maxjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, payrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, callpayrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, callpaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, maxmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, dayrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, daypaytime_),
  };
  playerstats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerstats_descriptor_,
      playerstats::default_instance_,
      playerstats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerstats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerstats));
  goodsinfo_descriptor_ = file->message_type(2);
  static const int goodsinfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, validity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, createdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, iswear_),
  };
  goodsinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      goodsinfo_descriptor_,
      goodsinfo::default_instance_,
      goodsinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodsinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(goodsinfo));
  goodslist_descriptor_ = file->message_type(3);
  static const int goodslist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodslist, glist_),
  };
  goodslist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      goodslist_descriptor_,
      goodslist::default_instance_,
      goodslist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodslist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goodslist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(goodslist));
  noticeinfo_descriptor_ = file->message_type(4);
  static const int noticeinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticeinfo, noticetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticeinfo, amount_),
  };
  noticeinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      noticeinfo_descriptor_,
      noticeinfo::default_instance_,
      noticeinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticeinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticeinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(noticeinfo));
  playersimpleinfo_descriptor_ = file->message_type(5);
  static const int playersimpleinfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, face_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, location_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, location_y_),
  };
  playersimpleinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playersimpleinfo_descriptor_,
      playersimpleinfo::default_instance_,
      playersimpleinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersimpleinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playersimpleinfo));
  broadcastinfo_descriptor_ = file->message_type(6);
  static const int broadcastinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, broadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, broadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, validday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, cycletype_),
  };
  broadcastinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcastinfo_descriptor_,
      broadcastinfo::default_instance_,
      broadcastinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcastinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcastinfo));
  mailinfo_descriptor_ = file->message_type(7);
  static const int mailinfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, receiverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, senddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, markdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, mailstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, externdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, validity_),
  };
  mailinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mailinfo_descriptor_,
      mailinfo::default_instance_,
      mailinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mailinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mailinfo));
  maillist_descriptor_ = file->message_type(8);
  static const int maillist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(maillist, mlist_),
  };
  maillist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      maillist_descriptor_,
      maillist::default_instance_,
      maillist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(maillist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(maillist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(maillist));
  inviteinfo_descriptor_ = file->message_type(9);
  static const int inviteinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inviteinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inviteinfo, binduserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inviteinfo, bindnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inviteinfo, bindfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inviteinfo, binddate_),
  };
  inviteinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      inviteinfo_descriptor_,
      inviteinfo::default_instance_,
      inviteinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inviteinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inviteinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(inviteinfo));
  agencyinfo_descriptor_ = file->message_type(10);
  static const int agencyinfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, invitestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, soleagent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, agent1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, agent2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, agent3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, agent4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, invitelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, qrcodeurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, datemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, moneymark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, weekmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, exclusiveurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, alipay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, bankaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, wiringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, grade_),
  };
  agencyinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agencyinfo_descriptor_,
      agencyinfo::default_instance_,
      agencyinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agencyinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agencyinfo));
  intlist_descriptor_ = file->message_type(11);
  static const int intlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(intlist, ilist_),
  };
  intlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      intlist_descriptor_,
      intlist::default_instance_,
      intlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(intlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(intlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(intlist));
  stringlist_descriptor_ = file->message_type(12);
  static const int stringlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringlist, slist_),
  };
  stringlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stringlist_descriptor_,
      stringlist::default_instance_,
      stringlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stringlist));
  useraward_descriptor_ = file->message_type(13);
  static const int useraward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(useraward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(useraward, awardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(useraward, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(useraward, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(useraward, state_),
  };
  useraward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      useraward_descriptor_,
      useraward::default_instance_,
      useraward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(useraward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(useraward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(useraward));
  banktransferrecord_descriptor_ = file->message_type(14);
  static const int banktransferrecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(banktransferrecord, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(banktransferrecord, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(banktransferrecord, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(banktransferrecord, timemark_),
  };
  banktransferrecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      banktransferrecord_descriptor_,
      banktransferrecord::default_instance_,
      banktransferrecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(banktransferrecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(banktransferrecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(banktransferrecord));
  specialcardreward_descriptor_ = file->message_type(15);
  static const int specialcardreward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialcardreward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialcardreward, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialcardreward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialcardreward, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialcardreward, createdate_),
  };
  specialcardreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      specialcardreward_descriptor_,
      specialcardreward::default_instance_,
      specialcardreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialcardreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialcardreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(specialcardreward));
  specialinfo_descriptor_ = file->message_type(16);
  static const int specialinfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, winall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, peinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, marknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, iszhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, norecord_),
  };
  specialinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      specialinfo_descriptor_,
      specialinfo::default_instance_,
      specialinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(specialinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(specialinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fhuman_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerinfo_descriptor_, &playerinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerstats_descriptor_, &playerstats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    goodsinfo_descriptor_, &goodsinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    goodslist_descriptor_, &goodslist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    noticeinfo_descriptor_, &noticeinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playersimpleinfo_descriptor_, &playersimpleinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcastinfo_descriptor_, &broadcastinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mailinfo_descriptor_, &mailinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    maillist_descriptor_, &maillist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    inviteinfo_descriptor_, &inviteinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agencyinfo_descriptor_, &agencyinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    intlist_descriptor_, &intlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stringlist_descriptor_, &stringlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    useraward_descriptor_, &useraward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    banktransferrecord_descriptor_, &banktransferrecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    specialcardreward_descriptor_, &specialcardreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    specialinfo_descriptor_, &specialinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fhuman_2eproto() {
  delete playerinfo::default_instance_;
  delete playerinfo_reflection_;
  delete playerstats::default_instance_;
  delete playerstats_reflection_;
  delete goodsinfo::default_instance_;
  delete goodsinfo_reflection_;
  delete goodslist::default_instance_;
  delete goodslist_reflection_;
  delete noticeinfo::default_instance_;
  delete noticeinfo_reflection_;
  delete playersimpleinfo::default_instance_;
  delete playersimpleinfo_reflection_;
  delete broadcastinfo::default_instance_;
  delete broadcastinfo_reflection_;
  delete mailinfo::default_instance_;
  delete mailinfo_reflection_;
  delete maillist::default_instance_;
  delete maillist_reflection_;
  delete inviteinfo::default_instance_;
  delete inviteinfo_reflection_;
  delete agencyinfo::default_instance_;
  delete agencyinfo_reflection_;
  delete intlist::default_instance_;
  delete intlist_reflection_;
  delete stringlist::default_instance_;
  delete stringlist_reflection_;
  delete useraward::default_instance_;
  delete useraward_reflection_;
  delete banktransferrecord::default_instance_;
  delete banktransferrecord_reflection_;
  delete specialcardreward::default_instance_;
  delete specialcardreward_reflection_;
  delete specialinfo::default_instance_;
  delete specialinfo_reflection_;
}

void protobuf_AddDesc_st_5fhuman_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016st_human.proto\022\007progame\"\342\006\n\nplayerinfo"
    "\022\016\n\006userid\030\001 \001(\005\022\013\n\003cid\030\002 \001(\t\022\017\n\007account"
    "\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\020\n\010nickname\030\005 \001"
    "(\t\022\017\n\007regdate\030\007 \001(\t\022\013\n\003sex\030\010 \001(\005\022\013\n\003age\030"
    "\t \001(\005\022\r\n\005email\030\n \001(\t\022\020\n\010phonenum\030\013 \001(\t\022\013"
    "\n\003exp\030\014 \001(\005\022\r\n\005level\030\r \001(\005\022\020\n\010viplevel\030\016"
    " \001(\005\022\016\n\006jetton\030\017 \001(\t\022\014\n\004gold\030\020 \001(\005\022\r\n\005mo"
    "ney\030\021 \001(\005\022\017\n\007channel\030\022 \001(\t\022\020\n\010province\030\023"
    " \001(\t\022\014\n\004city\030\024 \001(\t\022\022\n\npopularity\030\025 \001(\005\022\022"
    "\n\nidenstatus\030\026 \001(\005\022\020\n\010bindtype\030\027 \001(\005\022\020\n\010"
    "bindnick\030\030 \001(\t\022\022\n\nplatformid\030\031 \001(\t\022\014\n\004im"
    "ei\030\032 \001(\t\022\017\n\007devname\030\033 \001(\t\022\n\n\002ip\030\034 \001(\t\022\022\n"
    "\nmobiletype\030\035 \001(\005\022\020\n\010lasttime\030\036 \001(\005\022\022\n\np"
    "enulttime\030\037 \001(\005\022\016\n\006silent\030  \001(\005\022\r\n\005isban"
    "\030! \001(\005\022\016\n\006face_1\030\" \001(\t\022\016\n\006face_2\030# \001(\t\022\016"
    "\n\006face_3\030$ \001(\t\022\016\n\006face_4\030% \001(\t\022\017\n\007isrobo"
    "t\030& \001(\005\022\020\n\010playtype\030\' \001(\005\022\023\n\013description"
    "\030( \001(\t\022\020\n\010location\030) \001(\t\022\022\n\nbankjetton\030*"
    " \001(\t\022\r\n\005title\030+ \001(\t\022\021\n\tblacklist\030, \001(\005\022\022"
    "\n\npropertyid\030- \001(\005\022\016\n\006ticket\030. \001(\005\022\022\n\nlo"
    "cation_x\030/ \001(\t\022\022\n\nlocation_y\0300 \001(\t\022\025\n\rba"
    "nk_password\0301 \001(\t\022\023\n\013bank_jetton\0302 \001(\t\022\016"
    "\n\006agent1\0303 \001(\005\"\257\002\n\013playerstats\022\016\n\006userid"
    "\030\001 \001(\005\022\025\n\rmdynickamount\030\002 \001(\005\022\020\n\010loginda"
    "y\030\003 \001(\005\022\023\n\013loginconday\030\004 \001(\005\022\026\n\016maxlogin"
    "conday\030\005 \001(\005\022\023\n\013loginamount\030\006 \001(\005\022\022\n\nonl"
    "inetime\030\007 \001(\005\022\021\n\tmaxjetton\030\010 \001(\t\022\016\n\006payr"
    "mb\030\t \001(\005\022\022\n\ncallpayrmb\030\n \001(\005\022\017\n\007paytime\030"
    "\013 \001(\005\022\023\n\013callpaytime\030\014 \001(\005\022\020\n\010maxmoney\030\r"
    " \001(\005\022\016\n\006dayrmb\030\016 \001(\005\022\022\n\ndaypaytime\030\017 \001(\005"
    "\"\202\001\n\tgoodsinfo\022\016\n\006itemid\030\001 \001(\005\022\016\n\006userid"
    "\030\002 \001(\005\022\017\n\007goodsid\030\003 \001(\005\022\016\n\006amount\030\004 \001(\005\022"
    "\020\n\010validity\030\005 \001(\005\022\022\n\ncreatedate\030\006 \001(\t\022\016\n"
    "\006iswear\030\007 \001(\005\".\n\tgoodslist\022!\n\005glist\030\001 \003("
    "\0132\022.progame.goodsinfo\"0\n\nnoticeinfo\022\022\n\nn"
    "oticetype\030\001 \001(\005\022\016\n\006amount\030\002 \001(\005\"\215\002\n\020play"
    "ersimpleinfo\022\016\n\006userid\030\001 \001(\005\022\020\n\010nickname"
    "\030\005 \001(\t\022\013\n\003sex\030\010 \001(\005\022\r\n\005level\030\r \001(\005\022\020\n\010vi"
    "plevel\030\016 \001(\005\022\016\n\006jetton\030\017 \001(\t\022\014\n\004gold\030\020 \001"
    "(\005\022\022\n\npopularity\030\025 \001(\005\022\n\n\002ip\030\037 \001(\t\022\016\n\006fa"
    "ce_1\030\" \001(\t\022\020\n\010location\030) \001(\t\022\022\n\nproperty"
    "id\030- \001(\005\022\r\n\005jifen\030c \001(\t\022\022\n\nlocation_x\030/ "
    "\001(\t\022\022\n\nlocation_y\0300 \001(\t\"\252\001\n\rbroadcastinf"
    "o\022\n\n\002id\030\001 \001(\005\022\021\n\tbroadtype\030\002 \001(\005\022\020\n\010send"
    "erid\030\003 \001(\005\022\016\n\006sender\030\004 \001(\t\022\013\n\003msg\030\005 \001(\t\022"
    "\022\n\nbroadtimes\030\006 \001(\005\022\020\n\010validday\030\007 \001(\005\022\022\n"
    "\ncreatetime\030\010 \001(\t\022\021\n\tcycletype\030\t \001(\005\"\201\002\n"
    "\010mailinfo\022\016\n\006mailid\030\001 \001(\005\022\020\n\010senderid\030\002 "
    "\001(\005\022\016\n\006sender\030\003 \001(\t\022\022\n\nreceiverid\030\004 \001(\005\022"
    "\020\n\010receiver\030\005 \001(\t\022\020\n\010mailtype\030\006 \001(\005\022\r\n\005t"
    "itle\030\007 \001(\t\022\017\n\007content\030\010 \001(\t\022\020\n\010senddate\030"
    "\t \001(\t\022\020\n\010markdate\030\n \001(\t\022\021\n\tmailstate\030\013 \001"
    "(\005\022\022\n\nexterndata\030\014 \001(\t\022\016\n\006remark\030\r \001(\t\022\020"
    "\n\010validity\030\016 \001(\005\",\n\010maillist\022 \n\005mlist\030\001 "
    "\003(\0132\021.progame.mailinfo\"l\n\ninviteinfo\022\016\n\006"
    "userid\030\001 \001(\005\022\022\n\nbinduserid\030\002 \001(\005\022\024\n\014bind"
    "nickname\030\003 \001(\t\022\022\n\nbindfaceid\030\004 \001(\t\022\020\n\010bi"
    "nddate\030\005 \001(\t\"\341\002\n\nagencyinfo\022\016\n\006userid\030\001 "
    "\001(\005\022\021\n\tinvitestr\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\021\n"
    "\tsoleagent\030\004 \001(\005\022\016\n\006agent1\030\005 \001(\005\022\016\n\006agen"
    "t2\030\006 \001(\005\022\016\n\006agent3\030\007 \001(\005\022\016\n\006agent4\030\010 \001(\005"
    "\022\'\n\ninvitelist\030\t \003(\0132\023.progame.inviteinf"
    "o\022\021\n\tqrcodeurl\030\n \001(\t\022\020\n\010datemark\030\013 \001(\t\022\021"
    "\n\tmoneymark\030\014 \001(\005\022\021\n\tweekmoney\030\r \001(\005\022\024\n\014"
    "exclusiveurl\030\016 \001(\t\022\016\n\006alipay\030\017 \001(\t\022\023\n\013ba"
    "nkaccount\030\020 \001(\t\022\020\n\010wiringid\030\021 \001(\005\022\r\n\005gra"
    "de\030\022 \001(\005\"\030\n\007intlist\022\r\n\005ilist\030\001 \003(\005\"\033\n\nst"
    "ringlist\022\r\n\005slist\030\001 \003(\t\"Z\n\tuseraward\022\n\n\002"
    "id\030\001 \001(\005\022\021\n\tawardtype\030\002 \001(\005\022\r\n\005count\030\003 \001"
    "(\005\022\020\n\010timemark\030\004 \001(\005\022\r\n\005state\030\005 \001(\005\"X\n\022b"
    "anktransferrecord\022\016\n\006userid\030\001 \001(\005\022\020\n\010nic"
    "kname\030\002 \001(\t\022\016\n\006amount\030\003 \001(\t\022\020\n\010timemark\030"
    "\004 \001(\t\"h\n\021specialcardreward\022\r\n\005index\030\001 \001("
    "\005\022\020\n\010cardtype\030\002 \001(\005\022\016\n\006reward\030\003 \001(\005\022\016\n\006s"
    "tatus\030\004 \001(\005\022\022\n\ncreatedate\030\005 \001(\t\"\327\001\n\013spec"
    "ialinfo\022\016\n\006userid\030\001 \001(\005\022\021\n\tstarttime\030\002 \001"
    "(\005\022\017\n\007endtime\030\003 \001(\005\022\r\n\005state\030\004 \001(\005\022\014\n\004ra"
    "te\030\005 \001(\005\022\016\n\006winall\030\006 \001(\005\022\016\n\006peinum\030\007 \001(\005"
    "\022\017\n\007marknum\030\010 \001(\005\022\020\n\010gametype\030\t \003(\005\022\020\n\010c"
    "ardtype\030\n \001(\005\022\020\n\010iszhuang\030\013 \001(\005\022\020\n\010norec"
    "ord\030\014 \001(\005", 3209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_human.proto", &protobuf_RegisterTypes);
  playerinfo::default_instance_ = new playerinfo();
  playerstats::default_instance_ = new playerstats();
  goodsinfo::default_instance_ = new goodsinfo();
  goodslist::default_instance_ = new goodslist();
  noticeinfo::default_instance_ = new noticeinfo();
  playersimpleinfo::default_instance_ = new playersimpleinfo();
  broadcastinfo::default_instance_ = new broadcastinfo();
  mailinfo::default_instance_ = new mailinfo();
  maillist::default_instance_ = new maillist();
  inviteinfo::default_instance_ = new inviteinfo();
  agencyinfo::default_instance_ = new agencyinfo();
  intlist::default_instance_ = new intlist();
  stringlist::default_instance_ = new stringlist();
  useraward::default_instance_ = new useraward();
  banktransferrecord::default_instance_ = new banktransferrecord();
  specialcardreward::default_instance_ = new specialcardreward();
  specialinfo::default_instance_ = new specialinfo();
  playerinfo::default_instance_->InitAsDefaultInstance();
  playerstats::default_instance_->InitAsDefaultInstance();
  goodsinfo::default_instance_->InitAsDefaultInstance();
  goodslist::default_instance_->InitAsDefaultInstance();
  noticeinfo::default_instance_->InitAsDefaultInstance();
  playersimpleinfo::default_instance_->InitAsDefaultInstance();
  broadcastinfo::default_instance_->InitAsDefaultInstance();
  mailinfo::default_instance_->InitAsDefaultInstance();
  maillist::default_instance_->InitAsDefaultInstance();
  inviteinfo::default_instance_->InitAsDefaultInstance();
  agencyinfo::default_instance_->InitAsDefaultInstance();
  intlist::default_instance_->InitAsDefaultInstance();
  stringlist::default_instance_->InitAsDefaultInstance();
  useraward::default_instance_->InitAsDefaultInstance();
  banktransferrecord::default_instance_->InitAsDefaultInstance();
  specialcardreward::default_instance_->InitAsDefaultInstance();
  specialinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fhuman_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fhuman_2eproto {
  StaticDescriptorInitializer_st_5fhuman_2eproto() {
    protobuf_AddDesc_st_5fhuman_2eproto();
  }
} static_descriptor_initializer_st_5fhuman_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int playerinfo::kUseridFieldNumber;
const int playerinfo::kCidFieldNumber;
const int playerinfo::kAccountFieldNumber;
const int playerinfo::kPasswordFieldNumber;
const int playerinfo::kNicknameFieldNumber;
const int playerinfo::kRegdateFieldNumber;
const int playerinfo::kSexFieldNumber;
const int playerinfo::kAgeFieldNumber;
const int playerinfo::kEmailFieldNumber;
const int playerinfo::kPhonenumFieldNumber;
const int playerinfo::kExpFieldNumber;
const int playerinfo::kLevelFieldNumber;
const int playerinfo::kViplevelFieldNumber;
const int playerinfo::kJettonFieldNumber;
const int playerinfo::kGoldFieldNumber;
const int playerinfo::kMoneyFieldNumber;
const int playerinfo::kChannelFieldNumber;
const int playerinfo::kProvinceFieldNumber;
const int playerinfo::kCityFieldNumber;
const int playerinfo::kPopularityFieldNumber;
const int playerinfo::kIdenstatusFieldNumber;
const int playerinfo::kBindtypeFieldNumber;
const int playerinfo::kBindnickFieldNumber;
const int playerinfo::kPlatformidFieldNumber;
const int playerinfo::kImeiFieldNumber;
const int playerinfo::kDevnameFieldNumber;
const int playerinfo::kIpFieldNumber;
const int playerinfo::kMobiletypeFieldNumber;
const int playerinfo::kLasttimeFieldNumber;
const int playerinfo::kPenulttimeFieldNumber;
const int playerinfo::kSilentFieldNumber;
const int playerinfo::kIsbanFieldNumber;
const int playerinfo::kFace1FieldNumber;
const int playerinfo::kFace2FieldNumber;
const int playerinfo::kFace3FieldNumber;
const int playerinfo::kFace4FieldNumber;
const int playerinfo::kIsrobotFieldNumber;
const int playerinfo::kPlaytypeFieldNumber;
const int playerinfo::kDescriptionFieldNumber;
const int playerinfo::kLocationFieldNumber;
const int playerinfo::kBankjettonFieldNumber;
const int playerinfo::kTitleFieldNumber;
const int playerinfo::kBlacklistFieldNumber;
const int playerinfo::kPropertyidFieldNumber;
const int playerinfo::kTicketFieldNumber;
const int playerinfo::kLocationXFieldNumber;
const int playerinfo::kLocationYFieldNumber;
const int playerinfo::kBankPasswordFieldNumber;
const int playerinfo::kBankJettonFieldNumber;
const int playerinfo::kAgent1FieldNumber;
#endif  // !_MSC_VER

playerinfo::playerinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void playerinfo::InitAsDefaultInstance() {
}

playerinfo::playerinfo(const playerinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void playerinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  age_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0;
  level_ = 0;
  viplevel_ = 0;
  jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 0;
  money_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  popularity_ = 0;
  idenstatus_ = 0;
  bindtype_ = 0;
  bindnick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platformid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobiletype_ = 0;
  lasttime_ = 0;
  penulttime_ = 0;
  silent_ = 0;
  isban_ = 0;
  face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isrobot_ = 0;
  playtype_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blacklist_ = 0;
  propertyid_ = 0;
  ticket_ = 0;
  location_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bank_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bank_jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerinfo::~playerinfo() {
  SharedDtor();
}

void playerinfo::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (regdate_ != &::google::protobuf::internal::kEmptyString) {
    delete regdate_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenum_;
  }
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (bindnick_ != &::google::protobuf::internal::kEmptyString) {
    delete bindnick_;
  }
  if (platformid_ != &::google::protobuf::internal::kEmptyString) {
    delete platformid_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (devname_ != &::google::protobuf::internal::kEmptyString) {
    delete devname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    delete face_1_;
  }
  if (face_2_ != &::google::protobuf::internal::kEmptyString) {
    delete face_2_;
  }
  if (face_3_ != &::google::protobuf::internal::kEmptyString) {
    delete face_3_;
  }
  if (face_4_ != &::google::protobuf::internal::kEmptyString) {
    delete face_4_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (bankjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankjetton_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (location_x_ != &::google::protobuf::internal::kEmptyString) {
    delete location_x_;
  }
  if (location_y_ != &::google::protobuf::internal::kEmptyString) {
    delete location_y_;
  }
  if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_password_;
  }
  if (bank_jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_jetton_;
  }
  if (this != default_instance_) {
  }
}

void playerinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerinfo_descriptor_;
}

const playerinfo& playerinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

playerinfo* playerinfo::default_instance_ = NULL;

playerinfo* playerinfo::New() const {
  return new playerinfo;
}

void playerinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_regdate()) {
      if (regdate_ != &::google::protobuf::internal::kEmptyString) {
        regdate_->clear();
      }
    }
    sex_ = 0;
    age_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_phonenum()) {
      if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
        phonenum_->clear();
      }
    }
    exp_ = 0;
    level_ = 0;
    viplevel_ = 0;
    if (has_jetton()) {
      if (jetton_ != &::google::protobuf::internal::kEmptyString) {
        jetton_->clear();
      }
    }
    gold_ = 0;
    money_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::kEmptyString) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    popularity_ = 0;
    idenstatus_ = 0;
    bindtype_ = 0;
    if (has_bindnick()) {
      if (bindnick_ != &::google::protobuf::internal::kEmptyString) {
        bindnick_->clear();
      }
    }
    if (has_platformid()) {
      if (platformid_ != &::google::protobuf::internal::kEmptyString) {
        platformid_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
    if (has_devname()) {
      if (devname_ != &::google::protobuf::internal::kEmptyString) {
        devname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    mobiletype_ = 0;
    lasttime_ = 0;
    penulttime_ = 0;
    silent_ = 0;
    isban_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_face_1()) {
      if (face_1_ != &::google::protobuf::internal::kEmptyString) {
        face_1_->clear();
      }
    }
    if (has_face_2()) {
      if (face_2_ != &::google::protobuf::internal::kEmptyString) {
        face_2_->clear();
      }
    }
    if (has_face_3()) {
      if (face_3_ != &::google::protobuf::internal::kEmptyString) {
        face_3_->clear();
      }
    }
    if (has_face_4()) {
      if (face_4_ != &::google::protobuf::internal::kEmptyString) {
        face_4_->clear();
      }
    }
    isrobot_ = 0;
    playtype_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_bankjetton()) {
      if (bankjetton_ != &::google::protobuf::internal::kEmptyString) {
        bankjetton_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    blacklist_ = 0;
    propertyid_ = 0;
    ticket_ = 0;
    if (has_location_x()) {
      if (location_x_ != &::google::protobuf::internal::kEmptyString) {
        location_x_->clear();
      }
    }
    if (has_location_y()) {
      if (location_y_ != &::google::protobuf::internal::kEmptyString) {
        location_y_->clear();
      }
    }
    if (has_bank_password()) {
      if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
        bank_password_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_bank_jetton()) {
      if (bank_jetton_ != &::google::protobuf::internal::kEmptyString) {
        bank_jetton_->clear();
      }
    }
    agent1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cid;
        break;
      }

      // optional string cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_regdate;
        break;
      }

      // optional string regdate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regdate().data(), this->regdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional int32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_age;
        break;
      }

      // optional int32 age = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_email;
        break;
      }

      // optional string email = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_phonenum;
        break;
      }

      // optional string phonenum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phonenum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phonenum().data(), this->phonenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_exp;
        break;
      }

      // optional int32 exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }

      // optional int32 level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_jetton;
        break;
      }

      // optional string jetton = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jetton().data(), this->jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gold;
        break;
      }

      // optional int32 gold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_money;
        break;
      }

      // optional int32 money = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_channel;
        break;
      }

      // optional string channel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_province;
        break;
      }

      // optional string province = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_city;
        break;
      }

      // optional string city = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_popularity;
        break;
      }

      // optional int32 popularity = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_idenstatus;
        break;
      }

      // optional int32 idenstatus = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idenstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idenstatus_)));
          set_has_idenstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bindtype;
        break;
      }

      // optional int32 bindtype = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_bindnick;
        break;
      }

      // optional string bindnick = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindnick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindnick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bindnick().data(), this->bindnick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_platformid;
        break;
      }

      // optional string platformid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platformid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platformid().data(), this->platformid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_imei;
        break;
      }

      // optional string imei = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_devname;
        break;
      }

      // optional string devname = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devname().data(), this->devname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_ip;
        break;
      }

      // optional string ip = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_mobiletype;
        break;
      }

      // optional int32 mobiletype = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobiletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobiletype_)));
          set_has_mobiletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_lasttime;
        break;
      }

      // optional int32 lasttime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_penulttime;
        break;
      }

      // optional int32 penulttime = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penulttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penulttime_)));
          set_has_penulttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_silent;
        break;
      }

      // optional int32 silent = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silent_)));
          set_has_silent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_isban;
        break;
      }

      // optional int32 isban = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isban_)));
          set_has_isban();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_face_1;
        break;
      }

      // optional string face_1 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_1().data(), this->face_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_face_2;
        break;
      }

      // optional string face_2 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_2().data(), this->face_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_face_3;
        break;
      }

      // optional string face_3 = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_3().data(), this->face_3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_face_4;
        break;
      }

      // optional string face_4 = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_4().data(), this->face_4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_isrobot;
        break;
      }

      // optional int32 isrobot = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_playtype;
        break;
      }

      // optional int32 playtype = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtype_)));
          set_has_playtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_description;
        break;
      }

      // optional string description = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_location;
        break;
      }

      // optional string location = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_bankjetton;
        break;
      }

      // optional string bankjetton = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankjetton().data(), this->bankjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_title;
        break;
      }

      // optional string title = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_blacklist;
        break;
      }

      // optional int32 blacklist = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blacklist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blacklist_)));
          set_has_blacklist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_propertyid;
        break;
      }

      // optional int32 propertyid = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyid_)));
          set_has_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_location_x;
        break;
      }

      // optional string location_x = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location_x().data(), this->location_x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_location_y;
        break;
      }

      // optional string location_y = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location_y().data(), this->location_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_bank_password;
        break;
      }

      // optional string bank_password = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_password().data(), this->bank_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_bank_jetton;
        break;
      }

      // optional string bank_jetton = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_jetton().data(), this->bank_jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_agent1;
        break;
      }

      // optional int32 agent1 = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent1_)));
          set_has_agent1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void playerinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional string regdate = 7;
  if (has_regdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regdate().data(), this->regdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->regdate(), output);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }

  // optional int32 age = 9;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->age(), output);
  }

  // optional string email = 10;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->email(), output);
  }

  // optional string phonenum = 11;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->phonenum(), output);
  }

  // optional int32 exp = 12;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->exp(), output);
  }

  // optional int32 level = 13;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->level(), output);
  }

  // optional int32 viplevel = 14;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->viplevel(), output);
  }

  // optional string jetton = 15;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->jetton(), output);
  }

  // optional int32 gold = 16;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gold(), output);
  }

  // optional int32 money = 17;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->money(), output);
  }

  // optional string channel = 18;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->channel(), output);
  }

  // optional string province = 19;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->province(), output);
  }

  // optional string city = 20;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->city(), output);
  }

  // optional int32 popularity = 21;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->popularity(), output);
  }

  // optional int32 idenstatus = 22;
  if (has_idenstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->idenstatus(), output);
  }

  // optional int32 bindtype = 23;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->bindtype(), output);
  }

  // optional string bindnick = 24;
  if (has_bindnick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindnick().data(), this->bindnick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->bindnick(), output);
  }

  // optional string platformid = 25;
  if (has_platformid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformid().data(), this->platformid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->platformid(), output);
  }

  // optional string imei = 26;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->imei(), output);
  }

  // optional string devname = 27;
  if (has_devname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->devname(), output);
  }

  // optional string ip = 28;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->ip(), output);
  }

  // optional int32 mobiletype = 29;
  if (has_mobiletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->mobiletype(), output);
  }

  // optional int32 lasttime = 30;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->lasttime(), output);
  }

  // optional int32 penulttime = 31;
  if (has_penulttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->penulttime(), output);
  }

  // optional int32 silent = 32;
  if (has_silent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->silent(), output);
  }

  // optional int32 isban = 33;
  if (has_isban()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->isban(), output);
  }

  // optional string face_1 = 34;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->face_1(), output);
  }

  // optional string face_2 = 35;
  if (has_face_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_2().data(), this->face_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->face_2(), output);
  }

  // optional string face_3 = 36;
  if (has_face_3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_3().data(), this->face_3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->face_3(), output);
  }

  // optional string face_4 = 37;
  if (has_face_4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_4().data(), this->face_4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->face_4(), output);
  }

  // optional int32 isrobot = 38;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->isrobot(), output);
  }

  // optional int32 playtype = 39;
  if (has_playtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->playtype(), output);
  }

  // optional string description = 40;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->description(), output);
  }

  // optional string location = 41;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->location(), output);
  }

  // optional string bankjetton = 42;
  if (has_bankjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankjetton().data(), this->bankjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->bankjetton(), output);
  }

  // optional string title = 43;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->title(), output);
  }

  // optional int32 blacklist = 44;
  if (has_blacklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->blacklist(), output);
  }

  // optional int32 propertyid = 45;
  if (has_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->propertyid(), output);
  }

  // optional int32 ticket = 46;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->ticket(), output);
  }

  // optional string location_x = 47;
  if (has_location_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_x().data(), this->location_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->location_x(), output);
  }

  // optional string location_y = 48;
  if (has_location_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_y().data(), this->location_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      48, this->location_y(), output);
  }

  // optional string bank_password = 49;
  if (has_bank_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_password().data(), this->bank_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      49, this->bank_password(), output);
  }

  // optional string bank_jetton = 50;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_jetton().data(), this->bank_jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->bank_jetton(), output);
  }

  // optional int32 agent1 = 51;
  if (has_agent1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->agent1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* playerinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cid(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string regdate = 7;
  if (has_regdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regdate().data(), this->regdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->regdate(), target);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }

  // optional int32 age = 9;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->age(), target);
  }

  // optional string email = 10;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->email(), target);
  }

  // optional string phonenum = 11;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->phonenum(), target);
  }

  // optional int32 exp = 12;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->exp(), target);
  }

  // optional int32 level = 13;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->level(), target);
  }

  // optional int32 viplevel = 14;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->viplevel(), target);
  }

  // optional string jetton = 15;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->jetton(), target);
  }

  // optional int32 gold = 16;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gold(), target);
  }

  // optional int32 money = 17;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->money(), target);
  }

  // optional string channel = 18;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->channel(), target);
  }

  // optional string province = 19;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->province(), target);
  }

  // optional string city = 20;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->city(), target);
  }

  // optional int32 popularity = 21;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->popularity(), target);
  }

  // optional int32 idenstatus = 22;
  if (has_idenstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->idenstatus(), target);
  }

  // optional int32 bindtype = 23;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->bindtype(), target);
  }

  // optional string bindnick = 24;
  if (has_bindnick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindnick().data(), this->bindnick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->bindnick(), target);
  }

  // optional string platformid = 25;
  if (has_platformid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformid().data(), this->platformid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->platformid(), target);
  }

  // optional string imei = 26;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->imei(), target);
  }

  // optional string devname = 27;
  if (has_devname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devname().data(), this->devname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->devname(), target);
  }

  // optional string ip = 28;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->ip(), target);
  }

  // optional int32 mobiletype = 29;
  if (has_mobiletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->mobiletype(), target);
  }

  // optional int32 lasttime = 30;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->lasttime(), target);
  }

  // optional int32 penulttime = 31;
  if (has_penulttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->penulttime(), target);
  }

  // optional int32 silent = 32;
  if (has_silent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->silent(), target);
  }

  // optional int32 isban = 33;
  if (has_isban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->isban(), target);
  }

  // optional string face_1 = 34;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->face_1(), target);
  }

  // optional string face_2 = 35;
  if (has_face_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_2().data(), this->face_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->face_2(), target);
  }

  // optional string face_3 = 36;
  if (has_face_3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_3().data(), this->face_3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->face_3(), target);
  }

  // optional string face_4 = 37;
  if (has_face_4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_4().data(), this->face_4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->face_4(), target);
  }

  // optional int32 isrobot = 38;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->isrobot(), target);
  }

  // optional int32 playtype = 39;
  if (has_playtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->playtype(), target);
  }

  // optional string description = 40;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->description(), target);
  }

  // optional string location = 41;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->location(), target);
  }

  // optional string bankjetton = 42;
  if (has_bankjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankjetton().data(), this->bankjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->bankjetton(), target);
  }

  // optional string title = 43;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->title(), target);
  }

  // optional int32 blacklist = 44;
  if (has_blacklist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->blacklist(), target);
  }

  // optional int32 propertyid = 45;
  if (has_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->propertyid(), target);
  }

  // optional int32 ticket = 46;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->ticket(), target);
  }

  // optional string location_x = 47;
  if (has_location_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_x().data(), this->location_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->location_x(), target);
  }

  // optional string location_y = 48;
  if (has_location_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_y().data(), this->location_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->location_y(), target);
  }

  // optional string bank_password = 49;
  if (has_bank_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_password().data(), this->bank_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->bank_password(), target);
  }

  // optional string bank_jetton = 50;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_jetton().data(), this->bank_jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->bank_jetton(), target);
  }

  // optional int32 agent1 = 51;
  if (has_agent1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->agent1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int playerinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string regdate = 7;
    if (has_regdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regdate());
    }

    // optional int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 age = 9;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string email = 10;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string phonenum = 11;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenum());
    }

    // optional int32 exp = 12;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 viplevel = 14;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional string jetton = 15;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jetton());
    }

    // optional int32 gold = 16;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 money = 17;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string channel = 18;
    if (has_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string province = 19;
    if (has_province()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 20;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional int32 popularity = 21;
    if (has_popularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->popularity());
    }

    // optional int32 idenstatus = 22;
    if (has_idenstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idenstatus());
    }

    // optional int32 bindtype = 23;
    if (has_bindtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

    // optional string bindnick = 24;
    if (has_bindnick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindnick());
    }

    // optional string platformid = 25;
    if (has_platformid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string imei = 26;
    if (has_imei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string devname = 27;
    if (has_devname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devname());
    }

    // optional string ip = 28;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 mobiletype = 29;
    if (has_mobiletype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobiletype());
    }

    // optional int32 lasttime = 30;
    if (has_lasttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 penulttime = 31;
    if (has_penulttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penulttime());
    }

    // optional int32 silent = 32;
    if (has_silent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silent());
    }

    // optional int32 isban = 33;
    if (has_isban()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isban());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string face_1 = 34;
    if (has_face_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_1());
    }

    // optional string face_2 = 35;
    if (has_face_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_2());
    }

    // optional string face_3 = 36;
    if (has_face_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_3());
    }

    // optional string face_4 = 37;
    if (has_face_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_4());
    }

    // optional int32 isrobot = 38;
    if (has_isrobot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrobot());
    }

    // optional int32 playtype = 39;
    if (has_playtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtype());
    }

    // optional string description = 40;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string location = 41;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string bankjetton = 42;
    if (has_bankjetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankjetton());
    }

    // optional string title = 43;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 blacklist = 44;
    if (has_blacklist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blacklist());
    }

    // optional int32 propertyid = 45;
    if (has_propertyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyid());
    }

    // optional int32 ticket = 46;
    if (has_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional string location_x = 47;
    if (has_location_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location_x());
    }

    // optional string location_y = 48;
    if (has_location_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location_y());
    }

    // optional string bank_password = 49;
    if (has_bank_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_password());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string bank_jetton = 50;
    if (has_bank_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_jetton());
    }

    // optional int32 agent1 = 51;
    if (has_agent1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerinfo::MergeFrom(const playerinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_regdate()) {
      set_regdate(from.regdate());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_idenstatus()) {
      set_idenstatus(from.idenstatus());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
    if (from.has_bindnick()) {
      set_bindnick(from.bindnick());
    }
    if (from.has_platformid()) {
      set_platformid(from.platformid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_devname()) {
      set_devname(from.devname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_mobiletype()) {
      set_mobiletype(from.mobiletype());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_penulttime()) {
      set_penulttime(from.penulttime());
    }
    if (from.has_silent()) {
      set_silent(from.silent());
    }
    if (from.has_isban()) {
      set_isban(from.isban());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_face_1()) {
      set_face_1(from.face_1());
    }
    if (from.has_face_2()) {
      set_face_2(from.face_2());
    }
    if (from.has_face_3()) {
      set_face_3(from.face_3());
    }
    if (from.has_face_4()) {
      set_face_4(from.face_4());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_playtype()) {
      set_playtype(from.playtype());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_bankjetton()) {
      set_bankjetton(from.bankjetton());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_blacklist()) {
      set_blacklist(from.blacklist());
    }
    if (from.has_propertyid()) {
      set_propertyid(from.propertyid());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_location_x()) {
      set_location_x(from.location_x());
    }
    if (from.has_location_y()) {
      set_location_y(from.location_y());
    }
    if (from.has_bank_password()) {
      set_bank_password(from.bank_password());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
    if (from.has_agent1()) {
      set_agent1(from.agent1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerinfo::CopyFrom(const playerinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerinfo::IsInitialized() const {

  return true;
}

void playerinfo::Swap(playerinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(cid_, other->cid_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(nickname_, other->nickname_);
    std::swap(regdate_, other->regdate_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(email_, other->email_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(jetton_, other->jetton_);
    std::swap(gold_, other->gold_);
    std::swap(money_, other->money_);
    std::swap(channel_, other->channel_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(popularity_, other->popularity_);
    std::swap(idenstatus_, other->idenstatus_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(bindnick_, other->bindnick_);
    std::swap(platformid_, other->platformid_);
    std::swap(imei_, other->imei_);
    std::swap(devname_, other->devname_);
    std::swap(ip_, other->ip_);
    std::swap(mobiletype_, other->mobiletype_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(penulttime_, other->penulttime_);
    std::swap(silent_, other->silent_);
    std::swap(isban_, other->isban_);
    std::swap(face_1_, other->face_1_);
    std::swap(face_2_, other->face_2_);
    std::swap(face_3_, other->face_3_);
    std::swap(face_4_, other->face_4_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(playtype_, other->playtype_);
    std::swap(description_, other->description_);
    std::swap(location_, other->location_);
    std::swap(bankjetton_, other->bankjetton_);
    std::swap(title_, other->title_);
    std::swap(blacklist_, other->blacklist_);
    std::swap(propertyid_, other->propertyid_);
    std::swap(ticket_, other->ticket_);
    std::swap(location_x_, other->location_x_);
    std::swap(location_y_, other->location_y_);
    std::swap(bank_password_, other->bank_password_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(agent1_, other->agent1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerinfo_descriptor_;
  metadata.reflection = playerinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playerstats::kUseridFieldNumber;
const int playerstats::kMdynickamountFieldNumber;
const int playerstats::kLogindayFieldNumber;
const int playerstats::kLogincondayFieldNumber;
const int playerstats::kMaxlogincondayFieldNumber;
const int playerstats::kLoginamountFieldNumber;
const int playerstats::kOnlinetimeFieldNumber;
const int playerstats::kMaxjettonFieldNumber;
const int playerstats::kPayrmbFieldNumber;
const int playerstats::kCallpayrmbFieldNumber;
const int playerstats::kPaytimeFieldNumber;
const int playerstats::kCallpaytimeFieldNumber;
const int playerstats::kMaxmoneyFieldNumber;
const int playerstats::kDayrmbFieldNumber;
const int playerstats::kDaypaytimeFieldNumber;
#endif  // !_MSC_VER

playerstats::playerstats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void playerstats::InitAsDefaultInstance() {
}

playerstats::playerstats(const playerstats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void playerstats::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  mdynickamount_ = 0;
  loginday_ = 0;
  loginconday_ = 0;
  maxloginconday_ = 0;
  loginamount_ = 0;
  onlinetime_ = 0;
  maxjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payrmb_ = 0;
  callpayrmb_ = 0;
  paytime_ = 0;
  callpaytime_ = 0;
  maxmoney_ = 0;
  dayrmb_ = 0;
  daypaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerstats::~playerstats() {
  SharedDtor();
}

void playerstats::SharedDtor() {
  if (maxjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete maxjetton_;
  }
  if (this != default_instance_) {
  }
}

void playerstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerstats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerstats_descriptor_;
}

const playerstats& playerstats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

playerstats* playerstats::default_instance_ = NULL;

playerstats* playerstats::New() const {
  return new playerstats;
}

void playerstats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    mdynickamount_ = 0;
    loginday_ = 0;
    loginconday_ = 0;
    maxloginconday_ = 0;
    loginamount_ = 0;
    onlinetime_ = 0;
    if (has_maxjetton()) {
      if (maxjetton_ != &::google::protobuf::internal::kEmptyString) {
        maxjetton_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    payrmb_ = 0;
    callpayrmb_ = 0;
    paytime_ = 0;
    callpaytime_ = 0;
    maxmoney_ = 0;
    dayrmb_ = 0;
    daypaytime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mdynickamount;
        break;
      }

      // optional int32 mdynickamount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mdynickamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdynickamount_)));
          set_has_mdynickamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loginday;
        break;
      }

      // optional int32 loginday = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginday_)));
          set_has_loginday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginconday;
        break;
      }

      // optional int32 loginconday = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginconday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginconday_)));
          set_has_loginconday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxloginconday;
        break;
      }

      // optional int32 maxloginconday = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxloginconday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxloginconday_)));
          set_has_maxloginconday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loginamount;
        break;
      }

      // optional int32 loginamount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginamount_)));
          set_has_loginamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_onlinetime;
        break;
      }

      // optional int32 onlinetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_maxjetton;
        break;
      }

      // optional string maxjetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maxjetton().data(), this->maxjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_payrmb;
        break;
      }

      // optional int32 payrmb = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payrmb_)));
          set_has_payrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_callpayrmb;
        break;
      }

      // optional int32 callpayrmb = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callpayrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callpayrmb_)));
          set_has_callpayrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_paytime;
        break;
      }

      // optional int32 paytime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_callpaytime;
        break;
      }

      // optional int32 callpaytime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callpaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callpaytime_)));
          set_has_callpaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maxmoney;
        break;
      }

      // optional int32 maxmoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmoney_)));
          set_has_maxmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dayrmb;
        break;
      }

      // optional int32 dayrmb = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayrmb_)));
          set_has_dayrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_daypaytime;
        break;
      }

      // optional int32 daypaytime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daypaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daypaytime_)));
          set_has_daypaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void playerstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 mdynickamount = 2;
  if (has_mdynickamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mdynickamount(), output);
  }

  // optional int32 loginday = 3;
  if (has_loginday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loginday(), output);
  }

  // optional int32 loginconday = 4;
  if (has_loginconday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loginconday(), output);
  }

  // optional int32 maxloginconday = 5;
  if (has_maxloginconday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxloginconday(), output);
  }

  // optional int32 loginamount = 6;
  if (has_loginamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->loginamount(), output);
  }

  // optional int32 onlinetime = 7;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->onlinetime(), output);
  }

  // optional string maxjetton = 8;
  if (has_maxjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxjetton().data(), this->maxjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->maxjetton(), output);
  }

  // optional int32 payrmb = 9;
  if (has_payrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->payrmb(), output);
  }

  // optional int32 callpayrmb = 10;
  if (has_callpayrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->callpayrmb(), output);
  }

  // optional int32 paytime = 11;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->paytime(), output);
  }

  // optional int32 callpaytime = 12;
  if (has_callpaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->callpaytime(), output);
  }

  // optional int32 maxmoney = 13;
  if (has_maxmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxmoney(), output);
  }

  // optional int32 dayrmb = 14;
  if (has_dayrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->dayrmb(), output);
  }

  // optional int32 daypaytime = 15;
  if (has_daypaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->daypaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* playerstats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 mdynickamount = 2;
  if (has_mdynickamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mdynickamount(), target);
  }

  // optional int32 loginday = 3;
  if (has_loginday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loginday(), target);
  }

  // optional int32 loginconday = 4;
  if (has_loginconday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loginconday(), target);
  }

  // optional int32 maxloginconday = 5;
  if (has_maxloginconday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxloginconday(), target);
  }

  // optional int32 loginamount = 6;
  if (has_loginamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->loginamount(), target);
  }

  // optional int32 onlinetime = 7;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->onlinetime(), target);
  }

  // optional string maxjetton = 8;
  if (has_maxjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxjetton().data(), this->maxjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->maxjetton(), target);
  }

  // optional int32 payrmb = 9;
  if (has_payrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->payrmb(), target);
  }

  // optional int32 callpayrmb = 10;
  if (has_callpayrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->callpayrmb(), target);
  }

  // optional int32 paytime = 11;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->paytime(), target);
  }

  // optional int32 callpaytime = 12;
  if (has_callpaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->callpaytime(), target);
  }

  // optional int32 maxmoney = 13;
  if (has_maxmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxmoney(), target);
  }

  // optional int32 dayrmb = 14;
  if (has_dayrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->dayrmb(), target);
  }

  // optional int32 daypaytime = 15;
  if (has_daypaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->daypaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int playerstats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 mdynickamount = 2;
    if (has_mdynickamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdynickamount());
    }

    // optional int32 loginday = 3;
    if (has_loginday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginday());
    }

    // optional int32 loginconday = 4;
    if (has_loginconday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginconday());
    }

    // optional int32 maxloginconday = 5;
    if (has_maxloginconday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxloginconday());
    }

    // optional int32 loginamount = 6;
    if (has_loginamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginamount());
    }

    // optional int32 onlinetime = 7;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinetime());
    }

    // optional string maxjetton = 8;
    if (has_maxjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maxjetton());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 payrmb = 9;
    if (has_payrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payrmb());
    }

    // optional int32 callpayrmb = 10;
    if (has_callpayrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callpayrmb());
    }

    // optional int32 paytime = 11;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytime());
    }

    // optional int32 callpaytime = 12;
    if (has_callpaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callpaytime());
    }

    // optional int32 maxmoney = 13;
    if (has_maxmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmoney());
    }

    // optional int32 dayrmb = 14;
    if (has_dayrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayrmb());
    }

    // optional int32 daypaytime = 15;
    if (has_daypaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daypaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerstats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerstats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerstats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerstats::MergeFrom(const playerstats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_mdynickamount()) {
      set_mdynickamount(from.mdynickamount());
    }
    if (from.has_loginday()) {
      set_loginday(from.loginday());
    }
    if (from.has_loginconday()) {
      set_loginconday(from.loginconday());
    }
    if (from.has_maxloginconday()) {
      set_maxloginconday(from.maxloginconday());
    }
    if (from.has_loginamount()) {
      set_loginamount(from.loginamount());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_maxjetton()) {
      set_maxjetton(from.maxjetton());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_payrmb()) {
      set_payrmb(from.payrmb());
    }
    if (from.has_callpayrmb()) {
      set_callpayrmb(from.callpayrmb());
    }
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
    if (from.has_callpaytime()) {
      set_callpaytime(from.callpaytime());
    }
    if (from.has_maxmoney()) {
      set_maxmoney(from.maxmoney());
    }
    if (from.has_dayrmb()) {
      set_dayrmb(from.dayrmb());
    }
    if (from.has_daypaytime()) {
      set_daypaytime(from.daypaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerstats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerstats::CopyFrom(const playerstats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerstats::IsInitialized() const {

  return true;
}

void playerstats::Swap(playerstats* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(mdynickamount_, other->mdynickamount_);
    std::swap(loginday_, other->loginday_);
    std::swap(loginconday_, other->loginconday_);
    std::swap(maxloginconday_, other->maxloginconday_);
    std::swap(loginamount_, other->loginamount_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(maxjetton_, other->maxjetton_);
    std::swap(payrmb_, other->payrmb_);
    std::swap(callpayrmb_, other->callpayrmb_);
    std::swap(paytime_, other->paytime_);
    std::swap(callpaytime_, other->callpaytime_);
    std::swap(maxmoney_, other->maxmoney_);
    std::swap(dayrmb_, other->dayrmb_);
    std::swap(daypaytime_, other->daypaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerstats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerstats_descriptor_;
  metadata.reflection = playerstats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int goodsinfo::kItemidFieldNumber;
const int goodsinfo::kUseridFieldNumber;
const int goodsinfo::kGoodsidFieldNumber;
const int goodsinfo::kAmountFieldNumber;
const int goodsinfo::kValidityFieldNumber;
const int goodsinfo::kCreatedateFieldNumber;
const int goodsinfo::kIswearFieldNumber;
#endif  // !_MSC_VER

goodsinfo::goodsinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void goodsinfo::InitAsDefaultInstance() {
}

goodsinfo::goodsinfo(const goodsinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void goodsinfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  userid_ = 0;
  goodsid_ = 0;
  amount_ = 0;
  validity_ = 0;
  createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iswear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

goodsinfo::~goodsinfo() {
  SharedDtor();
}

void goodsinfo::SharedDtor() {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (this != default_instance_) {
  }
}

void goodsinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* goodsinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return goodsinfo_descriptor_;
}

const goodsinfo& goodsinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

goodsinfo* goodsinfo::default_instance_ = NULL;

goodsinfo* goodsinfo::New() const {
  return new goodsinfo;
}

void goodsinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    userid_ = 0;
    goodsid_ = 0;
    amount_ = 0;
    validity_ = 0;
    if (has_createdate()) {
      if (createdate_ != &::google::protobuf::internal::kEmptyString) {
        createdate_->clear();
      }
    }
    iswear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool goodsinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodsid;
        break;
      }

      // optional int32 goodsid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional int32 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_validity;
        break;
      }

      // optional int32 validity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validity_)));
          set_has_validity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_createdate;
        break;
      }

      // optional string createdate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdate().data(), this->createdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iswear;
        break;
      }

      // optional int32 iswear = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iswear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswear_)));
          set_has_iswear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void goodsinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 goodsid = 3;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goodsid(), output);
  }

  // optional int32 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amount(), output);
  }

  // optional int32 validity = 5;
  if (has_validity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->validity(), output);
  }

  // optional string createdate = 6;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->createdate(), output);
  }

  // optional int32 iswear = 7;
  if (has_iswear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iswear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* goodsinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int32 goodsid = 3;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goodsid(), target);
  }

  // optional int32 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->amount(), target);
  }

  // optional int32 validity = 5;
  if (has_validity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->validity(), target);
  }

  // optional string createdate = 6;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->createdate(), target);
  }

  // optional int32 iswear = 7;
  if (has_iswear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->iswear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int goodsinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 goodsid = 3;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsid());
    }

    // optional int32 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 validity = 5;
    if (has_validity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validity());
    }

    // optional string createdate = 6;
    if (has_createdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdate());
    }

    // optional int32 iswear = 7;
    if (has_iswear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void goodsinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const goodsinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const goodsinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void goodsinfo::MergeFrom(const goodsinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_validity()) {
      set_validity(from.validity());
    }
    if (from.has_createdate()) {
      set_createdate(from.createdate());
    }
    if (from.has_iswear()) {
      set_iswear(from.iswear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void goodsinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void goodsinfo::CopyFrom(const goodsinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool goodsinfo::IsInitialized() const {

  return true;
}

void goodsinfo::Swap(goodsinfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(userid_, other->userid_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(amount_, other->amount_);
    std::swap(validity_, other->validity_);
    std::swap(createdate_, other->createdate_);
    std::swap(iswear_, other->iswear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata goodsinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = goodsinfo_descriptor_;
  metadata.reflection = goodsinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int goodslist::kGlistFieldNumber;
#endif  // !_MSC_VER

goodslist::goodslist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void goodslist::InitAsDefaultInstance() {
}

goodslist::goodslist(const goodslist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void goodslist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

goodslist::~goodslist() {
  SharedDtor();
}

void goodslist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void goodslist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* goodslist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return goodslist_descriptor_;
}

const goodslist& goodslist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

goodslist* goodslist::default_instance_ = NULL;

goodslist* goodslist::New() const {
  return new goodslist;
}

void goodslist::Clear() {
  glist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool goodslist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .progame.goodsinfo glist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_glist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_glist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_glist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void goodslist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .progame.goodsinfo glist = 1;
  for (int i = 0; i < this->glist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->glist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* goodslist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .progame.goodsinfo glist = 1;
  for (int i = 0; i < this->glist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->glist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int goodslist::ByteSize() const {
  int total_size = 0;

  // repeated .progame.goodsinfo glist = 1;
  total_size += 1 * this->glist_size();
  for (int i = 0; i < this->glist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->glist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void goodslist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const goodslist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const goodslist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void goodslist::MergeFrom(const goodslist& from) {
  GOOGLE_CHECK_NE(&from, this);
  glist_.MergeFrom(from.glist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void goodslist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void goodslist::CopyFrom(const goodslist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool goodslist::IsInitialized() const {

  return true;
}

void goodslist::Swap(goodslist* other) {
  if (other != this) {
    glist_.Swap(&other->glist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata goodslist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = goodslist_descriptor_;
  metadata.reflection = goodslist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int noticeinfo::kNoticetypeFieldNumber;
const int noticeinfo::kAmountFieldNumber;
#endif  // !_MSC_VER

noticeinfo::noticeinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void noticeinfo::InitAsDefaultInstance() {
}

noticeinfo::noticeinfo(const noticeinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void noticeinfo::SharedCtor() {
  _cached_size_ = 0;
  noticetype_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

noticeinfo::~noticeinfo() {
  SharedDtor();
}

void noticeinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void noticeinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* noticeinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return noticeinfo_descriptor_;
}

const noticeinfo& noticeinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

noticeinfo* noticeinfo::default_instance_ = NULL;

noticeinfo* noticeinfo::New() const {
  return new noticeinfo;
}

void noticeinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noticetype_ = 0;
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool noticeinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 noticetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noticetype_)));
          set_has_noticetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void noticeinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 noticetype = 1;
  if (has_noticetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->noticetype(), output);
  }

  // optional int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* noticeinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 noticetype = 1;
  if (has_noticetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->noticetype(), target);
  }

  // optional int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int noticeinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 noticetype = 1;
    if (has_noticetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noticetype());
    }

    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void noticeinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const noticeinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const noticeinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void noticeinfo::MergeFrom(const noticeinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticetype()) {
      set_noticetype(from.noticetype());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void noticeinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void noticeinfo::CopyFrom(const noticeinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool noticeinfo::IsInitialized() const {

  return true;
}

void noticeinfo::Swap(noticeinfo* other) {
  if (other != this) {
    std::swap(noticetype_, other->noticetype_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata noticeinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = noticeinfo_descriptor_;
  metadata.reflection = noticeinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playersimpleinfo::kUseridFieldNumber;
const int playersimpleinfo::kNicknameFieldNumber;
const int playersimpleinfo::kSexFieldNumber;
const int playersimpleinfo::kLevelFieldNumber;
const int playersimpleinfo::kViplevelFieldNumber;
const int playersimpleinfo::kJettonFieldNumber;
const int playersimpleinfo::kGoldFieldNumber;
const int playersimpleinfo::kPopularityFieldNumber;
const int playersimpleinfo::kIpFieldNumber;
const int playersimpleinfo::kFace1FieldNumber;
const int playersimpleinfo::kLocationFieldNumber;
const int playersimpleinfo::kPropertyidFieldNumber;
const int playersimpleinfo::kJifenFieldNumber;
const int playersimpleinfo::kLocationXFieldNumber;
const int playersimpleinfo::kLocationYFieldNumber;
#endif  // !_MSC_VER

playersimpleinfo::playersimpleinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void playersimpleinfo::InitAsDefaultInstance() {
}

playersimpleinfo::playersimpleinfo(const playersimpleinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void playersimpleinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  level_ = 0;
  viplevel_ = 0;
  jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 0;
  popularity_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  propertyid_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playersimpleinfo::~playersimpleinfo() {
  SharedDtor();
}

void playersimpleinfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    delete face_1_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (location_x_ != &::google::protobuf::internal::kEmptyString) {
    delete location_x_;
  }
  if (location_y_ != &::google::protobuf::internal::kEmptyString) {
    delete location_y_;
  }
  if (this != default_instance_) {
  }
}

void playersimpleinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playersimpleinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playersimpleinfo_descriptor_;
}

const playersimpleinfo& playersimpleinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

playersimpleinfo* playersimpleinfo::default_instance_ = NULL;

playersimpleinfo* playersimpleinfo::New() const {
  return new playersimpleinfo;
}

void playersimpleinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    sex_ = 0;
    level_ = 0;
    viplevel_ = 0;
    if (has_jetton()) {
      if (jetton_ != &::google::protobuf::internal::kEmptyString) {
        jetton_->clear();
      }
    }
    gold_ = 0;
    popularity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_face_1()) {
      if (face_1_ != &::google::protobuf::internal::kEmptyString) {
        face_1_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    propertyid_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    if (has_location_x()) {
      if (location_x_ != &::google::protobuf::internal::kEmptyString) {
        location_x_->clear();
      }
    }
    if (has_location_y()) {
      if (location_y_ != &::google::protobuf::internal::kEmptyString) {
        location_y_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playersimpleinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional int32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }

      // optional int32 level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_jetton;
        break;
      }

      // optional string jetton = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jetton().data(), this->jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gold;
        break;
      }

      // optional int32 gold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_popularity;
        break;
      }

      // optional int32 popularity = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_ip;
        break;
      }

      // optional string ip = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_face_1;
        break;
      }

      // optional string face_1 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_1().data(), this->face_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_location;
        break;
      }

      // optional string location = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_propertyid;
        break;
      }

      // optional int32 propertyid = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyid_)));
          set_has_propertyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_location_x;
        break;
      }

      // optional string location_x = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location_x().data(), this->location_x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_location_y;
        break;
      }

      // optional string location_y = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location_y().data(), this->location_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(794)) goto parse_jifen;
        break;
      }

      // optional string jifen = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void playersimpleinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }

  // optional int32 level = 13;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->level(), output);
  }

  // optional int32 viplevel = 14;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->viplevel(), output);
  }

  // optional string jetton = 15;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->jetton(), output);
  }

  // optional int32 gold = 16;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gold(), output);
  }

  // optional int32 popularity = 21;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->popularity(), output);
  }

  // optional string ip = 31;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->ip(), output);
  }

  // optional string face_1 = 34;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->face_1(), output);
  }

  // optional string location = 41;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->location(), output);
  }

  // optional int32 propertyid = 45;
  if (has_propertyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->propertyid(), output);
  }

  // optional string location_x = 47;
  if (has_location_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_x().data(), this->location_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->location_x(), output);
  }

  // optional string location_y = 48;
  if (has_location_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_y().data(), this->location_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      48, this->location_y(), output);
  }

  // optional string jifen = 99;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      99, this->jifen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* playersimpleinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }

  // optional int32 level = 13;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->level(), target);
  }

  // optional int32 viplevel = 14;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->viplevel(), target);
  }

  // optional string jetton = 15;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->jetton(), target);
  }

  // optional int32 gold = 16;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gold(), target);
  }

  // optional int32 popularity = 21;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->popularity(), target);
  }

  // optional string ip = 31;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->ip(), target);
  }

  // optional string face_1 = 34;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->face_1(), target);
  }

  // optional string location = 41;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->location(), target);
  }

  // optional int32 propertyid = 45;
  if (has_propertyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->propertyid(), target);
  }

  // optional string location_x = 47;
  if (has_location_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_x().data(), this->location_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->location_x(), target);
  }

  // optional string location_y = 48;
  if (has_location_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_y().data(), this->location_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->location_y(), target);
  }

  // optional string jifen = 99;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        99, this->jifen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int playersimpleinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 viplevel = 14;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional string jetton = 15;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jetton());
    }

    // optional int32 gold = 16;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 popularity = 21;
    if (has_popularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->popularity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 31;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string face_1 = 34;
    if (has_face_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_1());
    }

    // optional string location = 41;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional int32 propertyid = 45;
    if (has_propertyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyid());
    }

    // optional string jifen = 99;
    if (has_jifen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional string location_x = 47;
    if (has_location_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location_x());
    }

    // optional string location_y = 48;
    if (has_location_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playersimpleinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playersimpleinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playersimpleinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playersimpleinfo::MergeFrom(const playersimpleinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_face_1()) {
      set_face_1(from.face_1());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_propertyid()) {
      set_propertyid(from.propertyid());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_location_x()) {
      set_location_x(from.location_x());
    }
    if (from.has_location_y()) {
      set_location_y(from.location_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playersimpleinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playersimpleinfo::CopyFrom(const playersimpleinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playersimpleinfo::IsInitialized() const {

  return true;
}

void playersimpleinfo::Swap(playersimpleinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(jetton_, other->jetton_);
    std::swap(gold_, other->gold_);
    std::swap(popularity_, other->popularity_);
    std::swap(ip_, other->ip_);
    std::swap(face_1_, other->face_1_);
    std::swap(location_, other->location_);
    std::swap(propertyid_, other->propertyid_);
    std::swap(jifen_, other->jifen_);
    std::swap(location_x_, other->location_x_);
    std::swap(location_y_, other->location_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playersimpleinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playersimpleinfo_descriptor_;
  metadata.reflection = playersimpleinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcastinfo::kIdFieldNumber;
const int broadcastinfo::kBroadtypeFieldNumber;
const int broadcastinfo::kSenderidFieldNumber;
const int broadcastinfo::kSenderFieldNumber;
const int broadcastinfo::kMsgFieldNumber;
const int broadcastinfo::kBroadtimesFieldNumber;
const int broadcastinfo::kValiddayFieldNumber;
const int broadcastinfo::kCreatetimeFieldNumber;
const int broadcastinfo::kCycletypeFieldNumber;
#endif  // !_MSC_VER

broadcastinfo::broadcastinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcastinfo::InitAsDefaultInstance() {
}

broadcastinfo::broadcastinfo(const broadcastinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcastinfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  broadtype_ = 0;
  senderid_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  broadtimes_ = 0;
  validday_ = 0;
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cycletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcastinfo::~broadcastinfo() {
  SharedDtor();
}

void broadcastinfo::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (this != default_instance_) {
  }
}

void broadcastinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcastinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcastinfo_descriptor_;
}

const broadcastinfo& broadcastinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

broadcastinfo* broadcastinfo::default_instance_ = NULL;

broadcastinfo* broadcastinfo::New() const {
  return new broadcastinfo;
}

void broadcastinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    broadtype_ = 0;
    senderid_ = 0;
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    broadtimes_ = 0;
    validday_ = 0;
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::kEmptyString) {
        createtime_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cycletype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcastinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broadtype;
        break;
      }

      // optional int32 broadtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadtype_)));
          set_has_broadtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_senderid;
        break;
      }

      // optional int32 senderid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sender;
        break;
      }

      // optional string sender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // optional string msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_broadtimes;
        break;
      }

      // optional int32 broadtimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadtimes_)));
          set_has_broadtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_validday;
        break;
      }

      // optional int32 validday = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validday_)));
          set_has_validday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_createtime;
        break;
      }

      // optional string createtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cycletype;
        break;
      }

      // optional int32 cycletype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cycletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycletype_)));
          set_has_cycletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcastinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 broadtype = 2;
  if (has_broadtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->broadtype(), output);
  }

  // optional int32 senderid = 3;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->senderid(), output);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sender(), output);
  }

  // optional string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->msg(), output);
  }

  // optional int32 broadtimes = 6;
  if (has_broadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->broadtimes(), output);
  }

  // optional int32 validday = 7;
  if (has_validday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->validday(), output);
  }

  // optional string createtime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->createtime(), output);
  }

  // optional int32 cycletype = 9;
  if (has_cycletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cycletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcastinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 broadtype = 2;
  if (has_broadtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->broadtype(), target);
  }

  // optional int32 senderid = 3;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->senderid(), target);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender(), target);
  }

  // optional string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  // optional int32 broadtimes = 6;
  if (has_broadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->broadtimes(), target);
  }

  // optional int32 validday = 7;
  if (has_validday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->validday(), target);
  }

  // optional string createtime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->createtime(), target);
  }

  // optional int32 cycletype = 9;
  if (has_cycletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cycletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcastinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 broadtype = 2;
    if (has_broadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadtype());
    }

    // optional int32 senderid = 3;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

    // optional string sender = 4;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int32 broadtimes = 6;
    if (has_broadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadtimes());
    }

    // optional int32 validday = 7;
    if (has_validday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validday());
    }

    // optional string createtime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cycletype = 9;
    if (has_cycletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cycletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcastinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcastinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcastinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcastinfo::MergeFrom(const broadcastinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_broadtype()) {
      set_broadtype(from.broadtype());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_broadtimes()) {
      set_broadtimes(from.broadtimes());
    }
    if (from.has_validday()) {
      set_validday(from.validday());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cycletype()) {
      set_cycletype(from.cycletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcastinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcastinfo::CopyFrom(const broadcastinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcastinfo::IsInitialized() const {

  return true;
}

void broadcastinfo::Swap(broadcastinfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(broadtype_, other->broadtype_);
    std::swap(senderid_, other->senderid_);
    std::swap(sender_, other->sender_);
    std::swap(msg_, other->msg_);
    std::swap(broadtimes_, other->broadtimes_);
    std::swap(validday_, other->validday_);
    std::swap(createtime_, other->createtime_);
    std::swap(cycletype_, other->cycletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcastinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcastinfo_descriptor_;
  metadata.reflection = broadcastinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mailinfo::kMailidFieldNumber;
const int mailinfo::kSenderidFieldNumber;
const int mailinfo::kSenderFieldNumber;
const int mailinfo::kReceiveridFieldNumber;
const int mailinfo::kReceiverFieldNumber;
const int mailinfo::kMailtypeFieldNumber;
const int mailinfo::kTitleFieldNumber;
const int mailinfo::kContentFieldNumber;
const int mailinfo::kSenddateFieldNumber;
const int mailinfo::kMarkdateFieldNumber;
const int mailinfo::kMailstateFieldNumber;
const int mailinfo::kExterndataFieldNumber;
const int mailinfo::kRemarkFieldNumber;
const int mailinfo::kValidityFieldNumber;
#endif  // !_MSC_VER

mailinfo::mailinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mailinfo::InitAsDefaultInstance() {
}

mailinfo::mailinfo(const mailinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mailinfo::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  senderid_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverid_ = 0;
  receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailtype_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  markdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailstate_ = 0;
  externdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  validity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mailinfo::~mailinfo() {
  SharedDtor();
}

void mailinfo::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (senddate_ != &::google::protobuf::internal::kEmptyString) {
    delete senddate_;
  }
  if (markdate_ != &::google::protobuf::internal::kEmptyString) {
    delete markdate_;
  }
  if (externdata_ != &::google::protobuf::internal::kEmptyString) {
    delete externdata_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void mailinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mailinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mailinfo_descriptor_;
}

const mailinfo& mailinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

mailinfo* mailinfo::default_instance_ = NULL;

mailinfo* mailinfo::New() const {
  return new mailinfo;
}

void mailinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0;
    senderid_ = 0;
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    receiverid_ = 0;
    if (has_receiver()) {
      if (receiver_ != &::google::protobuf::internal::kEmptyString) {
        receiver_->clear();
      }
    }
    mailtype_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_senddate()) {
      if (senddate_ != &::google::protobuf::internal::kEmptyString) {
        senddate_->clear();
      }
    }
    if (has_markdate()) {
      if (markdate_ != &::google::protobuf::internal::kEmptyString) {
        markdate_->clear();
      }
    }
    mailstate_ = 0;
    if (has_externdata()) {
      if (externdata_ != &::google::protobuf::internal::kEmptyString) {
        externdata_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
    validity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mailinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_senderid;
        break;
      }

      // optional int32 senderid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // optional string sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receiverid;
        break;
      }

      // optional int32 receiverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_receiver;
        break;
      }

      // optional string receiver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver().data(), this->receiver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mailtype;
        break;
      }

      // optional int32 mailtype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_title;
        break;
      }

      // optional string title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional string content = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_senddate;
        break;
      }

      // optional string senddate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senddate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->senddate().data(), this->senddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_markdate;
        break;
      }

      // optional string markdate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_markdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_markdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->markdate().data(), this->markdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mailstate;
        break;
      }

      // optional int32 mailstate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailstate_)));
          set_has_mailstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_externdata;
        break;
      }

      // optional string externdata = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_externdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_externdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->externdata().data(), this->externdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_remark;
        break;
      }

      // optional string remark = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_validity;
        break;
      }

      // optional int32 validity = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validity_)));
          set_has_validity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mailinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  // optional int32 senderid = 2;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senderid(), output);
  }

  // optional string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender(), output);
  }

  // optional int32 receiverid = 4;
  if (has_receiverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->receiverid(), output);
  }

  // optional string receiver = 5;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->receiver(), output);
  }

  // optional int32 mailtype = 6;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mailtype(), output);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->title(), output);
  }

  // optional string content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->content(), output);
  }

  // optional string senddate = 9;
  if (has_senddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senddate().data(), this->senddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->senddate(), output);
  }

  // optional string markdate = 10;
  if (has_markdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->markdate().data(), this->markdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->markdate(), output);
  }

  // optional int32 mailstate = 11;
  if (has_mailstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mailstate(), output);
  }

  // optional string externdata = 12;
  if (has_externdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->externdata().data(), this->externdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->externdata(), output);
  }

  // optional string remark = 13;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->remark(), output);
  }

  // optional int32 validity = 14;
  if (has_validity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->validity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mailinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mailid(), target);
  }

  // optional int32 senderid = 2;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->senderid(), target);
  }

  // optional string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender(), target);
  }

  // optional int32 receiverid = 4;
  if (has_receiverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->receiverid(), target);
  }

  // optional string receiver = 5;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->receiver(), target);
  }

  // optional int32 mailtype = 6;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mailtype(), target);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->title(), target);
  }

  // optional string content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->content(), target);
  }

  // optional string senddate = 9;
  if (has_senddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senddate().data(), this->senddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->senddate(), target);
  }

  // optional string markdate = 10;
  if (has_markdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->markdate().data(), this->markdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->markdate(), target);
  }

  // optional int32 mailstate = 11;
  if (has_mailstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mailstate(), target);
  }

  // optional string externdata = 12;
  if (has_externdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->externdata().data(), this->externdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->externdata(), target);
  }

  // optional string remark = 13;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->remark(), target);
  }

  // optional int32 validity = 14;
  if (has_validity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->validity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mailinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional int32 senderid = 2;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

    // optional string sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional int32 receiverid = 4;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverid());
    }

    // optional string receiver = 5;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }

    // optional int32 mailtype = 6;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailtype());
    }

    // optional string title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string senddate = 9;
    if (has_senddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senddate());
    }

    // optional string markdate = 10;
    if (has_markdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->markdate());
    }

    // optional int32 mailstate = 11;
    if (has_mailstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailstate());
    }

    // optional string externdata = 12;
    if (has_externdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->externdata());
    }

    // optional string remark = 13;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional int32 validity = 14;
    if (has_validity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mailinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mailinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mailinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mailinfo::MergeFrom(const mailinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_senddate()) {
      set_senddate(from.senddate());
    }
    if (from.has_markdate()) {
      set_markdate(from.markdate());
    }
    if (from.has_mailstate()) {
      set_mailstate(from.mailstate());
    }
    if (from.has_externdata()) {
      set_externdata(from.externdata());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_validity()) {
      set_validity(from.validity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mailinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mailinfo::CopyFrom(const mailinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mailinfo::IsInitialized() const {

  return true;
}

void mailinfo::Swap(mailinfo* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(senderid_, other->senderid_);
    std::swap(sender_, other->sender_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(receiver_, other->receiver_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(senddate_, other->senddate_);
    std::swap(markdate_, other->markdate_);
    std::swap(mailstate_, other->mailstate_);
    std::swap(externdata_, other->externdata_);
    std::swap(remark_, other->remark_);
    std::swap(validity_, other->validity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mailinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mailinfo_descriptor_;
  metadata.reflection = mailinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int maillist::kMlistFieldNumber;
#endif  // !_MSC_VER

maillist::maillist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void maillist::InitAsDefaultInstance() {
}

maillist::maillist(const maillist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void maillist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

maillist::~maillist() {
  SharedDtor();
}

void maillist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void maillist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* maillist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return maillist_descriptor_;
}

const maillist& maillist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

maillist* maillist::default_instance_ = NULL;

maillist* maillist::New() const {
  return new maillist;
}

void maillist::Clear() {
  mlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool maillist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .progame.mailinfo mlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void maillist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .progame.mailinfo mlist = 1;
  for (int i = 0; i < this->mlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* maillist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .progame.mailinfo mlist = 1;
  for (int i = 0; i < this->mlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int maillist::ByteSize() const {
  int total_size = 0;

  // repeated .progame.mailinfo mlist = 1;
  total_size += 1 * this->mlist_size();
  for (int i = 0; i < this->mlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void maillist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const maillist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const maillist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void maillist::MergeFrom(const maillist& from) {
  GOOGLE_CHECK_NE(&from, this);
  mlist_.MergeFrom(from.mlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void maillist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void maillist::CopyFrom(const maillist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool maillist::IsInitialized() const {

  return true;
}

void maillist::Swap(maillist* other) {
  if (other != this) {
    mlist_.Swap(&other->mlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata maillist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = maillist_descriptor_;
  metadata.reflection = maillist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int inviteinfo::kUseridFieldNumber;
const int inviteinfo::kBinduseridFieldNumber;
const int inviteinfo::kBindnicknameFieldNumber;
const int inviteinfo::kBindfaceidFieldNumber;
const int inviteinfo::kBinddateFieldNumber;
#endif  // !_MSC_VER

inviteinfo::inviteinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void inviteinfo::InitAsDefaultInstance() {
}

inviteinfo::inviteinfo(const inviteinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void inviteinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  binduserid_ = 0;
  bindnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bindfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  binddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

inviteinfo::~inviteinfo() {
  SharedDtor();
}

void inviteinfo::SharedDtor() {
  if (bindnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete bindnickname_;
  }
  if (bindfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bindfaceid_;
  }
  if (binddate_ != &::google::protobuf::internal::kEmptyString) {
    delete binddate_;
  }
  if (this != default_instance_) {
  }
}

void inviteinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* inviteinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return inviteinfo_descriptor_;
}

const inviteinfo& inviteinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

inviteinfo* inviteinfo::default_instance_ = NULL;

inviteinfo* inviteinfo::New() const {
  return new inviteinfo;
}

void inviteinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    binduserid_ = 0;
    if (has_bindnickname()) {
      if (bindnickname_ != &::google::protobuf::internal::kEmptyString) {
        bindnickname_->clear();
      }
    }
    if (has_bindfaceid()) {
      if (bindfaceid_ != &::google::protobuf::internal::kEmptyString) {
        bindfaceid_->clear();
      }
    }
    if (has_binddate()) {
      if (binddate_ != &::google::protobuf::internal::kEmptyString) {
        binddate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool inviteinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_binduserid;
        break;
      }

      // optional int32 binduserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binduserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binduserid_)));
          set_has_binduserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bindnickname;
        break;
      }

      // optional string bindnickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bindnickname().data(), this->bindnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bindfaceid;
        break;
      }

      // optional string bindfaceid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bindfaceid().data(), this->bindfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_binddate;
        break;
      }

      // optional string binddate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binddate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->binddate().data(), this->binddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void inviteinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 binduserid = 2;
  if (has_binduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->binduserid(), output);
  }

  // optional string bindnickname = 3;
  if (has_bindnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindnickname().data(), this->bindnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bindnickname(), output);
  }

  // optional string bindfaceid = 4;
  if (has_bindfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindfaceid().data(), this->bindfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bindfaceid(), output);
  }

  // optional string binddate = 5;
  if (has_binddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binddate().data(), this->binddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->binddate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* inviteinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 binduserid = 2;
  if (has_binduserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->binduserid(), target);
  }

  // optional string bindnickname = 3;
  if (has_bindnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindnickname().data(), this->bindnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bindnickname(), target);
  }

  // optional string bindfaceid = 4;
  if (has_bindfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bindfaceid().data(), this->bindfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bindfaceid(), target);
  }

  // optional string binddate = 5;
  if (has_binddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binddate().data(), this->binddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->binddate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int inviteinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 binduserid = 2;
    if (has_binduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binduserid());
    }

    // optional string bindnickname = 3;
    if (has_bindnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindnickname());
    }

    // optional string bindfaceid = 4;
    if (has_bindfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindfaceid());
    }

    // optional string binddate = 5;
    if (has_binddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->binddate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void inviteinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const inviteinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const inviteinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void inviteinfo::MergeFrom(const inviteinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_binduserid()) {
      set_binduserid(from.binduserid());
    }
    if (from.has_bindnickname()) {
      set_bindnickname(from.bindnickname());
    }
    if (from.has_bindfaceid()) {
      set_bindfaceid(from.bindfaceid());
    }
    if (from.has_binddate()) {
      set_binddate(from.binddate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void inviteinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inviteinfo::CopyFrom(const inviteinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inviteinfo::IsInitialized() const {

  return true;
}

void inviteinfo::Swap(inviteinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(binduserid_, other->binduserid_);
    std::swap(bindnickname_, other->bindnickname_);
    std::swap(bindfaceid_, other->bindfaceid_);
    std::swap(binddate_, other->binddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata inviteinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = inviteinfo_descriptor_;
  metadata.reflection = inviteinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int agencyinfo::kUseridFieldNumber;
const int agencyinfo::kInvitestrFieldNumber;
const int agencyinfo::kLevelFieldNumber;
const int agencyinfo::kSoleagentFieldNumber;
const int agencyinfo::kAgent1FieldNumber;
const int agencyinfo::kAgent2FieldNumber;
const int agencyinfo::kAgent3FieldNumber;
const int agencyinfo::kAgent4FieldNumber;
const int agencyinfo::kInvitelistFieldNumber;
const int agencyinfo::kQrcodeurlFieldNumber;
const int agencyinfo::kDatemarkFieldNumber;
const int agencyinfo::kMoneymarkFieldNumber;
const int agencyinfo::kWeekmoneyFieldNumber;
const int agencyinfo::kExclusiveurlFieldNumber;
const int agencyinfo::kAlipayFieldNumber;
const int agencyinfo::kBankaccountFieldNumber;
const int agencyinfo::kWiringidFieldNumber;
const int agencyinfo::kGradeFieldNumber;
#endif  // !_MSC_VER

agencyinfo::agencyinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void agencyinfo::InitAsDefaultInstance() {
}

agencyinfo::agencyinfo(const agencyinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void agencyinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  invitestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  soleagent_ = 0;
  agent1_ = 0;
  agent2_ = 0;
  agent3_ = 0;
  agent4_ = 0;
  qrcodeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datemark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moneymark_ = 0;
  weekmoney_ = 0;
  exclusiveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alipay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wiringid_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agencyinfo::~agencyinfo() {
  SharedDtor();
}

void agencyinfo::SharedDtor() {
  if (invitestr_ != &::google::protobuf::internal::kEmptyString) {
    delete invitestr_;
  }
  if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete qrcodeurl_;
  }
  if (datemark_ != &::google::protobuf::internal::kEmptyString) {
    delete datemark_;
  }
  if (exclusiveurl_ != &::google::protobuf::internal::kEmptyString) {
    delete exclusiveurl_;
  }
  if (alipay_ != &::google::protobuf::internal::kEmptyString) {
    delete alipay_;
  }
  if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete bankaccount_;
  }
  if (this != default_instance_) {
  }
}

void agencyinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agencyinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agencyinfo_descriptor_;
}

const agencyinfo& agencyinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

agencyinfo* agencyinfo::default_instance_ = NULL;

agencyinfo* agencyinfo::New() const {
  return new agencyinfo;
}

void agencyinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_invitestr()) {
      if (invitestr_ != &::google::protobuf::internal::kEmptyString) {
        invitestr_->clear();
      }
    }
    level_ = 0;
    soleagent_ = 0;
    agent1_ = 0;
    agent2_ = 0;
    agent3_ = 0;
    agent4_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_qrcodeurl()) {
      if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
        qrcodeurl_->clear();
      }
    }
    if (has_datemark()) {
      if (datemark_ != &::google::protobuf::internal::kEmptyString) {
        datemark_->clear();
      }
    }
    moneymark_ = 0;
    weekmoney_ = 0;
    if (has_exclusiveurl()) {
      if (exclusiveurl_ != &::google::protobuf::internal::kEmptyString) {
        exclusiveurl_->clear();
      }
    }
    if (has_alipay()) {
      if (alipay_ != &::google::protobuf::internal::kEmptyString) {
        alipay_->clear();
      }
    }
    if (has_bankaccount()) {
      if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
        bankaccount_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    wiringid_ = 0;
    grade_ = 0;
  }
  invitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agencyinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invitestr;
        break;
      }

      // optional string invitestr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitestr().data(), this->invitestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_soleagent;
        break;
      }

      // optional int32 soleagent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soleagent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soleagent_)));
          set_has_soleagent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_agent1;
        break;
      }

      // optional int32 agent1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent1_)));
          set_has_agent1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agent2;
        break;
      }

      // optional int32 agent2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent2_)));
          set_has_agent2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_agent3;
        break;
      }

      // optional int32 agent3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent3_)));
          set_has_agent3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_agent4;
        break;
      }

      // optional int32 agent4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent4_)));
          set_has_agent4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_invitelist;
        break;
      }

      // repeated .progame.inviteinfo invitelist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_invitelist;
        if (input->ExpectTag(82)) goto parse_qrcodeurl;
        break;
      }

      // optional string qrcodeurl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrcodeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrcodeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrcodeurl().data(), this->qrcodeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_datemark;
        break;
      }

      // optional string datemark = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datemark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datemark().data(), this->datemark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_moneymark;
        break;
      }

      // optional int32 moneymark = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneymark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneymark_)));
          set_has_moneymark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weekmoney;
        break;
      }

      // optional int32 weekmoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekmoney_)));
          set_has_weekmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_exclusiveurl;
        break;
      }

      // optional string exclusiveurl = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exclusiveurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exclusiveurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exclusiveurl().data(), this->exclusiveurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_alipay;
        break;
      }

      // optional string alipay = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alipay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alipay().data(), this->alipay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_bankaccount;
        break;
      }

      // optional string bankaccount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankaccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankaccount().data(), this->bankaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_wiringid;
        break;
      }

      // optional int32 wiringid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wiringid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiringid_)));
          set_has_wiringid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_grade;
        break;
      }

      // optional int32 grade = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void agencyinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string invitestr = 2;
  if (has_invitestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitestr().data(), this->invitestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->invitestr(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 soleagent = 4;
  if (has_soleagent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->soleagent(), output);
  }

  // optional int32 agent1 = 5;
  if (has_agent1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->agent1(), output);
  }

  // optional int32 agent2 = 6;
  if (has_agent2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->agent2(), output);
  }

  // optional int32 agent3 = 7;
  if (has_agent3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->agent3(), output);
  }

  // optional int32 agent4 = 8;
  if (has_agent4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->agent4(), output);
  }

  // repeated .progame.inviteinfo invitelist = 9;
  for (int i = 0; i < this->invitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->invitelist(i), output);
  }

  // optional string qrcodeurl = 10;
  if (has_qrcodeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrcodeurl().data(), this->qrcodeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->qrcodeurl(), output);
  }

  // optional string datemark = 11;
  if (has_datemark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datemark().data(), this->datemark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->datemark(), output);
  }

  // optional int32 moneymark = 12;
  if (has_moneymark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->moneymark(), output);
  }

  // optional int32 weekmoney = 13;
  if (has_weekmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->weekmoney(), output);
  }

  // optional string exclusiveurl = 14;
  if (has_exclusiveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exclusiveurl().data(), this->exclusiveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->exclusiveurl(), output);
  }

  // optional string alipay = 15;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->alipay(), output);
  }

  // optional string bankaccount = 16;
  if (has_bankaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankaccount().data(), this->bankaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->bankaccount(), output);
  }

  // optional int32 wiringid = 17;
  if (has_wiringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->wiringid(), output);
  }

  // optional int32 grade = 18;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* agencyinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string invitestr = 2;
  if (has_invitestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitestr().data(), this->invitestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitestr(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 soleagent = 4;
  if (has_soleagent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->soleagent(), target);
  }

  // optional int32 agent1 = 5;
  if (has_agent1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->agent1(), target);
  }

  // optional int32 agent2 = 6;
  if (has_agent2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->agent2(), target);
  }

  // optional int32 agent3 = 7;
  if (has_agent3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->agent3(), target);
  }

  // optional int32 agent4 = 8;
  if (has_agent4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->agent4(), target);
  }

  // repeated .progame.inviteinfo invitelist = 9;
  for (int i = 0; i < this->invitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->invitelist(i), target);
  }

  // optional string qrcodeurl = 10;
  if (has_qrcodeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrcodeurl().data(), this->qrcodeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->qrcodeurl(), target);
  }

  // optional string datemark = 11;
  if (has_datemark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datemark().data(), this->datemark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->datemark(), target);
  }

  // optional int32 moneymark = 12;
  if (has_moneymark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->moneymark(), target);
  }

  // optional int32 weekmoney = 13;
  if (has_weekmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->weekmoney(), target);
  }

  // optional string exclusiveurl = 14;
  if (has_exclusiveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exclusiveurl().data(), this->exclusiveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->exclusiveurl(), target);
  }

  // optional string alipay = 15;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->alipay(), target);
  }

  // optional string bankaccount = 16;
  if (has_bankaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankaccount().data(), this->bankaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->bankaccount(), target);
  }

  // optional int32 wiringid = 17;
  if (has_wiringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->wiringid(), target);
  }

  // optional int32 grade = 18;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int agencyinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string invitestr = 2;
    if (has_invitestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitestr());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 soleagent = 4;
    if (has_soleagent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soleagent());
    }

    // optional int32 agent1 = 5;
    if (has_agent1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent1());
    }

    // optional int32 agent2 = 6;
    if (has_agent2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent2());
    }

    // optional int32 agent3 = 7;
    if (has_agent3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent3());
    }

    // optional int32 agent4 = 8;
    if (has_agent4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent4());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string qrcodeurl = 10;
    if (has_qrcodeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrcodeurl());
    }

    // optional string datemark = 11;
    if (has_datemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datemark());
    }

    // optional int32 moneymark = 12;
    if (has_moneymark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneymark());
    }

    // optional int32 weekmoney = 13;
    if (has_weekmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekmoney());
    }

    // optional string exclusiveurl = 14;
    if (has_exclusiveurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exclusiveurl());
    }

    // optional string alipay = 15;
    if (has_alipay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipay());
    }

    // optional string bankaccount = 16;
    if (has_bankaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankaccount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 wiringid = 17;
    if (has_wiringid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiringid());
    }

    // optional int32 grade = 18;
    if (has_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  // repeated .progame.inviteinfo invitelist = 9;
  total_size += 1 * this->invitelist_size();
  for (int i = 0; i < this->invitelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agencyinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agencyinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agencyinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agencyinfo::MergeFrom(const agencyinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  invitelist_.MergeFrom(from.invitelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_invitestr()) {
      set_invitestr(from.invitestr());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_soleagent()) {
      set_soleagent(from.soleagent());
    }
    if (from.has_agent1()) {
      set_agent1(from.agent1());
    }
    if (from.has_agent2()) {
      set_agent2(from.agent2());
    }
    if (from.has_agent3()) {
      set_agent3(from.agent3());
    }
    if (from.has_agent4()) {
      set_agent4(from.agent4());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_qrcodeurl()) {
      set_qrcodeurl(from.qrcodeurl());
    }
    if (from.has_datemark()) {
      set_datemark(from.datemark());
    }
    if (from.has_moneymark()) {
      set_moneymark(from.moneymark());
    }
    if (from.has_weekmoney()) {
      set_weekmoney(from.weekmoney());
    }
    if (from.has_exclusiveurl()) {
      set_exclusiveurl(from.exclusiveurl());
    }
    if (from.has_alipay()) {
      set_alipay(from.alipay());
    }
    if (from.has_bankaccount()) {
      set_bankaccount(from.bankaccount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wiringid()) {
      set_wiringid(from.wiringid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agencyinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agencyinfo::CopyFrom(const agencyinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agencyinfo::IsInitialized() const {

  return true;
}

void agencyinfo::Swap(agencyinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(invitestr_, other->invitestr_);
    std::swap(level_, other->level_);
    std::swap(soleagent_, other->soleagent_);
    std::swap(agent1_, other->agent1_);
    std::swap(agent2_, other->agent2_);
    std::swap(agent3_, other->agent3_);
    std::swap(agent4_, other->agent4_);
    invitelist_.Swap(&other->invitelist_);
    std::swap(qrcodeurl_, other->qrcodeurl_);
    std::swap(datemark_, other->datemark_);
    std::swap(moneymark_, other->moneymark_);
    std::swap(weekmoney_, other->weekmoney_);
    std::swap(exclusiveurl_, other->exclusiveurl_);
    std::swap(alipay_, other->alipay_);
    std::swap(bankaccount_, other->bankaccount_);
    std::swap(wiringid_, other->wiringid_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agencyinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agencyinfo_descriptor_;
  metadata.reflection = agencyinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int intlist::kIlistFieldNumber;
#endif  // !_MSC_VER

intlist::intlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void intlist::InitAsDefaultInstance() {
}

intlist::intlist(const intlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void intlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

intlist::~intlist() {
  SharedDtor();
}

void intlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void intlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* intlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return intlist_descriptor_;
}

const intlist& intlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

intlist* intlist::default_instance_ = NULL;

intlist* intlist::New() const {
  return new intlist;
}

void intlist::Clear() {
  ilist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool intlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ilist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ilist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ilist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ilist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ilist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void intlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ilist = 1;
  for (int i = 0; i < this->ilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ilist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* intlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 ilist = 1;
  for (int i = 0; i < this->ilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ilist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int intlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 ilist = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ilist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ilist(i));
    }
    total_size += 1 * this->ilist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void intlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const intlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const intlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void intlist::MergeFrom(const intlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  ilist_.MergeFrom(from.ilist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void intlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void intlist::CopyFrom(const intlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool intlist::IsInitialized() const {

  return true;
}

void intlist::Swap(intlist* other) {
  if (other != this) {
    ilist_.Swap(&other->ilist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata intlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = intlist_descriptor_;
  metadata.reflection = intlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stringlist::kSlistFieldNumber;
#endif  // !_MSC_VER

stringlist::stringlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stringlist::InitAsDefaultInstance() {
}

stringlist::stringlist(const stringlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stringlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stringlist::~stringlist() {
  SharedDtor();
}

void stringlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stringlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stringlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stringlist_descriptor_;
}

const stringlist& stringlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

stringlist* stringlist::default_instance_ = NULL;

stringlist* stringlist::New() const {
  return new stringlist;
}

void stringlist::Clear() {
  slist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stringlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string slist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_slist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slist(this->slist_size() - 1).data(),
            this->slist(this->slist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stringlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string slist = 1;
  for (int i = 0; i < this->slist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->slist(i).data(), this->slist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->slist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stringlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string slist = 1;
  for (int i = 0; i < this->slist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slist(i).data(), this->slist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->slist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stringlist::ByteSize() const {
  int total_size = 0;

  // repeated string slist = 1;
  total_size += 1 * this->slist_size();
  for (int i = 0; i < this->slist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->slist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stringlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stringlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stringlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stringlist::MergeFrom(const stringlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  slist_.MergeFrom(from.slist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stringlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stringlist::CopyFrom(const stringlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stringlist::IsInitialized() const {

  return true;
}

void stringlist::Swap(stringlist* other) {
  if (other != this) {
    slist_.Swap(&other->slist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stringlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stringlist_descriptor_;
  metadata.reflection = stringlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int useraward::kIdFieldNumber;
const int useraward::kAwardtypeFieldNumber;
const int useraward::kCountFieldNumber;
const int useraward::kTimemarkFieldNumber;
const int useraward::kStateFieldNumber;
#endif  // !_MSC_VER

useraward::useraward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void useraward::InitAsDefaultInstance() {
}

useraward::useraward(const useraward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void useraward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  awardtype_ = 0;
  count_ = 0;
  timemark_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

useraward::~useraward() {
  SharedDtor();
}

void useraward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void useraward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* useraward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return useraward_descriptor_;
}

const useraward& useraward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

useraward* useraward::default_instance_ = NULL;

useraward* useraward::New() const {
  return new useraward;
}

void useraward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    awardtype_ = 0;
    count_ = 0;
    timemark_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool useraward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awardtype;
        break;
      }

      // optional int32 awardtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void useraward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 awardtype = 2;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awardtype(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timemark(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* useraward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 awardtype = 2;
  if (has_awardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awardtype(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timemark(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int useraward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 awardtype = 2;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardtype());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 timemark = 4;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void useraward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const useraward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const useraward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void useraward::MergeFrom(const useraward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void useraward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void useraward::CopyFrom(const useraward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool useraward::IsInitialized() const {

  return true;
}

void useraward::Swap(useraward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(count_, other->count_);
    std::swap(timemark_, other->timemark_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata useraward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = useraward_descriptor_;
  metadata.reflection = useraward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int banktransferrecord::kUseridFieldNumber;
const int banktransferrecord::kNicknameFieldNumber;
const int banktransferrecord::kAmountFieldNumber;
const int banktransferrecord::kTimemarkFieldNumber;
#endif  // !_MSC_VER

banktransferrecord::banktransferrecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void banktransferrecord::InitAsDefaultInstance() {
}

banktransferrecord::banktransferrecord(const banktransferrecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void banktransferrecord::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timemark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

banktransferrecord::~banktransferrecord() {
  SharedDtor();
}

void banktransferrecord::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (timemark_ != &::google::protobuf::internal::kEmptyString) {
    delete timemark_;
  }
  if (this != default_instance_) {
  }
}

void banktransferrecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* banktransferrecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return banktransferrecord_descriptor_;
}

const banktransferrecord& banktransferrecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

banktransferrecord* banktransferrecord::default_instance_ = NULL;

banktransferrecord* banktransferrecord::New() const {
  return new banktransferrecord;
}

void banktransferrecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::kEmptyString) {
        amount_->clear();
      }
    }
    if (has_timemark()) {
      if (timemark_ != &::google::protobuf::internal::kEmptyString) {
        timemark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool banktransferrecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_amount;
        break;
      }

      // optional string amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timemark;
        break;
      }

      // optional string timemark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timemark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timemark().data(), this->timemark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void banktransferrecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional string amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->amount(), output);
  }

  // optional string timemark = 4;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timemark().data(), this->timemark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->timemark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* banktransferrecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->amount(), target);
  }

  // optional string timemark = 4;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timemark().data(), this->timemark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timemark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int banktransferrecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

    // optional string timemark = 4;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timemark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void banktransferrecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const banktransferrecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const banktransferrecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void banktransferrecord::MergeFrom(const banktransferrecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void banktransferrecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void banktransferrecord::CopyFrom(const banktransferrecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool banktransferrecord::IsInitialized() const {

  return true;
}

void banktransferrecord::Swap(banktransferrecord* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(amount_, other->amount_);
    std::swap(timemark_, other->timemark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata banktransferrecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = banktransferrecord_descriptor_;
  metadata.reflection = banktransferrecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int specialcardreward::kIndexFieldNumber;
const int specialcardreward::kCardtypeFieldNumber;
const int specialcardreward::kRewardFieldNumber;
const int specialcardreward::kStatusFieldNumber;
const int specialcardreward::kCreatedateFieldNumber;
#endif  // !_MSC_VER

specialcardreward::specialcardreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void specialcardreward::InitAsDefaultInstance() {
}

specialcardreward::specialcardreward(const specialcardreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void specialcardreward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  cardtype_ = 0;
  reward_ = 0;
  status_ = 0;
  createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

specialcardreward::~specialcardreward() {
  SharedDtor();
}

void specialcardreward::SharedDtor() {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (this != default_instance_) {
  }
}

void specialcardreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* specialcardreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return specialcardreward_descriptor_;
}

const specialcardreward& specialcardreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

specialcardreward* specialcardreward::default_instance_ = NULL;

specialcardreward* specialcardreward::New() const {
  return new specialcardreward;
}

void specialcardreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    cardtype_ = 0;
    reward_ = 0;
    status_ = 0;
    if (has_createdate()) {
      if (createdate_ != &::google::protobuf::internal::kEmptyString) {
        createdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool specialcardreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardtype;
        break;
      }

      // optional int32 cardtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional int32 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_createdate;
        break;
      }

      // optional string createdate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdate().data(), this->createdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void specialcardreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 cardtype = 2;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardtype(), output);
  }

  // optional int32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional string createdate = 5;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->createdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* specialcardreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 cardtype = 2;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardtype(), target);
  }

  // optional int32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional string createdate = 5;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->createdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int specialcardreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 cardtype = 2;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string createdate = 5;
    if (has_createdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void specialcardreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const specialcardreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const specialcardreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void specialcardreward::MergeFrom(const specialcardreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_createdate()) {
      set_createdate(from.createdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void specialcardreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void specialcardreward::CopyFrom(const specialcardreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool specialcardreward::IsInitialized() const {

  return true;
}

void specialcardreward::Swap(specialcardreward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(reward_, other->reward_);
    std::swap(status_, other->status_);
    std::swap(createdate_, other->createdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata specialcardreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = specialcardreward_descriptor_;
  metadata.reflection = specialcardreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int specialinfo::kUseridFieldNumber;
const int specialinfo::kStarttimeFieldNumber;
const int specialinfo::kEndtimeFieldNumber;
const int specialinfo::kStateFieldNumber;
const int specialinfo::kRateFieldNumber;
const int specialinfo::kWinallFieldNumber;
const int specialinfo::kPeinumFieldNumber;
const int specialinfo::kMarknumFieldNumber;
const int specialinfo::kGametypeFieldNumber;
const int specialinfo::kCardtypeFieldNumber;
const int specialinfo::kIszhuangFieldNumber;
const int specialinfo::kNorecordFieldNumber;
#endif  // !_MSC_VER

specialinfo::specialinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void specialinfo::InitAsDefaultInstance() {
}

specialinfo::specialinfo(const specialinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void specialinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  state_ = 0;
  rate_ = 0;
  winall_ = 0;
  peinum_ = 0;
  marknum_ = 0;
  cardtype_ = 0;
  iszhuang_ = 0;
  norecord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

specialinfo::~specialinfo() {
  SharedDtor();
}

void specialinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void specialinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* specialinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return specialinfo_descriptor_;
}

const specialinfo& specialinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fhuman_2eproto();
  return *default_instance_;
}

specialinfo* specialinfo::default_instance_ = NULL;

specialinfo* specialinfo::New() const {
  return new specialinfo;
}

void specialinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    starttime_ = 0;
    endtime_ = 0;
    state_ = 0;
    rate_ = 0;
    winall_ = 0;
    peinum_ = 0;
    marknum_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    cardtype_ = 0;
    iszhuang_ = 0;
    norecord_ = 0;
  }
  gametype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool specialinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starttime;
        break;
      }

      // optional int32 starttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rate;
        break;
      }

      // optional int32 rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winall;
        break;
      }

      // optional int32 winall = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winall_)));
          set_has_winall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_peinum;
        break;
      }

      // optional int32 peinum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peinum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peinum_)));
          set_has_peinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_marknum;
        break;
      }

      // optional int32 marknum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marknum_)));
          set_has_marknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gametype;
        break;
      }

      // repeated int32 gametype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_gametype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gametype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gametype;
        if (input->ExpectTag(80)) goto parse_cardtype;
        break;
      }

      // optional int32 cardtype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_iszhuang;
        break;
      }

      // optional int32 iszhuang = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iszhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iszhuang_)));
          set_has_iszhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_norecord;
        break;
      }

      // optional int32 norecord = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_norecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &norecord_)));
          set_has_norecord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void specialinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 starttime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starttime(), output);
  }

  // optional int32 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endtime(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 rate = 5;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rate(), output);
  }

  // optional int32 winall = 6;
  if (has_winall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->winall(), output);
  }

  // optional int32 peinum = 7;
  if (has_peinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->peinum(), output);
  }

  // optional int32 marknum = 8;
  if (has_marknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->marknum(), output);
  }

  // repeated int32 gametype = 9;
  for (int i = 0; i < this->gametype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->gametype(i), output);
  }

  // optional int32 cardtype = 10;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cardtype(), output);
  }

  // optional int32 iszhuang = 11;
  if (has_iszhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->iszhuang(), output);
  }

  // optional int32 norecord = 12;
  if (has_norecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->norecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* specialinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 starttime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starttime(), target);
  }

  // optional int32 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endtime(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 rate = 5;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rate(), target);
  }

  // optional int32 winall = 6;
  if (has_winall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->winall(), target);
  }

  // optional int32 peinum = 7;
  if (has_peinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->peinum(), target);
  }

  // optional int32 marknum = 8;
  if (has_marknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->marknum(), target);
  }

  // repeated int32 gametype = 9;
  for (int i = 0; i < this->gametype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->gametype(i), target);
  }

  // optional int32 cardtype = 10;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cardtype(), target);
  }

  // optional int32 iszhuang = 11;
  if (has_iszhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->iszhuang(), target);
  }

  // optional int32 norecord = 12;
  if (has_norecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->norecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int specialinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 starttime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 rate = 5;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 winall = 6;
    if (has_winall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winall());
    }

    // optional int32 peinum = 7;
    if (has_peinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peinum());
    }

    // optional int32 marknum = 8;
    if (has_marknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marknum());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 cardtype = 10;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 iszhuang = 11;
    if (has_iszhuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iszhuang());
    }

    // optional int32 norecord = 12;
    if (has_norecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->norecord());
    }

  }
  // repeated int32 gametype = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->gametype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gametype(i));
    }
    total_size += 1 * this->gametype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void specialinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const specialinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const specialinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void specialinfo::MergeFrom(const specialinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gametype_.MergeFrom(from.gametype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_winall()) {
      set_winall(from.winall());
    }
    if (from.has_peinum()) {
      set_peinum(from.peinum());
    }
    if (from.has_marknum()) {
      set_marknum(from.marknum());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_iszhuang()) {
      set_iszhuang(from.iszhuang());
    }
    if (from.has_norecord()) {
      set_norecord(from.norecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void specialinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void specialinfo::CopyFrom(const specialinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool specialinfo::IsInitialized() const {

  return true;
}

void specialinfo::Swap(specialinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(state_, other->state_);
    std::swap(rate_, other->rate_);
    std::swap(winall_, other->winall_);
    std::swap(peinum_, other->peinum_);
    std::swap(marknum_, other->marknum_);
    gametype_.Swap(&other->gametype_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(iszhuang_, other->iszhuang_);
    std::swap(norecord_, other->norecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata specialinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = specialinfo_descriptor_;
  metadata.reflection = specialinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
