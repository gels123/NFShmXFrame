// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_slhb.proto

#ifndef PROTOBUF_st_5fslhb_2eproto__INCLUDED
#define PROTOBUF_st_5fslhb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fslhb_2eproto();
void protobuf_AssignDesc_st_5fslhb_2eproto();
void protobuf_ShutdownFile_st_5fslhb_2eproto();

class hongbao;
class robhb;
class slhbinfo;
class slhbjettonrecordlist;
class slhbjettonrecorinfo;

// ===================================================================

class hongbao : public ::google::protobuf::Message {
 public:
  hongbao();
  virtual ~hongbao();

  hongbao(const hongbao& from);

  inline hongbao& operator=(const hongbao& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hongbao& default_instance();

  void Swap(hongbao* other);

  // implements Message ----------------------------------------------

  hongbao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hongbao& from);
  void MergeFrom(const hongbao& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 hbjetton = 2;
  inline bool has_hbjetton() const;
  inline void clear_hbjetton();
  static const int kHbjettonFieldNumber = 2;
  inline ::google::protobuf::int32 hbjetton() const;
  inline void set_hbjetton(::google::protobuf::int32 value);

  // optional int32 hbbomb = 3;
  inline bool has_hbbomb() const;
  inline void clear_hbbomb();
  static const int kHbbombFieldNumber = 3;
  inline ::google::protobuf::int32 hbbomb() const;
  inline void set_hbbomb(::google::protobuf::int32 value);

  // optional string unickname = 4;
  inline bool has_unickname() const;
  inline void clear_unickname();
  static const int kUnicknameFieldNumber = 4;
  inline const ::std::string& unickname() const;
  inline void set_unickname(const ::std::string& value);
  inline void set_unickname(const char* value);
  inline void set_unickname(const char* value, size_t size);
  inline ::std::string* mutable_unickname();
  inline ::std::string* release_unickname();
  inline void set_allocated_unickname(::std::string* unickname);

  // optional string nfaceid = 5;
  inline bool has_nfaceid() const;
  inline void clear_nfaceid();
  static const int kNfaceidFieldNumber = 5;
  inline const ::std::string& nfaceid() const;
  inline void set_nfaceid(const ::std::string& value);
  inline void set_nfaceid(const char* value);
  inline void set_nfaceid(const char* value, size_t size);
  inline ::std::string* mutable_nfaceid();
  inline ::std::string* release_nfaceid();
  inline void set_allocated_nfaceid(::std::string* nfaceid);

  // @@protoc_insertion_point(class_scope:progame.hongbao)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_hbjetton();
  inline void clear_has_hbjetton();
  inline void set_has_hbbomb();
  inline void clear_has_hbbomb();
  inline void set_has_unickname();
  inline void clear_has_unickname();
  inline void set_has_nfaceid();
  inline void clear_has_nfaceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 hbjetton_;
  ::std::string* unickname_;
  ::std::string* nfaceid_;
  ::google::protobuf::int32 hbbomb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslhb_2eproto();
  friend void protobuf_AssignDesc_st_5fslhb_2eproto();
  friend void protobuf_ShutdownFile_st_5fslhb_2eproto();

  void InitAsDefaultInstance();
  static hongbao* default_instance_;
};
// -------------------------------------------------------------------

class robhb : public ::google::protobuf::Message {
 public:
  robhb();
  virtual ~robhb();

  robhb(const robhb& from);

  inline robhb& operator=(const robhb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const robhb& default_instance();

  void Swap(robhb* other);

  // implements Message ----------------------------------------------

  robhb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const robhb& from);
  void MergeFrom(const robhb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string unickname = 2;
  inline bool has_unickname() const;
  inline void clear_unickname();
  static const int kUnicknameFieldNumber = 2;
  inline const ::std::string& unickname() const;
  inline void set_unickname(const ::std::string& value);
  inline void set_unickname(const char* value);
  inline void set_unickname(const char* value, size_t size);
  inline ::std::string* mutable_unickname();
  inline ::std::string* release_unickname();
  inline void set_allocated_unickname(::std::string* unickname);

  // optional string nfaceid = 3;
  inline bool has_nfaceid() const;
  inline void clear_nfaceid();
  static const int kNfaceidFieldNumber = 3;
  inline const ::std::string& nfaceid() const;
  inline void set_nfaceid(const ::std::string& value);
  inline void set_nfaceid(const char* value);
  inline void set_nfaceid(const char* value, size_t size);
  inline ::std::string* mutable_nfaceid();
  inline ::std::string* release_nfaceid();
  inline void set_allocated_nfaceid(::std::string* nfaceid);

  // optional int32 hbjetton = 4;
  inline bool has_hbjetton() const;
  inline void clear_hbjetton();
  static const int kHbjettonFieldNumber = 4;
  inline ::google::protobuf::int32 hbjetton() const;
  inline void set_hbjetton(::google::protobuf::int32 value);

  // optional int32 isbomb = 5;
  inline bool has_isbomb() const;
  inline void clear_isbomb();
  static const int kIsbombFieldNumber = 5;
  inline ::google::protobuf::int32 isbomb() const;
  inline void set_isbomb(::google::protobuf::int32 value);

  // optional int32 winjetton = 6;
  inline bool has_winjetton() const;
  inline void clear_winjetton();
  static const int kWinjettonFieldNumber = 6;
  inline ::google::protobuf::int32 winjetton() const;
  inline void set_winjetton(::google::protobuf::int32 value);

  // optional int32 number = 7;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 7;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.robhb)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_unickname();
  inline void clear_has_unickname();
  inline void set_has_nfaceid();
  inline void clear_has_nfaceid();
  inline void set_has_hbjetton();
  inline void clear_has_hbjetton();
  inline void set_has_isbomb();
  inline void clear_has_isbomb();
  inline void set_has_winjetton();
  inline void clear_has_winjetton();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unickname_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 hbjetton_;
  ::std::string* nfaceid_;
  ::google::protobuf::int32 isbomb_;
  ::google::protobuf::int32 winjetton_;
  ::google::protobuf::int32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslhb_2eproto();
  friend void protobuf_AssignDesc_st_5fslhb_2eproto();
  friend void protobuf_ShutdownFile_st_5fslhb_2eproto();

  void InitAsDefaultInstance();
  static robhb* default_instance_;
};
// -------------------------------------------------------------------

class slhbinfo : public ::google::protobuf::Message {
 public:
  slhbinfo();
  virtual ~slhbinfo();

  slhbinfo(const slhbinfo& from);

  inline slhbinfo& operator=(const slhbinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const slhbinfo& default_instance();

  void Swap(slhbinfo* other);

  // implements Message ----------------------------------------------

  slhbinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const slhbinfo& from);
  void MergeFrom(const slhbinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 3;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 3;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // optional int32 tabletype = 4;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 4;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 hbuserid = 5;
  inline bool has_hbuserid() const;
  inline void clear_hbuserid();
  static const int kHbuseridFieldNumber = 5;
  inline ::google::protobuf::int32 hbuserid() const;
  inline void set_hbuserid(::google::protobuf::int32 value);

  // optional string hbnickname = 6;
  inline bool has_hbnickname() const;
  inline void clear_hbnickname();
  static const int kHbnicknameFieldNumber = 6;
  inline const ::std::string& hbnickname() const;
  inline void set_hbnickname(const ::std::string& value);
  inline void set_hbnickname(const char* value);
  inline void set_hbnickname(const char* value, size_t size);
  inline ::std::string* mutable_hbnickname();
  inline ::std::string* release_hbnickname();
  inline void set_allocated_hbnickname(::std::string* hbnickname);

  // optional string hbfaceid = 7;
  inline bool has_hbfaceid() const;
  inline void clear_hbfaceid();
  static const int kHbfaceidFieldNumber = 7;
  inline const ::std::string& hbfaceid() const;
  inline void set_hbfaceid(const ::std::string& value);
  inline void set_hbfaceid(const char* value);
  inline void set_hbfaceid(const char* value, size_t size);
  inline ::std::string* mutable_hbfaceid();
  inline ::std::string* release_hbfaceid();
  inline void set_allocated_hbfaceid(::std::string* hbfaceid);

  // optional int32 hbjetton = 8;
  inline bool has_hbjetton() const;
  inline void clear_hbjetton();
  static const int kHbjettonFieldNumber = 8;
  inline ::google::protobuf::int32 hbjetton() const;
  inline void set_hbjetton(::google::protobuf::int32 value);

  // optional int32 hbnum = 9;
  inline bool has_hbnum() const;
  inline void clear_hbnum();
  static const int kHbnumFieldNumber = 9;
  inline ::google::protobuf::int32 hbnum() const;
  inline void set_hbnum(::google::protobuf::int32 value);

  // optional int32 hbbomb = 10;
  inline bool has_hbbomb() const;
  inline void clear_hbbomb();
  static const int kHbbombFieldNumber = 10;
  inline ::google::protobuf::int32 hbbomb() const;
  inline void set_hbbomb(::google::protobuf::int32 value);

  // repeated .progame.hongbao hblist = 11;
  inline int hblist_size() const;
  inline void clear_hblist();
  static const int kHblistFieldNumber = 11;
  inline const ::progame::hongbao& hblist(int index) const;
  inline ::progame::hongbao* mutable_hblist(int index);
  inline ::progame::hongbao* add_hblist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::hongbao >&
      hblist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::hongbao >*
      mutable_hblist();

  // repeated .progame.robhb robhblist = 12;
  inline int robhblist_size() const;
  inline void clear_robhblist();
  static const int kRobhblistFieldNumber = 12;
  inline const ::progame::robhb& robhblist(int index) const;
  inline ::progame::robhb* mutable_robhblist(int index);
  inline ::progame::robhb* add_robhblist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::robhb >&
      robhblist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::robhb >*
      mutable_robhblist();

  // repeated int32 standuser = 13;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 13;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // optional int32 maxrobotnum = 14;
  inline bool has_maxrobotnum() const;
  inline void clear_maxrobotnum();
  static const int kMaxrobotnumFieldNumber = 14;
  inline ::google::protobuf::int32 maxrobotnum() const;
  inline void set_maxrobotnum(::google::protobuf::int32 value);

  // optional int32 issyswin = 15;
  inline bool has_issyswin() const;
  inline void clear_issyswin();
  static const int kIssyswinFieldNumber = 15;
  inline ::google::protobuf::int32 issyswin() const;
  inline void set_issyswin(::google::protobuf::int32 value);

  // repeated int32 hbjettonlist = 16;
  inline int hbjettonlist_size() const;
  inline void clear_hbjettonlist();
  static const int kHbjettonlistFieldNumber = 16;
  inline ::google::protobuf::int32 hbjettonlist(int index) const;
  inline void set_hbjettonlist(int index, ::google::protobuf::int32 value);
  inline void add_hbjettonlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hbjettonlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hbjettonlist();

  // optional int32 usernum = 17;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 17;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 robotnum = 18;
  inline bool has_robotnum() const;
  inline void clear_robotnum();
  static const int kRobotnumFieldNumber = 18;
  inline ::google::protobuf::int32 robotnum() const;
  inline void set_robotnum(::google::protobuf::int32 value);

  // optional int32 maxhbnum = 19;
  inline bool has_maxhbnum() const;
  inline void clear_maxhbnum();
  static const int kMaxhbnumFieldNumber = 19;
  inline ::google::protobuf::int32 maxhbnum() const;
  inline void set_maxhbnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.slhbinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_hbuserid();
  inline void clear_has_hbuserid();
  inline void set_has_hbnickname();
  inline void clear_has_hbnickname();
  inline void set_has_hbfaceid();
  inline void clear_has_hbfaceid();
  inline void set_has_hbjetton();
  inline void clear_has_hbjetton();
  inline void set_has_hbnum();
  inline void clear_has_hbnum();
  inline void set_has_hbbomb();
  inline void clear_has_hbbomb();
  inline void set_has_maxrobotnum();
  inline void clear_has_maxrobotnum();
  inline void set_has_issyswin();
  inline void clear_has_issyswin();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_robotnum();
  inline void clear_has_robotnum();
  inline void set_has_maxhbnum();
  inline void clear_has_maxhbnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 tabletype_;
  ::std::string* hbnickname_;
  ::google::protobuf::int32 hbuserid_;
  ::google::protobuf::int32 hbjetton_;
  ::std::string* hbfaceid_;
  ::google::protobuf::int32 hbnum_;
  ::google::protobuf::int32 hbbomb_;
  ::google::protobuf::RepeatedPtrField< ::progame::hongbao > hblist_;
  ::google::protobuf::RepeatedPtrField< ::progame::robhb > robhblist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::google::protobuf::int32 maxrobotnum_;
  ::google::protobuf::int32 issyswin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hbjettonlist_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::int32 robotnum_;
  ::google::protobuf::int32 maxhbnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslhb_2eproto();
  friend void protobuf_AssignDesc_st_5fslhb_2eproto();
  friend void protobuf_ShutdownFile_st_5fslhb_2eproto();

  void InitAsDefaultInstance();
  static slhbinfo* default_instance_;
};
// -------------------------------------------------------------------

class slhbjettonrecordlist : public ::google::protobuf::Message {
 public:
  slhbjettonrecordlist();
  virtual ~slhbjettonrecordlist();

  slhbjettonrecordlist(const slhbjettonrecordlist& from);

  inline slhbjettonrecordlist& operator=(const slhbjettonrecordlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const slhbjettonrecordlist& default_instance();

  void Swap(slhbjettonrecordlist* other);

  // implements Message ----------------------------------------------

  slhbjettonrecordlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const slhbjettonrecordlist& from);
  void MergeFrom(const slhbjettonrecordlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 jetton = 1;
  inline int jetton_size() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 1;
  inline ::google::protobuf::int32 jetton(int index) const;
  inline void set_jetton(int index, ::google::protobuf::int32 value);
  inline void add_jetton(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jetton() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jetton();

  // repeated int32 boomcondition = 2;
  inline int boomcondition_size() const;
  inline void clear_boomcondition();
  static const int kBoomconditionFieldNumber = 2;
  inline ::google::protobuf::int32 boomcondition(int index) const;
  inline void set_boomcondition(int index, ::google::protobuf::int32 value);
  inline void add_boomcondition(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boomcondition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boomcondition();

  // @@protoc_insertion_point(class_scope:progame.slhbjettonrecordlist)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jetton_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boomcondition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslhb_2eproto();
  friend void protobuf_AssignDesc_st_5fslhb_2eproto();
  friend void protobuf_ShutdownFile_st_5fslhb_2eproto();

  void InitAsDefaultInstance();
  static slhbjettonrecordlist* default_instance_;
};
// -------------------------------------------------------------------

class slhbjettonrecorinfo : public ::google::protobuf::Message {
 public:
  slhbjettonrecorinfo();
  virtual ~slhbjettonrecorinfo();

  slhbjettonrecorinfo(const slhbjettonrecorinfo& from);

  inline slhbjettonrecorinfo& operator=(const slhbjettonrecorinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const slhbjettonrecorinfo& default_instance();

  void Swap(slhbjettonrecorinfo* other);

  // implements Message ----------------------------------------------

  slhbjettonrecorinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const slhbjettonrecorinfo& from);
  void MergeFrom(const slhbjettonrecorinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 jetton = 2;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 2;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional int32 boomnum = 3;
  inline bool has_boomnum() const;
  inline void clear_boomnum();
  static const int kBoomnumFieldNumber = 3;
  inline ::google::protobuf::int32 boomnum() const;
  inline void set_boomnum(::google::protobuf::int32 value);

  // optional string jifen = 4;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 4;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional string nickname = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string facename = 6;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFacenameFieldNumber = 6;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // @@protoc_insertion_point(class_scope:progame.slhbjettonrecorinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_boomnum();
  inline void clear_has_boomnum();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_facename();
  inline void clear_has_facename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 jetton_;
  ::std::string* jifen_;
  ::std::string* nickname_;
  ::std::string* facename_;
  ::google::protobuf::int32 boomnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fslhb_2eproto();
  friend void protobuf_AssignDesc_st_5fslhb_2eproto();
  friend void protobuf_ShutdownFile_st_5fslhb_2eproto();

  void InitAsDefaultInstance();
  static slhbjettonrecorinfo* default_instance_;
};
// ===================================================================


// ===================================================================

// hongbao

// optional int32 userid = 1;
inline bool hongbao::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hongbao::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hongbao::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hongbao::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 hongbao::userid() const {
  return userid_;
}
inline void hongbao::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 hbjetton = 2;
inline bool hongbao::has_hbjetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hongbao::set_has_hbjetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hongbao::clear_has_hbjetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hongbao::clear_hbjetton() {
  hbjetton_ = 0;
  clear_has_hbjetton();
}
inline ::google::protobuf::int32 hongbao::hbjetton() const {
  return hbjetton_;
}
inline void hongbao::set_hbjetton(::google::protobuf::int32 value) {
  set_has_hbjetton();
  hbjetton_ = value;
}

// optional int32 hbbomb = 3;
inline bool hongbao::has_hbbomb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hongbao::set_has_hbbomb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hongbao::clear_has_hbbomb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hongbao::clear_hbbomb() {
  hbbomb_ = 0;
  clear_has_hbbomb();
}
inline ::google::protobuf::int32 hongbao::hbbomb() const {
  return hbbomb_;
}
inline void hongbao::set_hbbomb(::google::protobuf::int32 value) {
  set_has_hbbomb();
  hbbomb_ = value;
}

// optional string unickname = 4;
inline bool hongbao::has_unickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hongbao::set_has_unickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hongbao::clear_has_unickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hongbao::clear_unickname() {
  if (unickname_ != &::google::protobuf::internal::kEmptyString) {
    unickname_->clear();
  }
  clear_has_unickname();
}
inline const ::std::string& hongbao::unickname() const {
  return *unickname_;
}
inline void hongbao::set_unickname(const ::std::string& value) {
  set_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    unickname_ = new ::std::string;
  }
  unickname_->assign(value);
}
inline void hongbao::set_unickname(const char* value) {
  set_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    unickname_ = new ::std::string;
  }
  unickname_->assign(value);
}
inline void hongbao::set_unickname(const char* value, size_t size) {
  set_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    unickname_ = new ::std::string;
  }
  unickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hongbao::mutable_unickname() {
  set_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    unickname_ = new ::std::string;
  }
  return unickname_;
}
inline ::std::string* hongbao::release_unickname() {
  clear_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unickname_;
    unickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hongbao::set_allocated_unickname(::std::string* unickname) {
  if (unickname_ != &::google::protobuf::internal::kEmptyString) {
    delete unickname_;
  }
  if (unickname) {
    set_has_unickname();
    unickname_ = unickname;
  } else {
    clear_has_unickname();
    unickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nfaceid = 5;
inline bool hongbao::has_nfaceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hongbao::set_has_nfaceid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hongbao::clear_has_nfaceid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hongbao::clear_nfaceid() {
  if (nfaceid_ != &::google::protobuf::internal::kEmptyString) {
    nfaceid_->clear();
  }
  clear_has_nfaceid();
}
inline const ::std::string& hongbao::nfaceid() const {
  return *nfaceid_;
}
inline void hongbao::set_nfaceid(const ::std::string& value) {
  set_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    nfaceid_ = new ::std::string;
  }
  nfaceid_->assign(value);
}
inline void hongbao::set_nfaceid(const char* value) {
  set_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    nfaceid_ = new ::std::string;
  }
  nfaceid_->assign(value);
}
inline void hongbao::set_nfaceid(const char* value, size_t size) {
  set_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    nfaceid_ = new ::std::string;
  }
  nfaceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hongbao::mutable_nfaceid() {
  set_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    nfaceid_ = new ::std::string;
  }
  return nfaceid_;
}
inline ::std::string* hongbao::release_nfaceid() {
  clear_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nfaceid_;
    nfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hongbao::set_allocated_nfaceid(::std::string* nfaceid) {
  if (nfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete nfaceid_;
  }
  if (nfaceid) {
    set_has_nfaceid();
    nfaceid_ = nfaceid;
  } else {
    clear_has_nfaceid();
    nfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// robhb

// optional int32 userid = 1;
inline bool robhb::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void robhb::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void robhb::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void robhb::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 robhb::userid() const {
  return userid_;
}
inline void robhb::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string unickname = 2;
inline bool robhb::has_unickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void robhb::set_has_unickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void robhb::clear_has_unickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void robhb::clear_unickname() {
  if (unickname_ != &::google::protobuf::internal::kEmptyString) {
    unickname_->clear();
  }
  clear_has_unickname();
}
inline const ::std::string& robhb::unickname() const {
  return *unickname_;
}
inline void robhb::set_unickname(const ::std::string& value) {
  set_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    unickname_ = new ::std::string;
  }
  unickname_->assign(value);
}
inline void robhb::set_unickname(const char* value) {
  set_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    unickname_ = new ::std::string;
  }
  unickname_->assign(value);
}
inline void robhb::set_unickname(const char* value, size_t size) {
  set_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    unickname_ = new ::std::string;
  }
  unickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* robhb::mutable_unickname() {
  set_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    unickname_ = new ::std::string;
  }
  return unickname_;
}
inline ::std::string* robhb::release_unickname() {
  clear_has_unickname();
  if (unickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unickname_;
    unickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void robhb::set_allocated_unickname(::std::string* unickname) {
  if (unickname_ != &::google::protobuf::internal::kEmptyString) {
    delete unickname_;
  }
  if (unickname) {
    set_has_unickname();
    unickname_ = unickname;
  } else {
    clear_has_unickname();
    unickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nfaceid = 3;
inline bool robhb::has_nfaceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void robhb::set_has_nfaceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void robhb::clear_has_nfaceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void robhb::clear_nfaceid() {
  if (nfaceid_ != &::google::protobuf::internal::kEmptyString) {
    nfaceid_->clear();
  }
  clear_has_nfaceid();
}
inline const ::std::string& robhb::nfaceid() const {
  return *nfaceid_;
}
inline void robhb::set_nfaceid(const ::std::string& value) {
  set_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    nfaceid_ = new ::std::string;
  }
  nfaceid_->assign(value);
}
inline void robhb::set_nfaceid(const char* value) {
  set_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    nfaceid_ = new ::std::string;
  }
  nfaceid_->assign(value);
}
inline void robhb::set_nfaceid(const char* value, size_t size) {
  set_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    nfaceid_ = new ::std::string;
  }
  nfaceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* robhb::mutable_nfaceid() {
  set_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    nfaceid_ = new ::std::string;
  }
  return nfaceid_;
}
inline ::std::string* robhb::release_nfaceid() {
  clear_has_nfaceid();
  if (nfaceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nfaceid_;
    nfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void robhb::set_allocated_nfaceid(::std::string* nfaceid) {
  if (nfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete nfaceid_;
  }
  if (nfaceid) {
    set_has_nfaceid();
    nfaceid_ = nfaceid;
  } else {
    clear_has_nfaceid();
    nfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 hbjetton = 4;
inline bool robhb::has_hbjetton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void robhb::set_has_hbjetton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void robhb::clear_has_hbjetton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void robhb::clear_hbjetton() {
  hbjetton_ = 0;
  clear_has_hbjetton();
}
inline ::google::protobuf::int32 robhb::hbjetton() const {
  return hbjetton_;
}
inline void robhb::set_hbjetton(::google::protobuf::int32 value) {
  set_has_hbjetton();
  hbjetton_ = value;
}

// optional int32 isbomb = 5;
inline bool robhb::has_isbomb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void robhb::set_has_isbomb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void robhb::clear_has_isbomb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void robhb::clear_isbomb() {
  isbomb_ = 0;
  clear_has_isbomb();
}
inline ::google::protobuf::int32 robhb::isbomb() const {
  return isbomb_;
}
inline void robhb::set_isbomb(::google::protobuf::int32 value) {
  set_has_isbomb();
  isbomb_ = value;
}

// optional int32 winjetton = 6;
inline bool robhb::has_winjetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void robhb::set_has_winjetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void robhb::clear_has_winjetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void robhb::clear_winjetton() {
  winjetton_ = 0;
  clear_has_winjetton();
}
inline ::google::protobuf::int32 robhb::winjetton() const {
  return winjetton_;
}
inline void robhb::set_winjetton(::google::protobuf::int32 value) {
  set_has_winjetton();
  winjetton_ = value;
}

// optional int32 number = 7;
inline bool robhb::has_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void robhb::set_has_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void robhb::clear_has_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void robhb::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 robhb::number() const {
  return number_;
}
inline void robhb::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// slhbinfo

// optional int32 tableid = 1;
inline bool slhbinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void slhbinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void slhbinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void slhbinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 slhbinfo::tableid() const {
  return tableid_;
}
inline void slhbinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 state = 2;
inline bool slhbinfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void slhbinfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void slhbinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void slhbinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 slhbinfo::state() const {
  return state_;
}
inline void slhbinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 3;
inline bool slhbinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void slhbinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void slhbinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void slhbinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 slhbinfo::timemark() const {
  return timemark_;
}
inline void slhbinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// optional int32 tabletype = 4;
inline bool slhbinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void slhbinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void slhbinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void slhbinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 slhbinfo::tabletype() const {
  return tabletype_;
}
inline void slhbinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 hbuserid = 5;
inline bool slhbinfo::has_hbuserid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void slhbinfo::set_has_hbuserid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void slhbinfo::clear_has_hbuserid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void slhbinfo::clear_hbuserid() {
  hbuserid_ = 0;
  clear_has_hbuserid();
}
inline ::google::protobuf::int32 slhbinfo::hbuserid() const {
  return hbuserid_;
}
inline void slhbinfo::set_hbuserid(::google::protobuf::int32 value) {
  set_has_hbuserid();
  hbuserid_ = value;
}

// optional string hbnickname = 6;
inline bool slhbinfo::has_hbnickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void slhbinfo::set_has_hbnickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void slhbinfo::clear_has_hbnickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void slhbinfo::clear_hbnickname() {
  if (hbnickname_ != &::google::protobuf::internal::kEmptyString) {
    hbnickname_->clear();
  }
  clear_has_hbnickname();
}
inline const ::std::string& slhbinfo::hbnickname() const {
  return *hbnickname_;
}
inline void slhbinfo::set_hbnickname(const ::std::string& value) {
  set_has_hbnickname();
  if (hbnickname_ == &::google::protobuf::internal::kEmptyString) {
    hbnickname_ = new ::std::string;
  }
  hbnickname_->assign(value);
}
inline void slhbinfo::set_hbnickname(const char* value) {
  set_has_hbnickname();
  if (hbnickname_ == &::google::protobuf::internal::kEmptyString) {
    hbnickname_ = new ::std::string;
  }
  hbnickname_->assign(value);
}
inline void slhbinfo::set_hbnickname(const char* value, size_t size) {
  set_has_hbnickname();
  if (hbnickname_ == &::google::protobuf::internal::kEmptyString) {
    hbnickname_ = new ::std::string;
  }
  hbnickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* slhbinfo::mutable_hbnickname() {
  set_has_hbnickname();
  if (hbnickname_ == &::google::protobuf::internal::kEmptyString) {
    hbnickname_ = new ::std::string;
  }
  return hbnickname_;
}
inline ::std::string* slhbinfo::release_hbnickname() {
  clear_has_hbnickname();
  if (hbnickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hbnickname_;
    hbnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void slhbinfo::set_allocated_hbnickname(::std::string* hbnickname) {
  if (hbnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete hbnickname_;
  }
  if (hbnickname) {
    set_has_hbnickname();
    hbnickname_ = hbnickname;
  } else {
    clear_has_hbnickname();
    hbnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hbfaceid = 7;
inline bool slhbinfo::has_hbfaceid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void slhbinfo::set_has_hbfaceid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void slhbinfo::clear_has_hbfaceid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void slhbinfo::clear_hbfaceid() {
  if (hbfaceid_ != &::google::protobuf::internal::kEmptyString) {
    hbfaceid_->clear();
  }
  clear_has_hbfaceid();
}
inline const ::std::string& slhbinfo::hbfaceid() const {
  return *hbfaceid_;
}
inline void slhbinfo::set_hbfaceid(const ::std::string& value) {
  set_has_hbfaceid();
  if (hbfaceid_ == &::google::protobuf::internal::kEmptyString) {
    hbfaceid_ = new ::std::string;
  }
  hbfaceid_->assign(value);
}
inline void slhbinfo::set_hbfaceid(const char* value) {
  set_has_hbfaceid();
  if (hbfaceid_ == &::google::protobuf::internal::kEmptyString) {
    hbfaceid_ = new ::std::string;
  }
  hbfaceid_->assign(value);
}
inline void slhbinfo::set_hbfaceid(const char* value, size_t size) {
  set_has_hbfaceid();
  if (hbfaceid_ == &::google::protobuf::internal::kEmptyString) {
    hbfaceid_ = new ::std::string;
  }
  hbfaceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* slhbinfo::mutable_hbfaceid() {
  set_has_hbfaceid();
  if (hbfaceid_ == &::google::protobuf::internal::kEmptyString) {
    hbfaceid_ = new ::std::string;
  }
  return hbfaceid_;
}
inline ::std::string* slhbinfo::release_hbfaceid() {
  clear_has_hbfaceid();
  if (hbfaceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hbfaceid_;
    hbfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void slhbinfo::set_allocated_hbfaceid(::std::string* hbfaceid) {
  if (hbfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete hbfaceid_;
  }
  if (hbfaceid) {
    set_has_hbfaceid();
    hbfaceid_ = hbfaceid;
  } else {
    clear_has_hbfaceid();
    hbfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 hbjetton = 8;
inline bool slhbinfo::has_hbjetton() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void slhbinfo::set_has_hbjetton() {
  _has_bits_[0] |= 0x00000080u;
}
inline void slhbinfo::clear_has_hbjetton() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void slhbinfo::clear_hbjetton() {
  hbjetton_ = 0;
  clear_has_hbjetton();
}
inline ::google::protobuf::int32 slhbinfo::hbjetton() const {
  return hbjetton_;
}
inline void slhbinfo::set_hbjetton(::google::protobuf::int32 value) {
  set_has_hbjetton();
  hbjetton_ = value;
}

// optional int32 hbnum = 9;
inline bool slhbinfo::has_hbnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void slhbinfo::set_has_hbnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void slhbinfo::clear_has_hbnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void slhbinfo::clear_hbnum() {
  hbnum_ = 0;
  clear_has_hbnum();
}
inline ::google::protobuf::int32 slhbinfo::hbnum() const {
  return hbnum_;
}
inline void slhbinfo::set_hbnum(::google::protobuf::int32 value) {
  set_has_hbnum();
  hbnum_ = value;
}

// optional int32 hbbomb = 10;
inline bool slhbinfo::has_hbbomb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void slhbinfo::set_has_hbbomb() {
  _has_bits_[0] |= 0x00000200u;
}
inline void slhbinfo::clear_has_hbbomb() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void slhbinfo::clear_hbbomb() {
  hbbomb_ = 0;
  clear_has_hbbomb();
}
inline ::google::protobuf::int32 slhbinfo::hbbomb() const {
  return hbbomb_;
}
inline void slhbinfo::set_hbbomb(::google::protobuf::int32 value) {
  set_has_hbbomb();
  hbbomb_ = value;
}

// repeated .progame.hongbao hblist = 11;
inline int slhbinfo::hblist_size() const {
  return hblist_.size();
}
inline void slhbinfo::clear_hblist() {
  hblist_.Clear();
}
inline const ::progame::hongbao& slhbinfo::hblist(int index) const {
  return hblist_.Get(index);
}
inline ::progame::hongbao* slhbinfo::mutable_hblist(int index) {
  return hblist_.Mutable(index);
}
inline ::progame::hongbao* slhbinfo::add_hblist() {
  return hblist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::hongbao >&
slhbinfo::hblist() const {
  return hblist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::hongbao >*
slhbinfo::mutable_hblist() {
  return &hblist_;
}

// repeated .progame.robhb robhblist = 12;
inline int slhbinfo::robhblist_size() const {
  return robhblist_.size();
}
inline void slhbinfo::clear_robhblist() {
  robhblist_.Clear();
}
inline const ::progame::robhb& slhbinfo::robhblist(int index) const {
  return robhblist_.Get(index);
}
inline ::progame::robhb* slhbinfo::mutable_robhblist(int index) {
  return robhblist_.Mutable(index);
}
inline ::progame::robhb* slhbinfo::add_robhblist() {
  return robhblist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::robhb >&
slhbinfo::robhblist() const {
  return robhblist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::robhb >*
slhbinfo::mutable_robhblist() {
  return &robhblist_;
}

// repeated int32 standuser = 13;
inline int slhbinfo::standuser_size() const {
  return standuser_.size();
}
inline void slhbinfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 slhbinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void slhbinfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void slhbinfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
slhbinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
slhbinfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 maxrobotnum = 14;
inline bool slhbinfo::has_maxrobotnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void slhbinfo::set_has_maxrobotnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void slhbinfo::clear_has_maxrobotnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void slhbinfo::clear_maxrobotnum() {
  maxrobotnum_ = 0;
  clear_has_maxrobotnum();
}
inline ::google::protobuf::int32 slhbinfo::maxrobotnum() const {
  return maxrobotnum_;
}
inline void slhbinfo::set_maxrobotnum(::google::protobuf::int32 value) {
  set_has_maxrobotnum();
  maxrobotnum_ = value;
}

// optional int32 issyswin = 15;
inline bool slhbinfo::has_issyswin() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void slhbinfo::set_has_issyswin() {
  _has_bits_[0] |= 0x00004000u;
}
inline void slhbinfo::clear_has_issyswin() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void slhbinfo::clear_issyswin() {
  issyswin_ = 0;
  clear_has_issyswin();
}
inline ::google::protobuf::int32 slhbinfo::issyswin() const {
  return issyswin_;
}
inline void slhbinfo::set_issyswin(::google::protobuf::int32 value) {
  set_has_issyswin();
  issyswin_ = value;
}

// repeated int32 hbjettonlist = 16;
inline int slhbinfo::hbjettonlist_size() const {
  return hbjettonlist_.size();
}
inline void slhbinfo::clear_hbjettonlist() {
  hbjettonlist_.Clear();
}
inline ::google::protobuf::int32 slhbinfo::hbjettonlist(int index) const {
  return hbjettonlist_.Get(index);
}
inline void slhbinfo::set_hbjettonlist(int index, ::google::protobuf::int32 value) {
  hbjettonlist_.Set(index, value);
}
inline void slhbinfo::add_hbjettonlist(::google::protobuf::int32 value) {
  hbjettonlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
slhbinfo::hbjettonlist() const {
  return hbjettonlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
slhbinfo::mutable_hbjettonlist() {
  return &hbjettonlist_;
}

// optional int32 usernum = 17;
inline bool slhbinfo::has_usernum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void slhbinfo::set_has_usernum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void slhbinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void slhbinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 slhbinfo::usernum() const {
  return usernum_;
}
inline void slhbinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 robotnum = 18;
inline bool slhbinfo::has_robotnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void slhbinfo::set_has_robotnum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void slhbinfo::clear_has_robotnum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void slhbinfo::clear_robotnum() {
  robotnum_ = 0;
  clear_has_robotnum();
}
inline ::google::protobuf::int32 slhbinfo::robotnum() const {
  return robotnum_;
}
inline void slhbinfo::set_robotnum(::google::protobuf::int32 value) {
  set_has_robotnum();
  robotnum_ = value;
}

// optional int32 maxhbnum = 19;
inline bool slhbinfo::has_maxhbnum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void slhbinfo::set_has_maxhbnum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void slhbinfo::clear_has_maxhbnum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void slhbinfo::clear_maxhbnum() {
  maxhbnum_ = 0;
  clear_has_maxhbnum();
}
inline ::google::protobuf::int32 slhbinfo::maxhbnum() const {
  return maxhbnum_;
}
inline void slhbinfo::set_maxhbnum(::google::protobuf::int32 value) {
  set_has_maxhbnum();
  maxhbnum_ = value;
}

// -------------------------------------------------------------------

// slhbjettonrecordlist

// repeated int32 jetton = 1;
inline int slhbjettonrecordlist::jetton_size() const {
  return jetton_.size();
}
inline void slhbjettonrecordlist::clear_jetton() {
  jetton_.Clear();
}
inline ::google::protobuf::int32 slhbjettonrecordlist::jetton(int index) const {
  return jetton_.Get(index);
}
inline void slhbjettonrecordlist::set_jetton(int index, ::google::protobuf::int32 value) {
  jetton_.Set(index, value);
}
inline void slhbjettonrecordlist::add_jetton(::google::protobuf::int32 value) {
  jetton_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
slhbjettonrecordlist::jetton() const {
  return jetton_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
slhbjettonrecordlist::mutable_jetton() {
  return &jetton_;
}

// repeated int32 boomcondition = 2;
inline int slhbjettonrecordlist::boomcondition_size() const {
  return boomcondition_.size();
}
inline void slhbjettonrecordlist::clear_boomcondition() {
  boomcondition_.Clear();
}
inline ::google::protobuf::int32 slhbjettonrecordlist::boomcondition(int index) const {
  return boomcondition_.Get(index);
}
inline void slhbjettonrecordlist::set_boomcondition(int index, ::google::protobuf::int32 value) {
  boomcondition_.Set(index, value);
}
inline void slhbjettonrecordlist::add_boomcondition(::google::protobuf::int32 value) {
  boomcondition_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
slhbjettonrecordlist::boomcondition() const {
  return boomcondition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
slhbjettonrecordlist::mutable_boomcondition() {
  return &boomcondition_;
}

// -------------------------------------------------------------------

// slhbjettonrecorinfo

// optional int32 userid = 1;
inline bool slhbjettonrecorinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void slhbjettonrecorinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void slhbjettonrecorinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void slhbjettonrecorinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 slhbjettonrecorinfo::userid() const {
  return userid_;
}
inline void slhbjettonrecorinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 jetton = 2;
inline bool slhbjettonrecorinfo::has_jetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void slhbjettonrecorinfo::set_has_jetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void slhbjettonrecorinfo::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void slhbjettonrecorinfo::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 slhbjettonrecorinfo::jetton() const {
  return jetton_;
}
inline void slhbjettonrecorinfo::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional int32 boomnum = 3;
inline bool slhbjettonrecorinfo::has_boomnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void slhbjettonrecorinfo::set_has_boomnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void slhbjettonrecorinfo::clear_has_boomnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void slhbjettonrecorinfo::clear_boomnum() {
  boomnum_ = 0;
  clear_has_boomnum();
}
inline ::google::protobuf::int32 slhbjettonrecorinfo::boomnum() const {
  return boomnum_;
}
inline void slhbjettonrecorinfo::set_boomnum(::google::protobuf::int32 value) {
  set_has_boomnum();
  boomnum_ = value;
}

// optional string jifen = 4;
inline bool slhbjettonrecorinfo::has_jifen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void slhbjettonrecorinfo::set_has_jifen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void slhbjettonrecorinfo::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void slhbjettonrecorinfo::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& slhbjettonrecorinfo::jifen() const {
  return *jifen_;
}
inline void slhbjettonrecorinfo::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void slhbjettonrecorinfo::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void slhbjettonrecorinfo::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* slhbjettonrecorinfo::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* slhbjettonrecorinfo::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void slhbjettonrecorinfo::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 5;
inline bool slhbjettonrecorinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void slhbjettonrecorinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void slhbjettonrecorinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void slhbjettonrecorinfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& slhbjettonrecorinfo::nickname() const {
  return *nickname_;
}
inline void slhbjettonrecorinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void slhbjettonrecorinfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void slhbjettonrecorinfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* slhbjettonrecorinfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* slhbjettonrecorinfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void slhbjettonrecorinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string facename = 6;
inline bool slhbjettonrecorinfo::has_facename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void slhbjettonrecorinfo::set_has_facename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void slhbjettonrecorinfo::clear_has_facename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void slhbjettonrecorinfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& slhbjettonrecorinfo::facename() const {
  return *facename_;
}
inline void slhbjettonrecorinfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void slhbjettonrecorinfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void slhbjettonrecorinfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* slhbjettonrecorinfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* slhbjettonrecorinfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void slhbjettonrecorinfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fslhb_2eproto__INCLUDED
