// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_sscai.proto

#ifndef PROTOBUF_st_5fsscai_2eproto__INCLUDED
#define PROTOBUF_st_5fsscai_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fsscai_2eproto();
void protobuf_AssignDesc_st_5fsscai_2eproto();
void protobuf_ShutdownFile_st_5fsscai_2eproto();

class sscaijetton;
class sscaiplay;
class sscaiinfo;
class sscaibiginfo;

// ===================================================================

class sscaijetton : public ::google::protobuf::Message {
 public:
  sscaijetton();
  virtual ~sscaijetton();

  sscaijetton(const sscaijetton& from);

  inline sscaijetton& operator=(const sscaijetton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sscaijetton& default_instance();

  void Swap(sscaijetton* other);

  // implements Message ----------------------------------------------

  sscaijetton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sscaijetton& from);
  void MergeFrom(const sscaijetton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pourtype = 2;
  inline bool has_pourtype() const;
  inline void clear_pourtype();
  static const int kPourtypeFieldNumber = 2;
  inline ::google::protobuf::int32 pourtype() const;
  inline void set_pourtype(::google::protobuf::int32 value);

  // optional int32 jetton = 3;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 3;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sscaijetton)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pourtype();
  inline void clear_has_pourtype();
  inline void set_has_jetton();
  inline void clear_has_jetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourtype_;
  ::google::protobuf::int32 jetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsscai_2eproto();
  friend void protobuf_AssignDesc_st_5fsscai_2eproto();
  friend void protobuf_ShutdownFile_st_5fsscai_2eproto();

  void InitAsDefaultInstance();
  static sscaijetton* default_instance_;
};
// -------------------------------------------------------------------

class sscaiplay : public ::google::protobuf::Message {
 public:
  sscaiplay();
  virtual ~sscaiplay();

  sscaiplay(const sscaiplay& from);

  inline sscaiplay& operator=(const sscaiplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sscaiplay& default_instance();

  void Swap(sscaiplay* other);

  // implements Message ----------------------------------------------

  sscaiplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sscaiplay& from);
  void MergeFrom(const sscaiplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playid = 1;
  inline bool has_playid() const;
  inline void clear_playid();
  static const int kPlayidFieldNumber = 1;
  inline ::google::protobuf::int32 playid() const;
  inline void set_playid(::google::protobuf::int32 value);

  // repeated int32 cardlist = 2;
  inline int cardlist_size() const;
  inline void clear_cardlist();
  static const int kCardlistFieldNumber = 2;
  inline ::google::protobuf::int32 cardlist(int index) const;
  inline void set_cardlist(int index, ::google::protobuf::int32 value);
  inline void add_cardlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cardlist();

  // optional int32 cardtype = 3;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardtypeFieldNumber = 3;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sscaiplay)
 private:
  inline void set_has_playid();
  inline void clear_has_playid();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardlist_;
  ::google::protobuf::int32 playid_;
  ::google::protobuf::int32 cardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsscai_2eproto();
  friend void protobuf_AssignDesc_st_5fsscai_2eproto();
  friend void protobuf_ShutdownFile_st_5fsscai_2eproto();

  void InitAsDefaultInstance();
  static sscaiplay* default_instance_;
};
// -------------------------------------------------------------------

class sscaiinfo : public ::google::protobuf::Message {
 public:
  sscaiinfo();
  virtual ~sscaiinfo();

  sscaiinfo(const sscaiinfo& from);

  inline sscaiinfo& operator=(const sscaiinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sscaiinfo& default_instance();

  void Swap(sscaiinfo* other);

  // implements Message ----------------------------------------------

  sscaiinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sscaiinfo& from);
  void MergeFrom(const sscaiinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 2;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 2;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 minjetton = 3;
  inline bool has_minjetton() const;
  inline void clear_minjetton();
  static const int kMinjettonFieldNumber = 3;
  inline ::google::protobuf::int32 minjetton() const;
  inline void set_minjetton(::google::protobuf::int32 value);

  // optional int32 maxjetton = 4;
  inline bool has_maxjetton() const;
  inline void clear_maxjetton();
  static const int kMaxjettonFieldNumber = 4;
  inline ::google::protobuf::int32 maxjetton() const;
  inline void set_maxjetton(::google::protobuf::int32 value);

  // optional int32 winid = 5;
  inline bool has_winid() const;
  inline void clear_winid();
  static const int kWinidFieldNumber = 5;
  inline ::google::protobuf::int32 winid() const;
  inline void set_winid(::google::protobuf::int32 value);

  // optional int32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 7;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 7;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated int32 history = 8;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 8;
  inline ::google::protobuf::int32 history(int index) const;
  inline void set_history(int index, ::google::protobuf::int32 value);
  inline void add_history(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      history() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_history();

  // repeated int32 useridlist = 10;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 10;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // optional int32 usernum = 11;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 11;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 bankerid = 12;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankeridFieldNumber = 12;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // optional int32 bankjetton = 13;
  inline bool has_bankjetton() const;
  inline void clear_bankjetton();
  static const int kBankjettonFieldNumber = 13;
  inline ::google::protobuf::int32 bankjetton() const;
  inline void set_bankjetton(::google::protobuf::int32 value);

  // optional int32 maxuser = 14;
  inline bool has_maxuser() const;
  inline void clear_maxuser();
  static const int kMaxuserFieldNumber = 14;
  inline ::google::protobuf::int32 maxuser() const;
  inline void set_maxuser(::google::protobuf::int32 value);

  // optional string bankername = 15;
  inline bool has_bankername() const;
  inline void clear_bankername();
  static const int kBankernameFieldNumber = 15;
  inline const ::std::string& bankername() const;
  inline void set_bankername(const ::std::string& value);
  inline void set_bankername(const char* value);
  inline void set_bankername(const char* value, size_t size);
  inline ::std::string* mutable_bankername();
  inline ::std::string* release_bankername();
  inline void set_allocated_bankername(::std::string* bankername);

  // optional string bankerfaceid = 16;
  inline bool has_bankerfaceid() const;
  inline void clear_bankerfaceid();
  static const int kBankerfaceidFieldNumber = 16;
  inline const ::std::string& bankerfaceid() const;
  inline void set_bankerfaceid(const ::std::string& value);
  inline void set_bankerfaceid(const char* value);
  inline void set_bankerfaceid(const char* value, size_t size);
  inline ::std::string* mutable_bankerfaceid();
  inline ::std::string* release_bankerfaceid();
  inline void set_allocated_bankerfaceid(::std::string* bankerfaceid);

  // optional string awardpool = 17;
  inline bool has_awardpool() const;
  inline void clear_awardpool();
  static const int kAwardpoolFieldNumber = 17;
  inline const ::std::string& awardpool() const;
  inline void set_awardpool(const ::std::string& value);
  inline void set_awardpool(const char* value);
  inline void set_awardpool(const char* value, size_t size);
  inline ::std::string* mutable_awardpool();
  inline ::std::string* release_awardpool();
  inline void set_allocated_awardpool(::std::string* awardpool);

  // optional int32 applydrop = 20;
  inline bool has_applydrop() const;
  inline void clear_applydrop();
  static const int kApplydropFieldNumber = 20;
  inline ::google::protobuf::int32 applydrop() const;
  inline void set_applydrop(::google::protobuf::int32 value);

  // optional int32 lastbigtime = 21;
  inline bool has_lastbigtime() const;
  inline void clear_lastbigtime();
  static const int kLastbigtimeFieldNumber = 21;
  inline ::google::protobuf::int32 lastbigtime() const;
  inline void set_lastbigtime(::google::protobuf::int32 value);

  // optional int32 lastwinid = 22;
  inline bool has_lastwinid() const;
  inline void clear_lastwinid();
  static const int kLastwinidFieldNumber = 22;
  inline ::google::protobuf::int32 lastwinid() const;
  inline void set_lastwinid(::google::protobuf::int32 value);

  // optional string lastwinnick = 23;
  inline bool has_lastwinnick() const;
  inline void clear_lastwinnick();
  static const int kLastwinnickFieldNumber = 23;
  inline const ::std::string& lastwinnick() const;
  inline void set_lastwinnick(const ::std::string& value);
  inline void set_lastwinnick(const char* value);
  inline void set_lastwinnick(const char* value, size_t size);
  inline ::std::string* mutable_lastwinnick();
  inline ::std::string* release_lastwinnick();
  inline void set_allocated_lastwinnick(::std::string* lastwinnick);

  // optional string lastwinfaceid = 24;
  inline bool has_lastwinfaceid() const;
  inline void clear_lastwinfaceid();
  static const int kLastwinfaceidFieldNumber = 24;
  inline const ::std::string& lastwinfaceid() const;
  inline void set_lastwinfaceid(const ::std::string& value);
  inline void set_lastwinfaceid(const char* value);
  inline void set_lastwinfaceid(const char* value, size_t size);
  inline ::std::string* mutable_lastwinfaceid();
  inline ::std::string* release_lastwinfaceid();
  inline void set_allocated_lastwinfaceid(::std::string* lastwinfaceid);

  // optional int32 lastwinnum = 25;
  inline bool has_lastwinnum() const;
  inline void clear_lastwinnum();
  static const int kLastwinnumFieldNumber = 25;
  inline ::google::protobuf::int32 lastwinnum() const;
  inline void set_lastwinnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sscaiinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_minjetton();
  inline void clear_has_minjetton();
  inline void set_has_maxjetton();
  inline void clear_has_maxjetton();
  inline void set_has_winid();
  inline void clear_has_winid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_bankjetton();
  inline void clear_has_bankjetton();
  inline void set_has_maxuser();
  inline void clear_has_maxuser();
  inline void set_has_bankername();
  inline void clear_has_bankername();
  inline void set_has_bankerfaceid();
  inline void clear_has_bankerfaceid();
  inline void set_has_awardpool();
  inline void clear_has_awardpool();
  inline void set_has_applydrop();
  inline void clear_has_applydrop();
  inline void set_has_lastbigtime();
  inline void clear_has_lastbigtime();
  inline void set_has_lastwinid();
  inline void clear_has_lastwinid();
  inline void set_has_lastwinnick();
  inline void clear_has_lastwinnick();
  inline void set_has_lastwinfaceid();
  inline void clear_has_lastwinfaceid();
  inline void set_has_lastwinnum();
  inline void clear_has_lastwinnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 minjetton_;
  ::google::protobuf::int32 maxjetton_;
  ::google::protobuf::int32 winid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > history_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::int32 bankjetton_;
  ::std::string* bankername_;
  ::std::string* bankerfaceid_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::int32 applydrop_;
  ::std::string* awardpool_;
  ::google::protobuf::int32 lastbigtime_;
  ::google::protobuf::int32 lastwinid_;
  ::std::string* lastwinnick_;
  ::std::string* lastwinfaceid_;
  ::google::protobuf::int32 lastwinnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsscai_2eproto();
  friend void protobuf_AssignDesc_st_5fsscai_2eproto();
  friend void protobuf_ShutdownFile_st_5fsscai_2eproto();

  void InitAsDefaultInstance();
  static sscaiinfo* default_instance_;
};
// -------------------------------------------------------------------

class sscaibiginfo : public ::google::protobuf::Message {
 public:
  sscaibiginfo();
  virtual ~sscaibiginfo();

  sscaibiginfo(const sscaibiginfo& from);

  inline sscaibiginfo& operator=(const sscaibiginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sscaibiginfo& default_instance();

  void Swap(sscaibiginfo* other);

  // implements Message ----------------------------------------------

  sscaibiginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sscaibiginfo& from);
  void MergeFrom(const sscaibiginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 timemark = 2;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 2;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // optional int32 winnum = 3;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 3;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string faceid = 6;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 6;
  inline const ::std::string& faceid() const;
  inline void set_faceid(const ::std::string& value);
  inline void set_faceid(const char* value);
  inline void set_faceid(const char* value, size_t size);
  inline ::std::string* mutable_faceid();
  inline ::std::string* release_faceid();
  inline void set_allocated_faceid(::std::string* faceid);

  // @@protoc_insertion_point(class_scope:progame.sscaibiginfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_faceid();
  inline void clear_has_faceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 timemark_;
  ::std::string* nickname_;
  ::std::string* faceid_;
  ::google::protobuf::int32 winnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsscai_2eproto();
  friend void protobuf_AssignDesc_st_5fsscai_2eproto();
  friend void protobuf_ShutdownFile_st_5fsscai_2eproto();

  void InitAsDefaultInstance();
  static sscaibiginfo* default_instance_;
};
// ===================================================================


// ===================================================================

// sscaijetton

// optional int32 userid = 1;
inline bool sscaijetton::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sscaijetton::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sscaijetton::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sscaijetton::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 sscaijetton::userid() const {
  return userid_;
}
inline void sscaijetton::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pourtype = 2;
inline bool sscaijetton::has_pourtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sscaijetton::set_has_pourtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sscaijetton::clear_has_pourtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sscaijetton::clear_pourtype() {
  pourtype_ = 0;
  clear_has_pourtype();
}
inline ::google::protobuf::int32 sscaijetton::pourtype() const {
  return pourtype_;
}
inline void sscaijetton::set_pourtype(::google::protobuf::int32 value) {
  set_has_pourtype();
  pourtype_ = value;
}

// optional int32 jetton = 3;
inline bool sscaijetton::has_jetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sscaijetton::set_has_jetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sscaijetton::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sscaijetton::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 sscaijetton::jetton() const {
  return jetton_;
}
inline void sscaijetton::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// -------------------------------------------------------------------

// sscaiplay

// optional int32 playid = 1;
inline bool sscaiplay::has_playid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sscaiplay::set_has_playid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sscaiplay::clear_has_playid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sscaiplay::clear_playid() {
  playid_ = 0;
  clear_has_playid();
}
inline ::google::protobuf::int32 sscaiplay::playid() const {
  return playid_;
}
inline void sscaiplay::set_playid(::google::protobuf::int32 value) {
  set_has_playid();
  playid_ = value;
}

// repeated int32 cardlist = 2;
inline int sscaiplay::cardlist_size() const {
  return cardlist_.size();
}
inline void sscaiplay::clear_cardlist() {
  cardlist_.Clear();
}
inline ::google::protobuf::int32 sscaiplay::cardlist(int index) const {
  return cardlist_.Get(index);
}
inline void sscaiplay::set_cardlist(int index, ::google::protobuf::int32 value) {
  cardlist_.Set(index, value);
}
inline void sscaiplay::add_cardlist(::google::protobuf::int32 value) {
  cardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sscaiplay::cardlist() const {
  return cardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sscaiplay::mutable_cardlist() {
  return &cardlist_;
}

// optional int32 cardtype = 3;
inline bool sscaiplay::has_cardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sscaiplay::set_has_cardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sscaiplay::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sscaiplay::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 sscaiplay::cardtype() const {
  return cardtype_;
}
inline void sscaiplay::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// -------------------------------------------------------------------

// sscaiinfo

// optional int32 tableid = 1;
inline bool sscaiinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sscaiinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sscaiinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sscaiinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 sscaiinfo::tableid() const {
  return tableid_;
}
inline void sscaiinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tabletype = 2;
inline bool sscaiinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sscaiinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sscaiinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sscaiinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 sscaiinfo::tabletype() const {
  return tabletype_;
}
inline void sscaiinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 minjetton = 3;
inline bool sscaiinfo::has_minjetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sscaiinfo::set_has_minjetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sscaiinfo::clear_has_minjetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sscaiinfo::clear_minjetton() {
  minjetton_ = 0;
  clear_has_minjetton();
}
inline ::google::protobuf::int32 sscaiinfo::minjetton() const {
  return minjetton_;
}
inline void sscaiinfo::set_minjetton(::google::protobuf::int32 value) {
  set_has_minjetton();
  minjetton_ = value;
}

// optional int32 maxjetton = 4;
inline bool sscaiinfo::has_maxjetton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sscaiinfo::set_has_maxjetton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sscaiinfo::clear_has_maxjetton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sscaiinfo::clear_maxjetton() {
  maxjetton_ = 0;
  clear_has_maxjetton();
}
inline ::google::protobuf::int32 sscaiinfo::maxjetton() const {
  return maxjetton_;
}
inline void sscaiinfo::set_maxjetton(::google::protobuf::int32 value) {
  set_has_maxjetton();
  maxjetton_ = value;
}

// optional int32 winid = 5;
inline bool sscaiinfo::has_winid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sscaiinfo::set_has_winid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sscaiinfo::clear_has_winid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sscaiinfo::clear_winid() {
  winid_ = 0;
  clear_has_winid();
}
inline ::google::protobuf::int32 sscaiinfo::winid() const {
  return winid_;
}
inline void sscaiinfo::set_winid(::google::protobuf::int32 value) {
  set_has_winid();
  winid_ = value;
}

// optional int32 state = 6;
inline bool sscaiinfo::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sscaiinfo::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sscaiinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sscaiinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 sscaiinfo::state() const {
  return state_;
}
inline void sscaiinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 7;
inline bool sscaiinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sscaiinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sscaiinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sscaiinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 sscaiinfo::timemark() const {
  return timemark_;
}
inline void sscaiinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated int32 history = 8;
inline int sscaiinfo::history_size() const {
  return history_.size();
}
inline void sscaiinfo::clear_history() {
  history_.Clear();
}
inline ::google::protobuf::int32 sscaiinfo::history(int index) const {
  return history_.Get(index);
}
inline void sscaiinfo::set_history(int index, ::google::protobuf::int32 value) {
  history_.Set(index, value);
}
inline void sscaiinfo::add_history(::google::protobuf::int32 value) {
  history_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sscaiinfo::history() const {
  return history_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sscaiinfo::mutable_history() {
  return &history_;
}

// repeated int32 useridlist = 10;
inline int sscaiinfo::useridlist_size() const {
  return useridlist_.size();
}
inline void sscaiinfo::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 sscaiinfo::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void sscaiinfo::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void sscaiinfo::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sscaiinfo::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sscaiinfo::mutable_useridlist() {
  return &useridlist_;
}

// optional int32 usernum = 11;
inline bool sscaiinfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sscaiinfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sscaiinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sscaiinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 sscaiinfo::usernum() const {
  return usernum_;
}
inline void sscaiinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 bankerid = 12;
inline bool sscaiinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sscaiinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sscaiinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sscaiinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 sscaiinfo::bankerid() const {
  return bankerid_;
}
inline void sscaiinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// optional int32 bankjetton = 13;
inline bool sscaiinfo::has_bankjetton() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sscaiinfo::set_has_bankjetton() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sscaiinfo::clear_has_bankjetton() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sscaiinfo::clear_bankjetton() {
  bankjetton_ = 0;
  clear_has_bankjetton();
}
inline ::google::protobuf::int32 sscaiinfo::bankjetton() const {
  return bankjetton_;
}
inline void sscaiinfo::set_bankjetton(::google::protobuf::int32 value) {
  set_has_bankjetton();
  bankjetton_ = value;
}

// optional int32 maxuser = 14;
inline bool sscaiinfo::has_maxuser() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sscaiinfo::set_has_maxuser() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sscaiinfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sscaiinfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 sscaiinfo::maxuser() const {
  return maxuser_;
}
inline void sscaiinfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
}

// optional string bankername = 15;
inline bool sscaiinfo::has_bankername() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sscaiinfo::set_has_bankername() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sscaiinfo::clear_has_bankername() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sscaiinfo::clear_bankername() {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    bankername_->clear();
  }
  clear_has_bankername();
}
inline const ::std::string& sscaiinfo::bankername() const {
  return *bankername_;
}
inline void sscaiinfo::set_bankername(const ::std::string& value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void sscaiinfo::set_bankername(const char* value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void sscaiinfo::set_bankername(const char* value, size_t size) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sscaiinfo::mutable_bankername() {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  return bankername_;
}
inline ::std::string* sscaiinfo::release_bankername() {
  clear_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankername_;
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sscaiinfo::set_allocated_bankername(::std::string* bankername) {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankername) {
    set_has_bankername();
    bankername_ = bankername;
  } else {
    clear_has_bankername();
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankerfaceid = 16;
inline bool sscaiinfo::has_bankerfaceid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sscaiinfo::set_has_bankerfaceid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sscaiinfo::clear_has_bankerfaceid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sscaiinfo::clear_bankerfaceid() {
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_->clear();
  }
  clear_has_bankerfaceid();
}
inline const ::std::string& sscaiinfo::bankerfaceid() const {
  return *bankerfaceid_;
}
inline void sscaiinfo::set_bankerfaceid(const ::std::string& value) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(value);
}
inline void sscaiinfo::set_bankerfaceid(const char* value) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(value);
}
inline void sscaiinfo::set_bankerfaceid(const char* value, size_t size) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sscaiinfo::mutable_bankerfaceid() {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  return bankerfaceid_;
}
inline ::std::string* sscaiinfo::release_bankerfaceid() {
  clear_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerfaceid_;
    bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sscaiinfo::set_allocated_bankerfaceid(::std::string* bankerfaceid) {
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerfaceid_;
  }
  if (bankerfaceid) {
    set_has_bankerfaceid();
    bankerfaceid_ = bankerfaceid;
  } else {
    clear_has_bankerfaceid();
    bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string awardpool = 17;
inline bool sscaiinfo::has_awardpool() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sscaiinfo::set_has_awardpool() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sscaiinfo::clear_has_awardpool() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sscaiinfo::clear_awardpool() {
  if (awardpool_ != &::google::protobuf::internal::kEmptyString) {
    awardpool_->clear();
  }
  clear_has_awardpool();
}
inline const ::std::string& sscaiinfo::awardpool() const {
  return *awardpool_;
}
inline void sscaiinfo::set_awardpool(const ::std::string& value) {
  set_has_awardpool();
  if (awardpool_ == &::google::protobuf::internal::kEmptyString) {
    awardpool_ = new ::std::string;
  }
  awardpool_->assign(value);
}
inline void sscaiinfo::set_awardpool(const char* value) {
  set_has_awardpool();
  if (awardpool_ == &::google::protobuf::internal::kEmptyString) {
    awardpool_ = new ::std::string;
  }
  awardpool_->assign(value);
}
inline void sscaiinfo::set_awardpool(const char* value, size_t size) {
  set_has_awardpool();
  if (awardpool_ == &::google::protobuf::internal::kEmptyString) {
    awardpool_ = new ::std::string;
  }
  awardpool_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sscaiinfo::mutable_awardpool() {
  set_has_awardpool();
  if (awardpool_ == &::google::protobuf::internal::kEmptyString) {
    awardpool_ = new ::std::string;
  }
  return awardpool_;
}
inline ::std::string* sscaiinfo::release_awardpool() {
  clear_has_awardpool();
  if (awardpool_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardpool_;
    awardpool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sscaiinfo::set_allocated_awardpool(::std::string* awardpool) {
  if (awardpool_ != &::google::protobuf::internal::kEmptyString) {
    delete awardpool_;
  }
  if (awardpool) {
    set_has_awardpool();
    awardpool_ = awardpool;
  } else {
    clear_has_awardpool();
    awardpool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 applydrop = 20;
inline bool sscaiinfo::has_applydrop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sscaiinfo::set_has_applydrop() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sscaiinfo::clear_has_applydrop() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sscaiinfo::clear_applydrop() {
  applydrop_ = 0;
  clear_has_applydrop();
}
inline ::google::protobuf::int32 sscaiinfo::applydrop() const {
  return applydrop_;
}
inline void sscaiinfo::set_applydrop(::google::protobuf::int32 value) {
  set_has_applydrop();
  applydrop_ = value;
}

// optional int32 lastbigtime = 21;
inline bool sscaiinfo::has_lastbigtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sscaiinfo::set_has_lastbigtime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sscaiinfo::clear_has_lastbigtime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sscaiinfo::clear_lastbigtime() {
  lastbigtime_ = 0;
  clear_has_lastbigtime();
}
inline ::google::protobuf::int32 sscaiinfo::lastbigtime() const {
  return lastbigtime_;
}
inline void sscaiinfo::set_lastbigtime(::google::protobuf::int32 value) {
  set_has_lastbigtime();
  lastbigtime_ = value;
}

// optional int32 lastwinid = 22;
inline bool sscaiinfo::has_lastwinid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sscaiinfo::set_has_lastwinid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sscaiinfo::clear_has_lastwinid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sscaiinfo::clear_lastwinid() {
  lastwinid_ = 0;
  clear_has_lastwinid();
}
inline ::google::protobuf::int32 sscaiinfo::lastwinid() const {
  return lastwinid_;
}
inline void sscaiinfo::set_lastwinid(::google::protobuf::int32 value) {
  set_has_lastwinid();
  lastwinid_ = value;
}

// optional string lastwinnick = 23;
inline bool sscaiinfo::has_lastwinnick() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sscaiinfo::set_has_lastwinnick() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sscaiinfo::clear_has_lastwinnick() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sscaiinfo::clear_lastwinnick() {
  if (lastwinnick_ != &::google::protobuf::internal::kEmptyString) {
    lastwinnick_->clear();
  }
  clear_has_lastwinnick();
}
inline const ::std::string& sscaiinfo::lastwinnick() const {
  return *lastwinnick_;
}
inline void sscaiinfo::set_lastwinnick(const ::std::string& value) {
  set_has_lastwinnick();
  if (lastwinnick_ == &::google::protobuf::internal::kEmptyString) {
    lastwinnick_ = new ::std::string;
  }
  lastwinnick_->assign(value);
}
inline void sscaiinfo::set_lastwinnick(const char* value) {
  set_has_lastwinnick();
  if (lastwinnick_ == &::google::protobuf::internal::kEmptyString) {
    lastwinnick_ = new ::std::string;
  }
  lastwinnick_->assign(value);
}
inline void sscaiinfo::set_lastwinnick(const char* value, size_t size) {
  set_has_lastwinnick();
  if (lastwinnick_ == &::google::protobuf::internal::kEmptyString) {
    lastwinnick_ = new ::std::string;
  }
  lastwinnick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sscaiinfo::mutable_lastwinnick() {
  set_has_lastwinnick();
  if (lastwinnick_ == &::google::protobuf::internal::kEmptyString) {
    lastwinnick_ = new ::std::string;
  }
  return lastwinnick_;
}
inline ::std::string* sscaiinfo::release_lastwinnick() {
  clear_has_lastwinnick();
  if (lastwinnick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastwinnick_;
    lastwinnick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sscaiinfo::set_allocated_lastwinnick(::std::string* lastwinnick) {
  if (lastwinnick_ != &::google::protobuf::internal::kEmptyString) {
    delete lastwinnick_;
  }
  if (lastwinnick) {
    set_has_lastwinnick();
    lastwinnick_ = lastwinnick;
  } else {
    clear_has_lastwinnick();
    lastwinnick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lastwinfaceid = 24;
inline bool sscaiinfo::has_lastwinfaceid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sscaiinfo::set_has_lastwinfaceid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sscaiinfo::clear_has_lastwinfaceid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sscaiinfo::clear_lastwinfaceid() {
  if (lastwinfaceid_ != &::google::protobuf::internal::kEmptyString) {
    lastwinfaceid_->clear();
  }
  clear_has_lastwinfaceid();
}
inline const ::std::string& sscaiinfo::lastwinfaceid() const {
  return *lastwinfaceid_;
}
inline void sscaiinfo::set_lastwinfaceid(const ::std::string& value) {
  set_has_lastwinfaceid();
  if (lastwinfaceid_ == &::google::protobuf::internal::kEmptyString) {
    lastwinfaceid_ = new ::std::string;
  }
  lastwinfaceid_->assign(value);
}
inline void sscaiinfo::set_lastwinfaceid(const char* value) {
  set_has_lastwinfaceid();
  if (lastwinfaceid_ == &::google::protobuf::internal::kEmptyString) {
    lastwinfaceid_ = new ::std::string;
  }
  lastwinfaceid_->assign(value);
}
inline void sscaiinfo::set_lastwinfaceid(const char* value, size_t size) {
  set_has_lastwinfaceid();
  if (lastwinfaceid_ == &::google::protobuf::internal::kEmptyString) {
    lastwinfaceid_ = new ::std::string;
  }
  lastwinfaceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sscaiinfo::mutable_lastwinfaceid() {
  set_has_lastwinfaceid();
  if (lastwinfaceid_ == &::google::protobuf::internal::kEmptyString) {
    lastwinfaceid_ = new ::std::string;
  }
  return lastwinfaceid_;
}
inline ::std::string* sscaiinfo::release_lastwinfaceid() {
  clear_has_lastwinfaceid();
  if (lastwinfaceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastwinfaceid_;
    lastwinfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sscaiinfo::set_allocated_lastwinfaceid(::std::string* lastwinfaceid) {
  if (lastwinfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete lastwinfaceid_;
  }
  if (lastwinfaceid) {
    set_has_lastwinfaceid();
    lastwinfaceid_ = lastwinfaceid;
  } else {
    clear_has_lastwinfaceid();
    lastwinfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 lastwinnum = 25;
inline bool sscaiinfo::has_lastwinnum() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sscaiinfo::set_has_lastwinnum() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sscaiinfo::clear_has_lastwinnum() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sscaiinfo::clear_lastwinnum() {
  lastwinnum_ = 0;
  clear_has_lastwinnum();
}
inline ::google::protobuf::int32 sscaiinfo::lastwinnum() const {
  return lastwinnum_;
}
inline void sscaiinfo::set_lastwinnum(::google::protobuf::int32 value) {
  set_has_lastwinnum();
  lastwinnum_ = value;
}

// -------------------------------------------------------------------

// sscaibiginfo

// optional int32 userid = 1;
inline bool sscaibiginfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sscaibiginfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sscaibiginfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sscaibiginfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 sscaibiginfo::userid() const {
  return userid_;
}
inline void sscaibiginfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 timemark = 2;
inline bool sscaibiginfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sscaibiginfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sscaibiginfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sscaibiginfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 sscaibiginfo::timemark() const {
  return timemark_;
}
inline void sscaibiginfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// optional int32 winnum = 3;
inline bool sscaibiginfo::has_winnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sscaibiginfo::set_has_winnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sscaibiginfo::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sscaibiginfo::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 sscaibiginfo::winnum() const {
  return winnum_;
}
inline void sscaibiginfo::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional string nickname = 4;
inline bool sscaibiginfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sscaibiginfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sscaibiginfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sscaibiginfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& sscaibiginfo::nickname() const {
  return *nickname_;
}
inline void sscaibiginfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void sscaibiginfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void sscaibiginfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sscaibiginfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* sscaibiginfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sscaibiginfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string faceid = 6;
inline bool sscaibiginfo::has_faceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sscaibiginfo::set_has_faceid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sscaibiginfo::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sscaibiginfo::clear_faceid() {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    faceid_->clear();
  }
  clear_has_faceid();
}
inline const ::std::string& sscaibiginfo::faceid() const {
  return *faceid_;
}
inline void sscaibiginfo::set_faceid(const ::std::string& value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void sscaibiginfo::set_faceid(const char* value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void sscaibiginfo::set_faceid(const char* value, size_t size) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sscaibiginfo::mutable_faceid() {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  return faceid_;
}
inline ::std::string* sscaibiginfo::release_faceid() {
  clear_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faceid_;
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sscaibiginfo::set_allocated_faceid(::std::string* faceid) {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (faceid) {
    set_has_faceid();
    faceid_ = faceid;
  } else {
    clear_has_faceid();
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fsscai_2eproto__INCLUDED
