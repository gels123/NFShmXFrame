// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_caipiao.proto

#ifndef PROTOBUF_st_5fcaipiao_2eproto__INCLUDED
#define PROTOBUF_st_5fcaipiao_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fcaipiao_2eproto();
void protobuf_AssignDesc_st_5fcaipiao_2eproto();
void protobuf_ShutdownFile_st_5fcaipiao_2eproto();

class caipiaojetton;
class caipiaoinfo;
class caipiaohistory;
class caipiaopersonhistory;

// ===================================================================

class caipiaojetton : public ::google::protobuf::Message {
 public:
  caipiaojetton();
  virtual ~caipiaojetton();

  caipiaojetton(const caipiaojetton& from);

  inline caipiaojetton& operator=(const caipiaojetton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const caipiaojetton& default_instance();

  void Swap(caipiaojetton* other);

  // implements Message ----------------------------------------------

  caipiaojetton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const caipiaojetton& from);
  void MergeFrom(const caipiaojetton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 3;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 3;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // repeated int32 pourtype = 4;
  inline int pourtype_size() const;
  inline void clear_pourtype();
  static const int kPourtypeFieldNumber = 4;
  inline ::google::protobuf::int32 pourtype(int index) const;
  inline void set_pourtype(int index, ::google::protobuf::int32 value);
  inline void add_pourtype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pourtype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pourtype();

  // optional int32 jetton = 5;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 5;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional int32 gamekey = 6;
  inline bool has_gamekey() const;
  inline void clear_gamekey();
  static const int kGamekeyFieldNumber = 6;
  inline ::google::protobuf::int32 gamekey() const;
  inline void set_gamekey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.caipiaojetton)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_gamekey();
  inline void clear_has_gamekey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pourtype_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 jetton_;
  ::google::protobuf::int32 gamekey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fcaipiao_2eproto();
  friend void protobuf_AssignDesc_st_5fcaipiao_2eproto();
  friend void protobuf_ShutdownFile_st_5fcaipiao_2eproto();

  void InitAsDefaultInstance();
  static caipiaojetton* default_instance_;
};
// -------------------------------------------------------------------

class caipiaoinfo : public ::google::protobuf::Message {
 public:
  caipiaoinfo();
  virtual ~caipiaoinfo();

  caipiaoinfo(const caipiaoinfo& from);

  inline caipiaoinfo& operator=(const caipiaoinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const caipiaoinfo& default_instance();

  void Swap(caipiaoinfo* other);

  // implements Message ----------------------------------------------

  caipiaoinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const caipiaoinfo& from);
  void MergeFrom(const caipiaoinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 frameid = 2;
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 2;
  inline ::google::protobuf::int32 frameid() const;
  inline void set_frameid(::google::protobuf::int32 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated int32 standuser = 4;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 4;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // optional int32 usernum = 5;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 5;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 tabletype = 6;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 6;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional string openawarddate = 7;
  inline bool has_openawarddate() const;
  inline void clear_openawarddate();
  static const int kOpenawarddateFieldNumber = 7;
  inline const ::std::string& openawarddate() const;
  inline void set_openawarddate(const ::std::string& value);
  inline void set_openawarddate(const char* value);
  inline void set_openawarddate(const char* value, size_t size);
  inline ::std::string* mutable_openawarddate();
  inline ::std::string* release_openawarddate();
  inline void set_allocated_openawarddate(::std::string* openawarddate);

  // optional string fengpantime = 8;
  inline bool has_fengpantime() const;
  inline void clear_fengpantime();
  static const int kFengpantimeFieldNumber = 8;
  inline const ::std::string& fengpantime() const;
  inline void set_fengpantime(const ::std::string& value);
  inline void set_fengpantime(const char* value);
  inline void set_fengpantime(const char* value, size_t size);
  inline ::std::string* mutable_fengpantime();
  inline ::std::string* release_fengpantime();
  inline void set_allocated_fengpantime(::std::string* fengpantime);

  // optional string openawardtime = 9;
  inline bool has_openawardtime() const;
  inline void clear_openawardtime();
  static const int kOpenawardtimeFieldNumber = 9;
  inline const ::std::string& openawardtime() const;
  inline void set_openawardtime(const ::std::string& value);
  inline void set_openawardtime(const char* value);
  inline void set_openawardtime(const char* value, size_t size);
  inline ::std::string* mutable_openawardtime();
  inline ::std::string* release_openawardtime();
  inline void set_allocated_openawardtime(::std::string* openawardtime);

  // optional string gid = 10;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 10;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const char* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional string award = 11;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 11;
  inline const ::std::string& award() const;
  inline void set_award(const ::std::string& value);
  inline void set_award(const char* value);
  inline void set_award(const char* value, size_t size);
  inline ::std::string* mutable_award();
  inline ::std::string* release_award();
  inline void set_allocated_award(::std::string* award);

  // optional string nextopenissue = 12;
  inline bool has_nextopenissue() const;
  inline void clear_nextopenissue();
  static const int kNextopenissueFieldNumber = 12;
  inline const ::std::string& nextopenissue() const;
  inline void set_nextopenissue(const ::std::string& value);
  inline void set_nextopenissue(const char* value);
  inline void set_nextopenissue(const char* value, size_t size);
  inline ::std::string* mutable_nextopenissue();
  inline ::std::string* release_nextopenissue();
  inline void set_allocated_nextopenissue(::std::string* nextopenissue);

  // optional string nextOpenTime = 13;
  inline bool has_nextopentime() const;
  inline void clear_nextopentime();
  static const int kNextOpenTimeFieldNumber = 13;
  inline const ::std::string& nextopentime() const;
  inline void set_nextopentime(const ::std::string& value);
  inline void set_nextopentime(const char* value);
  inline void set_nextopentime(const char* value, size_t size);
  inline ::std::string* mutable_nextopentime();
  inline ::std::string* release_nextopentime();
  inline void set_allocated_nextopentime(::std::string* nextopentime);

  // optional string secondOpenIssue = 14;
  inline bool has_secondopenissue() const;
  inline void clear_secondopenissue();
  static const int kSecondOpenIssueFieldNumber = 14;
  inline const ::std::string& secondopenissue() const;
  inline void set_secondopenissue(const ::std::string& value);
  inline void set_secondopenissue(const char* value);
  inline void set_secondopenissue(const char* value, size_t size);
  inline ::std::string* mutable_secondopenissue();
  inline ::std::string* release_secondopenissue();
  inline void set_allocated_secondopenissue(::std::string* secondopenissue);

  // optional string secondOpenTime = 15;
  inline bool has_secondopentime() const;
  inline void clear_secondopentime();
  static const int kSecondOpenTimeFieldNumber = 15;
  inline const ::std::string& secondopentime() const;
  inline void set_secondopentime(const ::std::string& value);
  inline void set_secondopentime(const char* value);
  inline void set_secondopentime(const char* value, size_t size);
  inline ::std::string* mutable_secondopentime();
  inline ::std::string* release_secondopentime();
  inline void set_allocated_secondopentime(::std::string* secondopentime);

  // optional int32 gamekey = 16;
  inline bool has_gamekey() const;
  inline void clear_gamekey();
  static const int kGamekeyFieldNumber = 16;
  inline ::google::protobuf::int32 gamekey() const;
  inline void set_gamekey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.caipiaoinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_openawarddate();
  inline void clear_has_openawarddate();
  inline void set_has_fengpantime();
  inline void clear_has_fengpantime();
  inline void set_has_openawardtime();
  inline void clear_has_openawardtime();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_nextopenissue();
  inline void clear_has_nextopenissue();
  inline void set_has_nextopentime();
  inline void clear_has_nextopentime();
  inline void set_has_secondopenissue();
  inline void clear_has_secondopenissue();
  inline void set_has_secondopentime();
  inline void clear_has_secondopentime();
  inline void set_has_gamekey();
  inline void clear_has_gamekey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 usernum_;
  ::std::string* openawarddate_;
  ::std::string* fengpantime_;
  ::std::string* openawardtime_;
  ::std::string* gid_;
  ::std::string* award_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 gamekey_;
  ::std::string* nextopenissue_;
  ::std::string* nextopentime_;
  ::std::string* secondopenissue_;
  ::std::string* secondopentime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fcaipiao_2eproto();
  friend void protobuf_AssignDesc_st_5fcaipiao_2eproto();
  friend void protobuf_ShutdownFile_st_5fcaipiao_2eproto();

  void InitAsDefaultInstance();
  static caipiaoinfo* default_instance_;
};
// -------------------------------------------------------------------

class caipiaohistory : public ::google::protobuf::Message {
 public:
  caipiaohistory();
  virtual ~caipiaohistory();

  caipiaohistory(const caipiaohistory& from);

  inline caipiaohistory& operator=(const caipiaohistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const caipiaohistory& default_instance();

  void Swap(caipiaohistory* other);

  // implements Message ----------------------------------------------

  caipiaohistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const caipiaohistory& from);
  void MergeFrom(const caipiaohistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional string gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const char* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional string award = 3;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 3;
  inline const ::std::string& award() const;
  inline void set_award(const ::std::string& value);
  inline void set_award(const char* value);
  inline void set_award(const char* value, size_t size);
  inline ::std::string* mutable_award();
  inline ::std::string* release_award();
  inline void set_allocated_award(::std::string* award);

  // optional int32 gamekey = 4;
  inline bool has_gamekey() const;
  inline void clear_gamekey();
  static const int kGamekeyFieldNumber = 4;
  inline ::google::protobuf::int32 gamekey() const;
  inline void set_gamekey(::google::protobuf::int32 value);

  // optional string openawardtime = 5;
  inline bool has_openawardtime() const;
  inline void clear_openawardtime();
  static const int kOpenawardtimeFieldNumber = 5;
  inline const ::std::string& openawardtime() const;
  inline void set_openawardtime(const ::std::string& value);
  inline void set_openawardtime(const char* value);
  inline void set_openawardtime(const char* value, size_t size);
  inline ::std::string* mutable_openawardtime();
  inline ::std::string* release_openawardtime();
  inline void set_allocated_openawardtime(::std::string* openawardtime);

  // @@protoc_insertion_point(class_scope:progame.caipiaohistory)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_gamekey();
  inline void clear_has_gamekey();
  inline void set_has_openawardtime();
  inline void clear_has_openawardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 gamekey_;
  ::std::string* award_;
  ::std::string* openawardtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fcaipiao_2eproto();
  friend void protobuf_AssignDesc_st_5fcaipiao_2eproto();
  friend void protobuf_ShutdownFile_st_5fcaipiao_2eproto();

  void InitAsDefaultInstance();
  static caipiaohistory* default_instance_;
};
// -------------------------------------------------------------------

class caipiaopersonhistory : public ::google::protobuf::Message {
 public:
  caipiaopersonhistory();
  virtual ~caipiaopersonhistory();

  caipiaopersonhistory(const caipiaopersonhistory& from);

  inline caipiaopersonhistory& operator=(const caipiaopersonhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const caipiaopersonhistory& default_instance();

  void Swap(caipiaopersonhistory* other);

  // implements Message ----------------------------------------------

  caipiaopersonhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const caipiaopersonhistory& from);
  void MergeFrom(const caipiaopersonhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 orderid = 1;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 1;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional string gid = 3;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 3;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const char* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional string award = 4;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 4;
  inline const ::std::string& award() const;
  inline void set_award(const ::std::string& value);
  inline void set_award(const char* value);
  inline void set_award(const char* value, size_t size);
  inline ::std::string* mutable_award();
  inline ::std::string* release_award();
  inline void set_allocated_award(::std::string* award);

  // optional int32 gamekey = 5;
  inline bool has_gamekey() const;
  inline void clear_gamekey();
  static const int kGamekeyFieldNumber = 5;
  inline ::google::protobuf::int32 gamekey() const;
  inline void set_gamekey(::google::protobuf::int32 value);

  // optional string pourjetton = 6;
  inline bool has_pourjetton() const;
  inline void clear_pourjetton();
  static const int kPourjettonFieldNumber = 6;
  inline const ::std::string& pourjetton() const;
  inline void set_pourjetton(const ::std::string& value);
  inline void set_pourjetton(const char* value);
  inline void set_pourjetton(const char* value, size_t size);
  inline ::std::string* mutable_pourjetton();
  inline ::std::string* release_pourjetton();
  inline void set_allocated_pourjetton(::std::string* pourjetton);

  // optional string pourcontent = 7;
  inline bool has_pourcontent() const;
  inline void clear_pourcontent();
  static const int kPourcontentFieldNumber = 7;
  inline const ::std::string& pourcontent() const;
  inline void set_pourcontent(const ::std::string& value);
  inline void set_pourcontent(const char* value);
  inline void set_pourcontent(const char* value, size_t size);
  inline ::std::string* mutable_pourcontent();
  inline ::std::string* release_pourcontent();
  inline void set_allocated_pourcontent(::std::string* pourcontent);

  // optional string opentimes = 8;
  inline bool has_opentimes() const;
  inline void clear_opentimes();
  static const int kOpentimesFieldNumber = 8;
  inline const ::std::string& opentimes() const;
  inline void set_opentimes(const ::std::string& value);
  inline void set_opentimes(const char* value);
  inline void set_opentimes(const char* value, size_t size);
  inline ::std::string* mutable_opentimes();
  inline ::std::string* release_opentimes();
  inline void set_allocated_opentimes(::std::string* opentimes);

  // optional int32 win = 9;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 9;
  inline ::google::protobuf::int32 win() const;
  inline void set_win(::google::protobuf::int32 value);

  // optional int32 state = 10;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 10;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.caipiaopersonhistory)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_gamekey();
  inline void clear_has_gamekey();
  inline void set_has_pourjetton();
  inline void clear_has_pourjetton();
  inline void set_has_pourcontent();
  inline void clear_has_pourcontent();
  inline void set_has_opentimes();
  inline void clear_has_opentimes();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 tableid_;
  ::std::string* gid_;
  ::std::string* award_;
  ::std::string* pourjetton_;
  ::std::string* pourcontent_;
  ::google::protobuf::int32 gamekey_;
  ::google::protobuf::int32 win_;
  ::std::string* opentimes_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fcaipiao_2eproto();
  friend void protobuf_AssignDesc_st_5fcaipiao_2eproto();
  friend void protobuf_ShutdownFile_st_5fcaipiao_2eproto();

  void InitAsDefaultInstance();
  static caipiaopersonhistory* default_instance_;
};
// ===================================================================


// ===================================================================

// caipiaojetton

// optional int32 userid = 1;
inline bool caipiaojetton::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void caipiaojetton::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void caipiaojetton::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void caipiaojetton::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 caipiaojetton::userid() const {
  return userid_;
}
inline void caipiaojetton::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 tableid = 2;
inline bool caipiaojetton::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void caipiaojetton::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void caipiaojetton::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void caipiaojetton::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 caipiaojetton::tableid() const {
  return tableid_;
}
inline void caipiaojetton::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tabletype = 3;
inline bool caipiaojetton::has_tabletype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void caipiaojetton::set_has_tabletype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void caipiaojetton::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void caipiaojetton::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 caipiaojetton::tabletype() const {
  return tabletype_;
}
inline void caipiaojetton::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// repeated int32 pourtype = 4;
inline int caipiaojetton::pourtype_size() const {
  return pourtype_.size();
}
inline void caipiaojetton::clear_pourtype() {
  pourtype_.Clear();
}
inline ::google::protobuf::int32 caipiaojetton::pourtype(int index) const {
  return pourtype_.Get(index);
}
inline void caipiaojetton::set_pourtype(int index, ::google::protobuf::int32 value) {
  pourtype_.Set(index, value);
}
inline void caipiaojetton::add_pourtype(::google::protobuf::int32 value) {
  pourtype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
caipiaojetton::pourtype() const {
  return pourtype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
caipiaojetton::mutable_pourtype() {
  return &pourtype_;
}

// optional int32 jetton = 5;
inline bool caipiaojetton::has_jetton() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void caipiaojetton::set_has_jetton() {
  _has_bits_[0] |= 0x00000010u;
}
inline void caipiaojetton::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void caipiaojetton::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 caipiaojetton::jetton() const {
  return jetton_;
}
inline void caipiaojetton::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional int32 gamekey = 6;
inline bool caipiaojetton::has_gamekey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void caipiaojetton::set_has_gamekey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void caipiaojetton::clear_has_gamekey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void caipiaojetton::clear_gamekey() {
  gamekey_ = 0;
  clear_has_gamekey();
}
inline ::google::protobuf::int32 caipiaojetton::gamekey() const {
  return gamekey_;
}
inline void caipiaojetton::set_gamekey(::google::protobuf::int32 value) {
  set_has_gamekey();
  gamekey_ = value;
}

// -------------------------------------------------------------------

// caipiaoinfo

// optional int32 tableid = 1;
inline bool caipiaoinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void caipiaoinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void caipiaoinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void caipiaoinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 caipiaoinfo::tableid() const {
  return tableid_;
}
inline void caipiaoinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 frameid = 2;
inline bool caipiaoinfo::has_frameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void caipiaoinfo::set_has_frameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void caipiaoinfo::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void caipiaoinfo::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 caipiaoinfo::frameid() const {
  return frameid_;
}
inline void caipiaoinfo::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
}

// optional int32 state = 3;
inline bool caipiaoinfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void caipiaoinfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void caipiaoinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void caipiaoinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 caipiaoinfo::state() const {
  return state_;
}
inline void caipiaoinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// repeated int32 standuser = 4;
inline int caipiaoinfo::standuser_size() const {
  return standuser_.size();
}
inline void caipiaoinfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 caipiaoinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void caipiaoinfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void caipiaoinfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
caipiaoinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
caipiaoinfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 usernum = 5;
inline bool caipiaoinfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void caipiaoinfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void caipiaoinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void caipiaoinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 caipiaoinfo::usernum() const {
  return usernum_;
}
inline void caipiaoinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 tabletype = 6;
inline bool caipiaoinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void caipiaoinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void caipiaoinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void caipiaoinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 caipiaoinfo::tabletype() const {
  return tabletype_;
}
inline void caipiaoinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional string openawarddate = 7;
inline bool caipiaoinfo::has_openawarddate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void caipiaoinfo::set_has_openawarddate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void caipiaoinfo::clear_has_openawarddate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void caipiaoinfo::clear_openawarddate() {
  if (openawarddate_ != &::google::protobuf::internal::kEmptyString) {
    openawarddate_->clear();
  }
  clear_has_openawarddate();
}
inline const ::std::string& caipiaoinfo::openawarddate() const {
  return *openawarddate_;
}
inline void caipiaoinfo::set_openawarddate(const ::std::string& value) {
  set_has_openawarddate();
  if (openawarddate_ == &::google::protobuf::internal::kEmptyString) {
    openawarddate_ = new ::std::string;
  }
  openawarddate_->assign(value);
}
inline void caipiaoinfo::set_openawarddate(const char* value) {
  set_has_openawarddate();
  if (openawarddate_ == &::google::protobuf::internal::kEmptyString) {
    openawarddate_ = new ::std::string;
  }
  openawarddate_->assign(value);
}
inline void caipiaoinfo::set_openawarddate(const char* value, size_t size) {
  set_has_openawarddate();
  if (openawarddate_ == &::google::protobuf::internal::kEmptyString) {
    openawarddate_ = new ::std::string;
  }
  openawarddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_openawarddate() {
  set_has_openawarddate();
  if (openawarddate_ == &::google::protobuf::internal::kEmptyString) {
    openawarddate_ = new ::std::string;
  }
  return openawarddate_;
}
inline ::std::string* caipiaoinfo::release_openawarddate() {
  clear_has_openawarddate();
  if (openawarddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openawarddate_;
    openawarddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_openawarddate(::std::string* openawarddate) {
  if (openawarddate_ != &::google::protobuf::internal::kEmptyString) {
    delete openawarddate_;
  }
  if (openawarddate) {
    set_has_openawarddate();
    openawarddate_ = openawarddate;
  } else {
    clear_has_openawarddate();
    openawarddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fengpantime = 8;
inline bool caipiaoinfo::has_fengpantime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void caipiaoinfo::set_has_fengpantime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void caipiaoinfo::clear_has_fengpantime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void caipiaoinfo::clear_fengpantime() {
  if (fengpantime_ != &::google::protobuf::internal::kEmptyString) {
    fengpantime_->clear();
  }
  clear_has_fengpantime();
}
inline const ::std::string& caipiaoinfo::fengpantime() const {
  return *fengpantime_;
}
inline void caipiaoinfo::set_fengpantime(const ::std::string& value) {
  set_has_fengpantime();
  if (fengpantime_ == &::google::protobuf::internal::kEmptyString) {
    fengpantime_ = new ::std::string;
  }
  fengpantime_->assign(value);
}
inline void caipiaoinfo::set_fengpantime(const char* value) {
  set_has_fengpantime();
  if (fengpantime_ == &::google::protobuf::internal::kEmptyString) {
    fengpantime_ = new ::std::string;
  }
  fengpantime_->assign(value);
}
inline void caipiaoinfo::set_fengpantime(const char* value, size_t size) {
  set_has_fengpantime();
  if (fengpantime_ == &::google::protobuf::internal::kEmptyString) {
    fengpantime_ = new ::std::string;
  }
  fengpantime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_fengpantime() {
  set_has_fengpantime();
  if (fengpantime_ == &::google::protobuf::internal::kEmptyString) {
    fengpantime_ = new ::std::string;
  }
  return fengpantime_;
}
inline ::std::string* caipiaoinfo::release_fengpantime() {
  clear_has_fengpantime();
  if (fengpantime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fengpantime_;
    fengpantime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_fengpantime(::std::string* fengpantime) {
  if (fengpantime_ != &::google::protobuf::internal::kEmptyString) {
    delete fengpantime_;
  }
  if (fengpantime) {
    set_has_fengpantime();
    fengpantime_ = fengpantime;
  } else {
    clear_has_fengpantime();
    fengpantime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string openawardtime = 9;
inline bool caipiaoinfo::has_openawardtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void caipiaoinfo::set_has_openawardtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void caipiaoinfo::clear_has_openawardtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void caipiaoinfo::clear_openawardtime() {
  if (openawardtime_ != &::google::protobuf::internal::kEmptyString) {
    openawardtime_->clear();
  }
  clear_has_openawardtime();
}
inline const ::std::string& caipiaoinfo::openawardtime() const {
  return *openawardtime_;
}
inline void caipiaoinfo::set_openawardtime(const ::std::string& value) {
  set_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    openawardtime_ = new ::std::string;
  }
  openawardtime_->assign(value);
}
inline void caipiaoinfo::set_openawardtime(const char* value) {
  set_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    openawardtime_ = new ::std::string;
  }
  openawardtime_->assign(value);
}
inline void caipiaoinfo::set_openawardtime(const char* value, size_t size) {
  set_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    openawardtime_ = new ::std::string;
  }
  openawardtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_openawardtime() {
  set_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    openawardtime_ = new ::std::string;
  }
  return openawardtime_;
}
inline ::std::string* caipiaoinfo::release_openawardtime() {
  clear_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openawardtime_;
    openawardtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_openawardtime(::std::string* openawardtime) {
  if (openawardtime_ != &::google::protobuf::internal::kEmptyString) {
    delete openawardtime_;
  }
  if (openawardtime) {
    set_has_openawardtime();
    openawardtime_ = openawardtime;
  } else {
    clear_has_openawardtime();
    openawardtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gid = 10;
inline bool caipiaoinfo::has_gid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void caipiaoinfo::set_has_gid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void caipiaoinfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void caipiaoinfo::clear_gid() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& caipiaoinfo::gid() const {
  return *gid_;
}
inline void caipiaoinfo::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void caipiaoinfo::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void caipiaoinfo::set_gid(const char* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  return gid_;
}
inline ::std::string* caipiaoinfo::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string award = 11;
inline bool caipiaoinfo::has_award() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void caipiaoinfo::set_has_award() {
  _has_bits_[0] |= 0x00000400u;
}
inline void caipiaoinfo::clear_has_award() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void caipiaoinfo::clear_award() {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    award_->clear();
  }
  clear_has_award();
}
inline const ::std::string& caipiaoinfo::award() const {
  return *award_;
}
inline void caipiaoinfo::set_award(const ::std::string& value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void caipiaoinfo::set_award(const char* value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void caipiaoinfo::set_award(const char* value, size_t size) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_award() {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  return award_;
}
inline ::std::string* caipiaoinfo::release_award() {
  clear_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = award_;
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_award(::std::string* award) {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (award) {
    set_has_award();
    award_ = award;
  } else {
    clear_has_award();
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nextopenissue = 12;
inline bool caipiaoinfo::has_nextopenissue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void caipiaoinfo::set_has_nextopenissue() {
  _has_bits_[0] |= 0x00000800u;
}
inline void caipiaoinfo::clear_has_nextopenissue() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void caipiaoinfo::clear_nextopenissue() {
  if (nextopenissue_ != &::google::protobuf::internal::kEmptyString) {
    nextopenissue_->clear();
  }
  clear_has_nextopenissue();
}
inline const ::std::string& caipiaoinfo::nextopenissue() const {
  return *nextopenissue_;
}
inline void caipiaoinfo::set_nextopenissue(const ::std::string& value) {
  set_has_nextopenissue();
  if (nextopenissue_ == &::google::protobuf::internal::kEmptyString) {
    nextopenissue_ = new ::std::string;
  }
  nextopenissue_->assign(value);
}
inline void caipiaoinfo::set_nextopenissue(const char* value) {
  set_has_nextopenissue();
  if (nextopenissue_ == &::google::protobuf::internal::kEmptyString) {
    nextopenissue_ = new ::std::string;
  }
  nextopenissue_->assign(value);
}
inline void caipiaoinfo::set_nextopenissue(const char* value, size_t size) {
  set_has_nextopenissue();
  if (nextopenissue_ == &::google::protobuf::internal::kEmptyString) {
    nextopenissue_ = new ::std::string;
  }
  nextopenissue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_nextopenissue() {
  set_has_nextopenissue();
  if (nextopenissue_ == &::google::protobuf::internal::kEmptyString) {
    nextopenissue_ = new ::std::string;
  }
  return nextopenissue_;
}
inline ::std::string* caipiaoinfo::release_nextopenissue() {
  clear_has_nextopenissue();
  if (nextopenissue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nextopenissue_;
    nextopenissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_nextopenissue(::std::string* nextopenissue) {
  if (nextopenissue_ != &::google::protobuf::internal::kEmptyString) {
    delete nextopenissue_;
  }
  if (nextopenissue) {
    set_has_nextopenissue();
    nextopenissue_ = nextopenissue;
  } else {
    clear_has_nextopenissue();
    nextopenissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nextOpenTime = 13;
inline bool caipiaoinfo::has_nextopentime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void caipiaoinfo::set_has_nextopentime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void caipiaoinfo::clear_has_nextopentime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void caipiaoinfo::clear_nextopentime() {
  if (nextopentime_ != &::google::protobuf::internal::kEmptyString) {
    nextopentime_->clear();
  }
  clear_has_nextopentime();
}
inline const ::std::string& caipiaoinfo::nextopentime() const {
  return *nextopentime_;
}
inline void caipiaoinfo::set_nextopentime(const ::std::string& value) {
  set_has_nextopentime();
  if (nextopentime_ == &::google::protobuf::internal::kEmptyString) {
    nextopentime_ = new ::std::string;
  }
  nextopentime_->assign(value);
}
inline void caipiaoinfo::set_nextopentime(const char* value) {
  set_has_nextopentime();
  if (nextopentime_ == &::google::protobuf::internal::kEmptyString) {
    nextopentime_ = new ::std::string;
  }
  nextopentime_->assign(value);
}
inline void caipiaoinfo::set_nextopentime(const char* value, size_t size) {
  set_has_nextopentime();
  if (nextopentime_ == &::google::protobuf::internal::kEmptyString) {
    nextopentime_ = new ::std::string;
  }
  nextopentime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_nextopentime() {
  set_has_nextopentime();
  if (nextopentime_ == &::google::protobuf::internal::kEmptyString) {
    nextopentime_ = new ::std::string;
  }
  return nextopentime_;
}
inline ::std::string* caipiaoinfo::release_nextopentime() {
  clear_has_nextopentime();
  if (nextopentime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nextopentime_;
    nextopentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_nextopentime(::std::string* nextopentime) {
  if (nextopentime_ != &::google::protobuf::internal::kEmptyString) {
    delete nextopentime_;
  }
  if (nextopentime) {
    set_has_nextopentime();
    nextopentime_ = nextopentime;
  } else {
    clear_has_nextopentime();
    nextopentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string secondOpenIssue = 14;
inline bool caipiaoinfo::has_secondopenissue() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void caipiaoinfo::set_has_secondopenissue() {
  _has_bits_[0] |= 0x00002000u;
}
inline void caipiaoinfo::clear_has_secondopenissue() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void caipiaoinfo::clear_secondopenissue() {
  if (secondopenissue_ != &::google::protobuf::internal::kEmptyString) {
    secondopenissue_->clear();
  }
  clear_has_secondopenissue();
}
inline const ::std::string& caipiaoinfo::secondopenissue() const {
  return *secondopenissue_;
}
inline void caipiaoinfo::set_secondopenissue(const ::std::string& value) {
  set_has_secondopenissue();
  if (secondopenissue_ == &::google::protobuf::internal::kEmptyString) {
    secondopenissue_ = new ::std::string;
  }
  secondopenissue_->assign(value);
}
inline void caipiaoinfo::set_secondopenissue(const char* value) {
  set_has_secondopenissue();
  if (secondopenissue_ == &::google::protobuf::internal::kEmptyString) {
    secondopenissue_ = new ::std::string;
  }
  secondopenissue_->assign(value);
}
inline void caipiaoinfo::set_secondopenissue(const char* value, size_t size) {
  set_has_secondopenissue();
  if (secondopenissue_ == &::google::protobuf::internal::kEmptyString) {
    secondopenissue_ = new ::std::string;
  }
  secondopenissue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_secondopenissue() {
  set_has_secondopenissue();
  if (secondopenissue_ == &::google::protobuf::internal::kEmptyString) {
    secondopenissue_ = new ::std::string;
  }
  return secondopenissue_;
}
inline ::std::string* caipiaoinfo::release_secondopenissue() {
  clear_has_secondopenissue();
  if (secondopenissue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secondopenissue_;
    secondopenissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_secondopenissue(::std::string* secondopenissue) {
  if (secondopenissue_ != &::google::protobuf::internal::kEmptyString) {
    delete secondopenissue_;
  }
  if (secondopenissue) {
    set_has_secondopenissue();
    secondopenissue_ = secondopenissue;
  } else {
    clear_has_secondopenissue();
    secondopenissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string secondOpenTime = 15;
inline bool caipiaoinfo::has_secondopentime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void caipiaoinfo::set_has_secondopentime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void caipiaoinfo::clear_has_secondopentime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void caipiaoinfo::clear_secondopentime() {
  if (secondopentime_ != &::google::protobuf::internal::kEmptyString) {
    secondopentime_->clear();
  }
  clear_has_secondopentime();
}
inline const ::std::string& caipiaoinfo::secondopentime() const {
  return *secondopentime_;
}
inline void caipiaoinfo::set_secondopentime(const ::std::string& value) {
  set_has_secondopentime();
  if (secondopentime_ == &::google::protobuf::internal::kEmptyString) {
    secondopentime_ = new ::std::string;
  }
  secondopentime_->assign(value);
}
inline void caipiaoinfo::set_secondopentime(const char* value) {
  set_has_secondopentime();
  if (secondopentime_ == &::google::protobuf::internal::kEmptyString) {
    secondopentime_ = new ::std::string;
  }
  secondopentime_->assign(value);
}
inline void caipiaoinfo::set_secondopentime(const char* value, size_t size) {
  set_has_secondopentime();
  if (secondopentime_ == &::google::protobuf::internal::kEmptyString) {
    secondopentime_ = new ::std::string;
  }
  secondopentime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaoinfo::mutable_secondopentime() {
  set_has_secondopentime();
  if (secondopentime_ == &::google::protobuf::internal::kEmptyString) {
    secondopentime_ = new ::std::string;
  }
  return secondopentime_;
}
inline ::std::string* caipiaoinfo::release_secondopentime() {
  clear_has_secondopentime();
  if (secondopentime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secondopentime_;
    secondopentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaoinfo::set_allocated_secondopentime(::std::string* secondopentime) {
  if (secondopentime_ != &::google::protobuf::internal::kEmptyString) {
    delete secondopentime_;
  }
  if (secondopentime) {
    set_has_secondopentime();
    secondopentime_ = secondopentime;
  } else {
    clear_has_secondopentime();
    secondopentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gamekey = 16;
inline bool caipiaoinfo::has_gamekey() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void caipiaoinfo::set_has_gamekey() {
  _has_bits_[0] |= 0x00008000u;
}
inline void caipiaoinfo::clear_has_gamekey() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void caipiaoinfo::clear_gamekey() {
  gamekey_ = 0;
  clear_has_gamekey();
}
inline ::google::protobuf::int32 caipiaoinfo::gamekey() const {
  return gamekey_;
}
inline void caipiaoinfo::set_gamekey(::google::protobuf::int32 value) {
  set_has_gamekey();
  gamekey_ = value;
}

// -------------------------------------------------------------------

// caipiaohistory

// optional int32 tableid = 1;
inline bool caipiaohistory::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void caipiaohistory::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void caipiaohistory::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void caipiaohistory::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 caipiaohistory::tableid() const {
  return tableid_;
}
inline void caipiaohistory::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional string gid = 2;
inline bool caipiaohistory::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void caipiaohistory::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void caipiaohistory::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void caipiaohistory::clear_gid() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& caipiaohistory::gid() const {
  return *gid_;
}
inline void caipiaohistory::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void caipiaohistory::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void caipiaohistory::set_gid(const char* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaohistory::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  return gid_;
}
inline ::std::string* caipiaohistory::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaohistory::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string award = 3;
inline bool caipiaohistory::has_award() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void caipiaohistory::set_has_award() {
  _has_bits_[0] |= 0x00000004u;
}
inline void caipiaohistory::clear_has_award() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void caipiaohistory::clear_award() {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    award_->clear();
  }
  clear_has_award();
}
inline const ::std::string& caipiaohistory::award() const {
  return *award_;
}
inline void caipiaohistory::set_award(const ::std::string& value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void caipiaohistory::set_award(const char* value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void caipiaohistory::set_award(const char* value, size_t size) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaohistory::mutable_award() {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  return award_;
}
inline ::std::string* caipiaohistory::release_award() {
  clear_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = award_;
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaohistory::set_allocated_award(::std::string* award) {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (award) {
    set_has_award();
    award_ = award;
  } else {
    clear_has_award();
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gamekey = 4;
inline bool caipiaohistory::has_gamekey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void caipiaohistory::set_has_gamekey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void caipiaohistory::clear_has_gamekey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void caipiaohistory::clear_gamekey() {
  gamekey_ = 0;
  clear_has_gamekey();
}
inline ::google::protobuf::int32 caipiaohistory::gamekey() const {
  return gamekey_;
}
inline void caipiaohistory::set_gamekey(::google::protobuf::int32 value) {
  set_has_gamekey();
  gamekey_ = value;
}

// optional string openawardtime = 5;
inline bool caipiaohistory::has_openawardtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void caipiaohistory::set_has_openawardtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void caipiaohistory::clear_has_openawardtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void caipiaohistory::clear_openawardtime() {
  if (openawardtime_ != &::google::protobuf::internal::kEmptyString) {
    openawardtime_->clear();
  }
  clear_has_openawardtime();
}
inline const ::std::string& caipiaohistory::openawardtime() const {
  return *openawardtime_;
}
inline void caipiaohistory::set_openawardtime(const ::std::string& value) {
  set_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    openawardtime_ = new ::std::string;
  }
  openawardtime_->assign(value);
}
inline void caipiaohistory::set_openawardtime(const char* value) {
  set_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    openawardtime_ = new ::std::string;
  }
  openawardtime_->assign(value);
}
inline void caipiaohistory::set_openawardtime(const char* value, size_t size) {
  set_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    openawardtime_ = new ::std::string;
  }
  openawardtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaohistory::mutable_openawardtime() {
  set_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    openawardtime_ = new ::std::string;
  }
  return openawardtime_;
}
inline ::std::string* caipiaohistory::release_openawardtime() {
  clear_has_openawardtime();
  if (openawardtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openawardtime_;
    openawardtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaohistory::set_allocated_openawardtime(::std::string* openawardtime) {
  if (openawardtime_ != &::google::protobuf::internal::kEmptyString) {
    delete openawardtime_;
  }
  if (openawardtime) {
    set_has_openawardtime();
    openawardtime_ = openawardtime;
  } else {
    clear_has_openawardtime();
    openawardtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// caipiaopersonhistory

// optional int32 orderid = 1;
inline bool caipiaopersonhistory::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void caipiaopersonhistory::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void caipiaopersonhistory::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void caipiaopersonhistory::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 caipiaopersonhistory::orderid() const {
  return orderid_;
}
inline void caipiaopersonhistory::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
}

// optional int32 tableid = 2;
inline bool caipiaopersonhistory::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void caipiaopersonhistory::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void caipiaopersonhistory::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void caipiaopersonhistory::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 caipiaopersonhistory::tableid() const {
  return tableid_;
}
inline void caipiaopersonhistory::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional string gid = 3;
inline bool caipiaopersonhistory::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void caipiaopersonhistory::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void caipiaopersonhistory::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void caipiaopersonhistory::clear_gid() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& caipiaopersonhistory::gid() const {
  return *gid_;
}
inline void caipiaopersonhistory::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void caipiaopersonhistory::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void caipiaopersonhistory::set_gid(const char* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaopersonhistory::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  return gid_;
}
inline ::std::string* caipiaopersonhistory::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaopersonhistory::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string award = 4;
inline bool caipiaopersonhistory::has_award() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void caipiaopersonhistory::set_has_award() {
  _has_bits_[0] |= 0x00000008u;
}
inline void caipiaopersonhistory::clear_has_award() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void caipiaopersonhistory::clear_award() {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    award_->clear();
  }
  clear_has_award();
}
inline const ::std::string& caipiaopersonhistory::award() const {
  return *award_;
}
inline void caipiaopersonhistory::set_award(const ::std::string& value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void caipiaopersonhistory::set_award(const char* value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void caipiaopersonhistory::set_award(const char* value, size_t size) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaopersonhistory::mutable_award() {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  return award_;
}
inline ::std::string* caipiaopersonhistory::release_award() {
  clear_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = award_;
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaopersonhistory::set_allocated_award(::std::string* award) {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (award) {
    set_has_award();
    award_ = award;
  } else {
    clear_has_award();
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gamekey = 5;
inline bool caipiaopersonhistory::has_gamekey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void caipiaopersonhistory::set_has_gamekey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void caipiaopersonhistory::clear_has_gamekey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void caipiaopersonhistory::clear_gamekey() {
  gamekey_ = 0;
  clear_has_gamekey();
}
inline ::google::protobuf::int32 caipiaopersonhistory::gamekey() const {
  return gamekey_;
}
inline void caipiaopersonhistory::set_gamekey(::google::protobuf::int32 value) {
  set_has_gamekey();
  gamekey_ = value;
}

// optional string pourjetton = 6;
inline bool caipiaopersonhistory::has_pourjetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void caipiaopersonhistory::set_has_pourjetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void caipiaopersonhistory::clear_has_pourjetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void caipiaopersonhistory::clear_pourjetton() {
  if (pourjetton_ != &::google::protobuf::internal::kEmptyString) {
    pourjetton_->clear();
  }
  clear_has_pourjetton();
}
inline const ::std::string& caipiaopersonhistory::pourjetton() const {
  return *pourjetton_;
}
inline void caipiaopersonhistory::set_pourjetton(const ::std::string& value) {
  set_has_pourjetton();
  if (pourjetton_ == &::google::protobuf::internal::kEmptyString) {
    pourjetton_ = new ::std::string;
  }
  pourjetton_->assign(value);
}
inline void caipiaopersonhistory::set_pourjetton(const char* value) {
  set_has_pourjetton();
  if (pourjetton_ == &::google::protobuf::internal::kEmptyString) {
    pourjetton_ = new ::std::string;
  }
  pourjetton_->assign(value);
}
inline void caipiaopersonhistory::set_pourjetton(const char* value, size_t size) {
  set_has_pourjetton();
  if (pourjetton_ == &::google::protobuf::internal::kEmptyString) {
    pourjetton_ = new ::std::string;
  }
  pourjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaopersonhistory::mutable_pourjetton() {
  set_has_pourjetton();
  if (pourjetton_ == &::google::protobuf::internal::kEmptyString) {
    pourjetton_ = new ::std::string;
  }
  return pourjetton_;
}
inline ::std::string* caipiaopersonhistory::release_pourjetton() {
  clear_has_pourjetton();
  if (pourjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pourjetton_;
    pourjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaopersonhistory::set_allocated_pourjetton(::std::string* pourjetton) {
  if (pourjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete pourjetton_;
  }
  if (pourjetton) {
    set_has_pourjetton();
    pourjetton_ = pourjetton;
  } else {
    clear_has_pourjetton();
    pourjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pourcontent = 7;
inline bool caipiaopersonhistory::has_pourcontent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void caipiaopersonhistory::set_has_pourcontent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void caipiaopersonhistory::clear_has_pourcontent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void caipiaopersonhistory::clear_pourcontent() {
  if (pourcontent_ != &::google::protobuf::internal::kEmptyString) {
    pourcontent_->clear();
  }
  clear_has_pourcontent();
}
inline const ::std::string& caipiaopersonhistory::pourcontent() const {
  return *pourcontent_;
}
inline void caipiaopersonhistory::set_pourcontent(const ::std::string& value) {
  set_has_pourcontent();
  if (pourcontent_ == &::google::protobuf::internal::kEmptyString) {
    pourcontent_ = new ::std::string;
  }
  pourcontent_->assign(value);
}
inline void caipiaopersonhistory::set_pourcontent(const char* value) {
  set_has_pourcontent();
  if (pourcontent_ == &::google::protobuf::internal::kEmptyString) {
    pourcontent_ = new ::std::string;
  }
  pourcontent_->assign(value);
}
inline void caipiaopersonhistory::set_pourcontent(const char* value, size_t size) {
  set_has_pourcontent();
  if (pourcontent_ == &::google::protobuf::internal::kEmptyString) {
    pourcontent_ = new ::std::string;
  }
  pourcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaopersonhistory::mutable_pourcontent() {
  set_has_pourcontent();
  if (pourcontent_ == &::google::protobuf::internal::kEmptyString) {
    pourcontent_ = new ::std::string;
  }
  return pourcontent_;
}
inline ::std::string* caipiaopersonhistory::release_pourcontent() {
  clear_has_pourcontent();
  if (pourcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pourcontent_;
    pourcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaopersonhistory::set_allocated_pourcontent(::std::string* pourcontent) {
  if (pourcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete pourcontent_;
  }
  if (pourcontent) {
    set_has_pourcontent();
    pourcontent_ = pourcontent;
  } else {
    clear_has_pourcontent();
    pourcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string opentimes = 8;
inline bool caipiaopersonhistory::has_opentimes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void caipiaopersonhistory::set_has_opentimes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void caipiaopersonhistory::clear_has_opentimes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void caipiaopersonhistory::clear_opentimes() {
  if (opentimes_ != &::google::protobuf::internal::kEmptyString) {
    opentimes_->clear();
  }
  clear_has_opentimes();
}
inline const ::std::string& caipiaopersonhistory::opentimes() const {
  return *opentimes_;
}
inline void caipiaopersonhistory::set_opentimes(const ::std::string& value) {
  set_has_opentimes();
  if (opentimes_ == &::google::protobuf::internal::kEmptyString) {
    opentimes_ = new ::std::string;
  }
  opentimes_->assign(value);
}
inline void caipiaopersonhistory::set_opentimes(const char* value) {
  set_has_opentimes();
  if (opentimes_ == &::google::protobuf::internal::kEmptyString) {
    opentimes_ = new ::std::string;
  }
  opentimes_->assign(value);
}
inline void caipiaopersonhistory::set_opentimes(const char* value, size_t size) {
  set_has_opentimes();
  if (opentimes_ == &::google::protobuf::internal::kEmptyString) {
    opentimes_ = new ::std::string;
  }
  opentimes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* caipiaopersonhistory::mutable_opentimes() {
  set_has_opentimes();
  if (opentimes_ == &::google::protobuf::internal::kEmptyString) {
    opentimes_ = new ::std::string;
  }
  return opentimes_;
}
inline ::std::string* caipiaopersonhistory::release_opentimes() {
  clear_has_opentimes();
  if (opentimes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opentimes_;
    opentimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void caipiaopersonhistory::set_allocated_opentimes(::std::string* opentimes) {
  if (opentimes_ != &::google::protobuf::internal::kEmptyString) {
    delete opentimes_;
  }
  if (opentimes) {
    set_has_opentimes();
    opentimes_ = opentimes;
  } else {
    clear_has_opentimes();
    opentimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 win = 9;
inline bool caipiaopersonhistory::has_win() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void caipiaopersonhistory::set_has_win() {
  _has_bits_[0] |= 0x00000100u;
}
inline void caipiaopersonhistory::clear_has_win() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void caipiaopersonhistory::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 caipiaopersonhistory::win() const {
  return win_;
}
inline void caipiaopersonhistory::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
}

// optional int32 state = 10;
inline bool caipiaopersonhistory::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void caipiaopersonhistory::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void caipiaopersonhistory::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void caipiaopersonhistory::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 caipiaopersonhistory::state() const {
  return state_;
}
inline void caipiaopersonhistory::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fcaipiao_2eproto__INCLUDED
