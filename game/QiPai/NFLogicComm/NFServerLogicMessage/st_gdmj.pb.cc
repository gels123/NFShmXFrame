// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_gdmj.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_gdmj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* gdmjpoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjpoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjnextaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjnextaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjviprecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjviprecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* mjvipinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mjvipinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjplaydetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjplaydetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjtdh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjtdh_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjztdh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjztdh_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjjph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjjph_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjhzz_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjhzz_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjhdz_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjhdz_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjcountinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjcountinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjhistoryitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjhistoryitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjhistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjhistorypair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjhistorypair_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjhandpoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjhandpoker_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fgdmj_2eproto() {
  protobuf_AddDesc_st_5fgdmj_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_gdmj.proto");
  GOOGLE_CHECK(file != NULL);
  gdmjpoker_descriptor_ = file->message_type(0);
  static const int gdmjpoker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjpoker, pokertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjpoker, typedetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjpoker, pokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjpoker, tarchairid_),
  };
  gdmjpoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjpoker_descriptor_,
      gdmjpoker::default_instance_,
      gdmjpoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjpoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjpoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjpoker));
  gdmjuser_descriptor_ = file->message_type(1);
  static const int gdmjuser_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, handpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, outpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, mjpokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, playstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, autoplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, carryjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, psinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, robottime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, tinglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, tingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, beinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, prop1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, humark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, guohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, guopeng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, guogang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, jinhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, zimoguohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, julebu_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, outhuapoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, tingcardstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, pokeridgang_),
  };
  gdmjuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjuser_descriptor_,
      gdmjuser::default_instance_,
      gdmjuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjuser));
  gdmjnextaction_descriptor_ = file->message_type(2);
  static const int gdmjnextaction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjnextaction, actchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjnextaction, tarchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjnextaction, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjnextaction, actpokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjnextaction, typedetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjnextaction, canplay_),
  };
  gdmjnextaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjnextaction_descriptor_,
      gdmjnextaction::default_instance_,
      gdmjnextaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjnextaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjnextaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjnextaction));
  gdmjviprecord_descriptor_ = file->message_type(3);
  static const int gdmjviprecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjviprecord, roundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjviprecord, score_),
  };
  gdmjviprecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjviprecord_descriptor_,
      gdmjviprecord::default_instance_,
      gdmjviprecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjviprecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjviprecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjviprecord));
  mjvipinfo_descriptor_ = file->message_type(4);
  static const int mjvipinfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjvipinfo, viptype_),
  };
  mjvipinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mjvipinfo_descriptor_,
      mjvipinfo::default_instance_,
      mjvipinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjvipinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjvipinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mjvipinfo));
  gdmjplaydetail_descriptor_ = file->message_type(5);
  static const int gdmjplaydetail_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, zimonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, hunum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, dianpaonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, jiepaonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, angangnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, minggangnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, wuguizimo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, youguizimo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, zhongmanum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, maxmultiple_),
  };
  gdmjplaydetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjplaydetail_descriptor_,
      gdmjplaydetail::default_instance_,
      gdmjplaydetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjplaydetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjplaydetail));
  gdmjinfo_descriptor_ = file->message_type(6);
  static const int gdmjinfo_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, mjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, tablemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, manum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, doubleamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, pourjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, fengid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, laizinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, publicpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, playernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, viptable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, bankerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, prevpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, userstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, bankercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, beingpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, actiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, nextinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, winchairlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, tableuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, maxvipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, usevipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, viprecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, recordlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, guilist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, chihulist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, wintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, dissolveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, straction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, payway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, paynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, genzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, julebuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, julebutype_),
  };
  gdmjinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjinfo_descriptor_,
      gdmjinfo::default_instance_,
      gdmjinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjinfo));
  gdmjtdh_descriptor_ = file->message_type(7);
  static const int gdmjtdh_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, mjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, typegui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, manum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, shuanggui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, kehuqidui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, qiduijiafan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, keqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, minggangkeqiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, qianggangquanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, gangbaoquanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, wuguijiabei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, budaifeng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, gengzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, jiejiegao_),
  };
  gdmjtdh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjtdh_descriptor_,
      gdmjtdh::default_instance_,
      gdmjtdh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjtdh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjtdh));
  gdmjztdh_descriptor_ = file->message_type(8);
  static const int gdmjztdh_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, mjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, typegui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, manum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, shuanggui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, kechihu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, kehuqidui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, keqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, minggangkeqiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, qianggangquanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, gangbaoquanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, budaifeng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, gengzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, siguihupai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, qiduisibei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, pengpenghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, qingyises_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, quanfeng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, shisanyao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, yaomeyao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, yaojiujike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, wuguijiabei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, siguiliangbei_),
  };
  gdmjztdh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjztdh_descriptor_,
      gdmjztdh::default_instance_,
      gdmjztdh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjztdh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjztdh));
  gdmjjph_descriptor_ = file->message_type(9);
  static const int gdmjjph_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjjph, mjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjjph, fantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjjph, maxfan_),
  };
  gdmjjph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjjph_descriptor_,
      gdmjjph::default_instance_,
      gdmjjph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjjph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjjph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjjph));
  gdmjhzz_descriptor_ = file->message_type(10);
  static const int gdmjhzz_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, mjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, bukejihu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, menqingjiafen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, genzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, duohuahupai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, ganggenma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, manum_),
  };
  gdmjhzz_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjhzz_descriptor_,
      gdmjhzz::default_instance_,
      gdmjhzz_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhzz, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjhzz));
  gdmjhdz_descriptor_ = file->message_type(11);
  static const int gdmjhdz_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, mjtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, bukejihu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, menqingjiafen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, genzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, duohuahupai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, ganggenma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, manum_),
  };
  gdmjhdz_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjhdz_descriptor_,
      gdmjhdz::default_instance_,
      gdmjhdz_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhdz, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjhdz));
  gdmjcountinfo_descriptor_ = file->message_type(12);
  static const int gdmjcountinfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, winjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, gangjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, fannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, beinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, hunum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, carryjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, julebu_jetton_),
  };
  gdmjcountinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjcountinfo_descriptor_,
      gdmjcountinfo::default_instance_,
      gdmjcountinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjcountinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjcountinfo));
  gdmjhistoryitem_descriptor_ = file->message_type(13);
  static const int gdmjhistoryitem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, tableplayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, playstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, quitdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, userdes_),
  };
  gdmjhistoryitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjhistoryitem_descriptor_,
      gdmjhistoryitem::default_instance_,
      gdmjhistoryitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistoryitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjhistoryitem));
  gdmjhistory_descriptor_ = file->message_type(14);
  static const int gdmjhistory_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, tablemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, playnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, hitemlist_),
  };
  gdmjhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjhistory_descriptor_,
      gdmjhistory::default_instance_,
      gdmjhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjhistory));
  gdmjhistorypair_descriptor_ = file->message_type(15);
  static const int gdmjhistorypair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistorypair, packetcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistorypair, pkginfo_),
  };
  gdmjhistorypair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjhistorypair_descriptor_,
      gdmjhistorypair::default_instance_,
      gdmjhistorypair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistorypair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhistorypair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjhistorypair));
  gdmjhandpoker_descriptor_ = file->message_type(16);
  static const int gdmjhandpoker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhandpoker, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhandpoker, mjpokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhandpoker, handpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhandpoker, magetlist_),
  };
  gdmjhandpoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjhandpoker_descriptor_,
      gdmjhandpoker::default_instance_,
      gdmjhandpoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhandpoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjhandpoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjhandpoker));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fgdmj_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjpoker_descriptor_, &gdmjpoker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjuser_descriptor_, &gdmjuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjnextaction_descriptor_, &gdmjnextaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjviprecord_descriptor_, &gdmjviprecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mjvipinfo_descriptor_, &mjvipinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjplaydetail_descriptor_, &gdmjplaydetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjinfo_descriptor_, &gdmjinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjtdh_descriptor_, &gdmjtdh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjztdh_descriptor_, &gdmjztdh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjjph_descriptor_, &gdmjjph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjhzz_descriptor_, &gdmjhzz::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjhdz_descriptor_, &gdmjhdz::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjcountinfo_descriptor_, &gdmjcountinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjhistoryitem_descriptor_, &gdmjhistoryitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjhistory_descriptor_, &gdmjhistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjhistorypair_descriptor_, &gdmjhistorypair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjhandpoker_descriptor_, &gdmjhandpoker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fgdmj_2eproto() {
  delete gdmjpoker::default_instance_;
  delete gdmjpoker_reflection_;
  delete gdmjuser::default_instance_;
  delete gdmjuser_reflection_;
  delete gdmjnextaction::default_instance_;
  delete gdmjnextaction_reflection_;
  delete gdmjviprecord::default_instance_;
  delete gdmjviprecord_reflection_;
  delete mjvipinfo::default_instance_;
  delete mjvipinfo_reflection_;
  delete gdmjplaydetail::default_instance_;
  delete gdmjplaydetail_reflection_;
  delete gdmjinfo::default_instance_;
  delete gdmjinfo_reflection_;
  delete gdmjtdh::default_instance_;
  delete gdmjtdh_reflection_;
  delete gdmjztdh::default_instance_;
  delete gdmjztdh_reflection_;
  delete gdmjjph::default_instance_;
  delete gdmjjph_reflection_;
  delete gdmjhzz::default_instance_;
  delete gdmjhzz_reflection_;
  delete gdmjhdz::default_instance_;
  delete gdmjhdz_reflection_;
  delete gdmjcountinfo::default_instance_;
  delete gdmjcountinfo_reflection_;
  delete gdmjhistoryitem::default_instance_;
  delete gdmjhistoryitem_reflection_;
  delete gdmjhistory::default_instance_;
  delete gdmjhistory_reflection_;
  delete gdmjhistorypair::default_instance_;
  delete gdmjhistorypair_reflection_;
  delete gdmjhandpoker::default_instance_;
  delete gdmjhandpoker_reflection_;
}

void protobuf_AddDesc_st_5fgdmj_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_gdmj.proto\022\007progame\032\016st_human.proto"
    "\"Y\n\tgdmjpoker\022\021\n\tpokertype\030\001 \001(\005\022\022\n\ntype"
    "detail\030\002 \001(\005\022\021\n\tpokerlist\030\003 \003(\005\022\022\n\ntarch"
    "airid\030\004 \001(\005\"\202\004\n\010gdmjuser\022\016\n\006userid\030\001 \001(\005"
    "\022\021\n\thandpoker\030\002 \003(\005\022\020\n\010outpoker\030\003 \003(\005\022\'\n"
    "\013mjpokerlist\030\004 \003(\0132\022.progame.gdmjpoker\022\021"
    "\n\tplaystate\030\005 \001(\005\022\022\n\nautoplayer\030\006 \001(\005\022\023\n"
    "\013carryjetton\030\010 \001(\005\022)\n\006psinfo\030\t \001(\0132\031.pro"
    "game.playersimpleinfo\022\017\n\007chairid\030\n \001(\005\022\021"
    "\n\trobottime\030\013 \001(\005\022\020\n\010tinglist\030\014 \003(\005\022\020\n\010t"
    "ingtype\030\r \003(\005\022\017\n\007isrobot\030\016 \001(\005\022\016\n\006beinum"
    "\030\017 \001(\005\022\r\n\005prop1\030\036 \001(\005\022\016\n\006humark\030\037 \001(\005\022\r\n"
    "\005guohu\030  \001(\005\022\017\n\007guopeng\030! \003(\005\022\017\n\007guogang"
    "\030\" \003(\005\022\r\n\005jinhu\030# \001(\005\022\021\n\tzimoguohu\030$ \001(\005"
    "\022\025\n\rjulebu_jetton\030% \001(\005\022\023\n\013outhuapoker\030&"
    " \003(\005\022\025\n\rtingcardstate\030\' \001(\005\022\023\n\013pokeridga"
    "ng\030( \001(\005\"\205\001\n\016gdmjnextaction\022\022\n\nactchairi"
    "d\030\001 \003(\005\022\022\n\ntarchairid\030\002 \001(\005\022\022\n\nactiontyp"
    "e\030\003 \003(\005\022\022\n\nactpokerid\030\004 \001(\005\022\022\n\ntypedetai"
    "l\030\005 \001(\005\022\017\n\007canplay\030\006 \001(\005\"/\n\rgdmjviprecor"
    "d\022\017\n\007roundid\030\001 \001(\005\022\r\n\005score\030\002 \003(\005\"\034\n\tmjv"
    "ipinfo\022\017\n\007viptype\030\001 \001(\005\"\360\001\n\016gdmjplaydeta"
    "il\022\017\n\007chairid\030\001 \001(\005\022\016\n\006winnum\030\002 \001(\005\022\017\n\007z"
    "imonum\030\003 \001(\005\022\r\n\005hunum\030\004 \001(\005\022\022\n\ndianpaonu"
    "m\030\005 \001(\005\022\021\n\tjiepaonum\030\006 \001(\005\022\021\n\tangangnum\030"
    "\007 \001(\005\022\023\n\013minggangnum\030\010 \001(\005\022\021\n\twuguizimo\030"
    "\t \001(\005\022\022\n\nyouguizimo\030\n \001(\005\022\022\n\nzhongmanum\030"
    "\013 \001(\005\022\023\n\013maxMultiple\030\014 \001(\005\"\363\006\n\010gdmjinfo\022"
    "\016\n\006mjtype\030\001 \001(\005\022\021\n\ttabletype\030\002 \001(\005\022\017\n\007ta"
    "bleid\030\003 \001(\005\022\021\n\ttablemark\030\004 \001(\005\022\r\n\005manum\030"
    "\005 \001(\005\022\024\n\014doubleamount\030\006 \001(\005\022\022\n\npourjetto"
    "n\030\007 \001(\005\022\016\n\006fengid\030\010 \001(\005\022\020\n\010laizinum\030\t \001("
    "\005\022\017\n\007frameid\030\n \001(\005\022\016\n\006status\030\013 \001(\005\022\023\n\013pu"
    "blicpoker\030\014 \003(\005\022\024\n\014maxplayernum\030\r \001(\005\022\021\n"
    "\tplayernum\030\016 \001(\005\022\020\n\010viptable\030\017 \001(\005\022\020\n\010ti"
    "memark\030\020 \001(\005\022\021\n\tbankerpos\030\021 \001(\005\022\017\n\007prevp"
    "os\030\022 \001(\005\022\021\n\tuserstate\030\023 \001(\005\022\023\n\013bankercou"
    "nt\030\024 \001(\005\022\022\n\nbeingpoker\030\025 \001(\005\022\022\n\nactionti"
    "me\030\026 \001(\005\022\017\n\007ownerid\030\027 \001(\005\022\017\n\007situser\030\030 \003"
    "(\005\022\021\n\tstanduser\030\031 \003(\005\022)\n\010nextinfo\030\032 \001(\0132"
    "\027.progame.gdmjnextaction\022\024\n\014winchairlist"
    "\030\033 \003(\005\022\023\n\013tableuserid\030\034 \001(\005\022\021\n\tmaxvipnum"
    "\030\035 \001(\005\022\021\n\tusevipnum\030\036 \001(\005\022)\n\tviprecord\030\037"
    " \001(\0132\026.progame.gdmjviprecord\022*\n\nrecordli"
    "st\030  \003(\0132\026.progame.gdmjviprecord\022\017\n\007guil"
    "ist\030! \003(\005\022\021\n\tchihulist\030\" \003(\005\022\017\n\007wintype\030"
    "# \001(\005\022\024\n\014dissolveinfo\030% \001(\005\022\021\n\tstraction"
    "\030& \001(\t\022\017\n\007paytype\030\' \001(\005\022\016\n\006payway\030( \001(\005\022"
    "\016\n\006paynum\030) \001(\005\022\021\n\tgenzhuang\030* \001(\005\022\020\n\010ju"
    "lebuid\030+ \001(\005\022\022\n\njulebutype\030, \001(\005\"\245\002\n\007gdm"
    "jtdh\022\016\n\006mjtype\030\001 \001(\005\022\017\n\007typegui\030\002 \001(\005\022\r\n"
    "\005manum\030\003 \001(\005\022\021\n\tshuanggui\030\004 \001(\005\022\021\n\tkehuq"
    "idui\030\013 \001(\005\022\023\n\013qiduijiafan\030\014 \001(\005\022\025\n\rkeqia"
    "ngganghu\030\r \001(\005\022\027\n\017minggangkeqiang\030\016 \001(\005\022"
    "\030\n\020qianggangquanbao\030\017 \001(\005\022\026\n\016gangbaoquan"
    "bao\030\020 \001(\005\022\023\n\013wuguijiabei\030\021 \001(\005\022\021\n\tbudaif"
    "eng\030\022 \001(\005\022\022\n\ngengzhuang\030\023 \001(\005\022\021\n\tjiejieg"
    "ao\030\024 \001(\005\"\300\003\n\010gdmjztdh\022\016\n\006mjtype\030\001 \001(\005\022\017\n"
    "\007typegui\030\002 \001(\005\022\r\n\005manum\030\003 \001(\005\022\021\n\tshuangg"
    "ui\030\004 \001(\005\022\017\n\007kechihu\030\013 \001(\005\022\021\n\tkehuqidui\030\014"
    " \001(\005\022\025\n\rkeqiangganghu\030\016 \001(\005\022\027\n\017minggangk"
    "eqiang\030\017 \001(\005\022\030\n\020qianggangquanbao\030\020 \001(\005\022\026"
    "\n\016gangbaoquanbao\030\021 \001(\005\022\021\n\tbudaifeng\030\022 \001("
    "\005\022\022\n\ngengzhuang\030\023 \001(\005\022\022\n\nsiguihupai\030\024 \001("
    "\005\022\022\n\nqiduisibei\030\025 \001(\005\022\022\n\npengpenghu\030\026 \001("
    "\005\022\021\n\tqingyises\030\027 \001(\005\022\020\n\010quanfeng\030\030 \001(\005\022\021"
    "\n\tshisanyao\030\031 \001(\005\022\020\n\010yaomeyao\030\032 \001(\005\022\022\n\ny"
    "aojiujike\030\033 \001(\005\022\023\n\013wuguijiabei\030\034 \001(\005\022\025\n\r"
    "siguiliangbei\030\035 \001(\005\":\n\007gdmjjph\022\016\n\006mjtype"
    "\030\001 \001(\005\022\017\n\007fantype\030\002 \001(\005\022\016\n\006maxfan\030\003 \001(\005\""
    "\214\001\n\007gdmjhzz\022\016\n\006mjtype\030\001 \001(\005\022\020\n\010bukejihu\030"
    "\002 \001(\005\022\025\n\rmenqingjiafen\030\003 \001(\005\022\021\n\tgenzhuan"
    "g\030\004 \001(\005\022\023\n\013duohuahupai\030\005 \001(\005\022\021\n\tganggenm"
    "a\030\006 \001(\005\022\r\n\005manum\030\007 \001(\005\"\214\001\n\007gdmjhdz\022\016\n\006mj"
    "type\030\001 \001(\005\022\020\n\010bukejihu\030\002 \001(\005\022\025\n\rmenqingj"
    "iafen\030\003 \001(\005\022\021\n\tgenzhuang\030\004 \001(\005\022\023\n\013duohua"
    "hupai\030\005 \001(\005\022\021\n\tganggenma\030\006 \001(\005\022\r\n\005manum\030"
    "\007 \001(\005\"\275\001\n\rgdmjcountinfo\022\016\n\006userid\030\001 \001(\005\022"
    "\r\n\005iswin\030\002 \001(\005\022\021\n\twinjetton\030\003 \001(\005\022\022\n\ngan"
    "gjetton\030\004 \001(\005\022\016\n\006fannum\030\005 \001(\005\022\013\n\003des\030\006 \003"
    "(\t\022\016\n\006beinum\030\007 \001(\005\022\r\n\005hunum\030\010 \001(\005\022\023\n\013car"
    "ryjetton\030\t \001(\005\022\025\n\rjulebu_jetton\030\n \001(\005\"\265\001"
    "\n\017gdmjhistoryitem\022\023\n\013tableplayid\030\001 \001(\005\022\017"
    "\n\007tableid\030\002 \001(\005\022\020\n\010playtime\030\003 \001(\005\022\021\n\tpla"
    "ystate\030\004 \001(\005\022\022\n\nuseridlist\030\005 \003(\005\022\020\n\010nick"
    "list\030\006 \003(\t\022\017\n\007winlist\030\007 \003(\005\022\017\n\007quitdes\030\010"
    " \001(\t\022\017\n\007userdes\030\t \003(\t\"\270\001\n\013gdmjhistory\022\017\n"
    "\007tableid\030\001 \001(\005\022\021\n\ttablemark\030\002 \001(\005\022\020\n\010gam"
    "etime\030\003 \001(\005\022\017\n\007playnum\030\004 \001(\005\022\022\n\nuseridli"
    "st\030\005 \003(\005\022\020\n\010nicklist\030\006 \003(\t\022\017\n\007winlist\030\007 "
    "\003(\005\022+\n\thitemlist\030\010 \003(\0132\030.progame.gdmjhis"
    "toryitem\"6\n\017gdmjhistorypair\022\022\n\npacketcod"
    "e\030\001 \001(\005\022\017\n\007pkginfo\030\002 \001(\t\"n\n\rgdmjhandpoke"
    "r\022\016\n\006userid\030\001 \001(\005\022\'\n\013mjpokerlist\030\002 \003(\0132\022"
    ".progame.gdmjpoker\022\021\n\thandpoker\030\003 \003(\005\022\021\n"
    "\tmagetlist\030\004 \003(\005", 3816);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_gdmj.proto", &protobuf_RegisterTypes);
  gdmjpoker::default_instance_ = new gdmjpoker();
  gdmjuser::default_instance_ = new gdmjuser();
  gdmjnextaction::default_instance_ = new gdmjnextaction();
  gdmjviprecord::default_instance_ = new gdmjviprecord();
  mjvipinfo::default_instance_ = new mjvipinfo();
  gdmjplaydetail::default_instance_ = new gdmjplaydetail();
  gdmjinfo::default_instance_ = new gdmjinfo();
  gdmjtdh::default_instance_ = new gdmjtdh();
  gdmjztdh::default_instance_ = new gdmjztdh();
  gdmjjph::default_instance_ = new gdmjjph();
  gdmjhzz::default_instance_ = new gdmjhzz();
  gdmjhdz::default_instance_ = new gdmjhdz();
  gdmjcountinfo::default_instance_ = new gdmjcountinfo();
  gdmjhistoryitem::default_instance_ = new gdmjhistoryitem();
  gdmjhistory::default_instance_ = new gdmjhistory();
  gdmjhistorypair::default_instance_ = new gdmjhistorypair();
  gdmjhandpoker::default_instance_ = new gdmjhandpoker();
  gdmjpoker::default_instance_->InitAsDefaultInstance();
  gdmjuser::default_instance_->InitAsDefaultInstance();
  gdmjnextaction::default_instance_->InitAsDefaultInstance();
  gdmjviprecord::default_instance_->InitAsDefaultInstance();
  mjvipinfo::default_instance_->InitAsDefaultInstance();
  gdmjplaydetail::default_instance_->InitAsDefaultInstance();
  gdmjinfo::default_instance_->InitAsDefaultInstance();
  gdmjtdh::default_instance_->InitAsDefaultInstance();
  gdmjztdh::default_instance_->InitAsDefaultInstance();
  gdmjjph::default_instance_->InitAsDefaultInstance();
  gdmjhzz::default_instance_->InitAsDefaultInstance();
  gdmjhdz::default_instance_->InitAsDefaultInstance();
  gdmjcountinfo::default_instance_->InitAsDefaultInstance();
  gdmjhistoryitem::default_instance_->InitAsDefaultInstance();
  gdmjhistory::default_instance_->InitAsDefaultInstance();
  gdmjhistorypair::default_instance_->InitAsDefaultInstance();
  gdmjhandpoker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fgdmj_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fgdmj_2eproto {
  StaticDescriptorInitializer_st_5fgdmj_2eproto() {
    protobuf_AddDesc_st_5fgdmj_2eproto();
  }
} static_descriptor_initializer_st_5fgdmj_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int gdmjpoker::kPokertypeFieldNumber;
const int gdmjpoker::kTypedetailFieldNumber;
const int gdmjpoker::kPokerlistFieldNumber;
const int gdmjpoker::kTarchairidFieldNumber;
#endif  // !_MSC_VER

gdmjpoker::gdmjpoker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjpoker::InitAsDefaultInstance() {
}

gdmjpoker::gdmjpoker(const gdmjpoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjpoker::SharedCtor() {
  _cached_size_ = 0;
  pokertype_ = 0;
  typedetail_ = 0;
  tarchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjpoker::~gdmjpoker() {
  SharedDtor();
}

void gdmjpoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjpoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjpoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjpoker_descriptor_;
}

const gdmjpoker& gdmjpoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjpoker* gdmjpoker::default_instance_ = NULL;

gdmjpoker* gdmjpoker::New() const {
  return new gdmjpoker;
}

void gdmjpoker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pokertype_ = 0;
    typedetail_ = 0;
    tarchairid_ = 0;
  }
  pokerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjpoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pokertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokertype_)));
          set_has_pokertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_typedetail;
        break;
      }

      // optional int32 typedetail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typedetail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typedetail_)));
          set_has_typedetail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pokerlist;
        break;
      }

      // repeated int32 pokerlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pokerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pokerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pokerlist;
        if (input->ExpectTag(32)) goto parse_tarchairid;
        break;
      }

      // optional int32 tarchairid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tarchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tarchairid_)));
          set_has_tarchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjpoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pokertype = 1;
  if (has_pokertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pokertype(), output);
  }

  // optional int32 typedetail = 2;
  if (has_typedetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typedetail(), output);
  }

  // repeated int32 pokerlist = 3;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pokerlist(i), output);
  }

  // optional int32 tarchairid = 4;
  if (has_tarchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tarchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjpoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pokertype = 1;
  if (has_pokertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pokertype(), target);
  }

  // optional int32 typedetail = 2;
  if (has_typedetail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typedetail(), target);
  }

  // repeated int32 pokerlist = 3;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pokerlist(i), target);
  }

  // optional int32 tarchairid = 4;
  if (has_tarchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tarchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjpoker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pokertype = 1;
    if (has_pokertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokertype());
    }

    // optional int32 typedetail = 2;
    if (has_typedetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typedetail());
    }

    // optional int32 tarchairid = 4;
    if (has_tarchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tarchairid());
    }

  }
  // repeated int32 pokerlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pokerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pokerlist(i));
    }
    total_size += 1 * this->pokerlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjpoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjpoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjpoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjpoker::MergeFrom(const gdmjpoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  pokerlist_.MergeFrom(from.pokerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pokertype()) {
      set_pokertype(from.pokertype());
    }
    if (from.has_typedetail()) {
      set_typedetail(from.typedetail());
    }
    if (from.has_tarchairid()) {
      set_tarchairid(from.tarchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjpoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjpoker::CopyFrom(const gdmjpoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjpoker::IsInitialized() const {

  return true;
}

void gdmjpoker::Swap(gdmjpoker* other) {
  if (other != this) {
    std::swap(pokertype_, other->pokertype_);
    std::swap(typedetail_, other->typedetail_);
    pokerlist_.Swap(&other->pokerlist_);
    std::swap(tarchairid_, other->tarchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjpoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjpoker_descriptor_;
  metadata.reflection = gdmjpoker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjuser::kUseridFieldNumber;
const int gdmjuser::kHandpokerFieldNumber;
const int gdmjuser::kOutpokerFieldNumber;
const int gdmjuser::kMjpokerlistFieldNumber;
const int gdmjuser::kPlaystateFieldNumber;
const int gdmjuser::kAutoplayerFieldNumber;
const int gdmjuser::kCarryjettonFieldNumber;
const int gdmjuser::kPsinfoFieldNumber;
const int gdmjuser::kChairidFieldNumber;
const int gdmjuser::kRobottimeFieldNumber;
const int gdmjuser::kTinglistFieldNumber;
const int gdmjuser::kTingtypeFieldNumber;
const int gdmjuser::kIsrobotFieldNumber;
const int gdmjuser::kBeinumFieldNumber;
const int gdmjuser::kProp1FieldNumber;
const int gdmjuser::kHumarkFieldNumber;
const int gdmjuser::kGuohuFieldNumber;
const int gdmjuser::kGuopengFieldNumber;
const int gdmjuser::kGuogangFieldNumber;
const int gdmjuser::kJinhuFieldNumber;
const int gdmjuser::kZimoguohuFieldNumber;
const int gdmjuser::kJulebuJettonFieldNumber;
const int gdmjuser::kOuthuapokerFieldNumber;
const int gdmjuser::kTingcardstateFieldNumber;
const int gdmjuser::kPokeridgangFieldNumber;
#endif  // !_MSC_VER

gdmjuser::gdmjuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjuser::InitAsDefaultInstance() {
  psinfo_ = const_cast< ::progame::playersimpleinfo*>(&::progame::playersimpleinfo::default_instance());
}

gdmjuser::gdmjuser(const gdmjuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjuser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  playstate_ = 0;
  autoplayer_ = 0;
  carryjetton_ = 0;
  psinfo_ = NULL;
  chairid_ = 0;
  robottime_ = 0;
  isrobot_ = 0;
  beinum_ = 0;
  prop1_ = 0;
  humark_ = 0;
  guohu_ = 0;
  jinhu_ = 0;
  zimoguohu_ = 0;
  julebu_jetton_ = 0;
  tingcardstate_ = 0;
  pokeridgang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjuser::~gdmjuser() {
  SharedDtor();
}

void gdmjuser::SharedDtor() {
  if (this != default_instance_) {
    delete psinfo_;
  }
}

void gdmjuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjuser_descriptor_;
}

const gdmjuser& gdmjuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjuser* gdmjuser::default_instance_ = NULL;

gdmjuser* gdmjuser::New() const {
  return new gdmjuser;
}

void gdmjuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    playstate_ = 0;
    autoplayer_ = 0;
    carryjetton_ = 0;
    if (has_psinfo()) {
      if (psinfo_ != NULL) psinfo_->::progame::playersimpleinfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chairid_ = 0;
    robottime_ = 0;
    isrobot_ = 0;
    beinum_ = 0;
    prop1_ = 0;
    humark_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    guohu_ = 0;
    jinhu_ = 0;
    zimoguohu_ = 0;
    julebu_jetton_ = 0;
    tingcardstate_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    pokeridgang_ = 0;
  }
  handpoker_.Clear();
  outpoker_.Clear();
  mjpokerlist_.Clear();
  tinglist_.Clear();
  tingtype_.Clear();
  guopeng_.Clear();
  guogang_.Clear();
  outhuapoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handpoker;
        break;
      }

      // repeated int32 handpoker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handpoker;
        if (input->ExpectTag(24)) goto parse_outpoker;
        break;
      }

      // repeated int32 outpoker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outpoker;
        if (input->ExpectTag(34)) goto parse_mjpokerlist;
        break;
      }

      // repeated .progame.gdmjpoker mjpokerlist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mjpokerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mjpokerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mjpokerlist;
        if (input->ExpectTag(40)) goto parse_playstate;
        break;
      }

      // optional int32 playstate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playstate_)));
          set_has_playstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_autoplayer;
        break;
      }

      // optional int32 autoplayer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoplayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoplayer_)));
          set_has_autoplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_carryjetton;
        break;
      }

      // optional int32 carryjetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carryjetton_)));
          set_has_carryjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_psinfo;
        break;
      }

      // optional .progame.playersimpleinfo psinfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_robottime;
        break;
      }

      // optional int32 robottime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robottime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robottime_)));
          set_has_robottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tinglist;
        break;
      }

      // repeated int32 tinglist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tinglist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_tinglist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tinglist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tinglist;
        if (input->ExpectTag(104)) goto parse_tingtype;
        break;
      }

      // repeated int32 tingtype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tingtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_tingtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tingtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tingtype;
        if (input->ExpectTag(112)) goto parse_isrobot;
        break;
      }

      // optional int32 isrobot = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_beinum;
        break;
      }

      // optional int32 beinum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beinum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beinum_)));
          set_has_beinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_prop1;
        break;
      }

      // optional int32 prop1 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prop1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prop1_)));
          set_has_prop1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_humark;
        break;
      }

      // optional int32 humark = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_humark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &humark_)));
          set_has_humark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_guohu;
        break;
      }

      // optional int32 guohu = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guohu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guohu_)));
          set_has_guohu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_guopeng;
        break;
      }

      // repeated int32 guopeng = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guopeng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 264, input, this->mutable_guopeng())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guopeng())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_guopeng;
        if (input->ExpectTag(272)) goto parse_guogang;
        break;
      }

      // repeated int32 guogang = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guogang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272, input, this->mutable_guogang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guogang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_guogang;
        if (input->ExpectTag(280)) goto parse_jinhu;
        break;
      }

      // optional int32 jinhu = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jinhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jinhu_)));
          set_has_jinhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_zimoguohu;
        break;
      }

      // optional int32 zimoguohu = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zimoguohu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zimoguohu_)));
          set_has_zimoguohu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_julebu_jetton;
        break;
      }

      // optional int32 julebu_jetton = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebu_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebu_jetton_)));
          set_has_julebu_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_outhuapoker;
        break;
      }

      // repeated int32 outhuapoker = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outhuapoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 304, input, this->mutable_outhuapoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outhuapoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_outhuapoker;
        if (input->ExpectTag(312)) goto parse_tingcardstate;
        break;
      }

      // optional int32 tingcardstate = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tingcardstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tingcardstate_)));
          set_has_tingcardstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_pokeridgang;
        break;
      }

      // optional int32 pokeridgang = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokeridgang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokeridgang_)));
          set_has_pokeridgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated int32 handpoker = 2;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->handpoker(i), output);
  }

  // repeated int32 outpoker = 3;
  for (int i = 0; i < this->outpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outpoker(i), output);
  }

  // repeated .progame.gdmjpoker mjpokerlist = 4;
  for (int i = 0; i < this->mjpokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mjpokerlist(i), output);
  }

  // optional int32 playstate = 5;
  if (has_playstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playstate(), output);
  }

  // optional int32 autoplayer = 6;
  if (has_autoplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->autoplayer(), output);
  }

  // optional int32 carryjetton = 8;
  if (has_carryjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->carryjetton(), output);
  }

  // optional .progame.playersimpleinfo psinfo = 9;
  if (has_psinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->psinfo(), output);
  }

  // optional int32 chairid = 10;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->chairid(), output);
  }

  // optional int32 robottime = 11;
  if (has_robottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->robottime(), output);
  }

  // repeated int32 tinglist = 12;
  for (int i = 0; i < this->tinglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->tinglist(i), output);
  }

  // repeated int32 tingtype = 13;
  for (int i = 0; i < this->tingtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->tingtype(i), output);
  }

  // optional int32 isrobot = 14;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->isrobot(), output);
  }

  // optional int32 beinum = 15;
  if (has_beinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->beinum(), output);
  }

  // optional int32 prop1 = 30;
  if (has_prop1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->prop1(), output);
  }

  // optional int32 humark = 31;
  if (has_humark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->humark(), output);
  }

  // optional int32 guohu = 32;
  if (has_guohu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->guohu(), output);
  }

  // repeated int32 guopeng = 33;
  for (int i = 0; i < this->guopeng_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      33, this->guopeng(i), output);
  }

  // repeated int32 guogang = 34;
  for (int i = 0; i < this->guogang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->guogang(i), output);
  }

  // optional int32 jinhu = 35;
  if (has_jinhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->jinhu(), output);
  }

  // optional int32 zimoguohu = 36;
  if (has_zimoguohu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->zimoguohu(), output);
  }

  // optional int32 julebu_jetton = 37;
  if (has_julebu_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->julebu_jetton(), output);
  }

  // repeated int32 outhuapoker = 38;
  for (int i = 0; i < this->outhuapoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      38, this->outhuapoker(i), output);
  }

  // optional int32 tingcardstate = 39;
  if (has_tingcardstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->tingcardstate(), output);
  }

  // optional int32 pokeridgang = 40;
  if (has_pokeridgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->pokeridgang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated int32 handpoker = 2;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->handpoker(i), target);
  }

  // repeated int32 outpoker = 3;
  for (int i = 0; i < this->outpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outpoker(i), target);
  }

  // repeated .progame.gdmjpoker mjpokerlist = 4;
  for (int i = 0; i < this->mjpokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mjpokerlist(i), target);
  }

  // optional int32 playstate = 5;
  if (has_playstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playstate(), target);
  }

  // optional int32 autoplayer = 6;
  if (has_autoplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->autoplayer(), target);
  }

  // optional int32 carryjetton = 8;
  if (has_carryjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->carryjetton(), target);
  }

  // optional .progame.playersimpleinfo psinfo = 9;
  if (has_psinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->psinfo(), target);
  }

  // optional int32 chairid = 10;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->chairid(), target);
  }

  // optional int32 robottime = 11;
  if (has_robottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->robottime(), target);
  }

  // repeated int32 tinglist = 12;
  for (int i = 0; i < this->tinglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->tinglist(i), target);
  }

  // repeated int32 tingtype = 13;
  for (int i = 0; i < this->tingtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->tingtype(i), target);
  }

  // optional int32 isrobot = 14;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->isrobot(), target);
  }

  // optional int32 beinum = 15;
  if (has_beinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->beinum(), target);
  }

  // optional int32 prop1 = 30;
  if (has_prop1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->prop1(), target);
  }

  // optional int32 humark = 31;
  if (has_humark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->humark(), target);
  }

  // optional int32 guohu = 32;
  if (has_guohu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->guohu(), target);
  }

  // repeated int32 guopeng = 33;
  for (int i = 0; i < this->guopeng_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(33, this->guopeng(i), target);
  }

  // repeated int32 guogang = 34;
  for (int i = 0; i < this->guogang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(34, this->guogang(i), target);
  }

  // optional int32 jinhu = 35;
  if (has_jinhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->jinhu(), target);
  }

  // optional int32 zimoguohu = 36;
  if (has_zimoguohu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->zimoguohu(), target);
  }

  // optional int32 julebu_jetton = 37;
  if (has_julebu_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->julebu_jetton(), target);
  }

  // repeated int32 outhuapoker = 38;
  for (int i = 0; i < this->outhuapoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(38, this->outhuapoker(i), target);
  }

  // optional int32 tingcardstate = 39;
  if (has_tingcardstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->tingcardstate(), target);
  }

  // optional int32 pokeridgang = 40;
  if (has_pokeridgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->pokeridgang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 playstate = 5;
    if (has_playstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playstate());
    }

    // optional int32 autoplayer = 6;
    if (has_autoplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoplayer());
    }

    // optional int32 carryjetton = 8;
    if (has_carryjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carryjetton());
    }

    // optional .progame.playersimpleinfo psinfo = 9;
    if (has_psinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 chairid = 10;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 robottime = 11;
    if (has_robottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robottime());
    }

    // optional int32 isrobot = 14;
    if (has_isrobot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrobot());
    }

    // optional int32 beinum = 15;
    if (has_beinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beinum());
    }

    // optional int32 prop1 = 30;
    if (has_prop1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prop1());
    }

    // optional int32 humark = 31;
    if (has_humark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->humark());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 guohu = 32;
    if (has_guohu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guohu());
    }

    // optional int32 jinhu = 35;
    if (has_jinhu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jinhu());
    }

    // optional int32 zimoguohu = 36;
    if (has_zimoguohu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zimoguohu());
    }

    // optional int32 julebu_jetton = 37;
    if (has_julebu_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebu_jetton());
    }

    // optional int32 tingcardstate = 39;
    if (has_tingcardstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tingcardstate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 pokeridgang = 40;
    if (has_pokeridgang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokeridgang());
    }

  }
  // repeated int32 handpoker = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  // repeated int32 outpoker = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outpoker(i));
    }
    total_size += 1 * this->outpoker_size() + data_size;
  }

  // repeated .progame.gdmjpoker mjpokerlist = 4;
  total_size += 1 * this->mjpokerlist_size();
  for (int i = 0; i < this->mjpokerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mjpokerlist(i));
  }

  // repeated int32 tinglist = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->tinglist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tinglist(i));
    }
    total_size += 1 * this->tinglist_size() + data_size;
  }

  // repeated int32 tingtype = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->tingtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tingtype(i));
    }
    total_size += 1 * this->tingtype_size() + data_size;
  }

  // repeated int32 guopeng = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->guopeng_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guopeng(i));
    }
    total_size += 2 * this->guopeng_size() + data_size;
  }

  // repeated int32 guogang = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->guogang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guogang(i));
    }
    total_size += 2 * this->guogang_size() + data_size;
  }

  // repeated int32 outhuapoker = 38;
  {
    int data_size = 0;
    for (int i = 0; i < this->outhuapoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outhuapoker(i));
    }
    total_size += 2 * this->outhuapoker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjuser::MergeFrom(const gdmjuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  outpoker_.MergeFrom(from.outpoker_);
  mjpokerlist_.MergeFrom(from.mjpokerlist_);
  tinglist_.MergeFrom(from.tinglist_);
  tingtype_.MergeFrom(from.tingtype_);
  guopeng_.MergeFrom(from.guopeng_);
  guogang_.MergeFrom(from.guogang_);
  outhuapoker_.MergeFrom(from.outhuapoker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_playstate()) {
      set_playstate(from.playstate());
    }
    if (from.has_autoplayer()) {
      set_autoplayer(from.autoplayer());
    }
    if (from.has_carryjetton()) {
      set_carryjetton(from.carryjetton());
    }
    if (from.has_psinfo()) {
      mutable_psinfo()->::progame::playersimpleinfo::MergeFrom(from.psinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_robottime()) {
      set_robottime(from.robottime());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_beinum()) {
      set_beinum(from.beinum());
    }
    if (from.has_prop1()) {
      set_prop1(from.prop1());
    }
    if (from.has_humark()) {
      set_humark(from.humark());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_guohu()) {
      set_guohu(from.guohu());
    }
    if (from.has_jinhu()) {
      set_jinhu(from.jinhu());
    }
    if (from.has_zimoguohu()) {
      set_zimoguohu(from.zimoguohu());
    }
    if (from.has_julebu_jetton()) {
      set_julebu_jetton(from.julebu_jetton());
    }
    if (from.has_tingcardstate()) {
      set_tingcardstate(from.tingcardstate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pokeridgang()) {
      set_pokeridgang(from.pokeridgang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjuser::CopyFrom(const gdmjuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjuser::IsInitialized() const {

  return true;
}

void gdmjuser::Swap(gdmjuser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    handpoker_.Swap(&other->handpoker_);
    outpoker_.Swap(&other->outpoker_);
    mjpokerlist_.Swap(&other->mjpokerlist_);
    std::swap(playstate_, other->playstate_);
    std::swap(autoplayer_, other->autoplayer_);
    std::swap(carryjetton_, other->carryjetton_);
    std::swap(psinfo_, other->psinfo_);
    std::swap(chairid_, other->chairid_);
    std::swap(robottime_, other->robottime_);
    tinglist_.Swap(&other->tinglist_);
    tingtype_.Swap(&other->tingtype_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(beinum_, other->beinum_);
    std::swap(prop1_, other->prop1_);
    std::swap(humark_, other->humark_);
    std::swap(guohu_, other->guohu_);
    guopeng_.Swap(&other->guopeng_);
    guogang_.Swap(&other->guogang_);
    std::swap(jinhu_, other->jinhu_);
    std::swap(zimoguohu_, other->zimoguohu_);
    std::swap(julebu_jetton_, other->julebu_jetton_);
    outhuapoker_.Swap(&other->outhuapoker_);
    std::swap(tingcardstate_, other->tingcardstate_);
    std::swap(pokeridgang_, other->pokeridgang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjuser_descriptor_;
  metadata.reflection = gdmjuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjnextaction::kActchairidFieldNumber;
const int gdmjnextaction::kTarchairidFieldNumber;
const int gdmjnextaction::kActiontypeFieldNumber;
const int gdmjnextaction::kActpokeridFieldNumber;
const int gdmjnextaction::kTypedetailFieldNumber;
const int gdmjnextaction::kCanplayFieldNumber;
#endif  // !_MSC_VER

gdmjnextaction::gdmjnextaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjnextaction::InitAsDefaultInstance() {
}

gdmjnextaction::gdmjnextaction(const gdmjnextaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjnextaction::SharedCtor() {
  _cached_size_ = 0;
  tarchairid_ = 0;
  actpokerid_ = 0;
  typedetail_ = 0;
  canplay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjnextaction::~gdmjnextaction() {
  SharedDtor();
}

void gdmjnextaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjnextaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjnextaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjnextaction_descriptor_;
}

const gdmjnextaction& gdmjnextaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjnextaction* gdmjnextaction::default_instance_ = NULL;

gdmjnextaction* gdmjnextaction::New() const {
  return new gdmjnextaction;
}

void gdmjnextaction::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    tarchairid_ = 0;
    actpokerid_ = 0;
    typedetail_ = 0;
    canplay_ = 0;
  }
  actchairid_.Clear();
  actiontype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjnextaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 actchairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_actchairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actchairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_actchairid;
        if (input->ExpectTag(16)) goto parse_tarchairid;
        break;
      }

      // optional int32 tarchairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tarchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tarchairid_)));
          set_has_tarchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actiontype;
        break;
      }

      // repeated int32 actiontype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_actiontype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actiontype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actiontype;
        if (input->ExpectTag(32)) goto parse_actpokerid;
        break;
      }

      // optional int32 actpokerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actpokerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actpokerid_)));
          set_has_actpokerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_typedetail;
        break;
      }

      // optional int32 typedetail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typedetail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typedetail_)));
          set_has_typedetail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_canplay;
        break;
      }

      // optional int32 canplay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canplay_)));
          set_has_canplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjnextaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 actchairid = 1;
  for (int i = 0; i < this->actchairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->actchairid(i), output);
  }

  // optional int32 tarchairid = 2;
  if (has_tarchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tarchairid(), output);
  }

  // repeated int32 actiontype = 3;
  for (int i = 0; i < this->actiontype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->actiontype(i), output);
  }

  // optional int32 actpokerid = 4;
  if (has_actpokerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actpokerid(), output);
  }

  // optional int32 typedetail = 5;
  if (has_typedetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->typedetail(), output);
  }

  // optional int32 canplay = 6;
  if (has_canplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->canplay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjnextaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 actchairid = 1;
  for (int i = 0; i < this->actchairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->actchairid(i), target);
  }

  // optional int32 tarchairid = 2;
  if (has_tarchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tarchairid(), target);
  }

  // repeated int32 actiontype = 3;
  for (int i = 0; i < this->actiontype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->actiontype(i), target);
  }

  // optional int32 actpokerid = 4;
  if (has_actpokerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actpokerid(), target);
  }

  // optional int32 typedetail = 5;
  if (has_typedetail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->typedetail(), target);
  }

  // optional int32 canplay = 6;
  if (has_canplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->canplay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjnextaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 tarchairid = 2;
    if (has_tarchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tarchairid());
    }

    // optional int32 actpokerid = 4;
    if (has_actpokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actpokerid());
    }

    // optional int32 typedetail = 5;
    if (has_typedetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typedetail());
    }

    // optional int32 canplay = 6;
    if (has_canplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canplay());
    }

  }
  // repeated int32 actchairid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->actchairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actchairid(i));
    }
    total_size += 1 * this->actchairid_size() + data_size;
  }

  // repeated int32 actiontype = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->actiontype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actiontype(i));
    }
    total_size += 1 * this->actiontype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjnextaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjnextaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjnextaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjnextaction::MergeFrom(const gdmjnextaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  actchairid_.MergeFrom(from.actchairid_);
  actiontype_.MergeFrom(from.actiontype_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tarchairid()) {
      set_tarchairid(from.tarchairid());
    }
    if (from.has_actpokerid()) {
      set_actpokerid(from.actpokerid());
    }
    if (from.has_typedetail()) {
      set_typedetail(from.typedetail());
    }
    if (from.has_canplay()) {
      set_canplay(from.canplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjnextaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjnextaction::CopyFrom(const gdmjnextaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjnextaction::IsInitialized() const {

  return true;
}

void gdmjnextaction::Swap(gdmjnextaction* other) {
  if (other != this) {
    actchairid_.Swap(&other->actchairid_);
    std::swap(tarchairid_, other->tarchairid_);
    actiontype_.Swap(&other->actiontype_);
    std::swap(actpokerid_, other->actpokerid_);
    std::swap(typedetail_, other->typedetail_);
    std::swap(canplay_, other->canplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjnextaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjnextaction_descriptor_;
  metadata.reflection = gdmjnextaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjviprecord::kRoundidFieldNumber;
const int gdmjviprecord::kScoreFieldNumber;
#endif  // !_MSC_VER

gdmjviprecord::gdmjviprecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjviprecord::InitAsDefaultInstance() {
}

gdmjviprecord::gdmjviprecord(const gdmjviprecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjviprecord::SharedCtor() {
  _cached_size_ = 0;
  roundid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjviprecord::~gdmjviprecord() {
  SharedDtor();
}

void gdmjviprecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjviprecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjviprecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjviprecord_descriptor_;
}

const gdmjviprecord& gdmjviprecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjviprecord* gdmjviprecord::default_instance_ = NULL;

gdmjviprecord* gdmjviprecord::New() const {
  return new gdmjviprecord;
}

void gdmjviprecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roundid_ = 0;
  }
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjviprecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roundid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundid_)));
          set_has_roundid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // repeated int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjviprecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roundid = 1;
  if (has_roundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roundid(), output);
  }

  // repeated int32 score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjviprecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roundid = 1;
  if (has_roundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roundid(), target);
  }

  // repeated int32 score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjviprecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roundid = 1;
    if (has_roundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundid());
    }

  }
  // repeated int32 score = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjviprecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjviprecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjviprecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjviprecord::MergeFrom(const gdmjviprecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roundid()) {
      set_roundid(from.roundid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjviprecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjviprecord::CopyFrom(const gdmjviprecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjviprecord::IsInitialized() const {

  return true;
}

void gdmjviprecord::Swap(gdmjviprecord* other) {
  if (other != this) {
    std::swap(roundid_, other->roundid_);
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjviprecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjviprecord_descriptor_;
  metadata.reflection = gdmjviprecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mjvipinfo::kViptypeFieldNumber;
#endif  // !_MSC_VER

mjvipinfo::mjvipinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mjvipinfo::InitAsDefaultInstance() {
}

mjvipinfo::mjvipinfo(const mjvipinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mjvipinfo::SharedCtor() {
  _cached_size_ = 0;
  viptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mjvipinfo::~mjvipinfo() {
  SharedDtor();
}

void mjvipinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mjvipinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mjvipinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mjvipinfo_descriptor_;
}

const mjvipinfo& mjvipinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

mjvipinfo* mjvipinfo::default_instance_ = NULL;

mjvipinfo* mjvipinfo::New() const {
  return new mjvipinfo;
}

void mjvipinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mjvipinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 viptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptype_)));
          set_has_viptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mjvipinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 viptype = 1;
  if (has_viptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mjvipinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 viptype = 1;
  if (has_viptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mjvipinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 viptype = 1;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mjvipinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mjvipinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mjvipinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mjvipinfo::MergeFrom(const mjvipinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viptype()) {
      set_viptype(from.viptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mjvipinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mjvipinfo::CopyFrom(const mjvipinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mjvipinfo::IsInitialized() const {

  return true;
}

void mjvipinfo::Swap(mjvipinfo* other) {
  if (other != this) {
    std::swap(viptype_, other->viptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mjvipinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mjvipinfo_descriptor_;
  metadata.reflection = mjvipinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjplaydetail::kChairidFieldNumber;
const int gdmjplaydetail::kWinnumFieldNumber;
const int gdmjplaydetail::kZimonumFieldNumber;
const int gdmjplaydetail::kHunumFieldNumber;
const int gdmjplaydetail::kDianpaonumFieldNumber;
const int gdmjplaydetail::kJiepaonumFieldNumber;
const int gdmjplaydetail::kAngangnumFieldNumber;
const int gdmjplaydetail::kMinggangnumFieldNumber;
const int gdmjplaydetail::kWuguizimoFieldNumber;
const int gdmjplaydetail::kYouguizimoFieldNumber;
const int gdmjplaydetail::kZhongmanumFieldNumber;
const int gdmjplaydetail::kMaxMultipleFieldNumber;
#endif  // !_MSC_VER

gdmjplaydetail::gdmjplaydetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjplaydetail::InitAsDefaultInstance() {
}

gdmjplaydetail::gdmjplaydetail(const gdmjplaydetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjplaydetail::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  winnum_ = 0;
  zimonum_ = 0;
  hunum_ = 0;
  dianpaonum_ = 0;
  jiepaonum_ = 0;
  angangnum_ = 0;
  minggangnum_ = 0;
  wuguizimo_ = 0;
  youguizimo_ = 0;
  zhongmanum_ = 0;
  maxmultiple_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjplaydetail::~gdmjplaydetail() {
  SharedDtor();
}

void gdmjplaydetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjplaydetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjplaydetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjplaydetail_descriptor_;
}

const gdmjplaydetail& gdmjplaydetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjplaydetail* gdmjplaydetail::default_instance_ = NULL;

gdmjplaydetail* gdmjplaydetail::New() const {
  return new gdmjplaydetail;
}

void gdmjplaydetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    winnum_ = 0;
    zimonum_ = 0;
    hunum_ = 0;
    dianpaonum_ = 0;
    jiepaonum_ = 0;
    angangnum_ = 0;
    minggangnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wuguizimo_ = 0;
    youguizimo_ = 0;
    zhongmanum_ = 0;
    maxmultiple_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjplaydetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zimonum;
        break;
      }

      // optional int32 zimonum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zimonum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zimonum_)));
          set_has_zimonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hunum;
        break;
      }

      // optional int32 hunum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hunum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunum_)));
          set_has_hunum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dianpaonum;
        break;
      }

      // optional int32 dianpaonum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dianpaonum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dianpaonum_)));
          set_has_dianpaonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jiepaonum;
        break;
      }

      // optional int32 jiepaonum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiepaonum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jiepaonum_)));
          set_has_jiepaonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_angangnum;
        break;
      }

      // optional int32 angangnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angangnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angangnum_)));
          set_has_angangnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_minggangnum;
        break;
      }

      // optional int32 minggangnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minggangnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minggangnum_)));
          set_has_minggangnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wuguizimo;
        break;
      }

      // optional int32 wuguizimo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wuguizimo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wuguizimo_)));
          set_has_wuguizimo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_youguizimo;
        break;
      }

      // optional int32 youguizimo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youguizimo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youguizimo_)));
          set_has_youguizimo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_zhongmanum;
        break;
      }

      // optional int32 zhongmanum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhongmanum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhongmanum_)));
          set_has_zhongmanum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maxMultiple;
        break;
      }

      // optional int32 maxMultiple = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmultiple_)));
          set_has_maxmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjplaydetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 winnum = 2;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winnum(), output);
  }

  // optional int32 zimonum = 3;
  if (has_zimonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zimonum(), output);
  }

  // optional int32 hunum = 4;
  if (has_hunum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hunum(), output);
  }

  // optional int32 dianpaonum = 5;
  if (has_dianpaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dianpaonum(), output);
  }

  // optional int32 jiepaonum = 6;
  if (has_jiepaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->jiepaonum(), output);
  }

  // optional int32 angangnum = 7;
  if (has_angangnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->angangnum(), output);
  }

  // optional int32 minggangnum = 8;
  if (has_minggangnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->minggangnum(), output);
  }

  // optional int32 wuguizimo = 9;
  if (has_wuguizimo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->wuguizimo(), output);
  }

  // optional int32 youguizimo = 10;
  if (has_youguizimo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->youguizimo(), output);
  }

  // optional int32 zhongmanum = 11;
  if (has_zhongmanum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->zhongmanum(), output);
  }

  // optional int32 maxMultiple = 12;
  if (has_maxmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->maxmultiple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjplaydetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 winnum = 2;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winnum(), target);
  }

  // optional int32 zimonum = 3;
  if (has_zimonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zimonum(), target);
  }

  // optional int32 hunum = 4;
  if (has_hunum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hunum(), target);
  }

  // optional int32 dianpaonum = 5;
  if (has_dianpaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dianpaonum(), target);
  }

  // optional int32 jiepaonum = 6;
  if (has_jiepaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->jiepaonum(), target);
  }

  // optional int32 angangnum = 7;
  if (has_angangnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->angangnum(), target);
  }

  // optional int32 minggangnum = 8;
  if (has_minggangnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->minggangnum(), target);
  }

  // optional int32 wuguizimo = 9;
  if (has_wuguizimo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->wuguizimo(), target);
  }

  // optional int32 youguizimo = 10;
  if (has_youguizimo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->youguizimo(), target);
  }

  // optional int32 zhongmanum = 11;
  if (has_zhongmanum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->zhongmanum(), target);
  }

  // optional int32 maxMultiple = 12;
  if (has_maxmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->maxmultiple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjplaydetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 winnum = 2;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional int32 zimonum = 3;
    if (has_zimonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zimonum());
    }

    // optional int32 hunum = 4;
    if (has_hunum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hunum());
    }

    // optional int32 dianpaonum = 5;
    if (has_dianpaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dianpaonum());
    }

    // optional int32 jiepaonum = 6;
    if (has_jiepaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jiepaonum());
    }

    // optional int32 angangnum = 7;
    if (has_angangnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angangnum());
    }

    // optional int32 minggangnum = 8;
    if (has_minggangnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minggangnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 wuguizimo = 9;
    if (has_wuguizimo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wuguizimo());
    }

    // optional int32 youguizimo = 10;
    if (has_youguizimo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youguizimo());
    }

    // optional int32 zhongmanum = 11;
    if (has_zhongmanum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhongmanum());
    }

    // optional int32 maxMultiple = 12;
    if (has_maxmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmultiple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjplaydetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjplaydetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjplaydetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjplaydetail::MergeFrom(const gdmjplaydetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_zimonum()) {
      set_zimonum(from.zimonum());
    }
    if (from.has_hunum()) {
      set_hunum(from.hunum());
    }
    if (from.has_dianpaonum()) {
      set_dianpaonum(from.dianpaonum());
    }
    if (from.has_jiepaonum()) {
      set_jiepaonum(from.jiepaonum());
    }
    if (from.has_angangnum()) {
      set_angangnum(from.angangnum());
    }
    if (from.has_minggangnum()) {
      set_minggangnum(from.minggangnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wuguizimo()) {
      set_wuguizimo(from.wuguizimo());
    }
    if (from.has_youguizimo()) {
      set_youguizimo(from.youguizimo());
    }
    if (from.has_zhongmanum()) {
      set_zhongmanum(from.zhongmanum());
    }
    if (from.has_maxmultiple()) {
      set_maxmultiple(from.maxmultiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjplaydetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjplaydetail::CopyFrom(const gdmjplaydetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjplaydetail::IsInitialized() const {

  return true;
}

void gdmjplaydetail::Swap(gdmjplaydetail* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(winnum_, other->winnum_);
    std::swap(zimonum_, other->zimonum_);
    std::swap(hunum_, other->hunum_);
    std::swap(dianpaonum_, other->dianpaonum_);
    std::swap(jiepaonum_, other->jiepaonum_);
    std::swap(angangnum_, other->angangnum_);
    std::swap(minggangnum_, other->minggangnum_);
    std::swap(wuguizimo_, other->wuguizimo_);
    std::swap(youguizimo_, other->youguizimo_);
    std::swap(zhongmanum_, other->zhongmanum_);
    std::swap(maxmultiple_, other->maxmultiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjplaydetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjplaydetail_descriptor_;
  metadata.reflection = gdmjplaydetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjinfo::kMjtypeFieldNumber;
const int gdmjinfo::kTabletypeFieldNumber;
const int gdmjinfo::kTableidFieldNumber;
const int gdmjinfo::kTablemarkFieldNumber;
const int gdmjinfo::kManumFieldNumber;
const int gdmjinfo::kDoubleamountFieldNumber;
const int gdmjinfo::kPourjettonFieldNumber;
const int gdmjinfo::kFengidFieldNumber;
const int gdmjinfo::kLaizinumFieldNumber;
const int gdmjinfo::kFrameidFieldNumber;
const int gdmjinfo::kStatusFieldNumber;
const int gdmjinfo::kPublicpokerFieldNumber;
const int gdmjinfo::kMaxplayernumFieldNumber;
const int gdmjinfo::kPlayernumFieldNumber;
const int gdmjinfo::kViptableFieldNumber;
const int gdmjinfo::kTimemarkFieldNumber;
const int gdmjinfo::kBankerposFieldNumber;
const int gdmjinfo::kPrevposFieldNumber;
const int gdmjinfo::kUserstateFieldNumber;
const int gdmjinfo::kBankercountFieldNumber;
const int gdmjinfo::kBeingpokerFieldNumber;
const int gdmjinfo::kActiontimeFieldNumber;
const int gdmjinfo::kOwneridFieldNumber;
const int gdmjinfo::kSituserFieldNumber;
const int gdmjinfo::kStanduserFieldNumber;
const int gdmjinfo::kNextinfoFieldNumber;
const int gdmjinfo::kWinchairlistFieldNumber;
const int gdmjinfo::kTableuseridFieldNumber;
const int gdmjinfo::kMaxvipnumFieldNumber;
const int gdmjinfo::kUsevipnumFieldNumber;
const int gdmjinfo::kViprecordFieldNumber;
const int gdmjinfo::kRecordlistFieldNumber;
const int gdmjinfo::kGuilistFieldNumber;
const int gdmjinfo::kChihulistFieldNumber;
const int gdmjinfo::kWintypeFieldNumber;
const int gdmjinfo::kDissolveinfoFieldNumber;
const int gdmjinfo::kStractionFieldNumber;
const int gdmjinfo::kPaytypeFieldNumber;
const int gdmjinfo::kPaywayFieldNumber;
const int gdmjinfo::kPaynumFieldNumber;
const int gdmjinfo::kGenzhuangFieldNumber;
const int gdmjinfo::kJulebuidFieldNumber;
const int gdmjinfo::kJulebutypeFieldNumber;
#endif  // !_MSC_VER

gdmjinfo::gdmjinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjinfo::InitAsDefaultInstance() {
  nextinfo_ = const_cast< ::progame::gdmjnextaction*>(&::progame::gdmjnextaction::default_instance());
  viprecord_ = const_cast< ::progame::gdmjviprecord*>(&::progame::gdmjviprecord::default_instance());
}

gdmjinfo::gdmjinfo(const gdmjinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjinfo::SharedCtor() {
  _cached_size_ = 0;
  mjtype_ = 0;
  tabletype_ = 0;
  tableid_ = 0;
  tablemark_ = 0;
  manum_ = 0;
  doubleamount_ = 0;
  pourjetton_ = 0;
  fengid_ = 0;
  laizinum_ = 0;
  frameid_ = 0;
  status_ = 0;
  maxplayernum_ = 0;
  playernum_ = 0;
  viptable_ = 0;
  timemark_ = 0;
  bankerpos_ = 0;
  prevpos_ = 0;
  userstate_ = 0;
  bankercount_ = 0;
  beingpoker_ = 0;
  actiontime_ = 0;
  ownerid_ = 0;
  nextinfo_ = NULL;
  tableuserid_ = 0;
  maxvipnum_ = 0;
  usevipnum_ = 0;
  viprecord_ = NULL;
  wintype_ = 0;
  dissolveinfo_ = 0;
  straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paytype_ = 0;
  payway_ = 0;
  paynum_ = 0;
  genzhuang_ = 0;
  julebuid_ = 0;
  julebutype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjinfo::~gdmjinfo() {
  SharedDtor();
}

void gdmjinfo::SharedDtor() {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (this != default_instance_) {
    delete nextinfo_;
    delete viprecord_;
  }
}

void gdmjinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjinfo_descriptor_;
}

const gdmjinfo& gdmjinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjinfo* gdmjinfo::default_instance_ = NULL;

gdmjinfo* gdmjinfo::New() const {
  return new gdmjinfo;
}

void gdmjinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mjtype_ = 0;
    tabletype_ = 0;
    tableid_ = 0;
    tablemark_ = 0;
    manum_ = 0;
    doubleamount_ = 0;
    pourjetton_ = 0;
    fengid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    laizinum_ = 0;
    frameid_ = 0;
    status_ = 0;
    maxplayernum_ = 0;
    playernum_ = 0;
    viptable_ = 0;
    timemark_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bankerpos_ = 0;
    prevpos_ = 0;
    userstate_ = 0;
    bankercount_ = 0;
    beingpoker_ = 0;
    actiontime_ = 0;
    ownerid_ = 0;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (has_nextinfo()) {
      if (nextinfo_ != NULL) nextinfo_->::progame::gdmjnextaction::Clear();
    }
    tableuserid_ = 0;
    maxvipnum_ = 0;
    usevipnum_ = 0;
    if (has_viprecord()) {
      if (viprecord_ != NULL) viprecord_->::progame::gdmjviprecord::Clear();
    }
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    wintype_ = 0;
    dissolveinfo_ = 0;
    if (has_straction()) {
      if (straction_ != &::google::protobuf::internal::kEmptyString) {
        straction_->clear();
      }
    }
    paytype_ = 0;
    payway_ = 0;
    paynum_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    genzhuang_ = 0;
    julebuid_ = 0;
    julebutype_ = 0;
  }
  publicpoker_.Clear();
  situser_.Clear();
  standuser_.Clear();
  winchairlist_.Clear();
  recordlist_.Clear();
  guilist_.Clear();
  chihulist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mjtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjtype_)));
          set_has_mjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tableid;
        break;
      }

      // optional int32 tableid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tablemark;
        break;
      }

      // optional int32 tablemark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemark_)));
          set_has_tablemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_manum;
        break;
      }

      // optional int32 manum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manum_)));
          set_has_manum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_doubleamount;
        break;
      }

      // optional int32 doubleamount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubleamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doubleamount_)));
          set_has_doubleamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pourjetton;
        break;
      }

      // optional int32 pourjetton = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourjetton_)));
          set_has_pourjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fengid;
        break;
      }

      // optional int32 fengid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fengid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fengid_)));
          set_has_fengid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_laizinum;
        break;
      }

      // optional int32 laizinum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizinum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizinum_)));
          set_has_laizinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_frameid;
        break;
      }

      // optional int32 frameid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }

      // optional int32 status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_publicpoker;
        break;
      }

      // repeated int32 publicpoker = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publicpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_publicpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_publicpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_publicpoker;
        if (input->ExpectTag(104)) goto parse_maxplayernum;
        break;
      }

      // optional int32 maxplayernum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxplayernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_playernum;
        break;
      }

      // optional int32 playernum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_viptable;
        break;
      }

      // optional int32 viptable = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viptable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptable_)));
          set_has_viptable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bankerpos;
        break;
      }

      // optional int32 bankerpos = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerpos_)));
          set_has_bankerpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_prevpos;
        break;
      }

      // optional int32 prevpos = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevpos_)));
          set_has_prevpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_userstate;
        break;
      }

      // optional int32 userstate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstate_)));
          set_has_userstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bankercount;
        break;
      }

      // optional int32 bankercount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankercount_)));
          set_has_bankercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_beingpoker;
        break;
      }

      // optional int32 beingpoker = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beingpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beingpoker_)));
          set_has_beingpoker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_actiontime;
        break;
      }

      // optional int32 actiontime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actiontime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontime_)));
          set_has_actiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_situser;
        break;
      }

      // repeated int32 situser = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_situser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_situser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_situser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_situser;
        if (input->ExpectTag(200)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_standuser;
        if (input->ExpectTag(210)) goto parse_nextinfo;
        break;
      }

      // optional .progame.gdmjnextaction nextinfo = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_winchairlist;
        break;
      }

      // repeated int32 winchairlist = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winchairlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216, input, this->mutable_winchairlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winchairlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_winchairlist;
        if (input->ExpectTag(224)) goto parse_tableuserid;
        break;
      }

      // optional int32 tableuserid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableuserid_)));
          set_has_tableuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_maxvipnum;
        break;
      }

      // optional int32 maxvipnum = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxvipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxvipnum_)));
          set_has_maxvipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_usevipnum;
        break;
      }

      // optional int32 usevipnum = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usevipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usevipnum_)));
          set_has_usevipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_viprecord;
        break;
      }

      // optional .progame.gdmjviprecord viprecord = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_viprecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viprecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_recordlist;
        break;
      }

      // repeated .progame.gdmjviprecord recordlist = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_recordlist;
        if (input->ExpectTag(264)) goto parse_guilist;
        break;
      }

      // repeated int32 guilist = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guilist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 264, input, this->mutable_guilist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guilist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_guilist;
        if (input->ExpectTag(272)) goto parse_chihulist;
        break;
      }

      // repeated int32 chihulist = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chihulist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272, input, this->mutable_chihulist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chihulist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_chihulist;
        if (input->ExpectTag(280)) goto parse_wintype;
        break;
      }

      // optional int32 wintype = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype_)));
          set_has_wintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_dissolveinfo;
        break;
      }

      // optional int32 dissolveinfo = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolveinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissolveinfo_)));
          set_has_dissolveinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_straction;
        break;
      }

      // optional string straction = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_straction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straction().data(), this->straction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_paytype;
        break;
      }

      // optional int32 paytype = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytype_)));
          set_has_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_payway;
        break;
      }

      // optional int32 payway = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payway_)));
          set_has_payway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_paynum;
        break;
      }

      // optional int32 paynum = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paynum_)));
          set_has_paynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_genzhuang;
        break;
      }

      // optional int32 genzhuang = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genzhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genzhuang_)));
          set_has_genzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_julebuid;
        break;
      }

      // optional int32 julebuid = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebuid_)));
          set_has_julebuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_julebutype;
        break;
      }

      // optional int32 julebutype = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebutype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebutype_)));
          set_has_julebutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mjtype(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 tableid = 3;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableid(), output);
  }

  // optional int32 tablemark = 4;
  if (has_tablemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tablemark(), output);
  }

  // optional int32 manum = 5;
  if (has_manum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->manum(), output);
  }

  // optional int32 doubleamount = 6;
  if (has_doubleamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->doubleamount(), output);
  }

  // optional int32 pourjetton = 7;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pourjetton(), output);
  }

  // optional int32 fengid = 8;
  if (has_fengid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fengid(), output);
  }

  // optional int32 laizinum = 9;
  if (has_laizinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->laizinum(), output);
  }

  // optional int32 frameid = 10;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->frameid(), output);
  }

  // optional int32 status = 11;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->status(), output);
  }

  // repeated int32 publicpoker = 12;
  for (int i = 0; i < this->publicpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->publicpoker(i), output);
  }

  // optional int32 maxplayernum = 13;
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxplayernum(), output);
  }

  // optional int32 playernum = 14;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->playernum(), output);
  }

  // optional int32 viptable = 15;
  if (has_viptable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->viptable(), output);
  }

  // optional int32 timemark = 16;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->timemark(), output);
  }

  // optional int32 bankerpos = 17;
  if (has_bankerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bankerpos(), output);
  }

  // optional int32 prevpos = 18;
  if (has_prevpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->prevpos(), output);
  }

  // optional int32 userstate = 19;
  if (has_userstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->userstate(), output);
  }

  // optional int32 bankercount = 20;
  if (has_bankercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bankercount(), output);
  }

  // optional int32 beingpoker = 21;
  if (has_beingpoker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->beingpoker(), output);
  }

  // optional int32 actiontime = 22;
  if (has_actiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->actiontime(), output);
  }

  // optional int32 ownerid = 23;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->ownerid(), output);
  }

  // repeated int32 situser = 24;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->situser(i), output);
  }

  // repeated int32 standuser = 25;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->standuser(i), output);
  }

  // optional .progame.gdmjnextaction nextinfo = 26;
  if (has_nextinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->nextinfo(), output);
  }

  // repeated int32 winchairlist = 27;
  for (int i = 0; i < this->winchairlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->winchairlist(i), output);
  }

  // optional int32 tableuserid = 28;
  if (has_tableuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->tableuserid(), output);
  }

  // optional int32 maxvipnum = 29;
  if (has_maxvipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->maxvipnum(), output);
  }

  // optional int32 usevipnum = 30;
  if (has_usevipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->usevipnum(), output);
  }

  // optional .progame.gdmjviprecord viprecord = 31;
  if (has_viprecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->viprecord(), output);
  }

  // repeated .progame.gdmjviprecord recordlist = 32;
  for (int i = 0; i < this->recordlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->recordlist(i), output);
  }

  // repeated int32 guilist = 33;
  for (int i = 0; i < this->guilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      33, this->guilist(i), output);
  }

  // repeated int32 chihulist = 34;
  for (int i = 0; i < this->chihulist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->chihulist(i), output);
  }

  // optional int32 wintype = 35;
  if (has_wintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->wintype(), output);
  }

  // optional int32 dissolveinfo = 37;
  if (has_dissolveinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->dissolveinfo(), output);
  }

  // optional string straction = 38;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->straction(), output);
  }

  // optional int32 paytype = 39;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->paytype(), output);
  }

  // optional int32 payway = 40;
  if (has_payway()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->payway(), output);
  }

  // optional int32 paynum = 41;
  if (has_paynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->paynum(), output);
  }

  // optional int32 genzhuang = 42;
  if (has_genzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->genzhuang(), output);
  }

  // optional int32 julebuid = 43;
  if (has_julebuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->julebuid(), output);
  }

  // optional int32 julebutype = 44;
  if (has_julebutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->julebutype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mjtype(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 tableid = 3;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableid(), target);
  }

  // optional int32 tablemark = 4;
  if (has_tablemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tablemark(), target);
  }

  // optional int32 manum = 5;
  if (has_manum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->manum(), target);
  }

  // optional int32 doubleamount = 6;
  if (has_doubleamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->doubleamount(), target);
  }

  // optional int32 pourjetton = 7;
  if (has_pourjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pourjetton(), target);
  }

  // optional int32 fengid = 8;
  if (has_fengid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fengid(), target);
  }

  // optional int32 laizinum = 9;
  if (has_laizinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->laizinum(), target);
  }

  // optional int32 frameid = 10;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->frameid(), target);
  }

  // optional int32 status = 11;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->status(), target);
  }

  // repeated int32 publicpoker = 12;
  for (int i = 0; i < this->publicpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->publicpoker(i), target);
  }

  // optional int32 maxplayernum = 13;
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxplayernum(), target);
  }

  // optional int32 playernum = 14;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->playernum(), target);
  }

  // optional int32 viptable = 15;
  if (has_viptable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->viptable(), target);
  }

  // optional int32 timemark = 16;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->timemark(), target);
  }

  // optional int32 bankerpos = 17;
  if (has_bankerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bankerpos(), target);
  }

  // optional int32 prevpos = 18;
  if (has_prevpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->prevpos(), target);
  }

  // optional int32 userstate = 19;
  if (has_userstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->userstate(), target);
  }

  // optional int32 bankercount = 20;
  if (has_bankercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bankercount(), target);
  }

  // optional int32 beingpoker = 21;
  if (has_beingpoker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->beingpoker(), target);
  }

  // optional int32 actiontime = 22;
  if (has_actiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->actiontime(), target);
  }

  // optional int32 ownerid = 23;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->ownerid(), target);
  }

  // repeated int32 situser = 24;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->situser(i), target);
  }

  // repeated int32 standuser = 25;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->standuser(i), target);
  }

  // optional .progame.gdmjnextaction nextinfo = 26;
  if (has_nextinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->nextinfo(), target);
  }

  // repeated int32 winchairlist = 27;
  for (int i = 0; i < this->winchairlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(27, this->winchairlist(i), target);
  }

  // optional int32 tableuserid = 28;
  if (has_tableuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->tableuserid(), target);
  }

  // optional int32 maxvipnum = 29;
  if (has_maxvipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->maxvipnum(), target);
  }

  // optional int32 usevipnum = 30;
  if (has_usevipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->usevipnum(), target);
  }

  // optional .progame.gdmjviprecord viprecord = 31;
  if (has_viprecord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->viprecord(), target);
  }

  // repeated .progame.gdmjviprecord recordlist = 32;
  for (int i = 0; i < this->recordlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->recordlist(i), target);
  }

  // repeated int32 guilist = 33;
  for (int i = 0; i < this->guilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(33, this->guilist(i), target);
  }

  // repeated int32 chihulist = 34;
  for (int i = 0; i < this->chihulist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(34, this->chihulist(i), target);
  }

  // optional int32 wintype = 35;
  if (has_wintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->wintype(), target);
  }

  // optional int32 dissolveinfo = 37;
  if (has_dissolveinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->dissolveinfo(), target);
  }

  // optional string straction = 38;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->straction(), target);
  }

  // optional int32 paytype = 39;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->paytype(), target);
  }

  // optional int32 payway = 40;
  if (has_payway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->payway(), target);
  }

  // optional int32 paynum = 41;
  if (has_paynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->paynum(), target);
  }

  // optional int32 genzhuang = 42;
  if (has_genzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->genzhuang(), target);
  }

  // optional int32 julebuid = 43;
  if (has_julebuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->julebuid(), target);
  }

  // optional int32 julebutype = 44;
  if (has_julebutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->julebutype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mjtype = 1;
    if (has_mjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjtype());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 tableid = 3;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tablemark = 4;
    if (has_tablemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemark());
    }

    // optional int32 manum = 5;
    if (has_manum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manum());
    }

    // optional int32 doubleamount = 6;
    if (has_doubleamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doubleamount());
    }

    // optional int32 pourjetton = 7;
    if (has_pourjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourjetton());
    }

    // optional int32 fengid = 8;
    if (has_fengid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fengid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 laizinum = 9;
    if (has_laizinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizinum());
    }

    // optional int32 frameid = 10;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 status = 11;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 maxplayernum = 13;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

    // optional int32 playernum = 14;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

    // optional int32 viptable = 15;
    if (has_viptable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptable());
    }

    // optional int32 timemark = 16;
    if (has_timemark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bankerpos = 17;
    if (has_bankerpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerpos());
    }

    // optional int32 prevpos = 18;
    if (has_prevpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevpos());
    }

    // optional int32 userstate = 19;
    if (has_userstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstate());
    }

    // optional int32 bankercount = 20;
    if (has_bankercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankercount());
    }

    // optional int32 beingpoker = 21;
    if (has_beingpoker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beingpoker());
    }

    // optional int32 actiontime = 22;
    if (has_actiontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontime());
    }

    // optional int32 ownerid = 23;
    if (has_ownerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional .progame.gdmjnextaction nextinfo = 26;
    if (has_nextinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nextinfo());
    }

    // optional int32 tableuserid = 28;
    if (has_tableuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableuserid());
    }

    // optional int32 maxvipnum = 29;
    if (has_maxvipnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxvipnum());
    }

    // optional int32 usevipnum = 30;
    if (has_usevipnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usevipnum());
    }

    // optional .progame.gdmjviprecord viprecord = 31;
    if (has_viprecord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viprecord());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional int32 wintype = 35;
    if (has_wintype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype());
    }

    // optional int32 dissolveinfo = 37;
    if (has_dissolveinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissolveinfo());
    }

    // optional string straction = 38;
    if (has_straction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straction());
    }

    // optional int32 paytype = 39;
    if (has_paytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }

    // optional int32 payway = 40;
    if (has_payway()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payway());
    }

    // optional int32 paynum = 41;
    if (has_paynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paynum());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 genzhuang = 42;
    if (has_genzhuang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genzhuang());
    }

    // optional int32 julebuid = 43;
    if (has_julebuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebuid());
    }

    // optional int32 julebutype = 44;
    if (has_julebutype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebutype());
    }

  }
  // repeated int32 publicpoker = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->publicpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->publicpoker(i));
    }
    total_size += 1 * this->publicpoker_size() + data_size;
  }

  // repeated int32 situser = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->situser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->situser(i));
    }
    total_size += 2 * this->situser_size() + data_size;
  }

  // repeated int32 standuser = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 2 * this->standuser_size() + data_size;
  }

  // repeated int32 winchairlist = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->winchairlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winchairlist(i));
    }
    total_size += 2 * this->winchairlist_size() + data_size;
  }

  // repeated .progame.gdmjviprecord recordlist = 32;
  total_size += 2 * this->recordlist_size();
  for (int i = 0; i < this->recordlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordlist(i));
  }

  // repeated int32 guilist = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->guilist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guilist(i));
    }
    total_size += 2 * this->guilist_size() + data_size;
  }

  // repeated int32 chihulist = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->chihulist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chihulist(i));
    }
    total_size += 2 * this->chihulist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjinfo::MergeFrom(const gdmjinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  publicpoker_.MergeFrom(from.publicpoker_);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  winchairlist_.MergeFrom(from.winchairlist_);
  recordlist_.MergeFrom(from.recordlist_);
  guilist_.MergeFrom(from.guilist_);
  chihulist_.MergeFrom(from.chihulist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjtype()) {
      set_mjtype(from.mjtype());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablemark()) {
      set_tablemark(from.tablemark());
    }
    if (from.has_manum()) {
      set_manum(from.manum());
    }
    if (from.has_doubleamount()) {
      set_doubleamount(from.doubleamount());
    }
    if (from.has_pourjetton()) {
      set_pourjetton(from.pourjetton());
    }
    if (from.has_fengid()) {
      set_fengid(from.fengid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_laizinum()) {
      set_laizinum(from.laizinum());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
    if (from.has_viptable()) {
      set_viptable(from.viptable());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bankerpos()) {
      set_bankerpos(from.bankerpos());
    }
    if (from.has_prevpos()) {
      set_prevpos(from.prevpos());
    }
    if (from.has_userstate()) {
      set_userstate(from.userstate());
    }
    if (from.has_bankercount()) {
      set_bankercount(from.bankercount());
    }
    if (from.has_beingpoker()) {
      set_beingpoker(from.beingpoker());
    }
    if (from.has_actiontime()) {
      set_actiontime(from.actiontime());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_nextinfo()) {
      mutable_nextinfo()->::progame::gdmjnextaction::MergeFrom(from.nextinfo());
    }
    if (from.has_tableuserid()) {
      set_tableuserid(from.tableuserid());
    }
    if (from.has_maxvipnum()) {
      set_maxvipnum(from.maxvipnum());
    }
    if (from.has_usevipnum()) {
      set_usevipnum(from.usevipnum());
    }
    if (from.has_viprecord()) {
      mutable_viprecord()->::progame::gdmjviprecord::MergeFrom(from.viprecord());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_wintype()) {
      set_wintype(from.wintype());
    }
    if (from.has_dissolveinfo()) {
      set_dissolveinfo(from.dissolveinfo());
    }
    if (from.has_straction()) {
      set_straction(from.straction());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_payway()) {
      set_payway(from.payway());
    }
    if (from.has_paynum()) {
      set_paynum(from.paynum());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_genzhuang()) {
      set_genzhuang(from.genzhuang());
    }
    if (from.has_julebuid()) {
      set_julebuid(from.julebuid());
    }
    if (from.has_julebutype()) {
      set_julebutype(from.julebutype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjinfo::CopyFrom(const gdmjinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjinfo::IsInitialized() const {

  return true;
}

void gdmjinfo::Swap(gdmjinfo* other) {
  if (other != this) {
    std::swap(mjtype_, other->mjtype_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(tableid_, other->tableid_);
    std::swap(tablemark_, other->tablemark_);
    std::swap(manum_, other->manum_);
    std::swap(doubleamount_, other->doubleamount_);
    std::swap(pourjetton_, other->pourjetton_);
    std::swap(fengid_, other->fengid_);
    std::swap(laizinum_, other->laizinum_);
    std::swap(frameid_, other->frameid_);
    std::swap(status_, other->status_);
    publicpoker_.Swap(&other->publicpoker_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(playernum_, other->playernum_);
    std::swap(viptable_, other->viptable_);
    std::swap(timemark_, other->timemark_);
    std::swap(bankerpos_, other->bankerpos_);
    std::swap(prevpos_, other->prevpos_);
    std::swap(userstate_, other->userstate_);
    std::swap(bankercount_, other->bankercount_);
    std::swap(beingpoker_, other->beingpoker_);
    std::swap(actiontime_, other->actiontime_);
    std::swap(ownerid_, other->ownerid_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    std::swap(nextinfo_, other->nextinfo_);
    winchairlist_.Swap(&other->winchairlist_);
    std::swap(tableuserid_, other->tableuserid_);
    std::swap(maxvipnum_, other->maxvipnum_);
    std::swap(usevipnum_, other->usevipnum_);
    std::swap(viprecord_, other->viprecord_);
    recordlist_.Swap(&other->recordlist_);
    guilist_.Swap(&other->guilist_);
    chihulist_.Swap(&other->chihulist_);
    std::swap(wintype_, other->wintype_);
    std::swap(dissolveinfo_, other->dissolveinfo_);
    std::swap(straction_, other->straction_);
    std::swap(paytype_, other->paytype_);
    std::swap(payway_, other->payway_);
    std::swap(paynum_, other->paynum_);
    std::swap(genzhuang_, other->genzhuang_);
    std::swap(julebuid_, other->julebuid_);
    std::swap(julebutype_, other->julebutype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjinfo_descriptor_;
  metadata.reflection = gdmjinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjtdh::kMjtypeFieldNumber;
const int gdmjtdh::kTypeguiFieldNumber;
const int gdmjtdh::kManumFieldNumber;
const int gdmjtdh::kShuangguiFieldNumber;
const int gdmjtdh::kKehuqiduiFieldNumber;
const int gdmjtdh::kQiduijiafanFieldNumber;
const int gdmjtdh::kKeqiangganghuFieldNumber;
const int gdmjtdh::kMinggangkeqiangFieldNumber;
const int gdmjtdh::kQianggangquanbaoFieldNumber;
const int gdmjtdh::kGangbaoquanbaoFieldNumber;
const int gdmjtdh::kWuguijiabeiFieldNumber;
const int gdmjtdh::kBudaifengFieldNumber;
const int gdmjtdh::kGengzhuangFieldNumber;
const int gdmjtdh::kJiejiegaoFieldNumber;
#endif  // !_MSC_VER

gdmjtdh::gdmjtdh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjtdh::InitAsDefaultInstance() {
}

gdmjtdh::gdmjtdh(const gdmjtdh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjtdh::SharedCtor() {
  _cached_size_ = 0;
  mjtype_ = 0;
  typegui_ = 0;
  manum_ = 0;
  shuanggui_ = 0;
  kehuqidui_ = 0;
  qiduijiafan_ = 0;
  keqiangganghu_ = 0;
  minggangkeqiang_ = 0;
  qianggangquanbao_ = 0;
  gangbaoquanbao_ = 0;
  wuguijiabei_ = 0;
  budaifeng_ = 0;
  gengzhuang_ = 0;
  jiejiegao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjtdh::~gdmjtdh() {
  SharedDtor();
}

void gdmjtdh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjtdh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjtdh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjtdh_descriptor_;
}

const gdmjtdh& gdmjtdh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjtdh* gdmjtdh::default_instance_ = NULL;

gdmjtdh* gdmjtdh::New() const {
  return new gdmjtdh;
}

void gdmjtdh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mjtype_ = 0;
    typegui_ = 0;
    manum_ = 0;
    shuanggui_ = 0;
    kehuqidui_ = 0;
    qiduijiafan_ = 0;
    keqiangganghu_ = 0;
    minggangkeqiang_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qianggangquanbao_ = 0;
    gangbaoquanbao_ = 0;
    wuguijiabei_ = 0;
    budaifeng_ = 0;
    gengzhuang_ = 0;
    jiejiegao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjtdh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mjtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjtype_)));
          set_has_mjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_typegui;
        break;
      }

      // optional int32 typegui = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typegui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typegui_)));
          set_has_typegui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manum;
        break;
      }

      // optional int32 manum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manum_)));
          set_has_manum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_shuanggui;
        break;
      }

      // optional int32 shuanggui = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shuanggui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shuanggui_)));
          set_has_shuanggui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_kehuqidui;
        break;
      }

      // optional int32 kehuqidui = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kehuqidui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kehuqidui_)));
          set_has_kehuqidui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_qiduijiafan;
        break;
      }

      // optional int32 qiduijiafan = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qiduijiafan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qiduijiafan_)));
          set_has_qiduijiafan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_keqiangganghu;
        break;
      }

      // optional int32 keqiangganghu = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keqiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keqiangganghu_)));
          set_has_keqiangganghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_minggangkeqiang;
        break;
      }

      // optional int32 minggangkeqiang = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minggangkeqiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minggangkeqiang_)));
          set_has_minggangkeqiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_qianggangquanbao;
        break;
      }

      // optional int32 qianggangquanbao = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qianggangquanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qianggangquanbao_)));
          set_has_qianggangquanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gangbaoquanbao;
        break;
      }

      // optional int32 gangbaoquanbao = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangbaoquanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangbaoquanbao_)));
          set_has_gangbaoquanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_wuguijiabei;
        break;
      }

      // optional int32 wuguijiabei = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wuguijiabei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wuguijiabei_)));
          set_has_wuguijiabei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_budaifeng;
        break;
      }

      // optional int32 budaifeng = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_budaifeng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &budaifeng_)));
          set_has_budaifeng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_gengzhuang;
        break;
      }

      // optional int32 gengzhuang = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gengzhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gengzhuang_)));
          set_has_gengzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_jiejiegao;
        break;
      }

      // optional int32 jiejiegao = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiejiegao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jiejiegao_)));
          set_has_jiejiegao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjtdh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mjtype(), output);
  }

  // optional int32 typegui = 2;
  if (has_typegui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typegui(), output);
  }

  // optional int32 manum = 3;
  if (has_manum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->manum(), output);
  }

  // optional int32 shuanggui = 4;
  if (has_shuanggui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shuanggui(), output);
  }

  // optional int32 kehuqidui = 11;
  if (has_kehuqidui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->kehuqidui(), output);
  }

  // optional int32 qiduijiafan = 12;
  if (has_qiduijiafan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->qiduijiafan(), output);
  }

  // optional int32 keqiangganghu = 13;
  if (has_keqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->keqiangganghu(), output);
  }

  // optional int32 minggangkeqiang = 14;
  if (has_minggangkeqiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->minggangkeqiang(), output);
  }

  // optional int32 qianggangquanbao = 15;
  if (has_qianggangquanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->qianggangquanbao(), output);
  }

  // optional int32 gangbaoquanbao = 16;
  if (has_gangbaoquanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gangbaoquanbao(), output);
  }

  // optional int32 wuguijiabei = 17;
  if (has_wuguijiabei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->wuguijiabei(), output);
  }

  // optional int32 budaifeng = 18;
  if (has_budaifeng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->budaifeng(), output);
  }

  // optional int32 gengzhuang = 19;
  if (has_gengzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->gengzhuang(), output);
  }

  // optional int32 jiejiegao = 20;
  if (has_jiejiegao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->jiejiegao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjtdh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mjtype(), target);
  }

  // optional int32 typegui = 2;
  if (has_typegui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typegui(), target);
  }

  // optional int32 manum = 3;
  if (has_manum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->manum(), target);
  }

  // optional int32 shuanggui = 4;
  if (has_shuanggui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shuanggui(), target);
  }

  // optional int32 kehuqidui = 11;
  if (has_kehuqidui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->kehuqidui(), target);
  }

  // optional int32 qiduijiafan = 12;
  if (has_qiduijiafan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->qiduijiafan(), target);
  }

  // optional int32 keqiangganghu = 13;
  if (has_keqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->keqiangganghu(), target);
  }

  // optional int32 minggangkeqiang = 14;
  if (has_minggangkeqiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->minggangkeqiang(), target);
  }

  // optional int32 qianggangquanbao = 15;
  if (has_qianggangquanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->qianggangquanbao(), target);
  }

  // optional int32 gangbaoquanbao = 16;
  if (has_gangbaoquanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gangbaoquanbao(), target);
  }

  // optional int32 wuguijiabei = 17;
  if (has_wuguijiabei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->wuguijiabei(), target);
  }

  // optional int32 budaifeng = 18;
  if (has_budaifeng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->budaifeng(), target);
  }

  // optional int32 gengzhuang = 19;
  if (has_gengzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->gengzhuang(), target);
  }

  // optional int32 jiejiegao = 20;
  if (has_jiejiegao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->jiejiegao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjtdh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mjtype = 1;
    if (has_mjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjtype());
    }

    // optional int32 typegui = 2;
    if (has_typegui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typegui());
    }

    // optional int32 manum = 3;
    if (has_manum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manum());
    }

    // optional int32 shuanggui = 4;
    if (has_shuanggui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shuanggui());
    }

    // optional int32 kehuqidui = 11;
    if (has_kehuqidui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kehuqidui());
    }

    // optional int32 qiduijiafan = 12;
    if (has_qiduijiafan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qiduijiafan());
    }

    // optional int32 keqiangganghu = 13;
    if (has_keqiangganghu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keqiangganghu());
    }

    // optional int32 minggangkeqiang = 14;
    if (has_minggangkeqiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minggangkeqiang());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qianggangquanbao = 15;
    if (has_qianggangquanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qianggangquanbao());
    }

    // optional int32 gangbaoquanbao = 16;
    if (has_gangbaoquanbao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangbaoquanbao());
    }

    // optional int32 wuguijiabei = 17;
    if (has_wuguijiabei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wuguijiabei());
    }

    // optional int32 budaifeng = 18;
    if (has_budaifeng()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->budaifeng());
    }

    // optional int32 gengzhuang = 19;
    if (has_gengzhuang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gengzhuang());
    }

    // optional int32 jiejiegao = 20;
    if (has_jiejiegao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jiejiegao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjtdh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjtdh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjtdh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjtdh::MergeFrom(const gdmjtdh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjtype()) {
      set_mjtype(from.mjtype());
    }
    if (from.has_typegui()) {
      set_typegui(from.typegui());
    }
    if (from.has_manum()) {
      set_manum(from.manum());
    }
    if (from.has_shuanggui()) {
      set_shuanggui(from.shuanggui());
    }
    if (from.has_kehuqidui()) {
      set_kehuqidui(from.kehuqidui());
    }
    if (from.has_qiduijiafan()) {
      set_qiduijiafan(from.qiduijiafan());
    }
    if (from.has_keqiangganghu()) {
      set_keqiangganghu(from.keqiangganghu());
    }
    if (from.has_minggangkeqiang()) {
      set_minggangkeqiang(from.minggangkeqiang());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qianggangquanbao()) {
      set_qianggangquanbao(from.qianggangquanbao());
    }
    if (from.has_gangbaoquanbao()) {
      set_gangbaoquanbao(from.gangbaoquanbao());
    }
    if (from.has_wuguijiabei()) {
      set_wuguijiabei(from.wuguijiabei());
    }
    if (from.has_budaifeng()) {
      set_budaifeng(from.budaifeng());
    }
    if (from.has_gengzhuang()) {
      set_gengzhuang(from.gengzhuang());
    }
    if (from.has_jiejiegao()) {
      set_jiejiegao(from.jiejiegao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjtdh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjtdh::CopyFrom(const gdmjtdh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjtdh::IsInitialized() const {

  return true;
}

void gdmjtdh::Swap(gdmjtdh* other) {
  if (other != this) {
    std::swap(mjtype_, other->mjtype_);
    std::swap(typegui_, other->typegui_);
    std::swap(manum_, other->manum_);
    std::swap(shuanggui_, other->shuanggui_);
    std::swap(kehuqidui_, other->kehuqidui_);
    std::swap(qiduijiafan_, other->qiduijiafan_);
    std::swap(keqiangganghu_, other->keqiangganghu_);
    std::swap(minggangkeqiang_, other->minggangkeqiang_);
    std::swap(qianggangquanbao_, other->qianggangquanbao_);
    std::swap(gangbaoquanbao_, other->gangbaoquanbao_);
    std::swap(wuguijiabei_, other->wuguijiabei_);
    std::swap(budaifeng_, other->budaifeng_);
    std::swap(gengzhuang_, other->gengzhuang_);
    std::swap(jiejiegao_, other->jiejiegao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjtdh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjtdh_descriptor_;
  metadata.reflection = gdmjtdh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjztdh::kMjtypeFieldNumber;
const int gdmjztdh::kTypeguiFieldNumber;
const int gdmjztdh::kManumFieldNumber;
const int gdmjztdh::kShuangguiFieldNumber;
const int gdmjztdh::kKechihuFieldNumber;
const int gdmjztdh::kKehuqiduiFieldNumber;
const int gdmjztdh::kKeqiangganghuFieldNumber;
const int gdmjztdh::kMinggangkeqiangFieldNumber;
const int gdmjztdh::kQianggangquanbaoFieldNumber;
const int gdmjztdh::kGangbaoquanbaoFieldNumber;
const int gdmjztdh::kBudaifengFieldNumber;
const int gdmjztdh::kGengzhuangFieldNumber;
const int gdmjztdh::kSiguihupaiFieldNumber;
const int gdmjztdh::kQiduisibeiFieldNumber;
const int gdmjztdh::kPengpenghuFieldNumber;
const int gdmjztdh::kQingyisesFieldNumber;
const int gdmjztdh::kQuanfengFieldNumber;
const int gdmjztdh::kShisanyaoFieldNumber;
const int gdmjztdh::kYaomeyaoFieldNumber;
const int gdmjztdh::kYaojiujikeFieldNumber;
const int gdmjztdh::kWuguijiabeiFieldNumber;
const int gdmjztdh::kSiguiliangbeiFieldNumber;
#endif  // !_MSC_VER

gdmjztdh::gdmjztdh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjztdh::InitAsDefaultInstance() {
}

gdmjztdh::gdmjztdh(const gdmjztdh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjztdh::SharedCtor() {
  _cached_size_ = 0;
  mjtype_ = 0;
  typegui_ = 0;
  manum_ = 0;
  shuanggui_ = 0;
  kechihu_ = 0;
  kehuqidui_ = 0;
  keqiangganghu_ = 0;
  minggangkeqiang_ = 0;
  qianggangquanbao_ = 0;
  gangbaoquanbao_ = 0;
  budaifeng_ = 0;
  gengzhuang_ = 0;
  siguihupai_ = 0;
  qiduisibei_ = 0;
  pengpenghu_ = 0;
  qingyises_ = 0;
  quanfeng_ = 0;
  shisanyao_ = 0;
  yaomeyao_ = 0;
  yaojiujike_ = 0;
  wuguijiabei_ = 0;
  siguiliangbei_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjztdh::~gdmjztdh() {
  SharedDtor();
}

void gdmjztdh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjztdh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjztdh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjztdh_descriptor_;
}

const gdmjztdh& gdmjztdh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjztdh* gdmjztdh::default_instance_ = NULL;

gdmjztdh* gdmjztdh::New() const {
  return new gdmjztdh;
}

void gdmjztdh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mjtype_ = 0;
    typegui_ = 0;
    manum_ = 0;
    shuanggui_ = 0;
    kechihu_ = 0;
    kehuqidui_ = 0;
    keqiangganghu_ = 0;
    minggangkeqiang_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qianggangquanbao_ = 0;
    gangbaoquanbao_ = 0;
    budaifeng_ = 0;
    gengzhuang_ = 0;
    siguihupai_ = 0;
    qiduisibei_ = 0;
    pengpenghu_ = 0;
    qingyises_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    quanfeng_ = 0;
    shisanyao_ = 0;
    yaomeyao_ = 0;
    yaojiujike_ = 0;
    wuguijiabei_ = 0;
    siguiliangbei_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjztdh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mjtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjtype_)));
          set_has_mjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_typegui;
        break;
      }

      // optional int32 typegui = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typegui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typegui_)));
          set_has_typegui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manum;
        break;
      }

      // optional int32 manum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manum_)));
          set_has_manum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_shuanggui;
        break;
      }

      // optional int32 shuanggui = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shuanggui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shuanggui_)));
          set_has_shuanggui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_kechihu;
        break;
      }

      // optional int32 kechihu = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kechihu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kechihu_)));
          set_has_kechihu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_kehuqidui;
        break;
      }

      // optional int32 kehuqidui = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kehuqidui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kehuqidui_)));
          set_has_kehuqidui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_keqiangganghu;
        break;
      }

      // optional int32 keqiangganghu = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keqiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keqiangganghu_)));
          set_has_keqiangganghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_minggangkeqiang;
        break;
      }

      // optional int32 minggangkeqiang = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minggangkeqiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minggangkeqiang_)));
          set_has_minggangkeqiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_qianggangquanbao;
        break;
      }

      // optional int32 qianggangquanbao = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qianggangquanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qianggangquanbao_)));
          set_has_qianggangquanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_gangbaoquanbao;
        break;
      }

      // optional int32 gangbaoquanbao = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangbaoquanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangbaoquanbao_)));
          set_has_gangbaoquanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_budaifeng;
        break;
      }

      // optional int32 budaifeng = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_budaifeng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &budaifeng_)));
          set_has_budaifeng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_gengzhuang;
        break;
      }

      // optional int32 gengzhuang = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gengzhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gengzhuang_)));
          set_has_gengzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_siguihupai;
        break;
      }

      // optional int32 siguihupai = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_siguihupai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &siguihupai_)));
          set_has_siguihupai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_qiduisibei;
        break;
      }

      // optional int32 qiduisibei = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qiduisibei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qiduisibei_)));
          set_has_qiduisibei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_pengpenghu;
        break;
      }

      // optional int32 pengpenghu = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pengpenghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pengpenghu_)));
          set_has_pengpenghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_qingyises;
        break;
      }

      // optional int32 qingyises = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qingyises:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qingyises_)));
          set_has_qingyises();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_quanfeng;
        break;
      }

      // optional int32 quanfeng = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quanfeng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quanfeng_)));
          set_has_quanfeng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_shisanyao;
        break;
      }

      // optional int32 shisanyao = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shisanyao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shisanyao_)));
          set_has_shisanyao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_yaomeyao;
        break;
      }

      // optional int32 yaomeyao = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaomeyao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yaomeyao_)));
          set_has_yaomeyao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_yaojiujike;
        break;
      }

      // optional int32 yaojiujike = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaojiujike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yaojiujike_)));
          set_has_yaojiujike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_wuguijiabei;
        break;
      }

      // optional int32 wuguijiabei = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wuguijiabei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wuguijiabei_)));
          set_has_wuguijiabei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_siguiliangbei;
        break;
      }

      // optional int32 siguiliangbei = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_siguiliangbei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &siguiliangbei_)));
          set_has_siguiliangbei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjztdh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mjtype(), output);
  }

  // optional int32 typegui = 2;
  if (has_typegui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typegui(), output);
  }

  // optional int32 manum = 3;
  if (has_manum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->manum(), output);
  }

  // optional int32 shuanggui = 4;
  if (has_shuanggui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shuanggui(), output);
  }

  // optional int32 kechihu = 11;
  if (has_kechihu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->kechihu(), output);
  }

  // optional int32 kehuqidui = 12;
  if (has_kehuqidui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->kehuqidui(), output);
  }

  // optional int32 keqiangganghu = 14;
  if (has_keqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->keqiangganghu(), output);
  }

  // optional int32 minggangkeqiang = 15;
  if (has_minggangkeqiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->minggangkeqiang(), output);
  }

  // optional int32 qianggangquanbao = 16;
  if (has_qianggangquanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->qianggangquanbao(), output);
  }

  // optional int32 gangbaoquanbao = 17;
  if (has_gangbaoquanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->gangbaoquanbao(), output);
  }

  // optional int32 budaifeng = 18;
  if (has_budaifeng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->budaifeng(), output);
  }

  // optional int32 gengzhuang = 19;
  if (has_gengzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->gengzhuang(), output);
  }

  // optional int32 siguihupai = 20;
  if (has_siguihupai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->siguihupai(), output);
  }

  // optional int32 qiduisibei = 21;
  if (has_qiduisibei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->qiduisibei(), output);
  }

  // optional int32 pengpenghu = 22;
  if (has_pengpenghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->pengpenghu(), output);
  }

  // optional int32 qingyises = 23;
  if (has_qingyises()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->qingyises(), output);
  }

  // optional int32 quanfeng = 24;
  if (has_quanfeng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->quanfeng(), output);
  }

  // optional int32 shisanyao = 25;
  if (has_shisanyao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->shisanyao(), output);
  }

  // optional int32 yaomeyao = 26;
  if (has_yaomeyao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->yaomeyao(), output);
  }

  // optional int32 yaojiujike = 27;
  if (has_yaojiujike()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->yaojiujike(), output);
  }

  // optional int32 wuguijiabei = 28;
  if (has_wuguijiabei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->wuguijiabei(), output);
  }

  // optional int32 siguiliangbei = 29;
  if (has_siguiliangbei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->siguiliangbei(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjztdh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mjtype(), target);
  }

  // optional int32 typegui = 2;
  if (has_typegui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typegui(), target);
  }

  // optional int32 manum = 3;
  if (has_manum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->manum(), target);
  }

  // optional int32 shuanggui = 4;
  if (has_shuanggui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shuanggui(), target);
  }

  // optional int32 kechihu = 11;
  if (has_kechihu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->kechihu(), target);
  }

  // optional int32 kehuqidui = 12;
  if (has_kehuqidui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->kehuqidui(), target);
  }

  // optional int32 keqiangganghu = 14;
  if (has_keqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->keqiangganghu(), target);
  }

  // optional int32 minggangkeqiang = 15;
  if (has_minggangkeqiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->minggangkeqiang(), target);
  }

  // optional int32 qianggangquanbao = 16;
  if (has_qianggangquanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->qianggangquanbao(), target);
  }

  // optional int32 gangbaoquanbao = 17;
  if (has_gangbaoquanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->gangbaoquanbao(), target);
  }

  // optional int32 budaifeng = 18;
  if (has_budaifeng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->budaifeng(), target);
  }

  // optional int32 gengzhuang = 19;
  if (has_gengzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->gengzhuang(), target);
  }

  // optional int32 siguihupai = 20;
  if (has_siguihupai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->siguihupai(), target);
  }

  // optional int32 qiduisibei = 21;
  if (has_qiduisibei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->qiduisibei(), target);
  }

  // optional int32 pengpenghu = 22;
  if (has_pengpenghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->pengpenghu(), target);
  }

  // optional int32 qingyises = 23;
  if (has_qingyises()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->qingyises(), target);
  }

  // optional int32 quanfeng = 24;
  if (has_quanfeng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->quanfeng(), target);
  }

  // optional int32 shisanyao = 25;
  if (has_shisanyao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->shisanyao(), target);
  }

  // optional int32 yaomeyao = 26;
  if (has_yaomeyao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->yaomeyao(), target);
  }

  // optional int32 yaojiujike = 27;
  if (has_yaojiujike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->yaojiujike(), target);
  }

  // optional int32 wuguijiabei = 28;
  if (has_wuguijiabei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->wuguijiabei(), target);
  }

  // optional int32 siguiliangbei = 29;
  if (has_siguiliangbei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->siguiliangbei(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjztdh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mjtype = 1;
    if (has_mjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjtype());
    }

    // optional int32 typegui = 2;
    if (has_typegui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typegui());
    }

    // optional int32 manum = 3;
    if (has_manum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manum());
    }

    // optional int32 shuanggui = 4;
    if (has_shuanggui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shuanggui());
    }

    // optional int32 kechihu = 11;
    if (has_kechihu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kechihu());
    }

    // optional int32 kehuqidui = 12;
    if (has_kehuqidui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kehuqidui());
    }

    // optional int32 keqiangganghu = 14;
    if (has_keqiangganghu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keqiangganghu());
    }

    // optional int32 minggangkeqiang = 15;
    if (has_minggangkeqiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minggangkeqiang());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 qianggangquanbao = 16;
    if (has_qianggangquanbao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qianggangquanbao());
    }

    // optional int32 gangbaoquanbao = 17;
    if (has_gangbaoquanbao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangbaoquanbao());
    }

    // optional int32 budaifeng = 18;
    if (has_budaifeng()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->budaifeng());
    }

    // optional int32 gengzhuang = 19;
    if (has_gengzhuang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gengzhuang());
    }

    // optional int32 siguihupai = 20;
    if (has_siguihupai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->siguihupai());
    }

    // optional int32 qiduisibei = 21;
    if (has_qiduisibei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qiduisibei());
    }

    // optional int32 pengpenghu = 22;
    if (has_pengpenghu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pengpenghu());
    }

    // optional int32 qingyises = 23;
    if (has_qingyises()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qingyises());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 quanfeng = 24;
    if (has_quanfeng()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quanfeng());
    }

    // optional int32 shisanyao = 25;
    if (has_shisanyao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shisanyao());
    }

    // optional int32 yaomeyao = 26;
    if (has_yaomeyao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yaomeyao());
    }

    // optional int32 yaojiujike = 27;
    if (has_yaojiujike()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yaojiujike());
    }

    // optional int32 wuguijiabei = 28;
    if (has_wuguijiabei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wuguijiabei());
    }

    // optional int32 siguiliangbei = 29;
    if (has_siguiliangbei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->siguiliangbei());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjztdh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjztdh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjztdh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjztdh::MergeFrom(const gdmjztdh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjtype()) {
      set_mjtype(from.mjtype());
    }
    if (from.has_typegui()) {
      set_typegui(from.typegui());
    }
    if (from.has_manum()) {
      set_manum(from.manum());
    }
    if (from.has_shuanggui()) {
      set_shuanggui(from.shuanggui());
    }
    if (from.has_kechihu()) {
      set_kechihu(from.kechihu());
    }
    if (from.has_kehuqidui()) {
      set_kehuqidui(from.kehuqidui());
    }
    if (from.has_keqiangganghu()) {
      set_keqiangganghu(from.keqiangganghu());
    }
    if (from.has_minggangkeqiang()) {
      set_minggangkeqiang(from.minggangkeqiang());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qianggangquanbao()) {
      set_qianggangquanbao(from.qianggangquanbao());
    }
    if (from.has_gangbaoquanbao()) {
      set_gangbaoquanbao(from.gangbaoquanbao());
    }
    if (from.has_budaifeng()) {
      set_budaifeng(from.budaifeng());
    }
    if (from.has_gengzhuang()) {
      set_gengzhuang(from.gengzhuang());
    }
    if (from.has_siguihupai()) {
      set_siguihupai(from.siguihupai());
    }
    if (from.has_qiduisibei()) {
      set_qiduisibei(from.qiduisibei());
    }
    if (from.has_pengpenghu()) {
      set_pengpenghu(from.pengpenghu());
    }
    if (from.has_qingyises()) {
      set_qingyises(from.qingyises());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_quanfeng()) {
      set_quanfeng(from.quanfeng());
    }
    if (from.has_shisanyao()) {
      set_shisanyao(from.shisanyao());
    }
    if (from.has_yaomeyao()) {
      set_yaomeyao(from.yaomeyao());
    }
    if (from.has_yaojiujike()) {
      set_yaojiujike(from.yaojiujike());
    }
    if (from.has_wuguijiabei()) {
      set_wuguijiabei(from.wuguijiabei());
    }
    if (from.has_siguiliangbei()) {
      set_siguiliangbei(from.siguiliangbei());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjztdh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjztdh::CopyFrom(const gdmjztdh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjztdh::IsInitialized() const {

  return true;
}

void gdmjztdh::Swap(gdmjztdh* other) {
  if (other != this) {
    std::swap(mjtype_, other->mjtype_);
    std::swap(typegui_, other->typegui_);
    std::swap(manum_, other->manum_);
    std::swap(shuanggui_, other->shuanggui_);
    std::swap(kechihu_, other->kechihu_);
    std::swap(kehuqidui_, other->kehuqidui_);
    std::swap(keqiangganghu_, other->keqiangganghu_);
    std::swap(minggangkeqiang_, other->minggangkeqiang_);
    std::swap(qianggangquanbao_, other->qianggangquanbao_);
    std::swap(gangbaoquanbao_, other->gangbaoquanbao_);
    std::swap(budaifeng_, other->budaifeng_);
    std::swap(gengzhuang_, other->gengzhuang_);
    std::swap(siguihupai_, other->siguihupai_);
    std::swap(qiduisibei_, other->qiduisibei_);
    std::swap(pengpenghu_, other->pengpenghu_);
    std::swap(qingyises_, other->qingyises_);
    std::swap(quanfeng_, other->quanfeng_);
    std::swap(shisanyao_, other->shisanyao_);
    std::swap(yaomeyao_, other->yaomeyao_);
    std::swap(yaojiujike_, other->yaojiujike_);
    std::swap(wuguijiabei_, other->wuguijiabei_);
    std::swap(siguiliangbei_, other->siguiliangbei_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjztdh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjztdh_descriptor_;
  metadata.reflection = gdmjztdh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjjph::kMjtypeFieldNumber;
const int gdmjjph::kFantypeFieldNumber;
const int gdmjjph::kMaxfanFieldNumber;
#endif  // !_MSC_VER

gdmjjph::gdmjjph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjjph::InitAsDefaultInstance() {
}

gdmjjph::gdmjjph(const gdmjjph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjjph::SharedCtor() {
  _cached_size_ = 0;
  mjtype_ = 0;
  fantype_ = 0;
  maxfan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjjph::~gdmjjph() {
  SharedDtor();
}

void gdmjjph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjjph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjjph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjjph_descriptor_;
}

const gdmjjph& gdmjjph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjjph* gdmjjph::default_instance_ = NULL;

gdmjjph* gdmjjph::New() const {
  return new gdmjjph;
}

void gdmjjph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mjtype_ = 0;
    fantype_ = 0;
    maxfan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjjph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mjtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjtype_)));
          set_has_mjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fantype;
        break;
      }

      // optional int32 fantype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fantype_)));
          set_has_fantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxfan;
        break;
      }

      // optional int32 maxfan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxfan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfan_)));
          set_has_maxfan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjjph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mjtype(), output);
  }

  // optional int32 fantype = 2;
  if (has_fantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fantype(), output);
  }

  // optional int32 maxfan = 3;
  if (has_maxfan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxfan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjjph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mjtype(), target);
  }

  // optional int32 fantype = 2;
  if (has_fantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fantype(), target);
  }

  // optional int32 maxfan = 3;
  if (has_maxfan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxfan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjjph::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mjtype = 1;
    if (has_mjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjtype());
    }

    // optional int32 fantype = 2;
    if (has_fantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fantype());
    }

    // optional int32 maxfan = 3;
    if (has_maxfan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjjph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjjph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjjph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjjph::MergeFrom(const gdmjjph& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjtype()) {
      set_mjtype(from.mjtype());
    }
    if (from.has_fantype()) {
      set_fantype(from.fantype());
    }
    if (from.has_maxfan()) {
      set_maxfan(from.maxfan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjjph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjjph::CopyFrom(const gdmjjph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjjph::IsInitialized() const {

  return true;
}

void gdmjjph::Swap(gdmjjph* other) {
  if (other != this) {
    std::swap(mjtype_, other->mjtype_);
    std::swap(fantype_, other->fantype_);
    std::swap(maxfan_, other->maxfan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjjph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjjph_descriptor_;
  metadata.reflection = gdmjjph_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjhzz::kMjtypeFieldNumber;
const int gdmjhzz::kBukejihuFieldNumber;
const int gdmjhzz::kMenqingjiafenFieldNumber;
const int gdmjhzz::kGenzhuangFieldNumber;
const int gdmjhzz::kDuohuahupaiFieldNumber;
const int gdmjhzz::kGanggenmaFieldNumber;
const int gdmjhzz::kManumFieldNumber;
#endif  // !_MSC_VER

gdmjhzz::gdmjhzz()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjhzz::InitAsDefaultInstance() {
}

gdmjhzz::gdmjhzz(const gdmjhzz& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjhzz::SharedCtor() {
  _cached_size_ = 0;
  mjtype_ = 0;
  bukejihu_ = 0;
  menqingjiafen_ = 0;
  genzhuang_ = 0;
  duohuahupai_ = 0;
  ganggenma_ = 0;
  manum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjhzz::~gdmjhzz() {
  SharedDtor();
}

void gdmjhzz::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjhzz::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjhzz::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjhzz_descriptor_;
}

const gdmjhzz& gdmjhzz::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjhzz* gdmjhzz::default_instance_ = NULL;

gdmjhzz* gdmjhzz::New() const {
  return new gdmjhzz;
}

void gdmjhzz::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mjtype_ = 0;
    bukejihu_ = 0;
    menqingjiafen_ = 0;
    genzhuang_ = 0;
    duohuahupai_ = 0;
    ganggenma_ = 0;
    manum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjhzz::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mjtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjtype_)));
          set_has_mjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bukejihu;
        break;
      }

      // optional int32 bukejihu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bukejihu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bukejihu_)));
          set_has_bukejihu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_menqingjiafen;
        break;
      }

      // optional int32 menqingjiafen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menqingjiafen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menqingjiafen_)));
          set_has_menqingjiafen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_genzhuang;
        break;
      }

      // optional int32 genzhuang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genzhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genzhuang_)));
          set_has_genzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duohuahupai;
        break;
      }

      // optional int32 duohuahupai = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duohuahupai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duohuahupai_)));
          set_has_duohuahupai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ganggenma;
        break;
      }

      // optional int32 ganggenma = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ganggenma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ganggenma_)));
          set_has_ganggenma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_manum;
        break;
      }

      // optional int32 manum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manum_)));
          set_has_manum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjhzz::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mjtype(), output);
  }

  // optional int32 bukejihu = 2;
  if (has_bukejihu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bukejihu(), output);
  }

  // optional int32 menqingjiafen = 3;
  if (has_menqingjiafen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->menqingjiafen(), output);
  }

  // optional int32 genzhuang = 4;
  if (has_genzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->genzhuang(), output);
  }

  // optional int32 duohuahupai = 5;
  if (has_duohuahupai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duohuahupai(), output);
  }

  // optional int32 ganggenma = 6;
  if (has_ganggenma()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ganggenma(), output);
  }

  // optional int32 manum = 7;
  if (has_manum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->manum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjhzz::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mjtype(), target);
  }

  // optional int32 bukejihu = 2;
  if (has_bukejihu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bukejihu(), target);
  }

  // optional int32 menqingjiafen = 3;
  if (has_menqingjiafen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->menqingjiafen(), target);
  }

  // optional int32 genzhuang = 4;
  if (has_genzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->genzhuang(), target);
  }

  // optional int32 duohuahupai = 5;
  if (has_duohuahupai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duohuahupai(), target);
  }

  // optional int32 ganggenma = 6;
  if (has_ganggenma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ganggenma(), target);
  }

  // optional int32 manum = 7;
  if (has_manum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->manum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjhzz::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mjtype = 1;
    if (has_mjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjtype());
    }

    // optional int32 bukejihu = 2;
    if (has_bukejihu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bukejihu());
    }

    // optional int32 menqingjiafen = 3;
    if (has_menqingjiafen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menqingjiafen());
    }

    // optional int32 genzhuang = 4;
    if (has_genzhuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genzhuang());
    }

    // optional int32 duohuahupai = 5;
    if (has_duohuahupai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duohuahupai());
    }

    // optional int32 ganggenma = 6;
    if (has_ganggenma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ganggenma());
    }

    // optional int32 manum = 7;
    if (has_manum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjhzz::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjhzz* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjhzz*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjhzz::MergeFrom(const gdmjhzz& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjtype()) {
      set_mjtype(from.mjtype());
    }
    if (from.has_bukejihu()) {
      set_bukejihu(from.bukejihu());
    }
    if (from.has_menqingjiafen()) {
      set_menqingjiafen(from.menqingjiafen());
    }
    if (from.has_genzhuang()) {
      set_genzhuang(from.genzhuang());
    }
    if (from.has_duohuahupai()) {
      set_duohuahupai(from.duohuahupai());
    }
    if (from.has_ganggenma()) {
      set_ganggenma(from.ganggenma());
    }
    if (from.has_manum()) {
      set_manum(from.manum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjhzz::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjhzz::CopyFrom(const gdmjhzz& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjhzz::IsInitialized() const {

  return true;
}

void gdmjhzz::Swap(gdmjhzz* other) {
  if (other != this) {
    std::swap(mjtype_, other->mjtype_);
    std::swap(bukejihu_, other->bukejihu_);
    std::swap(menqingjiafen_, other->menqingjiafen_);
    std::swap(genzhuang_, other->genzhuang_);
    std::swap(duohuahupai_, other->duohuahupai_);
    std::swap(ganggenma_, other->ganggenma_);
    std::swap(manum_, other->manum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjhzz::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjhzz_descriptor_;
  metadata.reflection = gdmjhzz_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjhdz::kMjtypeFieldNumber;
const int gdmjhdz::kBukejihuFieldNumber;
const int gdmjhdz::kMenqingjiafenFieldNumber;
const int gdmjhdz::kGenzhuangFieldNumber;
const int gdmjhdz::kDuohuahupaiFieldNumber;
const int gdmjhdz::kGanggenmaFieldNumber;
const int gdmjhdz::kManumFieldNumber;
#endif  // !_MSC_VER

gdmjhdz::gdmjhdz()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjhdz::InitAsDefaultInstance() {
}

gdmjhdz::gdmjhdz(const gdmjhdz& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjhdz::SharedCtor() {
  _cached_size_ = 0;
  mjtype_ = 0;
  bukejihu_ = 0;
  menqingjiafen_ = 0;
  genzhuang_ = 0;
  duohuahupai_ = 0;
  ganggenma_ = 0;
  manum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjhdz::~gdmjhdz() {
  SharedDtor();
}

void gdmjhdz::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjhdz::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjhdz::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjhdz_descriptor_;
}

const gdmjhdz& gdmjhdz::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjhdz* gdmjhdz::default_instance_ = NULL;

gdmjhdz* gdmjhdz::New() const {
  return new gdmjhdz;
}

void gdmjhdz::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mjtype_ = 0;
    bukejihu_ = 0;
    menqingjiafen_ = 0;
    genzhuang_ = 0;
    duohuahupai_ = 0;
    ganggenma_ = 0;
    manum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjhdz::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mjtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mjtype_)));
          set_has_mjtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bukejihu;
        break;
      }

      // optional int32 bukejihu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bukejihu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bukejihu_)));
          set_has_bukejihu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_menqingjiafen;
        break;
      }

      // optional int32 menqingjiafen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menqingjiafen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menqingjiafen_)));
          set_has_menqingjiafen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_genzhuang;
        break;
      }

      // optional int32 genzhuang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genzhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genzhuang_)));
          set_has_genzhuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duohuahupai;
        break;
      }

      // optional int32 duohuahupai = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duohuahupai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duohuahupai_)));
          set_has_duohuahupai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ganggenma;
        break;
      }

      // optional int32 ganggenma = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ganggenma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ganggenma_)));
          set_has_ganggenma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_manum;
        break;
      }

      // optional int32 manum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manum_)));
          set_has_manum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjhdz::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mjtype(), output);
  }

  // optional int32 bukejihu = 2;
  if (has_bukejihu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bukejihu(), output);
  }

  // optional int32 menqingjiafen = 3;
  if (has_menqingjiafen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->menqingjiafen(), output);
  }

  // optional int32 genzhuang = 4;
  if (has_genzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->genzhuang(), output);
  }

  // optional int32 duohuahupai = 5;
  if (has_duohuahupai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duohuahupai(), output);
  }

  // optional int32 ganggenma = 6;
  if (has_ganggenma()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ganggenma(), output);
  }

  // optional int32 manum = 7;
  if (has_manum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->manum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjhdz::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mjtype = 1;
  if (has_mjtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mjtype(), target);
  }

  // optional int32 bukejihu = 2;
  if (has_bukejihu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bukejihu(), target);
  }

  // optional int32 menqingjiafen = 3;
  if (has_menqingjiafen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->menqingjiafen(), target);
  }

  // optional int32 genzhuang = 4;
  if (has_genzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->genzhuang(), target);
  }

  // optional int32 duohuahupai = 5;
  if (has_duohuahupai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duohuahupai(), target);
  }

  // optional int32 ganggenma = 6;
  if (has_ganggenma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ganggenma(), target);
  }

  // optional int32 manum = 7;
  if (has_manum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->manum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjhdz::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mjtype = 1;
    if (has_mjtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mjtype());
    }

    // optional int32 bukejihu = 2;
    if (has_bukejihu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bukejihu());
    }

    // optional int32 menqingjiafen = 3;
    if (has_menqingjiafen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menqingjiafen());
    }

    // optional int32 genzhuang = 4;
    if (has_genzhuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genzhuang());
    }

    // optional int32 duohuahupai = 5;
    if (has_duohuahupai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duohuahupai());
    }

    // optional int32 ganggenma = 6;
    if (has_ganggenma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ganggenma());
    }

    // optional int32 manum = 7;
    if (has_manum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjhdz::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjhdz* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjhdz*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjhdz::MergeFrom(const gdmjhdz& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjtype()) {
      set_mjtype(from.mjtype());
    }
    if (from.has_bukejihu()) {
      set_bukejihu(from.bukejihu());
    }
    if (from.has_menqingjiafen()) {
      set_menqingjiafen(from.menqingjiafen());
    }
    if (from.has_genzhuang()) {
      set_genzhuang(from.genzhuang());
    }
    if (from.has_duohuahupai()) {
      set_duohuahupai(from.duohuahupai());
    }
    if (from.has_ganggenma()) {
      set_ganggenma(from.ganggenma());
    }
    if (from.has_manum()) {
      set_manum(from.manum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjhdz::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjhdz::CopyFrom(const gdmjhdz& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjhdz::IsInitialized() const {

  return true;
}

void gdmjhdz::Swap(gdmjhdz* other) {
  if (other != this) {
    std::swap(mjtype_, other->mjtype_);
    std::swap(bukejihu_, other->bukejihu_);
    std::swap(menqingjiafen_, other->menqingjiafen_);
    std::swap(genzhuang_, other->genzhuang_);
    std::swap(duohuahupai_, other->duohuahupai_);
    std::swap(ganggenma_, other->ganggenma_);
    std::swap(manum_, other->manum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjhdz::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjhdz_descriptor_;
  metadata.reflection = gdmjhdz_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjcountinfo::kUseridFieldNumber;
const int gdmjcountinfo::kIswinFieldNumber;
const int gdmjcountinfo::kWinjettonFieldNumber;
const int gdmjcountinfo::kGangjettonFieldNumber;
const int gdmjcountinfo::kFannumFieldNumber;
const int gdmjcountinfo::kDesFieldNumber;
const int gdmjcountinfo::kBeinumFieldNumber;
const int gdmjcountinfo::kHunumFieldNumber;
const int gdmjcountinfo::kCarryjettonFieldNumber;
const int gdmjcountinfo::kJulebuJettonFieldNumber;
#endif  // !_MSC_VER

gdmjcountinfo::gdmjcountinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjcountinfo::InitAsDefaultInstance() {
}

gdmjcountinfo::gdmjcountinfo(const gdmjcountinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjcountinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  iswin_ = 0;
  winjetton_ = 0;
  gangjetton_ = 0;
  fannum_ = 0;
  beinum_ = 0;
  hunum_ = 0;
  carryjetton_ = 0;
  julebu_jetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjcountinfo::~gdmjcountinfo() {
  SharedDtor();
}

void gdmjcountinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjcountinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjcountinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjcountinfo_descriptor_;
}

const gdmjcountinfo& gdmjcountinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjcountinfo* gdmjcountinfo::default_instance_ = NULL;

gdmjcountinfo* gdmjcountinfo::New() const {
  return new gdmjcountinfo;
}

void gdmjcountinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    iswin_ = 0;
    winjetton_ = 0;
    gangjetton_ = 0;
    fannum_ = 0;
    beinum_ = 0;
    hunum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    carryjetton_ = 0;
    julebu_jetton_ = 0;
  }
  des_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjcountinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iswin;
        break;
      }

      // optional int32 iswin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iswin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winjetton;
        break;
      }

      // optional int32 winjetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winjetton_)));
          set_has_winjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gangjetton;
        break;
      }

      // optional int32 gangjetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangjetton_)));
          set_has_gangjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fannum;
        break;
      }

      // optional int32 fannum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fannum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fannum_)));
          set_has_fannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_des;
        break;
      }

      // repeated string des = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des(this->des_size() - 1).data(),
            this->des(this->des_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_des;
        if (input->ExpectTag(56)) goto parse_beinum;
        break;
      }

      // optional int32 beinum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beinum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beinum_)));
          set_has_beinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hunum;
        break;
      }

      // optional int32 hunum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hunum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunum_)));
          set_has_hunum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_carryjetton;
        break;
      }

      // optional int32 carryjetton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carryjetton_)));
          set_has_carryjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_julebu_jetton;
        break;
      }

      // optional int32 julebu_jetton = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebu_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebu_jetton_)));
          set_has_julebu_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjcountinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 iswin = 2;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iswin(), output);
  }

  // optional int32 winjetton = 3;
  if (has_winjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winjetton(), output);
  }

  // optional int32 gangjetton = 4;
  if (has_gangjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gangjetton(), output);
  }

  // optional int32 fannum = 5;
  if (has_fannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fannum(), output);
  }

  // repeated string des = 6;
  for (int i = 0; i < this->des_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->des(i).data(), this->des(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->des(i), output);
  }

  // optional int32 beinum = 7;
  if (has_beinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->beinum(), output);
  }

  // optional int32 hunum = 8;
  if (has_hunum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hunum(), output);
  }

  // optional int32 carryjetton = 9;
  if (has_carryjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->carryjetton(), output);
  }

  // optional int32 julebu_jetton = 10;
  if (has_julebu_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->julebu_jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjcountinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 iswin = 2;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iswin(), target);
  }

  // optional int32 winjetton = 3;
  if (has_winjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winjetton(), target);
  }

  // optional int32 gangjetton = 4;
  if (has_gangjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gangjetton(), target);
  }

  // optional int32 fannum = 5;
  if (has_fannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fannum(), target);
  }

  // repeated string des = 6;
  for (int i = 0; i < this->des_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des(i).data(), this->des(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->des(i), target);
  }

  // optional int32 beinum = 7;
  if (has_beinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->beinum(), target);
  }

  // optional int32 hunum = 8;
  if (has_hunum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hunum(), target);
  }

  // optional int32 carryjetton = 9;
  if (has_carryjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->carryjetton(), target);
  }

  // optional int32 julebu_jetton = 10;
  if (has_julebu_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->julebu_jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjcountinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 iswin = 2;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswin());
    }

    // optional int32 winjetton = 3;
    if (has_winjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winjetton());
    }

    // optional int32 gangjetton = 4;
    if (has_gangjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangjetton());
    }

    // optional int32 fannum = 5;
    if (has_fannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fannum());
    }

    // optional int32 beinum = 7;
    if (has_beinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beinum());
    }

    // optional int32 hunum = 8;
    if (has_hunum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hunum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 carryjetton = 9;
    if (has_carryjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carryjetton());
    }

    // optional int32 julebu_jetton = 10;
    if (has_julebu_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebu_jetton());
    }

  }
  // repeated string des = 6;
  total_size += 1 * this->des_size();
  for (int i = 0; i < this->des_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->des(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjcountinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjcountinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjcountinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjcountinfo::MergeFrom(const gdmjcountinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  des_.MergeFrom(from.des_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_winjetton()) {
      set_winjetton(from.winjetton());
    }
    if (from.has_gangjetton()) {
      set_gangjetton(from.gangjetton());
    }
    if (from.has_fannum()) {
      set_fannum(from.fannum());
    }
    if (from.has_beinum()) {
      set_beinum(from.beinum());
    }
    if (from.has_hunum()) {
      set_hunum(from.hunum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_carryjetton()) {
      set_carryjetton(from.carryjetton());
    }
    if (from.has_julebu_jetton()) {
      set_julebu_jetton(from.julebu_jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjcountinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjcountinfo::CopyFrom(const gdmjcountinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjcountinfo::IsInitialized() const {

  return true;
}

void gdmjcountinfo::Swap(gdmjcountinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(iswin_, other->iswin_);
    std::swap(winjetton_, other->winjetton_);
    std::swap(gangjetton_, other->gangjetton_);
    std::swap(fannum_, other->fannum_);
    des_.Swap(&other->des_);
    std::swap(beinum_, other->beinum_);
    std::swap(hunum_, other->hunum_);
    std::swap(carryjetton_, other->carryjetton_);
    std::swap(julebu_jetton_, other->julebu_jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjcountinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjcountinfo_descriptor_;
  metadata.reflection = gdmjcountinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjhistoryitem::kTableplayidFieldNumber;
const int gdmjhistoryitem::kTableidFieldNumber;
const int gdmjhistoryitem::kPlaytimeFieldNumber;
const int gdmjhistoryitem::kPlaystateFieldNumber;
const int gdmjhistoryitem::kUseridlistFieldNumber;
const int gdmjhistoryitem::kNicklistFieldNumber;
const int gdmjhistoryitem::kWinlistFieldNumber;
const int gdmjhistoryitem::kQuitdesFieldNumber;
const int gdmjhistoryitem::kUserdesFieldNumber;
#endif  // !_MSC_VER

gdmjhistoryitem::gdmjhistoryitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjhistoryitem::InitAsDefaultInstance() {
}

gdmjhistoryitem::gdmjhistoryitem(const gdmjhistoryitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjhistoryitem::SharedCtor() {
  _cached_size_ = 0;
  tableplayid_ = 0;
  tableid_ = 0;
  playtime_ = 0;
  playstate_ = 0;
  quitdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjhistoryitem::~gdmjhistoryitem() {
  SharedDtor();
}

void gdmjhistoryitem::SharedDtor() {
  if (quitdes_ != &::google::protobuf::internal::kEmptyString) {
    delete quitdes_;
  }
  if (this != default_instance_) {
  }
}

void gdmjhistoryitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjhistoryitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjhistoryitem_descriptor_;
}

const gdmjhistoryitem& gdmjhistoryitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjhistoryitem* gdmjhistoryitem::default_instance_ = NULL;

gdmjhistoryitem* gdmjhistoryitem::New() const {
  return new gdmjhistoryitem;
}

void gdmjhistoryitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableplayid_ = 0;
    tableid_ = 0;
    playtime_ = 0;
    playstate_ = 0;
    if (has_quitdes()) {
      if (quitdes_ != &::google::protobuf::internal::kEmptyString) {
        quitdes_->clear();
      }
    }
  }
  useridlist_.Clear();
  nicklist_.Clear();
  winlist_.Clear();
  userdes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjhistoryitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableplayid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableplayid_)));
          set_has_tableplayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // optional int32 tableid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playtime;
        break;
      }

      // optional int32 playtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtime_)));
          set_has_playtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playstate;
        break;
      }

      // optional int32 playstate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playstate_)));
          set_has_playstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        if (input->ExpectTag(50)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nicklist;
        if (input->ExpectTag(56)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_winlist;
        if (input->ExpectTag(66)) goto parse_quitdes;
        break;
      }

      // optional string quitdes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quitdes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quitdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quitdes().data(), this->quitdes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userdes;
        break;
      }

      // repeated string userdes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userdes(this->userdes_size() - 1).data(),
            this->userdes(this->userdes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userdes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjhistoryitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableplayid = 1;
  if (has_tableplayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableplayid(), output);
  }

  // optional int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 playtime = 3;
  if (has_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playtime(), output);
  }

  // optional int32 playstate = 4;
  if (has_playstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playstate(), output);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->useridlist(i), output);
  }

  // repeated string nicklist = 6;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nicklist(i), output);
  }

  // repeated int32 winlist = 7;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->winlist(i), output);
  }

  // optional string quitdes = 8;
  if (has_quitdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quitdes().data(), this->quitdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->quitdes(), output);
  }

  // repeated string userdes = 9;
  for (int i = 0; i < this->userdes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->userdes(i).data(), this->userdes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->userdes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjhistoryitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableplayid = 1;
  if (has_tableplayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableplayid(), target);
  }

  // optional int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 playtime = 3;
  if (has_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playtime(), target);
  }

  // optional int32 playstate = 4;
  if (has_playstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playstate(), target);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->useridlist(i), target);
  }

  // repeated string nicklist = 6;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->nicklist(i), target);
  }

  // repeated int32 winlist = 7;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->winlist(i), target);
  }

  // optional string quitdes = 8;
  if (has_quitdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quitdes().data(), this->quitdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->quitdes(), target);
  }

  // repeated string userdes = 9;
  for (int i = 0; i < this->userdes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdes(i).data(), this->userdes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->userdes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjhistoryitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableplayid = 1;
    if (has_tableplayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableplayid());
    }

    // optional int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 playtime = 3;
    if (has_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtime());
    }

    // optional int32 playstate = 4;
    if (has_playstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playstate());
    }

    // optional string quitdes = 8;
    if (has_quitdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quitdes());
    }

  }
  // repeated int32 useridlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated string nicklist = 6;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 winlist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated string userdes = 9;
  total_size += 1 * this->userdes_size();
  for (int i = 0; i < this->userdes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->userdes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjhistoryitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjhistoryitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjhistoryitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjhistoryitem::MergeFrom(const gdmjhistoryitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  nicklist_.MergeFrom(from.nicklist_);
  winlist_.MergeFrom(from.winlist_);
  userdes_.MergeFrom(from.userdes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableplayid()) {
      set_tableplayid(from.tableplayid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_playtime()) {
      set_playtime(from.playtime());
    }
    if (from.has_playstate()) {
      set_playstate(from.playstate());
    }
    if (from.has_quitdes()) {
      set_quitdes(from.quitdes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjhistoryitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjhistoryitem::CopyFrom(const gdmjhistoryitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjhistoryitem::IsInitialized() const {

  return true;
}

void gdmjhistoryitem::Swap(gdmjhistoryitem* other) {
  if (other != this) {
    std::swap(tableplayid_, other->tableplayid_);
    std::swap(tableid_, other->tableid_);
    std::swap(playtime_, other->playtime_);
    std::swap(playstate_, other->playstate_);
    useridlist_.Swap(&other->useridlist_);
    nicklist_.Swap(&other->nicklist_);
    winlist_.Swap(&other->winlist_);
    std::swap(quitdes_, other->quitdes_);
    userdes_.Swap(&other->userdes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjhistoryitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjhistoryitem_descriptor_;
  metadata.reflection = gdmjhistoryitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjhistory::kTableidFieldNumber;
const int gdmjhistory::kTablemarkFieldNumber;
const int gdmjhistory::kGametimeFieldNumber;
const int gdmjhistory::kPlaynumFieldNumber;
const int gdmjhistory::kUseridlistFieldNumber;
const int gdmjhistory::kNicklistFieldNumber;
const int gdmjhistory::kWinlistFieldNumber;
const int gdmjhistory::kHitemlistFieldNumber;
#endif  // !_MSC_VER

gdmjhistory::gdmjhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjhistory::InitAsDefaultInstance() {
}

gdmjhistory::gdmjhistory(const gdmjhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjhistory::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablemark_ = 0;
  gametime_ = 0;
  playnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjhistory::~gdmjhistory() {
  SharedDtor();
}

void gdmjhistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjhistory_descriptor_;
}

const gdmjhistory& gdmjhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjhistory* gdmjhistory::default_instance_ = NULL;

gdmjhistory* gdmjhistory::New() const {
  return new gdmjhistory;
}

void gdmjhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tablemark_ = 0;
    gametime_ = 0;
    playnum_ = 0;
  }
  useridlist_.Clear();
  nicklist_.Clear();
  winlist_.Clear();
  hitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tablemark;
        break;
      }

      // optional int32 tablemark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemark_)));
          set_has_tablemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gametime;
        break;
      }

      // optional int32 gametime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playnum;
        break;
      }

      // optional int32 playnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnum_)));
          set_has_playnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        if (input->ExpectTag(50)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nicklist;
        if (input->ExpectTag(56)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_winlist;
        if (input->ExpectTag(66)) goto parse_hitemlist;
        break;
      }

      // repeated .progame.gdmjhistoryitem hitemlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hitemlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tablemark(), output);
  }

  // optional int32 gametime = 3;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gametime(), output);
  }

  // optional int32 playnum = 4;
  if (has_playnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playnum(), output);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->useridlist(i), output);
  }

  // repeated string nicklist = 6;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nicklist(i), output);
  }

  // repeated int32 winlist = 7;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->winlist(i), output);
  }

  // repeated .progame.gdmjhistoryitem hitemlist = 8;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hitemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tablemark(), target);
  }

  // optional int32 gametime = 3;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gametime(), target);
  }

  // optional int32 playnum = 4;
  if (has_playnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playnum(), target);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->useridlist(i), target);
  }

  // repeated string nicklist = 6;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->nicklist(i), target);
  }

  // repeated int32 winlist = 7;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->winlist(i), target);
  }

  // repeated .progame.gdmjhistoryitem hitemlist = 8;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hitemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tablemark = 2;
    if (has_tablemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemark());
    }

    // optional int32 gametime = 3;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametime());
    }

    // optional int32 playnum = 4;
    if (has_playnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnum());
    }

  }
  // repeated int32 useridlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated string nicklist = 6;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 winlist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated .progame.gdmjhistoryitem hitemlist = 8;
  total_size += 1 * this->hitemlist_size();
  for (int i = 0; i < this->hitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjhistory::MergeFrom(const gdmjhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  nicklist_.MergeFrom(from.nicklist_);
  winlist_.MergeFrom(from.winlist_);
  hitemlist_.MergeFrom(from.hitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablemark()) {
      set_tablemark(from.tablemark());
    }
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
    if (from.has_playnum()) {
      set_playnum(from.playnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjhistory::CopyFrom(const gdmjhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjhistory::IsInitialized() const {

  return true;
}

void gdmjhistory::Swap(gdmjhistory* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablemark_, other->tablemark_);
    std::swap(gametime_, other->gametime_);
    std::swap(playnum_, other->playnum_);
    useridlist_.Swap(&other->useridlist_);
    nicklist_.Swap(&other->nicklist_);
    winlist_.Swap(&other->winlist_);
    hitemlist_.Swap(&other->hitemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjhistory_descriptor_;
  metadata.reflection = gdmjhistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjhistorypair::kPacketcodeFieldNumber;
const int gdmjhistorypair::kPkginfoFieldNumber;
#endif  // !_MSC_VER

gdmjhistorypair::gdmjhistorypair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjhistorypair::InitAsDefaultInstance() {
}

gdmjhistorypair::gdmjhistorypair(const gdmjhistorypair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjhistorypair::SharedCtor() {
  _cached_size_ = 0;
  packetcode_ = 0;
  pkginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjhistorypair::~gdmjhistorypair() {
  SharedDtor();
}

void gdmjhistorypair::SharedDtor() {
  if (pkginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete pkginfo_;
  }
  if (this != default_instance_) {
  }
}

void gdmjhistorypair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjhistorypair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjhistorypair_descriptor_;
}

const gdmjhistorypair& gdmjhistorypair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjhistorypair* gdmjhistorypair::default_instance_ = NULL;

gdmjhistorypair* gdmjhistorypair::New() const {
  return new gdmjhistorypair;
}

void gdmjhistorypair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packetcode_ = 0;
    if (has_pkginfo()) {
      if (pkginfo_ != &::google::protobuf::internal::kEmptyString) {
        pkginfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjhistorypair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packetcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetcode_)));
          set_has_packetcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pkginfo;
        break;
      }

      // optional string pkginfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pkginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkginfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pkginfo().data(), this->pkginfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjhistorypair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packetcode = 1;
  if (has_packetcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetcode(), output);
  }

  // optional string pkginfo = 2;
  if (has_pkginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkginfo().data(), this->pkginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pkginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjhistorypair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packetcode = 1;
  if (has_packetcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetcode(), target);
  }

  // optional string pkginfo = 2;
  if (has_pkginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkginfo().data(), this->pkginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pkginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjhistorypair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packetcode = 1;
    if (has_packetcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetcode());
    }

    // optional string pkginfo = 2;
    if (has_pkginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pkginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjhistorypair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjhistorypair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjhistorypair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjhistorypair::MergeFrom(const gdmjhistorypair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetcode()) {
      set_packetcode(from.packetcode());
    }
    if (from.has_pkginfo()) {
      set_pkginfo(from.pkginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjhistorypair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjhistorypair::CopyFrom(const gdmjhistorypair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjhistorypair::IsInitialized() const {

  return true;
}

void gdmjhistorypair::Swap(gdmjhistorypair* other) {
  if (other != this) {
    std::swap(packetcode_, other->packetcode_);
    std::swap(pkginfo_, other->pkginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjhistorypair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjhistorypair_descriptor_;
  metadata.reflection = gdmjhistorypair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjhandpoker::kUseridFieldNumber;
const int gdmjhandpoker::kMjpokerlistFieldNumber;
const int gdmjhandpoker::kHandpokerFieldNumber;
const int gdmjhandpoker::kMagetlistFieldNumber;
#endif  // !_MSC_VER

gdmjhandpoker::gdmjhandpoker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjhandpoker::InitAsDefaultInstance() {
}

gdmjhandpoker::gdmjhandpoker(const gdmjhandpoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjhandpoker::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjhandpoker::~gdmjhandpoker() {
  SharedDtor();
}

void gdmjhandpoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjhandpoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjhandpoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjhandpoker_descriptor_;
}

const gdmjhandpoker& gdmjhandpoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fgdmj_2eproto();
  return *default_instance_;
}

gdmjhandpoker* gdmjhandpoker::default_instance_ = NULL;

gdmjhandpoker* gdmjhandpoker::New() const {
  return new gdmjhandpoker;
}

void gdmjhandpoker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  mjpokerlist_.Clear();
  handpoker_.Clear();
  magetlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjhandpoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mjpokerlist;
        break;
      }

      // repeated .progame.gdmjpoker mjpokerlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mjpokerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mjpokerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mjpokerlist;
        if (input->ExpectTag(24)) goto parse_handpoker;
        break;
      }

      // repeated int32 handpoker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handpoker;
        if (input->ExpectTag(32)) goto parse_magetlist;
        break;
      }

      // repeated int32 magetlist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magetlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_magetlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_magetlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_magetlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjhandpoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated .progame.gdmjpoker mjpokerlist = 2;
  for (int i = 0; i < this->mjpokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mjpokerlist(i), output);
  }

  // repeated int32 handpoker = 3;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->handpoker(i), output);
  }

  // repeated int32 magetlist = 4;
  for (int i = 0; i < this->magetlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->magetlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjhandpoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated .progame.gdmjpoker mjpokerlist = 2;
  for (int i = 0; i < this->mjpokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mjpokerlist(i), target);
  }

  // repeated int32 handpoker = 3;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->handpoker(i), target);
  }

  // repeated int32 magetlist = 4;
  for (int i = 0; i < this->magetlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->magetlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjhandpoker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  // repeated .progame.gdmjpoker mjpokerlist = 2;
  total_size += 1 * this->mjpokerlist_size();
  for (int i = 0; i < this->mjpokerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mjpokerlist(i));
  }

  // repeated int32 handpoker = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  // repeated int32 magetlist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->magetlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->magetlist(i));
    }
    total_size += 1 * this->magetlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjhandpoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjhandpoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjhandpoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjhandpoker::MergeFrom(const gdmjhandpoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  mjpokerlist_.MergeFrom(from.mjpokerlist_);
  handpoker_.MergeFrom(from.handpoker_);
  magetlist_.MergeFrom(from.magetlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjhandpoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjhandpoker::CopyFrom(const gdmjhandpoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjhandpoker::IsInitialized() const {

  return true;
}

void gdmjhandpoker::Swap(gdmjhandpoker* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    mjpokerlist_.Swap(&other->mjpokerlist_);
    handpoker_.Swap(&other->handpoker_);
    magetlist_.Swap(&other->magetlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjhandpoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjhandpoker_descriptor_;
  metadata.reflection = gdmjhandpoker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
