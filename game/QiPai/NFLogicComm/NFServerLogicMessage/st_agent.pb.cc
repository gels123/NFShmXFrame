// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_agent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_agent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* agentinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agentinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* wiringinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wiringinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* wiringdayachieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wiringdayachieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* wiringawardinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wiringawardinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* wiringwithdrawinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wiringwithdrawinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* wiringuserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wiringuserinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* fenchengdayinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenchengdayinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* fenchengweekinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenchengweekinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* wiringdaybonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wiringdaybonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* wiringcostweekbonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wiringcostweekbonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* wiringagentcostweekbonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wiringagentcostweekbonus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fagent_2eproto() {
  protobuf_AddDesc_st_5fagent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_agent.proto");
  GOOGLE_CHECK(file != NULL);
  agentinfo_descriptor_ = file->message_type(0);
  static const int agentinfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, invitestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, soleagent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, agent1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, agent2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, agent3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, agent4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, qrcodeurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, datemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, moneymark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, weekmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, exclusiveurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, alipay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, bankaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, wiringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, grade_),
  };
  agentinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agentinfo_descriptor_,
      agentinfo::default_instance_,
      agentinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agentinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agentinfo));
  wiringinfo_descriptor_ = file->message_type(1);
  static const int wiringinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, currnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, createdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, newaddnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, qrcodeurl_),
  };
  wiringinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wiringinfo_descriptor_,
      wiringinfo::default_instance_,
      wiringinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wiringinfo));
  wiringdayachieve_descriptor_ = file->message_type(2);
  static const int wiringdayachieve_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, allach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, teamach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, selfach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, allach_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, teamach_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, selfach_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, getrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, getmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, fivelevel_ach_),
  };
  wiringdayachieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wiringdayachieve_descriptor_,
      wiringdayachieve::default_instance_,
      wiringdayachieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdayachieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wiringdayachieve));
  wiringawardinfo_descriptor_ = file->message_type(3);
  static const int wiringawardinfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, weekallach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, weekteamach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, weekselfach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, awardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, realhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, preissue_),
  };
  wiringawardinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wiringawardinfo_descriptor_,
      wiringawardinfo::default_instance_,
      wiringawardinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringawardinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wiringawardinfo));
  wiringwithdrawinfo_descriptor_ = file->message_type(4);
  static const int wiringwithdrawinfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, drawid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, drawtypw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, state_),
  };
  wiringwithdrawinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wiringwithdrawinfo_descriptor_,
      wiringwithdrawinfo::default_instance_,
      wiringwithdrawinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringwithdrawinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wiringwithdrawinfo));
  wiringuserinfo_descriptor_ = file->message_type(5);
  static const int wiringuserinfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, wiringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, createdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, prelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, allperformance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, selfperformance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, directperformance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, teamperformance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, allincome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, getincome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, allpreincome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, getpreincome_),
  };
  wiringuserinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wiringuserinfo_descriptor_,
      wiringuserinfo::default_instance_,
      wiringuserinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringuserinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wiringuserinfo));
  fenchengdayinfo_descriptor_ = file->message_type(6);
  static const int fenchengdayinfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengdayinfo, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengdayinfo, allincome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengdayinfo, teamincome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengdayinfo, dirincome_),
  };
  fenchengdayinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenchengdayinfo_descriptor_,
      fenchengdayinfo::default_instance_,
      fenchengdayinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengdayinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengdayinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenchengdayinfo));
  fenchengweekinfo_descriptor_ = file->message_type(7);
  static const int fenchengweekinfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, weekallnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, weekteamnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, weekdirnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, awardincome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, realincome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, preincome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, weekpayall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, cfrate_),
  };
  fenchengweekinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenchengweekinfo_descriptor_,
      fenchengweekinfo::default_instance_,
      fenchengweekinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenchengweekinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenchengweekinfo));
  wiringdaybonus_descriptor_ = file->message_type(8);
  static const int wiringdaybonus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdaybonus, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdaybonus, ach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdaybonus, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdaybonus, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdaybonus, bonus_),
  };
  wiringdaybonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wiringdaybonus_descriptor_,
      wiringdaybonus::default_instance_,
      wiringdaybonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdaybonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringdaybonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wiringdaybonus));
  wiringcostweekbonus_descriptor_ = file->message_type(9);
  static const int wiringcostweekbonus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, allwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, bonus_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, self_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, agent_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, all_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, status_),
  };
  wiringcostweekbonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wiringcostweekbonus_descriptor_,
      wiringcostweekbonus::default_instance_,
      wiringcostweekbonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringcostweekbonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wiringcostweekbonus));
  wiringagentcostweekbonus_descriptor_ = file->message_type(10);
  static const int wiringagentcostweekbonus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, datestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, agent_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, bonus_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, self_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, agent_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, status_),
  };
  wiringagentcostweekbonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wiringagentcostweekbonus_descriptor_,
      wiringagentcostweekbonus::default_instance_,
      wiringagentcostweekbonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wiringagentcostweekbonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wiringagentcostweekbonus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fagent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agentinfo_descriptor_, &agentinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wiringinfo_descriptor_, &wiringinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wiringdayachieve_descriptor_, &wiringdayachieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wiringawardinfo_descriptor_, &wiringawardinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wiringwithdrawinfo_descriptor_, &wiringwithdrawinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wiringuserinfo_descriptor_, &wiringuserinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenchengdayinfo_descriptor_, &fenchengdayinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenchengweekinfo_descriptor_, &fenchengweekinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wiringdaybonus_descriptor_, &wiringdaybonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wiringcostweekbonus_descriptor_, &wiringcostweekbonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wiringagentcostweekbonus_descriptor_, &wiringagentcostweekbonus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fagent_2eproto() {
  delete agentinfo::default_instance_;
  delete agentinfo_reflection_;
  delete wiringinfo::default_instance_;
  delete wiringinfo_reflection_;
  delete wiringdayachieve::default_instance_;
  delete wiringdayachieve_reflection_;
  delete wiringawardinfo::default_instance_;
  delete wiringawardinfo_reflection_;
  delete wiringwithdrawinfo::default_instance_;
  delete wiringwithdrawinfo_reflection_;
  delete wiringuserinfo::default_instance_;
  delete wiringuserinfo_reflection_;
  delete fenchengdayinfo::default_instance_;
  delete fenchengdayinfo_reflection_;
  delete fenchengweekinfo::default_instance_;
  delete fenchengweekinfo_reflection_;
  delete wiringdaybonus::default_instance_;
  delete wiringdaybonus_reflection_;
  delete wiringcostweekbonus::default_instance_;
  delete wiringcostweekbonus_reflection_;
  delete wiringagentcostweekbonus::default_instance_;
  delete wiringagentcostweekbonus_reflection_;
}

void protobuf_AddDesc_st_5fagent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016st_agent.proto\022\007progame\"\267\002\n\tagentinfo\022"
    "\016\n\006userid\030\001 \001(\005\022\021\n\tinvitestr\030\002 \001(\t\022\r\n\005le"
    "vel\030\003 \001(\005\022\021\n\tsoleagent\030\004 \001(\005\022\016\n\006agent1\030\005"
    " \001(\005\022\016\n\006agent2\030\006 \001(\005\022\016\n\006agent3\030\007 \001(\005\022\016\n\006"
    "agent4\030\010 \001(\005\022\021\n\tqrcodeurl\030\n \001(\t\022\020\n\010datem"
    "ark\030\013 \001(\t\022\021\n\tmoneymark\030\014 \001(\005\022\021\n\tweekmone"
    "y\030\r \001(\005\022\024\n\014exclusiveurl\030\016 \001(\t\022\016\n\006alipay\030"
    "\017 \001(\t\022\023\n\013bankaccount\030\020 \001(\t\022\020\n\010wiringid\030\021"
    " \001(\005\022\r\n\005grade\030\022 \001(\005\"\243\001\n\nwiringinfo\022\n\n\002id"
    "\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\017\n\007ownerid\030\003 \001(\005\022\016\n"
    "\006maxnum\030\004 \001(\005\022\017\n\007currnum\030\005 \001(\005\022\017\n\007usernu"
    "m\030\006 \001(\005\022\022\n\ncreatedate\030\007 \001(\t\022\021\n\tnewaddnum"
    "\030\010 \001(\005\022\021\n\tqrcodeurl\030\t \001(\t\"\307\001\n\020wiringdaya"
    "chieve\022\017\n\007datestr\030\001 \001(\t\022\016\n\006allach\030\002 \001(\005\022"
    "\017\n\007teamach\030\003 \001(\005\022\017\n\007selfach\030\004 \001(\005\022\020\n\010all"
    "ach_1\030\005 \001(\t\022\021\n\tteamach_1\030\006 \001(\t\022\021\n\tselfac"
    "h_1\030\007 \001(\t\022\017\n\007getrate\030\010 \001(\005\022\020\n\010getmoney\030\t"
    " \001(\005\022\025\n\rfivelevel_ach\030\n \001(\t\"\306\001\n\017wiringaw"
    "ardinfo\022\017\n\007awardid\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005"
    "\022\017\n\007datestr\030\003 \001(\t\022\022\n\nweekallach\030\004 \001(\t\022\023\n"
    "\013weekteamach\030\005 \001(\t\022\023\n\013weekselfach\030\006 \001(\t\022"
    "\020\n\010awardnum\030\007 \001(\t\022\r\n\005state\030\010 \001(\005\022\020\n\010real"
    "hair\030\t \001(\t\022\020\n\010preissue\030\n \001(\t\"\207\001\n\022wiringw"
    "ithdrawinfo\022\016\n\006drawid\030\001 \001(\t\022\016\n\006userid\030\002 "
    "\001(\005\022\017\n\007datestr\030\003 \001(\t\022\016\n\006amount\030\004 \001(\t\022\020\n\010"
    "drawtypw\030\005 \001(\005\022\017\n\007account\030\006 \001(\t\022\r\n\005state"
    "\030\007 \001(\005\"\252\002\n\016wiringuserinfo\022\n\n\002id\030\001 \001(\005\022\016\n"
    "\006userid\030\002 \001(\005\022\020\n\010wiringid\030\003 \001(\005\022\022\n\ncreat"
    "edate\030\004 \001(\t\022\020\n\010prelevel\030\005 \001(\005\022\r\n\005level\030\006"
    " \001(\005\022\026\n\016allperformance\030\007 \001(\t\022\027\n\017selfperf"
    "ormance\030\010 \001(\t\022\031\n\021directperformance\030\t \001(\t"
    "\022\027\n\017teamperformance\030\n \001(\t\022\021\n\tallincome\030\014"
    " \001(\005\022\021\n\tgetincome\030\r \001(\005\022\024\n\014allpreincome\030"
    "\016 \001(\005\022\024\n\014getpreincome\030\017 \001(\005\"\\\n\017fenchengd"
    "ayinfo\022\017\n\007datestr\030\001 \001(\t\022\021\n\tallincome\030\002 \001"
    "(\005\022\022\n\nteamincome\030\003 \001(\005\022\021\n\tdirincome\030\004 \001("
    "\005\"\360\001\n\020fenchengweekinfo\022\017\n\007awardid\030\001 \001(\005\022"
    "\016\n\006userid\030\002 \001(\005\022\017\n\007datestr\030\003 \001(\t\022\022\n\nweek"
    "allnum\030\004 \001(\t\022\023\n\013weekteamnum\030\005 \001(\t\022\022\n\nwee"
    "kdirnum\030\006 \001(\t\022\023\n\013awardincome\030\007 \001(\t\022\r\n\005st"
    "ate\030\010 \001(\005\022\022\n\nrealincome\030\t \001(\t\022\021\n\tpreinco"
    "me\030\n \001(\t\022\022\n\nweekpayall\030\013 \001(\005\022\016\n\006cfrate\030\014"
    " \001(\005\"Z\n\016wiringdaybonus\022\017\n\007datestr\030\001 \001(\t\022"
    "\013\n\003ach\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\014\n\004rate\030\004 \001("
    "\005\022\r\n\005bonus\030\005 \001(\t\"\226\001\n\023wiringcostweekbonus"
    "\022\017\n\007datestr\030\001 \001(\t\022\016\n\006allwin\030\002 \001(\005\022\022\n\nbon"
    "us_rate\030\003 \001(\005\022\022\n\nself_bonus\030\004 \001(\005\022\023\n\013age"
    "nt_bonus\030\005 \001(\005\022\021\n\tall_bonus\030\006 \001(\005\022\016\n\006sta"
    "tus\030\007 \001(\005\"\236\001\n\030wiringagentcostweekbonus\022\017"
    "\n\007datestr\030\001 \001(\t\022\020\n\010agent_id\030\002 \001(\005\022\022\n\nage"
    "nt_name\030\003 \001(\t\022\022\n\nbonus_rate\030\004 \001(\005\022\022\n\nsel"
    "f_bonus\030\005 \001(\005\022\023\n\013agent_bonus\030\006 \001(\005\022\016\n\006st"
    "atus\030\007 \001(\005", 2090);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_agent.proto", &protobuf_RegisterTypes);
  agentinfo::default_instance_ = new agentinfo();
  wiringinfo::default_instance_ = new wiringinfo();
  wiringdayachieve::default_instance_ = new wiringdayachieve();
  wiringawardinfo::default_instance_ = new wiringawardinfo();
  wiringwithdrawinfo::default_instance_ = new wiringwithdrawinfo();
  wiringuserinfo::default_instance_ = new wiringuserinfo();
  fenchengdayinfo::default_instance_ = new fenchengdayinfo();
  fenchengweekinfo::default_instance_ = new fenchengweekinfo();
  wiringdaybonus::default_instance_ = new wiringdaybonus();
  wiringcostweekbonus::default_instance_ = new wiringcostweekbonus();
  wiringagentcostweekbonus::default_instance_ = new wiringagentcostweekbonus();
  agentinfo::default_instance_->InitAsDefaultInstance();
  wiringinfo::default_instance_->InitAsDefaultInstance();
  wiringdayachieve::default_instance_->InitAsDefaultInstance();
  wiringawardinfo::default_instance_->InitAsDefaultInstance();
  wiringwithdrawinfo::default_instance_->InitAsDefaultInstance();
  wiringuserinfo::default_instance_->InitAsDefaultInstance();
  fenchengdayinfo::default_instance_->InitAsDefaultInstance();
  fenchengweekinfo::default_instance_->InitAsDefaultInstance();
  wiringdaybonus::default_instance_->InitAsDefaultInstance();
  wiringcostweekbonus::default_instance_->InitAsDefaultInstance();
  wiringagentcostweekbonus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fagent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fagent_2eproto {
  StaticDescriptorInitializer_st_5fagent_2eproto() {
    protobuf_AddDesc_st_5fagent_2eproto();
  }
} static_descriptor_initializer_st_5fagent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int agentinfo::kUseridFieldNumber;
const int agentinfo::kInvitestrFieldNumber;
const int agentinfo::kLevelFieldNumber;
const int agentinfo::kSoleagentFieldNumber;
const int agentinfo::kAgent1FieldNumber;
const int agentinfo::kAgent2FieldNumber;
const int agentinfo::kAgent3FieldNumber;
const int agentinfo::kAgent4FieldNumber;
const int agentinfo::kQrcodeurlFieldNumber;
const int agentinfo::kDatemarkFieldNumber;
const int agentinfo::kMoneymarkFieldNumber;
const int agentinfo::kWeekmoneyFieldNumber;
const int agentinfo::kExclusiveurlFieldNumber;
const int agentinfo::kAlipayFieldNumber;
const int agentinfo::kBankaccountFieldNumber;
const int agentinfo::kWiringidFieldNumber;
const int agentinfo::kGradeFieldNumber;
#endif  // !_MSC_VER

agentinfo::agentinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void agentinfo::InitAsDefaultInstance() {
}

agentinfo::agentinfo(const agentinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void agentinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  invitestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  soleagent_ = 0;
  agent1_ = 0;
  agent2_ = 0;
  agent3_ = 0;
  agent4_ = 0;
  qrcodeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datemark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moneymark_ = 0;
  weekmoney_ = 0;
  exclusiveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alipay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wiringid_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agentinfo::~agentinfo() {
  SharedDtor();
}

void agentinfo::SharedDtor() {
  if (invitestr_ != &::google::protobuf::internal::kEmptyString) {
    delete invitestr_;
  }
  if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete qrcodeurl_;
  }
  if (datemark_ != &::google::protobuf::internal::kEmptyString) {
    delete datemark_;
  }
  if (exclusiveurl_ != &::google::protobuf::internal::kEmptyString) {
    delete exclusiveurl_;
  }
  if (alipay_ != &::google::protobuf::internal::kEmptyString) {
    delete alipay_;
  }
  if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete bankaccount_;
  }
  if (this != default_instance_) {
  }
}

void agentinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agentinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agentinfo_descriptor_;
}

const agentinfo& agentinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

agentinfo* agentinfo::default_instance_ = NULL;

agentinfo* agentinfo::New() const {
  return new agentinfo;
}

void agentinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_invitestr()) {
      if (invitestr_ != &::google::protobuf::internal::kEmptyString) {
        invitestr_->clear();
      }
    }
    level_ = 0;
    soleagent_ = 0;
    agent1_ = 0;
    agent2_ = 0;
    agent3_ = 0;
    agent4_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_qrcodeurl()) {
      if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
        qrcodeurl_->clear();
      }
    }
    if (has_datemark()) {
      if (datemark_ != &::google::protobuf::internal::kEmptyString) {
        datemark_->clear();
      }
    }
    moneymark_ = 0;
    weekmoney_ = 0;
    if (has_exclusiveurl()) {
      if (exclusiveurl_ != &::google::protobuf::internal::kEmptyString) {
        exclusiveurl_->clear();
      }
    }
    if (has_alipay()) {
      if (alipay_ != &::google::protobuf::internal::kEmptyString) {
        alipay_->clear();
      }
    }
    if (has_bankaccount()) {
      if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
        bankaccount_->clear();
      }
    }
    wiringid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agentinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invitestr;
        break;
      }

      // optional string invitestr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitestr().data(), this->invitestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_soleagent;
        break;
      }

      // optional int32 soleagent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soleagent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soleagent_)));
          set_has_soleagent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_agent1;
        break;
      }

      // optional int32 agent1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent1_)));
          set_has_agent1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agent2;
        break;
      }

      // optional int32 agent2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent2_)));
          set_has_agent2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_agent3;
        break;
      }

      // optional int32 agent3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent3_)));
          set_has_agent3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_agent4;
        break;
      }

      // optional int32 agent4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent4_)));
          set_has_agent4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_qrcodeurl;
        break;
      }

      // optional string qrcodeurl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrcodeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrcodeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrcodeurl().data(), this->qrcodeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_datemark;
        break;
      }

      // optional string datemark = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datemark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datemark().data(), this->datemark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_moneymark;
        break;
      }

      // optional int32 moneymark = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneymark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneymark_)));
          set_has_moneymark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weekmoney;
        break;
      }

      // optional int32 weekmoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekmoney_)));
          set_has_weekmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_exclusiveurl;
        break;
      }

      // optional string exclusiveurl = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exclusiveurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exclusiveurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exclusiveurl().data(), this->exclusiveurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_alipay;
        break;
      }

      // optional string alipay = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alipay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alipay().data(), this->alipay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_bankaccount;
        break;
      }

      // optional string bankaccount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankaccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankaccount().data(), this->bankaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_wiringid;
        break;
      }

      // optional int32 wiringid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wiringid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiringid_)));
          set_has_wiringid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_grade;
        break;
      }

      // optional int32 grade = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void agentinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string invitestr = 2;
  if (has_invitestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitestr().data(), this->invitestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->invitestr(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 soleagent = 4;
  if (has_soleagent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->soleagent(), output);
  }

  // optional int32 agent1 = 5;
  if (has_agent1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->agent1(), output);
  }

  // optional int32 agent2 = 6;
  if (has_agent2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->agent2(), output);
  }

  // optional int32 agent3 = 7;
  if (has_agent3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->agent3(), output);
  }

  // optional int32 agent4 = 8;
  if (has_agent4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->agent4(), output);
  }

  // optional string qrcodeurl = 10;
  if (has_qrcodeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrcodeurl().data(), this->qrcodeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->qrcodeurl(), output);
  }

  // optional string datemark = 11;
  if (has_datemark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datemark().data(), this->datemark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->datemark(), output);
  }

  // optional int32 moneymark = 12;
  if (has_moneymark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->moneymark(), output);
  }

  // optional int32 weekmoney = 13;
  if (has_weekmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->weekmoney(), output);
  }

  // optional string exclusiveurl = 14;
  if (has_exclusiveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exclusiveurl().data(), this->exclusiveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->exclusiveurl(), output);
  }

  // optional string alipay = 15;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->alipay(), output);
  }

  // optional string bankaccount = 16;
  if (has_bankaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankaccount().data(), this->bankaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->bankaccount(), output);
  }

  // optional int32 wiringid = 17;
  if (has_wiringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->wiringid(), output);
  }

  // optional int32 grade = 18;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* agentinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string invitestr = 2;
  if (has_invitestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitestr().data(), this->invitestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitestr(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 soleagent = 4;
  if (has_soleagent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->soleagent(), target);
  }

  // optional int32 agent1 = 5;
  if (has_agent1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->agent1(), target);
  }

  // optional int32 agent2 = 6;
  if (has_agent2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->agent2(), target);
  }

  // optional int32 agent3 = 7;
  if (has_agent3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->agent3(), target);
  }

  // optional int32 agent4 = 8;
  if (has_agent4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->agent4(), target);
  }

  // optional string qrcodeurl = 10;
  if (has_qrcodeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrcodeurl().data(), this->qrcodeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->qrcodeurl(), target);
  }

  // optional string datemark = 11;
  if (has_datemark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datemark().data(), this->datemark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->datemark(), target);
  }

  // optional int32 moneymark = 12;
  if (has_moneymark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->moneymark(), target);
  }

  // optional int32 weekmoney = 13;
  if (has_weekmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->weekmoney(), target);
  }

  // optional string exclusiveurl = 14;
  if (has_exclusiveurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exclusiveurl().data(), this->exclusiveurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->exclusiveurl(), target);
  }

  // optional string alipay = 15;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->alipay(), target);
  }

  // optional string bankaccount = 16;
  if (has_bankaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankaccount().data(), this->bankaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->bankaccount(), target);
  }

  // optional int32 wiringid = 17;
  if (has_wiringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->wiringid(), target);
  }

  // optional int32 grade = 18;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int agentinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string invitestr = 2;
    if (has_invitestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitestr());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 soleagent = 4;
    if (has_soleagent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soleagent());
    }

    // optional int32 agent1 = 5;
    if (has_agent1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent1());
    }

    // optional int32 agent2 = 6;
    if (has_agent2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent2());
    }

    // optional int32 agent3 = 7;
    if (has_agent3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent3());
    }

    // optional int32 agent4 = 8;
    if (has_agent4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent4());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string qrcodeurl = 10;
    if (has_qrcodeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrcodeurl());
    }

    // optional string datemark = 11;
    if (has_datemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datemark());
    }

    // optional int32 moneymark = 12;
    if (has_moneymark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneymark());
    }

    // optional int32 weekmoney = 13;
    if (has_weekmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekmoney());
    }

    // optional string exclusiveurl = 14;
    if (has_exclusiveurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exclusiveurl());
    }

    // optional string alipay = 15;
    if (has_alipay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipay());
    }

    // optional string bankaccount = 16;
    if (has_bankaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankaccount());
    }

    // optional int32 wiringid = 17;
    if (has_wiringid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiringid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 grade = 18;
    if (has_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agentinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agentinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agentinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agentinfo::MergeFrom(const agentinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_invitestr()) {
      set_invitestr(from.invitestr());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_soleagent()) {
      set_soleagent(from.soleagent());
    }
    if (from.has_agent1()) {
      set_agent1(from.agent1());
    }
    if (from.has_agent2()) {
      set_agent2(from.agent2());
    }
    if (from.has_agent3()) {
      set_agent3(from.agent3());
    }
    if (from.has_agent4()) {
      set_agent4(from.agent4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qrcodeurl()) {
      set_qrcodeurl(from.qrcodeurl());
    }
    if (from.has_datemark()) {
      set_datemark(from.datemark());
    }
    if (from.has_moneymark()) {
      set_moneymark(from.moneymark());
    }
    if (from.has_weekmoney()) {
      set_weekmoney(from.weekmoney());
    }
    if (from.has_exclusiveurl()) {
      set_exclusiveurl(from.exclusiveurl());
    }
    if (from.has_alipay()) {
      set_alipay(from.alipay());
    }
    if (from.has_bankaccount()) {
      set_bankaccount(from.bankaccount());
    }
    if (from.has_wiringid()) {
      set_wiringid(from.wiringid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agentinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agentinfo::CopyFrom(const agentinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agentinfo::IsInitialized() const {

  return true;
}

void agentinfo::Swap(agentinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(invitestr_, other->invitestr_);
    std::swap(level_, other->level_);
    std::swap(soleagent_, other->soleagent_);
    std::swap(agent1_, other->agent1_);
    std::swap(agent2_, other->agent2_);
    std::swap(agent3_, other->agent3_);
    std::swap(agent4_, other->agent4_);
    std::swap(qrcodeurl_, other->qrcodeurl_);
    std::swap(datemark_, other->datemark_);
    std::swap(moneymark_, other->moneymark_);
    std::swap(weekmoney_, other->weekmoney_);
    std::swap(exclusiveurl_, other->exclusiveurl_);
    std::swap(alipay_, other->alipay_);
    std::swap(bankaccount_, other->bankaccount_);
    std::swap(wiringid_, other->wiringid_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agentinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agentinfo_descriptor_;
  metadata.reflection = agentinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wiringinfo::kIdFieldNumber;
const int wiringinfo::kNameFieldNumber;
const int wiringinfo::kOwneridFieldNumber;
const int wiringinfo::kMaxnumFieldNumber;
const int wiringinfo::kCurrnumFieldNumber;
const int wiringinfo::kUsernumFieldNumber;
const int wiringinfo::kCreatedateFieldNumber;
const int wiringinfo::kNewaddnumFieldNumber;
const int wiringinfo::kQrcodeurlFieldNumber;
#endif  // !_MSC_VER

wiringinfo::wiringinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wiringinfo::InitAsDefaultInstance() {
}

wiringinfo::wiringinfo(const wiringinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wiringinfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ownerid_ = 0;
  maxnum_ = 0;
  currnum_ = 0;
  usernum_ = 0;
  createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newaddnum_ = 0;
  qrcodeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wiringinfo::~wiringinfo() {
  SharedDtor();
}

void wiringinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete qrcodeurl_;
  }
  if (this != default_instance_) {
  }
}

void wiringinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wiringinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wiringinfo_descriptor_;
}

const wiringinfo& wiringinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

wiringinfo* wiringinfo::default_instance_ = NULL;

wiringinfo* wiringinfo::New() const {
  return new wiringinfo;
}

void wiringinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ownerid_ = 0;
    maxnum_ = 0;
    currnum_ = 0;
    usernum_ = 0;
    if (has_createdate()) {
      if (createdate_ != &::google::protobuf::internal::kEmptyString) {
        createdate_->clear();
      }
    }
    newaddnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_qrcodeurl()) {
      if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
        qrcodeurl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wiringinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxnum;
        break;
      }

      // optional int32 maxnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currnum;
        break;
      }

      // optional int32 currnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currnum_)));
          set_has_currnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_createdate;
        break;
      }

      // optional string createdate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdate().data(), this->createdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_newaddnum;
        break;
      }

      // optional int32 newaddnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newaddnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newaddnum_)));
          set_has_newaddnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_qrcodeurl;
        break;
      }

      // optional string qrcodeurl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrcodeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrcodeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrcodeurl().data(), this->qrcodeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wiringinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 ownerid = 3;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ownerid(), output);
  }

  // optional int32 maxnum = 4;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxnum(), output);
  }

  // optional int32 currnum = 5;
  if (has_currnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currnum(), output);
  }

  // optional int32 usernum = 6;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usernum(), output);
  }

  // optional string createdate = 7;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->createdate(), output);
  }

  // optional int32 newaddnum = 8;
  if (has_newaddnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->newaddnum(), output);
  }

  // optional string qrcodeurl = 9;
  if (has_qrcodeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrcodeurl().data(), this->qrcodeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->qrcodeurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wiringinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 ownerid = 3;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ownerid(), target);
  }

  // optional int32 maxnum = 4;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxnum(), target);
  }

  // optional int32 currnum = 5;
  if (has_currnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currnum(), target);
  }

  // optional int32 usernum = 6;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usernum(), target);
  }

  // optional string createdate = 7;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->createdate(), target);
  }

  // optional int32 newaddnum = 8;
  if (has_newaddnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->newaddnum(), target);
  }

  // optional string qrcodeurl = 9;
  if (has_qrcodeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrcodeurl().data(), this->qrcodeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->qrcodeurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wiringinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 ownerid = 3;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // optional int32 maxnum = 4;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

    // optional int32 currnum = 5;
    if (has_currnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currnum());
    }

    // optional int32 usernum = 6;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

    // optional string createdate = 7;
    if (has_createdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdate());
    }

    // optional int32 newaddnum = 8;
    if (has_newaddnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newaddnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string qrcodeurl = 9;
    if (has_qrcodeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrcodeurl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wiringinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wiringinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wiringinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wiringinfo::MergeFrom(const wiringinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_currnum()) {
      set_currnum(from.currnum());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_createdate()) {
      set_createdate(from.createdate());
    }
    if (from.has_newaddnum()) {
      set_newaddnum(from.newaddnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qrcodeurl()) {
      set_qrcodeurl(from.qrcodeurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wiringinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wiringinfo::CopyFrom(const wiringinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wiringinfo::IsInitialized() const {

  return true;
}

void wiringinfo::Swap(wiringinfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(currnum_, other->currnum_);
    std::swap(usernum_, other->usernum_);
    std::swap(createdate_, other->createdate_);
    std::swap(newaddnum_, other->newaddnum_);
    std::swap(qrcodeurl_, other->qrcodeurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wiringinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wiringinfo_descriptor_;
  metadata.reflection = wiringinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wiringdayachieve::kDatestrFieldNumber;
const int wiringdayachieve::kAllachFieldNumber;
const int wiringdayachieve::kTeamachFieldNumber;
const int wiringdayachieve::kSelfachFieldNumber;
const int wiringdayachieve::kAllach1FieldNumber;
const int wiringdayachieve::kTeamach1FieldNumber;
const int wiringdayachieve::kSelfach1FieldNumber;
const int wiringdayachieve::kGetrateFieldNumber;
const int wiringdayachieve::kGetmoneyFieldNumber;
const int wiringdayachieve::kFivelevelAchFieldNumber;
#endif  // !_MSC_VER

wiringdayachieve::wiringdayachieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wiringdayachieve::InitAsDefaultInstance() {
}

wiringdayachieve::wiringdayachieve(const wiringdayachieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wiringdayachieve::SharedCtor() {
  _cached_size_ = 0;
  datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allach_ = 0;
  teamach_ = 0;
  selfach_ = 0;
  allach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getrate_ = 0;
  getmoney_ = 0;
  fivelevel_ach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wiringdayachieve::~wiringdayachieve() {
  SharedDtor();
}

void wiringdayachieve::SharedDtor() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (allach_1_ != &::google::protobuf::internal::kEmptyString) {
    delete allach_1_;
  }
  if (teamach_1_ != &::google::protobuf::internal::kEmptyString) {
    delete teamach_1_;
  }
  if (selfach_1_ != &::google::protobuf::internal::kEmptyString) {
    delete selfach_1_;
  }
  if (fivelevel_ach_ != &::google::protobuf::internal::kEmptyString) {
    delete fivelevel_ach_;
  }
  if (this != default_instance_) {
  }
}

void wiringdayachieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wiringdayachieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wiringdayachieve_descriptor_;
}

const wiringdayachieve& wiringdayachieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

wiringdayachieve* wiringdayachieve::default_instance_ = NULL;

wiringdayachieve* wiringdayachieve::New() const {
  return new wiringdayachieve;
}

void wiringdayachieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datestr()) {
      if (datestr_ != &::google::protobuf::internal::kEmptyString) {
        datestr_->clear();
      }
    }
    allach_ = 0;
    teamach_ = 0;
    selfach_ = 0;
    if (has_allach_1()) {
      if (allach_1_ != &::google::protobuf::internal::kEmptyString) {
        allach_1_->clear();
      }
    }
    if (has_teamach_1()) {
      if (teamach_1_ != &::google::protobuf::internal::kEmptyString) {
        teamach_1_->clear();
      }
    }
    if (has_selfach_1()) {
      if (selfach_1_ != &::google::protobuf::internal::kEmptyString) {
        selfach_1_->clear();
      }
    }
    getrate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    getmoney_ = 0;
    if (has_fivelevel_ach()) {
      if (fivelevel_ach_ != &::google::protobuf::internal::kEmptyString) {
        fivelevel_ach_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wiringdayachieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string datestr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allach;
        break;
      }

      // optional int32 allach = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allach_)));
          set_has_allach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamach;
        break;
      }

      // optional int32 teamach = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamach_)));
          set_has_teamach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selfach;
        break;
      }

      // optional int32 selfach = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfach_)));
          set_has_selfach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_allach_1;
        break;
      }

      // optional string allach_1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allach_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allach_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allach_1().data(), this->allach_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_teamach_1;
        break;
      }

      // optional string teamach_1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamach_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamach_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamach_1().data(), this->teamach_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_selfach_1;
        break;
      }

      // optional string selfach_1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfach_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfach_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfach_1().data(), this->selfach_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_getrate;
        break;
      }

      // optional int32 getrate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getrate_)));
          set_has_getrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_getmoney;
        break;
      }

      // optional int32 getmoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getmoney_)));
          set_has_getmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fivelevel_ach;
        break;
      }

      // optional string fivelevel_ach = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fivelevel_ach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fivelevel_ach()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fivelevel_ach().data(), this->fivelevel_ach().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wiringdayachieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datestr(), output);
  }

  // optional int32 allach = 2;
  if (has_allach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->allach(), output);
  }

  // optional int32 teamach = 3;
  if (has_teamach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamach(), output);
  }

  // optional int32 selfach = 4;
  if (has_selfach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->selfach(), output);
  }

  // optional string allach_1 = 5;
  if (has_allach_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allach_1().data(), this->allach_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->allach_1(), output);
  }

  // optional string teamach_1 = 6;
  if (has_teamach_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamach_1().data(), this->teamach_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->teamach_1(), output);
  }

  // optional string selfach_1 = 7;
  if (has_selfach_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfach_1().data(), this->selfach_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->selfach_1(), output);
  }

  // optional int32 getrate = 8;
  if (has_getrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->getrate(), output);
  }

  // optional int32 getmoney = 9;
  if (has_getmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->getmoney(), output);
  }

  // optional string fivelevel_ach = 10;
  if (has_fivelevel_ach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fivelevel_ach().data(), this->fivelevel_ach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fivelevel_ach(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wiringdayachieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datestr(), target);
  }

  // optional int32 allach = 2;
  if (has_allach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->allach(), target);
  }

  // optional int32 teamach = 3;
  if (has_teamach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamach(), target);
  }

  // optional int32 selfach = 4;
  if (has_selfach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->selfach(), target);
  }

  // optional string allach_1 = 5;
  if (has_allach_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allach_1().data(), this->allach_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->allach_1(), target);
  }

  // optional string teamach_1 = 6;
  if (has_teamach_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamach_1().data(), this->teamach_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->teamach_1(), target);
  }

  // optional string selfach_1 = 7;
  if (has_selfach_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfach_1().data(), this->selfach_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->selfach_1(), target);
  }

  // optional int32 getrate = 8;
  if (has_getrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->getrate(), target);
  }

  // optional int32 getmoney = 9;
  if (has_getmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->getmoney(), target);
  }

  // optional string fivelevel_ach = 10;
  if (has_fivelevel_ach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fivelevel_ach().data(), this->fivelevel_ach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fivelevel_ach(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wiringdayachieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string datestr = 1;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional int32 allach = 2;
    if (has_allach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allach());
    }

    // optional int32 teamach = 3;
    if (has_teamach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamach());
    }

    // optional int32 selfach = 4;
    if (has_selfach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfach());
    }

    // optional string allach_1 = 5;
    if (has_allach_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allach_1());
    }

    // optional string teamach_1 = 6;
    if (has_teamach_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamach_1());
    }

    // optional string selfach_1 = 7;
    if (has_selfach_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfach_1());
    }

    // optional int32 getrate = 8;
    if (has_getrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getrate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 getmoney = 9;
    if (has_getmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getmoney());
    }

    // optional string fivelevel_ach = 10;
    if (has_fivelevel_ach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fivelevel_ach());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wiringdayachieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wiringdayachieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wiringdayachieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wiringdayachieve::MergeFrom(const wiringdayachieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datestr()) {
      set_datestr(from.datestr());
    }
    if (from.has_allach()) {
      set_allach(from.allach());
    }
    if (from.has_teamach()) {
      set_teamach(from.teamach());
    }
    if (from.has_selfach()) {
      set_selfach(from.selfach());
    }
    if (from.has_allach_1()) {
      set_allach_1(from.allach_1());
    }
    if (from.has_teamach_1()) {
      set_teamach_1(from.teamach_1());
    }
    if (from.has_selfach_1()) {
      set_selfach_1(from.selfach_1());
    }
    if (from.has_getrate()) {
      set_getrate(from.getrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getmoney()) {
      set_getmoney(from.getmoney());
    }
    if (from.has_fivelevel_ach()) {
      set_fivelevel_ach(from.fivelevel_ach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wiringdayachieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wiringdayachieve::CopyFrom(const wiringdayachieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wiringdayachieve::IsInitialized() const {

  return true;
}

void wiringdayachieve::Swap(wiringdayachieve* other) {
  if (other != this) {
    std::swap(datestr_, other->datestr_);
    std::swap(allach_, other->allach_);
    std::swap(teamach_, other->teamach_);
    std::swap(selfach_, other->selfach_);
    std::swap(allach_1_, other->allach_1_);
    std::swap(teamach_1_, other->teamach_1_);
    std::swap(selfach_1_, other->selfach_1_);
    std::swap(getrate_, other->getrate_);
    std::swap(getmoney_, other->getmoney_);
    std::swap(fivelevel_ach_, other->fivelevel_ach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wiringdayachieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wiringdayachieve_descriptor_;
  metadata.reflection = wiringdayachieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wiringawardinfo::kAwardidFieldNumber;
const int wiringawardinfo::kUseridFieldNumber;
const int wiringawardinfo::kDatestrFieldNumber;
const int wiringawardinfo::kWeekallachFieldNumber;
const int wiringawardinfo::kWeekteamachFieldNumber;
const int wiringawardinfo::kWeekselfachFieldNumber;
const int wiringawardinfo::kAwardnumFieldNumber;
const int wiringawardinfo::kStateFieldNumber;
const int wiringawardinfo::kRealhairFieldNumber;
const int wiringawardinfo::kPreissueFieldNumber;
#endif  // !_MSC_VER

wiringawardinfo::wiringawardinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wiringawardinfo::InitAsDefaultInstance() {
}

wiringawardinfo::wiringawardinfo(const wiringawardinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wiringawardinfo::SharedCtor() {
  _cached_size_ = 0;
  awardid_ = 0;
  userid_ = 0;
  datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weekallach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weekteamach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weekselfach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  realhair_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wiringawardinfo::~wiringawardinfo() {
  SharedDtor();
}

void wiringawardinfo::SharedDtor() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (weekallach_ != &::google::protobuf::internal::kEmptyString) {
    delete weekallach_;
  }
  if (weekteamach_ != &::google::protobuf::internal::kEmptyString) {
    delete weekteamach_;
  }
  if (weekselfach_ != &::google::protobuf::internal::kEmptyString) {
    delete weekselfach_;
  }
  if (awardnum_ != &::google::protobuf::internal::kEmptyString) {
    delete awardnum_;
  }
  if (realhair_ != &::google::protobuf::internal::kEmptyString) {
    delete realhair_;
  }
  if (preissue_ != &::google::protobuf::internal::kEmptyString) {
    delete preissue_;
  }
  if (this != default_instance_) {
  }
}

void wiringawardinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wiringawardinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wiringawardinfo_descriptor_;
}

const wiringawardinfo& wiringawardinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

wiringawardinfo* wiringawardinfo::default_instance_ = NULL;

wiringawardinfo* wiringawardinfo::New() const {
  return new wiringawardinfo;
}

void wiringawardinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardid_ = 0;
    userid_ = 0;
    if (has_datestr()) {
      if (datestr_ != &::google::protobuf::internal::kEmptyString) {
        datestr_->clear();
      }
    }
    if (has_weekallach()) {
      if (weekallach_ != &::google::protobuf::internal::kEmptyString) {
        weekallach_->clear();
      }
    }
    if (has_weekteamach()) {
      if (weekteamach_ != &::google::protobuf::internal::kEmptyString) {
        weekteamach_->clear();
      }
    }
    if (has_weekselfach()) {
      if (weekselfach_ != &::google::protobuf::internal::kEmptyString) {
        weekselfach_->clear();
      }
    }
    if (has_awardnum()) {
      if (awardnum_ != &::google::protobuf::internal::kEmptyString) {
        awardnum_->clear();
      }
    }
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_realhair()) {
      if (realhair_ != &::google::protobuf::internal::kEmptyString) {
        realhair_->clear();
      }
    }
    if (has_preissue()) {
      if (preissue_ != &::google::protobuf::internal::kEmptyString) {
        preissue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wiringawardinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 awardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardid_)));
          set_has_awardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datestr;
        break;
      }

      // optional string datestr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_weekallach;
        break;
      }

      // optional string weekallach = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekallach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekallach()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weekallach().data(), this->weekallach().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_weekteamach;
        break;
      }

      // optional string weekteamach = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekteamach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekteamach()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weekteamach().data(), this->weekteamach().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_weekselfach;
        break;
      }

      // optional string weekselfach = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekselfach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekselfach()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weekselfach().data(), this->weekselfach().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_awardnum;
        break;
      }

      // optional string awardnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardnum().data(), this->awardnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional int32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_realhair;
        break;
      }

      // optional string realhair = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realhair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realhair()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realhair().data(), this->realhair().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_preissue;
        break;
      }

      // optional string preissue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preissue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preissue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preissue().data(), this->preissue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wiringawardinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 awardid = 1;
  if (has_awardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->awardid(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string datestr = 3;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->datestr(), output);
  }

  // optional string weekallach = 4;
  if (has_weekallach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekallach().data(), this->weekallach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->weekallach(), output);
  }

  // optional string weekteamach = 5;
  if (has_weekteamach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekteamach().data(), this->weekteamach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->weekteamach(), output);
  }

  // optional string weekselfach = 6;
  if (has_weekselfach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekselfach().data(), this->weekselfach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->weekselfach(), output);
  }

  // optional string awardnum = 7;
  if (has_awardnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardnum().data(), this->awardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->awardnum(), output);
  }

  // optional int32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // optional string realhair = 9;
  if (has_realhair()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realhair().data(), this->realhair().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->realhair(), output);
  }

  // optional string preissue = 10;
  if (has_preissue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preissue().data(), this->preissue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->preissue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wiringawardinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 awardid = 1;
  if (has_awardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->awardid(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string datestr = 3;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->datestr(), target);
  }

  // optional string weekallach = 4;
  if (has_weekallach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekallach().data(), this->weekallach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->weekallach(), target);
  }

  // optional string weekteamach = 5;
  if (has_weekteamach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekteamach().data(), this->weekteamach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->weekteamach(), target);
  }

  // optional string weekselfach = 6;
  if (has_weekselfach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekselfach().data(), this->weekselfach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->weekselfach(), target);
  }

  // optional string awardnum = 7;
  if (has_awardnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardnum().data(), this->awardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->awardnum(), target);
  }

  // optional int32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->state(), target);
  }

  // optional string realhair = 9;
  if (has_realhair()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realhair().data(), this->realhair().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->realhair(), target);
  }

  // optional string preissue = 10;
  if (has_preissue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preissue().data(), this->preissue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->preissue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wiringawardinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 awardid = 1;
    if (has_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardid());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string datestr = 3;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional string weekallach = 4;
    if (has_weekallach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekallach());
    }

    // optional string weekteamach = 5;
    if (has_weekteamach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekteamach());
    }

    // optional string weekselfach = 6;
    if (has_weekselfach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekselfach());
    }

    // optional string awardnum = 7;
    if (has_awardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardnum());
    }

    // optional int32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string realhair = 9;
    if (has_realhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realhair());
    }

    // optional string preissue = 10;
    if (has_preissue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preissue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wiringawardinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wiringawardinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wiringawardinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wiringawardinfo::MergeFrom(const wiringawardinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardid()) {
      set_awardid(from.awardid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datestr()) {
      set_datestr(from.datestr());
    }
    if (from.has_weekallach()) {
      set_weekallach(from.weekallach());
    }
    if (from.has_weekteamach()) {
      set_weekteamach(from.weekteamach());
    }
    if (from.has_weekselfach()) {
      set_weekselfach(from.weekselfach());
    }
    if (from.has_awardnum()) {
      set_awardnum(from.awardnum());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_realhair()) {
      set_realhair(from.realhair());
    }
    if (from.has_preissue()) {
      set_preissue(from.preissue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wiringawardinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wiringawardinfo::CopyFrom(const wiringawardinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wiringawardinfo::IsInitialized() const {

  return true;
}

void wiringawardinfo::Swap(wiringawardinfo* other) {
  if (other != this) {
    std::swap(awardid_, other->awardid_);
    std::swap(userid_, other->userid_);
    std::swap(datestr_, other->datestr_);
    std::swap(weekallach_, other->weekallach_);
    std::swap(weekteamach_, other->weekteamach_);
    std::swap(weekselfach_, other->weekselfach_);
    std::swap(awardnum_, other->awardnum_);
    std::swap(state_, other->state_);
    std::swap(realhair_, other->realhair_);
    std::swap(preissue_, other->preissue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wiringawardinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wiringawardinfo_descriptor_;
  metadata.reflection = wiringawardinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wiringwithdrawinfo::kDrawidFieldNumber;
const int wiringwithdrawinfo::kUseridFieldNumber;
const int wiringwithdrawinfo::kDatestrFieldNumber;
const int wiringwithdrawinfo::kAmountFieldNumber;
const int wiringwithdrawinfo::kDrawtypwFieldNumber;
const int wiringwithdrawinfo::kAccountFieldNumber;
const int wiringwithdrawinfo::kStateFieldNumber;
#endif  // !_MSC_VER

wiringwithdrawinfo::wiringwithdrawinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wiringwithdrawinfo::InitAsDefaultInstance() {
}

wiringwithdrawinfo::wiringwithdrawinfo(const wiringwithdrawinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wiringwithdrawinfo::SharedCtor() {
  _cached_size_ = 0;
  drawid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = 0;
  datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  drawtypw_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wiringwithdrawinfo::~wiringwithdrawinfo() {
  SharedDtor();
}

void wiringwithdrawinfo::SharedDtor() {
  if (drawid_ != &::google::protobuf::internal::kEmptyString) {
    delete drawid_;
  }
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void wiringwithdrawinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wiringwithdrawinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wiringwithdrawinfo_descriptor_;
}

const wiringwithdrawinfo& wiringwithdrawinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

wiringwithdrawinfo* wiringwithdrawinfo::default_instance_ = NULL;

wiringwithdrawinfo* wiringwithdrawinfo::New() const {
  return new wiringwithdrawinfo;
}

void wiringwithdrawinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawid()) {
      if (drawid_ != &::google::protobuf::internal::kEmptyString) {
        drawid_->clear();
      }
    }
    userid_ = 0;
    if (has_datestr()) {
      if (datestr_ != &::google::protobuf::internal::kEmptyString) {
        datestr_->clear();
      }
    }
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::kEmptyString) {
        amount_->clear();
      }
    }
    drawtypw_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wiringwithdrawinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string drawid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drawid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->drawid().data(), this->drawid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datestr;
        break;
      }

      // optional string datestr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_amount;
        break;
      }

      // optional string amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_drawtypw;
        break;
      }

      // optional int32 drawtypw = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawtypw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawtypw_)));
          set_has_drawtypw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional int32 state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wiringwithdrawinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string drawid = 1;
  if (has_drawid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->drawid().data(), this->drawid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->drawid(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string datestr = 3;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->datestr(), output);
  }

  // optional string amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->amount(), output);
  }

  // optional int32 drawtypw = 5;
  if (has_drawtypw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->drawtypw(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->account(), output);
  }

  // optional int32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wiringwithdrawinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string drawid = 1;
  if (has_drawid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->drawid().data(), this->drawid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->drawid(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string datestr = 3;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->datestr(), target);
  }

  // optional string amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->amount(), target);
  }

  // optional int32 drawtypw = 5;
  if (has_drawtypw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->drawtypw(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional int32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wiringwithdrawinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string drawid = 1;
    if (has_drawid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->drawid());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string datestr = 3;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional string amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

    // optional int32 drawtypw = 5;
    if (has_drawtypw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawtypw());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wiringwithdrawinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wiringwithdrawinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wiringwithdrawinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wiringwithdrawinfo::MergeFrom(const wiringwithdrawinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawid()) {
      set_drawid(from.drawid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datestr()) {
      set_datestr(from.datestr());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_drawtypw()) {
      set_drawtypw(from.drawtypw());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wiringwithdrawinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wiringwithdrawinfo::CopyFrom(const wiringwithdrawinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wiringwithdrawinfo::IsInitialized() const {

  return true;
}

void wiringwithdrawinfo::Swap(wiringwithdrawinfo* other) {
  if (other != this) {
    std::swap(drawid_, other->drawid_);
    std::swap(userid_, other->userid_);
    std::swap(datestr_, other->datestr_);
    std::swap(amount_, other->amount_);
    std::swap(drawtypw_, other->drawtypw_);
    std::swap(account_, other->account_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wiringwithdrawinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wiringwithdrawinfo_descriptor_;
  metadata.reflection = wiringwithdrawinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wiringuserinfo::kIdFieldNumber;
const int wiringuserinfo::kUseridFieldNumber;
const int wiringuserinfo::kWiringidFieldNumber;
const int wiringuserinfo::kCreatedateFieldNumber;
const int wiringuserinfo::kPrelevelFieldNumber;
const int wiringuserinfo::kLevelFieldNumber;
const int wiringuserinfo::kAllperformanceFieldNumber;
const int wiringuserinfo::kSelfperformanceFieldNumber;
const int wiringuserinfo::kDirectperformanceFieldNumber;
const int wiringuserinfo::kTeamperformanceFieldNumber;
const int wiringuserinfo::kAllincomeFieldNumber;
const int wiringuserinfo::kGetincomeFieldNumber;
const int wiringuserinfo::kAllpreincomeFieldNumber;
const int wiringuserinfo::kGetpreincomeFieldNumber;
#endif  // !_MSC_VER

wiringuserinfo::wiringuserinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wiringuserinfo::InitAsDefaultInstance() {
}

wiringuserinfo::wiringuserinfo(const wiringuserinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wiringuserinfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  wiringid_ = 0;
  createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prelevel_ = 0;
  level_ = 0;
  allperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  directperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allincome_ = 0;
  getincome_ = 0;
  allpreincome_ = 0;
  getpreincome_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wiringuserinfo::~wiringuserinfo() {
  SharedDtor();
}

void wiringuserinfo::SharedDtor() {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (allperformance_ != &::google::protobuf::internal::kEmptyString) {
    delete allperformance_;
  }
  if (selfperformance_ != &::google::protobuf::internal::kEmptyString) {
    delete selfperformance_;
  }
  if (directperformance_ != &::google::protobuf::internal::kEmptyString) {
    delete directperformance_;
  }
  if (teamperformance_ != &::google::protobuf::internal::kEmptyString) {
    delete teamperformance_;
  }
  if (this != default_instance_) {
  }
}

void wiringuserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wiringuserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wiringuserinfo_descriptor_;
}

const wiringuserinfo& wiringuserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

wiringuserinfo* wiringuserinfo::default_instance_ = NULL;

wiringuserinfo* wiringuserinfo::New() const {
  return new wiringuserinfo;
}

void wiringuserinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    wiringid_ = 0;
    if (has_createdate()) {
      if (createdate_ != &::google::protobuf::internal::kEmptyString) {
        createdate_->clear();
      }
    }
    prelevel_ = 0;
    level_ = 0;
    if (has_allperformance()) {
      if (allperformance_ != &::google::protobuf::internal::kEmptyString) {
        allperformance_->clear();
      }
    }
    if (has_selfperformance()) {
      if (selfperformance_ != &::google::protobuf::internal::kEmptyString) {
        selfperformance_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_directperformance()) {
      if (directperformance_ != &::google::protobuf::internal::kEmptyString) {
        directperformance_->clear();
      }
    }
    if (has_teamperformance()) {
      if (teamperformance_ != &::google::protobuf::internal::kEmptyString) {
        teamperformance_->clear();
      }
    }
    allincome_ = 0;
    getincome_ = 0;
    allpreincome_ = 0;
    getpreincome_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wiringuserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wiringid;
        break;
      }

      // optional int32 wiringid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wiringid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiringid_)));
          set_has_wiringid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_createdate;
        break;
      }

      // optional string createdate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdate().data(), this->createdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prelevel;
        break;
      }

      // optional int32 prelevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prelevel_)));
          set_has_prelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_allperformance;
        break;
      }

      // optional string allperformance = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allperformance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allperformance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allperformance().data(), this->allperformance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_selfperformance;
        break;
      }

      // optional string selfperformance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfperformance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfperformance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfperformance().data(), this->selfperformance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_directperformance;
        break;
      }

      // optional string directperformance = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directperformance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directperformance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directperformance().data(), this->directperformance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_teamperformance;
        break;
      }

      // optional string teamperformance = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamperformance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamperformance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamperformance().data(), this->teamperformance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_allincome;
        break;
      }

      // optional int32 allincome = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allincome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allincome_)));
          set_has_allincome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_getincome;
        break;
      }

      // optional int32 getincome = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getincome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getincome_)));
          set_has_getincome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_allpreincome;
        break;
      }

      // optional int32 allpreincome = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allpreincome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allpreincome_)));
          set_has_allpreincome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_getpreincome;
        break;
      }

      // optional int32 getpreincome = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getpreincome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getpreincome_)));
          set_has_getpreincome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wiringuserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 wiringid = 3;
  if (has_wiringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wiringid(), output);
  }

  // optional string createdate = 4;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->createdate(), output);
  }

  // optional int32 prelevel = 5;
  if (has_prelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prelevel(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional string allperformance = 7;
  if (has_allperformance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allperformance().data(), this->allperformance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->allperformance(), output);
  }

  // optional string selfperformance = 8;
  if (has_selfperformance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfperformance().data(), this->selfperformance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->selfperformance(), output);
  }

  // optional string directperformance = 9;
  if (has_directperformance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directperformance().data(), this->directperformance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->directperformance(), output);
  }

  // optional string teamperformance = 10;
  if (has_teamperformance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamperformance().data(), this->teamperformance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->teamperformance(), output);
  }

  // optional int32 allincome = 12;
  if (has_allincome()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->allincome(), output);
  }

  // optional int32 getincome = 13;
  if (has_getincome()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->getincome(), output);
  }

  // optional int32 allpreincome = 14;
  if (has_allpreincome()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->allpreincome(), output);
  }

  // optional int32 getpreincome = 15;
  if (has_getpreincome()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->getpreincome(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wiringuserinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int32 wiringid = 3;
  if (has_wiringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wiringid(), target);
  }

  // optional string createdate = 4;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->createdate(), target);
  }

  // optional int32 prelevel = 5;
  if (has_prelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prelevel(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional string allperformance = 7;
  if (has_allperformance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allperformance().data(), this->allperformance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->allperformance(), target);
  }

  // optional string selfperformance = 8;
  if (has_selfperformance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfperformance().data(), this->selfperformance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->selfperformance(), target);
  }

  // optional string directperformance = 9;
  if (has_directperformance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directperformance().data(), this->directperformance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->directperformance(), target);
  }

  // optional string teamperformance = 10;
  if (has_teamperformance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamperformance().data(), this->teamperformance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->teamperformance(), target);
  }

  // optional int32 allincome = 12;
  if (has_allincome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->allincome(), target);
  }

  // optional int32 getincome = 13;
  if (has_getincome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->getincome(), target);
  }

  // optional int32 allpreincome = 14;
  if (has_allpreincome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->allpreincome(), target);
  }

  // optional int32 getpreincome = 15;
  if (has_getpreincome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->getpreincome(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wiringuserinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 wiringid = 3;
    if (has_wiringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiringid());
    }

    // optional string createdate = 4;
    if (has_createdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdate());
    }

    // optional int32 prelevel = 5;
    if (has_prelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prelevel());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string allperformance = 7;
    if (has_allperformance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allperformance());
    }

    // optional string selfperformance = 8;
    if (has_selfperformance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfperformance());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string directperformance = 9;
    if (has_directperformance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directperformance());
    }

    // optional string teamperformance = 10;
    if (has_teamperformance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamperformance());
    }

    // optional int32 allincome = 12;
    if (has_allincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allincome());
    }

    // optional int32 getincome = 13;
    if (has_getincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getincome());
    }

    // optional int32 allpreincome = 14;
    if (has_allpreincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allpreincome());
    }

    // optional int32 getpreincome = 15;
    if (has_getpreincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getpreincome());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wiringuserinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wiringuserinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wiringuserinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wiringuserinfo::MergeFrom(const wiringuserinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_wiringid()) {
      set_wiringid(from.wiringid());
    }
    if (from.has_createdate()) {
      set_createdate(from.createdate());
    }
    if (from.has_prelevel()) {
      set_prelevel(from.prelevel());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_allperformance()) {
      set_allperformance(from.allperformance());
    }
    if (from.has_selfperformance()) {
      set_selfperformance(from.selfperformance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_directperformance()) {
      set_directperformance(from.directperformance());
    }
    if (from.has_teamperformance()) {
      set_teamperformance(from.teamperformance());
    }
    if (from.has_allincome()) {
      set_allincome(from.allincome());
    }
    if (from.has_getincome()) {
      set_getincome(from.getincome());
    }
    if (from.has_allpreincome()) {
      set_allpreincome(from.allpreincome());
    }
    if (from.has_getpreincome()) {
      set_getpreincome(from.getpreincome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wiringuserinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wiringuserinfo::CopyFrom(const wiringuserinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wiringuserinfo::IsInitialized() const {

  return true;
}

void wiringuserinfo::Swap(wiringuserinfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(wiringid_, other->wiringid_);
    std::swap(createdate_, other->createdate_);
    std::swap(prelevel_, other->prelevel_);
    std::swap(level_, other->level_);
    std::swap(allperformance_, other->allperformance_);
    std::swap(selfperformance_, other->selfperformance_);
    std::swap(directperformance_, other->directperformance_);
    std::swap(teamperformance_, other->teamperformance_);
    std::swap(allincome_, other->allincome_);
    std::swap(getincome_, other->getincome_);
    std::swap(allpreincome_, other->allpreincome_);
    std::swap(getpreincome_, other->getpreincome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wiringuserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wiringuserinfo_descriptor_;
  metadata.reflection = wiringuserinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fenchengdayinfo::kDatestrFieldNumber;
const int fenchengdayinfo::kAllincomeFieldNumber;
const int fenchengdayinfo::kTeamincomeFieldNumber;
const int fenchengdayinfo::kDirincomeFieldNumber;
#endif  // !_MSC_VER

fenchengdayinfo::fenchengdayinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenchengdayinfo::InitAsDefaultInstance() {
}

fenchengdayinfo::fenchengdayinfo(const fenchengdayinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenchengdayinfo::SharedCtor() {
  _cached_size_ = 0;
  datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allincome_ = 0;
  teamincome_ = 0;
  dirincome_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenchengdayinfo::~fenchengdayinfo() {
  SharedDtor();
}

void fenchengdayinfo::SharedDtor() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (this != default_instance_) {
  }
}

void fenchengdayinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenchengdayinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenchengdayinfo_descriptor_;
}

const fenchengdayinfo& fenchengdayinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

fenchengdayinfo* fenchengdayinfo::default_instance_ = NULL;

fenchengdayinfo* fenchengdayinfo::New() const {
  return new fenchengdayinfo;
}

void fenchengdayinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datestr()) {
      if (datestr_ != &::google::protobuf::internal::kEmptyString) {
        datestr_->clear();
      }
    }
    allincome_ = 0;
    teamincome_ = 0;
    dirincome_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenchengdayinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string datestr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allincome;
        break;
      }

      // optional int32 allincome = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allincome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allincome_)));
          set_has_allincome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamincome;
        break;
      }

      // optional int32 teamincome = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamincome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamincome_)));
          set_has_teamincome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dirincome;
        break;
      }

      // optional int32 dirincome = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirincome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dirincome_)));
          set_has_dirincome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenchengdayinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datestr(), output);
  }

  // optional int32 allincome = 2;
  if (has_allincome()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->allincome(), output);
  }

  // optional int32 teamincome = 3;
  if (has_teamincome()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamincome(), output);
  }

  // optional int32 dirincome = 4;
  if (has_dirincome()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dirincome(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenchengdayinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datestr(), target);
  }

  // optional int32 allincome = 2;
  if (has_allincome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->allincome(), target);
  }

  // optional int32 teamincome = 3;
  if (has_teamincome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamincome(), target);
  }

  // optional int32 dirincome = 4;
  if (has_dirincome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dirincome(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenchengdayinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string datestr = 1;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional int32 allincome = 2;
    if (has_allincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allincome());
    }

    // optional int32 teamincome = 3;
    if (has_teamincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamincome());
    }

    // optional int32 dirincome = 4;
    if (has_dirincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dirincome());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenchengdayinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenchengdayinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenchengdayinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenchengdayinfo::MergeFrom(const fenchengdayinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datestr()) {
      set_datestr(from.datestr());
    }
    if (from.has_allincome()) {
      set_allincome(from.allincome());
    }
    if (from.has_teamincome()) {
      set_teamincome(from.teamincome());
    }
    if (from.has_dirincome()) {
      set_dirincome(from.dirincome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenchengdayinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenchengdayinfo::CopyFrom(const fenchengdayinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenchengdayinfo::IsInitialized() const {

  return true;
}

void fenchengdayinfo::Swap(fenchengdayinfo* other) {
  if (other != this) {
    std::swap(datestr_, other->datestr_);
    std::swap(allincome_, other->allincome_);
    std::swap(teamincome_, other->teamincome_);
    std::swap(dirincome_, other->dirincome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenchengdayinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenchengdayinfo_descriptor_;
  metadata.reflection = fenchengdayinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fenchengweekinfo::kAwardidFieldNumber;
const int fenchengweekinfo::kUseridFieldNumber;
const int fenchengweekinfo::kDatestrFieldNumber;
const int fenchengweekinfo::kWeekallnumFieldNumber;
const int fenchengweekinfo::kWeekteamnumFieldNumber;
const int fenchengweekinfo::kWeekdirnumFieldNumber;
const int fenchengweekinfo::kAwardincomeFieldNumber;
const int fenchengweekinfo::kStateFieldNumber;
const int fenchengweekinfo::kRealincomeFieldNumber;
const int fenchengweekinfo::kPreincomeFieldNumber;
const int fenchengweekinfo::kWeekpayallFieldNumber;
const int fenchengweekinfo::kCfrateFieldNumber;
#endif  // !_MSC_VER

fenchengweekinfo::fenchengweekinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenchengweekinfo::InitAsDefaultInstance() {
}

fenchengweekinfo::fenchengweekinfo(const fenchengweekinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenchengweekinfo::SharedCtor() {
  _cached_size_ = 0;
  awardid_ = 0;
  userid_ = 0;
  datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weekallnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weekteamnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weekdirnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  realincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weekpayall_ = 0;
  cfrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenchengweekinfo::~fenchengweekinfo() {
  SharedDtor();
}

void fenchengweekinfo::SharedDtor() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (weekallnum_ != &::google::protobuf::internal::kEmptyString) {
    delete weekallnum_;
  }
  if (weekteamnum_ != &::google::protobuf::internal::kEmptyString) {
    delete weekteamnum_;
  }
  if (weekdirnum_ != &::google::protobuf::internal::kEmptyString) {
    delete weekdirnum_;
  }
  if (awardincome_ != &::google::protobuf::internal::kEmptyString) {
    delete awardincome_;
  }
  if (realincome_ != &::google::protobuf::internal::kEmptyString) {
    delete realincome_;
  }
  if (preincome_ != &::google::protobuf::internal::kEmptyString) {
    delete preincome_;
  }
  if (this != default_instance_) {
  }
}

void fenchengweekinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenchengweekinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenchengweekinfo_descriptor_;
}

const fenchengweekinfo& fenchengweekinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

fenchengweekinfo* fenchengweekinfo::default_instance_ = NULL;

fenchengweekinfo* fenchengweekinfo::New() const {
  return new fenchengweekinfo;
}

void fenchengweekinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardid_ = 0;
    userid_ = 0;
    if (has_datestr()) {
      if (datestr_ != &::google::protobuf::internal::kEmptyString) {
        datestr_->clear();
      }
    }
    if (has_weekallnum()) {
      if (weekallnum_ != &::google::protobuf::internal::kEmptyString) {
        weekallnum_->clear();
      }
    }
    if (has_weekteamnum()) {
      if (weekteamnum_ != &::google::protobuf::internal::kEmptyString) {
        weekteamnum_->clear();
      }
    }
    if (has_weekdirnum()) {
      if (weekdirnum_ != &::google::protobuf::internal::kEmptyString) {
        weekdirnum_->clear();
      }
    }
    if (has_awardincome()) {
      if (awardincome_ != &::google::protobuf::internal::kEmptyString) {
        awardincome_->clear();
      }
    }
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_realincome()) {
      if (realincome_ != &::google::protobuf::internal::kEmptyString) {
        realincome_->clear();
      }
    }
    if (has_preincome()) {
      if (preincome_ != &::google::protobuf::internal::kEmptyString) {
        preincome_->clear();
      }
    }
    weekpayall_ = 0;
    cfrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenchengweekinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 awardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardid_)));
          set_has_awardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datestr;
        break;
      }

      // optional string datestr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_weekallnum;
        break;
      }

      // optional string weekallnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekallnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekallnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weekallnum().data(), this->weekallnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_weekteamnum;
        break;
      }

      // optional string weekteamnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekteamnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekteamnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weekteamnum().data(), this->weekteamnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_weekdirnum;
        break;
      }

      // optional string weekdirnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekdirnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekdirnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weekdirnum().data(), this->weekdirnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_awardincome;
        break;
      }

      // optional string awardincome = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardincome:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardincome()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardincome().data(), this->awardincome().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional int32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_realincome;
        break;
      }

      // optional string realincome = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realincome:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realincome()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realincome().data(), this->realincome().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_preincome;
        break;
      }

      // optional string preincome = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preincome:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preincome()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preincome().data(), this->preincome().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weekpayall;
        break;
      }

      // optional int32 weekpayall = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekpayall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekpayall_)));
          set_has_weekpayall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cfrate;
        break;
      }

      // optional int32 cfrate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfrate_)));
          set_has_cfrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenchengweekinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 awardid = 1;
  if (has_awardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->awardid(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string datestr = 3;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->datestr(), output);
  }

  // optional string weekallnum = 4;
  if (has_weekallnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekallnum().data(), this->weekallnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->weekallnum(), output);
  }

  // optional string weekteamnum = 5;
  if (has_weekteamnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekteamnum().data(), this->weekteamnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->weekteamnum(), output);
  }

  // optional string weekdirnum = 6;
  if (has_weekdirnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekdirnum().data(), this->weekdirnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->weekdirnum(), output);
  }

  // optional string awardincome = 7;
  if (has_awardincome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardincome().data(), this->awardincome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->awardincome(), output);
  }

  // optional int32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // optional string realincome = 9;
  if (has_realincome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realincome().data(), this->realincome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->realincome(), output);
  }

  // optional string preincome = 10;
  if (has_preincome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preincome().data(), this->preincome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->preincome(), output);
  }

  // optional int32 weekpayall = 11;
  if (has_weekpayall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->weekpayall(), output);
  }

  // optional int32 cfrate = 12;
  if (has_cfrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cfrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenchengweekinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 awardid = 1;
  if (has_awardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->awardid(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string datestr = 3;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->datestr(), target);
  }

  // optional string weekallnum = 4;
  if (has_weekallnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekallnum().data(), this->weekallnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->weekallnum(), target);
  }

  // optional string weekteamnum = 5;
  if (has_weekteamnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekteamnum().data(), this->weekteamnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->weekteamnum(), target);
  }

  // optional string weekdirnum = 6;
  if (has_weekdirnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekdirnum().data(), this->weekdirnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->weekdirnum(), target);
  }

  // optional string awardincome = 7;
  if (has_awardincome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardincome().data(), this->awardincome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->awardincome(), target);
  }

  // optional int32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->state(), target);
  }

  // optional string realincome = 9;
  if (has_realincome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realincome().data(), this->realincome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->realincome(), target);
  }

  // optional string preincome = 10;
  if (has_preincome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preincome().data(), this->preincome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->preincome(), target);
  }

  // optional int32 weekpayall = 11;
  if (has_weekpayall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->weekpayall(), target);
  }

  // optional int32 cfrate = 12;
  if (has_cfrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cfrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenchengweekinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 awardid = 1;
    if (has_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardid());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string datestr = 3;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional string weekallnum = 4;
    if (has_weekallnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekallnum());
    }

    // optional string weekteamnum = 5;
    if (has_weekteamnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekteamnum());
    }

    // optional string weekdirnum = 6;
    if (has_weekdirnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekdirnum());
    }

    // optional string awardincome = 7;
    if (has_awardincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardincome());
    }

    // optional int32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string realincome = 9;
    if (has_realincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realincome());
    }

    // optional string preincome = 10;
    if (has_preincome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preincome());
    }

    // optional int32 weekpayall = 11;
    if (has_weekpayall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekpayall());
    }

    // optional int32 cfrate = 12;
    if (has_cfrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenchengweekinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenchengweekinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenchengweekinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenchengweekinfo::MergeFrom(const fenchengweekinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardid()) {
      set_awardid(from.awardid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datestr()) {
      set_datestr(from.datestr());
    }
    if (from.has_weekallnum()) {
      set_weekallnum(from.weekallnum());
    }
    if (from.has_weekteamnum()) {
      set_weekteamnum(from.weekteamnum());
    }
    if (from.has_weekdirnum()) {
      set_weekdirnum(from.weekdirnum());
    }
    if (from.has_awardincome()) {
      set_awardincome(from.awardincome());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_realincome()) {
      set_realincome(from.realincome());
    }
    if (from.has_preincome()) {
      set_preincome(from.preincome());
    }
    if (from.has_weekpayall()) {
      set_weekpayall(from.weekpayall());
    }
    if (from.has_cfrate()) {
      set_cfrate(from.cfrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenchengweekinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenchengweekinfo::CopyFrom(const fenchengweekinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenchengweekinfo::IsInitialized() const {

  return true;
}

void fenchengweekinfo::Swap(fenchengweekinfo* other) {
  if (other != this) {
    std::swap(awardid_, other->awardid_);
    std::swap(userid_, other->userid_);
    std::swap(datestr_, other->datestr_);
    std::swap(weekallnum_, other->weekallnum_);
    std::swap(weekteamnum_, other->weekteamnum_);
    std::swap(weekdirnum_, other->weekdirnum_);
    std::swap(awardincome_, other->awardincome_);
    std::swap(state_, other->state_);
    std::swap(realincome_, other->realincome_);
    std::swap(preincome_, other->preincome_);
    std::swap(weekpayall_, other->weekpayall_);
    std::swap(cfrate_, other->cfrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenchengweekinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenchengweekinfo_descriptor_;
  metadata.reflection = fenchengweekinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wiringdaybonus::kDatestrFieldNumber;
const int wiringdaybonus::kAchFieldNumber;
const int wiringdaybonus::kLevelFieldNumber;
const int wiringdaybonus::kRateFieldNumber;
const int wiringdaybonus::kBonusFieldNumber;
#endif  // !_MSC_VER

wiringdaybonus::wiringdaybonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wiringdaybonus::InitAsDefaultInstance() {
}

wiringdaybonus::wiringdaybonus(const wiringdaybonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wiringdaybonus::SharedCtor() {
  _cached_size_ = 0;
  datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  rate_ = 0;
  bonus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wiringdaybonus::~wiringdaybonus() {
  SharedDtor();
}

void wiringdaybonus::SharedDtor() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (ach_ != &::google::protobuf::internal::kEmptyString) {
    delete ach_;
  }
  if (bonus_ != &::google::protobuf::internal::kEmptyString) {
    delete bonus_;
  }
  if (this != default_instance_) {
  }
}

void wiringdaybonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wiringdaybonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wiringdaybonus_descriptor_;
}

const wiringdaybonus& wiringdaybonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

wiringdaybonus* wiringdaybonus::default_instance_ = NULL;

wiringdaybonus* wiringdaybonus::New() const {
  return new wiringdaybonus;
}

void wiringdaybonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datestr()) {
      if (datestr_ != &::google::protobuf::internal::kEmptyString) {
        datestr_->clear();
      }
    }
    if (has_ach()) {
      if (ach_ != &::google::protobuf::internal::kEmptyString) {
        ach_->clear();
      }
    }
    level_ = 0;
    rate_ = 0;
    if (has_bonus()) {
      if (bonus_ != &::google::protobuf::internal::kEmptyString) {
        bonus_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wiringdaybonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string datestr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ach;
        break;
      }

      // optional string ach = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ach()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ach().data(), this->ach().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rate;
        break;
      }

      // optional int32 rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bonus;
        break;
      }

      // optional string bonus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bonus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bonus().data(), this->bonus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wiringdaybonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datestr(), output);
  }

  // optional string ach = 2;
  if (has_ach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ach().data(), this->ach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ach(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rate(), output);
  }

  // optional string bonus = 5;
  if (has_bonus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bonus().data(), this->bonus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wiringdaybonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datestr(), target);
  }

  // optional string ach = 2;
  if (has_ach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ach().data(), this->ach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ach(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 rate = 4;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rate(), target);
  }

  // optional string bonus = 5;
  if (has_bonus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bonus().data(), this->bonus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wiringdaybonus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string datestr = 1;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional string ach = 2;
    if (has_ach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ach());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 rate = 4;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional string bonus = 5;
    if (has_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bonus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wiringdaybonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wiringdaybonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wiringdaybonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wiringdaybonus::MergeFrom(const wiringdaybonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datestr()) {
      set_datestr(from.datestr());
    }
    if (from.has_ach()) {
      set_ach(from.ach());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_bonus()) {
      set_bonus(from.bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wiringdaybonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wiringdaybonus::CopyFrom(const wiringdaybonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wiringdaybonus::IsInitialized() const {

  return true;
}

void wiringdaybonus::Swap(wiringdaybonus* other) {
  if (other != this) {
    std::swap(datestr_, other->datestr_);
    std::swap(ach_, other->ach_);
    std::swap(level_, other->level_);
    std::swap(rate_, other->rate_);
    std::swap(bonus_, other->bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wiringdaybonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wiringdaybonus_descriptor_;
  metadata.reflection = wiringdaybonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wiringcostweekbonus::kDatestrFieldNumber;
const int wiringcostweekbonus::kAllwinFieldNumber;
const int wiringcostweekbonus::kBonusRateFieldNumber;
const int wiringcostweekbonus::kSelfBonusFieldNumber;
const int wiringcostweekbonus::kAgentBonusFieldNumber;
const int wiringcostweekbonus::kAllBonusFieldNumber;
const int wiringcostweekbonus::kStatusFieldNumber;
#endif  // !_MSC_VER

wiringcostweekbonus::wiringcostweekbonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wiringcostweekbonus::InitAsDefaultInstance() {
}

wiringcostweekbonus::wiringcostweekbonus(const wiringcostweekbonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wiringcostweekbonus::SharedCtor() {
  _cached_size_ = 0;
  datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allwin_ = 0;
  bonus_rate_ = 0;
  self_bonus_ = 0;
  agent_bonus_ = 0;
  all_bonus_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wiringcostweekbonus::~wiringcostweekbonus() {
  SharedDtor();
}

void wiringcostweekbonus::SharedDtor() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (this != default_instance_) {
  }
}

void wiringcostweekbonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wiringcostweekbonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wiringcostweekbonus_descriptor_;
}

const wiringcostweekbonus& wiringcostweekbonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

wiringcostweekbonus* wiringcostweekbonus::default_instance_ = NULL;

wiringcostweekbonus* wiringcostweekbonus::New() const {
  return new wiringcostweekbonus;
}

void wiringcostweekbonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datestr()) {
      if (datestr_ != &::google::protobuf::internal::kEmptyString) {
        datestr_->clear();
      }
    }
    allwin_ = 0;
    bonus_rate_ = 0;
    self_bonus_ = 0;
    agent_bonus_ = 0;
    all_bonus_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wiringcostweekbonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string datestr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allwin;
        break;
      }

      // optional int32 allwin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allwin_)));
          set_has_allwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bonus_rate;
        break;
      }

      // optional int32 bonus_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_rate_)));
          set_has_bonus_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_bonus;
        break;
      }

      // optional int32 self_bonus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_bonus_)));
          set_has_self_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_agent_bonus;
        break;
      }

      // optional int32 agent_bonus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_bonus_)));
          set_has_agent_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_all_bonus;
        break;
      }

      // optional int32 all_bonus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_bonus_)));
          set_has_all_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wiringcostweekbonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datestr(), output);
  }

  // optional int32 allwin = 2;
  if (has_allwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->allwin(), output);
  }

  // optional int32 bonus_rate = 3;
  if (has_bonus_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bonus_rate(), output);
  }

  // optional int32 self_bonus = 4;
  if (has_self_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->self_bonus(), output);
  }

  // optional int32 agent_bonus = 5;
  if (has_agent_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->agent_bonus(), output);
  }

  // optional int32 all_bonus = 6;
  if (has_all_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->all_bonus(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wiringcostweekbonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datestr(), target);
  }

  // optional int32 allwin = 2;
  if (has_allwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->allwin(), target);
  }

  // optional int32 bonus_rate = 3;
  if (has_bonus_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bonus_rate(), target);
  }

  // optional int32 self_bonus = 4;
  if (has_self_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->self_bonus(), target);
  }

  // optional int32 agent_bonus = 5;
  if (has_agent_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->agent_bonus(), target);
  }

  // optional int32 all_bonus = 6;
  if (has_all_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->all_bonus(), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wiringcostweekbonus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string datestr = 1;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional int32 allwin = 2;
    if (has_allwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allwin());
    }

    // optional int32 bonus_rate = 3;
    if (has_bonus_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_rate());
    }

    // optional int32 self_bonus = 4;
    if (has_self_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_bonus());
    }

    // optional int32 agent_bonus = 5;
    if (has_agent_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent_bonus());
    }

    // optional int32 all_bonus = 6;
    if (has_all_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_bonus());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wiringcostweekbonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wiringcostweekbonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wiringcostweekbonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wiringcostweekbonus::MergeFrom(const wiringcostweekbonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datestr()) {
      set_datestr(from.datestr());
    }
    if (from.has_allwin()) {
      set_allwin(from.allwin());
    }
    if (from.has_bonus_rate()) {
      set_bonus_rate(from.bonus_rate());
    }
    if (from.has_self_bonus()) {
      set_self_bonus(from.self_bonus());
    }
    if (from.has_agent_bonus()) {
      set_agent_bonus(from.agent_bonus());
    }
    if (from.has_all_bonus()) {
      set_all_bonus(from.all_bonus());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wiringcostweekbonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wiringcostweekbonus::CopyFrom(const wiringcostweekbonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wiringcostweekbonus::IsInitialized() const {

  return true;
}

void wiringcostweekbonus::Swap(wiringcostweekbonus* other) {
  if (other != this) {
    std::swap(datestr_, other->datestr_);
    std::swap(allwin_, other->allwin_);
    std::swap(bonus_rate_, other->bonus_rate_);
    std::swap(self_bonus_, other->self_bonus_);
    std::swap(agent_bonus_, other->agent_bonus_);
    std::swap(all_bonus_, other->all_bonus_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wiringcostweekbonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wiringcostweekbonus_descriptor_;
  metadata.reflection = wiringcostweekbonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wiringagentcostweekbonus::kDatestrFieldNumber;
const int wiringagentcostweekbonus::kAgentIdFieldNumber;
const int wiringagentcostweekbonus::kAgentNameFieldNumber;
const int wiringagentcostweekbonus::kBonusRateFieldNumber;
const int wiringagentcostweekbonus::kSelfBonusFieldNumber;
const int wiringagentcostweekbonus::kAgentBonusFieldNumber;
const int wiringagentcostweekbonus::kStatusFieldNumber;
#endif  // !_MSC_VER

wiringagentcostweekbonus::wiringagentcostweekbonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wiringagentcostweekbonus::InitAsDefaultInstance() {
}

wiringagentcostweekbonus::wiringagentcostweekbonus(const wiringagentcostweekbonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wiringagentcostweekbonus::SharedCtor() {
  _cached_size_ = 0;
  datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_id_ = 0;
  agent_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bonus_rate_ = 0;
  self_bonus_ = 0;
  agent_bonus_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wiringagentcostweekbonus::~wiringagentcostweekbonus() {
  SharedDtor();
}

void wiringagentcostweekbonus::SharedDtor() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (agent_name_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_name_;
  }
  if (this != default_instance_) {
  }
}

void wiringagentcostweekbonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wiringagentcostweekbonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wiringagentcostweekbonus_descriptor_;
}

const wiringagentcostweekbonus& wiringagentcostweekbonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fagent_2eproto();
  return *default_instance_;
}

wiringagentcostweekbonus* wiringagentcostweekbonus::default_instance_ = NULL;

wiringagentcostweekbonus* wiringagentcostweekbonus::New() const {
  return new wiringagentcostweekbonus;
}

void wiringagentcostweekbonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datestr()) {
      if (datestr_ != &::google::protobuf::internal::kEmptyString) {
        datestr_->clear();
      }
    }
    agent_id_ = 0;
    if (has_agent_name()) {
      if (agent_name_ != &::google::protobuf::internal::kEmptyString) {
        agent_name_->clear();
      }
    }
    bonus_rate_ = 0;
    self_bonus_ = 0;
    agent_bonus_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wiringagentcostweekbonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string datestr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestr().data(), this->datestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agent_id;
        break;
      }

      // optional int32 agent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agent_name;
        break;
      }

      // optional string agent_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent_name().data(), this->agent_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bonus_rate;
        break;
      }

      // optional int32 bonus_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_rate_)));
          set_has_bonus_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_self_bonus;
        break;
      }

      // optional int32 self_bonus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_bonus_)));
          set_has_self_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agent_bonus;
        break;
      }

      // optional int32 agent_bonus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_bonus_)));
          set_has_agent_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wiringagentcostweekbonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datestr(), output);
  }

  // optional int32 agent_id = 2;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->agent_id(), output);
  }

  // optional string agent_name = 3;
  if (has_agent_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent_name().data(), this->agent_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->agent_name(), output);
  }

  // optional int32 bonus_rate = 4;
  if (has_bonus_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bonus_rate(), output);
  }

  // optional int32 self_bonus = 5;
  if (has_self_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->self_bonus(), output);
  }

  // optional int32 agent_bonus = 6;
  if (has_agent_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->agent_bonus(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wiringagentcostweekbonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string datestr = 1;
  if (has_datestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestr().data(), this->datestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datestr(), target);
  }

  // optional int32 agent_id = 2;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->agent_id(), target);
  }

  // optional string agent_name = 3;
  if (has_agent_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent_name().data(), this->agent_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->agent_name(), target);
  }

  // optional int32 bonus_rate = 4;
  if (has_bonus_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bonus_rate(), target);
  }

  // optional int32 self_bonus = 5;
  if (has_self_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->self_bonus(), target);
  }

  // optional int32 agent_bonus = 6;
  if (has_agent_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->agent_bonus(), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wiringagentcostweekbonus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string datestr = 1;
    if (has_datestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestr());
    }

    // optional int32 agent_id = 2;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent_id());
    }

    // optional string agent_name = 3;
    if (has_agent_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent_name());
    }

    // optional int32 bonus_rate = 4;
    if (has_bonus_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_rate());
    }

    // optional int32 self_bonus = 5;
    if (has_self_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_bonus());
    }

    // optional int32 agent_bonus = 6;
    if (has_agent_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent_bonus());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wiringagentcostweekbonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wiringagentcostweekbonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wiringagentcostweekbonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wiringagentcostweekbonus::MergeFrom(const wiringagentcostweekbonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datestr()) {
      set_datestr(from.datestr());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_agent_name()) {
      set_agent_name(from.agent_name());
    }
    if (from.has_bonus_rate()) {
      set_bonus_rate(from.bonus_rate());
    }
    if (from.has_self_bonus()) {
      set_self_bonus(from.self_bonus());
    }
    if (from.has_agent_bonus()) {
      set_agent_bonus(from.agent_bonus());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wiringagentcostweekbonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wiringagentcostweekbonus::CopyFrom(const wiringagentcostweekbonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wiringagentcostweekbonus::IsInitialized() const {

  return true;
}

void wiringagentcostweekbonus::Swap(wiringagentcostweekbonus* other) {
  if (other != this) {
    std::swap(datestr_, other->datestr_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(agent_name_, other->agent_name_);
    std::swap(bonus_rate_, other->bonus_rate_);
    std::swap(self_bonus_, other->self_bonus_);
    std::swap(agent_bonus_, other->agent_bonus_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wiringagentcostweekbonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wiringagentcostweekbonus_descriptor_;
  metadata.reflection = wiringagentcostweekbonus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
