// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_ersh.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_ersh.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* ershuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ershuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ershoptinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ershoptinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ershinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ershinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ershhandpoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ershhandpoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* ershhistoryitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ershhistoryitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ershhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ershhistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ershcardlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ershcardlist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fersh_2eproto() {
  protobuf_AddDesc_st_5fersh_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_ersh.proto");
  GOOGLE_CHECK(file != NULL);
  ershuser_descriptor_ = file->message_type(0);
  static const int ershuser_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, handpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, jettonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, raiselist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, actionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, lastaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, cardtype_),
  };
  ershuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ershuser_descriptor_,
      ershuser::default_instance_,
      ershuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ershuser));
  ershoptinfo_descriptor_ = file->message_type(1);
  static const int ershoptinfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershoptinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershoptinfo, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershoptinfo, jetton_),
  };
  ershoptinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ershoptinfo_descriptor_,
      ershoptinfo::default_instance_,
      ershoptinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershoptinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershoptinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ershoptinfo));
  ershinfo_descriptor_ = file->message_type(2);
  static const int ershinfo_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, tablemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, tabletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, doublecomp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, boutcapp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, mincomp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, menpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, maxplaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, restrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, autoready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, usevipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, guodi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, oncepour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, presentbout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, dissolveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, straction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, payway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, paynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, actionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, deluser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, actionuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, julebuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, ershtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, dealcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, maxactioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, maxpourjetton_),
  };
  ershinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ershinfo_descriptor_,
      ershinfo::default_instance_,
      ershinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ershinfo));
  ershhandpoker_descriptor_ = file->message_type(3);
  static const int ershhandpoker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhandpoker, handpoker_),
  };
  ershhandpoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ershhandpoker_descriptor_,
      ershhandpoker::default_instance_,
      ershhandpoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhandpoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhandpoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ershhandpoker));
  ershhistoryitem_descriptor_ = file->message_type(4);
  static const int ershhistoryitem_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, guodi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, presentbout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, oncepour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, winerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, pokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, ershtypelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, resultlist_),
  };
  ershhistoryitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ershhistoryitem_descriptor_,
      ershhistoryitem::default_instance_,
      ershhistoryitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistoryitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ershhistoryitem));
  ershhistory_descriptor_ = file->message_type(5);
  static const int ershhistory_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, playnummax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, playnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, hitemlist_),
  };
  ershhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ershhistory_descriptor_,
      ershhistory::default_instance_,
      ershhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ershhistory));
  ershcardlist_descriptor_ = file->message_type(6);
  static const int ershcardlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershcardlist, list_),
  };
  ershcardlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ershcardlist_descriptor_,
      ershcardlist::default_instance_,
      ershcardlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershcardlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ershcardlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ershcardlist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fersh_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ershuser_descriptor_, &ershuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ershoptinfo_descriptor_, &ershoptinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ershinfo_descriptor_, &ershinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ershhandpoker_descriptor_, &ershhandpoker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ershhistoryitem_descriptor_, &ershhistoryitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ershhistory_descriptor_, &ershhistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ershcardlist_descriptor_, &ershcardlist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fersh_2eproto() {
  delete ershuser::default_instance_;
  delete ershuser_reflection_;
  delete ershoptinfo::default_instance_;
  delete ershoptinfo_reflection_;
  delete ershinfo::default_instance_;
  delete ershinfo_reflection_;
  delete ershhandpoker::default_instance_;
  delete ershhandpoker_reflection_;
  delete ershhistoryitem::default_instance_;
  delete ershhistoryitem_reflection_;
  delete ershhistory::default_instance_;
  delete ershhistory_reflection_;
  delete ershcardlist::default_instance_;
  delete ershcardlist_reflection_;
}

void protobuf_AddDesc_st_5fersh_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_ersh.proto\022\007progame\032\016st_human.proto"
    "\"\360\001\n\010ershuser\022\016\n\006userid\030\001 \001(\005\022\017\n\007chairid"
    "\030\002 \001(\005\022\r\n\005jifen\030\003 \001(\t\022\r\n\005state\030\004 \001(\005\022\021\n\t"
    "handpoker\030\005 \003(\005\022\017\n\007pattern\030\006 \001(\005\022\016\n\006jett"
    "on\030\007 \001(\t\022\022\n\njettonlist\030\010 \003(\t\022\020\n\010nickname"
    "\030\t \001(\t\022\021\n\traiselist\030\n \003(\t\022\022\n\nactionlist\030"
    "\013 \003(\005\022\022\n\nlastaction\030\014 \001(\005\022\020\n\010cardtype\030\r "
    "\001(\005\"A\n\013ershoptinfo\022\016\n\006userid\030\001 \001(\005\022\022\n\nac"
    "tiontype\030\002 \001(\005\022\016\n\006jetton\030\003 \001(\t\"\343\005\n\010ershi"
    "nfo\022\017\n\007tableid\030\001 \001(\005\022\021\n\ttablemark\030\002 \001(\005\022"
    "\021\n\ttabletime\030\003 \001(\005\022\r\n\005state\030\004 \001(\005\022\020\n\010tim"
    "emark\030\005 \001(\005\022\021\n\ttabletype\030\006 \001(\005\022\r\n\005difen\030"
    "\007 \001(\t\022\022\n\ndoublecomp\030\010 \001(\005\022\020\n\010boutcapp\030\t "
    "\001(\005\022\017\n\007mincomp\030\n \001(\005\022\016\n\006menpai\030\013 \001(\005\022\022\n\n"
    "maxplaynum\030\014 \001(\005\022\017\n\007paytype\030\r \001(\005\022\020\n\010res"
    "trict\030\016 \001(\005\022\021\n\tautoready\030\017 \001(\005\022\017\n\007owneri"
    "d\030\020 \001(\005\022\020\n\010bankerID\030\021 \001(\005\022\"\n\007situser\030\022 \003"
    "(\0132\021.progame.ershuser\022\021\n\tstanduser\030\023 \003(\005"
    "\022\021\n\tusevipnum\030\024 \001(\005\022\r\n\005guodi\030\025 \001(\005\022\020\n\010on"
    "cepour\030\026 \001(\005\022\023\n\013presentbout\030\027 \001(\005\022\024\n\014dis"
    "solveinfo\030\030 \001(\005\022\021\n\tstraction\030\031 \001(\t\022\016\n\006pa"
    "yway\030\032 \001(\005\022\016\n\006paynum\030\033 \001(\005\022\017\n\007maxuser\030\035 "
    "\001(\005\022\022\n\nactionlist\030\036 \003(\005\022\017\n\007deluser\030\037 \001(\005"
    "\022\022\n\nactionuser\030  \001(\005\022\017\n\007usernum\030! \001(\005\022\020\n"
    "\010julebuid\030\" \001(\005\022\014\n\004flag\030# \001(\005\022\020\n\010ershtyp"
    "e\030$ \001(\005\022\017\n\007dealcnt\030% \001(\005\022+\n\rmaxactioninf"
    "o\030& \001(\0132\024.progame.ershoptinfo\022\025\n\rmaxpour"
    "jetton\030\' \001(\t\"\"\n\rershhandpoker\022\021\n\thandpok"
    "er\030\001 \003(\005\"\201\002\n\017ershhistoryitem\022\013\n\003leg\030\001 \001("
    "\005\022\r\n\005guodi\030\002 \001(\005\022\023\n\013presentbout\030\003 \001(\005\022\020\n"
    "\010oncepour\030\004 \001(\005\022\017\n\007winerid\030\005 \001(\005\022\022\n\nuser"
    "idlist\030\006 \003(\005\022\020\n\010nicklist\030\007 \003(\t\022\016\n\006jetton"
    "\030\010 \003(\005\022)\n\tpokerlist\030\t \003(\0132\026.progame.ersh"
    "handpoker\022\024\n\014ershtypelist\030\n \003(\005\022\017\n\007winli"
    "st\030\013 \003(\005\022\022\n\nresultlist\030\021 \003(\005\"\331\001\n\013ershhis"
    "tory\022\017\n\007tableid\030\001 \001(\005\022\022\n\nplaynummax\030\002 \001("
    "\005\022\017\n\007playnum\030\003 \001(\005\022\r\n\005difen\030\004 \001(\005\022\020\n\010gam"
    "etime\030\006 \001(\005\022\017\n\007ownerid\030\007 \001(\005\022\020\n\010nicklist"
    "\030\010 \003(\t\022\022\n\nuseridlist\030\t \003(\005\022\017\n\007winlist\030\n "
    "\003(\005\022+\n\thitemlist\030\013 \003(\0132\030.progame.ershhis"
    "toryitem\"\034\n\014ershcardlist\022\014\n\004list\030\001 \003(\005", 1638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_ersh.proto", &protobuf_RegisterTypes);
  ershuser::default_instance_ = new ershuser();
  ershoptinfo::default_instance_ = new ershoptinfo();
  ershinfo::default_instance_ = new ershinfo();
  ershhandpoker::default_instance_ = new ershhandpoker();
  ershhistoryitem::default_instance_ = new ershhistoryitem();
  ershhistory::default_instance_ = new ershhistory();
  ershcardlist::default_instance_ = new ershcardlist();
  ershuser::default_instance_->InitAsDefaultInstance();
  ershoptinfo::default_instance_->InitAsDefaultInstance();
  ershinfo::default_instance_->InitAsDefaultInstance();
  ershhandpoker::default_instance_->InitAsDefaultInstance();
  ershhistoryitem::default_instance_->InitAsDefaultInstance();
  ershhistory::default_instance_->InitAsDefaultInstance();
  ershcardlist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fersh_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fersh_2eproto {
  StaticDescriptorInitializer_st_5fersh_2eproto() {
    protobuf_AddDesc_st_5fersh_2eproto();
  }
} static_descriptor_initializer_st_5fersh_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ershuser::kUseridFieldNumber;
const int ershuser::kChairidFieldNumber;
const int ershuser::kJifenFieldNumber;
const int ershuser::kStateFieldNumber;
const int ershuser::kHandpokerFieldNumber;
const int ershuser::kPatternFieldNumber;
const int ershuser::kJettonFieldNumber;
const int ershuser::kJettonlistFieldNumber;
const int ershuser::kNicknameFieldNumber;
const int ershuser::kRaiselistFieldNumber;
const int ershuser::kActionlistFieldNumber;
const int ershuser::kLastactionFieldNumber;
const int ershuser::kCardtypeFieldNumber;
#endif  // !_MSC_VER

ershuser::ershuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ershuser::InitAsDefaultInstance() {
}

ershuser::ershuser(const ershuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ershuser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  chairid_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  pattern_ = 0;
  jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastaction_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ershuser::~ershuser() {
  SharedDtor();
}

void ershuser::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void ershuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ershuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ershuser_descriptor_;
}

const ershuser& ershuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fersh_2eproto();
  return *default_instance_;
}

ershuser* ershuser::default_instance_ = NULL;

ershuser* ershuser::New() const {
  return new ershuser;
}

void ershuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    chairid_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    state_ = 0;
    pattern_ = 0;
    if (has_jetton()) {
      if (jetton_ != &::google::protobuf::internal::kEmptyString) {
        jetton_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    lastaction_ = 0;
    cardtype_ = 0;
  }
  handpoker_.Clear();
  jettonlist_.Clear();
  raiselist_.Clear();
  actionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ershuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_jifen;
        break;
      }

      // optional string jifen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_handpoker;
        break;
      }

      // repeated int32 handpoker = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_handpoker;
        if (input->ExpectTag(48)) goto parse_pattern;
        break;
      }

      // optional int32 pattern = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pattern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pattern_)));
          set_has_pattern();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_jetton;
        break;
      }

      // optional string jetton = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jetton().data(), this->jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_jettonlist;
        break;
      }

      // repeated string jettonlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jettonlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jettonlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jettonlist(this->jettonlist_size() - 1).data(),
            this->jettonlist(this->jettonlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_jettonlist;
        if (input->ExpectTag(74)) goto parse_nickname;
        break;
      }

      // optional string nickname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_raiselist;
        break;
      }

      // repeated string raiselist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raiselist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_raiselist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raiselist(this->raiselist_size() - 1).data(),
            this->raiselist(this->raiselist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_raiselist;
        if (input->ExpectTag(88)) goto parse_actionlist;
        break;
      }

      // repeated int32 actionlist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_actionlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actionlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_actionlist;
        if (input->ExpectTag(96)) goto parse_lastaction;
        break;
      }

      // optional int32 lastaction = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastaction_)));
          set_has_lastaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cardtype;
        break;
      }

      // optional int32 cardtype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ershuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional string jifen = 3;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->jifen(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // repeated int32 handpoker = 5;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->handpoker(i), output);
  }

  // optional int32 pattern = 6;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pattern(), output);
  }

  // optional string jetton = 7;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->jetton(), output);
  }

  // repeated string jettonlist = 8;
  for (int i = 0; i < this->jettonlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->jettonlist(i).data(), this->jettonlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->jettonlist(i), output);
  }

  // optional string nickname = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->nickname(), output);
  }

  // repeated string raiselist = 10;
  for (int i = 0; i < this->raiselist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->raiselist(i).data(), this->raiselist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->raiselist(i), output);
  }

  // repeated int32 actionlist = 11;
  for (int i = 0; i < this->actionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->actionlist(i), output);
  }

  // optional int32 lastaction = 12;
  if (has_lastaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lastaction(), output);
  }

  // optional int32 cardtype = 13;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ershuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional string jifen = 3;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jifen(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // repeated int32 handpoker = 5;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->handpoker(i), target);
  }

  // optional int32 pattern = 6;
  if (has_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pattern(), target);
  }

  // optional string jetton = 7;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->jetton(), target);
  }

  // repeated string jettonlist = 8;
  for (int i = 0; i < this->jettonlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jettonlist(i).data(), this->jettonlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->jettonlist(i), target);
  }

  // optional string nickname = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->nickname(), target);
  }

  // repeated string raiselist = 10;
  for (int i = 0; i < this->raiselist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raiselist(i).data(), this->raiselist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->raiselist(i), target);
  }

  // repeated int32 actionlist = 11;
  for (int i = 0; i < this->actionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->actionlist(i), target);
  }

  // optional int32 lastaction = 12;
  if (has_lastaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lastaction(), target);
  }

  // optional int32 cardtype = 13;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ershuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional string jifen = 3;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 pattern = 6;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pattern());
    }

    // optional string jetton = 7;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jetton());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string nickname = 9;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 lastaction = 12;
    if (has_lastaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastaction());
    }

    // optional int32 cardtype = 13;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  // repeated int32 handpoker = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  // repeated string jettonlist = 8;
  total_size += 1 * this->jettonlist_size();
  for (int i = 0; i < this->jettonlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jettonlist(i));
  }

  // repeated string raiselist = 10;
  total_size += 1 * this->raiselist_size();
  for (int i = 0; i < this->raiselist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->raiselist(i));
  }

  // repeated int32 actionlist = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->actionlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actionlist(i));
    }
    total_size += 1 * this->actionlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ershuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ershuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ershuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ershuser::MergeFrom(const ershuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  jettonlist_.MergeFrom(from.jettonlist_);
  raiselist_.MergeFrom(from.raiselist_);
  actionlist_.MergeFrom(from.actionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_lastaction()) {
      set_lastaction(from.lastaction());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ershuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ershuser::CopyFrom(const ershuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ershuser::IsInitialized() const {

  return true;
}

void ershuser::Swap(ershuser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(chairid_, other->chairid_);
    std::swap(jifen_, other->jifen_);
    std::swap(state_, other->state_);
    handpoker_.Swap(&other->handpoker_);
    std::swap(pattern_, other->pattern_);
    std::swap(jetton_, other->jetton_);
    jettonlist_.Swap(&other->jettonlist_);
    std::swap(nickname_, other->nickname_);
    raiselist_.Swap(&other->raiselist_);
    actionlist_.Swap(&other->actionlist_);
    std::swap(lastaction_, other->lastaction_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ershuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ershuser_descriptor_;
  metadata.reflection = ershuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ershoptinfo::kUseridFieldNumber;
const int ershoptinfo::kActiontypeFieldNumber;
const int ershoptinfo::kJettonFieldNumber;
#endif  // !_MSC_VER

ershoptinfo::ershoptinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ershoptinfo::InitAsDefaultInstance() {
}

ershoptinfo::ershoptinfo(const ershoptinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ershoptinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  actiontype_ = 0;
  jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ershoptinfo::~ershoptinfo() {
  SharedDtor();
}

void ershoptinfo::SharedDtor() {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (this != default_instance_) {
  }
}

void ershoptinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ershoptinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ershoptinfo_descriptor_;
}

const ershoptinfo& ershoptinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fersh_2eproto();
  return *default_instance_;
}

ershoptinfo* ershoptinfo::default_instance_ = NULL;

ershoptinfo* ershoptinfo::New() const {
  return new ershoptinfo;
}

void ershoptinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    actiontype_ = 0;
    if (has_jetton()) {
      if (jetton_ != &::google::protobuf::internal::kEmptyString) {
        jetton_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ershoptinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_actiontype;
        break;
      }

      // optional int32 actiontype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontype_)));
          set_has_actiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_jetton;
        break;
      }

      // optional string jetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jetton().data(), this->jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ershoptinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 actiontype = 2;
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actiontype(), output);
  }

  // optional string jetton = 3;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ershoptinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 actiontype = 2;
  if (has_actiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actiontype(), target);
  }

  // optional string jetton = 3;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ershoptinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 actiontype = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontype());
    }

    // optional string jetton = 3;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ershoptinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ershoptinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ershoptinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ershoptinfo::MergeFrom(const ershoptinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ershoptinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ershoptinfo::CopyFrom(const ershoptinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ershoptinfo::IsInitialized() const {

  return true;
}

void ershoptinfo::Swap(ershoptinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(jetton_, other->jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ershoptinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ershoptinfo_descriptor_;
  metadata.reflection = ershoptinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ershinfo::kTableidFieldNumber;
const int ershinfo::kTablemarkFieldNumber;
const int ershinfo::kTabletimeFieldNumber;
const int ershinfo::kStateFieldNumber;
const int ershinfo::kTimemarkFieldNumber;
const int ershinfo::kTabletypeFieldNumber;
const int ershinfo::kDifenFieldNumber;
const int ershinfo::kDoublecompFieldNumber;
const int ershinfo::kBoutcappFieldNumber;
const int ershinfo::kMincompFieldNumber;
const int ershinfo::kMenpaiFieldNumber;
const int ershinfo::kMaxplaynumFieldNumber;
const int ershinfo::kPaytypeFieldNumber;
const int ershinfo::kRestrictFieldNumber;
const int ershinfo::kAutoreadyFieldNumber;
const int ershinfo::kOwneridFieldNumber;
const int ershinfo::kBankerIDFieldNumber;
const int ershinfo::kSituserFieldNumber;
const int ershinfo::kStanduserFieldNumber;
const int ershinfo::kUsevipnumFieldNumber;
const int ershinfo::kGuodiFieldNumber;
const int ershinfo::kOncepourFieldNumber;
const int ershinfo::kPresentboutFieldNumber;
const int ershinfo::kDissolveinfoFieldNumber;
const int ershinfo::kStractionFieldNumber;
const int ershinfo::kPaywayFieldNumber;
const int ershinfo::kPaynumFieldNumber;
const int ershinfo::kMaxuserFieldNumber;
const int ershinfo::kActionlistFieldNumber;
const int ershinfo::kDeluserFieldNumber;
const int ershinfo::kActionuserFieldNumber;
const int ershinfo::kUsernumFieldNumber;
const int ershinfo::kJulebuidFieldNumber;
const int ershinfo::kFlagFieldNumber;
const int ershinfo::kErshtypeFieldNumber;
const int ershinfo::kDealcntFieldNumber;
const int ershinfo::kMaxactioninfoFieldNumber;
const int ershinfo::kMaxpourjettonFieldNumber;
#endif  // !_MSC_VER

ershinfo::ershinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ershinfo::InitAsDefaultInstance() {
  maxactioninfo_ = const_cast< ::progame::ershoptinfo*>(&::progame::ershoptinfo::default_instance());
}

ershinfo::ershinfo(const ershinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ershinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablemark_ = 0;
  tabletime_ = 0;
  state_ = 0;
  timemark_ = 0;
  tabletype_ = 0;
  difen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doublecomp_ = 0;
  boutcapp_ = 0;
  mincomp_ = 0;
  menpai_ = 0;
  maxplaynum_ = 0;
  paytype_ = 0;
  restrict_ = 0;
  autoready_ = 0;
  ownerid_ = 0;
  bankerid_ = 0;
  usevipnum_ = 0;
  guodi_ = 0;
  oncepour_ = 0;
  presentbout_ = 0;
  dissolveinfo_ = 0;
  straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payway_ = 0;
  paynum_ = 0;
  maxuser_ = 0;
  deluser_ = 0;
  actionuser_ = 0;
  usernum_ = 0;
  julebuid_ = 0;
  flag_ = 0;
  ershtype_ = 0;
  dealcnt_ = 0;
  maxactioninfo_ = NULL;
  maxpourjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ershinfo::~ershinfo() {
  SharedDtor();
}

void ershinfo::SharedDtor() {
  if (difen_ != &::google::protobuf::internal::kEmptyString) {
    delete difen_;
  }
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (maxpourjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete maxpourjetton_;
  }
  if (this != default_instance_) {
    delete maxactioninfo_;
  }
}

void ershinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ershinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ershinfo_descriptor_;
}

const ershinfo& ershinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fersh_2eproto();
  return *default_instance_;
}

ershinfo* ershinfo::default_instance_ = NULL;

ershinfo* ershinfo::New() const {
  return new ershinfo;
}

void ershinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tablemark_ = 0;
    tabletime_ = 0;
    state_ = 0;
    timemark_ = 0;
    tabletype_ = 0;
    if (has_difen()) {
      if (difen_ != &::google::protobuf::internal::kEmptyString) {
        difen_->clear();
      }
    }
    doublecomp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    boutcapp_ = 0;
    mincomp_ = 0;
    menpai_ = 0;
    maxplaynum_ = 0;
    paytype_ = 0;
    restrict_ = 0;
    autoready_ = 0;
    ownerid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bankerid_ = 0;
    usevipnum_ = 0;
    guodi_ = 0;
    oncepour_ = 0;
    presentbout_ = 0;
    dissolveinfo_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_straction()) {
      if (straction_ != &::google::protobuf::internal::kEmptyString) {
        straction_->clear();
      }
    }
    payway_ = 0;
    paynum_ = 0;
    maxuser_ = 0;
    deluser_ = 0;
    actionuser_ = 0;
    usernum_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    julebuid_ = 0;
    flag_ = 0;
    ershtype_ = 0;
    dealcnt_ = 0;
    if (has_maxactioninfo()) {
      if (maxactioninfo_ != NULL) maxactioninfo_->::progame::ershoptinfo::Clear();
    }
    if (has_maxpourjetton()) {
      if (maxpourjetton_ != &::google::protobuf::internal::kEmptyString) {
        maxpourjetton_->clear();
      }
    }
  }
  situser_.Clear();
  standuser_.Clear();
  actionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ershinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tablemark;
        break;
      }

      // optional int32 tablemark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemark_)));
          set_has_tablemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tabletime;
        break;
      }

      // optional int32 tabletime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletime_)));
          set_has_tabletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_difen;
        break;
      }

      // optional string difen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_difen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_difen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->difen().data(), this->difen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_doublecomp;
        break;
      }

      // optional int32 doublecomp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doublecomp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doublecomp_)));
          set_has_doublecomp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_boutcapp;
        break;
      }

      // optional int32 boutcapp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boutcapp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boutcapp_)));
          set_has_boutcapp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mincomp;
        break;
      }

      // optional int32 mincomp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mincomp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mincomp_)));
          set_has_mincomp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_menpai;
        break;
      }

      // optional int32 menpai = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menpai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menpai_)));
          set_has_menpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maxplaynum;
        break;
      }

      // optional int32 maxplaynum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxplaynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplaynum_)));
          set_has_maxplaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_paytype;
        break;
      }

      // optional int32 paytype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytype_)));
          set_has_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_restrict;
        break;
      }

      // optional int32 restrict = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restrict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restrict_)));
          set_has_restrict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_autoready;
        break;
      }

      // optional int32 autoready = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoready_)));
          set_has_autoready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bankerID;
        break;
      }

      // optional int32 bankerID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_situser;
        break;
      }

      // repeated .progame.ershuser situser = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_situser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_situser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_situser;
        if (input->ExpectTag(152)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_standuser;
        if (input->ExpectTag(160)) goto parse_usevipnum;
        break;
      }

      // optional int32 usevipnum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usevipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usevipnum_)));
          set_has_usevipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_guodi;
        break;
      }

      // optional int32 guodi = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guodi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guodi_)));
          set_has_guodi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_oncepour;
        break;
      }

      // optional int32 oncepour = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oncepour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oncepour_)));
          set_has_oncepour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_presentbout;
        break;
      }

      // optional int32 presentbout = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentbout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentbout_)));
          set_has_presentbout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_dissolveinfo;
        break;
      }

      // optional int32 dissolveinfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolveinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissolveinfo_)));
          set_has_dissolveinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_straction;
        break;
      }

      // optional string straction = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_straction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straction().data(), this->straction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_payway;
        break;
      }

      // optional int32 payway = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payway_)));
          set_has_payway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_paynum;
        break;
      }

      // optional int32 paynum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paynum_)));
          set_has_paynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_actionlist;
        break;
      }

      // repeated int32 actionlist = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 240, input, this->mutable_actionlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actionlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_actionlist;
        if (input->ExpectTag(248)) goto parse_deluser;
        break;
      }

      // optional int32 deluser = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deluser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deluser_)));
          set_has_deluser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_actionuser;
        break;
      }

      // optional int32 actionuser = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionuser_)));
          set_has_actionuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_julebuid;
        break;
      }

      // optional int32 julebuid = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebuid_)));
          set_has_julebuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_flag;
        break;
      }

      // optional int32 flag = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_ershtype;
        break;
      }

      // optional int32 ershtype = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ershtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ershtype_)));
          set_has_ershtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_dealcnt;
        break;
      }

      // optional int32 dealcnt = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealcnt_)));
          set_has_dealcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_maxactioninfo;
        break;
      }

      // optional .progame.ershoptinfo maxactioninfo = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxactioninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxactioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_maxpourjetton;
        break;
      }

      // optional string maxpourjetton = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxpourjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxpourjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maxpourjetton().data(), this->maxpourjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ershinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tablemark(), output);
  }

  // optional int32 tabletime = 3;
  if (has_tabletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tabletime(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  // optional int32 tabletype = 6;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tabletype(), output);
  }

  // optional string difen = 7;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->difen().data(), this->difen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->difen(), output);
  }

  // optional int32 doublecomp = 8;
  if (has_doublecomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->doublecomp(), output);
  }

  // optional int32 boutcapp = 9;
  if (has_boutcapp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->boutcapp(), output);
  }

  // optional int32 mincomp = 10;
  if (has_mincomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mincomp(), output);
  }

  // optional int32 menpai = 11;
  if (has_menpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->menpai(), output);
  }

  // optional int32 maxplaynum = 12;
  if (has_maxplaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->maxplaynum(), output);
  }

  // optional int32 paytype = 13;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->paytype(), output);
  }

  // optional int32 restrict = 14;
  if (has_restrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->restrict(), output);
  }

  // optional int32 autoready = 15;
  if (has_autoready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->autoready(), output);
  }

  // optional int32 ownerid = 16;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ownerid(), output);
  }

  // optional int32 bankerID = 17;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bankerid(), output);
  }

  // repeated .progame.ershuser situser = 18;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->situser(i), output);
  }

  // repeated int32 standuser = 19;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->standuser(i), output);
  }

  // optional int32 usevipnum = 20;
  if (has_usevipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->usevipnum(), output);
  }

  // optional int32 guodi = 21;
  if (has_guodi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->guodi(), output);
  }

  // optional int32 oncepour = 22;
  if (has_oncepour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->oncepour(), output);
  }

  // optional int32 presentbout = 23;
  if (has_presentbout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->presentbout(), output);
  }

  // optional int32 dissolveinfo = 24;
  if (has_dissolveinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->dissolveinfo(), output);
  }

  // optional string straction = 25;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->straction(), output);
  }

  // optional int32 payway = 26;
  if (has_payway()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->payway(), output);
  }

  // optional int32 paynum = 27;
  if (has_paynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->paynum(), output);
  }

  // optional int32 maxuser = 29;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->maxuser(), output);
  }

  // repeated int32 actionlist = 30;
  for (int i = 0; i < this->actionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      30, this->actionlist(i), output);
  }

  // optional int32 deluser = 31;
  if (has_deluser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->deluser(), output);
  }

  // optional int32 actionuser = 32;
  if (has_actionuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->actionuser(), output);
  }

  // optional int32 usernum = 33;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->usernum(), output);
  }

  // optional int32 julebuid = 34;
  if (has_julebuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->julebuid(), output);
  }

  // optional int32 flag = 35;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->flag(), output);
  }

  // optional int32 ershtype = 36;
  if (has_ershtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->ershtype(), output);
  }

  // optional int32 dealcnt = 37;
  if (has_dealcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->dealcnt(), output);
  }

  // optional .progame.ershoptinfo maxactioninfo = 38;
  if (has_maxactioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->maxactioninfo(), output);
  }

  // optional string maxpourjetton = 39;
  if (has_maxpourjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxpourjetton().data(), this->maxpourjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->maxpourjetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ershinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tablemark(), target);
  }

  // optional int32 tabletime = 3;
  if (has_tabletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tabletime(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  // optional int32 tabletype = 6;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tabletype(), target);
  }

  // optional string difen = 7;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->difen().data(), this->difen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->difen(), target);
  }

  // optional int32 doublecomp = 8;
  if (has_doublecomp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->doublecomp(), target);
  }

  // optional int32 boutcapp = 9;
  if (has_boutcapp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->boutcapp(), target);
  }

  // optional int32 mincomp = 10;
  if (has_mincomp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mincomp(), target);
  }

  // optional int32 menpai = 11;
  if (has_menpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->menpai(), target);
  }

  // optional int32 maxplaynum = 12;
  if (has_maxplaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->maxplaynum(), target);
  }

  // optional int32 paytype = 13;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->paytype(), target);
  }

  // optional int32 restrict = 14;
  if (has_restrict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->restrict(), target);
  }

  // optional int32 autoready = 15;
  if (has_autoready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->autoready(), target);
  }

  // optional int32 ownerid = 16;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ownerid(), target);
  }

  // optional int32 bankerID = 17;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bankerid(), target);
  }

  // repeated .progame.ershuser situser = 18;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->situser(i), target);
  }

  // repeated int32 standuser = 19;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->standuser(i), target);
  }

  // optional int32 usevipnum = 20;
  if (has_usevipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->usevipnum(), target);
  }

  // optional int32 guodi = 21;
  if (has_guodi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->guodi(), target);
  }

  // optional int32 oncepour = 22;
  if (has_oncepour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->oncepour(), target);
  }

  // optional int32 presentbout = 23;
  if (has_presentbout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->presentbout(), target);
  }

  // optional int32 dissolveinfo = 24;
  if (has_dissolveinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->dissolveinfo(), target);
  }

  // optional string straction = 25;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->straction(), target);
  }

  // optional int32 payway = 26;
  if (has_payway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->payway(), target);
  }

  // optional int32 paynum = 27;
  if (has_paynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->paynum(), target);
  }

  // optional int32 maxuser = 29;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->maxuser(), target);
  }

  // repeated int32 actionlist = 30;
  for (int i = 0; i < this->actionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(30, this->actionlist(i), target);
  }

  // optional int32 deluser = 31;
  if (has_deluser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->deluser(), target);
  }

  // optional int32 actionuser = 32;
  if (has_actionuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->actionuser(), target);
  }

  // optional int32 usernum = 33;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->usernum(), target);
  }

  // optional int32 julebuid = 34;
  if (has_julebuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->julebuid(), target);
  }

  // optional int32 flag = 35;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->flag(), target);
  }

  // optional int32 ershtype = 36;
  if (has_ershtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->ershtype(), target);
  }

  // optional int32 dealcnt = 37;
  if (has_dealcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->dealcnt(), target);
  }

  // optional .progame.ershoptinfo maxactioninfo = 38;
  if (has_maxactioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->maxactioninfo(), target);
  }

  // optional string maxpourjetton = 39;
  if (has_maxpourjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxpourjetton().data(), this->maxpourjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->maxpourjetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ershinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tablemark = 2;
    if (has_tablemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemark());
    }

    // optional int32 tabletime = 3;
    if (has_tabletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletime());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 tabletype = 6;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional string difen = 7;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->difen());
    }

    // optional int32 doublecomp = 8;
    if (has_doublecomp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doublecomp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 boutcapp = 9;
    if (has_boutcapp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boutcapp());
    }

    // optional int32 mincomp = 10;
    if (has_mincomp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mincomp());
    }

    // optional int32 menpai = 11;
    if (has_menpai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menpai());
    }

    // optional int32 maxplaynum = 12;
    if (has_maxplaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplaynum());
    }

    // optional int32 paytype = 13;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }

    // optional int32 restrict = 14;
    if (has_restrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restrict());
    }

    // optional int32 autoready = 15;
    if (has_autoready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoready());
    }

    // optional int32 ownerid = 16;
    if (has_ownerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bankerID = 17;
    if (has_bankerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional int32 usevipnum = 20;
    if (has_usevipnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usevipnum());
    }

    // optional int32 guodi = 21;
    if (has_guodi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guodi());
    }

    // optional int32 oncepour = 22;
    if (has_oncepour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oncepour());
    }

    // optional int32 presentbout = 23;
    if (has_presentbout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentbout());
    }

    // optional int32 dissolveinfo = 24;
    if (has_dissolveinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissolveinfo());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string straction = 25;
    if (has_straction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straction());
    }

    // optional int32 payway = 26;
    if (has_payway()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payway());
    }

    // optional int32 paynum = 27;
    if (has_paynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paynum());
    }

    // optional int32 maxuser = 29;
    if (has_maxuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional int32 deluser = 31;
    if (has_deluser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deluser());
    }

    // optional int32 actionuser = 32;
    if (has_actionuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionuser());
    }

    // optional int32 usernum = 33;
    if (has_usernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 julebuid = 34;
    if (has_julebuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebuid());
    }

    // optional int32 flag = 35;
    if (has_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 ershtype = 36;
    if (has_ershtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ershtype());
    }

    // optional int32 dealcnt = 37;
    if (has_dealcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealcnt());
    }

    // optional .progame.ershoptinfo maxactioninfo = 38;
    if (has_maxactioninfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxactioninfo());
    }

    // optional string maxpourjetton = 39;
    if (has_maxpourjetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maxpourjetton());
    }

  }
  // repeated .progame.ershuser situser = 18;
  total_size += 2 * this->situser_size();
  for (int i = 0; i < this->situser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->situser(i));
  }

  // repeated int32 standuser = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 2 * this->standuser_size() + data_size;
  }

  // repeated int32 actionlist = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->actionlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actionlist(i));
    }
    total_size += 2 * this->actionlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ershinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ershinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ershinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ershinfo::MergeFrom(const ershinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  actionlist_.MergeFrom(from.actionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablemark()) {
      set_tablemark(from.tablemark());
    }
    if (from.has_tabletime()) {
      set_tabletime(from.tabletime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_doublecomp()) {
      set_doublecomp(from.doublecomp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boutcapp()) {
      set_boutcapp(from.boutcapp());
    }
    if (from.has_mincomp()) {
      set_mincomp(from.mincomp());
    }
    if (from.has_menpai()) {
      set_menpai(from.menpai());
    }
    if (from.has_maxplaynum()) {
      set_maxplaynum(from.maxplaynum());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_restrict()) {
      set_restrict(from.restrict());
    }
    if (from.has_autoready()) {
      set_autoready(from.autoready());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_usevipnum()) {
      set_usevipnum(from.usevipnum());
    }
    if (from.has_guodi()) {
      set_guodi(from.guodi());
    }
    if (from.has_oncepour()) {
      set_oncepour(from.oncepour());
    }
    if (from.has_presentbout()) {
      set_presentbout(from.presentbout());
    }
    if (from.has_dissolveinfo()) {
      set_dissolveinfo(from.dissolveinfo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_straction()) {
      set_straction(from.straction());
    }
    if (from.has_payway()) {
      set_payway(from.payway());
    }
    if (from.has_paynum()) {
      set_paynum(from.paynum());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
    if (from.has_deluser()) {
      set_deluser(from.deluser());
    }
    if (from.has_actionuser()) {
      set_actionuser(from.actionuser());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_julebuid()) {
      set_julebuid(from.julebuid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_ershtype()) {
      set_ershtype(from.ershtype());
    }
    if (from.has_dealcnt()) {
      set_dealcnt(from.dealcnt());
    }
    if (from.has_maxactioninfo()) {
      mutable_maxactioninfo()->::progame::ershoptinfo::MergeFrom(from.maxactioninfo());
    }
    if (from.has_maxpourjetton()) {
      set_maxpourjetton(from.maxpourjetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ershinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ershinfo::CopyFrom(const ershinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ershinfo::IsInitialized() const {

  return true;
}

void ershinfo::Swap(ershinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablemark_, other->tablemark_);
    std::swap(tabletime_, other->tabletime_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(difen_, other->difen_);
    std::swap(doublecomp_, other->doublecomp_);
    std::swap(boutcapp_, other->boutcapp_);
    std::swap(mincomp_, other->mincomp_);
    std::swap(menpai_, other->menpai_);
    std::swap(maxplaynum_, other->maxplaynum_);
    std::swap(paytype_, other->paytype_);
    std::swap(restrict_, other->restrict_);
    std::swap(autoready_, other->autoready_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(bankerid_, other->bankerid_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    std::swap(usevipnum_, other->usevipnum_);
    std::swap(guodi_, other->guodi_);
    std::swap(oncepour_, other->oncepour_);
    std::swap(presentbout_, other->presentbout_);
    std::swap(dissolveinfo_, other->dissolveinfo_);
    std::swap(straction_, other->straction_);
    std::swap(payway_, other->payway_);
    std::swap(paynum_, other->paynum_);
    std::swap(maxuser_, other->maxuser_);
    actionlist_.Swap(&other->actionlist_);
    std::swap(deluser_, other->deluser_);
    std::swap(actionuser_, other->actionuser_);
    std::swap(usernum_, other->usernum_);
    std::swap(julebuid_, other->julebuid_);
    std::swap(flag_, other->flag_);
    std::swap(ershtype_, other->ershtype_);
    std::swap(dealcnt_, other->dealcnt_);
    std::swap(maxactioninfo_, other->maxactioninfo_);
    std::swap(maxpourjetton_, other->maxpourjetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ershinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ershinfo_descriptor_;
  metadata.reflection = ershinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ershhandpoker::kHandpokerFieldNumber;
#endif  // !_MSC_VER

ershhandpoker::ershhandpoker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ershhandpoker::InitAsDefaultInstance() {
}

ershhandpoker::ershhandpoker(const ershhandpoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ershhandpoker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ershhandpoker::~ershhandpoker() {
  SharedDtor();
}

void ershhandpoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ershhandpoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ershhandpoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ershhandpoker_descriptor_;
}

const ershhandpoker& ershhandpoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fersh_2eproto();
  return *default_instance_;
}

ershhandpoker* ershhandpoker::default_instance_ = NULL;

ershhandpoker* ershhandpoker::New() const {
  return new ershhandpoker;
}

void ershhandpoker::Clear() {
  handpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ershhandpoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 handpoker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_handpoker;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ershhandpoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 handpoker = 1;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->handpoker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ershhandpoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 handpoker = 1;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->handpoker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ershhandpoker::ByteSize() const {
  int total_size = 0;

  // repeated int32 handpoker = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ershhandpoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ershhandpoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ershhandpoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ershhandpoker::MergeFrom(const ershhandpoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ershhandpoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ershhandpoker::CopyFrom(const ershhandpoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ershhandpoker::IsInitialized() const {

  return true;
}

void ershhandpoker::Swap(ershhandpoker* other) {
  if (other != this) {
    handpoker_.Swap(&other->handpoker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ershhandpoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ershhandpoker_descriptor_;
  metadata.reflection = ershhandpoker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ershhistoryitem::kLegFieldNumber;
const int ershhistoryitem::kGuodiFieldNumber;
const int ershhistoryitem::kPresentboutFieldNumber;
const int ershhistoryitem::kOncepourFieldNumber;
const int ershhistoryitem::kWineridFieldNumber;
const int ershhistoryitem::kUseridlistFieldNumber;
const int ershhistoryitem::kNicklistFieldNumber;
const int ershhistoryitem::kJettonFieldNumber;
const int ershhistoryitem::kPokerlistFieldNumber;
const int ershhistoryitem::kErshtypelistFieldNumber;
const int ershhistoryitem::kWinlistFieldNumber;
const int ershhistoryitem::kResultlistFieldNumber;
#endif  // !_MSC_VER

ershhistoryitem::ershhistoryitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ershhistoryitem::InitAsDefaultInstance() {
}

ershhistoryitem::ershhistoryitem(const ershhistoryitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ershhistoryitem::SharedCtor() {
  _cached_size_ = 0;
  leg_ = 0;
  guodi_ = 0;
  presentbout_ = 0;
  oncepour_ = 0;
  winerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ershhistoryitem::~ershhistoryitem() {
  SharedDtor();
}

void ershhistoryitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ershhistoryitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ershhistoryitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ershhistoryitem_descriptor_;
}

const ershhistoryitem& ershhistoryitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fersh_2eproto();
  return *default_instance_;
}

ershhistoryitem* ershhistoryitem::default_instance_ = NULL;

ershhistoryitem* ershhistoryitem::New() const {
  return new ershhistoryitem;
}

void ershhistoryitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leg_ = 0;
    guodi_ = 0;
    presentbout_ = 0;
    oncepour_ = 0;
    winerid_ = 0;
  }
  useridlist_.Clear();
  nicklist_.Clear();
  jetton_.Clear();
  pokerlist_.Clear();
  ershtypelist_.Clear();
  winlist_.Clear();
  resultlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ershhistoryitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leg_)));
          set_has_leg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guodi;
        break;
      }

      // optional int32 guodi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guodi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guodi_)));
          set_has_guodi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_presentbout;
        break;
      }

      // optional int32 presentbout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentbout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentbout_)));
          set_has_presentbout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oncepour;
        break;
      }

      // optional int32 oncepour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oncepour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oncepour_)));
          set_has_oncepour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winerid;
        break;
      }

      // optional int32 winerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winerid_)));
          set_has_winerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_useridlist;
        if (input->ExpectTag(58)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nicklist;
        if (input->ExpectTag(64)) goto parse_jetton;
        break;
      }

      // repeated int32 jetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jetton;
        if (input->ExpectTag(74)) goto parse_pokerlist;
        break;
      }

      // repeated .progame.ershhandpoker pokerlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pokerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pokerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pokerlist;
        if (input->ExpectTag(80)) goto parse_ershtypelist;
        break;
      }

      // repeated int32 ershtypelist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ershtypelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_ershtypelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ershtypelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ershtypelist;
        if (input->ExpectTag(88)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_winlist;
        if (input->ExpectTag(136)) goto parse_resultlist;
        break;
      }

      // repeated int32 resultlist = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_resultlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_resultlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_resultlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ershhistoryitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 leg = 1;
  if (has_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leg(), output);
  }

  // optional int32 guodi = 2;
  if (has_guodi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guodi(), output);
  }

  // optional int32 presentbout = 3;
  if (has_presentbout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->presentbout(), output);
  }

  // optional int32 oncepour = 4;
  if (has_oncepour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oncepour(), output);
  }

  // optional int32 winerid = 5;
  if (has_winerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winerid(), output);
  }

  // repeated int32 useridlist = 6;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->useridlist(i), output);
  }

  // repeated string nicklist = 7;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nicklist(i), output);
  }

  // repeated int32 jetton = 8;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->jetton(i), output);
  }

  // repeated .progame.ershhandpoker pokerlist = 9;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pokerlist(i), output);
  }

  // repeated int32 ershtypelist = 10;
  for (int i = 0; i < this->ershtypelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->ershtypelist(i), output);
  }

  // repeated int32 winlist = 11;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->winlist(i), output);
  }

  // repeated int32 resultlist = 17;
  for (int i = 0; i < this->resultlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->resultlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ershhistoryitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 leg = 1;
  if (has_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leg(), target);
  }

  // optional int32 guodi = 2;
  if (has_guodi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guodi(), target);
  }

  // optional int32 presentbout = 3;
  if (has_presentbout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->presentbout(), target);
  }

  // optional int32 oncepour = 4;
  if (has_oncepour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oncepour(), target);
  }

  // optional int32 winerid = 5;
  if (has_winerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winerid(), target);
  }

  // repeated int32 useridlist = 6;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->useridlist(i), target);
  }

  // repeated string nicklist = 7;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->nicklist(i), target);
  }

  // repeated int32 jetton = 8;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->jetton(i), target);
  }

  // repeated .progame.ershhandpoker pokerlist = 9;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pokerlist(i), target);
  }

  // repeated int32 ershtypelist = 10;
  for (int i = 0; i < this->ershtypelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->ershtypelist(i), target);
  }

  // repeated int32 winlist = 11;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->winlist(i), target);
  }

  // repeated int32 resultlist = 17;
  for (int i = 0; i < this->resultlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->resultlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ershhistoryitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 leg = 1;
    if (has_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leg());
    }

    // optional int32 guodi = 2;
    if (has_guodi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guodi());
    }

    // optional int32 presentbout = 3;
    if (has_presentbout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentbout());
    }

    // optional int32 oncepour = 4;
    if (has_oncepour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oncepour());
    }

    // optional int32 winerid = 5;
    if (has_winerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winerid());
    }

  }
  // repeated int32 useridlist = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated string nicklist = 7;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 jetton = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated .progame.ershhandpoker pokerlist = 9;
  total_size += 1 * this->pokerlist_size();
  for (int i = 0; i < this->pokerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokerlist(i));
  }

  // repeated int32 ershtypelist = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->ershtypelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ershtypelist(i));
    }
    total_size += 1 * this->ershtypelist_size() + data_size;
  }

  // repeated int32 winlist = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated int32 resultlist = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->resultlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->resultlist(i));
    }
    total_size += 2 * this->resultlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ershhistoryitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ershhistoryitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ershhistoryitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ershhistoryitem::MergeFrom(const ershhistoryitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  nicklist_.MergeFrom(from.nicklist_);
  jetton_.MergeFrom(from.jetton_);
  pokerlist_.MergeFrom(from.pokerlist_);
  ershtypelist_.MergeFrom(from.ershtypelist_);
  winlist_.MergeFrom(from.winlist_);
  resultlist_.MergeFrom(from.resultlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg()) {
      set_leg(from.leg());
    }
    if (from.has_guodi()) {
      set_guodi(from.guodi());
    }
    if (from.has_presentbout()) {
      set_presentbout(from.presentbout());
    }
    if (from.has_oncepour()) {
      set_oncepour(from.oncepour());
    }
    if (from.has_winerid()) {
      set_winerid(from.winerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ershhistoryitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ershhistoryitem::CopyFrom(const ershhistoryitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ershhistoryitem::IsInitialized() const {

  return true;
}

void ershhistoryitem::Swap(ershhistoryitem* other) {
  if (other != this) {
    std::swap(leg_, other->leg_);
    std::swap(guodi_, other->guodi_);
    std::swap(presentbout_, other->presentbout_);
    std::swap(oncepour_, other->oncepour_);
    std::swap(winerid_, other->winerid_);
    useridlist_.Swap(&other->useridlist_);
    nicklist_.Swap(&other->nicklist_);
    jetton_.Swap(&other->jetton_);
    pokerlist_.Swap(&other->pokerlist_);
    ershtypelist_.Swap(&other->ershtypelist_);
    winlist_.Swap(&other->winlist_);
    resultlist_.Swap(&other->resultlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ershhistoryitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ershhistoryitem_descriptor_;
  metadata.reflection = ershhistoryitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ershhistory::kTableidFieldNumber;
const int ershhistory::kPlaynummaxFieldNumber;
const int ershhistory::kPlaynumFieldNumber;
const int ershhistory::kDifenFieldNumber;
const int ershhistory::kGametimeFieldNumber;
const int ershhistory::kOwneridFieldNumber;
const int ershhistory::kNicklistFieldNumber;
const int ershhistory::kUseridlistFieldNumber;
const int ershhistory::kWinlistFieldNumber;
const int ershhistory::kHitemlistFieldNumber;
#endif  // !_MSC_VER

ershhistory::ershhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ershhistory::InitAsDefaultInstance() {
}

ershhistory::ershhistory(const ershhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ershhistory::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  playnummax_ = 0;
  playnum_ = 0;
  difen_ = 0;
  gametime_ = 0;
  ownerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ershhistory::~ershhistory() {
  SharedDtor();
}

void ershhistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ershhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ershhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ershhistory_descriptor_;
}

const ershhistory& ershhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fersh_2eproto();
  return *default_instance_;
}

ershhistory* ershhistory::default_instance_ = NULL;

ershhistory* ershhistory::New() const {
  return new ershhistory;
}

void ershhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    playnummax_ = 0;
    playnum_ = 0;
    difen_ = 0;
    gametime_ = 0;
    ownerid_ = 0;
  }
  nicklist_.Clear();
  useridlist_.Clear();
  winlist_.Clear();
  hitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ershhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playnummax;
        break;
      }

      // optional int32 playnummax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playnummax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnummax_)));
          set_has_playnummax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playnum;
        break;
      }

      // optional int32 playnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnum_)));
          set_has_playnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_difen;
        break;
      }

      // optional int32 difen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difen_)));
          set_has_difen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gametime;
        break;
      }

      // optional int32 gametime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nicklist;
        if (input->ExpectTag(72)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_useridlist;
        if (input->ExpectTag(80)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_winlist;
        if (input->ExpectTag(90)) goto parse_hitemlist;
        break;
      }

      // repeated .progame.ershhistoryitem hitemlist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hitemlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ershhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 playnummax = 2;
  if (has_playnummax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playnummax(), output);
  }

  // optional int32 playnum = 3;
  if (has_playnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playnum(), output);
  }

  // optional int32 difen = 4;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difen(), output);
  }

  // optional int32 gametime = 6;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gametime(), output);
  }

  // optional int32 ownerid = 7;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ownerid(), output);
  }

  // repeated string nicklist = 8;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->nicklist(i), output);
  }

  // repeated int32 useridlist = 9;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->useridlist(i), output);
  }

  // repeated int32 winlist = 10;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->winlist(i), output);
  }

  // repeated .progame.ershhistoryitem hitemlist = 11;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hitemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ershhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 playnummax = 2;
  if (has_playnummax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playnummax(), target);
  }

  // optional int32 playnum = 3;
  if (has_playnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playnum(), target);
  }

  // optional int32 difen = 4;
  if (has_difen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difen(), target);
  }

  // optional int32 gametime = 6;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gametime(), target);
  }

  // optional int32 ownerid = 7;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ownerid(), target);
  }

  // repeated string nicklist = 8;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->nicklist(i), target);
  }

  // repeated int32 useridlist = 9;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->useridlist(i), target);
  }

  // repeated int32 winlist = 10;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->winlist(i), target);
  }

  // repeated .progame.ershhistoryitem hitemlist = 11;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hitemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ershhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 playnummax = 2;
    if (has_playnummax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnummax());
    }

    // optional int32 playnum = 3;
    if (has_playnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnum());
    }

    // optional int32 difen = 4;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difen());
    }

    // optional int32 gametime = 6;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametime());
    }

    // optional int32 ownerid = 7;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

  }
  // repeated string nicklist = 8;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 useridlist = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated int32 winlist = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated .progame.ershhistoryitem hitemlist = 11;
  total_size += 1 * this->hitemlist_size();
  for (int i = 0; i < this->hitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ershhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ershhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ershhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ershhistory::MergeFrom(const ershhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  nicklist_.MergeFrom(from.nicklist_);
  useridlist_.MergeFrom(from.useridlist_);
  winlist_.MergeFrom(from.winlist_);
  hitemlist_.MergeFrom(from.hitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_playnummax()) {
      set_playnummax(from.playnummax());
    }
    if (from.has_playnum()) {
      set_playnum(from.playnum());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ershhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ershhistory::CopyFrom(const ershhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ershhistory::IsInitialized() const {

  return true;
}

void ershhistory::Swap(ershhistory* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(playnummax_, other->playnummax_);
    std::swap(playnum_, other->playnum_);
    std::swap(difen_, other->difen_);
    std::swap(gametime_, other->gametime_);
    std::swap(ownerid_, other->ownerid_);
    nicklist_.Swap(&other->nicklist_);
    useridlist_.Swap(&other->useridlist_);
    winlist_.Swap(&other->winlist_);
    hitemlist_.Swap(&other->hitemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ershhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ershhistory_descriptor_;
  metadata.reflection = ershhistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ershcardlist::kListFieldNumber;
#endif  // !_MSC_VER

ershcardlist::ershcardlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ershcardlist::InitAsDefaultInstance() {
}

ershcardlist::ershcardlist(const ershcardlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ershcardlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ershcardlist::~ershcardlist() {
  SharedDtor();
}

void ershcardlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ershcardlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ershcardlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ershcardlist_descriptor_;
}

const ershcardlist& ershcardlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fersh_2eproto();
  return *default_instance_;
}

ershcardlist* ershcardlist::default_instance_ = NULL;

ershcardlist* ershcardlist::New() const {
  return new ershcardlist;
}

void ershcardlist::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ershcardlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ershcardlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ershcardlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ershcardlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ershcardlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ershcardlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ershcardlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ershcardlist::MergeFrom(const ershcardlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ershcardlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ershcardlist::CopyFrom(const ershcardlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ershcardlist::IsInitialized() const {

  return true;
}

void ershcardlist::Swap(ershcardlist* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ershcardlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ershcardlist_descriptor_;
  metadata.reflection = ershcardlist_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
