// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_ddz.proto

#ifndef PROTOBUF_st_5fddz_2eproto__INCLUDED
#define PROTOBUF_st_5fddz_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fddz_2eproto();
void protobuf_AssignDesc_st_5fddz_2eproto();
void protobuf_ShutdownFile_st_5fddz_2eproto();

class lasplayinfo;
class ddzuser;
class ddzinfo;
class multipleinfo;
class noad;
class ddzhistoryitem;
class ddzhistory;
class ddzhistorypair;
class ddztaganalyseresult;
class ddzpokerlist;

// ===================================================================

class lasplayinfo : public ::google::protobuf::Message {
 public:
  lasplayinfo();
  virtual ~lasplayinfo();

  lasplayinfo(const lasplayinfo& from);

  inline lasplayinfo& operator=(const lasplayinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lasplayinfo& default_instance();

  void Swap(lasplayinfo* other);

  // implements Message ----------------------------------------------

  lasplayinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const lasplayinfo& from);
  void MergeFrom(const lasplayinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pokerType = 2;
  inline bool has_pokertype() const;
  inline void clear_pokertype();
  static const int kPokerTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pokertype() const;
  inline void set_pokertype(::google::protobuf::int32 value);

  // repeated int32 pokerList = 3;
  inline int pokerlist_size() const;
  inline void clear_pokerlist();
  static const int kPokerListFieldNumber = 3;
  inline ::google::protobuf::int32 pokerlist(int index) const;
  inline void set_pokerlist(int index, ::google::protobuf::int32 value);
  inline void add_pokerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pokerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pokerlist();

  // @@protoc_insertion_point(class_scope:progame.lasplayinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pokertype();
  inline void clear_has_pokertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pokertype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pokerlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static lasplayinfo* default_instance_;
};
// -------------------------------------------------------------------

class ddzuser : public ::google::protobuf::Message {
 public:
  ddzuser();
  virtual ~ddzuser();

  ddzuser(const ddzuser& from);

  inline ddzuser& operator=(const ddzuser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ddzuser& default_instance();

  void Swap(ddzuser* other);

  // implements Message ----------------------------------------------

  ddzuser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ddzuser& from);
  void MergeFrom(const ddzuser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string face_1 = 3;
  inline bool has_face_1() const;
  inline void clear_face_1();
  static const int kFace1FieldNumber = 3;
  inline const ::std::string& face_1() const;
  inline void set_face_1(const ::std::string& value);
  inline void set_face_1(const char* value);
  inline void set_face_1(const char* value, size_t size);
  inline ::std::string* mutable_face_1();
  inline ::std::string* release_face_1();
  inline void set_allocated_face_1(::std::string* face_1);

  // optional string jifen = 4;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 4;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional int32 chairid = 5;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 5;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // repeated int32 handpoker = 6;
  inline int handpoker_size() const;
  inline void clear_handpoker();
  static const int kHandpokerFieldNumber = 6;
  inline ::google::protobuf::int32 handpoker(int index) const;
  inline void set_handpoker(int index, ::google::protobuf::int32 value);
  inline void add_handpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handpoker();

  // optional int32 playsum = 7;
  inline bool has_playsum() const;
  inline void clear_playsum();
  static const int kPlaysumFieldNumber = 7;
  inline ::google::protobuf::int32 playsum() const;
  inline void set_playsum(::google::protobuf::int32 value);

  // optional int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 mPoker = 9;
  inline bool has_mpoker() const;
  inline void clear_mpoker();
  static const int kMPokerFieldNumber = 9;
  inline ::google::protobuf::int32 mpoker() const;
  inline void set_mpoker(::google::protobuf::int32 value);

  // optional int32 qLandlord = 10;
  inline bool has_qlandlord() const;
  inline void clear_qlandlord();
  static const int kQLandlordFieldNumber = 10;
  inline ::google::protobuf::int32 qlandlord() const;
  inline void set_qlandlord(::google::protobuf::int32 value);

  // optional int32 jLandlord = 11;
  inline bool has_jlandlord() const;
  inline void clear_jlandlord();
  static const int kJLandlordFieldNumber = 11;
  inline ::google::protobuf::int32 jlandlord() const;
  inline void set_jlandlord(::google::protobuf::int32 value);

  // optional int32 bombNum = 12;
  inline bool has_bombnum() const;
  inline void clear_bombnum();
  static const int kBombNumFieldNumber = 12;
  inline ::google::protobuf::int32 bombnum() const;
  inline void set_bombnum(::google::protobuf::int32 value);

  // optional int32 autoplayer = 13;
  inline bool has_autoplayer() const;
  inline void clear_autoplayer();
  static const int kAutoplayerFieldNumber = 13;
  inline ::google::protobuf::int32 autoplayer() const;
  inline void set_autoplayer(::google::protobuf::int32 value);

  // optional int32 timeouts = 14;
  inline bool has_timeouts() const;
  inline void clear_timeouts();
  static const int kTimeoutsFieldNumber = 14;
  inline ::google::protobuf::int32 timeouts() const;
  inline void set_timeouts(::google::protobuf::int32 value);

  // optional int32 winnum = 15;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 15;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional int32 maxscore = 16;
  inline bool has_maxscore() const;
  inline void clear_maxscore();
  static const int kMaxscoreFieldNumber = 16;
  inline ::google::protobuf::int32 maxscore() const;
  inline void set_maxscore(::google::protobuf::int32 value);

  // optional int32 islandlord = 17;
  inline bool has_islandlord() const;
  inline void clear_islandlord();
  static const int kIslandlordFieldNumber = 17;
  inline ::google::protobuf::int32 islandlord() const;
  inline void set_islandlord(::google::protobuf::int32 value);

  // optional int32 sex = 18;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 18;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 pokerSum = 19;
  inline bool has_pokersum() const;
  inline void clear_pokersum();
  static const int kPokerSumFieldNumber = 19;
  inline ::google::protobuf::int32 pokersum() const;
  inline void set_pokersum(::google::protobuf::int32 value);

  // optional int32 lasttype = 20;
  inline bool has_lasttype() const;
  inline void clear_lasttype();
  static const int kLasttypeFieldNumber = 20;
  inline ::google::protobuf::int32 lasttype() const;
  inline void set_lasttype(::google::protobuf::int32 value);

  // repeated int32 lastpokerlist = 21;
  inline int lastpokerlist_size() const;
  inline void clear_lastpokerlist();
  static const int kLastpokerlistFieldNumber = 21;
  inline ::google::protobuf::int32 lastpokerlist(int index) const;
  inline void set_lastpokerlist(int index, ::google::protobuf::int32 value);
  inline void add_lastpokerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lastpokerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lastpokerlist();

  // optional int32 multiple = 22;
  inline bool has_multiple() const;
  inline void clear_multiple();
  static const int kMultipleFieldNumber = 22;
  inline ::google::protobuf::int32 multiple() const;
  inline void set_multiple(::google::protobuf::int32 value);

  // optional int32 doublestate = 23;
  inline bool has_doublestate() const;
  inline void clear_doublestate();
  static const int kDoublestateFieldNumber = 23;
  inline ::google::protobuf::int32 doublestate() const;
  inline void set_doublestate(::google::protobuf::int32 value);

  // repeated int32 allhandpoker = 24;
  inline int allhandpoker_size() const;
  inline void clear_allhandpoker();
  static const int kAllhandpokerFieldNumber = 24;
  inline ::google::protobuf::int32 allhandpoker(int index) const;
  inline void set_allhandpoker(int index, ::google::protobuf::int32 value);
  inline void add_allhandpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allhandpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allhandpoker();

  // @@protoc_insertion_point(class_scope:progame.ddzuser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_face_1();
  inline void clear_has_face_1();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_playsum();
  inline void clear_has_playsum();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_mpoker();
  inline void clear_has_mpoker();
  inline void set_has_qlandlord();
  inline void clear_has_qlandlord();
  inline void set_has_jlandlord();
  inline void clear_has_jlandlord();
  inline void set_has_bombnum();
  inline void clear_has_bombnum();
  inline void set_has_autoplayer();
  inline void clear_has_autoplayer();
  inline void set_has_timeouts();
  inline void clear_has_timeouts();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_maxscore();
  inline void clear_has_maxscore();
  inline void set_has_islandlord();
  inline void clear_has_islandlord();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_pokersum();
  inline void clear_has_pokersum();
  inline void set_has_lasttype();
  inline void clear_has_lasttype();
  inline void set_has_multiple();
  inline void clear_has_multiple();
  inline void set_has_doublestate();
  inline void clear_has_doublestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::std::string* face_1_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairid_;
  ::std::string* jifen_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handpoker_;
  ::google::protobuf::int32 playsum_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 mpoker_;
  ::google::protobuf::int32 qlandlord_;
  ::google::protobuf::int32 jlandlord_;
  ::google::protobuf::int32 bombnum_;
  ::google::protobuf::int32 autoplayer_;
  ::google::protobuf::int32 timeouts_;
  ::google::protobuf::int32 winnum_;
  ::google::protobuf::int32 maxscore_;
  ::google::protobuf::int32 islandlord_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 pokersum_;
  ::google::protobuf::int32 lasttype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lastpokerlist_;
  ::google::protobuf::int32 multiple_;
  ::google::protobuf::int32 doublestate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allhandpoker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static ddzuser* default_instance_;
};
// -------------------------------------------------------------------

class ddzinfo : public ::google::protobuf::Message {
 public:
  ddzinfo();
  virtual ~ddzinfo();

  ddzinfo(const ddzinfo& from);

  inline ddzinfo& operator=(const ddzinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ddzinfo& default_instance();

  void Swap(ddzinfo* other);

  // implements Message ----------------------------------------------

  ddzinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ddzinfo& from);
  void MergeFrom(const ddzinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 2;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 2;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 ddztype = 3;
  inline bool has_ddztype() const;
  inline void clear_ddztype();
  static const int kDdztypeFieldNumber = 3;
  inline ::google::protobuf::int32 ddztype() const;
  inline void set_ddztype(::google::protobuf::int32 value);

  // optional int32 pourjetton = 4;
  inline bool has_pourjetton() const;
  inline void clear_pourjetton();
  static const int kPourjettonFieldNumber = 4;
  inline ::google::protobuf::int32 pourjetton() const;
  inline void set_pourjetton(::google::protobuf::int32 value);

  // optional int32 maxvipnum = 5;
  inline bool has_maxvipnum() const;
  inline void clear_maxvipnum();
  static const int kMaxvipnumFieldNumber = 5;
  inline ::google::protobuf::int32 maxvipnum() const;
  inline void set_maxvipnum(::google::protobuf::int32 value);

  // optional int32 cap = 6;
  inline bool has_cap() const;
  inline void clear_cap();
  static const int kCapFieldNumber = 6;
  inline ::google::protobuf::int32 cap() const;
  inline void set_cap(::google::protobuf::int32 value);

  // optional int32 paytype = 7;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPaytypeFieldNumber = 7;
  inline ::google::protobuf::int32 paytype() const;
  inline void set_paytype(::google::protobuf::int32 value);

  // optional int32 payway = 8;
  inline bool has_payway() const;
  inline void clear_payway();
  static const int kPaywayFieldNumber = 8;
  inline ::google::protobuf::int32 payway() const;
  inline void set_payway(::google::protobuf::int32 value);

  // optional int32 paynum = 9;
  inline bool has_paynum() const;
  inline void clear_paynum();
  static const int kPaynumFieldNumber = 9;
  inline ::google::protobuf::int32 paynum() const;
  inline void set_paynum(::google::protobuf::int32 value);

  // optional int32 ownerid = 10;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 10;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // optional int32 julebuid = 11;
  inline bool has_julebuid() const;
  inline void clear_julebuid();
  static const int kJulebuidFieldNumber = 11;
  inline ::google::protobuf::int32 julebuid() const;
  inline void set_julebuid(::google::protobuf::int32 value);

  // optional int32 tablemark = 12;
  inline bool has_tablemark() const;
  inline void clear_tablemark();
  static const int kTablemarkFieldNumber = 12;
  inline ::google::protobuf::int32 tablemark() const;
  inline void set_tablemark(::google::protobuf::int32 value);

  // optional int32 tabletime = 13;
  inline bool has_tabletime() const;
  inline void clear_tabletime();
  static const int kTabletimeFieldNumber = 13;
  inline ::google::protobuf::int32 tabletime() const;
  inline void set_tabletime(::google::protobuf::int32 value);

  // optional int32 state = 14;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 14;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 15;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 15;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // optional int32 landlordid = 16;
  inline bool has_landlordid() const;
  inline void clear_landlordid();
  static const int kLandlordidFieldNumber = 16;
  inline ::google::protobuf::int32 landlordid() const;
  inline void set_landlordid(::google::protobuf::int32 value);

  // repeated .progame.ddzuser situser = 17;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 17;
  inline const ::progame::ddzuser& situser(int index) const;
  inline ::progame::ddzuser* mutable_situser(int index);
  inline ::progame::ddzuser* add_situser();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::ddzuser >&
      situser() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::ddzuser >*
      mutable_situser();

  // repeated int32 standuser = 18;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 18;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // optional .progame.lasplayinfo lasInfo = 19;
  inline bool has_lasinfo() const;
  inline void clear_lasinfo();
  static const int kLasInfoFieldNumber = 19;
  inline const ::progame::lasplayinfo& lasinfo() const;
  inline ::progame::lasplayinfo* mutable_lasinfo();
  inline ::progame::lasplayinfo* release_lasinfo();
  inline void set_allocated_lasinfo(::progame::lasplayinfo* lasinfo);

  // optional int32 usevipnum = 20;
  inline bool has_usevipnum() const;
  inline void clear_usevipnum();
  static const int kUsevipnumFieldNumber = 20;
  inline ::google::protobuf::int32 usevipnum() const;
  inline void set_usevipnum(::google::protobuf::int32 value);

  // optional int32 multiple = 21;
  inline bool has_multiple() const;
  inline void clear_multiple();
  static const int kMultipleFieldNumber = 21;
  inline ::google::protobuf::int32 multiple() const;
  inline void set_multiple(::google::protobuf::int32 value);

  // repeated int32 landlordPoker = 22;
  inline int landlordpoker_size() const;
  inline void clear_landlordpoker();
  static const int kLandlordPokerFieldNumber = 22;
  inline ::google::protobuf::int32 landlordpoker(int index) const;
  inline void set_landlordpoker(int index, ::google::protobuf::int32 value);
  inline void add_landlordpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      landlordpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_landlordpoker();

  // optional int32 wildCard = 23;
  inline bool has_wildcard() const;
  inline void clear_wildcard();
  static const int kWildCardFieldNumber = 23;
  inline ::google::protobuf::int32 wildcard() const;
  inline void set_wildcard(::google::protobuf::int32 value);

  // optional int32 dissolveinfo = 24;
  inline bool has_dissolveinfo() const;
  inline void clear_dissolveinfo();
  static const int kDissolveinfoFieldNumber = 24;
  inline ::google::protobuf::int32 dissolveinfo() const;
  inline void set_dissolveinfo(::google::protobuf::int32 value);

  // optional string straction = 25;
  inline bool has_straction() const;
  inline void clear_straction();
  static const int kStractionFieldNumber = 25;
  inline const ::std::string& straction() const;
  inline void set_straction(const ::std::string& value);
  inline void set_straction(const char* value);
  inline void set_straction(const char* value, size_t size);
  inline ::std::string* mutable_straction();
  inline ::std::string* release_straction();
  inline void set_allocated_straction(::std::string* straction);

  // optional int32 maxplaynum = 26;
  inline bool has_maxplaynum() const;
  inline void clear_maxplaynum();
  static const int kMaxplaynumFieldNumber = 26;
  inline ::google::protobuf::int32 maxplaynum() const;
  inline void set_maxplaynum(::google::protobuf::int32 value);

  // optional int32 actionuser = 27;
  inline bool has_actionuser() const;
  inline void clear_actionuser();
  static const int kActionuserFieldNumber = 27;
  inline ::google::protobuf::int32 actionuser() const;
  inline void set_actionuser(::google::protobuf::int32 value);

  // optional int32 frameid = 28;
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 28;
  inline ::google::protobuf::int32 frameid() const;
  inline void set_frameid(::google::protobuf::int32 value);

  // optional int32 actionuserid = 29;
  inline bool has_actionuserid() const;
  inline void clear_actionuserid();
  static const int kActionuseridFieldNumber = 29;
  inline ::google::protobuf::int32 actionuserid() const;
  inline void set_actionuserid(::google::protobuf::int32 value);

  // optional int32 isnotplay = 30;
  inline bool has_isnotplay() const;
  inline void clear_isnotplay();
  static const int kIsnotplayFieldNumber = 30;
  inline ::google::protobuf::int32 isnotplay() const;
  inline void set_isnotplay(::google::protobuf::int32 value);

  // optional int32 qlandlordsum = 31;
  inline bool has_qlandlordsum() const;
  inline void clear_qlandlordsum();
  static const int kQlandlordsumFieldNumber = 31;
  inline ::google::protobuf::int32 qlandlordsum() const;
  inline void set_qlandlordsum(::google::protobuf::int32 value);

  // optional int32 afreshnum = 32;
  inline bool has_afreshnum() const;
  inline void clear_afreshnum();
  static const int kAfreshnumFieldNumber = 32;
  inline ::google::protobuf::int32 afreshnum() const;
  inline void set_afreshnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.ddzinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_ddztype();
  inline void clear_has_ddztype();
  inline void set_has_pourjetton();
  inline void clear_has_pourjetton();
  inline void set_has_maxvipnum();
  inline void clear_has_maxvipnum();
  inline void set_has_cap();
  inline void clear_has_cap();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_payway();
  inline void clear_has_payway();
  inline void set_has_paynum();
  inline void clear_has_paynum();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_julebuid();
  inline void clear_has_julebuid();
  inline void set_has_tablemark();
  inline void clear_has_tablemark();
  inline void set_has_tabletime();
  inline void clear_has_tabletime();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_landlordid();
  inline void clear_has_landlordid();
  inline void set_has_lasinfo();
  inline void clear_has_lasinfo();
  inline void set_has_usevipnum();
  inline void clear_has_usevipnum();
  inline void set_has_multiple();
  inline void clear_has_multiple();
  inline void set_has_wildcard();
  inline void clear_has_wildcard();
  inline void set_has_dissolveinfo();
  inline void clear_has_dissolveinfo();
  inline void set_has_straction();
  inline void clear_has_straction();
  inline void set_has_maxplaynum();
  inline void clear_has_maxplaynum();
  inline void set_has_actionuser();
  inline void clear_has_actionuser();
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_actionuserid();
  inline void clear_has_actionuserid();
  inline void set_has_isnotplay();
  inline void clear_has_isnotplay();
  inline void set_has_qlandlordsum();
  inline void clear_has_qlandlordsum();
  inline void set_has_afreshnum();
  inline void clear_has_afreshnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 ddztype_;
  ::google::protobuf::int32 pourjetton_;
  ::google::protobuf::int32 maxvipnum_;
  ::google::protobuf::int32 cap_;
  ::google::protobuf::int32 paytype_;
  ::google::protobuf::int32 payway_;
  ::google::protobuf::int32 paynum_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 julebuid_;
  ::google::protobuf::int32 tablemark_;
  ::google::protobuf::int32 tabletime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 landlordid_;
  ::google::protobuf::RepeatedPtrField< ::progame::ddzuser > situser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::progame::lasplayinfo* lasinfo_;
  ::google::protobuf::int32 usevipnum_;
  ::google::protobuf::int32 multiple_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > landlordpoker_;
  ::google::protobuf::int32 wildcard_;
  ::google::protobuf::int32 dissolveinfo_;
  ::std::string* straction_;
  ::google::protobuf::int32 maxplaynum_;
  ::google::protobuf::int32 actionuser_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::int32 actionuserid_;
  ::google::protobuf::int32 isnotplay_;
  ::google::protobuf::int32 qlandlordsum_;
  ::google::protobuf::int32 afreshnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static ddzinfo* default_instance_;
};
// -------------------------------------------------------------------

class multipleinfo : public ::google::protobuf::Message {
 public:
  multipleinfo();
  virtual ~multipleinfo();

  multipleinfo(const multipleinfo& from);

  inline multipleinfo& operator=(const multipleinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const multipleinfo& default_instance();

  void Swap(multipleinfo* other);

  // implements Message ----------------------------------------------

  multipleinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const multipleinfo& from);
  void MergeFrom(const multipleinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mPoker = 1;
  inline bool has_mpoker() const;
  inline void clear_mpoker();
  static const int kMPokerFieldNumber = 1;
  inline ::google::protobuf::int32 mpoker() const;
  inline void set_mpoker(::google::protobuf::int32 value);

  // optional int32 qdz = 2;
  inline bool has_qdz() const;
  inline void clear_qdz();
  static const int kQdzFieldNumber = 2;
  inline ::google::protobuf::int32 qdz() const;
  inline void set_qdz(::google::protobuf::int32 value);

  // optional int32 dzp = 3;
  inline bool has_dzp() const;
  inline void clear_dzp();
  static const int kDzpFieldNumber = 3;
  inline ::google::protobuf::int32 dzp() const;
  inline void set_dzp(::google::protobuf::int32 value);

  // optional int32 bomb = 4;
  inline bool has_bomb() const;
  inline void clear_bomb();
  static const int kBombFieldNumber = 4;
  inline ::google::protobuf::int32 bomb() const;
  inline void set_bomb(::google::protobuf::int32 value);

  // optional int32 spring = 5;
  inline bool has_spring() const;
  inline void clear_spring();
  static const int kSpringFieldNumber = 5;
  inline ::google::protobuf::int32 spring() const;
  inline void set_spring(::google::protobuf::int32 value);

  // optional int32 multiplePublic = 6;
  inline bool has_multiplepublic() const;
  inline void clear_multiplepublic();
  static const int kMultiplePublicFieldNumber = 6;
  inline ::google::protobuf::int32 multiplepublic() const;
  inline void set_multiplepublic(::google::protobuf::int32 value);

  // optional int32 landlordmultiple = 7;
  inline bool has_landlordmultiple() const;
  inline void clear_landlordmultiple();
  static const int kLandlordmultipleFieldNumber = 7;
  inline ::google::protobuf::int32 landlordmultiple() const;
  inline void set_landlordmultiple(::google::protobuf::int32 value);

  // optional int32 peasantmultiple = 8;
  inline bool has_peasantmultiple() const;
  inline void clear_peasantmultiple();
  static const int kPeasantmultipleFieldNumber = 8;
  inline ::google::protobuf::int32 peasantmultiple() const;
  inline void set_peasantmultiple(::google::protobuf::int32 value);

  // optional int32 summultiple = 9;
  inline bool has_summultiple() const;
  inline void clear_summultiple();
  static const int kSummultipleFieldNumber = 9;
  inline ::google::protobuf::int32 summultiple() const;
  inline void set_summultiple(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.multipleinfo)
 private:
  inline void set_has_mpoker();
  inline void clear_has_mpoker();
  inline void set_has_qdz();
  inline void clear_has_qdz();
  inline void set_has_dzp();
  inline void clear_has_dzp();
  inline void set_has_bomb();
  inline void clear_has_bomb();
  inline void set_has_spring();
  inline void clear_has_spring();
  inline void set_has_multiplepublic();
  inline void clear_has_multiplepublic();
  inline void set_has_landlordmultiple();
  inline void clear_has_landlordmultiple();
  inline void set_has_peasantmultiple();
  inline void clear_has_peasantmultiple();
  inline void set_has_summultiple();
  inline void clear_has_summultiple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mpoker_;
  ::google::protobuf::int32 qdz_;
  ::google::protobuf::int32 dzp_;
  ::google::protobuf::int32 bomb_;
  ::google::protobuf::int32 spring_;
  ::google::protobuf::int32 multiplepublic_;
  ::google::protobuf::int32 landlordmultiple_;
  ::google::protobuf::int32 peasantmultiple_;
  ::google::protobuf::int32 summultiple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static multipleinfo* default_instance_;
};
// -------------------------------------------------------------------

class noad : public ::google::protobuf::Message {
 public:
  noad();
  virtual ~noad();

  noad(const noad& from);

  inline noad& operator=(const noad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const noad& default_instance();

  void Swap(noad* other);

  // implements Message ----------------------------------------------

  noad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const noad& from);
  void MergeFrom(const noad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 poker_A = 1;
  inline bool has_poker_a() const;
  inline void clear_poker_a();
  static const int kPokerAFieldNumber = 1;
  inline ::google::protobuf::int32 poker_a() const;
  inline void set_poker_a(::google::protobuf::int32 value);

  // optional int32 poker_2 = 2;
  inline bool has_poker_2() const;
  inline void clear_poker_2();
  static const int kPoker2FieldNumber = 2;
  inline ::google::protobuf::int32 poker_2() const;
  inline void set_poker_2(::google::protobuf::int32 value);

  // optional int32 poker_3 = 3;
  inline bool has_poker_3() const;
  inline void clear_poker_3();
  static const int kPoker3FieldNumber = 3;
  inline ::google::protobuf::int32 poker_3() const;
  inline void set_poker_3(::google::protobuf::int32 value);

  // optional int32 poker_4 = 4;
  inline bool has_poker_4() const;
  inline void clear_poker_4();
  static const int kPoker4FieldNumber = 4;
  inline ::google::protobuf::int32 poker_4() const;
  inline void set_poker_4(::google::protobuf::int32 value);

  // optional int32 poker_5 = 5;
  inline bool has_poker_5() const;
  inline void clear_poker_5();
  static const int kPoker5FieldNumber = 5;
  inline ::google::protobuf::int32 poker_5() const;
  inline void set_poker_5(::google::protobuf::int32 value);

  // optional int32 poker_6 = 6;
  inline bool has_poker_6() const;
  inline void clear_poker_6();
  static const int kPoker6FieldNumber = 6;
  inline ::google::protobuf::int32 poker_6() const;
  inline void set_poker_6(::google::protobuf::int32 value);

  // optional int32 poker_7 = 7;
  inline bool has_poker_7() const;
  inline void clear_poker_7();
  static const int kPoker7FieldNumber = 7;
  inline ::google::protobuf::int32 poker_7() const;
  inline void set_poker_7(::google::protobuf::int32 value);

  // optional int32 poker_8 = 8;
  inline bool has_poker_8() const;
  inline void clear_poker_8();
  static const int kPoker8FieldNumber = 8;
  inline ::google::protobuf::int32 poker_8() const;
  inline void set_poker_8(::google::protobuf::int32 value);

  // optional int32 poker_9 = 9;
  inline bool has_poker_9() const;
  inline void clear_poker_9();
  static const int kPoker9FieldNumber = 9;
  inline ::google::protobuf::int32 poker_9() const;
  inline void set_poker_9(::google::protobuf::int32 value);

  // optional int32 poker_10 = 10;
  inline bool has_poker_10() const;
  inline void clear_poker_10();
  static const int kPoker10FieldNumber = 10;
  inline ::google::protobuf::int32 poker_10() const;
  inline void set_poker_10(::google::protobuf::int32 value);

  // optional int32 poker_J = 11;
  inline bool has_poker_j() const;
  inline void clear_poker_j();
  static const int kPokerJFieldNumber = 11;
  inline ::google::protobuf::int32 poker_j() const;
  inline void set_poker_j(::google::protobuf::int32 value);

  // optional int32 poker_Q = 12;
  inline bool has_poker_q() const;
  inline void clear_poker_q();
  static const int kPokerQFieldNumber = 12;
  inline ::google::protobuf::int32 poker_q() const;
  inline void set_poker_q(::google::protobuf::int32 value);

  // optional int32 poker_K = 13;
  inline bool has_poker_k() const;
  inline void clear_poker_k();
  static const int kPokerKFieldNumber = 13;
  inline ::google::protobuf::int32 poker_k() const;
  inline void set_poker_k(::google::protobuf::int32 value);

  // optional int32 poker_Kong = 14;
  inline bool has_poker_kong() const;
  inline void clear_poker_kong();
  static const int kPokerKongFieldNumber = 14;
  inline ::google::protobuf::int32 poker_kong() const;
  inline void set_poker_kong(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.noad)
 private:
  inline void set_has_poker_a();
  inline void clear_has_poker_a();
  inline void set_has_poker_2();
  inline void clear_has_poker_2();
  inline void set_has_poker_3();
  inline void clear_has_poker_3();
  inline void set_has_poker_4();
  inline void clear_has_poker_4();
  inline void set_has_poker_5();
  inline void clear_has_poker_5();
  inline void set_has_poker_6();
  inline void clear_has_poker_6();
  inline void set_has_poker_7();
  inline void clear_has_poker_7();
  inline void set_has_poker_8();
  inline void clear_has_poker_8();
  inline void set_has_poker_9();
  inline void clear_has_poker_9();
  inline void set_has_poker_10();
  inline void clear_has_poker_10();
  inline void set_has_poker_j();
  inline void clear_has_poker_j();
  inline void set_has_poker_q();
  inline void clear_has_poker_q();
  inline void set_has_poker_k();
  inline void clear_has_poker_k();
  inline void set_has_poker_kong();
  inline void clear_has_poker_kong();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 poker_a_;
  ::google::protobuf::int32 poker_2_;
  ::google::protobuf::int32 poker_3_;
  ::google::protobuf::int32 poker_4_;
  ::google::protobuf::int32 poker_5_;
  ::google::protobuf::int32 poker_6_;
  ::google::protobuf::int32 poker_7_;
  ::google::protobuf::int32 poker_8_;
  ::google::protobuf::int32 poker_9_;
  ::google::protobuf::int32 poker_10_;
  ::google::protobuf::int32 poker_j_;
  ::google::protobuf::int32 poker_q_;
  ::google::protobuf::int32 poker_k_;
  ::google::protobuf::int32 poker_kong_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static noad* default_instance_;
};
// -------------------------------------------------------------------

class ddzhistoryitem : public ::google::protobuf::Message {
 public:
  ddzhistoryitem();
  virtual ~ddzhistoryitem();

  ddzhistoryitem(const ddzhistoryitem& from);

  inline ddzhistoryitem& operator=(const ddzhistoryitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ddzhistoryitem& default_instance();

  void Swap(ddzhistoryitem* other);

  // implements Message ----------------------------------------------

  ddzhistoryitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ddzhistoryitem& from);
  void MergeFrom(const ddzhistoryitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableplayid = 1;
  inline bool has_tableplayid() const;
  inline void clear_tableplayid();
  static const int kTableplayidFieldNumber = 1;
  inline ::google::protobuf::int32 tableplayid() const;
  inline void set_tableplayid(::google::protobuf::int32 value);

  // optional int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 playtime = 3;
  inline bool has_playtime() const;
  inline void clear_playtime();
  static const int kPlaytimeFieldNumber = 3;
  inline ::google::protobuf::int32 playtime() const;
  inline void set_playtime(::google::protobuf::int32 value);

  // optional int32 playstate = 4;
  inline bool has_playstate() const;
  inline void clear_playstate();
  static const int kPlaystateFieldNumber = 4;
  inline ::google::protobuf::int32 playstate() const;
  inline void set_playstate(::google::protobuf::int32 value);

  // repeated int32 useridlist = 5;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 5;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated string nicklist = 6;
  inline int nicklist_size() const;
  inline void clear_nicklist();
  static const int kNicklistFieldNumber = 6;
  inline const ::std::string& nicklist(int index) const;
  inline ::std::string* mutable_nicklist(int index);
  inline void set_nicklist(int index, const ::std::string& value);
  inline void set_nicklist(int index, const char* value);
  inline void set_nicklist(int index, const char* value, size_t size);
  inline ::std::string* add_nicklist();
  inline void add_nicklist(const ::std::string& value);
  inline void add_nicklist(const char* value);
  inline void add_nicklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicklist();

  // repeated int32 winlist = 7;
  inline int winlist_size() const;
  inline void clear_winlist();
  static const int kWinlistFieldNumber = 7;
  inline ::google::protobuf::int32 winlist(int index) const;
  inline void set_winlist(int index, ::google::protobuf::int32 value);
  inline void add_winlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winlist();

  // optional string quitdes = 8;
  inline bool has_quitdes() const;
  inline void clear_quitdes();
  static const int kQuitdesFieldNumber = 8;
  inline const ::std::string& quitdes() const;
  inline void set_quitdes(const ::std::string& value);
  inline void set_quitdes(const char* value);
  inline void set_quitdes(const char* value, size_t size);
  inline ::std::string* mutable_quitdes();
  inline ::std::string* release_quitdes();
  inline void set_allocated_quitdes(::std::string* quitdes);

  // repeated string userdes = 9;
  inline int userdes_size() const;
  inline void clear_userdes();
  static const int kUserdesFieldNumber = 9;
  inline const ::std::string& userdes(int index) const;
  inline ::std::string* mutable_userdes(int index);
  inline void set_userdes(int index, const ::std::string& value);
  inline void set_userdes(int index, const char* value);
  inline void set_userdes(int index, const char* value, size_t size);
  inline ::std::string* add_userdes();
  inline void add_userdes(const ::std::string& value);
  inline void add_userdes(const char* value);
  inline void add_userdes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& userdes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_userdes();

  // @@protoc_insertion_point(class_scope:progame.ddzhistoryitem)
 private:
  inline void set_has_tableplayid();
  inline void clear_has_tableplayid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_playtime();
  inline void clear_has_playtime();
  inline void set_has_playstate();
  inline void clear_has_playstate();
  inline void set_has_quitdes();
  inline void clear_has_quitdes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableplayid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 playtime_;
  ::google::protobuf::int32 playstate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicklist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winlist_;
  ::std::string* quitdes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> userdes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static ddzhistoryitem* default_instance_;
};
// -------------------------------------------------------------------

class ddzhistory : public ::google::protobuf::Message {
 public:
  ddzhistory();
  virtual ~ddzhistory();

  ddzhistory(const ddzhistory& from);

  inline ddzhistory& operator=(const ddzhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ddzhistory& default_instance();

  void Swap(ddzhistory* other);

  // implements Message ----------------------------------------------

  ddzhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ddzhistory& from);
  void MergeFrom(const ddzhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tablemark = 2;
  inline bool has_tablemark() const;
  inline void clear_tablemark();
  static const int kTablemarkFieldNumber = 2;
  inline ::google::protobuf::int32 tablemark() const;
  inline void set_tablemark(::google::protobuf::int32 value);

  // optional int32 gametime = 3;
  inline bool has_gametime() const;
  inline void clear_gametime();
  static const int kGametimeFieldNumber = 3;
  inline ::google::protobuf::int32 gametime() const;
  inline void set_gametime(::google::protobuf::int32 value);

  // optional int32 playnum = 4;
  inline bool has_playnum() const;
  inline void clear_playnum();
  static const int kPlaynumFieldNumber = 4;
  inline ::google::protobuf::int32 playnum() const;
  inline void set_playnum(::google::protobuf::int32 value);

  // repeated int32 useridlist = 5;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 5;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated string nicklist = 6;
  inline int nicklist_size() const;
  inline void clear_nicklist();
  static const int kNicklistFieldNumber = 6;
  inline const ::std::string& nicklist(int index) const;
  inline ::std::string* mutable_nicklist(int index);
  inline void set_nicklist(int index, const ::std::string& value);
  inline void set_nicklist(int index, const char* value);
  inline void set_nicklist(int index, const char* value, size_t size);
  inline ::std::string* add_nicklist();
  inline void add_nicklist(const ::std::string& value);
  inline void add_nicklist(const char* value);
  inline void add_nicklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicklist();

  // repeated int32 winlist = 7;
  inline int winlist_size() const;
  inline void clear_winlist();
  static const int kWinlistFieldNumber = 7;
  inline ::google::protobuf::int32 winlist(int index) const;
  inline void set_winlist(int index, ::google::protobuf::int32 value);
  inline void add_winlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winlist();

  // repeated .progame.ddzhistoryitem hitemlist = 8;
  inline int hitemlist_size() const;
  inline void clear_hitemlist();
  static const int kHitemlistFieldNumber = 8;
  inline const ::progame::ddzhistoryitem& hitemlist(int index) const;
  inline ::progame::ddzhistoryitem* mutable_hitemlist(int index);
  inline ::progame::ddzhistoryitem* add_hitemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::ddzhistoryitem >&
      hitemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::ddzhistoryitem >*
      mutable_hitemlist();

  // optional int32 ddztype = 9;
  inline bool has_ddztype() const;
  inline void clear_ddztype();
  static const int kDdztypeFieldNumber = 9;
  inline ::google::protobuf::int32 ddztype() const;
  inline void set_ddztype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.ddzhistory)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablemark();
  inline void clear_has_tablemark();
  inline void set_has_gametime();
  inline void clear_has_gametime();
  inline void set_has_playnum();
  inline void clear_has_playnum();
  inline void set_has_ddztype();
  inline void clear_has_ddztype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tablemark_;
  ::google::protobuf::int32 gametime_;
  ::google::protobuf::int32 playnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicklist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::ddzhistoryitem > hitemlist_;
  ::google::protobuf::int32 ddztype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static ddzhistory* default_instance_;
};
// -------------------------------------------------------------------

class ddzhistorypair : public ::google::protobuf::Message {
 public:
  ddzhistorypair();
  virtual ~ddzhistorypair();

  ddzhistorypair(const ddzhistorypair& from);

  inline ddzhistorypair& operator=(const ddzhistorypair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ddzhistorypair& default_instance();

  void Swap(ddzhistorypair* other);

  // implements Message ----------------------------------------------

  ddzhistorypair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ddzhistorypair& from);
  void MergeFrom(const ddzhistorypair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 packetcode = 1;
  inline bool has_packetcode() const;
  inline void clear_packetcode();
  static const int kPacketcodeFieldNumber = 1;
  inline ::google::protobuf::int32 packetcode() const;
  inline void set_packetcode(::google::protobuf::int32 value);

  // optional string pkginfo = 2;
  inline bool has_pkginfo() const;
  inline void clear_pkginfo();
  static const int kPkginfoFieldNumber = 2;
  inline const ::std::string& pkginfo() const;
  inline void set_pkginfo(const ::std::string& value);
  inline void set_pkginfo(const char* value);
  inline void set_pkginfo(const char* value, size_t size);
  inline ::std::string* mutable_pkginfo();
  inline ::std::string* release_pkginfo();
  inline void set_allocated_pkginfo(::std::string* pkginfo);

  // @@protoc_insertion_point(class_scope:progame.ddzhistorypair)
 private:
  inline void set_has_packetcode();
  inline void clear_has_packetcode();
  inline void set_has_pkginfo();
  inline void clear_has_pkginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pkginfo_;
  ::google::protobuf::int32 packetcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static ddzhistorypair* default_instance_;
};
// -------------------------------------------------------------------

class ddztaganalyseresult : public ::google::protobuf::Message {
 public:
  ddztaganalyseresult();
  virtual ~ddztaganalyseresult();

  ddztaganalyseresult(const ddztaganalyseresult& from);

  inline ddztaganalyseresult& operator=(const ddztaganalyseresult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ddztaganalyseresult& default_instance();

  void Swap(ddztaganalyseresult* other);

  // implements Message ----------------------------------------------

  ddztaganalyseresult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ddztaganalyseresult& from);
  void MergeFrom(const ddztaganalyseresult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 onecount = 1;
  inline bool has_onecount() const;
  inline void clear_onecount();
  static const int kOnecountFieldNumber = 1;
  inline ::google::protobuf::int32 onecount() const;
  inline void set_onecount(::google::protobuf::int32 value);

  // optional int32 twocount = 2;
  inline bool has_twocount() const;
  inline void clear_twocount();
  static const int kTwocountFieldNumber = 2;
  inline ::google::protobuf::int32 twocount() const;
  inline void set_twocount(::google::protobuf::int32 value);

  // optional int32 threecount = 3;
  inline bool has_threecount() const;
  inline void clear_threecount();
  static const int kThreecountFieldNumber = 3;
  inline ::google::protobuf::int32 threecount() const;
  inline void set_threecount(::google::protobuf::int32 value);

  // optional int32 fourcount = 4;
  inline bool has_fourcount() const;
  inline void clear_fourcount();
  static const int kFourcountFieldNumber = 4;
  inline ::google::protobuf::int32 fourcount() const;
  inline void set_fourcount(::google::protobuf::int32 value);

  // repeated int32 onelist = 5;
  inline int onelist_size() const;
  inline void clear_onelist();
  static const int kOnelistFieldNumber = 5;
  inline ::google::protobuf::int32 onelist(int index) const;
  inline void set_onelist(int index, ::google::protobuf::int32 value);
  inline void add_onelist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      onelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_onelist();

  // repeated int32 twolist = 6;
  inline int twolist_size() const;
  inline void clear_twolist();
  static const int kTwolistFieldNumber = 6;
  inline ::google::protobuf::int32 twolist(int index) const;
  inline void set_twolist(int index, ::google::protobuf::int32 value);
  inline void add_twolist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      twolist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_twolist();

  // repeated int32 threelist = 7;
  inline int threelist_size() const;
  inline void clear_threelist();
  static const int kThreelistFieldNumber = 7;
  inline ::google::protobuf::int32 threelist(int index) const;
  inline void set_threelist(int index, ::google::protobuf::int32 value);
  inline void add_threelist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threelist();

  // repeated int32 fourlist = 8;
  inline int fourlist_size() const;
  inline void clear_fourlist();
  static const int kFourlistFieldNumber = 8;
  inline ::google::protobuf::int32 fourlist(int index) const;
  inline void set_fourlist(int index, ::google::protobuf::int32 value);
  inline void add_fourlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fourlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fourlist();

  // repeated int32 onecarddata = 9;
  inline int onecarddata_size() const;
  inline void clear_onecarddata();
  static const int kOnecarddataFieldNumber = 9;
  inline ::google::protobuf::int32 onecarddata(int index) const;
  inline void set_onecarddata(int index, ::google::protobuf::int32 value);
  inline void add_onecarddata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      onecarddata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_onecarddata();

  // repeated int32 twocarddata = 10;
  inline int twocarddata_size() const;
  inline void clear_twocarddata();
  static const int kTwocarddataFieldNumber = 10;
  inline ::google::protobuf::int32 twocarddata(int index) const;
  inline void set_twocarddata(int index, ::google::protobuf::int32 value);
  inline void add_twocarddata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      twocarddata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_twocarddata();

  // repeated int32 threecarddata = 11;
  inline int threecarddata_size() const;
  inline void clear_threecarddata();
  static const int kThreecarddataFieldNumber = 11;
  inline ::google::protobuf::int32 threecarddata(int index) const;
  inline void set_threecarddata(int index, ::google::protobuf::int32 value);
  inline void add_threecarddata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      threecarddata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_threecarddata();

  // repeated int32 fourcarddata = 12;
  inline int fourcarddata_size() const;
  inline void clear_fourcarddata();
  static const int kFourcarddataFieldNumber = 12;
  inline ::google::protobuf::int32 fourcarddata(int index) const;
  inline void set_fourcarddata(int index, ::google::protobuf::int32 value);
  inline void add_fourcarddata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fourcarddata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fourcarddata();

  // @@protoc_insertion_point(class_scope:progame.ddztaganalyseresult)
 private:
  inline void set_has_onecount();
  inline void clear_has_onecount();
  inline void set_has_twocount();
  inline void clear_has_twocount();
  inline void set_has_threecount();
  inline void clear_has_threecount();
  inline void set_has_fourcount();
  inline void clear_has_fourcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 onecount_;
  ::google::protobuf::int32 twocount_;
  ::google::protobuf::int32 threecount_;
  ::google::protobuf::int32 fourcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > onelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > twolist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fourlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > onecarddata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > twocarddata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > threecarddata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fourcarddata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static ddztaganalyseresult* default_instance_;
};
// -------------------------------------------------------------------

class ddzpokerlist : public ::google::protobuf::Message {
 public:
  ddzpokerlist();
  virtual ~ddzpokerlist();

  ddzpokerlist(const ddzpokerlist& from);

  inline ddzpokerlist& operator=(const ddzpokerlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ddzpokerlist& default_instance();

  void Swap(ddzpokerlist* other);

  // implements Message ----------------------------------------------

  ddzpokerlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ddzpokerlist& from);
  void MergeFrom(const ddzpokerlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 card = 1;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:progame.ddzpokerlist)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fddz_2eproto();
  friend void protobuf_AssignDesc_st_5fddz_2eproto();
  friend void protobuf_ShutdownFile_st_5fddz_2eproto();

  void InitAsDefaultInstance();
  static ddzpokerlist* default_instance_;
};
// ===================================================================


// ===================================================================

// lasplayinfo

// optional int32 userid = 1;
inline bool lasplayinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lasplayinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lasplayinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lasplayinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 lasplayinfo::userid() const {
  return userid_;
}
inline void lasplayinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pokerType = 2;
inline bool lasplayinfo::has_pokertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lasplayinfo::set_has_pokertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lasplayinfo::clear_has_pokertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lasplayinfo::clear_pokertype() {
  pokertype_ = 0;
  clear_has_pokertype();
}
inline ::google::protobuf::int32 lasplayinfo::pokertype() const {
  return pokertype_;
}
inline void lasplayinfo::set_pokertype(::google::protobuf::int32 value) {
  set_has_pokertype();
  pokertype_ = value;
}

// repeated int32 pokerList = 3;
inline int lasplayinfo::pokerlist_size() const {
  return pokerlist_.size();
}
inline void lasplayinfo::clear_pokerlist() {
  pokerlist_.Clear();
}
inline ::google::protobuf::int32 lasplayinfo::pokerlist(int index) const {
  return pokerlist_.Get(index);
}
inline void lasplayinfo::set_pokerlist(int index, ::google::protobuf::int32 value) {
  pokerlist_.Set(index, value);
}
inline void lasplayinfo::add_pokerlist(::google::protobuf::int32 value) {
  pokerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
lasplayinfo::pokerlist() const {
  return pokerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
lasplayinfo::mutable_pokerlist() {
  return &pokerlist_;
}

// -------------------------------------------------------------------

// ddzuser

// optional int32 userid = 1;
inline bool ddzuser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ddzuser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ddzuser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ddzuser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ddzuser::userid() const {
  return userid_;
}
inline void ddzuser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string nickname = 2;
inline bool ddzuser::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ddzuser::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ddzuser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ddzuser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ddzuser::nickname() const {
  return *nickname_;
}
inline void ddzuser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ddzuser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ddzuser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzuser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ddzuser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ddzuser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string face_1 = 3;
inline bool ddzuser::has_face_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ddzuser::set_has_face_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ddzuser::clear_has_face_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ddzuser::clear_face_1() {
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    face_1_->clear();
  }
  clear_has_face_1();
}
inline const ::std::string& ddzuser::face_1() const {
  return *face_1_;
}
inline void ddzuser::set_face_1(const ::std::string& value) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(value);
}
inline void ddzuser::set_face_1(const char* value) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(value);
}
inline void ddzuser::set_face_1(const char* value, size_t size) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzuser::mutable_face_1() {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  return face_1_;
}
inline ::std::string* ddzuser::release_face_1() {
  clear_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = face_1_;
    face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ddzuser::set_allocated_face_1(::std::string* face_1) {
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    delete face_1_;
  }
  if (face_1) {
    set_has_face_1();
    face_1_ = face_1;
  } else {
    clear_has_face_1();
    face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string jifen = 4;
inline bool ddzuser::has_jifen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ddzuser::set_has_jifen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ddzuser::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ddzuser::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& ddzuser::jifen() const {
  return *jifen_;
}
inline void ddzuser::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void ddzuser::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void ddzuser::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzuser::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* ddzuser::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ddzuser::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 chairid = 5;
inline bool ddzuser::has_chairid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ddzuser::set_has_chairid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ddzuser::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ddzuser::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 ddzuser::chairid() const {
  return chairid_;
}
inline void ddzuser::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// repeated int32 handpoker = 6;
inline int ddzuser::handpoker_size() const {
  return handpoker_.size();
}
inline void ddzuser::clear_handpoker() {
  handpoker_.Clear();
}
inline ::google::protobuf::int32 ddzuser::handpoker(int index) const {
  return handpoker_.Get(index);
}
inline void ddzuser::set_handpoker(int index, ::google::protobuf::int32 value) {
  handpoker_.Set(index, value);
}
inline void ddzuser::add_handpoker(::google::protobuf::int32 value) {
  handpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzuser::handpoker() const {
  return handpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzuser::mutable_handpoker() {
  return &handpoker_;
}

// optional int32 playsum = 7;
inline bool ddzuser::has_playsum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ddzuser::set_has_playsum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ddzuser::clear_has_playsum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ddzuser::clear_playsum() {
  playsum_ = 0;
  clear_has_playsum();
}
inline ::google::protobuf::int32 ddzuser::playsum() const {
  return playsum_;
}
inline void ddzuser::set_playsum(::google::protobuf::int32 value) {
  set_has_playsum();
  playsum_ = value;
}

// optional int32 state = 8;
inline bool ddzuser::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ddzuser::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ddzuser::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ddzuser::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ddzuser::state() const {
  return state_;
}
inline void ddzuser::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 mPoker = 9;
inline bool ddzuser::has_mpoker() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ddzuser::set_has_mpoker() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ddzuser::clear_has_mpoker() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ddzuser::clear_mpoker() {
  mpoker_ = 0;
  clear_has_mpoker();
}
inline ::google::protobuf::int32 ddzuser::mpoker() const {
  return mpoker_;
}
inline void ddzuser::set_mpoker(::google::protobuf::int32 value) {
  set_has_mpoker();
  mpoker_ = value;
}

// optional int32 qLandlord = 10;
inline bool ddzuser::has_qlandlord() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ddzuser::set_has_qlandlord() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ddzuser::clear_has_qlandlord() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ddzuser::clear_qlandlord() {
  qlandlord_ = 0;
  clear_has_qlandlord();
}
inline ::google::protobuf::int32 ddzuser::qlandlord() const {
  return qlandlord_;
}
inline void ddzuser::set_qlandlord(::google::protobuf::int32 value) {
  set_has_qlandlord();
  qlandlord_ = value;
}

// optional int32 jLandlord = 11;
inline bool ddzuser::has_jlandlord() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ddzuser::set_has_jlandlord() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ddzuser::clear_has_jlandlord() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ddzuser::clear_jlandlord() {
  jlandlord_ = 0;
  clear_has_jlandlord();
}
inline ::google::protobuf::int32 ddzuser::jlandlord() const {
  return jlandlord_;
}
inline void ddzuser::set_jlandlord(::google::protobuf::int32 value) {
  set_has_jlandlord();
  jlandlord_ = value;
}

// optional int32 bombNum = 12;
inline bool ddzuser::has_bombnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ddzuser::set_has_bombnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ddzuser::clear_has_bombnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ddzuser::clear_bombnum() {
  bombnum_ = 0;
  clear_has_bombnum();
}
inline ::google::protobuf::int32 ddzuser::bombnum() const {
  return bombnum_;
}
inline void ddzuser::set_bombnum(::google::protobuf::int32 value) {
  set_has_bombnum();
  bombnum_ = value;
}

// optional int32 autoplayer = 13;
inline bool ddzuser::has_autoplayer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ddzuser::set_has_autoplayer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ddzuser::clear_has_autoplayer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ddzuser::clear_autoplayer() {
  autoplayer_ = 0;
  clear_has_autoplayer();
}
inline ::google::protobuf::int32 ddzuser::autoplayer() const {
  return autoplayer_;
}
inline void ddzuser::set_autoplayer(::google::protobuf::int32 value) {
  set_has_autoplayer();
  autoplayer_ = value;
}

// optional int32 timeouts = 14;
inline bool ddzuser::has_timeouts() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ddzuser::set_has_timeouts() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ddzuser::clear_has_timeouts() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ddzuser::clear_timeouts() {
  timeouts_ = 0;
  clear_has_timeouts();
}
inline ::google::protobuf::int32 ddzuser::timeouts() const {
  return timeouts_;
}
inline void ddzuser::set_timeouts(::google::protobuf::int32 value) {
  set_has_timeouts();
  timeouts_ = value;
}

// optional int32 winnum = 15;
inline bool ddzuser::has_winnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ddzuser::set_has_winnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ddzuser::clear_has_winnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ddzuser::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 ddzuser::winnum() const {
  return winnum_;
}
inline void ddzuser::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional int32 maxscore = 16;
inline bool ddzuser::has_maxscore() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ddzuser::set_has_maxscore() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ddzuser::clear_has_maxscore() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ddzuser::clear_maxscore() {
  maxscore_ = 0;
  clear_has_maxscore();
}
inline ::google::protobuf::int32 ddzuser::maxscore() const {
  return maxscore_;
}
inline void ddzuser::set_maxscore(::google::protobuf::int32 value) {
  set_has_maxscore();
  maxscore_ = value;
}

// optional int32 islandlord = 17;
inline bool ddzuser::has_islandlord() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ddzuser::set_has_islandlord() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ddzuser::clear_has_islandlord() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ddzuser::clear_islandlord() {
  islandlord_ = 0;
  clear_has_islandlord();
}
inline ::google::protobuf::int32 ddzuser::islandlord() const {
  return islandlord_;
}
inline void ddzuser::set_islandlord(::google::protobuf::int32 value) {
  set_has_islandlord();
  islandlord_ = value;
}

// optional int32 sex = 18;
inline bool ddzuser::has_sex() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ddzuser::set_has_sex() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ddzuser::clear_has_sex() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ddzuser::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ddzuser::sex() const {
  return sex_;
}
inline void ddzuser::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 pokerSum = 19;
inline bool ddzuser::has_pokersum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ddzuser::set_has_pokersum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ddzuser::clear_has_pokersum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ddzuser::clear_pokersum() {
  pokersum_ = 0;
  clear_has_pokersum();
}
inline ::google::protobuf::int32 ddzuser::pokersum() const {
  return pokersum_;
}
inline void ddzuser::set_pokersum(::google::protobuf::int32 value) {
  set_has_pokersum();
  pokersum_ = value;
}

// optional int32 lasttype = 20;
inline bool ddzuser::has_lasttype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ddzuser::set_has_lasttype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ddzuser::clear_has_lasttype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ddzuser::clear_lasttype() {
  lasttype_ = 0;
  clear_has_lasttype();
}
inline ::google::protobuf::int32 ddzuser::lasttype() const {
  return lasttype_;
}
inline void ddzuser::set_lasttype(::google::protobuf::int32 value) {
  set_has_lasttype();
  lasttype_ = value;
}

// repeated int32 lastpokerlist = 21;
inline int ddzuser::lastpokerlist_size() const {
  return lastpokerlist_.size();
}
inline void ddzuser::clear_lastpokerlist() {
  lastpokerlist_.Clear();
}
inline ::google::protobuf::int32 ddzuser::lastpokerlist(int index) const {
  return lastpokerlist_.Get(index);
}
inline void ddzuser::set_lastpokerlist(int index, ::google::protobuf::int32 value) {
  lastpokerlist_.Set(index, value);
}
inline void ddzuser::add_lastpokerlist(::google::protobuf::int32 value) {
  lastpokerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzuser::lastpokerlist() const {
  return lastpokerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzuser::mutable_lastpokerlist() {
  return &lastpokerlist_;
}

// optional int32 multiple = 22;
inline bool ddzuser::has_multiple() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ddzuser::set_has_multiple() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ddzuser::clear_has_multiple() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ddzuser::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
inline ::google::protobuf::int32 ddzuser::multiple() const {
  return multiple_;
}
inline void ddzuser::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
}

// optional int32 doublestate = 23;
inline bool ddzuser::has_doublestate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ddzuser::set_has_doublestate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ddzuser::clear_has_doublestate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ddzuser::clear_doublestate() {
  doublestate_ = 0;
  clear_has_doublestate();
}
inline ::google::protobuf::int32 ddzuser::doublestate() const {
  return doublestate_;
}
inline void ddzuser::set_doublestate(::google::protobuf::int32 value) {
  set_has_doublestate();
  doublestate_ = value;
}

// repeated int32 allhandpoker = 24;
inline int ddzuser::allhandpoker_size() const {
  return allhandpoker_.size();
}
inline void ddzuser::clear_allhandpoker() {
  allhandpoker_.Clear();
}
inline ::google::protobuf::int32 ddzuser::allhandpoker(int index) const {
  return allhandpoker_.Get(index);
}
inline void ddzuser::set_allhandpoker(int index, ::google::protobuf::int32 value) {
  allhandpoker_.Set(index, value);
}
inline void ddzuser::add_allhandpoker(::google::protobuf::int32 value) {
  allhandpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzuser::allhandpoker() const {
  return allhandpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzuser::mutable_allhandpoker() {
  return &allhandpoker_;
}

// -------------------------------------------------------------------

// ddzinfo

// optional int32 tableid = 1;
inline bool ddzinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ddzinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ddzinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ddzinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ddzinfo::tableid() const {
  return tableid_;
}
inline void ddzinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tabletype = 2;
inline bool ddzinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ddzinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ddzinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ddzinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 ddzinfo::tabletype() const {
  return tabletype_;
}
inline void ddzinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 ddztype = 3;
inline bool ddzinfo::has_ddztype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ddzinfo::set_has_ddztype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ddzinfo::clear_has_ddztype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ddzinfo::clear_ddztype() {
  ddztype_ = 0;
  clear_has_ddztype();
}
inline ::google::protobuf::int32 ddzinfo::ddztype() const {
  return ddztype_;
}
inline void ddzinfo::set_ddztype(::google::protobuf::int32 value) {
  set_has_ddztype();
  ddztype_ = value;
}

// optional int32 pourjetton = 4;
inline bool ddzinfo::has_pourjetton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ddzinfo::set_has_pourjetton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ddzinfo::clear_has_pourjetton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ddzinfo::clear_pourjetton() {
  pourjetton_ = 0;
  clear_has_pourjetton();
}
inline ::google::protobuf::int32 ddzinfo::pourjetton() const {
  return pourjetton_;
}
inline void ddzinfo::set_pourjetton(::google::protobuf::int32 value) {
  set_has_pourjetton();
  pourjetton_ = value;
}

// optional int32 maxvipnum = 5;
inline bool ddzinfo::has_maxvipnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ddzinfo::set_has_maxvipnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ddzinfo::clear_has_maxvipnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ddzinfo::clear_maxvipnum() {
  maxvipnum_ = 0;
  clear_has_maxvipnum();
}
inline ::google::protobuf::int32 ddzinfo::maxvipnum() const {
  return maxvipnum_;
}
inline void ddzinfo::set_maxvipnum(::google::protobuf::int32 value) {
  set_has_maxvipnum();
  maxvipnum_ = value;
}

// optional int32 cap = 6;
inline bool ddzinfo::has_cap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ddzinfo::set_has_cap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ddzinfo::clear_has_cap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ddzinfo::clear_cap() {
  cap_ = 0;
  clear_has_cap();
}
inline ::google::protobuf::int32 ddzinfo::cap() const {
  return cap_;
}
inline void ddzinfo::set_cap(::google::protobuf::int32 value) {
  set_has_cap();
  cap_ = value;
}

// optional int32 paytype = 7;
inline bool ddzinfo::has_paytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ddzinfo::set_has_paytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ddzinfo::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ddzinfo::clear_paytype() {
  paytype_ = 0;
  clear_has_paytype();
}
inline ::google::protobuf::int32 ddzinfo::paytype() const {
  return paytype_;
}
inline void ddzinfo::set_paytype(::google::protobuf::int32 value) {
  set_has_paytype();
  paytype_ = value;
}

// optional int32 payway = 8;
inline bool ddzinfo::has_payway() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ddzinfo::set_has_payway() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ddzinfo::clear_has_payway() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ddzinfo::clear_payway() {
  payway_ = 0;
  clear_has_payway();
}
inline ::google::protobuf::int32 ddzinfo::payway() const {
  return payway_;
}
inline void ddzinfo::set_payway(::google::protobuf::int32 value) {
  set_has_payway();
  payway_ = value;
}

// optional int32 paynum = 9;
inline bool ddzinfo::has_paynum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ddzinfo::set_has_paynum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ddzinfo::clear_has_paynum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ddzinfo::clear_paynum() {
  paynum_ = 0;
  clear_has_paynum();
}
inline ::google::protobuf::int32 ddzinfo::paynum() const {
  return paynum_;
}
inline void ddzinfo::set_paynum(::google::protobuf::int32 value) {
  set_has_paynum();
  paynum_ = value;
}

// optional int32 ownerid = 10;
inline bool ddzinfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ddzinfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ddzinfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ddzinfo::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 ddzinfo::ownerid() const {
  return ownerid_;
}
inline void ddzinfo::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional int32 julebuid = 11;
inline bool ddzinfo::has_julebuid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ddzinfo::set_has_julebuid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ddzinfo::clear_has_julebuid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ddzinfo::clear_julebuid() {
  julebuid_ = 0;
  clear_has_julebuid();
}
inline ::google::protobuf::int32 ddzinfo::julebuid() const {
  return julebuid_;
}
inline void ddzinfo::set_julebuid(::google::protobuf::int32 value) {
  set_has_julebuid();
  julebuid_ = value;
}

// optional int32 tablemark = 12;
inline bool ddzinfo::has_tablemark() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ddzinfo::set_has_tablemark() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ddzinfo::clear_has_tablemark() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ddzinfo::clear_tablemark() {
  tablemark_ = 0;
  clear_has_tablemark();
}
inline ::google::protobuf::int32 ddzinfo::tablemark() const {
  return tablemark_;
}
inline void ddzinfo::set_tablemark(::google::protobuf::int32 value) {
  set_has_tablemark();
  tablemark_ = value;
}

// optional int32 tabletime = 13;
inline bool ddzinfo::has_tabletime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ddzinfo::set_has_tabletime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ddzinfo::clear_has_tabletime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ddzinfo::clear_tabletime() {
  tabletime_ = 0;
  clear_has_tabletime();
}
inline ::google::protobuf::int32 ddzinfo::tabletime() const {
  return tabletime_;
}
inline void ddzinfo::set_tabletime(::google::protobuf::int32 value) {
  set_has_tabletime();
  tabletime_ = value;
}

// optional int32 state = 14;
inline bool ddzinfo::has_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ddzinfo::set_has_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ddzinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ddzinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ddzinfo::state() const {
  return state_;
}
inline void ddzinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 15;
inline bool ddzinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ddzinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ddzinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ddzinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 ddzinfo::timemark() const {
  return timemark_;
}
inline void ddzinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// optional int32 landlordid = 16;
inline bool ddzinfo::has_landlordid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ddzinfo::set_has_landlordid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ddzinfo::clear_has_landlordid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ddzinfo::clear_landlordid() {
  landlordid_ = 0;
  clear_has_landlordid();
}
inline ::google::protobuf::int32 ddzinfo::landlordid() const {
  return landlordid_;
}
inline void ddzinfo::set_landlordid(::google::protobuf::int32 value) {
  set_has_landlordid();
  landlordid_ = value;
}

// repeated .progame.ddzuser situser = 17;
inline int ddzinfo::situser_size() const {
  return situser_.size();
}
inline void ddzinfo::clear_situser() {
  situser_.Clear();
}
inline const ::progame::ddzuser& ddzinfo::situser(int index) const {
  return situser_.Get(index);
}
inline ::progame::ddzuser* ddzinfo::mutable_situser(int index) {
  return situser_.Mutable(index);
}
inline ::progame::ddzuser* ddzinfo::add_situser() {
  return situser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::ddzuser >&
ddzinfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::ddzuser >*
ddzinfo::mutable_situser() {
  return &situser_;
}

// repeated int32 standuser = 18;
inline int ddzinfo::standuser_size() const {
  return standuser_.size();
}
inline void ddzinfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 ddzinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void ddzinfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void ddzinfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzinfo::mutable_standuser() {
  return &standuser_;
}

// optional .progame.lasplayinfo lasInfo = 19;
inline bool ddzinfo::has_lasinfo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ddzinfo::set_has_lasinfo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ddzinfo::clear_has_lasinfo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ddzinfo::clear_lasinfo() {
  if (lasinfo_ != NULL) lasinfo_->::progame::lasplayinfo::Clear();
  clear_has_lasinfo();
}
inline const ::progame::lasplayinfo& ddzinfo::lasinfo() const {
  return lasinfo_ != NULL ? *lasinfo_ : *default_instance_->lasinfo_;
}
inline ::progame::lasplayinfo* ddzinfo::mutable_lasinfo() {
  set_has_lasinfo();
  if (lasinfo_ == NULL) lasinfo_ = new ::progame::lasplayinfo;
  return lasinfo_;
}
inline ::progame::lasplayinfo* ddzinfo::release_lasinfo() {
  clear_has_lasinfo();
  ::progame::lasplayinfo* temp = lasinfo_;
  lasinfo_ = NULL;
  return temp;
}
inline void ddzinfo::set_allocated_lasinfo(::progame::lasplayinfo* lasinfo) {
  delete lasinfo_;
  lasinfo_ = lasinfo;
  if (lasinfo) {
    set_has_lasinfo();
  } else {
    clear_has_lasinfo();
  }
}

// optional int32 usevipnum = 20;
inline bool ddzinfo::has_usevipnum() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ddzinfo::set_has_usevipnum() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ddzinfo::clear_has_usevipnum() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ddzinfo::clear_usevipnum() {
  usevipnum_ = 0;
  clear_has_usevipnum();
}
inline ::google::protobuf::int32 ddzinfo::usevipnum() const {
  return usevipnum_;
}
inline void ddzinfo::set_usevipnum(::google::protobuf::int32 value) {
  set_has_usevipnum();
  usevipnum_ = value;
}

// optional int32 multiple = 21;
inline bool ddzinfo::has_multiple() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ddzinfo::set_has_multiple() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ddzinfo::clear_has_multiple() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ddzinfo::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
inline ::google::protobuf::int32 ddzinfo::multiple() const {
  return multiple_;
}
inline void ddzinfo::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
}

// repeated int32 landlordPoker = 22;
inline int ddzinfo::landlordpoker_size() const {
  return landlordpoker_.size();
}
inline void ddzinfo::clear_landlordpoker() {
  landlordpoker_.Clear();
}
inline ::google::protobuf::int32 ddzinfo::landlordpoker(int index) const {
  return landlordpoker_.Get(index);
}
inline void ddzinfo::set_landlordpoker(int index, ::google::protobuf::int32 value) {
  landlordpoker_.Set(index, value);
}
inline void ddzinfo::add_landlordpoker(::google::protobuf::int32 value) {
  landlordpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzinfo::landlordpoker() const {
  return landlordpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzinfo::mutable_landlordpoker() {
  return &landlordpoker_;
}

// optional int32 wildCard = 23;
inline bool ddzinfo::has_wildcard() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ddzinfo::set_has_wildcard() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ddzinfo::clear_has_wildcard() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ddzinfo::clear_wildcard() {
  wildcard_ = 0;
  clear_has_wildcard();
}
inline ::google::protobuf::int32 ddzinfo::wildcard() const {
  return wildcard_;
}
inline void ddzinfo::set_wildcard(::google::protobuf::int32 value) {
  set_has_wildcard();
  wildcard_ = value;
}

// optional int32 dissolveinfo = 24;
inline bool ddzinfo::has_dissolveinfo() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ddzinfo::set_has_dissolveinfo() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ddzinfo::clear_has_dissolveinfo() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ddzinfo::clear_dissolveinfo() {
  dissolveinfo_ = 0;
  clear_has_dissolveinfo();
}
inline ::google::protobuf::int32 ddzinfo::dissolveinfo() const {
  return dissolveinfo_;
}
inline void ddzinfo::set_dissolveinfo(::google::protobuf::int32 value) {
  set_has_dissolveinfo();
  dissolveinfo_ = value;
}

// optional string straction = 25;
inline bool ddzinfo::has_straction() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ddzinfo::set_has_straction() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ddzinfo::clear_has_straction() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ddzinfo::clear_straction() {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    straction_->clear();
  }
  clear_has_straction();
}
inline const ::std::string& ddzinfo::straction() const {
  return *straction_;
}
inline void ddzinfo::set_straction(const ::std::string& value) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(value);
}
inline void ddzinfo::set_straction(const char* value) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(value);
}
inline void ddzinfo::set_straction(const char* value, size_t size) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzinfo::mutable_straction() {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  return straction_;
}
inline ::std::string* ddzinfo::release_straction() {
  clear_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = straction_;
    straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ddzinfo::set_allocated_straction(::std::string* straction) {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (straction) {
    set_has_straction();
    straction_ = straction;
  } else {
    clear_has_straction();
    straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxplaynum = 26;
inline bool ddzinfo::has_maxplaynum() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ddzinfo::set_has_maxplaynum() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ddzinfo::clear_has_maxplaynum() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ddzinfo::clear_maxplaynum() {
  maxplaynum_ = 0;
  clear_has_maxplaynum();
}
inline ::google::protobuf::int32 ddzinfo::maxplaynum() const {
  return maxplaynum_;
}
inline void ddzinfo::set_maxplaynum(::google::protobuf::int32 value) {
  set_has_maxplaynum();
  maxplaynum_ = value;
}

// optional int32 actionuser = 27;
inline bool ddzinfo::has_actionuser() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ddzinfo::set_has_actionuser() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ddzinfo::clear_has_actionuser() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ddzinfo::clear_actionuser() {
  actionuser_ = 0;
  clear_has_actionuser();
}
inline ::google::protobuf::int32 ddzinfo::actionuser() const {
  return actionuser_;
}
inline void ddzinfo::set_actionuser(::google::protobuf::int32 value) {
  set_has_actionuser();
  actionuser_ = value;
}

// optional int32 frameid = 28;
inline bool ddzinfo::has_frameid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ddzinfo::set_has_frameid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ddzinfo::clear_has_frameid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ddzinfo::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 ddzinfo::frameid() const {
  return frameid_;
}
inline void ddzinfo::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
}

// optional int32 actionuserid = 29;
inline bool ddzinfo::has_actionuserid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ddzinfo::set_has_actionuserid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ddzinfo::clear_has_actionuserid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ddzinfo::clear_actionuserid() {
  actionuserid_ = 0;
  clear_has_actionuserid();
}
inline ::google::protobuf::int32 ddzinfo::actionuserid() const {
  return actionuserid_;
}
inline void ddzinfo::set_actionuserid(::google::protobuf::int32 value) {
  set_has_actionuserid();
  actionuserid_ = value;
}

// optional int32 isnotplay = 30;
inline bool ddzinfo::has_isnotplay() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ddzinfo::set_has_isnotplay() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ddzinfo::clear_has_isnotplay() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ddzinfo::clear_isnotplay() {
  isnotplay_ = 0;
  clear_has_isnotplay();
}
inline ::google::protobuf::int32 ddzinfo::isnotplay() const {
  return isnotplay_;
}
inline void ddzinfo::set_isnotplay(::google::protobuf::int32 value) {
  set_has_isnotplay();
  isnotplay_ = value;
}

// optional int32 qlandlordsum = 31;
inline bool ddzinfo::has_qlandlordsum() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ddzinfo::set_has_qlandlordsum() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ddzinfo::clear_has_qlandlordsum() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ddzinfo::clear_qlandlordsum() {
  qlandlordsum_ = 0;
  clear_has_qlandlordsum();
}
inline ::google::protobuf::int32 ddzinfo::qlandlordsum() const {
  return qlandlordsum_;
}
inline void ddzinfo::set_qlandlordsum(::google::protobuf::int32 value) {
  set_has_qlandlordsum();
  qlandlordsum_ = value;
}

// optional int32 afreshnum = 32;
inline bool ddzinfo::has_afreshnum() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ddzinfo::set_has_afreshnum() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ddzinfo::clear_has_afreshnum() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ddzinfo::clear_afreshnum() {
  afreshnum_ = 0;
  clear_has_afreshnum();
}
inline ::google::protobuf::int32 ddzinfo::afreshnum() const {
  return afreshnum_;
}
inline void ddzinfo::set_afreshnum(::google::protobuf::int32 value) {
  set_has_afreshnum();
  afreshnum_ = value;
}

// -------------------------------------------------------------------

// multipleinfo

// optional int32 mPoker = 1;
inline bool multipleinfo::has_mpoker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void multipleinfo::set_has_mpoker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void multipleinfo::clear_has_mpoker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void multipleinfo::clear_mpoker() {
  mpoker_ = 0;
  clear_has_mpoker();
}
inline ::google::protobuf::int32 multipleinfo::mpoker() const {
  return mpoker_;
}
inline void multipleinfo::set_mpoker(::google::protobuf::int32 value) {
  set_has_mpoker();
  mpoker_ = value;
}

// optional int32 qdz = 2;
inline bool multipleinfo::has_qdz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void multipleinfo::set_has_qdz() {
  _has_bits_[0] |= 0x00000002u;
}
inline void multipleinfo::clear_has_qdz() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void multipleinfo::clear_qdz() {
  qdz_ = 0;
  clear_has_qdz();
}
inline ::google::protobuf::int32 multipleinfo::qdz() const {
  return qdz_;
}
inline void multipleinfo::set_qdz(::google::protobuf::int32 value) {
  set_has_qdz();
  qdz_ = value;
}

// optional int32 dzp = 3;
inline bool multipleinfo::has_dzp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void multipleinfo::set_has_dzp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void multipleinfo::clear_has_dzp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void multipleinfo::clear_dzp() {
  dzp_ = 0;
  clear_has_dzp();
}
inline ::google::protobuf::int32 multipleinfo::dzp() const {
  return dzp_;
}
inline void multipleinfo::set_dzp(::google::protobuf::int32 value) {
  set_has_dzp();
  dzp_ = value;
}

// optional int32 bomb = 4;
inline bool multipleinfo::has_bomb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void multipleinfo::set_has_bomb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void multipleinfo::clear_has_bomb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void multipleinfo::clear_bomb() {
  bomb_ = 0;
  clear_has_bomb();
}
inline ::google::protobuf::int32 multipleinfo::bomb() const {
  return bomb_;
}
inline void multipleinfo::set_bomb(::google::protobuf::int32 value) {
  set_has_bomb();
  bomb_ = value;
}

// optional int32 spring = 5;
inline bool multipleinfo::has_spring() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void multipleinfo::set_has_spring() {
  _has_bits_[0] |= 0x00000010u;
}
inline void multipleinfo::clear_has_spring() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void multipleinfo::clear_spring() {
  spring_ = 0;
  clear_has_spring();
}
inline ::google::protobuf::int32 multipleinfo::spring() const {
  return spring_;
}
inline void multipleinfo::set_spring(::google::protobuf::int32 value) {
  set_has_spring();
  spring_ = value;
}

// optional int32 multiplePublic = 6;
inline bool multipleinfo::has_multiplepublic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void multipleinfo::set_has_multiplepublic() {
  _has_bits_[0] |= 0x00000020u;
}
inline void multipleinfo::clear_has_multiplepublic() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void multipleinfo::clear_multiplepublic() {
  multiplepublic_ = 0;
  clear_has_multiplepublic();
}
inline ::google::protobuf::int32 multipleinfo::multiplepublic() const {
  return multiplepublic_;
}
inline void multipleinfo::set_multiplepublic(::google::protobuf::int32 value) {
  set_has_multiplepublic();
  multiplepublic_ = value;
}

// optional int32 landlordmultiple = 7;
inline bool multipleinfo::has_landlordmultiple() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void multipleinfo::set_has_landlordmultiple() {
  _has_bits_[0] |= 0x00000040u;
}
inline void multipleinfo::clear_has_landlordmultiple() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void multipleinfo::clear_landlordmultiple() {
  landlordmultiple_ = 0;
  clear_has_landlordmultiple();
}
inline ::google::protobuf::int32 multipleinfo::landlordmultiple() const {
  return landlordmultiple_;
}
inline void multipleinfo::set_landlordmultiple(::google::protobuf::int32 value) {
  set_has_landlordmultiple();
  landlordmultiple_ = value;
}

// optional int32 peasantmultiple = 8;
inline bool multipleinfo::has_peasantmultiple() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void multipleinfo::set_has_peasantmultiple() {
  _has_bits_[0] |= 0x00000080u;
}
inline void multipleinfo::clear_has_peasantmultiple() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void multipleinfo::clear_peasantmultiple() {
  peasantmultiple_ = 0;
  clear_has_peasantmultiple();
}
inline ::google::protobuf::int32 multipleinfo::peasantmultiple() const {
  return peasantmultiple_;
}
inline void multipleinfo::set_peasantmultiple(::google::protobuf::int32 value) {
  set_has_peasantmultiple();
  peasantmultiple_ = value;
}

// optional int32 summultiple = 9;
inline bool multipleinfo::has_summultiple() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void multipleinfo::set_has_summultiple() {
  _has_bits_[0] |= 0x00000100u;
}
inline void multipleinfo::clear_has_summultiple() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void multipleinfo::clear_summultiple() {
  summultiple_ = 0;
  clear_has_summultiple();
}
inline ::google::protobuf::int32 multipleinfo::summultiple() const {
  return summultiple_;
}
inline void multipleinfo::set_summultiple(::google::protobuf::int32 value) {
  set_has_summultiple();
  summultiple_ = value;
}

// -------------------------------------------------------------------

// noad

// optional int32 poker_A = 1;
inline bool noad::has_poker_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void noad::set_has_poker_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void noad::clear_has_poker_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void noad::clear_poker_a() {
  poker_a_ = 0;
  clear_has_poker_a();
}
inline ::google::protobuf::int32 noad::poker_a() const {
  return poker_a_;
}
inline void noad::set_poker_a(::google::protobuf::int32 value) {
  set_has_poker_a();
  poker_a_ = value;
}

// optional int32 poker_2 = 2;
inline bool noad::has_poker_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void noad::set_has_poker_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void noad::clear_has_poker_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void noad::clear_poker_2() {
  poker_2_ = 0;
  clear_has_poker_2();
}
inline ::google::protobuf::int32 noad::poker_2() const {
  return poker_2_;
}
inline void noad::set_poker_2(::google::protobuf::int32 value) {
  set_has_poker_2();
  poker_2_ = value;
}

// optional int32 poker_3 = 3;
inline bool noad::has_poker_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void noad::set_has_poker_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void noad::clear_has_poker_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void noad::clear_poker_3() {
  poker_3_ = 0;
  clear_has_poker_3();
}
inline ::google::protobuf::int32 noad::poker_3() const {
  return poker_3_;
}
inline void noad::set_poker_3(::google::protobuf::int32 value) {
  set_has_poker_3();
  poker_3_ = value;
}

// optional int32 poker_4 = 4;
inline bool noad::has_poker_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void noad::set_has_poker_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void noad::clear_has_poker_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void noad::clear_poker_4() {
  poker_4_ = 0;
  clear_has_poker_4();
}
inline ::google::protobuf::int32 noad::poker_4() const {
  return poker_4_;
}
inline void noad::set_poker_4(::google::protobuf::int32 value) {
  set_has_poker_4();
  poker_4_ = value;
}

// optional int32 poker_5 = 5;
inline bool noad::has_poker_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void noad::set_has_poker_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void noad::clear_has_poker_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void noad::clear_poker_5() {
  poker_5_ = 0;
  clear_has_poker_5();
}
inline ::google::protobuf::int32 noad::poker_5() const {
  return poker_5_;
}
inline void noad::set_poker_5(::google::protobuf::int32 value) {
  set_has_poker_5();
  poker_5_ = value;
}

// optional int32 poker_6 = 6;
inline bool noad::has_poker_6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void noad::set_has_poker_6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void noad::clear_has_poker_6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void noad::clear_poker_6() {
  poker_6_ = 0;
  clear_has_poker_6();
}
inline ::google::protobuf::int32 noad::poker_6() const {
  return poker_6_;
}
inline void noad::set_poker_6(::google::protobuf::int32 value) {
  set_has_poker_6();
  poker_6_ = value;
}

// optional int32 poker_7 = 7;
inline bool noad::has_poker_7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void noad::set_has_poker_7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void noad::clear_has_poker_7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void noad::clear_poker_7() {
  poker_7_ = 0;
  clear_has_poker_7();
}
inline ::google::protobuf::int32 noad::poker_7() const {
  return poker_7_;
}
inline void noad::set_poker_7(::google::protobuf::int32 value) {
  set_has_poker_7();
  poker_7_ = value;
}

// optional int32 poker_8 = 8;
inline bool noad::has_poker_8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void noad::set_has_poker_8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void noad::clear_has_poker_8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void noad::clear_poker_8() {
  poker_8_ = 0;
  clear_has_poker_8();
}
inline ::google::protobuf::int32 noad::poker_8() const {
  return poker_8_;
}
inline void noad::set_poker_8(::google::protobuf::int32 value) {
  set_has_poker_8();
  poker_8_ = value;
}

// optional int32 poker_9 = 9;
inline bool noad::has_poker_9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void noad::set_has_poker_9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void noad::clear_has_poker_9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void noad::clear_poker_9() {
  poker_9_ = 0;
  clear_has_poker_9();
}
inline ::google::protobuf::int32 noad::poker_9() const {
  return poker_9_;
}
inline void noad::set_poker_9(::google::protobuf::int32 value) {
  set_has_poker_9();
  poker_9_ = value;
}

// optional int32 poker_10 = 10;
inline bool noad::has_poker_10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void noad::set_has_poker_10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void noad::clear_has_poker_10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void noad::clear_poker_10() {
  poker_10_ = 0;
  clear_has_poker_10();
}
inline ::google::protobuf::int32 noad::poker_10() const {
  return poker_10_;
}
inline void noad::set_poker_10(::google::protobuf::int32 value) {
  set_has_poker_10();
  poker_10_ = value;
}

// optional int32 poker_J = 11;
inline bool noad::has_poker_j() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void noad::set_has_poker_j() {
  _has_bits_[0] |= 0x00000400u;
}
inline void noad::clear_has_poker_j() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void noad::clear_poker_j() {
  poker_j_ = 0;
  clear_has_poker_j();
}
inline ::google::protobuf::int32 noad::poker_j() const {
  return poker_j_;
}
inline void noad::set_poker_j(::google::protobuf::int32 value) {
  set_has_poker_j();
  poker_j_ = value;
}

// optional int32 poker_Q = 12;
inline bool noad::has_poker_q() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void noad::set_has_poker_q() {
  _has_bits_[0] |= 0x00000800u;
}
inline void noad::clear_has_poker_q() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void noad::clear_poker_q() {
  poker_q_ = 0;
  clear_has_poker_q();
}
inline ::google::protobuf::int32 noad::poker_q() const {
  return poker_q_;
}
inline void noad::set_poker_q(::google::protobuf::int32 value) {
  set_has_poker_q();
  poker_q_ = value;
}

// optional int32 poker_K = 13;
inline bool noad::has_poker_k() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void noad::set_has_poker_k() {
  _has_bits_[0] |= 0x00001000u;
}
inline void noad::clear_has_poker_k() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void noad::clear_poker_k() {
  poker_k_ = 0;
  clear_has_poker_k();
}
inline ::google::protobuf::int32 noad::poker_k() const {
  return poker_k_;
}
inline void noad::set_poker_k(::google::protobuf::int32 value) {
  set_has_poker_k();
  poker_k_ = value;
}

// optional int32 poker_Kong = 14;
inline bool noad::has_poker_kong() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void noad::set_has_poker_kong() {
  _has_bits_[0] |= 0x00002000u;
}
inline void noad::clear_has_poker_kong() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void noad::clear_poker_kong() {
  poker_kong_ = 0;
  clear_has_poker_kong();
}
inline ::google::protobuf::int32 noad::poker_kong() const {
  return poker_kong_;
}
inline void noad::set_poker_kong(::google::protobuf::int32 value) {
  set_has_poker_kong();
  poker_kong_ = value;
}

// -------------------------------------------------------------------

// ddzhistoryitem

// optional int32 tableplayid = 1;
inline bool ddzhistoryitem::has_tableplayid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ddzhistoryitem::set_has_tableplayid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ddzhistoryitem::clear_has_tableplayid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ddzhistoryitem::clear_tableplayid() {
  tableplayid_ = 0;
  clear_has_tableplayid();
}
inline ::google::protobuf::int32 ddzhistoryitem::tableplayid() const {
  return tableplayid_;
}
inline void ddzhistoryitem::set_tableplayid(::google::protobuf::int32 value) {
  set_has_tableplayid();
  tableplayid_ = value;
}

// optional int32 tableid = 2;
inline bool ddzhistoryitem::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ddzhistoryitem::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ddzhistoryitem::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ddzhistoryitem::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ddzhistoryitem::tableid() const {
  return tableid_;
}
inline void ddzhistoryitem::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 playtime = 3;
inline bool ddzhistoryitem::has_playtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ddzhistoryitem::set_has_playtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ddzhistoryitem::clear_has_playtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ddzhistoryitem::clear_playtime() {
  playtime_ = 0;
  clear_has_playtime();
}
inline ::google::protobuf::int32 ddzhistoryitem::playtime() const {
  return playtime_;
}
inline void ddzhistoryitem::set_playtime(::google::protobuf::int32 value) {
  set_has_playtime();
  playtime_ = value;
}

// optional int32 playstate = 4;
inline bool ddzhistoryitem::has_playstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ddzhistoryitem::set_has_playstate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ddzhistoryitem::clear_has_playstate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ddzhistoryitem::clear_playstate() {
  playstate_ = 0;
  clear_has_playstate();
}
inline ::google::protobuf::int32 ddzhistoryitem::playstate() const {
  return playstate_;
}
inline void ddzhistoryitem::set_playstate(::google::protobuf::int32 value) {
  set_has_playstate();
  playstate_ = value;
}

// repeated int32 useridlist = 5;
inline int ddzhistoryitem::useridlist_size() const {
  return useridlist_.size();
}
inline void ddzhistoryitem::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 ddzhistoryitem::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void ddzhistoryitem::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void ddzhistoryitem::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzhistoryitem::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzhistoryitem::mutable_useridlist() {
  return &useridlist_;
}

// repeated string nicklist = 6;
inline int ddzhistoryitem::nicklist_size() const {
  return nicklist_.size();
}
inline void ddzhistoryitem::clear_nicklist() {
  nicklist_.Clear();
}
inline const ::std::string& ddzhistoryitem::nicklist(int index) const {
  return nicklist_.Get(index);
}
inline ::std::string* ddzhistoryitem::mutable_nicklist(int index) {
  return nicklist_.Mutable(index);
}
inline void ddzhistoryitem::set_nicklist(int index, const ::std::string& value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ddzhistoryitem::set_nicklist(int index, const char* value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ddzhistoryitem::set_nicklist(int index, const char* value, size_t size) {
  nicklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzhistoryitem::add_nicklist() {
  return nicklist_.Add();
}
inline void ddzhistoryitem::add_nicklist(const ::std::string& value) {
  nicklist_.Add()->assign(value);
}
inline void ddzhistoryitem::add_nicklist(const char* value) {
  nicklist_.Add()->assign(value);
}
inline void ddzhistoryitem::add_nicklist(const char* value, size_t size) {
  nicklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ddzhistoryitem::nicklist() const {
  return nicklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ddzhistoryitem::mutable_nicklist() {
  return &nicklist_;
}

// repeated int32 winlist = 7;
inline int ddzhistoryitem::winlist_size() const {
  return winlist_.size();
}
inline void ddzhistoryitem::clear_winlist() {
  winlist_.Clear();
}
inline ::google::protobuf::int32 ddzhistoryitem::winlist(int index) const {
  return winlist_.Get(index);
}
inline void ddzhistoryitem::set_winlist(int index, ::google::protobuf::int32 value) {
  winlist_.Set(index, value);
}
inline void ddzhistoryitem::add_winlist(::google::protobuf::int32 value) {
  winlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzhistoryitem::winlist() const {
  return winlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzhistoryitem::mutable_winlist() {
  return &winlist_;
}

// optional string quitdes = 8;
inline bool ddzhistoryitem::has_quitdes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ddzhistoryitem::set_has_quitdes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ddzhistoryitem::clear_has_quitdes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ddzhistoryitem::clear_quitdes() {
  if (quitdes_ != &::google::protobuf::internal::kEmptyString) {
    quitdes_->clear();
  }
  clear_has_quitdes();
}
inline const ::std::string& ddzhistoryitem::quitdes() const {
  return *quitdes_;
}
inline void ddzhistoryitem::set_quitdes(const ::std::string& value) {
  set_has_quitdes();
  if (quitdes_ == &::google::protobuf::internal::kEmptyString) {
    quitdes_ = new ::std::string;
  }
  quitdes_->assign(value);
}
inline void ddzhistoryitem::set_quitdes(const char* value) {
  set_has_quitdes();
  if (quitdes_ == &::google::protobuf::internal::kEmptyString) {
    quitdes_ = new ::std::string;
  }
  quitdes_->assign(value);
}
inline void ddzhistoryitem::set_quitdes(const char* value, size_t size) {
  set_has_quitdes();
  if (quitdes_ == &::google::protobuf::internal::kEmptyString) {
    quitdes_ = new ::std::string;
  }
  quitdes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzhistoryitem::mutable_quitdes() {
  set_has_quitdes();
  if (quitdes_ == &::google::protobuf::internal::kEmptyString) {
    quitdes_ = new ::std::string;
  }
  return quitdes_;
}
inline ::std::string* ddzhistoryitem::release_quitdes() {
  clear_has_quitdes();
  if (quitdes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quitdes_;
    quitdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ddzhistoryitem::set_allocated_quitdes(::std::string* quitdes) {
  if (quitdes_ != &::google::protobuf::internal::kEmptyString) {
    delete quitdes_;
  }
  if (quitdes) {
    set_has_quitdes();
    quitdes_ = quitdes;
  } else {
    clear_has_quitdes();
    quitdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string userdes = 9;
inline int ddzhistoryitem::userdes_size() const {
  return userdes_.size();
}
inline void ddzhistoryitem::clear_userdes() {
  userdes_.Clear();
}
inline const ::std::string& ddzhistoryitem::userdes(int index) const {
  return userdes_.Get(index);
}
inline ::std::string* ddzhistoryitem::mutable_userdes(int index) {
  return userdes_.Mutable(index);
}
inline void ddzhistoryitem::set_userdes(int index, const ::std::string& value) {
  userdes_.Mutable(index)->assign(value);
}
inline void ddzhistoryitem::set_userdes(int index, const char* value) {
  userdes_.Mutable(index)->assign(value);
}
inline void ddzhistoryitem::set_userdes(int index, const char* value, size_t size) {
  userdes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzhistoryitem::add_userdes() {
  return userdes_.Add();
}
inline void ddzhistoryitem::add_userdes(const ::std::string& value) {
  userdes_.Add()->assign(value);
}
inline void ddzhistoryitem::add_userdes(const char* value) {
  userdes_.Add()->assign(value);
}
inline void ddzhistoryitem::add_userdes(const char* value, size_t size) {
  userdes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ddzhistoryitem::userdes() const {
  return userdes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ddzhistoryitem::mutable_userdes() {
  return &userdes_;
}

// -------------------------------------------------------------------

// ddzhistory

// optional int32 tableid = 1;
inline bool ddzhistory::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ddzhistory::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ddzhistory::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ddzhistory::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ddzhistory::tableid() const {
  return tableid_;
}
inline void ddzhistory::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tablemark = 2;
inline bool ddzhistory::has_tablemark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ddzhistory::set_has_tablemark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ddzhistory::clear_has_tablemark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ddzhistory::clear_tablemark() {
  tablemark_ = 0;
  clear_has_tablemark();
}
inline ::google::protobuf::int32 ddzhistory::tablemark() const {
  return tablemark_;
}
inline void ddzhistory::set_tablemark(::google::protobuf::int32 value) {
  set_has_tablemark();
  tablemark_ = value;
}

// optional int32 gametime = 3;
inline bool ddzhistory::has_gametime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ddzhistory::set_has_gametime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ddzhistory::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ddzhistory::clear_gametime() {
  gametime_ = 0;
  clear_has_gametime();
}
inline ::google::protobuf::int32 ddzhistory::gametime() const {
  return gametime_;
}
inline void ddzhistory::set_gametime(::google::protobuf::int32 value) {
  set_has_gametime();
  gametime_ = value;
}

// optional int32 playnum = 4;
inline bool ddzhistory::has_playnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ddzhistory::set_has_playnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ddzhistory::clear_has_playnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ddzhistory::clear_playnum() {
  playnum_ = 0;
  clear_has_playnum();
}
inline ::google::protobuf::int32 ddzhistory::playnum() const {
  return playnum_;
}
inline void ddzhistory::set_playnum(::google::protobuf::int32 value) {
  set_has_playnum();
  playnum_ = value;
}

// repeated int32 useridlist = 5;
inline int ddzhistory::useridlist_size() const {
  return useridlist_.size();
}
inline void ddzhistory::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 ddzhistory::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void ddzhistory::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void ddzhistory::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzhistory::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzhistory::mutable_useridlist() {
  return &useridlist_;
}

// repeated string nicklist = 6;
inline int ddzhistory::nicklist_size() const {
  return nicklist_.size();
}
inline void ddzhistory::clear_nicklist() {
  nicklist_.Clear();
}
inline const ::std::string& ddzhistory::nicklist(int index) const {
  return nicklist_.Get(index);
}
inline ::std::string* ddzhistory::mutable_nicklist(int index) {
  return nicklist_.Mutable(index);
}
inline void ddzhistory::set_nicklist(int index, const ::std::string& value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ddzhistory::set_nicklist(int index, const char* value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ddzhistory::set_nicklist(int index, const char* value, size_t size) {
  nicklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzhistory::add_nicklist() {
  return nicklist_.Add();
}
inline void ddzhistory::add_nicklist(const ::std::string& value) {
  nicklist_.Add()->assign(value);
}
inline void ddzhistory::add_nicklist(const char* value) {
  nicklist_.Add()->assign(value);
}
inline void ddzhistory::add_nicklist(const char* value, size_t size) {
  nicklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ddzhistory::nicklist() const {
  return nicklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ddzhistory::mutable_nicklist() {
  return &nicklist_;
}

// repeated int32 winlist = 7;
inline int ddzhistory::winlist_size() const {
  return winlist_.size();
}
inline void ddzhistory::clear_winlist() {
  winlist_.Clear();
}
inline ::google::protobuf::int32 ddzhistory::winlist(int index) const {
  return winlist_.Get(index);
}
inline void ddzhistory::set_winlist(int index, ::google::protobuf::int32 value) {
  winlist_.Set(index, value);
}
inline void ddzhistory::add_winlist(::google::protobuf::int32 value) {
  winlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzhistory::winlist() const {
  return winlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzhistory::mutable_winlist() {
  return &winlist_;
}

// repeated .progame.ddzhistoryitem hitemlist = 8;
inline int ddzhistory::hitemlist_size() const {
  return hitemlist_.size();
}
inline void ddzhistory::clear_hitemlist() {
  hitemlist_.Clear();
}
inline const ::progame::ddzhistoryitem& ddzhistory::hitemlist(int index) const {
  return hitemlist_.Get(index);
}
inline ::progame::ddzhistoryitem* ddzhistory::mutable_hitemlist(int index) {
  return hitemlist_.Mutable(index);
}
inline ::progame::ddzhistoryitem* ddzhistory::add_hitemlist() {
  return hitemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::ddzhistoryitem >&
ddzhistory::hitemlist() const {
  return hitemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::ddzhistoryitem >*
ddzhistory::mutable_hitemlist() {
  return &hitemlist_;
}

// optional int32 ddztype = 9;
inline bool ddzhistory::has_ddztype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ddzhistory::set_has_ddztype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ddzhistory::clear_has_ddztype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ddzhistory::clear_ddztype() {
  ddztype_ = 0;
  clear_has_ddztype();
}
inline ::google::protobuf::int32 ddzhistory::ddztype() const {
  return ddztype_;
}
inline void ddzhistory::set_ddztype(::google::protobuf::int32 value) {
  set_has_ddztype();
  ddztype_ = value;
}

// -------------------------------------------------------------------

// ddzhistorypair

// optional int32 packetcode = 1;
inline bool ddzhistorypair::has_packetcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ddzhistorypair::set_has_packetcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ddzhistorypair::clear_has_packetcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ddzhistorypair::clear_packetcode() {
  packetcode_ = 0;
  clear_has_packetcode();
}
inline ::google::protobuf::int32 ddzhistorypair::packetcode() const {
  return packetcode_;
}
inline void ddzhistorypair::set_packetcode(::google::protobuf::int32 value) {
  set_has_packetcode();
  packetcode_ = value;
}

// optional string pkginfo = 2;
inline bool ddzhistorypair::has_pkginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ddzhistorypair::set_has_pkginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ddzhistorypair::clear_has_pkginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ddzhistorypair::clear_pkginfo() {
  if (pkginfo_ != &::google::protobuf::internal::kEmptyString) {
    pkginfo_->clear();
  }
  clear_has_pkginfo();
}
inline const ::std::string& ddzhistorypair::pkginfo() const {
  return *pkginfo_;
}
inline void ddzhistorypair::set_pkginfo(const ::std::string& value) {
  set_has_pkginfo();
  if (pkginfo_ == &::google::protobuf::internal::kEmptyString) {
    pkginfo_ = new ::std::string;
  }
  pkginfo_->assign(value);
}
inline void ddzhistorypair::set_pkginfo(const char* value) {
  set_has_pkginfo();
  if (pkginfo_ == &::google::protobuf::internal::kEmptyString) {
    pkginfo_ = new ::std::string;
  }
  pkginfo_->assign(value);
}
inline void ddzhistorypair::set_pkginfo(const char* value, size_t size) {
  set_has_pkginfo();
  if (pkginfo_ == &::google::protobuf::internal::kEmptyString) {
    pkginfo_ = new ::std::string;
  }
  pkginfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ddzhistorypair::mutable_pkginfo() {
  set_has_pkginfo();
  if (pkginfo_ == &::google::protobuf::internal::kEmptyString) {
    pkginfo_ = new ::std::string;
  }
  return pkginfo_;
}
inline ::std::string* ddzhistorypair::release_pkginfo() {
  clear_has_pkginfo();
  if (pkginfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pkginfo_;
    pkginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ddzhistorypair::set_allocated_pkginfo(::std::string* pkginfo) {
  if (pkginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete pkginfo_;
  }
  if (pkginfo) {
    set_has_pkginfo();
    pkginfo_ = pkginfo;
  } else {
    clear_has_pkginfo();
    pkginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ddztaganalyseresult

// optional int32 onecount = 1;
inline bool ddztaganalyseresult::has_onecount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ddztaganalyseresult::set_has_onecount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ddztaganalyseresult::clear_has_onecount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ddztaganalyseresult::clear_onecount() {
  onecount_ = 0;
  clear_has_onecount();
}
inline ::google::protobuf::int32 ddztaganalyseresult::onecount() const {
  return onecount_;
}
inline void ddztaganalyseresult::set_onecount(::google::protobuf::int32 value) {
  set_has_onecount();
  onecount_ = value;
}

// optional int32 twocount = 2;
inline bool ddztaganalyseresult::has_twocount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ddztaganalyseresult::set_has_twocount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ddztaganalyseresult::clear_has_twocount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ddztaganalyseresult::clear_twocount() {
  twocount_ = 0;
  clear_has_twocount();
}
inline ::google::protobuf::int32 ddztaganalyseresult::twocount() const {
  return twocount_;
}
inline void ddztaganalyseresult::set_twocount(::google::protobuf::int32 value) {
  set_has_twocount();
  twocount_ = value;
}

// optional int32 threecount = 3;
inline bool ddztaganalyseresult::has_threecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ddztaganalyseresult::set_has_threecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ddztaganalyseresult::clear_has_threecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ddztaganalyseresult::clear_threecount() {
  threecount_ = 0;
  clear_has_threecount();
}
inline ::google::protobuf::int32 ddztaganalyseresult::threecount() const {
  return threecount_;
}
inline void ddztaganalyseresult::set_threecount(::google::protobuf::int32 value) {
  set_has_threecount();
  threecount_ = value;
}

// optional int32 fourcount = 4;
inline bool ddztaganalyseresult::has_fourcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ddztaganalyseresult::set_has_fourcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ddztaganalyseresult::clear_has_fourcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ddztaganalyseresult::clear_fourcount() {
  fourcount_ = 0;
  clear_has_fourcount();
}
inline ::google::protobuf::int32 ddztaganalyseresult::fourcount() const {
  return fourcount_;
}
inline void ddztaganalyseresult::set_fourcount(::google::protobuf::int32 value) {
  set_has_fourcount();
  fourcount_ = value;
}

// repeated int32 onelist = 5;
inline int ddztaganalyseresult::onelist_size() const {
  return onelist_.size();
}
inline void ddztaganalyseresult::clear_onelist() {
  onelist_.Clear();
}
inline ::google::protobuf::int32 ddztaganalyseresult::onelist(int index) const {
  return onelist_.Get(index);
}
inline void ddztaganalyseresult::set_onelist(int index, ::google::protobuf::int32 value) {
  onelist_.Set(index, value);
}
inline void ddztaganalyseresult::add_onelist(::google::protobuf::int32 value) {
  onelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddztaganalyseresult::onelist() const {
  return onelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddztaganalyseresult::mutable_onelist() {
  return &onelist_;
}

// repeated int32 twolist = 6;
inline int ddztaganalyseresult::twolist_size() const {
  return twolist_.size();
}
inline void ddztaganalyseresult::clear_twolist() {
  twolist_.Clear();
}
inline ::google::protobuf::int32 ddztaganalyseresult::twolist(int index) const {
  return twolist_.Get(index);
}
inline void ddztaganalyseresult::set_twolist(int index, ::google::protobuf::int32 value) {
  twolist_.Set(index, value);
}
inline void ddztaganalyseresult::add_twolist(::google::protobuf::int32 value) {
  twolist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddztaganalyseresult::twolist() const {
  return twolist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddztaganalyseresult::mutable_twolist() {
  return &twolist_;
}

// repeated int32 threelist = 7;
inline int ddztaganalyseresult::threelist_size() const {
  return threelist_.size();
}
inline void ddztaganalyseresult::clear_threelist() {
  threelist_.Clear();
}
inline ::google::protobuf::int32 ddztaganalyseresult::threelist(int index) const {
  return threelist_.Get(index);
}
inline void ddztaganalyseresult::set_threelist(int index, ::google::protobuf::int32 value) {
  threelist_.Set(index, value);
}
inline void ddztaganalyseresult::add_threelist(::google::protobuf::int32 value) {
  threelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddztaganalyseresult::threelist() const {
  return threelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddztaganalyseresult::mutable_threelist() {
  return &threelist_;
}

// repeated int32 fourlist = 8;
inline int ddztaganalyseresult::fourlist_size() const {
  return fourlist_.size();
}
inline void ddztaganalyseresult::clear_fourlist() {
  fourlist_.Clear();
}
inline ::google::protobuf::int32 ddztaganalyseresult::fourlist(int index) const {
  return fourlist_.Get(index);
}
inline void ddztaganalyseresult::set_fourlist(int index, ::google::protobuf::int32 value) {
  fourlist_.Set(index, value);
}
inline void ddztaganalyseresult::add_fourlist(::google::protobuf::int32 value) {
  fourlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddztaganalyseresult::fourlist() const {
  return fourlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddztaganalyseresult::mutable_fourlist() {
  return &fourlist_;
}

// repeated int32 onecarddata = 9;
inline int ddztaganalyseresult::onecarddata_size() const {
  return onecarddata_.size();
}
inline void ddztaganalyseresult::clear_onecarddata() {
  onecarddata_.Clear();
}
inline ::google::protobuf::int32 ddztaganalyseresult::onecarddata(int index) const {
  return onecarddata_.Get(index);
}
inline void ddztaganalyseresult::set_onecarddata(int index, ::google::protobuf::int32 value) {
  onecarddata_.Set(index, value);
}
inline void ddztaganalyseresult::add_onecarddata(::google::protobuf::int32 value) {
  onecarddata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddztaganalyseresult::onecarddata() const {
  return onecarddata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddztaganalyseresult::mutable_onecarddata() {
  return &onecarddata_;
}

// repeated int32 twocarddata = 10;
inline int ddztaganalyseresult::twocarddata_size() const {
  return twocarddata_.size();
}
inline void ddztaganalyseresult::clear_twocarddata() {
  twocarddata_.Clear();
}
inline ::google::protobuf::int32 ddztaganalyseresult::twocarddata(int index) const {
  return twocarddata_.Get(index);
}
inline void ddztaganalyseresult::set_twocarddata(int index, ::google::protobuf::int32 value) {
  twocarddata_.Set(index, value);
}
inline void ddztaganalyseresult::add_twocarddata(::google::protobuf::int32 value) {
  twocarddata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddztaganalyseresult::twocarddata() const {
  return twocarddata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddztaganalyseresult::mutable_twocarddata() {
  return &twocarddata_;
}

// repeated int32 threecarddata = 11;
inline int ddztaganalyseresult::threecarddata_size() const {
  return threecarddata_.size();
}
inline void ddztaganalyseresult::clear_threecarddata() {
  threecarddata_.Clear();
}
inline ::google::protobuf::int32 ddztaganalyseresult::threecarddata(int index) const {
  return threecarddata_.Get(index);
}
inline void ddztaganalyseresult::set_threecarddata(int index, ::google::protobuf::int32 value) {
  threecarddata_.Set(index, value);
}
inline void ddztaganalyseresult::add_threecarddata(::google::protobuf::int32 value) {
  threecarddata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddztaganalyseresult::threecarddata() const {
  return threecarddata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddztaganalyseresult::mutable_threecarddata() {
  return &threecarddata_;
}

// repeated int32 fourcarddata = 12;
inline int ddztaganalyseresult::fourcarddata_size() const {
  return fourcarddata_.size();
}
inline void ddztaganalyseresult::clear_fourcarddata() {
  fourcarddata_.Clear();
}
inline ::google::protobuf::int32 ddztaganalyseresult::fourcarddata(int index) const {
  return fourcarddata_.Get(index);
}
inline void ddztaganalyseresult::set_fourcarddata(int index, ::google::protobuf::int32 value) {
  fourcarddata_.Set(index, value);
}
inline void ddztaganalyseresult::add_fourcarddata(::google::protobuf::int32 value) {
  fourcarddata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddztaganalyseresult::fourcarddata() const {
  return fourcarddata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddztaganalyseresult::mutable_fourcarddata() {
  return &fourcarddata_;
}

// -------------------------------------------------------------------

// ddzpokerlist

// repeated int32 card = 1;
inline int ddzpokerlist::card_size() const {
  return card_.size();
}
inline void ddzpokerlist::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 ddzpokerlist::card(int index) const {
  return card_.Get(index);
}
inline void ddzpokerlist::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
}
inline void ddzpokerlist::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ddzpokerlist::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ddzpokerlist::mutable_card() {
  return &card_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fddz_2eproto__INCLUDED
