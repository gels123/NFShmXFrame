// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_forest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_forest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* forestinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  forestinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* forestpour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  forestpour_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fforest_2eproto() {
  protobuf_AddDesc_st_5fforest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_forest.proto");
  GOOGLE_CHECK(file != NULL);
  forestinfo_descriptor_ = file->message_type(0);
  static const int forestinfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, minjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, maxjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, bankerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, colourlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, wincolourindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, bankerjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, bankername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, bankerfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, bankerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, beilist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, dropbanker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, robotnum_),
  };
  forestinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      forestinfo_descriptor_,
      forestinfo::default_instance_,
      forestinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(forestinfo));
  forestpour_descriptor_ = file->message_type(1);
  static const int forestpour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestpour, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestpour, pourid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestpour, pourjetton_),
  };
  forestpour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      forestpour_descriptor_,
      forestpour::default_instance_,
      forestpour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestpour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(forestpour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(forestpour));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fforest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    forestinfo_descriptor_, &forestinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    forestpour_descriptor_, &forestpour::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fforest_2eproto() {
  delete forestinfo::default_instance_;
  delete forestinfo_reflection_;
  delete forestpour::default_instance_;
  delete forestpour_reflection_;
}

void protobuf_AddDesc_st_5fforest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017st_forest.proto\022\007progame\032\016st_human.pro"
    "to\"\232\003\n\nforestinfo\022\017\n\007tableid\030\001 \001(\005\022\021\n\tta"
    "bletype\030\002 \001(\005\022\021\n\tminjetton\030\003 \001(\005\022\021\n\tmaxj"
    "etton\030\004 \001(\005\022\r\n\005state\030\005 \001(\005\022\020\n\010timemark\030\006"
    " \001(\005\022\022\n\nuseridlist\030\007 \003(\005\022\022\n\nbankerlist\030\010"
    " \003(\005\022\022\n\ncolourlist\030\t \003(\005\022\r\n\005winid\030\n \001(\005\022"
    "\026\n\016wincolourindex\030\013 \001(\005\022\017\n\007history\030\014 \003(\005"
    "\022\020\n\010bankerid\030\r \001(\005\022\024\n\014bankerjetton\030\016 \001(\t"
    "\022\022\n\nbankername\030\017 \001(\t\022\024\n\014bankerfaceid\030\020 \001"
    "(\t\022\023\n\013bankerlimit\030\022 \001(\005\022\017\n\007beilist\030\023 \003(\005"
    "\022\022\n\ndropbanker\030\024 \001(\005\022\017\n\007usernum\030\025 \001(\005\022\020\n"
    "\010robotnum\030\026 \001(\005\"@\n\nforestpour\022\016\n\006userid\030"
    "\001 \001(\005\022\016\n\006pourid\030\002 \001(\005\022\022\n\npourjetton\030\003 \001("
    "\005", 521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_forest.proto", &protobuf_RegisterTypes);
  forestinfo::default_instance_ = new forestinfo();
  forestpour::default_instance_ = new forestpour();
  forestinfo::default_instance_->InitAsDefaultInstance();
  forestpour::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fforest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fforest_2eproto {
  StaticDescriptorInitializer_st_5fforest_2eproto() {
    protobuf_AddDesc_st_5fforest_2eproto();
  }
} static_descriptor_initializer_st_5fforest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int forestinfo::kTableidFieldNumber;
const int forestinfo::kTabletypeFieldNumber;
const int forestinfo::kMinjettonFieldNumber;
const int forestinfo::kMaxjettonFieldNumber;
const int forestinfo::kStateFieldNumber;
const int forestinfo::kTimemarkFieldNumber;
const int forestinfo::kUseridlistFieldNumber;
const int forestinfo::kBankerlistFieldNumber;
const int forestinfo::kColourlistFieldNumber;
const int forestinfo::kWinidFieldNumber;
const int forestinfo::kWincolourindexFieldNumber;
const int forestinfo::kHistoryFieldNumber;
const int forestinfo::kBankeridFieldNumber;
const int forestinfo::kBankerjettonFieldNumber;
const int forestinfo::kBankernameFieldNumber;
const int forestinfo::kBankerfaceidFieldNumber;
const int forestinfo::kBankerlimitFieldNumber;
const int forestinfo::kBeilistFieldNumber;
const int forestinfo::kDropbankerFieldNumber;
const int forestinfo::kUsernumFieldNumber;
const int forestinfo::kRobotnumFieldNumber;
#endif  // !_MSC_VER

forestinfo::forestinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void forestinfo::InitAsDefaultInstance() {
}

forestinfo::forestinfo(const forestinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void forestinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  minjetton_ = 0;
  maxjetton_ = 0;
  state_ = 0;
  timemark_ = 0;
  winid_ = 0;
  wincolourindex_ = 0;
  bankerid_ = 0;
  bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankerlimit_ = 0;
  dropbanker_ = 0;
  usernum_ = 0;
  robotnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

forestinfo::~forestinfo() {
  SharedDtor();
}

void forestinfo::SharedDtor() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerfaceid_;
  }
  if (this != default_instance_) {
  }
}

void forestinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* forestinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return forestinfo_descriptor_;
}

const forestinfo& forestinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fforest_2eproto();
  return *default_instance_;
}

forestinfo* forestinfo::default_instance_ = NULL;

forestinfo* forestinfo::New() const {
  return new forestinfo;
}

void forestinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tabletype_ = 0;
    minjetton_ = 0;
    maxjetton_ = 0;
    state_ = 0;
    timemark_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    winid_ = 0;
    wincolourindex_ = 0;
    bankerid_ = 0;
    if (has_bankerjetton()) {
      if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
        bankerjetton_->clear();
      }
    }
    if (has_bankername()) {
      if (bankername_ != &::google::protobuf::internal::kEmptyString) {
        bankername_->clear();
      }
    }
    if (has_bankerfaceid()) {
      if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
        bankerfaceid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bankerlimit_ = 0;
    dropbanker_ = 0;
    usernum_ = 0;
    robotnum_ = 0;
  }
  useridlist_.Clear();
  bankerlist_.Clear();
  colourlist_.Clear();
  history_.Clear();
  beilist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool forestinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minjetton;
        break;
      }

      // optional int32 minjetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minjetton_)));
          set_has_minjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxjetton;
        break;
      }

      // optional int32 maxjetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxjetton_)));
          set_has_maxjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_useridlist;
        if (input->ExpectTag(64)) goto parse_bankerlist;
        break;
      }

      // repeated int32 bankerlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_bankerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bankerlist;
        if (input->ExpectTag(72)) goto parse_colourlist;
        break;
      }

      // repeated int32 colourlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colourlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_colourlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colourlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_colourlist;
        if (input->ExpectTag(80)) goto parse_winid;
        break;
      }

      // optional int32 winid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wincolourindex;
        break;
      }

      // optional int32 wincolourindex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincolourindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincolourindex_)));
          set_has_wincolourindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_history;
        break;
      }

      // repeated int32 history = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_history())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_history;
        if (input->ExpectTag(104)) goto parse_bankerid;
        break;
      }

      // optional int32 bankerid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bankerjetton;
        break;
      }

      // optional string bankerjetton = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerjetton().data(), this->bankerjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_bankername;
        break;
      }

      // optional string bankername = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankername().data(), this->bankername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_bankerfaceid;
        break;
      }

      // optional string bankerfaceid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerfaceid().data(), this->bankerfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bankerlimit;
        break;
      }

      // optional int32 bankerlimit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerlimit_)));
          set_has_bankerlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_beilist;
        break;
      }

      // repeated int32 beilist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beilist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_beilist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_beilist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_beilist;
        if (input->ExpectTag(160)) goto parse_dropbanker;
        break;
      }

      // optional int32 dropbanker = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropbanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropbanker_)));
          set_has_dropbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_robotnum;
        break;
      }

      // optional int32 robotnum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotnum_)));
          set_has_robotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void forestinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 minjetton = 3;
  if (has_minjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minjetton(), output);
  }

  // optional int32 maxjetton = 4;
  if (has_maxjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxjetton(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // optional int32 timemark = 6;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timemark(), output);
  }

  // repeated int32 useridlist = 7;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->useridlist(i), output);
  }

  // repeated int32 bankerlist = 8;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->bankerlist(i), output);
  }

  // repeated int32 colourlist = 9;
  for (int i = 0; i < this->colourlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->colourlist(i), output);
  }

  // optional int32 winid = 10;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->winid(), output);
  }

  // optional int32 wincolourindex = 11;
  if (has_wincolourindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wincolourindex(), output);
  }

  // repeated int32 history = 12;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->history(i), output);
  }

  // optional int32 bankerid = 13;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bankerid(), output);
  }

  // optional string bankerjetton = 14;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->bankerjetton(), output);
  }

  // optional string bankername = 15;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->bankername(), output);
  }

  // optional string bankerfaceid = 16;
  if (has_bankerfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerfaceid().data(), this->bankerfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->bankerfaceid(), output);
  }

  // optional int32 bankerlimit = 18;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bankerlimit(), output);
  }

  // repeated int32 beilist = 19;
  for (int i = 0; i < this->beilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->beilist(i), output);
  }

  // optional int32 dropbanker = 20;
  if (has_dropbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->dropbanker(), output);
  }

  // optional int32 usernum = 21;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->usernum(), output);
  }

  // optional int32 robotnum = 22;
  if (has_robotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->robotnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* forestinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 minjetton = 3;
  if (has_minjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minjetton(), target);
  }

  // optional int32 maxjetton = 4;
  if (has_maxjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxjetton(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // optional int32 timemark = 6;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timemark(), target);
  }

  // repeated int32 useridlist = 7;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->useridlist(i), target);
  }

  // repeated int32 bankerlist = 8;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->bankerlist(i), target);
  }

  // repeated int32 colourlist = 9;
  for (int i = 0; i < this->colourlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->colourlist(i), target);
  }

  // optional int32 winid = 10;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->winid(), target);
  }

  // optional int32 wincolourindex = 11;
  if (has_wincolourindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wincolourindex(), target);
  }

  // repeated int32 history = 12;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->history(i), target);
  }

  // optional int32 bankerid = 13;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bankerid(), target);
  }

  // optional string bankerjetton = 14;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bankerjetton(), target);
  }

  // optional string bankername = 15;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->bankername(), target);
  }

  // optional string bankerfaceid = 16;
  if (has_bankerfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerfaceid().data(), this->bankerfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->bankerfaceid(), target);
  }

  // optional int32 bankerlimit = 18;
  if (has_bankerlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bankerlimit(), target);
  }

  // repeated int32 beilist = 19;
  for (int i = 0; i < this->beilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->beilist(i), target);
  }

  // optional int32 dropbanker = 20;
  if (has_dropbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->dropbanker(), target);
  }

  // optional int32 usernum = 21;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->usernum(), target);
  }

  // optional int32 robotnum = 22;
  if (has_robotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->robotnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int forestinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 minjetton = 3;
    if (has_minjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minjetton());
    }

    // optional int32 maxjetton = 4;
    if (has_maxjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxjetton());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 6;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 winid = 10;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional int32 wincolourindex = 11;
    if (has_wincolourindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincolourindex());
    }

    // optional int32 bankerid = 13;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional string bankerjetton = 14;
    if (has_bankerjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerjetton());
    }

    // optional string bankername = 15;
    if (has_bankername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankername());
    }

    // optional string bankerfaceid = 16;
    if (has_bankerfaceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerfaceid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bankerlimit = 18;
    if (has_bankerlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerlimit());
    }

    // optional int32 dropbanker = 20;
    if (has_dropbanker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropbanker());
    }

    // optional int32 usernum = 21;
    if (has_usernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

    // optional int32 robotnum = 22;
    if (has_robotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotnum());
    }

  }
  // repeated int32 useridlist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated int32 bankerlist = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->bankerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bankerlist(i));
    }
    total_size += 1 * this->bankerlist_size() + data_size;
  }

  // repeated int32 colourlist = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->colourlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->colourlist(i));
    }
    total_size += 1 * this->colourlist_size() + data_size;
  }

  // repeated int32 history = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history(i));
    }
    total_size += 1 * this->history_size() + data_size;
  }

  // repeated int32 beilist = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->beilist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->beilist(i));
    }
    total_size += 2 * this->beilist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void forestinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const forestinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const forestinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void forestinfo::MergeFrom(const forestinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  bankerlist_.MergeFrom(from.bankerlist_);
  colourlist_.MergeFrom(from.colourlist_);
  history_.MergeFrom(from.history_);
  beilist_.MergeFrom(from.beilist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_minjetton()) {
      set_minjetton(from.minjetton());
    }
    if (from.has_maxjetton()) {
      set_maxjetton(from.maxjetton());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_wincolourindex()) {
      set_wincolourindex(from.wincolourindex());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_bankerjetton()) {
      set_bankerjetton(from.bankerjetton());
    }
    if (from.has_bankername()) {
      set_bankername(from.bankername());
    }
    if (from.has_bankerfaceid()) {
      set_bankerfaceid(from.bankerfaceid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bankerlimit()) {
      set_bankerlimit(from.bankerlimit());
    }
    if (from.has_dropbanker()) {
      set_dropbanker(from.dropbanker());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_robotnum()) {
      set_robotnum(from.robotnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void forestinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forestinfo::CopyFrom(const forestinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forestinfo::IsInitialized() const {

  return true;
}

void forestinfo::Swap(forestinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(minjetton_, other->minjetton_);
    std::swap(maxjetton_, other->maxjetton_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    useridlist_.Swap(&other->useridlist_);
    bankerlist_.Swap(&other->bankerlist_);
    colourlist_.Swap(&other->colourlist_);
    std::swap(winid_, other->winid_);
    std::swap(wincolourindex_, other->wincolourindex_);
    history_.Swap(&other->history_);
    std::swap(bankerid_, other->bankerid_);
    std::swap(bankerjetton_, other->bankerjetton_);
    std::swap(bankername_, other->bankername_);
    std::swap(bankerfaceid_, other->bankerfaceid_);
    std::swap(bankerlimit_, other->bankerlimit_);
    beilist_.Swap(&other->beilist_);
    std::swap(dropbanker_, other->dropbanker_);
    std::swap(usernum_, other->usernum_);
    std::swap(robotnum_, other->robotnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata forestinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = forestinfo_descriptor_;
  metadata.reflection = forestinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int forestpour::kUseridFieldNumber;
const int forestpour::kPouridFieldNumber;
const int forestpour::kPourjettonFieldNumber;
#endif  // !_MSC_VER

forestpour::forestpour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void forestpour::InitAsDefaultInstance() {
}

forestpour::forestpour(const forestpour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void forestpour::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourid_ = 0;
  pourjetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

forestpour::~forestpour() {
  SharedDtor();
}

void forestpour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void forestpour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* forestpour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return forestpour_descriptor_;
}

const forestpour& forestpour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fforest_2eproto();
  return *default_instance_;
}

forestpour* forestpour::default_instance_ = NULL;

forestpour* forestpour::New() const {
  return new forestpour;
}

void forestpour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourid_ = 0;
    pourjetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool forestpour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourid;
        break;
      }

      // optional int32 pourid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourid_)));
          set_has_pourid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pourjetton;
        break;
      }

      // optional int32 pourjetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourjetton_)));
          set_has_pourjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void forestpour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourid = 2;
  if (has_pourid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourid(), output);
  }

  // optional int32 pourjetton = 3;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pourjetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* forestpour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourid = 2;
  if (has_pourid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourid(), target);
  }

  // optional int32 pourjetton = 3;
  if (has_pourjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pourjetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int forestpour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourid = 2;
    if (has_pourid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourid());
    }

    // optional int32 pourjetton = 3;
    if (has_pourjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourjetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void forestpour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const forestpour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const forestpour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void forestpour::MergeFrom(const forestpour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourid()) {
      set_pourid(from.pourid());
    }
    if (from.has_pourjetton()) {
      set_pourjetton(from.pourjetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void forestpour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void forestpour::CopyFrom(const forestpour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forestpour::IsInitialized() const {

  return true;
}

void forestpour::Swap(forestpour* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourid_, other->pourid_);
    std::swap(pourjetton_, other->pourjetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata forestpour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = forestpour_descriptor_;
  metadata.reflection = forestpour_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
