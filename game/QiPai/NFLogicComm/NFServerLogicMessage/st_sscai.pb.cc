// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_sscai.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_sscai.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* sscaijetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sscaijetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* sscaiplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sscaiplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* sscaiinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sscaiinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* sscaibiginfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sscaibiginfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fsscai_2eproto() {
  protobuf_AddDesc_st_5fsscai_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_sscai.proto");
  GOOGLE_CHECK(file != NULL);
  sscaijetton_descriptor_ = file->message_type(0);
  static const int sscaijetton_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaijetton, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaijetton, pourtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaijetton, jetton_),
  };
  sscaijetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sscaijetton_descriptor_,
      sscaijetton::default_instance_,
      sscaijetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaijetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaijetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sscaijetton));
  sscaiplay_descriptor_ = file->message_type(1);
  static const int sscaiplay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiplay, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiplay, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiplay, cardtype_),
  };
  sscaiplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sscaiplay_descriptor_,
      sscaiplay::default_instance_,
      sscaiplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sscaiplay));
  sscaiinfo_descriptor_ = file->message_type(2);
  static const int sscaiinfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, minjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, maxjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, bankjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, bankername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, bankerfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, awardpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, applydrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, lastbigtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, lastwinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, lastwinnick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, lastwinfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, lastwinnum_),
  };
  sscaiinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sscaiinfo_descriptor_,
      sscaiinfo::default_instance_,
      sscaiinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaiinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sscaiinfo));
  sscaibiginfo_descriptor_ = file->message_type(3);
  static const int sscaibiginfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaibiginfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaibiginfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaibiginfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaibiginfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaibiginfo, faceid_),
  };
  sscaibiginfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sscaibiginfo_descriptor_,
      sscaibiginfo::default_instance_,
      sscaibiginfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaibiginfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sscaibiginfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sscaibiginfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fsscai_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sscaijetton_descriptor_, &sscaijetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sscaiplay_descriptor_, &sscaiplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sscaiinfo_descriptor_, &sscaiinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sscaibiginfo_descriptor_, &sscaibiginfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fsscai_2eproto() {
  delete sscaijetton::default_instance_;
  delete sscaijetton_reflection_;
  delete sscaiplay::default_instance_;
  delete sscaiplay_reflection_;
  delete sscaiinfo::default_instance_;
  delete sscaiinfo_reflection_;
  delete sscaibiginfo::default_instance_;
  delete sscaibiginfo_reflection_;
}

void protobuf_AddDesc_st_5fsscai_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016st_sscai.proto\022\007progame\032\016st_human.prot"
    "o\"\?\n\013sscaijetton\022\016\n\006userid\030\001 \001(\005\022\020\n\010pour"
    "type\030\002 \001(\005\022\016\n\006jetton\030\003 \001(\005\"\?\n\tsscaiplay\022"
    "\016\n\006playid\030\001 \001(\005\022\020\n\010cardlist\030\002 \003(\005\022\020\n\010car"
    "dtype\030\003 \001(\005\"\252\003\n\tsscaiinfo\022\017\n\007tableid\030\001 \001"
    "(\005\022\021\n\ttabletype\030\002 \001(\005\022\021\n\tminjetton\030\003 \001(\005"
    "\022\021\n\tmaxjetton\030\004 \001(\005\022\r\n\005winid\030\005 \001(\005\022\r\n\005st"
    "ate\030\006 \001(\005\022\020\n\010timemark\030\007 \001(\005\022\017\n\007history\030\010"
    " \003(\005\022\022\n\nuseridlist\030\n \003(\005\022\017\n\007usernum\030\013 \001("
    "\005\022\020\n\010bankerid\030\014 \001(\005\022\022\n\nbankjetton\030\r \001(\005\022"
    "\017\n\007maxuser\030\016 \001(\005\022\022\n\nbankername\030\017 \001(\t\022\024\n\014"
    "bankerfaceid\030\020 \001(\t\022\021\n\tawardpool\030\021 \001(\t\022\021\n"
    "\tapplydrop\030\024 \001(\005\022\023\n\013lastbigtime\030\025 \001(\005\022\021\n"
    "\tlastwinid\030\026 \001(\005\022\023\n\013lastwinnick\030\027 \001(\t\022\025\n"
    "\rlastwinfaceid\030\030 \001(\t\022\022\n\nlastwinnum\030\031 \001(\005"
    "\"b\n\014sscaibiginfo\022\016\n\006userid\030\001 \001(\005\022\020\n\010time"
    "mark\030\002 \001(\005\022\016\n\006winnum\030\003 \001(\005\022\020\n\010nickname\030\004"
    " \001(\t\022\016\n\006faceid\030\006 \001(\t", 700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_sscai.proto", &protobuf_RegisterTypes);
  sscaijetton::default_instance_ = new sscaijetton();
  sscaiplay::default_instance_ = new sscaiplay();
  sscaiinfo::default_instance_ = new sscaiinfo();
  sscaibiginfo::default_instance_ = new sscaibiginfo();
  sscaijetton::default_instance_->InitAsDefaultInstance();
  sscaiplay::default_instance_->InitAsDefaultInstance();
  sscaiinfo::default_instance_->InitAsDefaultInstance();
  sscaibiginfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fsscai_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fsscai_2eproto {
  StaticDescriptorInitializer_st_5fsscai_2eproto() {
    protobuf_AddDesc_st_5fsscai_2eproto();
  }
} static_descriptor_initializer_st_5fsscai_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int sscaijetton::kUseridFieldNumber;
const int sscaijetton::kPourtypeFieldNumber;
const int sscaijetton::kJettonFieldNumber;
#endif  // !_MSC_VER

sscaijetton::sscaijetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sscaijetton::InitAsDefaultInstance() {
}

sscaijetton::sscaijetton(const sscaijetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sscaijetton::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourtype_ = 0;
  jetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sscaijetton::~sscaijetton() {
  SharedDtor();
}

void sscaijetton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sscaijetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sscaijetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sscaijetton_descriptor_;
}

const sscaijetton& sscaijetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsscai_2eproto();
  return *default_instance_;
}

sscaijetton* sscaijetton::default_instance_ = NULL;

sscaijetton* sscaijetton::New() const {
  return new sscaijetton;
}

void sscaijetton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourtype_ = 0;
    jetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sscaijetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourtype;
        break;
      }

      // optional int32 pourtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourtype_)));
          set_has_pourtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sscaijetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourtype(), output);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sscaijetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourtype(), target);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sscaijetton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourtype = 2;
    if (has_pourtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourtype());
    }

    // optional int32 jetton = 3;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sscaijetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sscaijetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sscaijetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sscaijetton::MergeFrom(const sscaijetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourtype()) {
      set_pourtype(from.pourtype());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sscaijetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sscaijetton::CopyFrom(const sscaijetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sscaijetton::IsInitialized() const {

  return true;
}

void sscaijetton::Swap(sscaijetton* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourtype_, other->pourtype_);
    std::swap(jetton_, other->jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sscaijetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sscaijetton_descriptor_;
  metadata.reflection = sscaijetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sscaiplay::kPlayidFieldNumber;
const int sscaiplay::kCardlistFieldNumber;
const int sscaiplay::kCardtypeFieldNumber;
#endif  // !_MSC_VER

sscaiplay::sscaiplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sscaiplay::InitAsDefaultInstance() {
}

sscaiplay::sscaiplay(const sscaiplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sscaiplay::SharedCtor() {
  _cached_size_ = 0;
  playid_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sscaiplay::~sscaiplay() {
  SharedDtor();
}

void sscaiplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sscaiplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sscaiplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sscaiplay_descriptor_;
}

const sscaiplay& sscaiplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsscai_2eproto();
  return *default_instance_;
}

sscaiplay* sscaiplay::default_instance_ = NULL;

sscaiplay* sscaiplay::New() const {
  return new sscaiplay;
}

void sscaiplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playid_ = 0;
    cardtype_ = 0;
  }
  cardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sscaiplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardlist;
        break;
      }

      // repeated int32 cardlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardlist;
        if (input->ExpectTag(24)) goto parse_cardtype;
        break;
      }

      // optional int32 cardtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sscaiplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playid = 1;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playid(), output);
  }

  // repeated int32 cardlist = 2;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardlist(i), output);
  }

  // optional int32 cardtype = 3;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sscaiplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playid = 1;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playid(), target);
  }

  // repeated int32 cardlist = 2;
  for (int i = 0; i < this->cardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardlist(i), target);
  }

  // optional int32 cardtype = 3;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sscaiplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playid = 1;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playid());
    }

    // optional int32 cardtype = 3;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  // repeated int32 cardlist = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardlist(i));
    }
    total_size += 1 * this->cardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sscaiplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sscaiplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sscaiplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sscaiplay::MergeFrom(const sscaiplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardlist_.MergeFrom(from.cardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sscaiplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sscaiplay::CopyFrom(const sscaiplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sscaiplay::IsInitialized() const {

  return true;
}

void sscaiplay::Swap(sscaiplay* other) {
  if (other != this) {
    std::swap(playid_, other->playid_);
    cardlist_.Swap(&other->cardlist_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sscaiplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sscaiplay_descriptor_;
  metadata.reflection = sscaiplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sscaiinfo::kTableidFieldNumber;
const int sscaiinfo::kTabletypeFieldNumber;
const int sscaiinfo::kMinjettonFieldNumber;
const int sscaiinfo::kMaxjettonFieldNumber;
const int sscaiinfo::kWinidFieldNumber;
const int sscaiinfo::kStateFieldNumber;
const int sscaiinfo::kTimemarkFieldNumber;
const int sscaiinfo::kHistoryFieldNumber;
const int sscaiinfo::kUseridlistFieldNumber;
const int sscaiinfo::kUsernumFieldNumber;
const int sscaiinfo::kBankeridFieldNumber;
const int sscaiinfo::kBankjettonFieldNumber;
const int sscaiinfo::kMaxuserFieldNumber;
const int sscaiinfo::kBankernameFieldNumber;
const int sscaiinfo::kBankerfaceidFieldNumber;
const int sscaiinfo::kAwardpoolFieldNumber;
const int sscaiinfo::kApplydropFieldNumber;
const int sscaiinfo::kLastbigtimeFieldNumber;
const int sscaiinfo::kLastwinidFieldNumber;
const int sscaiinfo::kLastwinnickFieldNumber;
const int sscaiinfo::kLastwinfaceidFieldNumber;
const int sscaiinfo::kLastwinnumFieldNumber;
#endif  // !_MSC_VER

sscaiinfo::sscaiinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sscaiinfo::InitAsDefaultInstance() {
}

sscaiinfo::sscaiinfo(const sscaiinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sscaiinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  minjetton_ = 0;
  maxjetton_ = 0;
  winid_ = 0;
  state_ = 0;
  timemark_ = 0;
  usernum_ = 0;
  bankerid_ = 0;
  bankjetton_ = 0;
  maxuser_ = 0;
  bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardpool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applydrop_ = 0;
  lastbigtime_ = 0;
  lastwinid_ = 0;
  lastwinnick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastwinfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastwinnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sscaiinfo::~sscaiinfo() {
  SharedDtor();
}

void sscaiinfo::SharedDtor() {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerfaceid_;
  }
  if (awardpool_ != &::google::protobuf::internal::kEmptyString) {
    delete awardpool_;
  }
  if (lastwinnick_ != &::google::protobuf::internal::kEmptyString) {
    delete lastwinnick_;
  }
  if (lastwinfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete lastwinfaceid_;
  }
  if (this != default_instance_) {
  }
}

void sscaiinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sscaiinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sscaiinfo_descriptor_;
}

const sscaiinfo& sscaiinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsscai_2eproto();
  return *default_instance_;
}

sscaiinfo* sscaiinfo::default_instance_ = NULL;

sscaiinfo* sscaiinfo::New() const {
  return new sscaiinfo;
}

void sscaiinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tabletype_ = 0;
    minjetton_ = 0;
    maxjetton_ = 0;
    winid_ = 0;
    state_ = 0;
    timemark_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    usernum_ = 0;
    bankerid_ = 0;
    bankjetton_ = 0;
    maxuser_ = 0;
    if (has_bankername()) {
      if (bankername_ != &::google::protobuf::internal::kEmptyString) {
        bankername_->clear();
      }
    }
    if (has_bankerfaceid()) {
      if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
        bankerfaceid_->clear();
      }
    }
    if (has_awardpool()) {
      if (awardpool_ != &::google::protobuf::internal::kEmptyString) {
        awardpool_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    applydrop_ = 0;
    lastbigtime_ = 0;
    lastwinid_ = 0;
    if (has_lastwinnick()) {
      if (lastwinnick_ != &::google::protobuf::internal::kEmptyString) {
        lastwinnick_->clear();
      }
    }
    if (has_lastwinfaceid()) {
      if (lastwinfaceid_ != &::google::protobuf::internal::kEmptyString) {
        lastwinfaceid_->clear();
      }
    }
    lastwinnum_ = 0;
  }
  history_.Clear();
  useridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sscaiinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minjetton;
        break;
      }

      // optional int32 minjetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minjetton_)));
          set_has_minjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxjetton;
        break;
      }

      // optional int32 maxjetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxjetton_)));
          set_has_maxjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winid;
        break;
      }

      // optional int32 winid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional int32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_history;
        break;
      }

      // repeated int32 history = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_history())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_history;
        if (input->ExpectTag(80)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_useridlist;
        if (input->ExpectTag(88)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bankerid;
        break;
      }

      // optional int32 bankerid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bankjetton;
        break;
      }

      // optional int32 bankjetton = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankjetton_)));
          set_has_bankjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_bankername;
        break;
      }

      // optional string bankername = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankername().data(), this->bankername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_bankerfaceid;
        break;
      }

      // optional string bankerfaceid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerfaceid().data(), this->bankerfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_awardpool;
        break;
      }

      // optional string awardpool = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardpool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardpool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardpool().data(), this->awardpool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_applydrop;
        break;
      }

      // optional int32 applydrop = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applydrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applydrop_)));
          set_has_applydrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lastbigtime;
        break;
      }

      // optional int32 lastbigtime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastbigtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastbigtime_)));
          set_has_lastbigtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_lastwinid;
        break;
      }

      // optional int32 lastwinid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastwinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastwinid_)));
          set_has_lastwinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_lastwinnick;
        break;
      }

      // optional string lastwinnick = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastwinnick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastwinnick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastwinnick().data(), this->lastwinnick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_lastwinfaceid;
        break;
      }

      // optional string lastwinfaceid = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastwinfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastwinfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastwinfaceid().data(), this->lastwinfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_lastwinnum;
        break;
      }

      // optional int32 lastwinnum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastwinnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastwinnum_)));
          set_has_lastwinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sscaiinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 minjetton = 3;
  if (has_minjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minjetton(), output);
  }

  // optional int32 maxjetton = 4;
  if (has_maxjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxjetton(), output);
  }

  // optional int32 winid = 5;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winid(), output);
  }

  // optional int32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // optional int32 timemark = 7;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timemark(), output);
  }

  // repeated int32 history = 8;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->history(i), output);
  }

  // repeated int32 useridlist = 10;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->useridlist(i), output);
  }

  // optional int32 usernum = 11;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->usernum(), output);
  }

  // optional int32 bankerid = 12;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bankerid(), output);
  }

  // optional int32 bankjetton = 13;
  if (has_bankjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bankjetton(), output);
  }

  // optional int32 maxuser = 14;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->maxuser(), output);
  }

  // optional string bankername = 15;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->bankername(), output);
  }

  // optional string bankerfaceid = 16;
  if (has_bankerfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerfaceid().data(), this->bankerfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->bankerfaceid(), output);
  }

  // optional string awardpool = 17;
  if (has_awardpool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardpool().data(), this->awardpool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->awardpool(), output);
  }

  // optional int32 applydrop = 20;
  if (has_applydrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->applydrop(), output);
  }

  // optional int32 lastbigtime = 21;
  if (has_lastbigtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lastbigtime(), output);
  }

  // optional int32 lastwinid = 22;
  if (has_lastwinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->lastwinid(), output);
  }

  // optional string lastwinnick = 23;
  if (has_lastwinnick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastwinnick().data(), this->lastwinnick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->lastwinnick(), output);
  }

  // optional string lastwinfaceid = 24;
  if (has_lastwinfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastwinfaceid().data(), this->lastwinfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->lastwinfaceid(), output);
  }

  // optional int32 lastwinnum = 25;
  if (has_lastwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->lastwinnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sscaiinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 minjetton = 3;
  if (has_minjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minjetton(), target);
  }

  // optional int32 maxjetton = 4;
  if (has_maxjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxjetton(), target);
  }

  // optional int32 winid = 5;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winid(), target);
  }

  // optional int32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // optional int32 timemark = 7;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timemark(), target);
  }

  // repeated int32 history = 8;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->history(i), target);
  }

  // repeated int32 useridlist = 10;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->useridlist(i), target);
  }

  // optional int32 usernum = 11;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->usernum(), target);
  }

  // optional int32 bankerid = 12;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bankerid(), target);
  }

  // optional int32 bankjetton = 13;
  if (has_bankjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bankjetton(), target);
  }

  // optional int32 maxuser = 14;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->maxuser(), target);
  }

  // optional string bankername = 15;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->bankername(), target);
  }

  // optional string bankerfaceid = 16;
  if (has_bankerfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerfaceid().data(), this->bankerfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->bankerfaceid(), target);
  }

  // optional string awardpool = 17;
  if (has_awardpool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardpool().data(), this->awardpool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->awardpool(), target);
  }

  // optional int32 applydrop = 20;
  if (has_applydrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->applydrop(), target);
  }

  // optional int32 lastbigtime = 21;
  if (has_lastbigtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lastbigtime(), target);
  }

  // optional int32 lastwinid = 22;
  if (has_lastwinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->lastwinid(), target);
  }

  // optional string lastwinnick = 23;
  if (has_lastwinnick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastwinnick().data(), this->lastwinnick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->lastwinnick(), target);
  }

  // optional string lastwinfaceid = 24;
  if (has_lastwinfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastwinfaceid().data(), this->lastwinfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->lastwinfaceid(), target);
  }

  // optional int32 lastwinnum = 25;
  if (has_lastwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->lastwinnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sscaiinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 minjetton = 3;
    if (has_minjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minjetton());
    }

    // optional int32 maxjetton = 4;
    if (has_maxjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxjetton());
    }

    // optional int32 winid = 5;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional int32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 7;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 usernum = 11;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

    // optional int32 bankerid = 12;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional int32 bankjetton = 13;
    if (has_bankjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankjetton());
    }

    // optional int32 maxuser = 14;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional string bankername = 15;
    if (has_bankername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankername());
    }

    // optional string bankerfaceid = 16;
    if (has_bankerfaceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerfaceid());
    }

    // optional string awardpool = 17;
    if (has_awardpool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardpool());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 applydrop = 20;
    if (has_applydrop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applydrop());
    }

    // optional int32 lastbigtime = 21;
    if (has_lastbigtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastbigtime());
    }

    // optional int32 lastwinid = 22;
    if (has_lastwinid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastwinid());
    }

    // optional string lastwinnick = 23;
    if (has_lastwinnick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastwinnick());
    }

    // optional string lastwinfaceid = 24;
    if (has_lastwinfaceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastwinfaceid());
    }

    // optional int32 lastwinnum = 25;
    if (has_lastwinnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastwinnum());
    }

  }
  // repeated int32 history = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history(i));
    }
    total_size += 1 * this->history_size() + data_size;
  }

  // repeated int32 useridlist = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sscaiinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sscaiinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sscaiinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sscaiinfo::MergeFrom(const sscaiinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  useridlist_.MergeFrom(from.useridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_minjetton()) {
      set_minjetton(from.minjetton());
    }
    if (from.has_maxjetton()) {
      set_maxjetton(from.maxjetton());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_bankjetton()) {
      set_bankjetton(from.bankjetton());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
    if (from.has_bankername()) {
      set_bankername(from.bankername());
    }
    if (from.has_bankerfaceid()) {
      set_bankerfaceid(from.bankerfaceid());
    }
    if (from.has_awardpool()) {
      set_awardpool(from.awardpool());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_applydrop()) {
      set_applydrop(from.applydrop());
    }
    if (from.has_lastbigtime()) {
      set_lastbigtime(from.lastbigtime());
    }
    if (from.has_lastwinid()) {
      set_lastwinid(from.lastwinid());
    }
    if (from.has_lastwinnick()) {
      set_lastwinnick(from.lastwinnick());
    }
    if (from.has_lastwinfaceid()) {
      set_lastwinfaceid(from.lastwinfaceid());
    }
    if (from.has_lastwinnum()) {
      set_lastwinnum(from.lastwinnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sscaiinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sscaiinfo::CopyFrom(const sscaiinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sscaiinfo::IsInitialized() const {

  return true;
}

void sscaiinfo::Swap(sscaiinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(minjetton_, other->minjetton_);
    std::swap(maxjetton_, other->maxjetton_);
    std::swap(winid_, other->winid_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    history_.Swap(&other->history_);
    useridlist_.Swap(&other->useridlist_);
    std::swap(usernum_, other->usernum_);
    std::swap(bankerid_, other->bankerid_);
    std::swap(bankjetton_, other->bankjetton_);
    std::swap(maxuser_, other->maxuser_);
    std::swap(bankername_, other->bankername_);
    std::swap(bankerfaceid_, other->bankerfaceid_);
    std::swap(awardpool_, other->awardpool_);
    std::swap(applydrop_, other->applydrop_);
    std::swap(lastbigtime_, other->lastbigtime_);
    std::swap(lastwinid_, other->lastwinid_);
    std::swap(lastwinnick_, other->lastwinnick_);
    std::swap(lastwinfaceid_, other->lastwinfaceid_);
    std::swap(lastwinnum_, other->lastwinnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sscaiinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sscaiinfo_descriptor_;
  metadata.reflection = sscaiinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sscaibiginfo::kUseridFieldNumber;
const int sscaibiginfo::kTimemarkFieldNumber;
const int sscaibiginfo::kWinnumFieldNumber;
const int sscaibiginfo::kNicknameFieldNumber;
const int sscaibiginfo::kFaceidFieldNumber;
#endif  // !_MSC_VER

sscaibiginfo::sscaibiginfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sscaibiginfo::InitAsDefaultInstance() {
}

sscaibiginfo::sscaibiginfo(const sscaibiginfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sscaibiginfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  timemark_ = 0;
  winnum_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sscaibiginfo::~sscaibiginfo() {
  SharedDtor();
}

void sscaibiginfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (this != default_instance_) {
  }
}

void sscaibiginfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sscaibiginfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sscaibiginfo_descriptor_;
}

const sscaibiginfo& sscaibiginfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsscai_2eproto();
  return *default_instance_;
}

sscaibiginfo* sscaibiginfo::default_instance_ = NULL;

sscaibiginfo* sscaibiginfo::New() const {
  return new sscaibiginfo;
}

void sscaibiginfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    timemark_ = 0;
    winnum_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_faceid()) {
      if (faceid_ != &::google::protobuf::internal::kEmptyString) {
        faceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sscaibiginfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_faceid;
        break;
      }

      // optional string faceid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faceid().data(), this->faceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sscaibiginfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 timemark = 2;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timemark(), output);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winnum(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  // optional string faceid = 6;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->faceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sscaibiginfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 timemark = 2;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timemark(), target);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winnum(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional string faceid = 6;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->faceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sscaibiginfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 timemark = 2;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 winnum = 3;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string faceid = 6;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sscaibiginfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sscaibiginfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sscaibiginfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sscaibiginfo::MergeFrom(const sscaibiginfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sscaibiginfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sscaibiginfo::CopyFrom(const sscaibiginfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sscaibiginfo::IsInitialized() const {

  return true;
}

void sscaibiginfo::Swap(sscaibiginfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(timemark_, other->timemark_);
    std::swap(winnum_, other->winnum_);
    std::swap(nickname_, other->nickname_);
    std::swap(faceid_, other->faceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sscaibiginfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sscaibiginfo_descriptor_;
  metadata.reflection = sscaibiginfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
