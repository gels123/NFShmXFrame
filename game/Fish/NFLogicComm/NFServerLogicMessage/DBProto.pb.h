// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProto.proto

#ifndef PROTOBUF_DBProto_2eproto__INCLUDED
#define PROTOBUF_DBProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "Com.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DBProto_2eproto();
void protobuf_AssignDesc_DBProto_2eproto();
void protobuf_ShutdownFile_DBProto_2eproto();

class tbFishAccountTable;
class tbFishPlayerData;
class tbFishSnsPlayerSimpleData;
class tbFishSnsPlayerDetailData;

// ===================================================================

class tbFishAccountTable : public ::google::protobuf::Message {
 public:
  tbFishAccountTable();
  virtual ~tbFishAccountTable();

  tbFishAccountTable(const tbFishAccountTable& from);

  inline tbFishAccountTable& operator=(const tbFishAccountTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbFishAccountTable& default_instance();

  void Swap(tbFishAccountTable* other);

  // implements Message ----------------------------------------------

  tbFishAccountTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbFishAccountTable& from);
  void MergeFrom(const tbFishAccountTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional uint32 account_type = 4;
  inline bool has_account_type() const;
  inline void clear_account_type();
  static const int kAccountTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 account_type() const;
  inline void set_account_type(::google::protobuf::uint32 value);

  // optional string device_id = 5;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 5;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional uint64 phonenum = 6;
  inline bool has_phonenum() const;
  inline void clear_phonenum();
  static const int kPhonenumFieldNumber = 6;
  inline ::google::protobuf::uint64 phonenum() const;
  inline void set_phonenum(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbFishAccountTable)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_account_type();
  inline void clear_has_account_type();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_phonenum();
  inline void clear_has_phonenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::std::string* account_;
  ::std::string* password_;
  ::std::string* device_id_;
  ::google::protobuf::uint64 phonenum_;
  ::google::protobuf::uint32 account_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static tbFishAccountTable* default_instance_;
};
// -------------------------------------------------------------------

class tbFishPlayerData : public ::google::protobuf::Message {
 public:
  tbFishPlayerData();
  virtual ~tbFishPlayerData();

  tbFishPlayerData(const tbFishPlayerData& from);

  inline tbFishPlayerData& operator=(const tbFishPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbFishPlayerData& default_instance();

  void Swap(tbFishPlayerData* other);

  // implements Message ----------------------------------------------

  tbFishPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbFishPlayerData& from);
  void MergeFrom(const tbFishPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 faceid = 3;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 3;
  inline ::google::protobuf::uint32 faceid() const;
  inline void set_faceid(::google::protobuf::uint32 value);

  // optional uint64 regdate = 4;
  inline bool has_regdate() const;
  inline void clear_regdate();
  static const int kRegdateFieldNumber = 4;
  inline ::google::protobuf::uint64 regdate() const;
  inline void set_regdate(::google::protobuf::uint64 value);

  // optional uint32 gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint32 age = 6;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 6;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional uint64 phonenum = 8;
  inline bool has_phonenum() const;
  inline void clear_phonenum();
  static const int kPhonenumFieldNumber = 8;
  inline ::google::protobuf::uint64 phonenum() const;
  inline void set_phonenum(::google::protobuf::uint64 value);

  // optional uint64 jetton = 9;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 9;
  inline ::google::protobuf::uint64 jetton() const;
  inline void set_jetton(::google::protobuf::uint64 value);

  // optional string ip = 11;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 11;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint64 last_login_time = 12;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint64 value);

  // optional uint64 last_logout_time = 13;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbFishPlayerData)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_regdate();
  inline void clear_has_regdate();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_phonenum();
  inline void clear_has_phonenum();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::std::string* nickname_;
  ::google::protobuf::uint64 regdate_;
  ::google::protobuf::uint32 faceid_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint64 phonenum_;
  ::google::protobuf::uint64 jetton_;
  ::std::string* ip_;
  ::google::protobuf::uint64 last_login_time_;
  ::google::protobuf::uint64 last_logout_time_;
  ::google::protobuf::uint32 age_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static tbFishPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class tbFishSnsPlayerSimpleData : public ::google::protobuf::Message {
 public:
  tbFishSnsPlayerSimpleData();
  virtual ~tbFishSnsPlayerSimpleData();

  tbFishSnsPlayerSimpleData(const tbFishSnsPlayerSimpleData& from);

  inline tbFishSnsPlayerSimpleData& operator=(const tbFishSnsPlayerSimpleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbFishSnsPlayerSimpleData& default_instance();

  void Swap(tbFishSnsPlayerSimpleData* other);

  // implements Message ----------------------------------------------

  tbFishSnsPlayerSimpleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbFishSnsPlayerSimpleData& from);
  void MergeFrom(const tbFishSnsPlayerSimpleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 faceid = 3;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 3;
  inline ::google::protobuf::uint32 faceid() const;
  inline void set_faceid(::google::protobuf::uint32 value);

  // optional uint64 bank_jetton = 9;
  inline bool has_bank_jetton() const;
  inline void clear_bank_jetton();
  static const int kBankJettonFieldNumber = 9;
  inline ::google::protobuf::uint64 bank_jetton() const;
  inline void set_bank_jetton(::google::protobuf::uint64 value);

  // optional uint64 bank_password = 10;
  inline bool has_bank_password() const;
  inline void clear_bank_password();
  static const int kBankPasswordFieldNumber = 10;
  inline ::google::protobuf::uint64 bank_password() const;
  inline void set_bank_password(::google::protobuf::uint64 value);

  // optional uint64 last_login_time = 12;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint64 value);

  // optional uint64 last_logout_time = 13;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::uint64 value);

  // optional uint64 agent = 20;
  inline bool has_agent() const;
  inline void clear_agent();
  static const int kAgentFieldNumber = 20;
  inline ::google::protobuf::uint64 agent() const;
  inline void set_agent(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbFishSnsPlayerSimpleData)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_bank_jetton();
  inline void clear_has_bank_jetton();
  inline void set_has_bank_password();
  inline void clear_has_bank_password();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();
  inline void set_has_agent();
  inline void clear_has_agent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::std::string* nickname_;
  ::google::protobuf::uint64 bank_jetton_;
  ::google::protobuf::uint64 bank_password_;
  ::google::protobuf::uint64 last_login_time_;
  ::google::protobuf::uint64 last_logout_time_;
  ::google::protobuf::uint64 agent_;
  ::google::protobuf::uint32 faceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static tbFishSnsPlayerSimpleData* default_instance_;
};
// -------------------------------------------------------------------

class tbFishSnsPlayerDetailData : public ::google::protobuf::Message {
 public:
  tbFishSnsPlayerDetailData();
  virtual ~tbFishSnsPlayerDetailData();

  tbFishSnsPlayerDetailData(const tbFishSnsPlayerDetailData& from);

  inline tbFishSnsPlayerDetailData& operator=(const tbFishSnsPlayerDetailData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbFishSnsPlayerDetailData& default_instance();

  void Swap(tbFishSnsPlayerDetailData* other);

  // implements Message ----------------------------------------------

  tbFishSnsPlayerDetailData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbFishSnsPlayerDetailData& from);
  void MergeFrom(const tbFishSnsPlayerDetailData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbFishSnsPlayerDetailData)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static tbFishSnsPlayerDetailData* default_instance_;
};
// ===================================================================


// ===================================================================

// tbFishAccountTable

// optional uint64 player_id = 1;
inline bool tbFishAccountTable::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbFishAccountTable::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbFishAccountTable::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbFishAccountTable::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 tbFishAccountTable::player_id() const {
  return player_id_;
}
inline void tbFishAccountTable::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string account = 2;
inline bool tbFishAccountTable::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbFishAccountTable::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbFishAccountTable::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbFishAccountTable::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& tbFishAccountTable::account() const {
  return *account_;
}
inline void tbFishAccountTable::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void tbFishAccountTable::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void tbFishAccountTable::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbFishAccountTable::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* tbFishAccountTable::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbFishAccountTable::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 3;
inline bool tbFishAccountTable::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbFishAccountTable::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbFishAccountTable::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbFishAccountTable::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& tbFishAccountTable::password() const {
  return *password_;
}
inline void tbFishAccountTable::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void tbFishAccountTable::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void tbFishAccountTable::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbFishAccountTable::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* tbFishAccountTable::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbFishAccountTable::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 account_type = 4;
inline bool tbFishAccountTable::has_account_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbFishAccountTable::set_has_account_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbFishAccountTable::clear_has_account_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbFishAccountTable::clear_account_type() {
  account_type_ = 0u;
  clear_has_account_type();
}
inline ::google::protobuf::uint32 tbFishAccountTable::account_type() const {
  return account_type_;
}
inline void tbFishAccountTable::set_account_type(::google::protobuf::uint32 value) {
  set_has_account_type();
  account_type_ = value;
}

// optional string device_id = 5;
inline bool tbFishAccountTable::has_device_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbFishAccountTable::set_has_device_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbFishAccountTable::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbFishAccountTable::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& tbFishAccountTable::device_id() const {
  return *device_id_;
}
inline void tbFishAccountTable::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void tbFishAccountTable::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void tbFishAccountTable::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbFishAccountTable::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* tbFishAccountTable::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbFishAccountTable::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 phonenum = 6;
inline bool tbFishAccountTable::has_phonenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbFishAccountTable::set_has_phonenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbFishAccountTable::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbFishAccountTable::clear_phonenum() {
  phonenum_ = GOOGLE_ULONGLONG(0);
  clear_has_phonenum();
}
inline ::google::protobuf::uint64 tbFishAccountTable::phonenum() const {
  return phonenum_;
}
inline void tbFishAccountTable::set_phonenum(::google::protobuf::uint64 value) {
  set_has_phonenum();
  phonenum_ = value;
}

// -------------------------------------------------------------------

// tbFishPlayerData

// optional uint64 player_id = 1;
inline bool tbFishPlayerData::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbFishPlayerData::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbFishPlayerData::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbFishPlayerData::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 tbFishPlayerData::player_id() const {
  return player_id_;
}
inline void tbFishPlayerData::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string nickname = 2;
inline bool tbFishPlayerData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbFishPlayerData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbFishPlayerData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbFishPlayerData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& tbFishPlayerData::nickname() const {
  return *nickname_;
}
inline void tbFishPlayerData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void tbFishPlayerData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void tbFishPlayerData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbFishPlayerData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* tbFishPlayerData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbFishPlayerData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 faceid = 3;
inline bool tbFishPlayerData::has_faceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbFishPlayerData::set_has_faceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbFishPlayerData::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbFishPlayerData::clear_faceid() {
  faceid_ = 0u;
  clear_has_faceid();
}
inline ::google::protobuf::uint32 tbFishPlayerData::faceid() const {
  return faceid_;
}
inline void tbFishPlayerData::set_faceid(::google::protobuf::uint32 value) {
  set_has_faceid();
  faceid_ = value;
}

// optional uint64 regdate = 4;
inline bool tbFishPlayerData::has_regdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbFishPlayerData::set_has_regdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbFishPlayerData::clear_has_regdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbFishPlayerData::clear_regdate() {
  regdate_ = GOOGLE_ULONGLONG(0);
  clear_has_regdate();
}
inline ::google::protobuf::uint64 tbFishPlayerData::regdate() const {
  return regdate_;
}
inline void tbFishPlayerData::set_regdate(::google::protobuf::uint64 value) {
  set_has_regdate();
  regdate_ = value;
}

// optional uint32 gender = 5;
inline bool tbFishPlayerData::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbFishPlayerData::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbFishPlayerData::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbFishPlayerData::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 tbFishPlayerData::gender() const {
  return gender_;
}
inline void tbFishPlayerData::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// optional uint32 age = 6;
inline bool tbFishPlayerData::has_age() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbFishPlayerData::set_has_age() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbFishPlayerData::clear_has_age() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbFishPlayerData::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 tbFishPlayerData::age() const {
  return age_;
}
inline void tbFishPlayerData::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional uint64 phonenum = 8;
inline bool tbFishPlayerData::has_phonenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbFishPlayerData::set_has_phonenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbFishPlayerData::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbFishPlayerData::clear_phonenum() {
  phonenum_ = GOOGLE_ULONGLONG(0);
  clear_has_phonenum();
}
inline ::google::protobuf::uint64 tbFishPlayerData::phonenum() const {
  return phonenum_;
}
inline void tbFishPlayerData::set_phonenum(::google::protobuf::uint64 value) {
  set_has_phonenum();
  phonenum_ = value;
}

// optional uint64 jetton = 9;
inline bool tbFishPlayerData::has_jetton() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbFishPlayerData::set_has_jetton() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbFishPlayerData::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbFishPlayerData::clear_jetton() {
  jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_jetton();
}
inline ::google::protobuf::uint64 tbFishPlayerData::jetton() const {
  return jetton_;
}
inline void tbFishPlayerData::set_jetton(::google::protobuf::uint64 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional string ip = 11;
inline bool tbFishPlayerData::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbFishPlayerData::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbFishPlayerData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbFishPlayerData::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& tbFishPlayerData::ip() const {
  return *ip_;
}
inline void tbFishPlayerData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void tbFishPlayerData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void tbFishPlayerData::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbFishPlayerData::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* tbFishPlayerData::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbFishPlayerData::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 last_login_time = 12;
inline bool tbFishPlayerData::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbFishPlayerData::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbFishPlayerData::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbFishPlayerData::clear_last_login_time() {
  last_login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_login_time();
}
inline ::google::protobuf::uint64 tbFishPlayerData::last_login_time() const {
  return last_login_time_;
}
inline void tbFishPlayerData::set_last_login_time(::google::protobuf::uint64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint64 last_logout_time = 13;
inline bool tbFishPlayerData::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tbFishPlayerData::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tbFishPlayerData::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tbFishPlayerData::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_logout_time();
}
inline ::google::protobuf::uint64 tbFishPlayerData::last_logout_time() const {
  return last_logout_time_;
}
inline void tbFishPlayerData::set_last_logout_time(::google::protobuf::uint64 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// -------------------------------------------------------------------

// tbFishSnsPlayerSimpleData

// optional uint64 player_id = 1;
inline bool tbFishSnsPlayerSimpleData::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbFishSnsPlayerSimpleData::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbFishSnsPlayerSimpleData::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbFishSnsPlayerSimpleData::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 tbFishSnsPlayerSimpleData::player_id() const {
  return player_id_;
}
inline void tbFishSnsPlayerSimpleData::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string nickname = 2;
inline bool tbFishSnsPlayerSimpleData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbFishSnsPlayerSimpleData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbFishSnsPlayerSimpleData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbFishSnsPlayerSimpleData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& tbFishSnsPlayerSimpleData::nickname() const {
  return *nickname_;
}
inline void tbFishSnsPlayerSimpleData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void tbFishSnsPlayerSimpleData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void tbFishSnsPlayerSimpleData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbFishSnsPlayerSimpleData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* tbFishSnsPlayerSimpleData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbFishSnsPlayerSimpleData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 faceid = 3;
inline bool tbFishSnsPlayerSimpleData::has_faceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbFishSnsPlayerSimpleData::set_has_faceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbFishSnsPlayerSimpleData::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbFishSnsPlayerSimpleData::clear_faceid() {
  faceid_ = 0u;
  clear_has_faceid();
}
inline ::google::protobuf::uint32 tbFishSnsPlayerSimpleData::faceid() const {
  return faceid_;
}
inline void tbFishSnsPlayerSimpleData::set_faceid(::google::protobuf::uint32 value) {
  set_has_faceid();
  faceid_ = value;
}

// optional uint64 bank_jetton = 9;
inline bool tbFishSnsPlayerSimpleData::has_bank_jetton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbFishSnsPlayerSimpleData::set_has_bank_jetton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbFishSnsPlayerSimpleData::clear_has_bank_jetton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbFishSnsPlayerSimpleData::clear_bank_jetton() {
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_bank_jetton();
}
inline ::google::protobuf::uint64 tbFishSnsPlayerSimpleData::bank_jetton() const {
  return bank_jetton_;
}
inline void tbFishSnsPlayerSimpleData::set_bank_jetton(::google::protobuf::uint64 value) {
  set_has_bank_jetton();
  bank_jetton_ = value;
}

// optional uint64 bank_password = 10;
inline bool tbFishSnsPlayerSimpleData::has_bank_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbFishSnsPlayerSimpleData::set_has_bank_password() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbFishSnsPlayerSimpleData::clear_has_bank_password() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbFishSnsPlayerSimpleData::clear_bank_password() {
  bank_password_ = GOOGLE_ULONGLONG(0);
  clear_has_bank_password();
}
inline ::google::protobuf::uint64 tbFishSnsPlayerSimpleData::bank_password() const {
  return bank_password_;
}
inline void tbFishSnsPlayerSimpleData::set_bank_password(::google::protobuf::uint64 value) {
  set_has_bank_password();
  bank_password_ = value;
}

// optional uint64 last_login_time = 12;
inline bool tbFishSnsPlayerSimpleData::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbFishSnsPlayerSimpleData::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbFishSnsPlayerSimpleData::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbFishSnsPlayerSimpleData::clear_last_login_time() {
  last_login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_login_time();
}
inline ::google::protobuf::uint64 tbFishSnsPlayerSimpleData::last_login_time() const {
  return last_login_time_;
}
inline void tbFishSnsPlayerSimpleData::set_last_login_time(::google::protobuf::uint64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint64 last_logout_time = 13;
inline bool tbFishSnsPlayerSimpleData::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbFishSnsPlayerSimpleData::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbFishSnsPlayerSimpleData::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbFishSnsPlayerSimpleData::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_logout_time();
}
inline ::google::protobuf::uint64 tbFishSnsPlayerSimpleData::last_logout_time() const {
  return last_logout_time_;
}
inline void tbFishSnsPlayerSimpleData::set_last_logout_time(::google::protobuf::uint64 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// optional uint64 agent = 20;
inline bool tbFishSnsPlayerSimpleData::has_agent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbFishSnsPlayerSimpleData::set_has_agent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbFishSnsPlayerSimpleData::clear_has_agent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbFishSnsPlayerSimpleData::clear_agent() {
  agent_ = GOOGLE_ULONGLONG(0);
  clear_has_agent();
}
inline ::google::protobuf::uint64 tbFishSnsPlayerSimpleData::agent() const {
  return agent_;
}
inline void tbFishSnsPlayerSimpleData::set_agent(::google::protobuf::uint64 value) {
  set_has_agent();
  agent_ = value;
}

// -------------------------------------------------------------------

// tbFishSnsPlayerDetailData

// optional uint64 player_id = 1;
inline bool tbFishSnsPlayerDetailData::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbFishSnsPlayerDetailData::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbFishSnsPlayerDetailData::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbFishSnsPlayerDetailData::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 tbFishSnsPlayerDetailData::player_id() const {
  return player_id_;
}
inline void tbFishSnsPlayerDetailData::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBProto_2eproto__INCLUDED
