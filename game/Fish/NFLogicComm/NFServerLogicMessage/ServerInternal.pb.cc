// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerInternal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_PTWUserLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_PTWUserLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WTPPlayerLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WTPPlayerLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WorldToLogicLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WorldToLogicLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LogicToWorldLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LogicToWorldLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WTSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WTSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STWLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STWLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPlayerDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPlayerDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PTWPlayerReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PTWPlayerReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WTPPlayerReconnctRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WTPPlayerReconnctRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WTLPlayerReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WTLPlayerReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTWPlayerReconnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTWPlayerReconnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WTGPlayerReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WTGPlayerReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTWPlayerReconnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTWPlayerReconnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WTSPlayerReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WTSPlayerReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* STWPlayerReconnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STWPlayerReconnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTWLogoutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTWLogoutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WTLLogoutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WTLLogoutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WTSLogoutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WTSLogoutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSBankGetDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSBankGetDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTS_PlayerAddBankJettonReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTS_PlayerAddBankJettonReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STL_PlayerAddBankJettonRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STL_PlayerAddBankJettonRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTS_PlayerReduceBankJettonReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTS_PlayerReduceBankJettonReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STL_PlayerReduceBankJettonRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STL_PlayerReduceBankJettonRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_TS_QueryPlayerSimpleDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_TS_QueryPlayerSimpleDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_ST_QueryPlayerSimpleDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_ST_QueryPlayerSimpleDataRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_AccountState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerInternal_2eproto() {
  protobuf_AddDesc_ServerInternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerInternal.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_PTWUserLoginReq_descriptor_ = file->message_type(0);
  static const int Proto_PTWUserLoginReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, proxy_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, ext_data_),
  };
  Proto_PTWUserLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_PTWUserLoginReq_descriptor_,
      Proto_PTWUserLoginReq::default_instance_,
      Proto_PTWUserLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_PTWUserLoginReq));
  Proto_WTPPlayerLoginRsp_descriptor_ = file->message_type(1);
  static const int Proto_WTPPlayerLoginRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, logic_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, detail_data_),
  };
  Proto_WTPPlayerLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WTPPlayerLoginRsp_descriptor_,
      Proto_WTPPlayerLoginRsp::default_instance_,
      Proto_WTPPlayerLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WTPPlayerLoginRsp));
  Proto_WorldToLogicLoginReq_descriptor_ = file->message_type(2);
  static const int Proto_WorldToLogicLoginReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, proxy_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, ext_data_),
  };
  Proto_WorldToLogicLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WorldToLogicLoginReq_descriptor_,
      Proto_WorldToLogicLoginReq::default_instance_,
      Proto_WorldToLogicLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WorldToLogicLoginReq));
  Proto_LogicToWorldLoginRsp_descriptor_ = file->message_type(3);
  static const int Proto_LogicToWorldLoginRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, sns_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, detail_data_),
  };
  Proto_LogicToWorldLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LogicToWorldLoginRsp_descriptor_,
      Proto_LogicToWorldLoginRsp::default_instance_,
      Proto_LogicToWorldLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LogicToWorldLoginRsp));
  Proto_WTSLoginReq_descriptor_ = file->message_type(4);
  static const int Proto_WTSLoginReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, proxy_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, logic_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, sns_sync_),
  };
  Proto_WTSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WTSLoginReq_descriptor_,
      Proto_WTSLoginReq::default_instance_,
      Proto_WTSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WTSLoginReq));
  Proto_STWLoginRsp_descriptor_ = file->message_type(5);
  static const int Proto_STWLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWLoginRsp, user_id_),
  };
  Proto_STWLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STWLoginRsp_descriptor_,
      Proto_STWLoginRsp::default_instance_,
      Proto_STWLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STWLoginRsp));
  NotifyPlayerDisconnect_descriptor_ = file->message_type(6);
  static const int NotifyPlayerDisconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerDisconnect, player_id_),
  };
  NotifyPlayerDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPlayerDisconnect_descriptor_,
      NotifyPlayerDisconnect::default_instance_,
      NotifyPlayerDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPlayerDisconnect));
  PTWPlayerReconnectReq_descriptor_ = file->message_type(7);
  static const int PTWPlayerReconnectReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTWPlayerReconnectReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTWPlayerReconnectReq, proxy_bus_id_),
  };
  PTWPlayerReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PTWPlayerReconnectReq_descriptor_,
      PTWPlayerReconnectReq::default_instance_,
      PTWPlayerReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTWPlayerReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTWPlayerReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PTWPlayerReconnectReq));
  WTPPlayerReconnctRsp_descriptor_ = file->message_type(8);
  static const int WTPPlayerReconnctRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTPPlayerReconnctRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTPPlayerReconnctRsp, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTPPlayerReconnctRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTPPlayerReconnctRsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTPPlayerReconnctRsp, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTPPlayerReconnctRsp, logic_bus_id_),
  };
  WTPPlayerReconnctRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WTPPlayerReconnctRsp_descriptor_,
      WTPPlayerReconnctRsp::default_instance_,
      WTPPlayerReconnctRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTPPlayerReconnctRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTPPlayerReconnctRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WTPPlayerReconnctRsp));
  WTLPlayerReconnectReq_descriptor_ = file->message_type(9);
  static const int WTLPlayerReconnectReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLPlayerReconnectReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLPlayerReconnectReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLPlayerReconnectReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLPlayerReconnectReq, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLPlayerReconnectReq, proxy_bus_id_),
  };
  WTLPlayerReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WTLPlayerReconnectReq_descriptor_,
      WTLPlayerReconnectReq::default_instance_,
      WTLPlayerReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLPlayerReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLPlayerReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WTLPlayerReconnectReq));
  LTWPlayerReconnectRsp_descriptor_ = file->message_type(10);
  static const int LTWPlayerReconnectRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWPlayerReconnectRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWPlayerReconnectRsp, player_id_),
  };
  LTWPlayerReconnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTWPlayerReconnectRsp_descriptor_,
      LTWPlayerReconnectRsp::default_instance_,
      LTWPlayerReconnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWPlayerReconnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWPlayerReconnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTWPlayerReconnectRsp));
  WTGPlayerReconnectReq_descriptor_ = file->message_type(11);
  static const int WTGPlayerReconnectReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGPlayerReconnectReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGPlayerReconnectReq, proxy_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGPlayerReconnectReq, logic_bus_id_),
  };
  WTGPlayerReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WTGPlayerReconnectReq_descriptor_,
      WTGPlayerReconnectReq::default_instance_,
      WTGPlayerReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGPlayerReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGPlayerReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WTGPlayerReconnectReq));
  GTWPlayerReconnectRsp_descriptor_ = file->message_type(12);
  static const int GTWPlayerReconnectRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTWPlayerReconnectRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTWPlayerReconnectRsp, player_id_),
  };
  GTWPlayerReconnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTWPlayerReconnectRsp_descriptor_,
      GTWPlayerReconnectRsp::default_instance_,
      GTWPlayerReconnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTWPlayerReconnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTWPlayerReconnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTWPlayerReconnectRsp));
  WTSPlayerReconnectReq_descriptor_ = file->message_type(13);
  static const int WTSPlayerReconnectReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTSPlayerReconnectReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTSPlayerReconnectReq, logic_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTSPlayerReconnectReq, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTSPlayerReconnectReq, proxy_bus_id_),
  };
  WTSPlayerReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WTSPlayerReconnectReq_descriptor_,
      WTSPlayerReconnectReq::default_instance_,
      WTSPlayerReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTSPlayerReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTSPlayerReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WTSPlayerReconnectReq));
  STWPlayerReconnectRsp_descriptor_ = file->message_type(14);
  static const int STWPlayerReconnectRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STWPlayerReconnectRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STWPlayerReconnectRsp, player_id_),
  };
  STWPlayerReconnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STWPlayerReconnectRsp_descriptor_,
      STWPlayerReconnectRsp::default_instance_,
      STWPlayerReconnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STWPlayerReconnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STWPlayerReconnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STWPlayerReconnectRsp));
  Proto_LTWLogoutNotify_descriptor_ = file->message_type(15);
  static const int Proto_LTWLogoutNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWLogoutNotify, player_id_),
  };
  Proto_LTWLogoutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTWLogoutNotify_descriptor_,
      Proto_LTWLogoutNotify::default_instance_,
      Proto_LTWLogoutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWLogoutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWLogoutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTWLogoutNotify));
  Proto_WTLLogoutNotify_descriptor_ = file->message_type(16);
  static const int Proto_WTLLogoutNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLLogoutNotify, player_id_),
  };
  Proto_WTLLogoutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WTLLogoutNotify_descriptor_,
      Proto_WTLLogoutNotify::default_instance_,
      Proto_WTLLogoutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLLogoutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLLogoutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WTLLogoutNotify));
  Proto_WTSLogoutNotify_descriptor_ = file->message_type(17);
  static const int Proto_WTSLogoutNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLogoutNotify, player_id_),
  };
  Proto_WTSLogoutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WTSLogoutNotify_descriptor_,
      Proto_WTSLogoutNotify::default_instance_,
      Proto_WTSLogoutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLogoutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTSLogoutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WTSLogoutNotify));
  Proto_LTSBankGetDataReq_descriptor_ = file->message_type(18);
  static const int Proto_LTSBankGetDataReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSBankGetDataReq, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSBankGetDataReq, bank_password_),
  };
  Proto_LTSBankGetDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSBankGetDataReq_descriptor_,
      Proto_LTSBankGetDataReq::default_instance_,
      Proto_LTSBankGetDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSBankGetDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSBankGetDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSBankGetDataReq));
  Proto_LTS_PlayerAddBankJettonReq_descriptor_ = file->message_type(19);
  static const int Proto_LTS_PlayerAddBankJettonReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTS_PlayerAddBankJettonReq, add_jetton_),
  };
  Proto_LTS_PlayerAddBankJettonReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTS_PlayerAddBankJettonReq_descriptor_,
      Proto_LTS_PlayerAddBankJettonReq::default_instance_,
      Proto_LTS_PlayerAddBankJettonReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTS_PlayerAddBankJettonReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTS_PlayerAddBankJettonReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTS_PlayerAddBankJettonReq));
  Proto_STL_PlayerAddBankJettonRsp_descriptor_ = file->message_type(20);
  static const int Proto_STL_PlayerAddBankJettonRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerAddBankJettonRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerAddBankJettonRsp, add_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerAddBankJettonRsp, bank_jetton_),
  };
  Proto_STL_PlayerAddBankJettonRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STL_PlayerAddBankJettonRsp_descriptor_,
      Proto_STL_PlayerAddBankJettonRsp::default_instance_,
      Proto_STL_PlayerAddBankJettonRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerAddBankJettonRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerAddBankJettonRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STL_PlayerAddBankJettonRsp));
  Proto_LTS_PlayerReduceBankJettonReq_descriptor_ = file->message_type(21);
  static const int Proto_LTS_PlayerReduceBankJettonReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTS_PlayerReduceBankJettonReq, reduce_jetton_),
  };
  Proto_LTS_PlayerReduceBankJettonReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTS_PlayerReduceBankJettonReq_descriptor_,
      Proto_LTS_PlayerReduceBankJettonReq::default_instance_,
      Proto_LTS_PlayerReduceBankJettonReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTS_PlayerReduceBankJettonReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTS_PlayerReduceBankJettonReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTS_PlayerReduceBankJettonReq));
  Proto_STL_PlayerReduceBankJettonRsp_descriptor_ = file->message_type(22);
  static const int Proto_STL_PlayerReduceBankJettonRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerReduceBankJettonRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerReduceBankJettonRsp, reduce_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerReduceBankJettonRsp, bank_jetton_),
  };
  Proto_STL_PlayerReduceBankJettonRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STL_PlayerReduceBankJettonRsp_descriptor_,
      Proto_STL_PlayerReduceBankJettonRsp::default_instance_,
      Proto_STL_PlayerReduceBankJettonRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerReduceBankJettonRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STL_PlayerReduceBankJettonRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STL_PlayerReduceBankJettonRsp));
  Proto_TS_QueryPlayerSimpleDataReq_descriptor_ = file->message_type(23);
  static const int Proto_TS_QueryPlayerSimpleDataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TS_QueryPlayerSimpleDataReq, query_user_id_),
  };
  Proto_TS_QueryPlayerSimpleDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_TS_QueryPlayerSimpleDataReq_descriptor_,
      Proto_TS_QueryPlayerSimpleDataReq::default_instance_,
      Proto_TS_QueryPlayerSimpleDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TS_QueryPlayerSimpleDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TS_QueryPlayerSimpleDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_TS_QueryPlayerSimpleDataReq));
  Proto_ST_QueryPlayerSimpleDataRsp_descriptor_ = file->message_type(24);
  static const int Proto_ST_QueryPlayerSimpleDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ST_QueryPlayerSimpleDataRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ST_QueryPlayerSimpleDataRsp, query_user_list_),
  };
  Proto_ST_QueryPlayerSimpleDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_ST_QueryPlayerSimpleDataRsp_descriptor_,
      Proto_ST_QueryPlayerSimpleDataRsp::default_instance_,
      Proto_ST_QueryPlayerSimpleDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ST_QueryPlayerSimpleDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ST_QueryPlayerSimpleDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_ST_QueryPlayerSimpleDataRsp));
  Proto_AccountState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerInternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_PTWUserLoginReq_descriptor_, &Proto_PTWUserLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WTPPlayerLoginRsp_descriptor_, &Proto_WTPPlayerLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WorldToLogicLoginReq_descriptor_, &Proto_WorldToLogicLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LogicToWorldLoginRsp_descriptor_, &Proto_LogicToWorldLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WTSLoginReq_descriptor_, &Proto_WTSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STWLoginRsp_descriptor_, &Proto_STWLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPlayerDisconnect_descriptor_, &NotifyPlayerDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PTWPlayerReconnectReq_descriptor_, &PTWPlayerReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WTPPlayerReconnctRsp_descriptor_, &WTPPlayerReconnctRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WTLPlayerReconnectReq_descriptor_, &WTLPlayerReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTWPlayerReconnectRsp_descriptor_, &LTWPlayerReconnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WTGPlayerReconnectReq_descriptor_, &WTGPlayerReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTWPlayerReconnectRsp_descriptor_, &GTWPlayerReconnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WTSPlayerReconnectReq_descriptor_, &WTSPlayerReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STWPlayerReconnectRsp_descriptor_, &STWPlayerReconnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTWLogoutNotify_descriptor_, &Proto_LTWLogoutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WTLLogoutNotify_descriptor_, &Proto_WTLLogoutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WTSLogoutNotify_descriptor_, &Proto_WTSLogoutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSBankGetDataReq_descriptor_, &Proto_LTSBankGetDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTS_PlayerAddBankJettonReq_descriptor_, &Proto_LTS_PlayerAddBankJettonReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STL_PlayerAddBankJettonRsp_descriptor_, &Proto_STL_PlayerAddBankJettonRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTS_PlayerReduceBankJettonReq_descriptor_, &Proto_LTS_PlayerReduceBankJettonReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STL_PlayerReduceBankJettonRsp_descriptor_, &Proto_STL_PlayerReduceBankJettonRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_TS_QueryPlayerSimpleDataReq_descriptor_, &Proto_TS_QueryPlayerSimpleDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_ST_QueryPlayerSimpleDataRsp_descriptor_, &Proto_ST_QueryPlayerSimpleDataRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerInternal_2eproto() {
  delete Proto_PTWUserLoginReq::default_instance_;
  delete Proto_PTWUserLoginReq_reflection_;
  delete Proto_WTPPlayerLoginRsp::default_instance_;
  delete Proto_WTPPlayerLoginRsp_reflection_;
  delete Proto_WorldToLogicLoginReq::default_instance_;
  delete Proto_WorldToLogicLoginReq_reflection_;
  delete Proto_LogicToWorldLoginRsp::default_instance_;
  delete Proto_LogicToWorldLoginRsp_reflection_;
  delete Proto_WTSLoginReq::default_instance_;
  delete Proto_WTSLoginReq_reflection_;
  delete Proto_STWLoginRsp::default_instance_;
  delete Proto_STWLoginRsp_reflection_;
  delete NotifyPlayerDisconnect::default_instance_;
  delete NotifyPlayerDisconnect_reflection_;
  delete PTWPlayerReconnectReq::default_instance_;
  delete PTWPlayerReconnectReq_reflection_;
  delete WTPPlayerReconnctRsp::default_instance_;
  delete WTPPlayerReconnctRsp_reflection_;
  delete WTLPlayerReconnectReq::default_instance_;
  delete WTLPlayerReconnectReq_reflection_;
  delete LTWPlayerReconnectRsp::default_instance_;
  delete LTWPlayerReconnectRsp_reflection_;
  delete WTGPlayerReconnectReq::default_instance_;
  delete WTGPlayerReconnectReq_reflection_;
  delete GTWPlayerReconnectRsp::default_instance_;
  delete GTWPlayerReconnectRsp_reflection_;
  delete WTSPlayerReconnectReq::default_instance_;
  delete WTSPlayerReconnectReq_reflection_;
  delete STWPlayerReconnectRsp::default_instance_;
  delete STWPlayerReconnectRsp_reflection_;
  delete Proto_LTWLogoutNotify::default_instance_;
  delete Proto_LTWLogoutNotify_reflection_;
  delete Proto_WTLLogoutNotify::default_instance_;
  delete Proto_WTLLogoutNotify_reflection_;
  delete Proto_WTSLogoutNotify::default_instance_;
  delete Proto_WTSLogoutNotify_reflection_;
  delete Proto_LTSBankGetDataReq::default_instance_;
  delete Proto_LTSBankGetDataReq_reflection_;
  delete Proto_LTS_PlayerAddBankJettonReq::default_instance_;
  delete Proto_LTS_PlayerAddBankJettonReq_reflection_;
  delete Proto_STL_PlayerAddBankJettonRsp::default_instance_;
  delete Proto_STL_PlayerAddBankJettonRsp_reflection_;
  delete Proto_LTS_PlayerReduceBankJettonReq::default_instance_;
  delete Proto_LTS_PlayerReduceBankJettonReq_reflection_;
  delete Proto_STL_PlayerReduceBankJettonRsp::default_instance_;
  delete Proto_STL_PlayerReduceBankJettonRsp_reflection_;
  delete Proto_TS_QueryPlayerSimpleDataReq::default_instance_;
  delete Proto_TS_QueryPlayerSimpleDataReq_reflection_;
  delete Proto_ST_QueryPlayerSimpleDataRsp::default_instance_;
  delete Proto_ST_QueryPlayerSimpleDataRsp_reflection_;
}

void protobuf_AddDesc_ServerInternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ServerInternal.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\032\tCom.proto\"\233\001\n\025Proto_PTW"
    "UserLoginReq\022\017\n\007user_id\030\001 \001(\004\022\017\n\007account"
    "\030\002 \001(\t\022\024\n\014proxy_bus_id\030\003 \001(\r\022\021\n\tclient_i"
    "p\030\004 \001(\t\0227\n\010ext_data\030\005 \001(\0132%.proto_ff.Pro"
    "to_UserLoginExternalData\"\302\001\n\027Proto_WTPPl"
    "ayerLoginRsp\022\016\n\006result\030\001 \001(\005\022\017\n\007user_id\030"
    "\002 \001(\004\022\017\n\007game_id\030\003 \001(\r\022\017\n\007room_id\030\004 \001(\r\022"
    "\023\n\013game_bus_id\030\005 \001(\r\022\024\n\014logic_bus_id\030\006 \001"
    "(\r\0229\n\013detail_data\030\007 \001(\0132$.proto_ff.Proto"
    "_UserDetailCommonData\"\306\001\n\032Proto_WorldToL"
    "ogicLoginReq\022\017\n\007user_id\030\001 \001(\004\022\017\n\007game_id"
    "\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\r\022\023\n\013game_bus_id\030\004"
    " \001(\r\022\024\n\014proxy_bus_id\030\005 \001(\r\022\021\n\tclient_ip\030"
    "\007 \001(\t\0227\n\010ext_data\030\010 \001(\0132%.proto_ff.Proto"
    "_UserLoginExternalData\"\247\001\n\032Proto_LogicTo"
    "WorldLoginRsp\022\016\n\006result\030\001 \001(\r\022\017\n\007user_id"
    "\030\002 \001(\004\022-\n\010sns_sync\030\003 \001(\0132\033.proto_ff.Prot"
    "o_LTSSyncData\0229\n\013detail_data\030\004 \001(\0132$.pro"
    "to_ff.Proto_UserDetailCommonData\"\311\001\n\021Pro"
    "to_WTSLoginReq\022\017\n\007user_id\030\001 \001(\004\022\017\n\007game_"
    "id\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\r\022\023\n\013game_bus_id"
    "\030\004 \001(\r\022\024\n\014proxy_bus_id\030\005 \001(\r\022\021\n\tclient_i"
    "p\030\007 \001(\t\022\024\n\014logic_bus_id\030\010 \001(\r\022-\n\010sns_syn"
    "c\030\t \001(\0132\033.proto_ff.Proto_LTSSyncData\"4\n\021"
    "Proto_STWLoginRsp\022\016\n\006result\030\001 \001(\r\022\017\n\007use"
    "r_id\030\002 \001(\004\"+\n\026NotifyPlayerDisconnect\022\021\n\t"
    "player_id\030\001 \001(\004\"@\n\025PTWPlayerReconnectReq"
    "\022\021\n\tplayer_id\030\001 \001(\004\022\024\n\014proxy_bus_id\030\002 \001("
    "\r\"\206\001\n\024WTPPlayerReconnctRsp\022\016\n\006result\030\001 \001"
    "(\005\022\021\n\tplayer_id\030\002 \001(\004\022\017\n\007game_id\030\003 \001(\r\022\017"
    "\n\007room_id\030\004 \001(\r\022\023\n\013game_bus_id\030\005 \001(\r\022\024\n\014"
    "logic_bus_id\030\006 \001(\r\"w\n\025WTLPlayerReconnect"
    "Req\022\021\n\tplayer_id\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022"
    "\017\n\007room_id\030\003 \001(\r\022\023\n\013game_bus_id\030\004 \001(\r\022\024\n"
    "\014proxy_bus_id\030\006 \001(\r\":\n\025LTWPlayerReconnec"
    "tRsp\022\016\n\006result\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\004\""
    "V\n\025WTGPlayerReconnectReq\022\021\n\tplayer_id\030\001 "
    "\001(\004\022\024\n\014proxy_bus_id\030\002 \001(\r\022\024\n\014logic_bus_i"
    "d\030\003 \001(\r\":\n\025GTWPlayerReconnectRsp\022\016\n\006resu"
    "lt\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\004\"k\n\025WTSPlayer"
    "ReconnectReq\022\021\n\tplayer_id\030\001 \001(\004\022\024\n\014logic"
    "_bus_id\030\002 \001(\r\022\023\n\013game_bus_id\030\003 \001(\r\022\024\n\014pr"
    "oxy_bus_id\030\004 \001(\r\":\n\025STWPlayerReconnectRs"
    "p\022\016\n\006result\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\004\"*\n\025"
    "Proto_LTWLogoutNotify\022\021\n\tplayer_id\030\001 \001(\004"
    "\"*\n\025Proto_WTLLogoutNotify\022\021\n\tplayer_id\030\001"
    " \001(\004\"*\n\025Proto_WTSLogoutNotify\022\021\n\tplayer_"
    "id\030\001 \001(\004\"@\n\027Proto_LTSBankGetDataReq\022\016\n\006j"
    "etton\030\001 \001(\004\022\025\n\rbank_password\030\002 \001(\t\"6\n Pr"
    "oto_LTS_PlayerAddBankJettonReq\022\022\n\nadd_je"
    "tton\030\001 \001(\004\"]\n Proto_STL_PlayerAddBankJet"
    "tonRsp\022\020\n\010ret_code\030\001 \001(\005\022\022\n\nadd_jetton\030\002"
    " \001(\004\022\023\n\013bank_jetton\030\003 \001(\004\"<\n#Proto_LTS_P"
    "layerReduceBankJettonReq\022\025\n\rreduce_jetto"
    "n\030\001 \001(\004\"c\n#Proto_STL_PlayerReduceBankJet"
    "tonRsp\022\020\n\010ret_code\030\001 \001(\005\022\025\n\rreduce_jetto"
    "n\030\002 \001(\004\022\023\n\013bank_jetton\030\003 \001(\004\":\n!Proto_TS"
    "_QueryPlayerSimpleDataReq\022\025\n\rquery_user_"
    "id\030\001 \003(\004\"l\n!Proto_ST_QueryPlayerSimpleDa"
    "taRsp\022\016\n\006result\030\001 \001(\005\0227\n\017query_user_list"
    "\030\002 \003(\0132\036.proto_ff.Proto_UserSimpleData*a"
    "\n\022Proto_AccountState\022\025\n\021E_ACCOUNTSTATE_O"
    "K\020\000\022\031\n\025E_ACCOUNTSTATE_FREEZE\020\001\022\031\n\025E_ACCO"
    "UNTSTATE_FORBIT\020\002", 2577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerInternal.proto", &protobuf_RegisterTypes);
  Proto_PTWUserLoginReq::default_instance_ = new Proto_PTWUserLoginReq();
  Proto_WTPPlayerLoginRsp::default_instance_ = new Proto_WTPPlayerLoginRsp();
  Proto_WorldToLogicLoginReq::default_instance_ = new Proto_WorldToLogicLoginReq();
  Proto_LogicToWorldLoginRsp::default_instance_ = new Proto_LogicToWorldLoginRsp();
  Proto_WTSLoginReq::default_instance_ = new Proto_WTSLoginReq();
  Proto_STWLoginRsp::default_instance_ = new Proto_STWLoginRsp();
  NotifyPlayerDisconnect::default_instance_ = new NotifyPlayerDisconnect();
  PTWPlayerReconnectReq::default_instance_ = new PTWPlayerReconnectReq();
  WTPPlayerReconnctRsp::default_instance_ = new WTPPlayerReconnctRsp();
  WTLPlayerReconnectReq::default_instance_ = new WTLPlayerReconnectReq();
  LTWPlayerReconnectRsp::default_instance_ = new LTWPlayerReconnectRsp();
  WTGPlayerReconnectReq::default_instance_ = new WTGPlayerReconnectReq();
  GTWPlayerReconnectRsp::default_instance_ = new GTWPlayerReconnectRsp();
  WTSPlayerReconnectReq::default_instance_ = new WTSPlayerReconnectReq();
  STWPlayerReconnectRsp::default_instance_ = new STWPlayerReconnectRsp();
  Proto_LTWLogoutNotify::default_instance_ = new Proto_LTWLogoutNotify();
  Proto_WTLLogoutNotify::default_instance_ = new Proto_WTLLogoutNotify();
  Proto_WTSLogoutNotify::default_instance_ = new Proto_WTSLogoutNotify();
  Proto_LTSBankGetDataReq::default_instance_ = new Proto_LTSBankGetDataReq();
  Proto_LTS_PlayerAddBankJettonReq::default_instance_ = new Proto_LTS_PlayerAddBankJettonReq();
  Proto_STL_PlayerAddBankJettonRsp::default_instance_ = new Proto_STL_PlayerAddBankJettonRsp();
  Proto_LTS_PlayerReduceBankJettonReq::default_instance_ = new Proto_LTS_PlayerReduceBankJettonReq();
  Proto_STL_PlayerReduceBankJettonRsp::default_instance_ = new Proto_STL_PlayerReduceBankJettonRsp();
  Proto_TS_QueryPlayerSimpleDataReq::default_instance_ = new Proto_TS_QueryPlayerSimpleDataReq();
  Proto_ST_QueryPlayerSimpleDataRsp::default_instance_ = new Proto_ST_QueryPlayerSimpleDataRsp();
  Proto_PTWUserLoginReq::default_instance_->InitAsDefaultInstance();
  Proto_WTPPlayerLoginRsp::default_instance_->InitAsDefaultInstance();
  Proto_WorldToLogicLoginReq::default_instance_->InitAsDefaultInstance();
  Proto_LogicToWorldLoginRsp::default_instance_->InitAsDefaultInstance();
  Proto_WTSLoginReq::default_instance_->InitAsDefaultInstance();
  Proto_STWLoginRsp::default_instance_->InitAsDefaultInstance();
  NotifyPlayerDisconnect::default_instance_->InitAsDefaultInstance();
  PTWPlayerReconnectReq::default_instance_->InitAsDefaultInstance();
  WTPPlayerReconnctRsp::default_instance_->InitAsDefaultInstance();
  WTLPlayerReconnectReq::default_instance_->InitAsDefaultInstance();
  LTWPlayerReconnectRsp::default_instance_->InitAsDefaultInstance();
  WTGPlayerReconnectReq::default_instance_->InitAsDefaultInstance();
  GTWPlayerReconnectRsp::default_instance_->InitAsDefaultInstance();
  WTSPlayerReconnectReq::default_instance_->InitAsDefaultInstance();
  STWPlayerReconnectRsp::default_instance_->InitAsDefaultInstance();
  Proto_LTWLogoutNotify::default_instance_->InitAsDefaultInstance();
  Proto_WTLLogoutNotify::default_instance_->InitAsDefaultInstance();
  Proto_WTSLogoutNotify::default_instance_->InitAsDefaultInstance();
  Proto_LTSBankGetDataReq::default_instance_->InitAsDefaultInstance();
  Proto_LTS_PlayerAddBankJettonReq::default_instance_->InitAsDefaultInstance();
  Proto_STL_PlayerAddBankJettonRsp::default_instance_->InitAsDefaultInstance();
  Proto_LTS_PlayerReduceBankJettonReq::default_instance_->InitAsDefaultInstance();
  Proto_STL_PlayerReduceBankJettonRsp::default_instance_->InitAsDefaultInstance();
  Proto_TS_QueryPlayerSimpleDataReq::default_instance_->InitAsDefaultInstance();
  Proto_ST_QueryPlayerSimpleDataRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerInternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerInternal_2eproto {
  StaticDescriptorInitializer_ServerInternal_2eproto() {
    protobuf_AddDesc_ServerInternal_2eproto();
  }
} static_descriptor_initializer_ServerInternal_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_AccountState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_AccountState_descriptor_;
}
bool Proto_AccountState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_PTWUserLoginReq::kUserIdFieldNumber;
const int Proto_PTWUserLoginReq::kAccountFieldNumber;
const int Proto_PTWUserLoginReq::kProxyBusIdFieldNumber;
const int Proto_PTWUserLoginReq::kClientIpFieldNumber;
const int Proto_PTWUserLoginReq::kExtDataFieldNumber;
#endif  // !_MSC_VER

Proto_PTWUserLoginReq::Proto_PTWUserLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_PTWUserLoginReq::InitAsDefaultInstance() {
  ext_data_ = const_cast< ::proto_ff::Proto_UserLoginExternalData*>(&::proto_ff::Proto_UserLoginExternalData::default_instance());
}

Proto_PTWUserLoginReq::Proto_PTWUserLoginReq(const Proto_PTWUserLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_PTWUserLoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proxy_bus_id_ = 0u;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_PTWUserLoginReq::~Proto_PTWUserLoginReq() {
  SharedDtor();
}

void Proto_PTWUserLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (this != default_instance_) {
    delete ext_data_;
  }
}

void Proto_PTWUserLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_PTWUserLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_PTWUserLoginReq_descriptor_;
}

const Proto_PTWUserLoginReq& Proto_PTWUserLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_PTWUserLoginReq* Proto_PTWUserLoginReq::default_instance_ = NULL;

Proto_PTWUserLoginReq* Proto_PTWUserLoginReq::New() const {
  return new Proto_PTWUserLoginReq;
}

void Proto_PTWUserLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    proxy_bus_id_ = 0u;
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::proto_ff::Proto_UserLoginExternalData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_PTWUserLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ext_data;
        break;
      }

      // optional .proto_ff.Proto_UserLoginExternalData ext_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_PTWUserLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 proxy_bus_id = 3;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proxy_bus_id(), output);
  }

  // optional string client_ip = 4;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_ip(), output);
  }

  // optional .proto_ff.Proto_UserLoginExternalData ext_data = 5;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ext_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_PTWUserLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 proxy_bus_id = 3;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->proxy_bus_id(), target);
  }

  // optional string client_ip = 4;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ip(), target);
  }

  // optional .proto_ff.Proto_UserLoginExternalData ext_data = 5;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ext_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_PTWUserLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 proxy_bus_id = 3;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

    // optional string client_ip = 4;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional .proto_ff.Proto_UserLoginExternalData ext_data = 5;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_PTWUserLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_PTWUserLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_PTWUserLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_PTWUserLoginReq::MergeFrom(const Proto_PTWUserLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_ext_data()) {
      mutable_ext_data()->::proto_ff::Proto_UserLoginExternalData::MergeFrom(from.ext_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_PTWUserLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_PTWUserLoginReq::CopyFrom(const Proto_PTWUserLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_PTWUserLoginReq::IsInitialized() const {

  return true;
}

void Proto_PTWUserLoginReq::Swap(Proto_PTWUserLoginReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(account_, other->account_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_PTWUserLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_PTWUserLoginReq_descriptor_;
  metadata.reflection = Proto_PTWUserLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WTPPlayerLoginRsp::kResultFieldNumber;
const int Proto_WTPPlayerLoginRsp::kUserIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kGameIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kRoomIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kGameBusIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kLogicBusIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kDetailDataFieldNumber;
#endif  // !_MSC_VER

Proto_WTPPlayerLoginRsp::Proto_WTPPlayerLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WTPPlayerLoginRsp::InitAsDefaultInstance() {
  detail_data_ = const_cast< ::proto_ff::Proto_UserDetailCommonData*>(&::proto_ff::Proto_UserDetailCommonData::default_instance());
}

Proto_WTPPlayerLoginRsp::Proto_WTPPlayerLoginRsp(const Proto_WTPPlayerLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WTPPlayerLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  logic_bus_id_ = 0u;
  detail_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WTPPlayerLoginRsp::~Proto_WTPPlayerLoginRsp() {
  SharedDtor();
}

void Proto_WTPPlayerLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_data_;
  }
}

void Proto_WTPPlayerLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WTPPlayerLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WTPPlayerLoginRsp_descriptor_;
}

const Proto_WTPPlayerLoginRsp& Proto_WTPPlayerLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_WTPPlayerLoginRsp* Proto_WTPPlayerLoginRsp::default_instance_ = NULL;

Proto_WTPPlayerLoginRsp* Proto_WTPPlayerLoginRsp::New() const {
  return new Proto_WTPPlayerLoginRsp;
}

void Proto_WTPPlayerLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    logic_bus_id_ = 0u;
    if (has_detail_data()) {
      if (detail_data_ != NULL) detail_data_->::proto_ff::Proto_UserDetailCommonData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WTPPlayerLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_detail_data;
        break;
      }

      // optional .proto_ff.Proto_UserDetailCommonData detail_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WTPPlayerLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_id(), output);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 5;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_bus_id(), output);
  }

  // optional uint32 logic_bus_id = 6;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logic_bus_id(), output);
  }

  // optional .proto_ff.Proto_UserDetailCommonData detail_data = 7;
  if (has_detail_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->detail_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WTPPlayerLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_id(), target);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 5;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_bus_id(), target);
  }

  // optional uint32 logic_bus_id = 6;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logic_bus_id(), target);
  }

  // optional .proto_ff.Proto_UserDetailCommonData detail_data = 7;
  if (has_detail_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->detail_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WTPPlayerLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 5;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 logic_bus_id = 6;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

    // optional .proto_ff.Proto_UserDetailCommonData detail_data = 7;
    if (has_detail_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WTPPlayerLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WTPPlayerLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WTPPlayerLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WTPPlayerLoginRsp::MergeFrom(const Proto_WTPPlayerLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
    if (from.has_detail_data()) {
      mutable_detail_data()->::proto_ff::Proto_UserDetailCommonData::MergeFrom(from.detail_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WTPPlayerLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WTPPlayerLoginRsp::CopyFrom(const Proto_WTPPlayerLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WTPPlayerLoginRsp::IsInitialized() const {

  return true;
}

void Proto_WTPPlayerLoginRsp::Swap(Proto_WTPPlayerLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(detail_data_, other->detail_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WTPPlayerLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WTPPlayerLoginRsp_descriptor_;
  metadata.reflection = Proto_WTPPlayerLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WorldToLogicLoginReq::kUserIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kGameIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kRoomIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kGameBusIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kProxyBusIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kClientIpFieldNumber;
const int Proto_WorldToLogicLoginReq::kExtDataFieldNumber;
#endif  // !_MSC_VER

Proto_WorldToLogicLoginReq::Proto_WorldToLogicLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WorldToLogicLoginReq::InitAsDefaultInstance() {
  ext_data_ = const_cast< ::proto_ff::Proto_UserLoginExternalData*>(&::proto_ff::Proto_UserLoginExternalData::default_instance());
}

Proto_WorldToLogicLoginReq::Proto_WorldToLogicLoginReq(const Proto_WorldToLogicLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WorldToLogicLoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  proxy_bus_id_ = 0u;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WorldToLogicLoginReq::~Proto_WorldToLogicLoginReq() {
  SharedDtor();
}

void Proto_WorldToLogicLoginReq::SharedDtor() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (this != default_instance_) {
    delete ext_data_;
  }
}

void Proto_WorldToLogicLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WorldToLogicLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WorldToLogicLoginReq_descriptor_;
}

const Proto_WorldToLogicLoginReq& Proto_WorldToLogicLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_WorldToLogicLoginReq* Proto_WorldToLogicLoginReq::default_instance_ = NULL;

Proto_WorldToLogicLoginReq* Proto_WorldToLogicLoginReq::New() const {
  return new Proto_WorldToLogicLoginReq;
}

void Proto_WorldToLogicLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    proxy_bus_id_ = 0u;
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::proto_ff::Proto_UserLoginExternalData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WorldToLogicLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ext_data;
        break;
      }

      // optional .proto_ff.Proto_UserLoginExternalData ext_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WorldToLogicLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_bus_id(), output);
  }

  // optional uint32 proxy_bus_id = 5;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->proxy_bus_id(), output);
  }

  // optional string client_ip = 7;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->client_ip(), output);
  }

  // optional .proto_ff.Proto_UserLoginExternalData ext_data = 8;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ext_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WorldToLogicLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_bus_id(), target);
  }

  // optional uint32 proxy_bus_id = 5;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->proxy_bus_id(), target);
  }

  // optional string client_ip = 7;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->client_ip(), target);
  }

  // optional .proto_ff.Proto_UserLoginExternalData ext_data = 8;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ext_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WorldToLogicLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 4;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 proxy_bus_id = 5;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

    // optional string client_ip = 7;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional .proto_ff.Proto_UserLoginExternalData ext_data = 8;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WorldToLogicLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WorldToLogicLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WorldToLogicLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WorldToLogicLoginReq::MergeFrom(const Proto_WorldToLogicLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_ext_data()) {
      mutable_ext_data()->::proto_ff::Proto_UserLoginExternalData::MergeFrom(from.ext_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WorldToLogicLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WorldToLogicLoginReq::CopyFrom(const Proto_WorldToLogicLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WorldToLogicLoginReq::IsInitialized() const {

  return true;
}

void Proto_WorldToLogicLoginReq::Swap(Proto_WorldToLogicLoginReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WorldToLogicLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WorldToLogicLoginReq_descriptor_;
  metadata.reflection = Proto_WorldToLogicLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LogicToWorldLoginRsp::kResultFieldNumber;
const int Proto_LogicToWorldLoginRsp::kUserIdFieldNumber;
const int Proto_LogicToWorldLoginRsp::kSnsSyncFieldNumber;
const int Proto_LogicToWorldLoginRsp::kDetailDataFieldNumber;
#endif  // !_MSC_VER

Proto_LogicToWorldLoginRsp::Proto_LogicToWorldLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LogicToWorldLoginRsp::InitAsDefaultInstance() {
  sns_sync_ = const_cast< ::proto_ff::Proto_LTSSyncData*>(&::proto_ff::Proto_LTSSyncData::default_instance());
  detail_data_ = const_cast< ::proto_ff::Proto_UserDetailCommonData*>(&::proto_ff::Proto_UserDetailCommonData::default_instance());
}

Proto_LogicToWorldLoginRsp::Proto_LogicToWorldLoginRsp(const Proto_LogicToWorldLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LogicToWorldLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  user_id_ = GOOGLE_ULONGLONG(0);
  sns_sync_ = NULL;
  detail_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LogicToWorldLoginRsp::~Proto_LogicToWorldLoginRsp() {
  SharedDtor();
}

void Proto_LogicToWorldLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete sns_sync_;
    delete detail_data_;
  }
}

void Proto_LogicToWorldLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LogicToWorldLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LogicToWorldLoginRsp_descriptor_;
}

const Proto_LogicToWorldLoginRsp& Proto_LogicToWorldLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_LogicToWorldLoginRsp* Proto_LogicToWorldLoginRsp::default_instance_ = NULL;

Proto_LogicToWorldLoginRsp* Proto_LogicToWorldLoginRsp::New() const {
  return new Proto_LogicToWorldLoginRsp;
}

void Proto_LogicToWorldLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_sns_sync()) {
      if (sns_sync_ != NULL) sns_sync_->::proto_ff::Proto_LTSSyncData::Clear();
    }
    if (has_detail_data()) {
      if (detail_data_ != NULL) detail_data_->::proto_ff::Proto_UserDetailCommonData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LogicToWorldLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sns_sync;
        break;
      }

      // optional .proto_ff.Proto_LTSSyncData sns_sync = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sns_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sns_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_detail_data;
        break;
      }

      // optional .proto_ff.Proto_UserDetailCommonData detail_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LogicToWorldLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional .proto_ff.Proto_LTSSyncData sns_sync = 3;
  if (has_sns_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sns_sync(), output);
  }

  // optional .proto_ff.Proto_UserDetailCommonData detail_data = 4;
  if (has_detail_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->detail_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LogicToWorldLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional .proto_ff.Proto_LTSSyncData sns_sync = 3;
  if (has_sns_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sns_sync(), target);
  }

  // optional .proto_ff.Proto_UserDetailCommonData detail_data = 4;
  if (has_detail_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->detail_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LogicToWorldLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_ff.Proto_LTSSyncData sns_sync = 3;
    if (has_sns_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sns_sync());
    }

    // optional .proto_ff.Proto_UserDetailCommonData detail_data = 4;
    if (has_detail_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LogicToWorldLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LogicToWorldLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LogicToWorldLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LogicToWorldLoginRsp::MergeFrom(const Proto_LogicToWorldLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sns_sync()) {
      mutable_sns_sync()->::proto_ff::Proto_LTSSyncData::MergeFrom(from.sns_sync());
    }
    if (from.has_detail_data()) {
      mutable_detail_data()->::proto_ff::Proto_UserDetailCommonData::MergeFrom(from.detail_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LogicToWorldLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LogicToWorldLoginRsp::CopyFrom(const Proto_LogicToWorldLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LogicToWorldLoginRsp::IsInitialized() const {

  return true;
}

void Proto_LogicToWorldLoginRsp::Swap(Proto_LogicToWorldLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(sns_sync_, other->sns_sync_);
    std::swap(detail_data_, other->detail_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LogicToWorldLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LogicToWorldLoginRsp_descriptor_;
  metadata.reflection = Proto_LogicToWorldLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WTSLoginReq::kUserIdFieldNumber;
const int Proto_WTSLoginReq::kGameIdFieldNumber;
const int Proto_WTSLoginReq::kRoomIdFieldNumber;
const int Proto_WTSLoginReq::kGameBusIdFieldNumber;
const int Proto_WTSLoginReq::kProxyBusIdFieldNumber;
const int Proto_WTSLoginReq::kClientIpFieldNumber;
const int Proto_WTSLoginReq::kLogicBusIdFieldNumber;
const int Proto_WTSLoginReq::kSnsSyncFieldNumber;
#endif  // !_MSC_VER

Proto_WTSLoginReq::Proto_WTSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WTSLoginReq::InitAsDefaultInstance() {
  sns_sync_ = const_cast< ::proto_ff::Proto_LTSSyncData*>(&::proto_ff::Proto_LTSSyncData::default_instance());
}

Proto_WTSLoginReq::Proto_WTSLoginReq(const Proto_WTSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WTSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  proxy_bus_id_ = 0u;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logic_bus_id_ = 0u;
  sns_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WTSLoginReq::~Proto_WTSLoginReq() {
  SharedDtor();
}

void Proto_WTSLoginReq::SharedDtor() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (this != default_instance_) {
    delete sns_sync_;
  }
}

void Proto_WTSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WTSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WTSLoginReq_descriptor_;
}

const Proto_WTSLoginReq& Proto_WTSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_WTSLoginReq* Proto_WTSLoginReq::default_instance_ = NULL;

Proto_WTSLoginReq* Proto_WTSLoginReq::New() const {
  return new Proto_WTSLoginReq;
}

void Proto_WTSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    proxy_bus_id_ = 0u;
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    logic_bus_id_ = 0u;
    if (has_sns_sync()) {
      if (sns_sync_ != NULL) sns_sync_->::proto_ff::Proto_LTSSyncData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WTSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sns_sync;
        break;
      }

      // optional .proto_ff.Proto_LTSSyncData sns_sync = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sns_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sns_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WTSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_bus_id(), output);
  }

  // optional uint32 proxy_bus_id = 5;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->proxy_bus_id(), output);
  }

  // optional string client_ip = 7;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->client_ip(), output);
  }

  // optional uint32 logic_bus_id = 8;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->logic_bus_id(), output);
  }

  // optional .proto_ff.Proto_LTSSyncData sns_sync = 9;
  if (has_sns_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sns_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WTSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_bus_id(), target);
  }

  // optional uint32 proxy_bus_id = 5;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->proxy_bus_id(), target);
  }

  // optional string client_ip = 7;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->client_ip(), target);
  }

  // optional uint32 logic_bus_id = 8;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->logic_bus_id(), target);
  }

  // optional .proto_ff.Proto_LTSSyncData sns_sync = 9;
  if (has_sns_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sns_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WTSLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 4;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 proxy_bus_id = 5;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

    // optional string client_ip = 7;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional uint32 logic_bus_id = 8;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

    // optional .proto_ff.Proto_LTSSyncData sns_sync = 9;
    if (has_sns_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sns_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WTSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WTSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WTSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WTSLoginReq::MergeFrom(const Proto_WTSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
    if (from.has_sns_sync()) {
      mutable_sns_sync()->::proto_ff::Proto_LTSSyncData::MergeFrom(from.sns_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WTSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WTSLoginReq::CopyFrom(const Proto_WTSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WTSLoginReq::IsInitialized() const {

  return true;
}

void Proto_WTSLoginReq::Swap(Proto_WTSLoginReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(sns_sync_, other->sns_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WTSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WTSLoginReq_descriptor_;
  metadata.reflection = Proto_WTSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STWLoginRsp::kResultFieldNumber;
const int Proto_STWLoginRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

Proto_STWLoginRsp::Proto_STWLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STWLoginRsp::InitAsDefaultInstance() {
}

Proto_STWLoginRsp::Proto_STWLoginRsp(const Proto_STWLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STWLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STWLoginRsp::~Proto_STWLoginRsp() {
  SharedDtor();
}

void Proto_STWLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STWLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STWLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STWLoginRsp_descriptor_;
}

const Proto_STWLoginRsp& Proto_STWLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_STWLoginRsp* Proto_STWLoginRsp::default_instance_ = NULL;

Proto_STWLoginRsp* Proto_STWLoginRsp::New() const {
  return new Proto_STWLoginRsp;
}

void Proto_STWLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STWLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STWLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STWLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STWLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STWLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STWLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STWLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STWLoginRsp::MergeFrom(const Proto_STWLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STWLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STWLoginRsp::CopyFrom(const Proto_STWLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STWLoginRsp::IsInitialized() const {

  return true;
}

void Proto_STWLoginRsp::Swap(Proto_STWLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STWLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STWLoginRsp_descriptor_;
  metadata.reflection = Proto_STWLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPlayerDisconnect::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

NotifyPlayerDisconnect::NotifyPlayerDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPlayerDisconnect::InitAsDefaultInstance() {
}

NotifyPlayerDisconnect::NotifyPlayerDisconnect(const NotifyPlayerDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPlayerDisconnect::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPlayerDisconnect::~NotifyPlayerDisconnect() {
  SharedDtor();
}

void NotifyPlayerDisconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPlayerDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPlayerDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerDisconnect_descriptor_;
}

const NotifyPlayerDisconnect& NotifyPlayerDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

NotifyPlayerDisconnect* NotifyPlayerDisconnect::default_instance_ = NULL;

NotifyPlayerDisconnect* NotifyPlayerDisconnect::New() const {
  return new NotifyPlayerDisconnect;
}

void NotifyPlayerDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPlayerDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPlayerDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPlayerDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPlayerDisconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPlayerDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPlayerDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPlayerDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPlayerDisconnect::MergeFrom(const NotifyPlayerDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPlayerDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerDisconnect::CopyFrom(const NotifyPlayerDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerDisconnect::IsInitialized() const {

  return true;
}

void NotifyPlayerDisconnect::Swap(NotifyPlayerDisconnect* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPlayerDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPlayerDisconnect_descriptor_;
  metadata.reflection = NotifyPlayerDisconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PTWPlayerReconnectReq::kPlayerIdFieldNumber;
const int PTWPlayerReconnectReq::kProxyBusIdFieldNumber;
#endif  // !_MSC_VER

PTWPlayerReconnectReq::PTWPlayerReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PTWPlayerReconnectReq::InitAsDefaultInstance() {
}

PTWPlayerReconnectReq::PTWPlayerReconnectReq(const PTWPlayerReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PTWPlayerReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  proxy_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PTWPlayerReconnectReq::~PTWPlayerReconnectReq() {
  SharedDtor();
}

void PTWPlayerReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PTWPlayerReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PTWPlayerReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PTWPlayerReconnectReq_descriptor_;
}

const PTWPlayerReconnectReq& PTWPlayerReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

PTWPlayerReconnectReq* PTWPlayerReconnectReq::default_instance_ = NULL;

PTWPlayerReconnectReq* PTWPlayerReconnectReq::New() const {
  return new PTWPlayerReconnectReq;
}

void PTWPlayerReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    proxy_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PTWPlayerReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PTWPlayerReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 proxy_bus_id = 2;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proxy_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PTWPlayerReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 proxy_bus_id = 2;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proxy_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PTWPlayerReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 proxy_bus_id = 2;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTWPlayerReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PTWPlayerReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PTWPlayerReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PTWPlayerReconnectReq::MergeFrom(const PTWPlayerReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PTWPlayerReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTWPlayerReconnectReq::CopyFrom(const PTWPlayerReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTWPlayerReconnectReq::IsInitialized() const {

  return true;
}

void PTWPlayerReconnectReq::Swap(PTWPlayerReconnectReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PTWPlayerReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PTWPlayerReconnectReq_descriptor_;
  metadata.reflection = PTWPlayerReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WTPPlayerReconnctRsp::kResultFieldNumber;
const int WTPPlayerReconnctRsp::kPlayerIdFieldNumber;
const int WTPPlayerReconnctRsp::kGameIdFieldNumber;
const int WTPPlayerReconnctRsp::kRoomIdFieldNumber;
const int WTPPlayerReconnctRsp::kGameBusIdFieldNumber;
const int WTPPlayerReconnctRsp::kLogicBusIdFieldNumber;
#endif  // !_MSC_VER

WTPPlayerReconnctRsp::WTPPlayerReconnctRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WTPPlayerReconnctRsp::InitAsDefaultInstance() {
}

WTPPlayerReconnctRsp::WTPPlayerReconnctRsp(const WTPPlayerReconnctRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WTPPlayerReconnctRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  logic_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WTPPlayerReconnctRsp::~WTPPlayerReconnctRsp() {
  SharedDtor();
}

void WTPPlayerReconnctRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WTPPlayerReconnctRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WTPPlayerReconnctRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WTPPlayerReconnctRsp_descriptor_;
}

const WTPPlayerReconnctRsp& WTPPlayerReconnctRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

WTPPlayerReconnctRsp* WTPPlayerReconnctRsp::default_instance_ = NULL;

WTPPlayerReconnctRsp* WTPPlayerReconnctRsp::New() const {
  return new WTPPlayerReconnctRsp;
}

void WTPPlayerReconnctRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    logic_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WTPPlayerReconnctRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WTPPlayerReconnctRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_id(), output);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 5;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_bus_id(), output);
  }

  // optional uint32 logic_bus_id = 6;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logic_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WTPPlayerReconnctRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_id(), target);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 5;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_bus_id(), target);
  }

  // optional uint32 logic_bus_id = 6;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logic_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WTPPlayerReconnctRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 5;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 logic_bus_id = 6;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WTPPlayerReconnctRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WTPPlayerReconnctRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WTPPlayerReconnctRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WTPPlayerReconnctRsp::MergeFrom(const WTPPlayerReconnctRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WTPPlayerReconnctRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTPPlayerReconnctRsp::CopyFrom(const WTPPlayerReconnctRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTPPlayerReconnctRsp::IsInitialized() const {

  return true;
}

void WTPPlayerReconnctRsp::Swap(WTPPlayerReconnctRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WTPPlayerReconnctRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WTPPlayerReconnctRsp_descriptor_;
  metadata.reflection = WTPPlayerReconnctRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WTLPlayerReconnectReq::kPlayerIdFieldNumber;
const int WTLPlayerReconnectReq::kGameIdFieldNumber;
const int WTLPlayerReconnectReq::kRoomIdFieldNumber;
const int WTLPlayerReconnectReq::kGameBusIdFieldNumber;
const int WTLPlayerReconnectReq::kProxyBusIdFieldNumber;
#endif  // !_MSC_VER

WTLPlayerReconnectReq::WTLPlayerReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WTLPlayerReconnectReq::InitAsDefaultInstance() {
}

WTLPlayerReconnectReq::WTLPlayerReconnectReq(const WTLPlayerReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WTLPlayerReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  proxy_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WTLPlayerReconnectReq::~WTLPlayerReconnectReq() {
  SharedDtor();
}

void WTLPlayerReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WTLPlayerReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WTLPlayerReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WTLPlayerReconnectReq_descriptor_;
}

const WTLPlayerReconnectReq& WTLPlayerReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

WTLPlayerReconnectReq* WTLPlayerReconnectReq::default_instance_ = NULL;

WTLPlayerReconnectReq* WTLPlayerReconnectReq::New() const {
  return new WTLPlayerReconnectReq;
}

void WTLPlayerReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    proxy_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WTLPlayerReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WTLPlayerReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_bus_id(), output);
  }

  // optional uint32 proxy_bus_id = 6;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->proxy_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WTLPlayerReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_bus_id(), target);
  }

  // optional uint32 proxy_bus_id = 6;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->proxy_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WTLPlayerReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 4;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 proxy_bus_id = 6;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WTLPlayerReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WTLPlayerReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WTLPlayerReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WTLPlayerReconnectReq::MergeFrom(const WTLPlayerReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WTLPlayerReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTLPlayerReconnectReq::CopyFrom(const WTLPlayerReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTLPlayerReconnectReq::IsInitialized() const {

  return true;
}

void WTLPlayerReconnectReq::Swap(WTLPlayerReconnectReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WTLPlayerReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WTLPlayerReconnectReq_descriptor_;
  metadata.reflection = WTLPlayerReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTWPlayerReconnectRsp::kResultFieldNumber;
const int LTWPlayerReconnectRsp::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

LTWPlayerReconnectRsp::LTWPlayerReconnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTWPlayerReconnectRsp::InitAsDefaultInstance() {
}

LTWPlayerReconnectRsp::LTWPlayerReconnectRsp(const LTWPlayerReconnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTWPlayerReconnectRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTWPlayerReconnectRsp::~LTWPlayerReconnectRsp() {
  SharedDtor();
}

void LTWPlayerReconnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTWPlayerReconnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTWPlayerReconnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTWPlayerReconnectRsp_descriptor_;
}

const LTWPlayerReconnectRsp& LTWPlayerReconnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

LTWPlayerReconnectRsp* LTWPlayerReconnectRsp::default_instance_ = NULL;

LTWPlayerReconnectRsp* LTWPlayerReconnectRsp::New() const {
  return new LTWPlayerReconnectRsp;
}

void LTWPlayerReconnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTWPlayerReconnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTWPlayerReconnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTWPlayerReconnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTWPlayerReconnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTWPlayerReconnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTWPlayerReconnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTWPlayerReconnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTWPlayerReconnectRsp::MergeFrom(const LTWPlayerReconnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTWPlayerReconnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTWPlayerReconnectRsp::CopyFrom(const LTWPlayerReconnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTWPlayerReconnectRsp::IsInitialized() const {

  return true;
}

void LTWPlayerReconnectRsp::Swap(LTWPlayerReconnectRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTWPlayerReconnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTWPlayerReconnectRsp_descriptor_;
  metadata.reflection = LTWPlayerReconnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WTGPlayerReconnectReq::kPlayerIdFieldNumber;
const int WTGPlayerReconnectReq::kProxyBusIdFieldNumber;
const int WTGPlayerReconnectReq::kLogicBusIdFieldNumber;
#endif  // !_MSC_VER

WTGPlayerReconnectReq::WTGPlayerReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WTGPlayerReconnectReq::InitAsDefaultInstance() {
}

WTGPlayerReconnectReq::WTGPlayerReconnectReq(const WTGPlayerReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WTGPlayerReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  proxy_bus_id_ = 0u;
  logic_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WTGPlayerReconnectReq::~WTGPlayerReconnectReq() {
  SharedDtor();
}

void WTGPlayerReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WTGPlayerReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WTGPlayerReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WTGPlayerReconnectReq_descriptor_;
}

const WTGPlayerReconnectReq& WTGPlayerReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

WTGPlayerReconnectReq* WTGPlayerReconnectReq::default_instance_ = NULL;

WTGPlayerReconnectReq* WTGPlayerReconnectReq::New() const {
  return new WTGPlayerReconnectReq;
}

void WTGPlayerReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    proxy_bus_id_ = 0u;
    logic_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WTGPlayerReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WTGPlayerReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 proxy_bus_id = 2;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proxy_bus_id(), output);
  }

  // optional uint32 logic_bus_id = 3;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->logic_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WTGPlayerReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 proxy_bus_id = 2;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proxy_bus_id(), target);
  }

  // optional uint32 logic_bus_id = 3;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->logic_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WTGPlayerReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 proxy_bus_id = 2;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

    // optional uint32 logic_bus_id = 3;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WTGPlayerReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WTGPlayerReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WTGPlayerReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WTGPlayerReconnectReq::MergeFrom(const WTGPlayerReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WTGPlayerReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTGPlayerReconnectReq::CopyFrom(const WTGPlayerReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTGPlayerReconnectReq::IsInitialized() const {

  return true;
}

void WTGPlayerReconnectReq::Swap(WTGPlayerReconnectReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WTGPlayerReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WTGPlayerReconnectReq_descriptor_;
  metadata.reflection = WTGPlayerReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTWPlayerReconnectRsp::kResultFieldNumber;
const int GTWPlayerReconnectRsp::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GTWPlayerReconnectRsp::GTWPlayerReconnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTWPlayerReconnectRsp::InitAsDefaultInstance() {
}

GTWPlayerReconnectRsp::GTWPlayerReconnectRsp(const GTWPlayerReconnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTWPlayerReconnectRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTWPlayerReconnectRsp::~GTWPlayerReconnectRsp() {
  SharedDtor();
}

void GTWPlayerReconnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTWPlayerReconnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTWPlayerReconnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTWPlayerReconnectRsp_descriptor_;
}

const GTWPlayerReconnectRsp& GTWPlayerReconnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

GTWPlayerReconnectRsp* GTWPlayerReconnectRsp::default_instance_ = NULL;

GTWPlayerReconnectRsp* GTWPlayerReconnectRsp::New() const {
  return new GTWPlayerReconnectRsp;
}

void GTWPlayerReconnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTWPlayerReconnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTWPlayerReconnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTWPlayerReconnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTWPlayerReconnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTWPlayerReconnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTWPlayerReconnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTWPlayerReconnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTWPlayerReconnectRsp::MergeFrom(const GTWPlayerReconnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTWPlayerReconnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTWPlayerReconnectRsp::CopyFrom(const GTWPlayerReconnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTWPlayerReconnectRsp::IsInitialized() const {

  return true;
}

void GTWPlayerReconnectRsp::Swap(GTWPlayerReconnectRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTWPlayerReconnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTWPlayerReconnectRsp_descriptor_;
  metadata.reflection = GTWPlayerReconnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WTSPlayerReconnectReq::kPlayerIdFieldNumber;
const int WTSPlayerReconnectReq::kLogicBusIdFieldNumber;
const int WTSPlayerReconnectReq::kGameBusIdFieldNumber;
const int WTSPlayerReconnectReq::kProxyBusIdFieldNumber;
#endif  // !_MSC_VER

WTSPlayerReconnectReq::WTSPlayerReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WTSPlayerReconnectReq::InitAsDefaultInstance() {
}

WTSPlayerReconnectReq::WTSPlayerReconnectReq(const WTSPlayerReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WTSPlayerReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  logic_bus_id_ = 0u;
  game_bus_id_ = 0u;
  proxy_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WTSPlayerReconnectReq::~WTSPlayerReconnectReq() {
  SharedDtor();
}

void WTSPlayerReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WTSPlayerReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WTSPlayerReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WTSPlayerReconnectReq_descriptor_;
}

const WTSPlayerReconnectReq& WTSPlayerReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

WTSPlayerReconnectReq* WTSPlayerReconnectReq::default_instance_ = NULL;

WTSPlayerReconnectReq* WTSPlayerReconnectReq::New() const {
  return new WTSPlayerReconnectReq;
}

void WTSPlayerReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    logic_bus_id_ = 0u;
    game_bus_id_ = 0u;
    proxy_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WTSPlayerReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WTSPlayerReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 logic_bus_id = 2;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logic_bus_id(), output);
  }

  // optional uint32 game_bus_id = 3;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_bus_id(), output);
  }

  // optional uint32 proxy_bus_id = 4;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->proxy_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WTSPlayerReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 logic_bus_id = 2;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logic_bus_id(), target);
  }

  // optional uint32 game_bus_id = 3;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_bus_id(), target);
  }

  // optional uint32 proxy_bus_id = 4;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->proxy_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WTSPlayerReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 logic_bus_id = 2;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

    // optional uint32 game_bus_id = 3;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 proxy_bus_id = 4;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WTSPlayerReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WTSPlayerReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WTSPlayerReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WTSPlayerReconnectReq::MergeFrom(const WTSPlayerReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WTSPlayerReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTSPlayerReconnectReq::CopyFrom(const WTSPlayerReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTSPlayerReconnectReq::IsInitialized() const {

  return true;
}

void WTSPlayerReconnectReq::Swap(WTSPlayerReconnectReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WTSPlayerReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WTSPlayerReconnectReq_descriptor_;
  metadata.reflection = WTSPlayerReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STWPlayerReconnectRsp::kResultFieldNumber;
const int STWPlayerReconnectRsp::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

STWPlayerReconnectRsp::STWPlayerReconnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STWPlayerReconnectRsp::InitAsDefaultInstance() {
}

STWPlayerReconnectRsp::STWPlayerReconnectRsp(const STWPlayerReconnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STWPlayerReconnectRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STWPlayerReconnectRsp::~STWPlayerReconnectRsp() {
  SharedDtor();
}

void STWPlayerReconnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STWPlayerReconnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STWPlayerReconnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STWPlayerReconnectRsp_descriptor_;
}

const STWPlayerReconnectRsp& STWPlayerReconnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

STWPlayerReconnectRsp* STWPlayerReconnectRsp::default_instance_ = NULL;

STWPlayerReconnectRsp* STWPlayerReconnectRsp::New() const {
  return new STWPlayerReconnectRsp;
}

void STWPlayerReconnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STWPlayerReconnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STWPlayerReconnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STWPlayerReconnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STWPlayerReconnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STWPlayerReconnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STWPlayerReconnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STWPlayerReconnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STWPlayerReconnectRsp::MergeFrom(const STWPlayerReconnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STWPlayerReconnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STWPlayerReconnectRsp::CopyFrom(const STWPlayerReconnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STWPlayerReconnectRsp::IsInitialized() const {

  return true;
}

void STWPlayerReconnectRsp::Swap(STWPlayerReconnectRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STWPlayerReconnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STWPlayerReconnectRsp_descriptor_;
  metadata.reflection = STWPlayerReconnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTWLogoutNotify::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

Proto_LTWLogoutNotify::Proto_LTWLogoutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTWLogoutNotify::InitAsDefaultInstance() {
}

Proto_LTWLogoutNotify::Proto_LTWLogoutNotify(const Proto_LTWLogoutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTWLogoutNotify::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTWLogoutNotify::~Proto_LTWLogoutNotify() {
  SharedDtor();
}

void Proto_LTWLogoutNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTWLogoutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTWLogoutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTWLogoutNotify_descriptor_;
}

const Proto_LTWLogoutNotify& Proto_LTWLogoutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_LTWLogoutNotify* Proto_LTWLogoutNotify::default_instance_ = NULL;

Proto_LTWLogoutNotify* Proto_LTWLogoutNotify::New() const {
  return new Proto_LTWLogoutNotify;
}

void Proto_LTWLogoutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTWLogoutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTWLogoutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTWLogoutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTWLogoutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTWLogoutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTWLogoutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTWLogoutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTWLogoutNotify::MergeFrom(const Proto_LTWLogoutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTWLogoutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTWLogoutNotify::CopyFrom(const Proto_LTWLogoutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTWLogoutNotify::IsInitialized() const {

  return true;
}

void Proto_LTWLogoutNotify::Swap(Proto_LTWLogoutNotify* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTWLogoutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTWLogoutNotify_descriptor_;
  metadata.reflection = Proto_LTWLogoutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WTLLogoutNotify::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

Proto_WTLLogoutNotify::Proto_WTLLogoutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WTLLogoutNotify::InitAsDefaultInstance() {
}

Proto_WTLLogoutNotify::Proto_WTLLogoutNotify(const Proto_WTLLogoutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WTLLogoutNotify::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WTLLogoutNotify::~Proto_WTLLogoutNotify() {
  SharedDtor();
}

void Proto_WTLLogoutNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_WTLLogoutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WTLLogoutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WTLLogoutNotify_descriptor_;
}

const Proto_WTLLogoutNotify& Proto_WTLLogoutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_WTLLogoutNotify* Proto_WTLLogoutNotify::default_instance_ = NULL;

Proto_WTLLogoutNotify* Proto_WTLLogoutNotify::New() const {
  return new Proto_WTLLogoutNotify;
}

void Proto_WTLLogoutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WTLLogoutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WTLLogoutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WTLLogoutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WTLLogoutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WTLLogoutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WTLLogoutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WTLLogoutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WTLLogoutNotify::MergeFrom(const Proto_WTLLogoutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WTLLogoutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WTLLogoutNotify::CopyFrom(const Proto_WTLLogoutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WTLLogoutNotify::IsInitialized() const {

  return true;
}

void Proto_WTLLogoutNotify::Swap(Proto_WTLLogoutNotify* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WTLLogoutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WTLLogoutNotify_descriptor_;
  metadata.reflection = Proto_WTLLogoutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WTSLogoutNotify::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

Proto_WTSLogoutNotify::Proto_WTSLogoutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WTSLogoutNotify::InitAsDefaultInstance() {
}

Proto_WTSLogoutNotify::Proto_WTSLogoutNotify(const Proto_WTSLogoutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WTSLogoutNotify::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WTSLogoutNotify::~Proto_WTSLogoutNotify() {
  SharedDtor();
}

void Proto_WTSLogoutNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_WTSLogoutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WTSLogoutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WTSLogoutNotify_descriptor_;
}

const Proto_WTSLogoutNotify& Proto_WTSLogoutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_WTSLogoutNotify* Proto_WTSLogoutNotify::default_instance_ = NULL;

Proto_WTSLogoutNotify* Proto_WTSLogoutNotify::New() const {
  return new Proto_WTSLogoutNotify;
}

void Proto_WTSLogoutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WTSLogoutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WTSLogoutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WTSLogoutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WTSLogoutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WTSLogoutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WTSLogoutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WTSLogoutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WTSLogoutNotify::MergeFrom(const Proto_WTSLogoutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WTSLogoutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WTSLogoutNotify::CopyFrom(const Proto_WTSLogoutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WTSLogoutNotify::IsInitialized() const {

  return true;
}

void Proto_WTSLogoutNotify::Swap(Proto_WTSLogoutNotify* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WTSLogoutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WTSLogoutNotify_descriptor_;
  metadata.reflection = Proto_WTSLogoutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSBankGetDataReq::kJettonFieldNumber;
const int Proto_LTSBankGetDataReq::kBankPasswordFieldNumber;
#endif  // !_MSC_VER

Proto_LTSBankGetDataReq::Proto_LTSBankGetDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSBankGetDataReq::InitAsDefaultInstance() {
}

Proto_LTSBankGetDataReq::Proto_LTSBankGetDataReq(const Proto_LTSBankGetDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSBankGetDataReq::SharedCtor() {
  _cached_size_ = 0;
  jetton_ = GOOGLE_ULONGLONG(0);
  bank_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSBankGetDataReq::~Proto_LTSBankGetDataReq() {
  SharedDtor();
}

void Proto_LTSBankGetDataReq::SharedDtor() {
  if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_password_;
  }
  if (this != default_instance_) {
  }
}

void Proto_LTSBankGetDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSBankGetDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSBankGetDataReq_descriptor_;
}

const Proto_LTSBankGetDataReq& Proto_LTSBankGetDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_LTSBankGetDataReq* Proto_LTSBankGetDataReq::default_instance_ = NULL;

Proto_LTSBankGetDataReq* Proto_LTSBankGetDataReq::New() const {
  return new Proto_LTSBankGetDataReq;
}

void Proto_LTSBankGetDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_ = GOOGLE_ULONGLONG(0);
    if (has_bank_password()) {
      if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
        bank_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSBankGetDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 jetton = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bank_password;
        break;
      }

      // optional string bank_password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_password().data(), this->bank_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSBankGetDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 jetton = 1;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->jetton(), output);
  }

  // optional string bank_password = 2;
  if (has_bank_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_password().data(), this->bank_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bank_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSBankGetDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 jetton = 1;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->jetton(), target);
  }

  // optional string bank_password = 2;
  if (has_bank_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_password().data(), this->bank_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bank_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSBankGetDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 jetton = 1;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton());
    }

    // optional string bank_password = 2;
    if (has_bank_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSBankGetDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSBankGetDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSBankGetDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSBankGetDataReq::MergeFrom(const Proto_LTSBankGetDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_bank_password()) {
      set_bank_password(from.bank_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSBankGetDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSBankGetDataReq::CopyFrom(const Proto_LTSBankGetDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSBankGetDataReq::IsInitialized() const {

  return true;
}

void Proto_LTSBankGetDataReq::Swap(Proto_LTSBankGetDataReq* other) {
  if (other != this) {
    std::swap(jetton_, other->jetton_);
    std::swap(bank_password_, other->bank_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSBankGetDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSBankGetDataReq_descriptor_;
  metadata.reflection = Proto_LTSBankGetDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTS_PlayerAddBankJettonReq::kAddJettonFieldNumber;
#endif  // !_MSC_VER

Proto_LTS_PlayerAddBankJettonReq::Proto_LTS_PlayerAddBankJettonReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTS_PlayerAddBankJettonReq::InitAsDefaultInstance() {
}

Proto_LTS_PlayerAddBankJettonReq::Proto_LTS_PlayerAddBankJettonReq(const Proto_LTS_PlayerAddBankJettonReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTS_PlayerAddBankJettonReq::SharedCtor() {
  _cached_size_ = 0;
  add_jetton_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTS_PlayerAddBankJettonReq::~Proto_LTS_PlayerAddBankJettonReq() {
  SharedDtor();
}

void Proto_LTS_PlayerAddBankJettonReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTS_PlayerAddBankJettonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTS_PlayerAddBankJettonReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTS_PlayerAddBankJettonReq_descriptor_;
}

const Proto_LTS_PlayerAddBankJettonReq& Proto_LTS_PlayerAddBankJettonReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_LTS_PlayerAddBankJettonReq* Proto_LTS_PlayerAddBankJettonReq::default_instance_ = NULL;

Proto_LTS_PlayerAddBankJettonReq* Proto_LTS_PlayerAddBankJettonReq::New() const {
  return new Proto_LTS_PlayerAddBankJettonReq;
}

void Proto_LTS_PlayerAddBankJettonReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_jetton_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTS_PlayerAddBankJettonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 add_jetton = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_jetton_)));
          set_has_add_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTS_PlayerAddBankJettonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 add_jetton = 1;
  if (has_add_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->add_jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTS_PlayerAddBankJettonReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 add_jetton = 1;
  if (has_add_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->add_jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTS_PlayerAddBankJettonReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 add_jetton = 1;
    if (has_add_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTS_PlayerAddBankJettonReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTS_PlayerAddBankJettonReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTS_PlayerAddBankJettonReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTS_PlayerAddBankJettonReq::MergeFrom(const Proto_LTS_PlayerAddBankJettonReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_jetton()) {
      set_add_jetton(from.add_jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTS_PlayerAddBankJettonReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTS_PlayerAddBankJettonReq::CopyFrom(const Proto_LTS_PlayerAddBankJettonReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTS_PlayerAddBankJettonReq::IsInitialized() const {

  return true;
}

void Proto_LTS_PlayerAddBankJettonReq::Swap(Proto_LTS_PlayerAddBankJettonReq* other) {
  if (other != this) {
    std::swap(add_jetton_, other->add_jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTS_PlayerAddBankJettonReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTS_PlayerAddBankJettonReq_descriptor_;
  metadata.reflection = Proto_LTS_PlayerAddBankJettonReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STL_PlayerAddBankJettonRsp::kRetCodeFieldNumber;
const int Proto_STL_PlayerAddBankJettonRsp::kAddJettonFieldNumber;
const int Proto_STL_PlayerAddBankJettonRsp::kBankJettonFieldNumber;
#endif  // !_MSC_VER

Proto_STL_PlayerAddBankJettonRsp::Proto_STL_PlayerAddBankJettonRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STL_PlayerAddBankJettonRsp::InitAsDefaultInstance() {
}

Proto_STL_PlayerAddBankJettonRsp::Proto_STL_PlayerAddBankJettonRsp(const Proto_STL_PlayerAddBankJettonRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STL_PlayerAddBankJettonRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  add_jetton_ = GOOGLE_ULONGLONG(0);
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STL_PlayerAddBankJettonRsp::~Proto_STL_PlayerAddBankJettonRsp() {
  SharedDtor();
}

void Proto_STL_PlayerAddBankJettonRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STL_PlayerAddBankJettonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STL_PlayerAddBankJettonRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STL_PlayerAddBankJettonRsp_descriptor_;
}

const Proto_STL_PlayerAddBankJettonRsp& Proto_STL_PlayerAddBankJettonRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_STL_PlayerAddBankJettonRsp* Proto_STL_PlayerAddBankJettonRsp::default_instance_ = NULL;

Proto_STL_PlayerAddBankJettonRsp* Proto_STL_PlayerAddBankJettonRsp::New() const {
  return new Proto_STL_PlayerAddBankJettonRsp;
}

void Proto_STL_PlayerAddBankJettonRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    add_jetton_ = GOOGLE_ULONGLONG(0);
    bank_jetton_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STL_PlayerAddBankJettonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_jetton;
        break;
      }

      // optional uint64 add_jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_jetton_)));
          set_has_add_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bank_jetton;
        break;
      }

      // optional uint64 bank_jetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_jetton_)));
          set_has_bank_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STL_PlayerAddBankJettonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint64 add_jetton = 2;
  if (has_add_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->add_jetton(), output);
  }

  // optional uint64 bank_jetton = 3;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bank_jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STL_PlayerAddBankJettonRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 add_jetton = 2;
  if (has_add_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->add_jetton(), target);
  }

  // optional uint64 bank_jetton = 3;
  if (has_bank_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bank_jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STL_PlayerAddBankJettonRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 add_jetton = 2;
    if (has_add_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_jetton());
    }

    // optional uint64 bank_jetton = 3;
    if (has_bank_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STL_PlayerAddBankJettonRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STL_PlayerAddBankJettonRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STL_PlayerAddBankJettonRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STL_PlayerAddBankJettonRsp::MergeFrom(const Proto_STL_PlayerAddBankJettonRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_add_jetton()) {
      set_add_jetton(from.add_jetton());
    }
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STL_PlayerAddBankJettonRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STL_PlayerAddBankJettonRsp::CopyFrom(const Proto_STL_PlayerAddBankJettonRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STL_PlayerAddBankJettonRsp::IsInitialized() const {

  return true;
}

void Proto_STL_PlayerAddBankJettonRsp::Swap(Proto_STL_PlayerAddBankJettonRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(add_jetton_, other->add_jetton_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STL_PlayerAddBankJettonRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STL_PlayerAddBankJettonRsp_descriptor_;
  metadata.reflection = Proto_STL_PlayerAddBankJettonRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTS_PlayerReduceBankJettonReq::kReduceJettonFieldNumber;
#endif  // !_MSC_VER

Proto_LTS_PlayerReduceBankJettonReq::Proto_LTS_PlayerReduceBankJettonReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTS_PlayerReduceBankJettonReq::InitAsDefaultInstance() {
}

Proto_LTS_PlayerReduceBankJettonReq::Proto_LTS_PlayerReduceBankJettonReq(const Proto_LTS_PlayerReduceBankJettonReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTS_PlayerReduceBankJettonReq::SharedCtor() {
  _cached_size_ = 0;
  reduce_jetton_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTS_PlayerReduceBankJettonReq::~Proto_LTS_PlayerReduceBankJettonReq() {
  SharedDtor();
}

void Proto_LTS_PlayerReduceBankJettonReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTS_PlayerReduceBankJettonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTS_PlayerReduceBankJettonReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTS_PlayerReduceBankJettonReq_descriptor_;
}

const Proto_LTS_PlayerReduceBankJettonReq& Proto_LTS_PlayerReduceBankJettonReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_LTS_PlayerReduceBankJettonReq* Proto_LTS_PlayerReduceBankJettonReq::default_instance_ = NULL;

Proto_LTS_PlayerReduceBankJettonReq* Proto_LTS_PlayerReduceBankJettonReq::New() const {
  return new Proto_LTS_PlayerReduceBankJettonReq;
}

void Proto_LTS_PlayerReduceBankJettonReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reduce_jetton_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTS_PlayerReduceBankJettonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 reduce_jetton = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reduce_jetton_)));
          set_has_reduce_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTS_PlayerReduceBankJettonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 reduce_jetton = 1;
  if (has_reduce_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reduce_jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTS_PlayerReduceBankJettonReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 reduce_jetton = 1;
  if (has_reduce_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reduce_jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTS_PlayerReduceBankJettonReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 reduce_jetton = 1;
    if (has_reduce_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reduce_jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTS_PlayerReduceBankJettonReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTS_PlayerReduceBankJettonReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTS_PlayerReduceBankJettonReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTS_PlayerReduceBankJettonReq::MergeFrom(const Proto_LTS_PlayerReduceBankJettonReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reduce_jetton()) {
      set_reduce_jetton(from.reduce_jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTS_PlayerReduceBankJettonReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTS_PlayerReduceBankJettonReq::CopyFrom(const Proto_LTS_PlayerReduceBankJettonReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTS_PlayerReduceBankJettonReq::IsInitialized() const {

  return true;
}

void Proto_LTS_PlayerReduceBankJettonReq::Swap(Proto_LTS_PlayerReduceBankJettonReq* other) {
  if (other != this) {
    std::swap(reduce_jetton_, other->reduce_jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTS_PlayerReduceBankJettonReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTS_PlayerReduceBankJettonReq_descriptor_;
  metadata.reflection = Proto_LTS_PlayerReduceBankJettonReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STL_PlayerReduceBankJettonRsp::kRetCodeFieldNumber;
const int Proto_STL_PlayerReduceBankJettonRsp::kReduceJettonFieldNumber;
const int Proto_STL_PlayerReduceBankJettonRsp::kBankJettonFieldNumber;
#endif  // !_MSC_VER

Proto_STL_PlayerReduceBankJettonRsp::Proto_STL_PlayerReduceBankJettonRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STL_PlayerReduceBankJettonRsp::InitAsDefaultInstance() {
}

Proto_STL_PlayerReduceBankJettonRsp::Proto_STL_PlayerReduceBankJettonRsp(const Proto_STL_PlayerReduceBankJettonRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STL_PlayerReduceBankJettonRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  reduce_jetton_ = GOOGLE_ULONGLONG(0);
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STL_PlayerReduceBankJettonRsp::~Proto_STL_PlayerReduceBankJettonRsp() {
  SharedDtor();
}

void Proto_STL_PlayerReduceBankJettonRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STL_PlayerReduceBankJettonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STL_PlayerReduceBankJettonRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STL_PlayerReduceBankJettonRsp_descriptor_;
}

const Proto_STL_PlayerReduceBankJettonRsp& Proto_STL_PlayerReduceBankJettonRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_STL_PlayerReduceBankJettonRsp* Proto_STL_PlayerReduceBankJettonRsp::default_instance_ = NULL;

Proto_STL_PlayerReduceBankJettonRsp* Proto_STL_PlayerReduceBankJettonRsp::New() const {
  return new Proto_STL_PlayerReduceBankJettonRsp;
}

void Proto_STL_PlayerReduceBankJettonRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    reduce_jetton_ = GOOGLE_ULONGLONG(0);
    bank_jetton_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STL_PlayerReduceBankJettonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reduce_jetton;
        break;
      }

      // optional uint64 reduce_jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reduce_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reduce_jetton_)));
          set_has_reduce_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bank_jetton;
        break;
      }

      // optional uint64 bank_jetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_jetton_)));
          set_has_bank_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STL_PlayerReduceBankJettonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint64 reduce_jetton = 2;
  if (has_reduce_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reduce_jetton(), output);
  }

  // optional uint64 bank_jetton = 3;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bank_jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STL_PlayerReduceBankJettonRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 reduce_jetton = 2;
  if (has_reduce_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reduce_jetton(), target);
  }

  // optional uint64 bank_jetton = 3;
  if (has_bank_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bank_jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STL_PlayerReduceBankJettonRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 reduce_jetton = 2;
    if (has_reduce_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reduce_jetton());
    }

    // optional uint64 bank_jetton = 3;
    if (has_bank_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STL_PlayerReduceBankJettonRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STL_PlayerReduceBankJettonRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STL_PlayerReduceBankJettonRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STL_PlayerReduceBankJettonRsp::MergeFrom(const Proto_STL_PlayerReduceBankJettonRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_reduce_jetton()) {
      set_reduce_jetton(from.reduce_jetton());
    }
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STL_PlayerReduceBankJettonRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STL_PlayerReduceBankJettonRsp::CopyFrom(const Proto_STL_PlayerReduceBankJettonRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STL_PlayerReduceBankJettonRsp::IsInitialized() const {

  return true;
}

void Proto_STL_PlayerReduceBankJettonRsp::Swap(Proto_STL_PlayerReduceBankJettonRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(reduce_jetton_, other->reduce_jetton_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STL_PlayerReduceBankJettonRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STL_PlayerReduceBankJettonRsp_descriptor_;
  metadata.reflection = Proto_STL_PlayerReduceBankJettonRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_TS_QueryPlayerSimpleDataReq::kQueryUserIdFieldNumber;
#endif  // !_MSC_VER

Proto_TS_QueryPlayerSimpleDataReq::Proto_TS_QueryPlayerSimpleDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_TS_QueryPlayerSimpleDataReq::InitAsDefaultInstance() {
}

Proto_TS_QueryPlayerSimpleDataReq::Proto_TS_QueryPlayerSimpleDataReq(const Proto_TS_QueryPlayerSimpleDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_TS_QueryPlayerSimpleDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_TS_QueryPlayerSimpleDataReq::~Proto_TS_QueryPlayerSimpleDataReq() {
  SharedDtor();
}

void Proto_TS_QueryPlayerSimpleDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_TS_QueryPlayerSimpleDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_TS_QueryPlayerSimpleDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_TS_QueryPlayerSimpleDataReq_descriptor_;
}

const Proto_TS_QueryPlayerSimpleDataReq& Proto_TS_QueryPlayerSimpleDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_TS_QueryPlayerSimpleDataReq* Proto_TS_QueryPlayerSimpleDataReq::default_instance_ = NULL;

Proto_TS_QueryPlayerSimpleDataReq* Proto_TS_QueryPlayerSimpleDataReq::New() const {
  return new Proto_TS_QueryPlayerSimpleDataReq;
}

void Proto_TS_QueryPlayerSimpleDataReq::Clear() {
  query_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_TS_QueryPlayerSimpleDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 query_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_query_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_query_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_query_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_TS_QueryPlayerSimpleDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 query_user_id = 1;
  for (int i = 0; i < this->query_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->query_user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_TS_QueryPlayerSimpleDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 query_user_id = 1;
  for (int i = 0; i < this->query_user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->query_user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_TS_QueryPlayerSimpleDataReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 query_user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->query_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->query_user_id(i));
    }
    total_size += 1 * this->query_user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_TS_QueryPlayerSimpleDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_TS_QueryPlayerSimpleDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_TS_QueryPlayerSimpleDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_TS_QueryPlayerSimpleDataReq::MergeFrom(const Proto_TS_QueryPlayerSimpleDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_user_id_.MergeFrom(from.query_user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_TS_QueryPlayerSimpleDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_TS_QueryPlayerSimpleDataReq::CopyFrom(const Proto_TS_QueryPlayerSimpleDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_TS_QueryPlayerSimpleDataReq::IsInitialized() const {

  return true;
}

void Proto_TS_QueryPlayerSimpleDataReq::Swap(Proto_TS_QueryPlayerSimpleDataReq* other) {
  if (other != this) {
    query_user_id_.Swap(&other->query_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_TS_QueryPlayerSimpleDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_TS_QueryPlayerSimpleDataReq_descriptor_;
  metadata.reflection = Proto_TS_QueryPlayerSimpleDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_ST_QueryPlayerSimpleDataRsp::kResultFieldNumber;
const int Proto_ST_QueryPlayerSimpleDataRsp::kQueryUserListFieldNumber;
#endif  // !_MSC_VER

Proto_ST_QueryPlayerSimpleDataRsp::Proto_ST_QueryPlayerSimpleDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_ST_QueryPlayerSimpleDataRsp::InitAsDefaultInstance() {
}

Proto_ST_QueryPlayerSimpleDataRsp::Proto_ST_QueryPlayerSimpleDataRsp(const Proto_ST_QueryPlayerSimpleDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_ST_QueryPlayerSimpleDataRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_ST_QueryPlayerSimpleDataRsp::~Proto_ST_QueryPlayerSimpleDataRsp() {
  SharedDtor();
}

void Proto_ST_QueryPlayerSimpleDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_ST_QueryPlayerSimpleDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_ST_QueryPlayerSimpleDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_ST_QueryPlayerSimpleDataRsp_descriptor_;
}

const Proto_ST_QueryPlayerSimpleDataRsp& Proto_ST_QueryPlayerSimpleDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal_2eproto();
  return *default_instance_;
}

Proto_ST_QueryPlayerSimpleDataRsp* Proto_ST_QueryPlayerSimpleDataRsp::default_instance_ = NULL;

Proto_ST_QueryPlayerSimpleDataRsp* Proto_ST_QueryPlayerSimpleDataRsp::New() const {
  return new Proto_ST_QueryPlayerSimpleDataRsp;
}

void Proto_ST_QueryPlayerSimpleDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  query_user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_ST_QueryPlayerSimpleDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query_user_list;
        break;
      }

      // repeated .proto_ff.Proto_UserSimpleData query_user_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query_user_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_ST_QueryPlayerSimpleDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto_ff.Proto_UserSimpleData query_user_list = 2;
  for (int i = 0; i < this->query_user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->query_user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_ST_QueryPlayerSimpleDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto_ff.Proto_UserSimpleData query_user_list = 2;
  for (int i = 0; i < this->query_user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->query_user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_ST_QueryPlayerSimpleDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto_ff.Proto_UserSimpleData query_user_list = 2;
  total_size += 1 * this->query_user_list_size();
  for (int i = 0; i < this->query_user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query_user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_ST_QueryPlayerSimpleDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_ST_QueryPlayerSimpleDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_ST_QueryPlayerSimpleDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_ST_QueryPlayerSimpleDataRsp::MergeFrom(const Proto_ST_QueryPlayerSimpleDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_user_list_.MergeFrom(from.query_user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_ST_QueryPlayerSimpleDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_ST_QueryPlayerSimpleDataRsp::CopyFrom(const Proto_ST_QueryPlayerSimpleDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_ST_QueryPlayerSimpleDataRsp::IsInitialized() const {

  return true;
}

void Proto_ST_QueryPlayerSimpleDataRsp::Swap(Proto_ST_QueryPlayerSimpleDataRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    query_user_list_.Swap(&other->query_user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_ST_QueryPlayerSimpleDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_ST_QueryPlayerSimpleDataRsp_descriptor_;
  metadata.reflection = Proto_ST_QueryPlayerSimpleDataRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
