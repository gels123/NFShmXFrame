// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSGame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSGame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* RoomStatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomStatusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGameAutoJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGameAutoJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGameAutoJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGameAutoJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRecomeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRecomeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRecomeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRecomeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameChairInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameChairInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameDeskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameDeskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeskListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeskListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeskListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeskListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChairCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChairCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChairCheckRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChairCheckRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomInfo_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomInfo_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameChairInfo_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameChairInfo_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameDeskInfo_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameDeskInfo_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomListReq_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomListReq_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomListRsp_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomListRsp_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDeskListReq_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDeskListReq_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDeskListRsp_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDeskListRsp_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPlayerLeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPlayerLeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnePaoMaDengInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnePaoMaDengInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCPaoMaDengNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCPaoMaDengNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSRedeemCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSRedeemCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCRedeemCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCRedeemCodeRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSGame_2eproto() {
  protobuf_AddDesc_CSGame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSGame.proto");
  GOOGLE_CHECK(file != NULL);
  RoomStatusInfo_descriptor_ = file->message_type(0);
  static const int RoomStatusInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusInfo, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusInfo, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusInfo, enter_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusInfo, enter_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusInfo, status_),
  };
  RoomStatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomStatusInfo_descriptor_,
      RoomStatusInfo::default_instance_,
      RoomStatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomStatusInfo));
  GetRoomInfoReq_descriptor_ = file->message_type(1);
  static const int GetRoomInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoReq, game_id_),
  };
  GetRoomInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomInfoReq_descriptor_,
      GetRoomInfoReq::default_instance_,
      GetRoomInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomInfoReq));
  GetRoomInfoRsp_descriptor_ = file->message_type(2);
  static const int GetRoomInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoRsp, rooms_),
  };
  GetRoomInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomInfoRsp_descriptor_,
      GetRoomInfoRsp::default_instance_,
      GetRoomInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomInfoRsp));
  EnterGameAutoJoinReq_descriptor_ = file->message_type(3);
  static const int EnterGameAutoJoinReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinReq, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinReq, proxy_id_),
  };
  EnterGameAutoJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGameAutoJoinReq_descriptor_,
      EnterGameAutoJoinReq::default_instance_,
      EnterGameAutoJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGameAutoJoinReq));
  EnterGameAutoJoinRsp_descriptor_ = file->message_type(4);
  static const int EnterGameAutoJoinRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, game_bus_id_),
  };
  EnterGameAutoJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGameAutoJoinRsp_descriptor_,
      EnterGameAutoJoinRsp::default_instance_,
      EnterGameAutoJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameAutoJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGameAutoJoinRsp));
  EnterGameReq_descriptor_ = file->message_type(5);
  static const int EnterGameReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReq, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReq, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReq, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReq, logic_id_),
  };
  EnterGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGameReq_descriptor_,
      EnterGameReq::default_instance_,
      EnterGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGameReq));
  EnterGameRsp_descriptor_ = file->message_type(6);
  static const int EnterGameRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, chair_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, my_chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, player_id_),
  };
  EnterGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGameRsp_descriptor_,
      EnterGameRsp::default_instance_,
      EnterGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGameRsp));
  UserRecomeReq_descriptor_ = file->message_type(7);
  static const int UserRecomeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecomeReq, reserved_),
  };
  UserRecomeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRecomeReq_descriptor_,
      UserRecomeReq::default_instance_,
      UserRecomeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecomeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecomeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRecomeReq));
  UserRecomeRsp_descriptor_ = file->message_type(8);
  static const int UserRecomeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecomeRsp, result_),
  };
  UserRecomeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRecomeRsp_descriptor_,
      UserRecomeRsp::default_instance_,
      UserRecomeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecomeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRecomeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRecomeRsp));
  GameChairInfo_descriptor_ = file->message_type(9);
  static const int GameChairInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChairInfo, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChairInfo, chair_status_),
  };
  GameChairInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameChairInfo_descriptor_,
      GameChairInfo::default_instance_,
      GameChairInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChairInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChairInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameChairInfo));
  GameDeskInfo_descriptor_ = file->message_type(10);
  static const int GameDeskInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo, desk_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo, desk_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo, chair_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo, chairs_),
  };
  GameDeskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameDeskInfo_descriptor_,
      GameDeskInfo::default_instance_,
      GameDeskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameDeskInfo));
  DeskListReq_descriptor_ = file->message_type(11);
  static const int DeskListReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListReq, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListReq, game_bus_id_),
  };
  DeskListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeskListReq_descriptor_,
      DeskListReq::default_instance_,
      DeskListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeskListReq));
  DeskListRsp_descriptor_ = file->message_type(12);
  static const int DeskListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListRsp, desks_),
  };
  DeskListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeskListRsp_descriptor_,
      DeskListRsp::default_instance_,
      DeskListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeskListRsp));
  ChairCheckReq_descriptor_ = file->message_type(13);
  static const int ChairCheckReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckReq, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckReq, chair_id_),
  };
  ChairCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChairCheckReq_descriptor_,
      ChairCheckReq::default_instance_,
      ChairCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChairCheckReq));
  ChairCheckRsp_descriptor_ = file->message_type(14);
  static const int ChairCheckRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckRsp, result_),
  };
  ChairCheckRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChairCheckRsp_descriptor_,
      ChairCheckRsp::default_instance_,
      ChairCheckRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChairCheckRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChairCheckRsp));
  ExitRoomReq_descriptor_ = file->message_type(15);
  static const int ExitRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomReq, game_id_),
  };
  ExitRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitRoomReq_descriptor_,
      ExitRoomReq::default_instance_,
      ExitRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitRoomReq));
  ExitRoomRsp_descriptor_ = file->message_type(16);
  static const int ExitRoomRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomRsp, result_),
  };
  ExitRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitRoomRsp_descriptor_,
      ExitRoomRsp::default_instance_,
      ExitRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitRoomRsp));
  ExitGameReq_descriptor_ = file->message_type(17);
  static const int ExitGameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameReq, reserved_),
  };
  ExitGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitGameReq_descriptor_,
      ExitGameReq::default_instance_,
      ExitGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitGameReq));
  ExitGameRsp_descriptor_ = file->message_type(18);
  static const int ExitGameRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameRsp, exit_type_),
  };
  ExitGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitGameRsp_descriptor_,
      ExitGameRsp::default_instance_,
      ExitGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitGameRsp));
  GameRoomInfo_1_descriptor_ = file->message_type(19);
  static const int GameRoomInfo_1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo_1, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo_1, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo_1, min_coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo_1, online_count_),
  };
  GameRoomInfo_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomInfo_1_descriptor_,
      GameRoomInfo_1::default_instance_,
      GameRoomInfo_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomInfo_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomInfo_1));
  GameChairInfo_1_descriptor_ = file->message_type(20);
  static const int GameChairInfo_1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChairInfo_1, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChairInfo_1, player_id_),
  };
  GameChairInfo_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameChairInfo_1_descriptor_,
      GameChairInfo_1::default_instance_,
      GameChairInfo_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChairInfo_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChairInfo_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameChairInfo_1));
  GameDeskInfo_1_descriptor_ = file->message_type(21);
  static const int GameDeskInfo_1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo_1, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo_1, desk_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo_1, chair_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo_1, chars_),
  };
  GameDeskInfo_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameDeskInfo_1_descriptor_,
      GameDeskInfo_1::default_instance_,
      GameDeskInfo_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeskInfo_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameDeskInfo_1));
  GetRoomListReq_1_descriptor_ = file->message_type(22);
  static const int GetRoomListReq_1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListReq_1, game_id_),
  };
  GetRoomListReq_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomListReq_1_descriptor_,
      GetRoomListReq_1::default_instance_,
      GetRoomListReq_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListReq_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListReq_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomListReq_1));
  GetRoomListRsp_1_descriptor_ = file->message_type(23);
  static const int GetRoomListRsp_1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListRsp_1, rooms_),
  };
  GetRoomListRsp_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomListRsp_1_descriptor_,
      GetRoomListRsp_1::default_instance_,
      GetRoomListRsp_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListRsp_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListRsp_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomListRsp_1));
  GetDeskListReq_1_descriptor_ = file->message_type(24);
  static const int GetDeskListReq_1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeskListReq_1, room_id_),
  };
  GetDeskListReq_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDeskListReq_1_descriptor_,
      GetDeskListReq_1::default_instance_,
      GetDeskListReq_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeskListReq_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeskListReq_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDeskListReq_1));
  GetDeskListRsp_1_descriptor_ = file->message_type(25);
  static const int GetDeskListRsp_1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeskListRsp_1, desks_),
  };
  GetDeskListRsp_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDeskListRsp_1_descriptor_,
      GetDeskListRsp_1::default_instance_,
      GetDeskListRsp_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeskListRsp_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeskListRsp_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDeskListRsp_1));
  NotifyPlayerLeaveGame_descriptor_ = file->message_type(26);
  static const int NotifyPlayerLeaveGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerLeaveGame, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerLeaveGame, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerLeaveGame, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerLeaveGame, desk_id_),
  };
  NotifyPlayerLeaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPlayerLeaveGame_descriptor_,
      NotifyPlayerLeaveGame::default_instance_,
      NotifyPlayerLeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerLeaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerLeaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPlayerLeaveGame));
  MoneyChangeNotify_descriptor_ = file->message_type(27);
  static const int MoneyChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyChangeNotify, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyChangeNotify, cur_bank_money_),
  };
  MoneyChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyChangeNotify_descriptor_,
      MoneyChangeNotify::default_instance_,
      MoneyChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyChangeNotify));
  OnePaoMaDengInfo_descriptor_ = file->message_type(28);
  static const int OnePaoMaDengInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePaoMaDengInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePaoMaDengInfo, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePaoMaDengInfo, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePaoMaDengInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePaoMaDengInfo, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePaoMaDengInfo, win_jetton_),
  };
  OnePaoMaDengInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnePaoMaDengInfo_descriptor_,
      OnePaoMaDengInfo::default_instance_,
      OnePaoMaDengInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePaoMaDengInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePaoMaDengInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnePaoMaDengInfo));
  Proto_SCPaoMaDengNotify_descriptor_ = file->message_type(29);
  static const int Proto_SCPaoMaDengNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCPaoMaDengNotify, info_),
  };
  Proto_SCPaoMaDengNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCPaoMaDengNotify_descriptor_,
      Proto_SCPaoMaDengNotify::default_instance_,
      Proto_SCPaoMaDengNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCPaoMaDengNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCPaoMaDengNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCPaoMaDengNotify));
  Proto_CSRedeemCodeReq_descriptor_ = file->message_type(30);
  static const int Proto_CSRedeemCodeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRedeemCodeReq, id_),
  };
  Proto_CSRedeemCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSRedeemCodeReq_descriptor_,
      Proto_CSRedeemCodeReq::default_instance_,
      Proto_CSRedeemCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRedeemCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRedeemCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSRedeemCodeReq));
  Proto_SCRedeemCodeRsp_descriptor_ = file->message_type(31);
  static const int Proto_SCRedeemCodeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRedeemCodeRsp, result_),
  };
  Proto_SCRedeemCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCRedeemCodeRsp_descriptor_,
      Proto_SCRedeemCodeRsp::default_instance_,
      Proto_SCRedeemCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRedeemCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRedeemCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCRedeemCodeRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSGame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomStatusInfo_descriptor_, &RoomStatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomInfoReq_descriptor_, &GetRoomInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomInfoRsp_descriptor_, &GetRoomInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGameAutoJoinReq_descriptor_, &EnterGameAutoJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGameAutoJoinRsp_descriptor_, &EnterGameAutoJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGameReq_descriptor_, &EnterGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGameRsp_descriptor_, &EnterGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRecomeReq_descriptor_, &UserRecomeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRecomeRsp_descriptor_, &UserRecomeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameChairInfo_descriptor_, &GameChairInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameDeskInfo_descriptor_, &GameDeskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeskListReq_descriptor_, &DeskListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeskListRsp_descriptor_, &DeskListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChairCheckReq_descriptor_, &ChairCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChairCheckRsp_descriptor_, &ChairCheckRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitRoomReq_descriptor_, &ExitRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitRoomRsp_descriptor_, &ExitRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitGameReq_descriptor_, &ExitGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitGameRsp_descriptor_, &ExitGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomInfo_1_descriptor_, &GameRoomInfo_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameChairInfo_1_descriptor_, &GameChairInfo_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameDeskInfo_1_descriptor_, &GameDeskInfo_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomListReq_1_descriptor_, &GetRoomListReq_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomListRsp_1_descriptor_, &GetRoomListRsp_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDeskListReq_1_descriptor_, &GetDeskListReq_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDeskListRsp_1_descriptor_, &GetDeskListRsp_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPlayerLeaveGame_descriptor_, &NotifyPlayerLeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyChangeNotify_descriptor_, &MoneyChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnePaoMaDengInfo_descriptor_, &OnePaoMaDengInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCPaoMaDengNotify_descriptor_, &Proto_SCPaoMaDengNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSRedeemCodeReq_descriptor_, &Proto_CSRedeemCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCRedeemCodeRsp_descriptor_, &Proto_SCRedeemCodeRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSGame_2eproto() {
  delete RoomStatusInfo::default_instance_;
  delete RoomStatusInfo_reflection_;
  delete GetRoomInfoReq::default_instance_;
  delete GetRoomInfoReq_reflection_;
  delete GetRoomInfoRsp::default_instance_;
  delete GetRoomInfoRsp_reflection_;
  delete EnterGameAutoJoinReq::default_instance_;
  delete EnterGameAutoJoinReq_reflection_;
  delete EnterGameAutoJoinRsp::default_instance_;
  delete EnterGameAutoJoinRsp_reflection_;
  delete EnterGameReq::default_instance_;
  delete EnterGameReq_reflection_;
  delete EnterGameRsp::default_instance_;
  delete EnterGameRsp_reflection_;
  delete UserRecomeReq::default_instance_;
  delete UserRecomeReq_reflection_;
  delete UserRecomeRsp::default_instance_;
  delete UserRecomeRsp_reflection_;
  delete GameChairInfo::default_instance_;
  delete GameChairInfo_reflection_;
  delete GameDeskInfo::default_instance_;
  delete GameDeskInfo_reflection_;
  delete DeskListReq::default_instance_;
  delete DeskListReq_reflection_;
  delete DeskListRsp::default_instance_;
  delete DeskListRsp_reflection_;
  delete ChairCheckReq::default_instance_;
  delete ChairCheckReq_reflection_;
  delete ChairCheckRsp::default_instance_;
  delete ChairCheckRsp_reflection_;
  delete ExitRoomReq::default_instance_;
  delete ExitRoomReq_reflection_;
  delete ExitRoomRsp::default_instance_;
  delete ExitRoomRsp_reflection_;
  delete ExitGameReq::default_instance_;
  delete ExitGameReq_reflection_;
  delete ExitGameRsp::default_instance_;
  delete ExitGameRsp_reflection_;
  delete GameRoomInfo_1::default_instance_;
  delete GameRoomInfo_1_reflection_;
  delete GameChairInfo_1::default_instance_;
  delete GameChairInfo_1_reflection_;
  delete GameDeskInfo_1::default_instance_;
  delete GameDeskInfo_1_reflection_;
  delete GetRoomListReq_1::default_instance_;
  delete GetRoomListReq_1_reflection_;
  delete GetRoomListRsp_1::default_instance_;
  delete GetRoomListRsp_1_reflection_;
  delete GetDeskListReq_1::default_instance_;
  delete GetDeskListReq_1_reflection_;
  delete GetDeskListRsp_1::default_instance_;
  delete GetDeskListRsp_1_reflection_;
  delete NotifyPlayerLeaveGame::default_instance_;
  delete NotifyPlayerLeaveGame_reflection_;
  delete MoneyChangeNotify::default_instance_;
  delete MoneyChangeNotify_reflection_;
  delete OnePaoMaDengInfo::default_instance_;
  delete OnePaoMaDengInfo_reflection_;
  delete Proto_SCPaoMaDengNotify::default_instance_;
  delete Proto_SCPaoMaDengNotify_reflection_;
  delete Proto_CSRedeemCodeReq::default_instance_;
  delete Proto_CSRedeemCodeReq_reflection_;
  delete Proto_SCRedeemCodeRsp::default_instance_;
  delete Proto_SCRedeemCodeRsp_reflection_;
}

void protobuf_AddDesc_CSGame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CSGame.proto\022\010proto_ff\032\tCom.proto\032\017Com"
    "Define.proto\"{\n\016RoomStatusInfo\022\017\n\007game_i"
    "d\030\001 \001(\r\022\017\n\007room_id\030\002 \001(\r\022\021\n\troom_name\030\003 "
    "\001(\t\022\021\n\tenter_min\030\004 \001(\004\022\021\n\tenter_max\030\005 \001("
    "\004\022\016\n\006status\030\006 \001(\r\"!\n\016GetRoomInfoReq\022\017\n\007g"
    "ame_id\030\001 \001(\r\"I\n\016GetRoomInfoRsp\022\016\n\006result"
    "\030\001 \001(\005\022\'\n\005rooms\030\002 \003(\0132\030.proto_ff.RoomSta"
    "tusInfo\"n\n\024EnterGameAutoJoinReq\022\017\n\007game_"
    "id\030\001 \001(\r\022\017\n\007room_id\030\002 \001(\r\022\017\n\007desk_id\030\003 \001"
    "(\r\022\021\n\tplayer_id\030\004 \001(\004\022\020\n\010proxy_id\030\005 \001(\r\""
    "\223\001\n\024EnterGameAutoJoinRsp\022\016\n\006result\030\001 \001(\005"
    "\022\017\n\007game_id\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\r\022\017\n\007de"
    "sk_id\030\004 \001(\r\022\020\n\010chair_id\030\005 \001(\r\022\021\n\tplayer_"
    "id\030\006 \001(\004\022\023\n\013game_bus_id\030\007 \001(\r\"w\n\014EnterGa"
    "meReq\022\017\n\007game_id\030\001 \001(\r\022\017\n\007room_id\030\002 \001(\r\022"
    "\017\n\007desk_id\030\003 \001(\r\022\020\n\010chair_id\030\004 \001(\r\022\020\n\010pr"
    "oxy_id\030\005 \001(\r\022\020\n\010logic_id\030\006 \001(\r\"\222\001\n\014Enter"
    "GameRsp\022\016\n\006result\030\001 \001(\005\022\023\n\013chair_count\030\002"
    " \001(\r\022\023\n\013my_chair_id\030\003 \001(\r\022\017\n\007game_id\030\004 \001"
    "(\r\022\017\n\007room_id\030\005 \001(\r\022\023\n\013game_bus_id\030\006 \001(\r"
    "\022\021\n\tplayer_id\030\007 \001(\004\"!\n\rUserRecomeReq\022\020\n\010"
    "reserved\030\001 \001(\r\"\037\n\rUserRecomeRsp\022\016\n\006resul"
    "t\030\001 \001(\005\"7\n\rGameChairInfo\022\020\n\010chair_id\030\001 \001"
    "(\r\022\024\n\014chair_status\030\002 \001(\r\"\205\001\n\014GameDeskInf"
    "o\022\017\n\007desk_id\030\001 \001(\r\022\021\n\tdesk_name\030\002 \001(\t\022\023\n"
    "\013desk_status\030\003 \001(\r\022\023\n\013chair_count\030\004 \001(\r\022"
    "\'\n\006chairs\030\005 \003(\0132\027.proto_ff.GameChairInfo"
    "\"W\n\013DeskListReq\022\017\n\007room_id\030\001 \001(\r\022\017\n\007game"
    "_id\030\002 \001(\r\022\021\n\tcur_money\030\003 \001(\004\022\023\n\013game_bus"
    "_id\030\004 \001(\r\"D\n\013DeskListRsp\022\016\n\006result\030\001 \001(\005"
    "\022%\n\005desks\030\002 \003(\0132\026.proto_ff.GameDeskInfo\""
    "T\n\rChairCheckReq\022\017\n\007room_id\030\001 \001(\r\022\017\n\007gam"
    "e_id\030\002 \001(\r\022\017\n\007desk_id\030\003 \001(\r\022\020\n\010chair_id\030"
    "\004 \001(\r\"\037\n\rChairCheckRsp\022\016\n\006result\030\001 \001(\005\"/"
    "\n\013ExitRoomReq\022\017\n\007room_id\030\001 \001(\r\022\017\n\007game_i"
    "d\030\002 \001(\r\"\035\n\013ExitRoomRsp\022\016\n\006result\030\001 \001(\005\"\037"
    "\n\013ExitGameReq\022\020\n\010reserved\030\001 \001(\r\" \n\013ExitG"
    "ameRsp\022\021\n\texit_type\030\001 \001(\r\"]\n\016GameRoomInf"
    "o_1\022\017\n\007room_id\030\001 \001(\r\022\021\n\troom_name\030\002 \001(\t\022"
    "\021\n\tmin_coins\030\003 \001(\r\022\024\n\014online_count\030\004 \001(\r"
    "\"6\n\017GameChairInfo_1\022\020\n\010chair_id\030\001 \001(\r\022\021\n"
    "\tplayer_id\030\002 \001(\004\"s\n\016GameDeskInfo_1\022\017\n\007de"
    "sk_id\030\001 \001(\r\022\021\n\tdesk_name\030\002 \001(\t\022\023\n\013chair_"
    "count\030\003 \001(\r\022(\n\005chars\030\004 \003(\0132\031.proto_ff.Ga"
    "meChairInfo_1\"#\n\020GetRoomListReq_1\022\017\n\007gam"
    "e_id\030\001 \001(\r\";\n\020GetRoomListRsp_1\022\'\n\005rooms\030"
    "\001 \003(\0132\030.proto_ff.GameRoomInfo_1\"#\n\020GetDe"
    "skListReq_1\022\017\n\007room_id\030\001 \001(\r\";\n\020GetDeskL"
    "istRsp_1\022\'\n\005desks\030\001 \003(\0132\030.proto_ff.GameD"
    "eskInfo_1\"]\n\025NotifyPlayerLeaveGame\022\021\n\tpl"
    "ayer_id\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\017\n\007room_i"
    "d\030\003 \001(\r\022\017\n\007desk_id\030\004 \001(\r\">\n\021MoneyChangeN"
    "otify\022\021\n\tcur_money\030\001 \001(\004\022\026\n\016cur_bank_mon"
    "ey\030\002 \001(\004\"\201\001\n\020OnePaoMaDengInfo\022\021\n\tuser_na"
    "me\030\001 \001(\t\022\017\n\007game_id\030\002 \001(\r\022\021\n\tgame_name\030\003"
    " \001(\t\022\017\n\007room_id\030\004 \001(\r\022\021\n\troom_name\030\005 \001(\t"
    "\022\022\n\nwin_jetton\030\006 \001(\004\"C\n\027Proto_SCPaoMaDen"
    "gNotify\022(\n\004info\030\001 \003(\0132\032.proto_ff.OnePaoM"
    "aDengInfo\"#\n\025Proto_CSRedeemCodeReq\022\n\n\002id"
    "\030\001 \001(\t\"\'\n\025Proto_SCRedeemCodeRsp\022\016\n\006resul"
    "t\030\001 \001(\005", 2407);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSGame.proto", &protobuf_RegisterTypes);
  RoomStatusInfo::default_instance_ = new RoomStatusInfo();
  GetRoomInfoReq::default_instance_ = new GetRoomInfoReq();
  GetRoomInfoRsp::default_instance_ = new GetRoomInfoRsp();
  EnterGameAutoJoinReq::default_instance_ = new EnterGameAutoJoinReq();
  EnterGameAutoJoinRsp::default_instance_ = new EnterGameAutoJoinRsp();
  EnterGameReq::default_instance_ = new EnterGameReq();
  EnterGameRsp::default_instance_ = new EnterGameRsp();
  UserRecomeReq::default_instance_ = new UserRecomeReq();
  UserRecomeRsp::default_instance_ = new UserRecomeRsp();
  GameChairInfo::default_instance_ = new GameChairInfo();
  GameDeskInfo::default_instance_ = new GameDeskInfo();
  DeskListReq::default_instance_ = new DeskListReq();
  DeskListRsp::default_instance_ = new DeskListRsp();
  ChairCheckReq::default_instance_ = new ChairCheckReq();
  ChairCheckRsp::default_instance_ = new ChairCheckRsp();
  ExitRoomReq::default_instance_ = new ExitRoomReq();
  ExitRoomRsp::default_instance_ = new ExitRoomRsp();
  ExitGameReq::default_instance_ = new ExitGameReq();
  ExitGameRsp::default_instance_ = new ExitGameRsp();
  GameRoomInfo_1::default_instance_ = new GameRoomInfo_1();
  GameChairInfo_1::default_instance_ = new GameChairInfo_1();
  GameDeskInfo_1::default_instance_ = new GameDeskInfo_1();
  GetRoomListReq_1::default_instance_ = new GetRoomListReq_1();
  GetRoomListRsp_1::default_instance_ = new GetRoomListRsp_1();
  GetDeskListReq_1::default_instance_ = new GetDeskListReq_1();
  GetDeskListRsp_1::default_instance_ = new GetDeskListRsp_1();
  NotifyPlayerLeaveGame::default_instance_ = new NotifyPlayerLeaveGame();
  MoneyChangeNotify::default_instance_ = new MoneyChangeNotify();
  OnePaoMaDengInfo::default_instance_ = new OnePaoMaDengInfo();
  Proto_SCPaoMaDengNotify::default_instance_ = new Proto_SCPaoMaDengNotify();
  Proto_CSRedeemCodeReq::default_instance_ = new Proto_CSRedeemCodeReq();
  Proto_SCRedeemCodeRsp::default_instance_ = new Proto_SCRedeemCodeRsp();
  RoomStatusInfo::default_instance_->InitAsDefaultInstance();
  GetRoomInfoReq::default_instance_->InitAsDefaultInstance();
  GetRoomInfoRsp::default_instance_->InitAsDefaultInstance();
  EnterGameAutoJoinReq::default_instance_->InitAsDefaultInstance();
  EnterGameAutoJoinRsp::default_instance_->InitAsDefaultInstance();
  EnterGameReq::default_instance_->InitAsDefaultInstance();
  EnterGameRsp::default_instance_->InitAsDefaultInstance();
  UserRecomeReq::default_instance_->InitAsDefaultInstance();
  UserRecomeRsp::default_instance_->InitAsDefaultInstance();
  GameChairInfo::default_instance_->InitAsDefaultInstance();
  GameDeskInfo::default_instance_->InitAsDefaultInstance();
  DeskListReq::default_instance_->InitAsDefaultInstance();
  DeskListRsp::default_instance_->InitAsDefaultInstance();
  ChairCheckReq::default_instance_->InitAsDefaultInstance();
  ChairCheckRsp::default_instance_->InitAsDefaultInstance();
  ExitRoomReq::default_instance_->InitAsDefaultInstance();
  ExitRoomRsp::default_instance_->InitAsDefaultInstance();
  ExitGameReq::default_instance_->InitAsDefaultInstance();
  ExitGameRsp::default_instance_->InitAsDefaultInstance();
  GameRoomInfo_1::default_instance_->InitAsDefaultInstance();
  GameChairInfo_1::default_instance_->InitAsDefaultInstance();
  GameDeskInfo_1::default_instance_->InitAsDefaultInstance();
  GetRoomListReq_1::default_instance_->InitAsDefaultInstance();
  GetRoomListRsp_1::default_instance_->InitAsDefaultInstance();
  GetDeskListReq_1::default_instance_->InitAsDefaultInstance();
  GetDeskListRsp_1::default_instance_->InitAsDefaultInstance();
  NotifyPlayerLeaveGame::default_instance_->InitAsDefaultInstance();
  MoneyChangeNotify::default_instance_->InitAsDefaultInstance();
  OnePaoMaDengInfo::default_instance_->InitAsDefaultInstance();
  Proto_SCPaoMaDengNotify::default_instance_->InitAsDefaultInstance();
  Proto_CSRedeemCodeReq::default_instance_->InitAsDefaultInstance();
  Proto_SCRedeemCodeRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSGame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSGame_2eproto {
  StaticDescriptorInitializer_CSGame_2eproto() {
    protobuf_AddDesc_CSGame_2eproto();
  }
} static_descriptor_initializer_CSGame_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RoomStatusInfo::kGameIdFieldNumber;
const int RoomStatusInfo::kRoomIdFieldNumber;
const int RoomStatusInfo::kRoomNameFieldNumber;
const int RoomStatusInfo::kEnterMinFieldNumber;
const int RoomStatusInfo::kEnterMaxFieldNumber;
const int RoomStatusInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

RoomStatusInfo::RoomStatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomStatusInfo::InitAsDefaultInstance() {
}

RoomStatusInfo::RoomStatusInfo(const RoomStatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomStatusInfo::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  room_id_ = 0u;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enter_min_ = GOOGLE_ULONGLONG(0);
  enter_max_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomStatusInfo::~RoomStatusInfo() {
  SharedDtor();
}

void RoomStatusInfo::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void RoomStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomStatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomStatusInfo_descriptor_;
}

const RoomStatusInfo& RoomStatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

RoomStatusInfo* RoomStatusInfo::default_instance_ = NULL;

RoomStatusInfo* RoomStatusInfo::New() const {
  return new RoomStatusInfo;
}

void RoomStatusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    room_id_ = 0u;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    enter_min_ = GOOGLE_ULONGLONG(0);
    enter_max_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }

      // optional string room_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enter_min;
        break;
      }

      // optional uint64 enter_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_min_)));
          set_has_enter_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enter_max;
        break;
      }

      // optional uint64 enter_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_max_)));
          set_has_enter_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->room_name(), output);
  }

  // optional uint64 enter_min = 4;
  if (has_enter_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->enter_min(), output);
  }

  // optional uint64 enter_max = 5;
  if (has_enter_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->enter_max(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomStatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  // optional uint64 enter_min = 4;
  if (has_enter_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->enter_min(), target);
  }

  // optional uint64 enter_max = 5;
  if (has_enter_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->enter_max(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomStatusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional string room_name = 3;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional uint64 enter_min = 4;
    if (has_enter_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_min());
    }

    // optional uint64 enter_max = 5;
    if (has_enter_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_max());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomStatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomStatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomStatusInfo::MergeFrom(const RoomStatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_enter_min()) {
      set_enter_min(from.enter_min());
    }
    if (from.has_enter_max()) {
      set_enter_max(from.enter_max());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomStatusInfo::CopyFrom(const RoomStatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomStatusInfo::IsInitialized() const {

  return true;
}

void RoomStatusInfo::Swap(RoomStatusInfo* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(enter_min_, other->enter_min_);
    std::swap(enter_max_, other->enter_max_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomStatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomStatusInfo_descriptor_;
  metadata.reflection = RoomStatusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomInfoReq::kGameIdFieldNumber;
#endif  // !_MSC_VER

GetRoomInfoReq::GetRoomInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomInfoReq::InitAsDefaultInstance() {
}

GetRoomInfoReq::GetRoomInfoReq(const GetRoomInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomInfoReq::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomInfoReq::~GetRoomInfoReq() {
  SharedDtor();
}

void GetRoomInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoomInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomInfoReq_descriptor_;
}

const GetRoomInfoReq& GetRoomInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GetRoomInfoReq* GetRoomInfoReq::default_instance_ = NULL;

GetRoomInfoReq* GetRoomInfoReq::New() const {
  return new GetRoomInfoReq;
}

void GetRoomInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomInfoReq::MergeFrom(const GetRoomInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomInfoReq::CopyFrom(const GetRoomInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomInfoReq::IsInitialized() const {

  return true;
}

void GetRoomInfoReq::Swap(GetRoomInfoReq* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomInfoReq_descriptor_;
  metadata.reflection = GetRoomInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomInfoRsp::kResultFieldNumber;
const int GetRoomInfoRsp::kRoomsFieldNumber;
#endif  // !_MSC_VER

GetRoomInfoRsp::GetRoomInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomInfoRsp::InitAsDefaultInstance() {
}

GetRoomInfoRsp::GetRoomInfoRsp(const GetRoomInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomInfoRsp::~GetRoomInfoRsp() {
  SharedDtor();
}

void GetRoomInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoomInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomInfoRsp_descriptor_;
}

const GetRoomInfoRsp& GetRoomInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GetRoomInfoRsp* GetRoomInfoRsp::default_instance_ = NULL;

GetRoomInfoRsp* GetRoomInfoRsp::New() const {
  return new GetRoomInfoRsp;
}

void GetRoomInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rooms;
        break;
      }

      // repeated .proto_ff.RoomStatusInfo rooms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto_ff.RoomStatusInfo rooms = 2;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto_ff.RoomStatusInfo rooms = 2;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto_ff.RoomStatusInfo rooms = 2;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomInfoRsp::MergeFrom(const GetRoomInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomInfoRsp::CopyFrom(const GetRoomInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomInfoRsp::IsInitialized() const {

  return true;
}

void GetRoomInfoRsp::Swap(GetRoomInfoRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomInfoRsp_descriptor_;
  metadata.reflection = GetRoomInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGameAutoJoinReq::kGameIdFieldNumber;
const int EnterGameAutoJoinReq::kRoomIdFieldNumber;
const int EnterGameAutoJoinReq::kDeskIdFieldNumber;
const int EnterGameAutoJoinReq::kPlayerIdFieldNumber;
const int EnterGameAutoJoinReq::kProxyIdFieldNumber;
#endif  // !_MSC_VER

EnterGameAutoJoinReq::EnterGameAutoJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGameAutoJoinReq::InitAsDefaultInstance() {
}

EnterGameAutoJoinReq::EnterGameAutoJoinReq(const EnterGameAutoJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGameAutoJoinReq::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  proxy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGameAutoJoinReq::~EnterGameAutoJoinReq() {
  SharedDtor();
}

void EnterGameAutoJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGameAutoJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGameAutoJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGameAutoJoinReq_descriptor_;
}

const EnterGameAutoJoinReq& EnterGameAutoJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

EnterGameAutoJoinReq* EnterGameAutoJoinReq::default_instance_ = NULL;

EnterGameAutoJoinReq* EnterGameAutoJoinReq::New() const {
  return new EnterGameAutoJoinReq;
}

void EnterGameAutoJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    room_id_ = 0u;
    desk_id_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
    proxy_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGameAutoJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proxy_id;
        break;
      }

      // optional uint32 proxy_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterGameAutoJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // optional uint32 desk_id = 3;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->desk_id(), output);
  }

  // optional uint64 player_id = 4;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  // optional uint32 proxy_id = 5;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->proxy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGameAutoJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // optional uint32 desk_id = 3;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->desk_id(), target);
  }

  // optional uint64 player_id = 4;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  // optional uint32 proxy_id = 5;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->proxy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGameAutoJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 desk_id = 3;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional uint64 player_id = 4;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 proxy_id = 5;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGameAutoJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGameAutoJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGameAutoJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGameAutoJoinReq::MergeFrom(const EnterGameAutoJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGameAutoJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGameAutoJoinReq::CopyFrom(const EnterGameAutoJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameAutoJoinReq::IsInitialized() const {

  return true;
}

void EnterGameAutoJoinReq::Swap(EnterGameAutoJoinReq* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGameAutoJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGameAutoJoinReq_descriptor_;
  metadata.reflection = EnterGameAutoJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGameAutoJoinRsp::kResultFieldNumber;
const int EnterGameAutoJoinRsp::kGameIdFieldNumber;
const int EnterGameAutoJoinRsp::kRoomIdFieldNumber;
const int EnterGameAutoJoinRsp::kDeskIdFieldNumber;
const int EnterGameAutoJoinRsp::kChairIdFieldNumber;
const int EnterGameAutoJoinRsp::kPlayerIdFieldNumber;
const int EnterGameAutoJoinRsp::kGameBusIdFieldNumber;
#endif  // !_MSC_VER

EnterGameAutoJoinRsp::EnterGameAutoJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGameAutoJoinRsp::InitAsDefaultInstance() {
}

EnterGameAutoJoinRsp::EnterGameAutoJoinRsp(const EnterGameAutoJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGameAutoJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  chair_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGameAutoJoinRsp::~EnterGameAutoJoinRsp() {
  SharedDtor();
}

void EnterGameAutoJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGameAutoJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGameAutoJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGameAutoJoinRsp_descriptor_;
}

const EnterGameAutoJoinRsp& EnterGameAutoJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

EnterGameAutoJoinRsp* EnterGameAutoJoinRsp::default_instance_ = NULL;

EnterGameAutoJoinRsp* EnterGameAutoJoinRsp::New() const {
  return new EnterGameAutoJoinRsp;
}

void EnterGameAutoJoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    game_id_ = 0u;
    room_id_ = 0u;
    desk_id_ = 0u;
    chair_id_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
    game_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGameAutoJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterGameAutoJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 desk_id = 4;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->desk_id(), output);
  }

  // optional uint32 chair_id = 5;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chair_id(), output);
  }

  // optional uint64 player_id = 6;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->player_id(), output);
  }

  // optional uint32 game_bus_id = 7;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGameAutoJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 desk_id = 4;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->desk_id(), target);
  }

  // optional uint32 chair_id = 5;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chair_id(), target);
  }

  // optional uint64 player_id = 6;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->player_id(), target);
  }

  // optional uint32 game_bus_id = 7;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGameAutoJoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 desk_id = 4;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional uint32 chair_id = 5;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional uint64 player_id = 6;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_bus_id = 7;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGameAutoJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGameAutoJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGameAutoJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGameAutoJoinRsp::MergeFrom(const EnterGameAutoJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGameAutoJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGameAutoJoinRsp::CopyFrom(const EnterGameAutoJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameAutoJoinRsp::IsInitialized() const {

  return true;
}

void EnterGameAutoJoinRsp::Swap(EnterGameAutoJoinRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGameAutoJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGameAutoJoinRsp_descriptor_;
  metadata.reflection = EnterGameAutoJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGameReq::kGameIdFieldNumber;
const int EnterGameReq::kRoomIdFieldNumber;
const int EnterGameReq::kDeskIdFieldNumber;
const int EnterGameReq::kChairIdFieldNumber;
const int EnterGameReq::kProxyIdFieldNumber;
const int EnterGameReq::kLogicIdFieldNumber;
#endif  // !_MSC_VER

EnterGameReq::EnterGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGameReq::InitAsDefaultInstance() {
}

EnterGameReq::EnterGameReq(const EnterGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGameReq::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  chair_id_ = 0u;
  proxy_id_ = 0u;
  logic_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGameReq::~EnterGameReq() {
  SharedDtor();
}

void EnterGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGameReq_descriptor_;
}

const EnterGameReq& EnterGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

EnterGameReq* EnterGameReq::default_instance_ = NULL;

EnterGameReq* EnterGameReq::New() const {
  return new EnterGameReq;
}

void EnterGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    room_id_ = 0u;
    desk_id_ = 0u;
    chair_id_ = 0u;
    proxy_id_ = 0u;
    logic_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proxy_id;
        break;
      }

      // optional uint32 proxy_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logic_id;
        break;
      }

      // optional uint32 logic_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // optional uint32 desk_id = 3;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->desk_id(), output);
  }

  // optional uint32 chair_id = 4;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chair_id(), output);
  }

  // optional uint32 proxy_id = 5;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->proxy_id(), output);
  }

  // optional uint32 logic_id = 6;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logic_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // optional uint32 desk_id = 3;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->desk_id(), target);
  }

  // optional uint32 chair_id = 4;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chair_id(), target);
  }

  // optional uint32 proxy_id = 5;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->proxy_id(), target);
  }

  // optional uint32 logic_id = 6;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logic_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 desk_id = 3;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional uint32 chair_id = 4;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional uint32 proxy_id = 5;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_id());
    }

    // optional uint32 logic_id = 6;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGameReq::MergeFrom(const EnterGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGameReq::CopyFrom(const EnterGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameReq::IsInitialized() const {

  return true;
}

void EnterGameReq::Swap(EnterGameReq* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGameReq_descriptor_;
  metadata.reflection = EnterGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGameRsp::kResultFieldNumber;
const int EnterGameRsp::kChairCountFieldNumber;
const int EnterGameRsp::kMyChairIdFieldNumber;
const int EnterGameRsp::kGameIdFieldNumber;
const int EnterGameRsp::kRoomIdFieldNumber;
const int EnterGameRsp::kGameBusIdFieldNumber;
const int EnterGameRsp::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

EnterGameRsp::EnterGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGameRsp::InitAsDefaultInstance() {
}

EnterGameRsp::EnterGameRsp(const EnterGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGameRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  chair_count_ = 0u;
  my_chair_id_ = 0u;
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGameRsp::~EnterGameRsp() {
  SharedDtor();
}

void EnterGameRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGameRsp_descriptor_;
}

const EnterGameRsp& EnterGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

EnterGameRsp* EnterGameRsp::default_instance_ = NULL;

EnterGameRsp* EnterGameRsp::New() const {
  return new EnterGameRsp;
}

void EnterGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    chair_count_ = 0u;
    my_chair_id_ = 0u;
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_count;
        break;
      }

      // optional uint32 chair_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_count_)));
          set_has_chair_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_chair_id;
        break;
      }

      // optional uint32 my_chair_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_chair_id_)));
          set_has_my_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 chair_count = 2;
  if (has_chair_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chair_count(), output);
  }

  // optional uint32 my_chair_id = 3;
  if (has_my_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->my_chair_id(), output);
  }

  // optional uint32 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_id(), output);
  }

  // optional uint32 room_id = 5;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 6;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_bus_id(), output);
  }

  // optional uint64 player_id = 7;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 chair_count = 2;
  if (has_chair_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chair_count(), target);
  }

  // optional uint32 my_chair_id = 3;
  if (has_my_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->my_chair_id(), target);
  }

  // optional uint32 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_id(), target);
  }

  // optional uint32 room_id = 5;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 6;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_bus_id(), target);
  }

  // optional uint64 player_id = 7;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 chair_count = 2;
    if (has_chair_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_count());
    }

    // optional uint32 my_chair_id = 3;
    if (has_my_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_chair_id());
    }

    // optional uint32 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 5;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 6;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint64 player_id = 7;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGameRsp::MergeFrom(const EnterGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_chair_count()) {
      set_chair_count(from.chair_count());
    }
    if (from.has_my_chair_id()) {
      set_my_chair_id(from.my_chair_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGameRsp::CopyFrom(const EnterGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameRsp::IsInitialized() const {

  return true;
}

void EnterGameRsp::Swap(EnterGameRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(chair_count_, other->chair_count_);
    std::swap(my_chair_id_, other->my_chair_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGameRsp_descriptor_;
  metadata.reflection = EnterGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRecomeReq::kReservedFieldNumber;
#endif  // !_MSC_VER

UserRecomeReq::UserRecomeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRecomeReq::InitAsDefaultInstance() {
}

UserRecomeReq::UserRecomeReq(const UserRecomeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRecomeReq::SharedCtor() {
  _cached_size_ = 0;
  reserved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRecomeReq::~UserRecomeReq() {
  SharedDtor();
}

void UserRecomeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRecomeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRecomeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRecomeReq_descriptor_;
}

const UserRecomeReq& UserRecomeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

UserRecomeReq* UserRecomeReq::default_instance_ = NULL;

UserRecomeReq* UserRecomeReq::New() const {
  return new UserRecomeReq;
}

void UserRecomeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserved_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRecomeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reserved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRecomeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reserved = 1;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reserved(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRecomeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reserved = 1;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reserved(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRecomeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reserved = 1;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRecomeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRecomeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRecomeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRecomeReq::MergeFrom(const UserRecomeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRecomeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRecomeReq::CopyFrom(const UserRecomeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRecomeReq::IsInitialized() const {

  return true;
}

void UserRecomeReq::Swap(UserRecomeReq* other) {
  if (other != this) {
    std::swap(reserved_, other->reserved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRecomeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRecomeReq_descriptor_;
  metadata.reflection = UserRecomeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRecomeRsp::kResultFieldNumber;
#endif  // !_MSC_VER

UserRecomeRsp::UserRecomeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRecomeRsp::InitAsDefaultInstance() {
}

UserRecomeRsp::UserRecomeRsp(const UserRecomeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRecomeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRecomeRsp::~UserRecomeRsp() {
  SharedDtor();
}

void UserRecomeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRecomeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRecomeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRecomeRsp_descriptor_;
}

const UserRecomeRsp& UserRecomeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

UserRecomeRsp* UserRecomeRsp::default_instance_ = NULL;

UserRecomeRsp* UserRecomeRsp::New() const {
  return new UserRecomeRsp;
}

void UserRecomeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRecomeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRecomeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRecomeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRecomeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRecomeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRecomeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRecomeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRecomeRsp::MergeFrom(const UserRecomeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRecomeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRecomeRsp::CopyFrom(const UserRecomeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRecomeRsp::IsInitialized() const {

  return true;
}

void UserRecomeRsp::Swap(UserRecomeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRecomeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRecomeRsp_descriptor_;
  metadata.reflection = UserRecomeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameChairInfo::kChairIdFieldNumber;
const int GameChairInfo::kChairStatusFieldNumber;
#endif  // !_MSC_VER

GameChairInfo::GameChairInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameChairInfo::InitAsDefaultInstance() {
}

GameChairInfo::GameChairInfo(const GameChairInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameChairInfo::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  chair_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameChairInfo::~GameChairInfo() {
  SharedDtor();
}

void GameChairInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameChairInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameChairInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameChairInfo_descriptor_;
}

const GameChairInfo& GameChairInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GameChairInfo* GameChairInfo::default_instance_ = NULL;

GameChairInfo* GameChairInfo::New() const {
  return new GameChairInfo;
}

void GameChairInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
    chair_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameChairInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_status;
        break;
      }

      // optional uint32 chair_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_status_)));
          set_has_chair_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameChairInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // optional uint32 chair_status = 2;
  if (has_chair_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chair_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameChairInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // optional uint32 chair_status = 2;
  if (has_chair_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chair_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameChairInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional uint32 chair_status = 2;
    if (has_chair_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameChairInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameChairInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameChairInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameChairInfo::MergeFrom(const GameChairInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_chair_status()) {
      set_chair_status(from.chair_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameChairInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameChairInfo::CopyFrom(const GameChairInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameChairInfo::IsInitialized() const {

  return true;
}

void GameChairInfo::Swap(GameChairInfo* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(chair_status_, other->chair_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameChairInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameChairInfo_descriptor_;
  metadata.reflection = GameChairInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameDeskInfo::kDeskIdFieldNumber;
const int GameDeskInfo::kDeskNameFieldNumber;
const int GameDeskInfo::kDeskStatusFieldNumber;
const int GameDeskInfo::kChairCountFieldNumber;
const int GameDeskInfo::kChairsFieldNumber;
#endif  // !_MSC_VER

GameDeskInfo::GameDeskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameDeskInfo::InitAsDefaultInstance() {
}

GameDeskInfo::GameDeskInfo(const GameDeskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameDeskInfo::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0u;
  desk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desk_status_ = 0u;
  chair_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameDeskInfo::~GameDeskInfo() {
  SharedDtor();
}

void GameDeskInfo::SharedDtor() {
  if (desk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete desk_name_;
  }
  if (this != default_instance_) {
  }
}

void GameDeskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDeskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameDeskInfo_descriptor_;
}

const GameDeskInfo& GameDeskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GameDeskInfo* GameDeskInfo::default_instance_ = NULL;

GameDeskInfo* GameDeskInfo::New() const {
  return new GameDeskInfo;
}

void GameDeskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0u;
    if (has_desk_name()) {
      if (desk_name_ != &::google::protobuf::internal::kEmptyString) {
        desk_name_->clear();
      }
    }
    desk_status_ = 0u;
    chair_count_ = 0u;
  }
  chairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameDeskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 desk_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desk_name;
        break;
      }

      // optional string desk_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desk_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desk_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desk_name().data(), this->desk_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_desk_status;
        break;
      }

      // optional uint32 desk_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_status_)));
          set_has_desk_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chair_count;
        break;
      }

      // optional uint32 chair_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_count_)));
          set_has_chair_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_chairs;
        break;
      }

      // repeated .proto_ff.GameChairInfo chairs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_chairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameDeskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 desk_id = 1;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->desk_id(), output);
  }

  // optional string desk_name = 2;
  if (has_desk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desk_name().data(), this->desk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desk_name(), output);
  }

  // optional uint32 desk_status = 3;
  if (has_desk_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->desk_status(), output);
  }

  // optional uint32 chair_count = 4;
  if (has_chair_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chair_count(), output);
  }

  // repeated .proto_ff.GameChairInfo chairs = 5;
  for (int i = 0; i < this->chairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameDeskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 desk_id = 1;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->desk_id(), target);
  }

  // optional string desk_name = 2;
  if (has_desk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desk_name().data(), this->desk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desk_name(), target);
  }

  // optional uint32 desk_status = 3;
  if (has_desk_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->desk_status(), target);
  }

  // optional uint32 chair_count = 4;
  if (has_chair_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chair_count(), target);
  }

  // repeated .proto_ff.GameChairInfo chairs = 5;
  for (int i = 0; i < this->chairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameDeskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 desk_id = 1;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional string desk_name = 2;
    if (has_desk_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desk_name());
    }

    // optional uint32 desk_status = 3;
    if (has_desk_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_status());
    }

    // optional uint32 chair_count = 4;
    if (has_chair_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_count());
    }

  }
  // repeated .proto_ff.GameChairInfo chairs = 5;
  total_size += 1 * this->chairs_size();
  for (int i = 0; i < this->chairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDeskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameDeskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameDeskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameDeskInfo::MergeFrom(const GameDeskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  chairs_.MergeFrom(from.chairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_desk_name()) {
      set_desk_name(from.desk_name());
    }
    if (from.has_desk_status()) {
      set_desk_status(from.desk_status());
    }
    if (from.has_chair_count()) {
      set_chair_count(from.chair_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameDeskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDeskInfo::CopyFrom(const GameDeskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDeskInfo::IsInitialized() const {

  return true;
}

void GameDeskInfo::Swap(GameDeskInfo* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(desk_name_, other->desk_name_);
    std::swap(desk_status_, other->desk_status_);
    std::swap(chair_count_, other->chair_count_);
    chairs_.Swap(&other->chairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameDeskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameDeskInfo_descriptor_;
  metadata.reflection = GameDeskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeskListReq::kRoomIdFieldNumber;
const int DeskListReq::kGameIdFieldNumber;
const int DeskListReq::kCurMoneyFieldNumber;
const int DeskListReq::kGameBusIdFieldNumber;
#endif  // !_MSC_VER

DeskListReq::DeskListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeskListReq::InitAsDefaultInstance() {
}

DeskListReq::DeskListReq(const DeskListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeskListReq::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  game_id_ = 0u;
  cur_money_ = GOOGLE_ULONGLONG(0);
  game_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeskListReq::~DeskListReq() {
  SharedDtor();
}

void DeskListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeskListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeskListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskListReq_descriptor_;
}

const DeskListReq& DeskListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

DeskListReq* DeskListReq::default_instance_ = NULL;

DeskListReq* DeskListReq::New() const {
  return new DeskListReq;
}

void DeskListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    game_id_ = 0u;
    cur_money_ = GOOGLE_ULONGLONG(0);
    game_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeskListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_money;
        break;
      }

      // optional uint64 cur_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeskListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint64 cur_money = 3;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_money(), output);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeskListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint64 cur_money = 3;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_money(), target);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeskListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint64 cur_money = 3;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_money());
    }

    // optional uint32 game_bus_id = 4;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeskListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeskListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeskListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeskListReq::MergeFrom(const DeskListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeskListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeskListReq::CopyFrom(const DeskListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeskListReq::IsInitialized() const {

  return true;
}

void DeskListReq::Swap(DeskListReq* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(cur_money_, other->cur_money_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeskListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeskListReq_descriptor_;
  metadata.reflection = DeskListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeskListRsp::kResultFieldNumber;
const int DeskListRsp::kDesksFieldNumber;
#endif  // !_MSC_VER

DeskListRsp::DeskListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeskListRsp::InitAsDefaultInstance() {
}

DeskListRsp::DeskListRsp(const DeskListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeskListRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeskListRsp::~DeskListRsp() {
  SharedDtor();
}

void DeskListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeskListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeskListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskListRsp_descriptor_;
}

const DeskListRsp& DeskListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

DeskListRsp* DeskListRsp::default_instance_ = NULL;

DeskListRsp* DeskListRsp::New() const {
  return new DeskListRsp;
}

void DeskListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  desks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeskListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desks;
        break;
      }

      // repeated .proto_ff.GameDeskInfo desks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_desks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeskListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto_ff.GameDeskInfo desks = 2;
  for (int i = 0; i < this->desks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->desks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeskListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto_ff.GameDeskInfo desks = 2;
  for (int i = 0; i < this->desks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->desks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeskListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto_ff.GameDeskInfo desks = 2;
  total_size += 1 * this->desks_size();
  for (int i = 0; i < this->desks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->desks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeskListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeskListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeskListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeskListRsp::MergeFrom(const DeskListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  desks_.MergeFrom(from.desks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeskListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeskListRsp::CopyFrom(const DeskListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeskListRsp::IsInitialized() const {

  return true;
}

void DeskListRsp::Swap(DeskListRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    desks_.Swap(&other->desks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeskListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeskListRsp_descriptor_;
  metadata.reflection = DeskListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChairCheckReq::kRoomIdFieldNumber;
const int ChairCheckReq::kGameIdFieldNumber;
const int ChairCheckReq::kDeskIdFieldNumber;
const int ChairCheckReq::kChairIdFieldNumber;
#endif  // !_MSC_VER

ChairCheckReq::ChairCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChairCheckReq::InitAsDefaultInstance() {
}

ChairCheckReq::ChairCheckReq(const ChairCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChairCheckReq::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  game_id_ = 0u;
  desk_id_ = 0u;
  chair_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChairCheckReq::~ChairCheckReq() {
  SharedDtor();
}

void ChairCheckReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChairCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChairCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChairCheckReq_descriptor_;
}

const ChairCheckReq& ChairCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

ChairCheckReq* ChairCheckReq::default_instance_ = NULL;

ChairCheckReq* ChairCheckReq::New() const {
  return new ChairCheckReq;
}

void ChairCheckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    game_id_ = 0u;
    desk_id_ = 0u;
    chair_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChairCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChairCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 desk_id = 3;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->desk_id(), output);
  }

  // optional uint32 chair_id = 4;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chair_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChairCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 desk_id = 3;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->desk_id(), target);
  }

  // optional uint32 chair_id = 4;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chair_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChairCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 desk_id = 3;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional uint32 chair_id = 4;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChairCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChairCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChairCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChairCheckReq::MergeFrom(const ChairCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChairCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChairCheckReq::CopyFrom(const ChairCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChairCheckReq::IsInitialized() const {

  return true;
}

void ChairCheckReq::Swap(ChairCheckReq* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChairCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChairCheckReq_descriptor_;
  metadata.reflection = ChairCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChairCheckRsp::kResultFieldNumber;
#endif  // !_MSC_VER

ChairCheckRsp::ChairCheckRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChairCheckRsp::InitAsDefaultInstance() {
}

ChairCheckRsp::ChairCheckRsp(const ChairCheckRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChairCheckRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChairCheckRsp::~ChairCheckRsp() {
  SharedDtor();
}

void ChairCheckRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChairCheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChairCheckRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChairCheckRsp_descriptor_;
}

const ChairCheckRsp& ChairCheckRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

ChairCheckRsp* ChairCheckRsp::default_instance_ = NULL;

ChairCheckRsp* ChairCheckRsp::New() const {
  return new ChairCheckRsp;
}

void ChairCheckRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChairCheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChairCheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChairCheckRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChairCheckRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChairCheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChairCheckRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChairCheckRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChairCheckRsp::MergeFrom(const ChairCheckRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChairCheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChairCheckRsp::CopyFrom(const ChairCheckRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChairCheckRsp::IsInitialized() const {

  return true;
}

void ChairCheckRsp::Swap(ChairCheckRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChairCheckRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChairCheckRsp_descriptor_;
  metadata.reflection = ChairCheckRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitRoomReq::kRoomIdFieldNumber;
const int ExitRoomReq::kGameIdFieldNumber;
#endif  // !_MSC_VER

ExitRoomReq::ExitRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitRoomReq::InitAsDefaultInstance() {
}

ExitRoomReq::ExitRoomReq(const ExitRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitRoomReq::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitRoomReq::~ExitRoomReq() {
  SharedDtor();
}

void ExitRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitRoomReq_descriptor_;
}

const ExitRoomReq& ExitRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

ExitRoomReq* ExitRoomReq::default_instance_ = NULL;

ExitRoomReq* ExitRoomReq::New() const {
  return new ExitRoomReq;
}

void ExitRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    game_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitRoomReq::MergeFrom(const ExitRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRoomReq::CopyFrom(const ExitRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRoomReq::IsInitialized() const {

  return true;
}

void ExitRoomReq::Swap(ExitRoomReq* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitRoomReq_descriptor_;
  metadata.reflection = ExitRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitRoomRsp::kResultFieldNumber;
#endif  // !_MSC_VER

ExitRoomRsp::ExitRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitRoomRsp::InitAsDefaultInstance() {
}

ExitRoomRsp::ExitRoomRsp(const ExitRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitRoomRsp::~ExitRoomRsp() {
  SharedDtor();
}

void ExitRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitRoomRsp_descriptor_;
}

const ExitRoomRsp& ExitRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

ExitRoomRsp* ExitRoomRsp::default_instance_ = NULL;

ExitRoomRsp* ExitRoomRsp::New() const {
  return new ExitRoomRsp;
}

void ExitRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitRoomRsp::MergeFrom(const ExitRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRoomRsp::CopyFrom(const ExitRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRoomRsp::IsInitialized() const {

  return true;
}

void ExitRoomRsp::Swap(ExitRoomRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitRoomRsp_descriptor_;
  metadata.reflection = ExitRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitGameReq::kReservedFieldNumber;
#endif  // !_MSC_VER

ExitGameReq::ExitGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitGameReq::InitAsDefaultInstance() {
}

ExitGameReq::ExitGameReq(const ExitGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitGameReq::SharedCtor() {
  _cached_size_ = 0;
  reserved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitGameReq::~ExitGameReq() {
  SharedDtor();
}

void ExitGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitGameReq_descriptor_;
}

const ExitGameReq& ExitGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

ExitGameReq* ExitGameReq::default_instance_ = NULL;

ExitGameReq* ExitGameReq::New() const {
  return new ExitGameReq;
}

void ExitGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserved_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reserved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reserved = 1;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reserved(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reserved = 1;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reserved(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reserved = 1;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitGameReq::MergeFrom(const ExitGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGameReq::CopyFrom(const ExitGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGameReq::IsInitialized() const {

  return true;
}

void ExitGameReq::Swap(ExitGameReq* other) {
  if (other != this) {
    std::swap(reserved_, other->reserved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitGameReq_descriptor_;
  metadata.reflection = ExitGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitGameRsp::kExitTypeFieldNumber;
#endif  // !_MSC_VER

ExitGameRsp::ExitGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitGameRsp::InitAsDefaultInstance() {
}

ExitGameRsp::ExitGameRsp(const ExitGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitGameRsp::SharedCtor() {
  _cached_size_ = 0;
  exit_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitGameRsp::~ExitGameRsp() {
  SharedDtor();
}

void ExitGameRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitGameRsp_descriptor_;
}

const ExitGameRsp& ExitGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

ExitGameRsp* ExitGameRsp::default_instance_ = NULL;

ExitGameRsp* ExitGameRsp::New() const {
  return new ExitGameRsp;
}

void ExitGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exit_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 exit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exit_type_)));
          set_has_exit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 exit_type = 1;
  if (has_exit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exit_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 exit_type = 1;
  if (has_exit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exit_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 exit_type = 1;
    if (has_exit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exit_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitGameRsp::MergeFrom(const ExitGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exit_type()) {
      set_exit_type(from.exit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGameRsp::CopyFrom(const ExitGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGameRsp::IsInitialized() const {

  return true;
}

void ExitGameRsp::Swap(ExitGameRsp* other) {
  if (other != this) {
    std::swap(exit_type_, other->exit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitGameRsp_descriptor_;
  metadata.reflection = ExitGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomInfo_1::kRoomIdFieldNumber;
const int GameRoomInfo_1::kRoomNameFieldNumber;
const int GameRoomInfo_1::kMinCoinsFieldNumber;
const int GameRoomInfo_1::kOnlineCountFieldNumber;
#endif  // !_MSC_VER

GameRoomInfo_1::GameRoomInfo_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomInfo_1::InitAsDefaultInstance() {
}

GameRoomInfo_1::GameRoomInfo_1(const GameRoomInfo_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomInfo_1::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_coins_ = 0u;
  online_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomInfo_1::~GameRoomInfo_1() {
  SharedDtor();
}

void GameRoomInfo_1::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void GameRoomInfo_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomInfo_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomInfo_1_descriptor_;
}

const GameRoomInfo_1& GameRoomInfo_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GameRoomInfo_1* GameRoomInfo_1::default_instance_ = NULL;

GameRoomInfo_1* GameRoomInfo_1::New() const {
  return new GameRoomInfo_1;
}

void GameRoomInfo_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    min_coins_ = 0u;
    online_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomInfo_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }

      // optional string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_min_coins;
        break;
      }

      // optional uint32 min_coins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_coins_)));
          set_has_min_coins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_online_count;
        break;
      }

      // optional uint32 online_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_count_)));
          set_has_online_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomInfo_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }

  // optional uint32 min_coins = 3;
  if (has_min_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_coins(), output);
  }

  // optional uint32 online_count = 4;
  if (has_online_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->online_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomInfo_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // optional string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }

  // optional uint32 min_coins = 3;
  if (has_min_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_coins(), target);
  }

  // optional uint32 online_count = 4;
  if (has_online_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->online_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomInfo_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional uint32 min_coins = 3;
    if (has_min_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_coins());
    }

    // optional uint32 online_count = 4;
    if (has_online_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomInfo_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomInfo_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomInfo_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomInfo_1::MergeFrom(const GameRoomInfo_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_min_coins()) {
      set_min_coins(from.min_coins());
    }
    if (from.has_online_count()) {
      set_online_count(from.online_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomInfo_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomInfo_1::CopyFrom(const GameRoomInfo_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomInfo_1::IsInitialized() const {

  return true;
}

void GameRoomInfo_1::Swap(GameRoomInfo_1* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(min_coins_, other->min_coins_);
    std::swap(online_count_, other->online_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomInfo_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomInfo_1_descriptor_;
  metadata.reflection = GameRoomInfo_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameChairInfo_1::kChairIdFieldNumber;
const int GameChairInfo_1::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GameChairInfo_1::GameChairInfo_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameChairInfo_1::InitAsDefaultInstance() {
}

GameChairInfo_1::GameChairInfo_1(const GameChairInfo_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameChairInfo_1::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameChairInfo_1::~GameChairInfo_1() {
  SharedDtor();
}

void GameChairInfo_1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameChairInfo_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameChairInfo_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameChairInfo_1_descriptor_;
}

const GameChairInfo_1& GameChairInfo_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GameChairInfo_1* GameChairInfo_1::default_instance_ = NULL;

GameChairInfo_1* GameChairInfo_1::New() const {
  return new GameChairInfo_1;
}

void GameChairInfo_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameChairInfo_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameChairInfo_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameChairInfo_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameChairInfo_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameChairInfo_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameChairInfo_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameChairInfo_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameChairInfo_1::MergeFrom(const GameChairInfo_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameChairInfo_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameChairInfo_1::CopyFrom(const GameChairInfo_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameChairInfo_1::IsInitialized() const {

  return true;
}

void GameChairInfo_1::Swap(GameChairInfo_1* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameChairInfo_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameChairInfo_1_descriptor_;
  metadata.reflection = GameChairInfo_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameDeskInfo_1::kDeskIdFieldNumber;
const int GameDeskInfo_1::kDeskNameFieldNumber;
const int GameDeskInfo_1::kChairCountFieldNumber;
const int GameDeskInfo_1::kCharsFieldNumber;
#endif  // !_MSC_VER

GameDeskInfo_1::GameDeskInfo_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameDeskInfo_1::InitAsDefaultInstance() {
}

GameDeskInfo_1::GameDeskInfo_1(const GameDeskInfo_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameDeskInfo_1::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0u;
  desk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chair_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameDeskInfo_1::~GameDeskInfo_1() {
  SharedDtor();
}

void GameDeskInfo_1::SharedDtor() {
  if (desk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete desk_name_;
  }
  if (this != default_instance_) {
  }
}

void GameDeskInfo_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDeskInfo_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameDeskInfo_1_descriptor_;
}

const GameDeskInfo_1& GameDeskInfo_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GameDeskInfo_1* GameDeskInfo_1::default_instance_ = NULL;

GameDeskInfo_1* GameDeskInfo_1::New() const {
  return new GameDeskInfo_1;
}

void GameDeskInfo_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0u;
    if (has_desk_name()) {
      if (desk_name_ != &::google::protobuf::internal::kEmptyString) {
        desk_name_->clear();
      }
    }
    chair_count_ = 0u;
  }
  chars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameDeskInfo_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 desk_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desk_name;
        break;
      }

      // optional string desk_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desk_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desk_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desk_name().data(), this->desk_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chair_count;
        break;
      }

      // optional uint32 chair_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_count_)));
          set_has_chair_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chars;
        break;
      }

      // repeated .proto_ff.GameChairInfo_1 chars = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chars;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameDeskInfo_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 desk_id = 1;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->desk_id(), output);
  }

  // optional string desk_name = 2;
  if (has_desk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desk_name().data(), this->desk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desk_name(), output);
  }

  // optional uint32 chair_count = 3;
  if (has_chair_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chair_count(), output);
  }

  // repeated .proto_ff.GameChairInfo_1 chars = 4;
  for (int i = 0; i < this->chars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameDeskInfo_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 desk_id = 1;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->desk_id(), target);
  }

  // optional string desk_name = 2;
  if (has_desk_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desk_name().data(), this->desk_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desk_name(), target);
  }

  // optional uint32 chair_count = 3;
  if (has_chair_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chair_count(), target);
  }

  // repeated .proto_ff.GameChairInfo_1 chars = 4;
  for (int i = 0; i < this->chars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameDeskInfo_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 desk_id = 1;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional string desk_name = 2;
    if (has_desk_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desk_name());
    }

    // optional uint32 chair_count = 3;
    if (has_chair_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_count());
    }

  }
  // repeated .proto_ff.GameChairInfo_1 chars = 4;
  total_size += 1 * this->chars_size();
  for (int i = 0; i < this->chars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDeskInfo_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameDeskInfo_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameDeskInfo_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameDeskInfo_1::MergeFrom(const GameDeskInfo_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  chars_.MergeFrom(from.chars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_desk_name()) {
      set_desk_name(from.desk_name());
    }
    if (from.has_chair_count()) {
      set_chair_count(from.chair_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameDeskInfo_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDeskInfo_1::CopyFrom(const GameDeskInfo_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDeskInfo_1::IsInitialized() const {

  return true;
}

void GameDeskInfo_1::Swap(GameDeskInfo_1* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(desk_name_, other->desk_name_);
    std::swap(chair_count_, other->chair_count_);
    chars_.Swap(&other->chars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameDeskInfo_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameDeskInfo_1_descriptor_;
  metadata.reflection = GameDeskInfo_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomListReq_1::kGameIdFieldNumber;
#endif  // !_MSC_VER

GetRoomListReq_1::GetRoomListReq_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomListReq_1::InitAsDefaultInstance() {
}

GetRoomListReq_1::GetRoomListReq_1(const GetRoomListReq_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomListReq_1::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomListReq_1::~GetRoomListReq_1() {
  SharedDtor();
}

void GetRoomListReq_1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoomListReq_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomListReq_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomListReq_1_descriptor_;
}

const GetRoomListReq_1& GetRoomListReq_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GetRoomListReq_1* GetRoomListReq_1::default_instance_ = NULL;

GetRoomListReq_1* GetRoomListReq_1::New() const {
  return new GetRoomListReq_1;
}

void GetRoomListReq_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomListReq_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomListReq_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomListReq_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomListReq_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomListReq_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomListReq_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomListReq_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomListReq_1::MergeFrom(const GetRoomListReq_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomListReq_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomListReq_1::CopyFrom(const GetRoomListReq_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListReq_1::IsInitialized() const {

  return true;
}

void GetRoomListReq_1::Swap(GetRoomListReq_1* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomListReq_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomListReq_1_descriptor_;
  metadata.reflection = GetRoomListReq_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomListRsp_1::kRoomsFieldNumber;
#endif  // !_MSC_VER

GetRoomListRsp_1::GetRoomListRsp_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomListRsp_1::InitAsDefaultInstance() {
}

GetRoomListRsp_1::GetRoomListRsp_1(const GetRoomListRsp_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomListRsp_1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomListRsp_1::~GetRoomListRsp_1() {
  SharedDtor();
}

void GetRoomListRsp_1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoomListRsp_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomListRsp_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomListRsp_1_descriptor_;
}

const GetRoomListRsp_1& GetRoomListRsp_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GetRoomListRsp_1* GetRoomListRsp_1::default_instance_ = NULL;

GetRoomListRsp_1* GetRoomListRsp_1::New() const {
  return new GetRoomListRsp_1;
}

void GetRoomListRsp_1::Clear() {
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomListRsp_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GameRoomInfo_1 rooms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomListRsp_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GameRoomInfo_1 rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomListRsp_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GameRoomInfo_1 rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomListRsp_1::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GameRoomInfo_1 rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomListRsp_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomListRsp_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomListRsp_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomListRsp_1::MergeFrom(const GetRoomListRsp_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomListRsp_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomListRsp_1::CopyFrom(const GetRoomListRsp_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListRsp_1::IsInitialized() const {

  return true;
}

void GetRoomListRsp_1::Swap(GetRoomListRsp_1* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomListRsp_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomListRsp_1_descriptor_;
  metadata.reflection = GetRoomListRsp_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDeskListReq_1::kRoomIdFieldNumber;
#endif  // !_MSC_VER

GetDeskListReq_1::GetDeskListReq_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDeskListReq_1::InitAsDefaultInstance() {
}

GetDeskListReq_1::GetDeskListReq_1(const GetDeskListReq_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDeskListReq_1::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDeskListReq_1::~GetDeskListReq_1() {
  SharedDtor();
}

void GetDeskListReq_1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDeskListReq_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeskListReq_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDeskListReq_1_descriptor_;
}

const GetDeskListReq_1& GetDeskListReq_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GetDeskListReq_1* GetDeskListReq_1::default_instance_ = NULL;

GetDeskListReq_1* GetDeskListReq_1::New() const {
  return new GetDeskListReq_1;
}

void GetDeskListReq_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDeskListReq_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDeskListReq_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDeskListReq_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDeskListReq_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeskListReq_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDeskListReq_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDeskListReq_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDeskListReq_1::MergeFrom(const GetDeskListReq_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDeskListReq_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeskListReq_1::CopyFrom(const GetDeskListReq_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeskListReq_1::IsInitialized() const {

  return true;
}

void GetDeskListReq_1::Swap(GetDeskListReq_1* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDeskListReq_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDeskListReq_1_descriptor_;
  metadata.reflection = GetDeskListReq_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDeskListRsp_1::kDesksFieldNumber;
#endif  // !_MSC_VER

GetDeskListRsp_1::GetDeskListRsp_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDeskListRsp_1::InitAsDefaultInstance() {
}

GetDeskListRsp_1::GetDeskListRsp_1(const GetDeskListRsp_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDeskListRsp_1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDeskListRsp_1::~GetDeskListRsp_1() {
  SharedDtor();
}

void GetDeskListRsp_1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDeskListRsp_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeskListRsp_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDeskListRsp_1_descriptor_;
}

const GetDeskListRsp_1& GetDeskListRsp_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

GetDeskListRsp_1* GetDeskListRsp_1::default_instance_ = NULL;

GetDeskListRsp_1* GetDeskListRsp_1::New() const {
  return new GetDeskListRsp_1;
}

void GetDeskListRsp_1::Clear() {
  desks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDeskListRsp_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GameDeskInfo_1 desks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_desks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_desks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDeskListRsp_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GameDeskInfo_1 desks = 1;
  for (int i = 0; i < this->desks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->desks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDeskListRsp_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GameDeskInfo_1 desks = 1;
  for (int i = 0; i < this->desks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->desks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDeskListRsp_1::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GameDeskInfo_1 desks = 1;
  total_size += 1 * this->desks_size();
  for (int i = 0; i < this->desks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->desks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeskListRsp_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDeskListRsp_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDeskListRsp_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDeskListRsp_1::MergeFrom(const GetDeskListRsp_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  desks_.MergeFrom(from.desks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDeskListRsp_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeskListRsp_1::CopyFrom(const GetDeskListRsp_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeskListRsp_1::IsInitialized() const {

  return true;
}

void GetDeskListRsp_1::Swap(GetDeskListRsp_1* other) {
  if (other != this) {
    desks_.Swap(&other->desks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDeskListRsp_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDeskListRsp_1_descriptor_;
  metadata.reflection = GetDeskListRsp_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPlayerLeaveGame::kPlayerIdFieldNumber;
const int NotifyPlayerLeaveGame::kGameIdFieldNumber;
const int NotifyPlayerLeaveGame::kRoomIdFieldNumber;
const int NotifyPlayerLeaveGame::kDeskIdFieldNumber;
#endif  // !_MSC_VER

NotifyPlayerLeaveGame::NotifyPlayerLeaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPlayerLeaveGame::InitAsDefaultInstance() {
}

NotifyPlayerLeaveGame::NotifyPlayerLeaveGame(const NotifyPlayerLeaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPlayerLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPlayerLeaveGame::~NotifyPlayerLeaveGame() {
  SharedDtor();
}

void NotifyPlayerLeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPlayerLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPlayerLeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerLeaveGame_descriptor_;
}

const NotifyPlayerLeaveGame& NotifyPlayerLeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

NotifyPlayerLeaveGame* NotifyPlayerLeaveGame::default_instance_ = NULL;

NotifyPlayerLeaveGame* NotifyPlayerLeaveGame::New() const {
  return new NotifyPlayerLeaveGame;
}

void NotifyPlayerLeaveGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    desk_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPlayerLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPlayerLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 desk_id = 4;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->desk_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPlayerLeaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 desk_id = 4;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->desk_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPlayerLeaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 desk_id = 4;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPlayerLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPlayerLeaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPlayerLeaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPlayerLeaveGame::MergeFrom(const NotifyPlayerLeaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPlayerLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerLeaveGame::CopyFrom(const NotifyPlayerLeaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerLeaveGame::IsInitialized() const {

  return true;
}

void NotifyPlayerLeaveGame::Swap(NotifyPlayerLeaveGame* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPlayerLeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPlayerLeaveGame_descriptor_;
  metadata.reflection = NotifyPlayerLeaveGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyChangeNotify::kCurMoneyFieldNumber;
const int MoneyChangeNotify::kCurBankMoneyFieldNumber;
#endif  // !_MSC_VER

MoneyChangeNotify::MoneyChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyChangeNotify::InitAsDefaultInstance() {
}

MoneyChangeNotify::MoneyChangeNotify(const MoneyChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  cur_money_ = GOOGLE_ULONGLONG(0);
  cur_bank_money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyChangeNotify::~MoneyChangeNotify() {
  SharedDtor();
}

void MoneyChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyChangeNotify_descriptor_;
}

const MoneyChangeNotify& MoneyChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

MoneyChangeNotify* MoneyChangeNotify::default_instance_ = NULL;

MoneyChangeNotify* MoneyChangeNotify::New() const {
  return new MoneyChangeNotify;
}

void MoneyChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_money_ = GOOGLE_ULONGLONG(0);
    cur_bank_money_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cur_money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_bank_money;
        break;
      }

      // optional uint64 cur_bank_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_bank_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_bank_money_)));
          set_has_cur_bank_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cur_money = 1;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cur_money(), output);
  }

  // optional uint64 cur_bank_money = 2;
  if (has_cur_bank_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_bank_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cur_money = 1;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cur_money(), target);
  }

  // optional uint64 cur_bank_money = 2;
  if (has_cur_bank_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_bank_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cur_money = 1;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_money());
    }

    // optional uint64 cur_bank_money = 2;
    if (has_cur_bank_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_bank_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyChangeNotify::MergeFrom(const MoneyChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_cur_bank_money()) {
      set_cur_bank_money(from.cur_bank_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyChangeNotify::CopyFrom(const MoneyChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyChangeNotify::IsInitialized() const {

  return true;
}

void MoneyChangeNotify::Swap(MoneyChangeNotify* other) {
  if (other != this) {
    std::swap(cur_money_, other->cur_money_);
    std::swap(cur_bank_money_, other->cur_bank_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyChangeNotify_descriptor_;
  metadata.reflection = MoneyChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnePaoMaDengInfo::kUserNameFieldNumber;
const int OnePaoMaDengInfo::kGameIdFieldNumber;
const int OnePaoMaDengInfo::kGameNameFieldNumber;
const int OnePaoMaDengInfo::kRoomIdFieldNumber;
const int OnePaoMaDengInfo::kRoomNameFieldNumber;
const int OnePaoMaDengInfo::kWinJettonFieldNumber;
#endif  // !_MSC_VER

OnePaoMaDengInfo::OnePaoMaDengInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnePaoMaDengInfo::InitAsDefaultInstance() {
}

OnePaoMaDengInfo::OnePaoMaDengInfo(const OnePaoMaDengInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnePaoMaDengInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0u;
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_id_ = 0u;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_jetton_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnePaoMaDengInfo::~OnePaoMaDengInfo() {
  SharedDtor();
}

void OnePaoMaDengInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void OnePaoMaDengInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnePaoMaDengInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnePaoMaDengInfo_descriptor_;
}

const OnePaoMaDengInfo& OnePaoMaDengInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

OnePaoMaDengInfo* OnePaoMaDengInfo::default_instance_ = NULL;

OnePaoMaDengInfo* OnePaoMaDengInfo::New() const {
  return new OnePaoMaDengInfo;
}

void OnePaoMaDengInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    game_id_ = 0u;
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::kEmptyString) {
        game_name_->clear();
      }
    }
    room_id_ = 0u;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    win_jetton_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnePaoMaDengInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_name;
        break;
      }

      // optional string game_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_room_name;
        break;
      }

      // optional string room_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_jetton;
        break;
      }

      // optional uint64 win_jetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &win_jetton_)));
          set_has_win_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnePaoMaDengInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional string game_name = 3;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->game_name(), output);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_id(), output);
  }

  // optional string room_name = 5;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->room_name(), output);
  }

  // optional uint64 win_jetton = 6;
  if (has_win_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->win_jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnePaoMaDengInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional string game_name = 3;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_name(), target);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_id(), target);
  }

  // optional string room_name = 5;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->room_name(), target);
  }

  // optional uint64 win_jetton = 6;
  if (has_win_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->win_jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnePaoMaDengInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional string game_name = 3;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional uint32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional string room_name = 5;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional uint64 win_jetton = 6;
    if (has_win_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->win_jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnePaoMaDengInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnePaoMaDengInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnePaoMaDengInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnePaoMaDengInfo::MergeFrom(const OnePaoMaDengInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_win_jetton()) {
      set_win_jetton(from.win_jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnePaoMaDengInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnePaoMaDengInfo::CopyFrom(const OnePaoMaDengInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnePaoMaDengInfo::IsInitialized() const {

  return true;
}

void OnePaoMaDengInfo::Swap(OnePaoMaDengInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(game_id_, other->game_id_);
    std::swap(game_name_, other->game_name_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(win_jetton_, other->win_jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnePaoMaDengInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnePaoMaDengInfo_descriptor_;
  metadata.reflection = OnePaoMaDengInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCPaoMaDengNotify::kInfoFieldNumber;
#endif  // !_MSC_VER

Proto_SCPaoMaDengNotify::Proto_SCPaoMaDengNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCPaoMaDengNotify::InitAsDefaultInstance() {
}

Proto_SCPaoMaDengNotify::Proto_SCPaoMaDengNotify(const Proto_SCPaoMaDengNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCPaoMaDengNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCPaoMaDengNotify::~Proto_SCPaoMaDengNotify() {
  SharedDtor();
}

void Proto_SCPaoMaDengNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCPaoMaDengNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCPaoMaDengNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCPaoMaDengNotify_descriptor_;
}

const Proto_SCPaoMaDengNotify& Proto_SCPaoMaDengNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

Proto_SCPaoMaDengNotify* Proto_SCPaoMaDengNotify::default_instance_ = NULL;

Proto_SCPaoMaDengNotify* Proto_SCPaoMaDengNotify::New() const {
  return new Proto_SCPaoMaDengNotify;
}

void Proto_SCPaoMaDengNotify::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCPaoMaDengNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.OnePaoMaDengInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCPaoMaDengNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.OnePaoMaDengInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCPaoMaDengNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.OnePaoMaDengInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCPaoMaDengNotify::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.OnePaoMaDengInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCPaoMaDengNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCPaoMaDengNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCPaoMaDengNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCPaoMaDengNotify::MergeFrom(const Proto_SCPaoMaDengNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCPaoMaDengNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCPaoMaDengNotify::CopyFrom(const Proto_SCPaoMaDengNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCPaoMaDengNotify::IsInitialized() const {

  return true;
}

void Proto_SCPaoMaDengNotify::Swap(Proto_SCPaoMaDengNotify* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCPaoMaDengNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCPaoMaDengNotify_descriptor_;
  metadata.reflection = Proto_SCPaoMaDengNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSRedeemCodeReq::kIdFieldNumber;
#endif  // !_MSC_VER

Proto_CSRedeemCodeReq::Proto_CSRedeemCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSRedeemCodeReq::InitAsDefaultInstance() {
}

Proto_CSRedeemCodeReq::Proto_CSRedeemCodeReq(const Proto_CSRedeemCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSRedeemCodeReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSRedeemCodeReq::~Proto_CSRedeemCodeReq() {
  SharedDtor();
}

void Proto_CSRedeemCodeReq::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_CSRedeemCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSRedeemCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSRedeemCodeReq_descriptor_;
}

const Proto_CSRedeemCodeReq& Proto_CSRedeemCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

Proto_CSRedeemCodeReq* Proto_CSRedeemCodeReq::default_instance_ = NULL;

Proto_CSRedeemCodeReq* Proto_CSRedeemCodeReq::New() const {
  return new Proto_CSRedeemCodeReq;
}

void Proto_CSRedeemCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSRedeemCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSRedeemCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSRedeemCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSRedeemCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSRedeemCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSRedeemCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSRedeemCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSRedeemCodeReq::MergeFrom(const Proto_CSRedeemCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSRedeemCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSRedeemCodeReq::CopyFrom(const Proto_CSRedeemCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSRedeemCodeReq::IsInitialized() const {

  return true;
}

void Proto_CSRedeemCodeReq::Swap(Proto_CSRedeemCodeReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSRedeemCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSRedeemCodeReq_descriptor_;
  metadata.reflection = Proto_CSRedeemCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCRedeemCodeRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SCRedeemCodeRsp::Proto_SCRedeemCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCRedeemCodeRsp::InitAsDefaultInstance() {
}

Proto_SCRedeemCodeRsp::Proto_SCRedeemCodeRsp(const Proto_SCRedeemCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCRedeemCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCRedeemCodeRsp::~Proto_SCRedeemCodeRsp() {
  SharedDtor();
}

void Proto_SCRedeemCodeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCRedeemCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCRedeemCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCRedeemCodeRsp_descriptor_;
}

const Proto_SCRedeemCodeRsp& Proto_SCRedeemCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSGame_2eproto();
  return *default_instance_;
}

Proto_SCRedeemCodeRsp* Proto_SCRedeemCodeRsp::default_instance_ = NULL;

Proto_SCRedeemCodeRsp* Proto_SCRedeemCodeRsp::New() const {
  return new Proto_SCRedeemCodeRsp;
}

void Proto_SCRedeemCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCRedeemCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCRedeemCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCRedeemCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCRedeemCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCRedeemCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCRedeemCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCRedeemCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCRedeemCodeRsp::MergeFrom(const Proto_SCRedeemCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCRedeemCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCRedeemCodeRsp::CopyFrom(const Proto_SCRedeemCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCRedeemCodeRsp::IsInitialized() const {

  return true;
}

void Proto_SCRedeemCodeRsp::Swap(Proto_SCRedeemCodeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCRedeemCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCRedeemCodeRsp_descriptor_;
  metadata.reflection = Proto_SCRedeemCodeRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
