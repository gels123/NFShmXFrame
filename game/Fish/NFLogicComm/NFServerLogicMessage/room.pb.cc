// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_RoomRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_RoomRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_RoomRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_RoomRoom_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_room_2eproto() {
  protobuf_AddDesc_room_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "room.proto");
  GOOGLE_CHECK(file != NULL);
  E_RoomRoom_descriptor_ = file->message_type(0);
  static const int E_RoomRoom_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_roomlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_sitenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_deskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_maxpeople_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_enter_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_enter_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_auto_chair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_is_exp_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_exp_scene_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, m_tax_),
  };
  E_RoomRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_RoomRoom_descriptor_,
      E_RoomRoom::default_instance_,
      E_RoomRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_RoomRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_RoomRoom));
  Sheet_RoomRoom_descriptor_ = file->message_type(1);
  static const int Sheet_RoomRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RoomRoom, e_roomroom_list_),
  };
  Sheet_RoomRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_RoomRoom_descriptor_,
      Sheet_RoomRoom::default_instance_,
      Sheet_RoomRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RoomRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_RoomRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_RoomRoom));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_room_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_RoomRoom_descriptor_, &E_RoomRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_RoomRoom_descriptor_, &Sheet_RoomRoom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_room_2eproto() {
  delete E_RoomRoom::default_instance_;
  delete E_RoomRoom_reflection_;
  delete Sheet_RoomRoom::default_instance_;
  delete Sheet_RoomRoom_reflection_;
}

void protobuf_AddDesc_room_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nroom.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\332\004\n\nE_RoomRoom\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010"
    "\345\224\257\344\270\200ID\022\036\n\010m_roomid\030\002 \001(\005B\014\302\377\024\010\346\210\277\351\227\264ID"
    "\022\036\n\010m_gameid\030\003 \001(\005B\014\302\377\024\010\346\270\270\346\210\217ID\022%\n\nm_ga"
    "mename\030\004 \001(\tB\021\302\377\024\t\346\270\270\346\210\217\345\220\215\220\301\024@\022$\n\nm_roo"
    "mtype\030\005 \001(\005B\020\302\377\024\014\346\210\277\351\227\264\347\261\273\345\236\213\022%\n\013m_rooml"
    "evel\030\006 \001(\005B\020\302\377\024\014\346\210\277\351\227\264\347\255\211\347\272\247\022%\n\nm_roomna"
    "me\030\007 \001(\tB\021\302\377\024\t\346\210\277\351\227\264\345\220\215\220\301\024@\022 \n\tm_sitenum"
    "\030\010 \001(\005B\r\302\377\024\t\345\272\247\344\275\215\346\225\260\022\"\n\013m_deskcount\030\t \001"
    "(\005B\r\302\377\024\t\346\241\214\345\255\220\346\225\260\022(\n\013m_maxpeople\030\n \001(\005B\023"
    "\302\377\024\017\346\234\200\345\244\247\347\216\251\345\256\266\346\225\260\022%\n\013m_enter_min\030\013 \001(\005"
    "B\020\302\377\024\014\346\234\200\345\260\217\347\255\271\347\240\201\022%\n\013m_enter_max\030\014 \001(\005B"
    "\020\302\377\024\014\346\234\200\345\244\247\347\255\271\347\240\201\022#\n\014m_auto_chair\030\r \001(\005B"
    "\r\302\377\024\t\351\200\211\344\275\215\347\275\256\022%\n\016m_is_exp_scene\030\016 \001(\005B\r"
    "\302\377\024\t\344\275\223\351\252\214\345\234\272\022-\n\020m_exp_scene_gold\030\017 \001(\005B"
    "\023\302\377\024\017\344\275\223\351\252\214\345\234\272\351\207\221\345\270\201\022\034\n\005m_tax\030\020 \001(\005B\r\302\377\024"
    "\t\346\212\275\346\260\264\347\216\207\"E\n\016Sheet_RoomRoom\0223\n\017E_RoomRo"
    "om_List\030\001 \003(\0132\024.proto_ff.E_RoomRoomB\004\210\301\024"
    "\010", 721);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "room.proto", &protobuf_RegisterTypes);
  E_RoomRoom::default_instance_ = new E_RoomRoom();
  Sheet_RoomRoom::default_instance_ = new Sheet_RoomRoom();
  E_RoomRoom::default_instance_->InitAsDefaultInstance();
  Sheet_RoomRoom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_room_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_room_2eproto {
  StaticDescriptorInitializer_room_2eproto() {
    protobuf_AddDesc_room_2eproto();
  }
} static_descriptor_initializer_room_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_RoomRoom::kMIdFieldNumber;
const int E_RoomRoom::kMRoomidFieldNumber;
const int E_RoomRoom::kMGameidFieldNumber;
const int E_RoomRoom::kMGamenameFieldNumber;
const int E_RoomRoom::kMRoomtypeFieldNumber;
const int E_RoomRoom::kMRoomlevelFieldNumber;
const int E_RoomRoom::kMRoomnameFieldNumber;
const int E_RoomRoom::kMSitenumFieldNumber;
const int E_RoomRoom::kMDeskcountFieldNumber;
const int E_RoomRoom::kMMaxpeopleFieldNumber;
const int E_RoomRoom::kMEnterMinFieldNumber;
const int E_RoomRoom::kMEnterMaxFieldNumber;
const int E_RoomRoom::kMAutoChairFieldNumber;
const int E_RoomRoom::kMIsExpSceneFieldNumber;
const int E_RoomRoom::kMExpSceneGoldFieldNumber;
const int E_RoomRoom::kMTaxFieldNumber;
#endif  // !_MSC_VER

E_RoomRoom::E_RoomRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_RoomRoom::InitAsDefaultInstance() {
}

E_RoomRoom::E_RoomRoom(const E_RoomRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_RoomRoom::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_roomid_ = 0;
  m_gameid_ = 0;
  m_gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_roomtype_ = 0;
  m_roomlevel_ = 0;
  m_roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sitenum_ = 0;
  m_deskcount_ = 0;
  m_maxpeople_ = 0;
  m_enter_min_ = 0;
  m_enter_max_ = 0;
  m_auto_chair_ = 0;
  m_is_exp_scene_ = 0;
  m_exp_scene_gold_ = 0;
  m_tax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_RoomRoom::~E_RoomRoom() {
  SharedDtor();
}

void E_RoomRoom::SharedDtor() {
  if (m_gamename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gamename_;
  }
  if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_roomname_;
  }
  if (this != default_instance_) {
  }
}

void E_RoomRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_RoomRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_RoomRoom_descriptor_;
}

const E_RoomRoom& E_RoomRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

E_RoomRoom* E_RoomRoom::default_instance_ = NULL;

E_RoomRoom* E_RoomRoom::New() const {
  return new E_RoomRoom;
}

void E_RoomRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_roomid_ = 0;
    m_gameid_ = 0;
    if (has_m_gamename()) {
      if (m_gamename_ != &::google::protobuf::internal::kEmptyString) {
        m_gamename_->clear();
      }
    }
    m_roomtype_ = 0;
    m_roomlevel_ = 0;
    if (has_m_roomname()) {
      if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
        m_roomname_->clear();
      }
    }
    m_sitenum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_deskcount_ = 0;
    m_maxpeople_ = 0;
    m_enter_min_ = 0;
    m_enter_max_ = 0;
    m_auto_chair_ = 0;
    m_is_exp_scene_ = 0;
    m_exp_scene_gold_ = 0;
    m_tax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_RoomRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gameid;
        break;
      }

      // optional int32 m_gameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameid_)));
          set_has_m_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_gamename;
        break;
      }

      // optional string m_gamename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gamename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gamename().data(), this->m_gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_roomtype;
        break;
      }

      // optional int32 m_roomtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomtype_)));
          set_has_m_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_roomlevel;
        break;
      }

      // optional int32 m_roomlevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomlevel_)));
          set_has_m_roomlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_roomname;
        break;
      }

      // optional string m_roomname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_roomname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_roomname().data(), this->m_roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_sitenum;
        break;
      }

      // optional int32 m_sitenum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sitenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sitenum_)));
          set_has_m_sitenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_deskcount;
        break;
      }

      // optional int32 m_deskcount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_deskcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_deskcount_)));
          set_has_m_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_maxpeople;
        break;
      }

      // optional int32 m_maxpeople = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxpeople:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxpeople_)));
          set_has_m_maxpeople();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_enter_min;
        break;
      }

      // optional int32 m_enter_min = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_enter_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enter_min_)));
          set_has_m_enter_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_enter_max;
        break;
      }

      // optional int32 m_enter_max = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_enter_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enter_max_)));
          set_has_m_enter_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_auto_chair;
        break;
      }

      // optional int32 m_auto_chair = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_auto_chair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_auto_chair_)));
          set_has_m_auto_chair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_is_exp_scene;
        break;
      }

      // optional int32 m_is_exp_scene = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_is_exp_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_is_exp_scene_)));
          set_has_m_is_exp_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_exp_scene_gold;
        break;
      }

      // optional int32 m_exp_scene_gold = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp_scene_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_scene_gold_)));
          set_has_m_exp_scene_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_tax;
        break;
      }

      // optional int32 m_tax = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tax_)));
          set_has_m_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_RoomRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roomid(), output);
  }

  // optional int32 m_gameid = 3;
  if (has_m_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_gameid(), output);
  }

  // optional string m_gamename = 4;
  if (has_m_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gamename().data(), this->m_gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_gamename(), output);
  }

  // optional int32 m_roomtype = 5;
  if (has_m_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_roomtype(), output);
  }

  // optional int32 m_roomlevel = 6;
  if (has_m_roomlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_roomlevel(), output);
  }

  // optional string m_roomname = 7;
  if (has_m_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_roomname().data(), this->m_roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_roomname(), output);
  }

  // optional int32 m_sitenum = 8;
  if (has_m_sitenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_sitenum(), output);
  }

  // optional int32 m_deskcount = 9;
  if (has_m_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_deskcount(), output);
  }

  // optional int32 m_maxpeople = 10;
  if (has_m_maxpeople()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_maxpeople(), output);
  }

  // optional int32 m_enter_min = 11;
  if (has_m_enter_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_enter_min(), output);
  }

  // optional int32 m_enter_max = 12;
  if (has_m_enter_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_enter_max(), output);
  }

  // optional int32 m_auto_chair = 13;
  if (has_m_auto_chair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_auto_chair(), output);
  }

  // optional int32 m_is_exp_scene = 14;
  if (has_m_is_exp_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_is_exp_scene(), output);
  }

  // optional int32 m_exp_scene_gold = 15;
  if (has_m_exp_scene_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_exp_scene_gold(), output);
  }

  // optional int32 m_tax = 16;
  if (has_m_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_tax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_RoomRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roomid(), target);
  }

  // optional int32 m_gameid = 3;
  if (has_m_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_gameid(), target);
  }

  // optional string m_gamename = 4;
  if (has_m_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gamename().data(), this->m_gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_gamename(), target);
  }

  // optional int32 m_roomtype = 5;
  if (has_m_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_roomtype(), target);
  }

  // optional int32 m_roomlevel = 6;
  if (has_m_roomlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_roomlevel(), target);
  }

  // optional string m_roomname = 7;
  if (has_m_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_roomname().data(), this->m_roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_roomname(), target);
  }

  // optional int32 m_sitenum = 8;
  if (has_m_sitenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_sitenum(), target);
  }

  // optional int32 m_deskcount = 9;
  if (has_m_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_deskcount(), target);
  }

  // optional int32 m_maxpeople = 10;
  if (has_m_maxpeople()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_maxpeople(), target);
  }

  // optional int32 m_enter_min = 11;
  if (has_m_enter_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_enter_min(), target);
  }

  // optional int32 m_enter_max = 12;
  if (has_m_enter_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_enter_max(), target);
  }

  // optional int32 m_auto_chair = 13;
  if (has_m_auto_chair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_auto_chair(), target);
  }

  // optional int32 m_is_exp_scene = 14;
  if (has_m_is_exp_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_is_exp_scene(), target);
  }

  // optional int32 m_exp_scene_gold = 15;
  if (has_m_exp_scene_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_exp_scene_gold(), target);
  }

  // optional int32 m_tax = 16;
  if (has_m_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_tax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_RoomRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_roomid = 2;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

    // optional int32 m_gameid = 3;
    if (has_m_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameid());
    }

    // optional string m_gamename = 4;
    if (has_m_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gamename());
    }

    // optional int32 m_roomtype = 5;
    if (has_m_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomtype());
    }

    // optional int32 m_roomlevel = 6;
    if (has_m_roomlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomlevel());
    }

    // optional string m_roomname = 7;
    if (has_m_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_roomname());
    }

    // optional int32 m_sitenum = 8;
    if (has_m_sitenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sitenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_deskcount = 9;
    if (has_m_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_deskcount());
    }

    // optional int32 m_maxpeople = 10;
    if (has_m_maxpeople()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxpeople());
    }

    // optional int32 m_enter_min = 11;
    if (has_m_enter_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enter_min());
    }

    // optional int32 m_enter_max = 12;
    if (has_m_enter_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enter_max());
    }

    // optional int32 m_auto_chair = 13;
    if (has_m_auto_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_auto_chair());
    }

    // optional int32 m_is_exp_scene = 14;
    if (has_m_is_exp_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_is_exp_scene());
    }

    // optional int32 m_exp_scene_gold = 15;
    if (has_m_exp_scene_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp_scene_gold());
    }

    // optional int32 m_tax = 16;
    if (has_m_tax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_RoomRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_RoomRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_RoomRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_RoomRoom::MergeFrom(const E_RoomRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
    if (from.has_m_gameid()) {
      set_m_gameid(from.m_gameid());
    }
    if (from.has_m_gamename()) {
      set_m_gamename(from.m_gamename());
    }
    if (from.has_m_roomtype()) {
      set_m_roomtype(from.m_roomtype());
    }
    if (from.has_m_roomlevel()) {
      set_m_roomlevel(from.m_roomlevel());
    }
    if (from.has_m_roomname()) {
      set_m_roomname(from.m_roomname());
    }
    if (from.has_m_sitenum()) {
      set_m_sitenum(from.m_sitenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_deskcount()) {
      set_m_deskcount(from.m_deskcount());
    }
    if (from.has_m_maxpeople()) {
      set_m_maxpeople(from.m_maxpeople());
    }
    if (from.has_m_enter_min()) {
      set_m_enter_min(from.m_enter_min());
    }
    if (from.has_m_enter_max()) {
      set_m_enter_max(from.m_enter_max());
    }
    if (from.has_m_auto_chair()) {
      set_m_auto_chair(from.m_auto_chair());
    }
    if (from.has_m_is_exp_scene()) {
      set_m_is_exp_scene(from.m_is_exp_scene());
    }
    if (from.has_m_exp_scene_gold()) {
      set_m_exp_scene_gold(from.m_exp_scene_gold());
    }
    if (from.has_m_tax()) {
      set_m_tax(from.m_tax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_RoomRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_RoomRoom::CopyFrom(const E_RoomRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_RoomRoom::IsInitialized() const {

  return true;
}

void E_RoomRoom::Swap(E_RoomRoom* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_roomid_, other->m_roomid_);
    std::swap(m_gameid_, other->m_gameid_);
    std::swap(m_gamename_, other->m_gamename_);
    std::swap(m_roomtype_, other->m_roomtype_);
    std::swap(m_roomlevel_, other->m_roomlevel_);
    std::swap(m_roomname_, other->m_roomname_);
    std::swap(m_sitenum_, other->m_sitenum_);
    std::swap(m_deskcount_, other->m_deskcount_);
    std::swap(m_maxpeople_, other->m_maxpeople_);
    std::swap(m_enter_min_, other->m_enter_min_);
    std::swap(m_enter_max_, other->m_enter_max_);
    std::swap(m_auto_chair_, other->m_auto_chair_);
    std::swap(m_is_exp_scene_, other->m_is_exp_scene_);
    std::swap(m_exp_scene_gold_, other->m_exp_scene_gold_);
    std::swap(m_tax_, other->m_tax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_RoomRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_RoomRoom_descriptor_;
  metadata.reflection = E_RoomRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_RoomRoom::kERoomRoomListFieldNumber;
#endif  // !_MSC_VER

Sheet_RoomRoom::Sheet_RoomRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_RoomRoom::InitAsDefaultInstance() {
}

Sheet_RoomRoom::Sheet_RoomRoom(const Sheet_RoomRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_RoomRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_RoomRoom::~Sheet_RoomRoom() {
  SharedDtor();
}

void Sheet_RoomRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_RoomRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_RoomRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_RoomRoom_descriptor_;
}

const Sheet_RoomRoom& Sheet_RoomRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_2eproto();
  return *default_instance_;
}

Sheet_RoomRoom* Sheet_RoomRoom::default_instance_ = NULL;

Sheet_RoomRoom* Sheet_RoomRoom::New() const {
  return new Sheet_RoomRoom;
}

void Sheet_RoomRoom::Clear() {
  e_roomroom_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_RoomRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_RoomRoom E_RoomRoom_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_RoomRoom_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_roomroom_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_RoomRoom_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_RoomRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_RoomRoom E_RoomRoom_List = 1;
  for (int i = 0; i < this->e_roomroom_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_roomroom_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_RoomRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_RoomRoom E_RoomRoom_List = 1;
  for (int i = 0; i < this->e_roomroom_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_roomroom_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_RoomRoom::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_RoomRoom E_RoomRoom_List = 1;
  total_size += 1 * this->e_roomroom_list_size();
  for (int i = 0; i < this->e_roomroom_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_roomroom_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_RoomRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_RoomRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_RoomRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_RoomRoom::MergeFrom(const Sheet_RoomRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_roomroom_list_.MergeFrom(from.e_roomroom_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_RoomRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_RoomRoom::CopyFrom(const Sheet_RoomRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_RoomRoom::IsInitialized() const {

  return true;
}

void Sheet_RoomRoom::Swap(Sheet_RoomRoom* other) {
  if (other != this) {
    e_roomroom_list_.Swap(&other->e_roomroom_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_RoomRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_RoomRoom_descriptor_;
  metadata.reflection = Sheet_RoomRoom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
