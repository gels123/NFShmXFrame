// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fish.proto

#ifndef PROTOBUF_Fish_2eproto__INCLUDED
#define PROTOBUF_Fish_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Fish_2eproto();
void protobuf_AssignDesc_Fish_2eproto();
void protobuf_ShutdownFile_Fish_2eproto();

class E_FishRoom;
class Sheet_FishRoom;
class E_FishGunvalue;
class Sheet_FishGunvalue;
class E_FishCtrllevel;
class Sheet_FishCtrllevel;
class E_FishConfig;
class Sheet_FishConfig;

// ===================================================================

class E_FishRoom : public ::google::protobuf::Message {
 public:
  E_FishRoom();
  virtual ~E_FishRoom();

  E_FishRoom(const E_FishRoom& from);

  inline E_FishRoom& operator=(const E_FishRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FishRoom& default_instance();

  void Swap(E_FishRoom* other);

  // implements Message ----------------------------------------------

  E_FishRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FishRoom& from);
  void MergeFrom(const E_FishRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_roomid = 2;
  inline bool has_m_roomid() const;
  inline void clear_m_roomid();
  static const int kMRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 m_roomid() const;
  inline void set_m_roomid(::google::protobuf::int32 value);

  // optional int32 m_gameid = 3;
  inline bool has_m_gameid() const;
  inline void clear_m_gameid();
  static const int kMGameidFieldNumber = 3;
  inline ::google::protobuf::int32 m_gameid() const;
  inline void set_m_gameid(::google::protobuf::int32 value);

  // optional string m_gamename = 4;
  inline bool has_m_gamename() const;
  inline void clear_m_gamename();
  static const int kMGamenameFieldNumber = 4;
  inline const ::std::string& m_gamename() const;
  inline void set_m_gamename(const ::std::string& value);
  inline void set_m_gamename(const char* value);
  inline void set_m_gamename(const char* value, size_t size);
  inline ::std::string* mutable_m_gamename();
  inline ::std::string* release_m_gamename();
  inline void set_allocated_m_gamename(::std::string* m_gamename);

  // optional int32 m_roomtype = 5;
  inline bool has_m_roomtype() const;
  inline void clear_m_roomtype();
  static const int kMRoomtypeFieldNumber = 5;
  inline ::google::protobuf::int32 m_roomtype() const;
  inline void set_m_roomtype(::google::protobuf::int32 value);

  // optional int32 m_roomlevel = 6;
  inline bool has_m_roomlevel() const;
  inline void clear_m_roomlevel();
  static const int kMRoomlevelFieldNumber = 6;
  inline ::google::protobuf::int32 m_roomlevel() const;
  inline void set_m_roomlevel(::google::protobuf::int32 value);

  // optional string m_roomname = 7;
  inline bool has_m_roomname() const;
  inline void clear_m_roomname();
  static const int kMRoomnameFieldNumber = 7;
  inline const ::std::string& m_roomname() const;
  inline void set_m_roomname(const ::std::string& value);
  inline void set_m_roomname(const char* value);
  inline void set_m_roomname(const char* value, size_t size);
  inline ::std::string* mutable_m_roomname();
  inline ::std::string* release_m_roomname();
  inline void set_allocated_m_roomname(::std::string* m_roomname);

  // optional int32 m_sitenum = 8;
  inline bool has_m_sitenum() const;
  inline void clear_m_sitenum();
  static const int kMSitenumFieldNumber = 8;
  inline ::google::protobuf::int32 m_sitenum() const;
  inline void set_m_sitenum(::google::protobuf::int32 value);

  // optional int32 m_deskcount = 9;
  inline bool has_m_deskcount() const;
  inline void clear_m_deskcount();
  static const int kMDeskcountFieldNumber = 9;
  inline ::google::protobuf::int32 m_deskcount() const;
  inline void set_m_deskcount(::google::protobuf::int32 value);

  // optional int32 m_maxpeople = 10;
  inline bool has_m_maxpeople() const;
  inline void clear_m_maxpeople();
  static const int kMMaxpeopleFieldNumber = 10;
  inline ::google::protobuf::int32 m_maxpeople() const;
  inline void set_m_maxpeople(::google::protobuf::int32 value);

  // optional int32 m_entermin = 11;
  inline bool has_m_entermin() const;
  inline void clear_m_entermin();
  static const int kMEnterminFieldNumber = 11;
  inline ::google::protobuf::int32 m_entermin() const;
  inline void set_m_entermin(::google::protobuf::int32 value);

  // optional int32 m_entermax = 12;
  inline bool has_m_entermax() const;
  inline void clear_m_entermax();
  static const int kMEntermaxFieldNumber = 12;
  inline ::google::protobuf::int32 m_entermax() const;
  inline void set_m_entermax(::google::protobuf::int32 value);

  // optional int32 m_autochair = 13;
  inline bool has_m_autochair() const;
  inline void clear_m_autochair();
  static const int kMAutochairFieldNumber = 13;
  inline ::google::protobuf::int32 m_autochair() const;
  inline void set_m_autochair(::google::protobuf::int32 value);

  // optional int32 m_isexpscene = 14;
  inline bool has_m_isexpscene() const;
  inline void clear_m_isexpscene();
  static const int kMIsexpsceneFieldNumber = 14;
  inline ::google::protobuf::int32 m_isexpscene() const;
  inline void set_m_isexpscene(::google::protobuf::int32 value);

  // optional int32 m_expscenegold = 15;
  inline bool has_m_expscenegold() const;
  inline void clear_m_expscenegold();
  static const int kMExpscenegoldFieldNumber = 15;
  inline ::google::protobuf::int32 m_expscenegold() const;
  inline void set_m_expscenegold(::google::protobuf::int32 value);

  // optional int32 m_tax = 16;
  inline bool has_m_tax() const;
  inline void clear_m_tax();
  static const int kMTaxFieldNumber = 16;
  inline ::google::protobuf::int32 m_tax() const;
  inline void set_m_tax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FishRoom)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_roomid();
  inline void clear_has_m_roomid();
  inline void set_has_m_gameid();
  inline void clear_has_m_gameid();
  inline void set_has_m_gamename();
  inline void clear_has_m_gamename();
  inline void set_has_m_roomtype();
  inline void clear_has_m_roomtype();
  inline void set_has_m_roomlevel();
  inline void clear_has_m_roomlevel();
  inline void set_has_m_roomname();
  inline void clear_has_m_roomname();
  inline void set_has_m_sitenum();
  inline void clear_has_m_sitenum();
  inline void set_has_m_deskcount();
  inline void clear_has_m_deskcount();
  inline void set_has_m_maxpeople();
  inline void clear_has_m_maxpeople();
  inline void set_has_m_entermin();
  inline void clear_has_m_entermin();
  inline void set_has_m_entermax();
  inline void clear_has_m_entermax();
  inline void set_has_m_autochair();
  inline void clear_has_m_autochair();
  inline void set_has_m_isexpscene();
  inline void clear_has_m_isexpscene();
  inline void set_has_m_expscenegold();
  inline void clear_has_m_expscenegold();
  inline void set_has_m_tax();
  inline void clear_has_m_tax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_roomid_;
  ::std::string* m_gamename_;
  ::google::protobuf::int32 m_gameid_;
  ::google::protobuf::int32 m_roomtype_;
  ::std::string* m_roomname_;
  ::google::protobuf::int32 m_roomlevel_;
  ::google::protobuf::int32 m_sitenum_;
  ::google::protobuf::int32 m_deskcount_;
  ::google::protobuf::int32 m_maxpeople_;
  ::google::protobuf::int32 m_entermin_;
  ::google::protobuf::int32 m_entermax_;
  ::google::protobuf::int32 m_autochair_;
  ::google::protobuf::int32 m_isexpscene_;
  ::google::protobuf::int32 m_expscenegold_;
  ::google::protobuf::int32 m_tax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_Fish_2eproto();
  friend void protobuf_AssignDesc_Fish_2eproto();
  friend void protobuf_ShutdownFile_Fish_2eproto();

  void InitAsDefaultInstance();
  static E_FishRoom* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FishRoom : public ::google::protobuf::Message {
 public:
  Sheet_FishRoom();
  virtual ~Sheet_FishRoom();

  Sheet_FishRoom(const Sheet_FishRoom& from);

  inline Sheet_FishRoom& operator=(const Sheet_FishRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FishRoom& default_instance();

  void Swap(Sheet_FishRoom* other);

  // implements Message ----------------------------------------------

  Sheet_FishRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FishRoom& from);
  void MergeFrom(const Sheet_FishRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FishRoom E_FishRoom_List = 1;
  inline int e_fishroom_list_size() const;
  inline void clear_e_fishroom_list();
  static const int kEFishRoomListFieldNumber = 1;
  inline const ::proto_ff::E_FishRoom& e_fishroom_list(int index) const;
  inline ::proto_ff::E_FishRoom* mutable_e_fishroom_list(int index);
  inline ::proto_ff::E_FishRoom* add_e_fishroom_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishRoom >&
      e_fishroom_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishRoom >*
      mutable_e_fishroom_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FishRoom)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishRoom > e_fishroom_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fish_2eproto();
  friend void protobuf_AssignDesc_Fish_2eproto();
  friend void protobuf_ShutdownFile_Fish_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FishRoom* default_instance_;
};
// -------------------------------------------------------------------

class E_FishGunvalue : public ::google::protobuf::Message {
 public:
  E_FishGunvalue();
  virtual ~E_FishGunvalue();

  E_FishGunvalue(const E_FishGunvalue& from);

  inline E_FishGunvalue& operator=(const E_FishGunvalue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FishGunvalue& default_instance();

  void Swap(E_FishGunvalue* other);

  // implements Message ----------------------------------------------

  E_FishGunvalue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FishGunvalue& from);
  void MergeFrom(const E_FishGunvalue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_value = 2;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 2;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_gameid = 3;
  inline bool has_m_gameid() const;
  inline void clear_m_gameid();
  static const int kMGameidFieldNumber = 3;
  inline ::google::protobuf::int32 m_gameid() const;
  inline void set_m_gameid(::google::protobuf::int32 value);

  // optional int32 m_roomid = 4;
  inline bool has_m_roomid() const;
  inline void clear_m_roomid();
  static const int kMRoomidFieldNumber = 4;
  inline ::google::protobuf::int32 m_roomid() const;
  inline void set_m_roomid(::google::protobuf::int32 value);

  // optional int32 m_gunid = 5;
  inline bool has_m_gunid() const;
  inline void clear_m_gunid();
  static const int kMGunidFieldNumber = 5;
  inline ::google::protobuf::int32 m_gunid() const;
  inline void set_m_gunid(::google::protobuf::int32 value);

  // optional int32 m_gameroomid = 6;
  inline bool has_m_gameroomid() const;
  inline void clear_m_gameroomid();
  static const int kMGameroomidFieldNumber = 6;
  inline ::google::protobuf::int32 m_gameroomid() const;
  inline void set_m_gameroomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FishGunvalue)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_gameid();
  inline void clear_has_m_gameid();
  inline void set_has_m_roomid();
  inline void clear_has_m_roomid();
  inline void set_has_m_gunid();
  inline void clear_has_m_gunid();
  inline void set_has_m_gameroomid();
  inline void clear_has_m_gameroomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_gameid_;
  ::google::protobuf::int32 m_roomid_;
  ::google::protobuf::int32 m_gunid_;
  ::google::protobuf::int32 m_gameroomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Fish_2eproto();
  friend void protobuf_AssignDesc_Fish_2eproto();
  friend void protobuf_ShutdownFile_Fish_2eproto();

  void InitAsDefaultInstance();
  static E_FishGunvalue* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FishGunvalue : public ::google::protobuf::Message {
 public:
  Sheet_FishGunvalue();
  virtual ~Sheet_FishGunvalue();

  Sheet_FishGunvalue(const Sheet_FishGunvalue& from);

  inline Sheet_FishGunvalue& operator=(const Sheet_FishGunvalue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FishGunvalue& default_instance();

  void Swap(Sheet_FishGunvalue* other);

  // implements Message ----------------------------------------------

  Sheet_FishGunvalue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FishGunvalue& from);
  void MergeFrom(const Sheet_FishGunvalue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FishGunvalue E_FishGunvalue_List = 1;
  inline int e_fishgunvalue_list_size() const;
  inline void clear_e_fishgunvalue_list();
  static const int kEFishGunvalueListFieldNumber = 1;
  inline const ::proto_ff::E_FishGunvalue& e_fishgunvalue_list(int index) const;
  inline ::proto_ff::E_FishGunvalue* mutable_e_fishgunvalue_list(int index);
  inline ::proto_ff::E_FishGunvalue* add_e_fishgunvalue_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishGunvalue >&
      e_fishgunvalue_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishGunvalue >*
      mutable_e_fishgunvalue_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FishGunvalue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishGunvalue > e_fishgunvalue_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fish_2eproto();
  friend void protobuf_AssignDesc_Fish_2eproto();
  friend void protobuf_ShutdownFile_Fish_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FishGunvalue* default_instance_;
};
// -------------------------------------------------------------------

class E_FishCtrllevel : public ::google::protobuf::Message {
 public:
  E_FishCtrllevel();
  virtual ~E_FishCtrllevel();

  E_FishCtrllevel(const E_FishCtrllevel& from);

  inline E_FishCtrllevel& operator=(const E_FishCtrllevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FishCtrllevel& default_instance();

  void Swap(E_FishCtrllevel* other);

  // implements Message ----------------------------------------------

  E_FishCtrllevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FishCtrllevel& from);
  void MergeFrom(const E_FishCtrllevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_controllevel = 1;
  inline bool has_m_controllevel() const;
  inline void clear_m_controllevel();
  static const int kMControllevelFieldNumber = 1;
  inline ::google::protobuf::int32 m_controllevel() const;
  inline void set_m_controllevel(::google::protobuf::int32 value);

  // optional int32 m_controlrate = 2;
  inline bool has_m_controlrate() const;
  inline void clear_m_controlrate();
  static const int kMControlrateFieldNumber = 2;
  inline ::google::protobuf::int32 m_controlrate() const;
  inline void set_m_controlrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FishCtrllevel)
 private:
  inline void set_has_m_controllevel();
  inline void clear_has_m_controllevel();
  inline void set_has_m_controlrate();
  inline void clear_has_m_controlrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_controllevel_;
  ::google::protobuf::int32 m_controlrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Fish_2eproto();
  friend void protobuf_AssignDesc_Fish_2eproto();
  friend void protobuf_ShutdownFile_Fish_2eproto();

  void InitAsDefaultInstance();
  static E_FishCtrllevel* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FishCtrllevel : public ::google::protobuf::Message {
 public:
  Sheet_FishCtrllevel();
  virtual ~Sheet_FishCtrllevel();

  Sheet_FishCtrllevel(const Sheet_FishCtrllevel& from);

  inline Sheet_FishCtrllevel& operator=(const Sheet_FishCtrllevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FishCtrllevel& default_instance();

  void Swap(Sheet_FishCtrllevel* other);

  // implements Message ----------------------------------------------

  Sheet_FishCtrllevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FishCtrllevel& from);
  void MergeFrom(const Sheet_FishCtrllevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FishCtrllevel E_FishCtrllevel_List = 1;
  inline int e_fishctrllevel_list_size() const;
  inline void clear_e_fishctrllevel_list();
  static const int kEFishCtrllevelListFieldNumber = 1;
  inline const ::proto_ff::E_FishCtrllevel& e_fishctrllevel_list(int index) const;
  inline ::proto_ff::E_FishCtrllevel* mutable_e_fishctrllevel_list(int index);
  inline ::proto_ff::E_FishCtrllevel* add_e_fishctrllevel_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishCtrllevel >&
      e_fishctrllevel_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishCtrllevel >*
      mutable_e_fishctrllevel_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FishCtrllevel)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishCtrllevel > e_fishctrllevel_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fish_2eproto();
  friend void protobuf_AssignDesc_Fish_2eproto();
  friend void protobuf_ShutdownFile_Fish_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FishCtrllevel* default_instance_;
};
// -------------------------------------------------------------------

class E_FishConfig : public ::google::protobuf::Message {
 public:
  E_FishConfig();
  virtual ~E_FishConfig();

  E_FishConfig(const E_FishConfig& from);

  inline E_FishConfig& operator=(const E_FishConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FishConfig& default_instance();

  void Swap(E_FishConfig* other);

  // implements Message ----------------------------------------------

  E_FishConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FishConfig& from);
  void MergeFrom(const E_FishConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_fishid = 1;
  inline bool has_m_fishid() const;
  inline void clear_m_fishid();
  static const int kMFishidFieldNumber = 1;
  inline ::google::protobuf::int32 m_fishid() const;
  inline void set_m_fishid(::google::protobuf::int32 value);

  // optional int32 m_fishtype = 2;
  inline bool has_m_fishtype() const;
  inline void clear_m_fishtype();
  static const int kMFishtypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_fishtype() const;
  inline void set_m_fishtype(::google::protobuf::int32 value);

  // optional int32 m_buildfishtype = 3;
  inline bool has_m_buildfishtype() const;
  inline void clear_m_buildfishtype();
  static const int kMBuildfishtypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_buildfishtype() const;
  inline void set_m_buildfishtype(::google::protobuf::int32 value);

  // optional int32 m_ratiomin = 4;
  inline bool has_m_ratiomin() const;
  inline void clear_m_ratiomin();
  static const int kMRatiominFieldNumber = 4;
  inline ::google::protobuf::int32 m_ratiomin() const;
  inline void set_m_ratiomin(::google::protobuf::int32 value);

  // optional int32 m_ratiomax = 5;
  inline bool has_m_ratiomax() const;
  inline void clear_m_ratiomax();
  static const int kMRatiomaxFieldNumber = 5;
  inline ::google::protobuf::int32 m_ratiomax() const;
  inline void set_m_ratiomax(::google::protobuf::int32 value);

  // optional int32 m_doubleawardminratio = 6;
  inline bool has_m_doubleawardminratio() const;
  inline void clear_m_doubleawardminratio();
  static const int kMDoubleawardminratioFieldNumber = 6;
  inline ::google::protobuf::int32 m_doubleawardminratio() const;
  inline void set_m_doubleawardminratio(::google::protobuf::int32 value);

  // optional int32 m_childfishcount = 7;
  inline bool has_m_childfishcount() const;
  inline void clear_m_childfishcount();
  static const int kMChildfishcountFieldNumber = 7;
  inline ::google::protobuf::int32 m_childfishcount() const;
  inline void set_m_childfishcount(::google::protobuf::int32 value);

  // optional int32 m_damageradius = 8;
  inline bool has_m_damageradius() const;
  inline void clear_m_damageradius();
  static const int kMDamageradiusFieldNumber = 8;
  inline ::google::protobuf::int32 m_damageradius() const;
  inline void set_m_damageradius(::google::protobuf::int32 value);

  // optional string m_damagefishids = 9;
  inline bool has_m_damagefishids() const;
  inline void clear_m_damagefishids();
  static const int kMDamagefishidsFieldNumber = 9;
  inline const ::std::string& m_damagefishids() const;
  inline void set_m_damagefishids(const ::std::string& value);
  inline void set_m_damagefishids(const char* value);
  inline void set_m_damagefishids(const char* value, size_t size);
  inline ::std::string* mutable_m_damagefishids();
  inline ::std::string* release_m_damagefishids();
  inline void set_allocated_m_damagefishids(::std::string* m_damagefishids);

  // repeated string m_childfishids = 10;
  inline int m_childfishids_size() const;
  inline void clear_m_childfishids();
  static const int kMChildfishidsFieldNumber = 10;
  inline const ::std::string& m_childfishids(int index) const;
  inline ::std::string* mutable_m_childfishids(int index);
  inline void set_m_childfishids(int index, const ::std::string& value);
  inline void set_m_childfishids(int index, const char* value);
  inline void set_m_childfishids(int index, const char* value, size_t size);
  inline ::std::string* add_m_childfishids();
  inline void add_m_childfishids(const ::std::string& value);
  inline void add_m_childfishids(const char* value);
  inline void add_m_childfishids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_childfishids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_childfishids();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FishConfig)
 private:
  inline void set_has_m_fishid();
  inline void clear_has_m_fishid();
  inline void set_has_m_fishtype();
  inline void clear_has_m_fishtype();
  inline void set_has_m_buildfishtype();
  inline void clear_has_m_buildfishtype();
  inline void set_has_m_ratiomin();
  inline void clear_has_m_ratiomin();
  inline void set_has_m_ratiomax();
  inline void clear_has_m_ratiomax();
  inline void set_has_m_doubleawardminratio();
  inline void clear_has_m_doubleawardminratio();
  inline void set_has_m_childfishcount();
  inline void clear_has_m_childfishcount();
  inline void set_has_m_damageradius();
  inline void clear_has_m_damageradius();
  inline void set_has_m_damagefishids();
  inline void clear_has_m_damagefishids();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_fishid_;
  ::google::protobuf::int32 m_fishtype_;
  ::google::protobuf::int32 m_buildfishtype_;
  ::google::protobuf::int32 m_ratiomin_;
  ::google::protobuf::int32 m_ratiomax_;
  ::google::protobuf::int32 m_doubleawardminratio_;
  ::google::protobuf::int32 m_childfishcount_;
  ::google::protobuf::int32 m_damageradius_;
  ::std::string* m_damagefishids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_childfishids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Fish_2eproto();
  friend void protobuf_AssignDesc_Fish_2eproto();
  friend void protobuf_ShutdownFile_Fish_2eproto();

  void InitAsDefaultInstance();
  static E_FishConfig* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FishConfig : public ::google::protobuf::Message {
 public:
  Sheet_FishConfig();
  virtual ~Sheet_FishConfig();

  Sheet_FishConfig(const Sheet_FishConfig& from);

  inline Sheet_FishConfig& operator=(const Sheet_FishConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FishConfig& default_instance();

  void Swap(Sheet_FishConfig* other);

  // implements Message ----------------------------------------------

  Sheet_FishConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FishConfig& from);
  void MergeFrom(const Sheet_FishConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FishConfig E_FishConfig_List = 1;
  inline int e_fishconfig_list_size() const;
  inline void clear_e_fishconfig_list();
  static const int kEFishConfigListFieldNumber = 1;
  inline const ::proto_ff::E_FishConfig& e_fishconfig_list(int index) const;
  inline ::proto_ff::E_FishConfig* mutable_e_fishconfig_list(int index);
  inline ::proto_ff::E_FishConfig* add_e_fishconfig_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishConfig >&
      e_fishconfig_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishConfig >*
      mutable_e_fishconfig_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FishConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishConfig > e_fishconfig_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Fish_2eproto();
  friend void protobuf_AssignDesc_Fish_2eproto();
  friend void protobuf_ShutdownFile_Fish_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FishConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// E_FishRoom

// optional int32 m_id = 1;
inline bool E_FishRoom::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FishRoom::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FishRoom::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FishRoom::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FishRoom::m_id() const {
  return m_id_;
}
inline void E_FishRoom::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_roomid = 2;
inline bool E_FishRoom::has_m_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FishRoom::set_has_m_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FishRoom::clear_has_m_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FishRoom::clear_m_roomid() {
  m_roomid_ = 0;
  clear_has_m_roomid();
}
inline ::google::protobuf::int32 E_FishRoom::m_roomid() const {
  return m_roomid_;
}
inline void E_FishRoom::set_m_roomid(::google::protobuf::int32 value) {
  set_has_m_roomid();
  m_roomid_ = value;
}

// optional int32 m_gameid = 3;
inline bool E_FishRoom::has_m_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FishRoom::set_has_m_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FishRoom::clear_has_m_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FishRoom::clear_m_gameid() {
  m_gameid_ = 0;
  clear_has_m_gameid();
}
inline ::google::protobuf::int32 E_FishRoom::m_gameid() const {
  return m_gameid_;
}
inline void E_FishRoom::set_m_gameid(::google::protobuf::int32 value) {
  set_has_m_gameid();
  m_gameid_ = value;
}

// optional string m_gamename = 4;
inline bool E_FishRoom::has_m_gamename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FishRoom::set_has_m_gamename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FishRoom::clear_has_m_gamename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FishRoom::clear_m_gamename() {
  if (m_gamename_ != &::google::protobuf::internal::kEmptyString) {
    m_gamename_->clear();
  }
  clear_has_m_gamename();
}
inline const ::std::string& E_FishRoom::m_gamename() const {
  return *m_gamename_;
}
inline void E_FishRoom::set_m_gamename(const ::std::string& value) {
  set_has_m_gamename();
  if (m_gamename_ == &::google::protobuf::internal::kEmptyString) {
    m_gamename_ = new ::std::string;
  }
  m_gamename_->assign(value);
}
inline void E_FishRoom::set_m_gamename(const char* value) {
  set_has_m_gamename();
  if (m_gamename_ == &::google::protobuf::internal::kEmptyString) {
    m_gamename_ = new ::std::string;
  }
  m_gamename_->assign(value);
}
inline void E_FishRoom::set_m_gamename(const char* value, size_t size) {
  set_has_m_gamename();
  if (m_gamename_ == &::google::protobuf::internal::kEmptyString) {
    m_gamename_ = new ::std::string;
  }
  m_gamename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FishRoom::mutable_m_gamename() {
  set_has_m_gamename();
  if (m_gamename_ == &::google::protobuf::internal::kEmptyString) {
    m_gamename_ = new ::std::string;
  }
  return m_gamename_;
}
inline ::std::string* E_FishRoom::release_m_gamename() {
  clear_has_m_gamename();
  if (m_gamename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_gamename_;
    m_gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FishRoom::set_allocated_m_gamename(::std::string* m_gamename) {
  if (m_gamename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gamename_;
  }
  if (m_gamename) {
    set_has_m_gamename();
    m_gamename_ = m_gamename;
  } else {
    clear_has_m_gamename();
    m_gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_roomtype = 5;
inline bool E_FishRoom::has_m_roomtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FishRoom::set_has_m_roomtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FishRoom::clear_has_m_roomtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FishRoom::clear_m_roomtype() {
  m_roomtype_ = 0;
  clear_has_m_roomtype();
}
inline ::google::protobuf::int32 E_FishRoom::m_roomtype() const {
  return m_roomtype_;
}
inline void E_FishRoom::set_m_roomtype(::google::protobuf::int32 value) {
  set_has_m_roomtype();
  m_roomtype_ = value;
}

// optional int32 m_roomlevel = 6;
inline bool E_FishRoom::has_m_roomlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FishRoom::set_has_m_roomlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FishRoom::clear_has_m_roomlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FishRoom::clear_m_roomlevel() {
  m_roomlevel_ = 0;
  clear_has_m_roomlevel();
}
inline ::google::protobuf::int32 E_FishRoom::m_roomlevel() const {
  return m_roomlevel_;
}
inline void E_FishRoom::set_m_roomlevel(::google::protobuf::int32 value) {
  set_has_m_roomlevel();
  m_roomlevel_ = value;
}

// optional string m_roomname = 7;
inline bool E_FishRoom::has_m_roomname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FishRoom::set_has_m_roomname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FishRoom::clear_has_m_roomname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FishRoom::clear_m_roomname() {
  if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
    m_roomname_->clear();
  }
  clear_has_m_roomname();
}
inline const ::std::string& E_FishRoom::m_roomname() const {
  return *m_roomname_;
}
inline void E_FishRoom::set_m_roomname(const ::std::string& value) {
  set_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    m_roomname_ = new ::std::string;
  }
  m_roomname_->assign(value);
}
inline void E_FishRoom::set_m_roomname(const char* value) {
  set_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    m_roomname_ = new ::std::string;
  }
  m_roomname_->assign(value);
}
inline void E_FishRoom::set_m_roomname(const char* value, size_t size) {
  set_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    m_roomname_ = new ::std::string;
  }
  m_roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FishRoom::mutable_m_roomname() {
  set_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    m_roomname_ = new ::std::string;
  }
  return m_roomname_;
}
inline ::std::string* E_FishRoom::release_m_roomname() {
  clear_has_m_roomname();
  if (m_roomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_roomname_;
    m_roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FishRoom::set_allocated_m_roomname(::std::string* m_roomname) {
  if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_roomname_;
  }
  if (m_roomname) {
    set_has_m_roomname();
    m_roomname_ = m_roomname;
  } else {
    clear_has_m_roomname();
    m_roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_sitenum = 8;
inline bool E_FishRoom::has_m_sitenum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_FishRoom::set_has_m_sitenum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_FishRoom::clear_has_m_sitenum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_FishRoom::clear_m_sitenum() {
  m_sitenum_ = 0;
  clear_has_m_sitenum();
}
inline ::google::protobuf::int32 E_FishRoom::m_sitenum() const {
  return m_sitenum_;
}
inline void E_FishRoom::set_m_sitenum(::google::protobuf::int32 value) {
  set_has_m_sitenum();
  m_sitenum_ = value;
}

// optional int32 m_deskcount = 9;
inline bool E_FishRoom::has_m_deskcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_FishRoom::set_has_m_deskcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_FishRoom::clear_has_m_deskcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_FishRoom::clear_m_deskcount() {
  m_deskcount_ = 0;
  clear_has_m_deskcount();
}
inline ::google::protobuf::int32 E_FishRoom::m_deskcount() const {
  return m_deskcount_;
}
inline void E_FishRoom::set_m_deskcount(::google::protobuf::int32 value) {
  set_has_m_deskcount();
  m_deskcount_ = value;
}

// optional int32 m_maxpeople = 10;
inline bool E_FishRoom::has_m_maxpeople() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_FishRoom::set_has_m_maxpeople() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_FishRoom::clear_has_m_maxpeople() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_FishRoom::clear_m_maxpeople() {
  m_maxpeople_ = 0;
  clear_has_m_maxpeople();
}
inline ::google::protobuf::int32 E_FishRoom::m_maxpeople() const {
  return m_maxpeople_;
}
inline void E_FishRoom::set_m_maxpeople(::google::protobuf::int32 value) {
  set_has_m_maxpeople();
  m_maxpeople_ = value;
}

// optional int32 m_entermin = 11;
inline bool E_FishRoom::has_m_entermin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_FishRoom::set_has_m_entermin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_FishRoom::clear_has_m_entermin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_FishRoom::clear_m_entermin() {
  m_entermin_ = 0;
  clear_has_m_entermin();
}
inline ::google::protobuf::int32 E_FishRoom::m_entermin() const {
  return m_entermin_;
}
inline void E_FishRoom::set_m_entermin(::google::protobuf::int32 value) {
  set_has_m_entermin();
  m_entermin_ = value;
}

// optional int32 m_entermax = 12;
inline bool E_FishRoom::has_m_entermax() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_FishRoom::set_has_m_entermax() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_FishRoom::clear_has_m_entermax() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_FishRoom::clear_m_entermax() {
  m_entermax_ = 0;
  clear_has_m_entermax();
}
inline ::google::protobuf::int32 E_FishRoom::m_entermax() const {
  return m_entermax_;
}
inline void E_FishRoom::set_m_entermax(::google::protobuf::int32 value) {
  set_has_m_entermax();
  m_entermax_ = value;
}

// optional int32 m_autochair = 13;
inline bool E_FishRoom::has_m_autochair() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_FishRoom::set_has_m_autochair() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_FishRoom::clear_has_m_autochair() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_FishRoom::clear_m_autochair() {
  m_autochair_ = 0;
  clear_has_m_autochair();
}
inline ::google::protobuf::int32 E_FishRoom::m_autochair() const {
  return m_autochair_;
}
inline void E_FishRoom::set_m_autochair(::google::protobuf::int32 value) {
  set_has_m_autochair();
  m_autochair_ = value;
}

// optional int32 m_isexpscene = 14;
inline bool E_FishRoom::has_m_isexpscene() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_FishRoom::set_has_m_isexpscene() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_FishRoom::clear_has_m_isexpscene() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_FishRoom::clear_m_isexpscene() {
  m_isexpscene_ = 0;
  clear_has_m_isexpscene();
}
inline ::google::protobuf::int32 E_FishRoom::m_isexpscene() const {
  return m_isexpscene_;
}
inline void E_FishRoom::set_m_isexpscene(::google::protobuf::int32 value) {
  set_has_m_isexpscene();
  m_isexpscene_ = value;
}

// optional int32 m_expscenegold = 15;
inline bool E_FishRoom::has_m_expscenegold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_FishRoom::set_has_m_expscenegold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_FishRoom::clear_has_m_expscenegold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_FishRoom::clear_m_expscenegold() {
  m_expscenegold_ = 0;
  clear_has_m_expscenegold();
}
inline ::google::protobuf::int32 E_FishRoom::m_expscenegold() const {
  return m_expscenegold_;
}
inline void E_FishRoom::set_m_expscenegold(::google::protobuf::int32 value) {
  set_has_m_expscenegold();
  m_expscenegold_ = value;
}

// optional int32 m_tax = 16;
inline bool E_FishRoom::has_m_tax() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_FishRoom::set_has_m_tax() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_FishRoom::clear_has_m_tax() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_FishRoom::clear_m_tax() {
  m_tax_ = 0;
  clear_has_m_tax();
}
inline ::google::protobuf::int32 E_FishRoom::m_tax() const {
  return m_tax_;
}
inline void E_FishRoom::set_m_tax(::google::protobuf::int32 value) {
  set_has_m_tax();
  m_tax_ = value;
}

// -------------------------------------------------------------------

// Sheet_FishRoom

// repeated .proto_ff.E_FishRoom E_FishRoom_List = 1;
inline int Sheet_FishRoom::e_fishroom_list_size() const {
  return e_fishroom_list_.size();
}
inline void Sheet_FishRoom::clear_e_fishroom_list() {
  e_fishroom_list_.Clear();
}
inline const ::proto_ff::E_FishRoom& Sheet_FishRoom::e_fishroom_list(int index) const {
  return e_fishroom_list_.Get(index);
}
inline ::proto_ff::E_FishRoom* Sheet_FishRoom::mutable_e_fishroom_list(int index) {
  return e_fishroom_list_.Mutable(index);
}
inline ::proto_ff::E_FishRoom* Sheet_FishRoom::add_e_fishroom_list() {
  return e_fishroom_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishRoom >&
Sheet_FishRoom::e_fishroom_list() const {
  return e_fishroom_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishRoom >*
Sheet_FishRoom::mutable_e_fishroom_list() {
  return &e_fishroom_list_;
}

// -------------------------------------------------------------------

// E_FishGunvalue

// optional int32 m_id = 1;
inline bool E_FishGunvalue::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FishGunvalue::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FishGunvalue::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FishGunvalue::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FishGunvalue::m_id() const {
  return m_id_;
}
inline void E_FishGunvalue::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_value = 2;
inline bool E_FishGunvalue::has_m_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FishGunvalue::set_has_m_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FishGunvalue::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FishGunvalue::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_FishGunvalue::m_value() const {
  return m_value_;
}
inline void E_FishGunvalue::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_gameid = 3;
inline bool E_FishGunvalue::has_m_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FishGunvalue::set_has_m_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FishGunvalue::clear_has_m_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FishGunvalue::clear_m_gameid() {
  m_gameid_ = 0;
  clear_has_m_gameid();
}
inline ::google::protobuf::int32 E_FishGunvalue::m_gameid() const {
  return m_gameid_;
}
inline void E_FishGunvalue::set_m_gameid(::google::protobuf::int32 value) {
  set_has_m_gameid();
  m_gameid_ = value;
}

// optional int32 m_roomid = 4;
inline bool E_FishGunvalue::has_m_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FishGunvalue::set_has_m_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FishGunvalue::clear_has_m_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FishGunvalue::clear_m_roomid() {
  m_roomid_ = 0;
  clear_has_m_roomid();
}
inline ::google::protobuf::int32 E_FishGunvalue::m_roomid() const {
  return m_roomid_;
}
inline void E_FishGunvalue::set_m_roomid(::google::protobuf::int32 value) {
  set_has_m_roomid();
  m_roomid_ = value;
}

// optional int32 m_gunid = 5;
inline bool E_FishGunvalue::has_m_gunid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FishGunvalue::set_has_m_gunid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FishGunvalue::clear_has_m_gunid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FishGunvalue::clear_m_gunid() {
  m_gunid_ = 0;
  clear_has_m_gunid();
}
inline ::google::protobuf::int32 E_FishGunvalue::m_gunid() const {
  return m_gunid_;
}
inline void E_FishGunvalue::set_m_gunid(::google::protobuf::int32 value) {
  set_has_m_gunid();
  m_gunid_ = value;
}

// optional int32 m_gameroomid = 6;
inline bool E_FishGunvalue::has_m_gameroomid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FishGunvalue::set_has_m_gameroomid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FishGunvalue::clear_has_m_gameroomid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FishGunvalue::clear_m_gameroomid() {
  m_gameroomid_ = 0;
  clear_has_m_gameroomid();
}
inline ::google::protobuf::int32 E_FishGunvalue::m_gameroomid() const {
  return m_gameroomid_;
}
inline void E_FishGunvalue::set_m_gameroomid(::google::protobuf::int32 value) {
  set_has_m_gameroomid();
  m_gameroomid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FishGunvalue

// repeated .proto_ff.E_FishGunvalue E_FishGunvalue_List = 1;
inline int Sheet_FishGunvalue::e_fishgunvalue_list_size() const {
  return e_fishgunvalue_list_.size();
}
inline void Sheet_FishGunvalue::clear_e_fishgunvalue_list() {
  e_fishgunvalue_list_.Clear();
}
inline const ::proto_ff::E_FishGunvalue& Sheet_FishGunvalue::e_fishgunvalue_list(int index) const {
  return e_fishgunvalue_list_.Get(index);
}
inline ::proto_ff::E_FishGunvalue* Sheet_FishGunvalue::mutable_e_fishgunvalue_list(int index) {
  return e_fishgunvalue_list_.Mutable(index);
}
inline ::proto_ff::E_FishGunvalue* Sheet_FishGunvalue::add_e_fishgunvalue_list() {
  return e_fishgunvalue_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishGunvalue >&
Sheet_FishGunvalue::e_fishgunvalue_list() const {
  return e_fishgunvalue_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishGunvalue >*
Sheet_FishGunvalue::mutable_e_fishgunvalue_list() {
  return &e_fishgunvalue_list_;
}

// -------------------------------------------------------------------

// E_FishCtrllevel

// optional int32 m_controllevel = 1;
inline bool E_FishCtrllevel::has_m_controllevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FishCtrllevel::set_has_m_controllevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FishCtrllevel::clear_has_m_controllevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FishCtrllevel::clear_m_controllevel() {
  m_controllevel_ = 0;
  clear_has_m_controllevel();
}
inline ::google::protobuf::int32 E_FishCtrllevel::m_controllevel() const {
  return m_controllevel_;
}
inline void E_FishCtrllevel::set_m_controllevel(::google::protobuf::int32 value) {
  set_has_m_controllevel();
  m_controllevel_ = value;
}

// optional int32 m_controlrate = 2;
inline bool E_FishCtrllevel::has_m_controlrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FishCtrllevel::set_has_m_controlrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FishCtrllevel::clear_has_m_controlrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FishCtrllevel::clear_m_controlrate() {
  m_controlrate_ = 0;
  clear_has_m_controlrate();
}
inline ::google::protobuf::int32 E_FishCtrllevel::m_controlrate() const {
  return m_controlrate_;
}
inline void E_FishCtrllevel::set_m_controlrate(::google::protobuf::int32 value) {
  set_has_m_controlrate();
  m_controlrate_ = value;
}

// -------------------------------------------------------------------

// Sheet_FishCtrllevel

// repeated .proto_ff.E_FishCtrllevel E_FishCtrllevel_List = 1;
inline int Sheet_FishCtrllevel::e_fishctrllevel_list_size() const {
  return e_fishctrllevel_list_.size();
}
inline void Sheet_FishCtrllevel::clear_e_fishctrllevel_list() {
  e_fishctrllevel_list_.Clear();
}
inline const ::proto_ff::E_FishCtrllevel& Sheet_FishCtrllevel::e_fishctrllevel_list(int index) const {
  return e_fishctrllevel_list_.Get(index);
}
inline ::proto_ff::E_FishCtrllevel* Sheet_FishCtrllevel::mutable_e_fishctrllevel_list(int index) {
  return e_fishctrllevel_list_.Mutable(index);
}
inline ::proto_ff::E_FishCtrllevel* Sheet_FishCtrllevel::add_e_fishctrllevel_list() {
  return e_fishctrllevel_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishCtrllevel >&
Sheet_FishCtrllevel::e_fishctrllevel_list() const {
  return e_fishctrllevel_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishCtrllevel >*
Sheet_FishCtrllevel::mutable_e_fishctrllevel_list() {
  return &e_fishctrllevel_list_;
}

// -------------------------------------------------------------------

// E_FishConfig

// optional int32 m_fishid = 1;
inline bool E_FishConfig::has_m_fishid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FishConfig::set_has_m_fishid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FishConfig::clear_has_m_fishid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FishConfig::clear_m_fishid() {
  m_fishid_ = 0;
  clear_has_m_fishid();
}
inline ::google::protobuf::int32 E_FishConfig::m_fishid() const {
  return m_fishid_;
}
inline void E_FishConfig::set_m_fishid(::google::protobuf::int32 value) {
  set_has_m_fishid();
  m_fishid_ = value;
}

// optional int32 m_fishtype = 2;
inline bool E_FishConfig::has_m_fishtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FishConfig::set_has_m_fishtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FishConfig::clear_has_m_fishtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FishConfig::clear_m_fishtype() {
  m_fishtype_ = 0;
  clear_has_m_fishtype();
}
inline ::google::protobuf::int32 E_FishConfig::m_fishtype() const {
  return m_fishtype_;
}
inline void E_FishConfig::set_m_fishtype(::google::protobuf::int32 value) {
  set_has_m_fishtype();
  m_fishtype_ = value;
}

// optional int32 m_buildfishtype = 3;
inline bool E_FishConfig::has_m_buildfishtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FishConfig::set_has_m_buildfishtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FishConfig::clear_has_m_buildfishtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FishConfig::clear_m_buildfishtype() {
  m_buildfishtype_ = 0;
  clear_has_m_buildfishtype();
}
inline ::google::protobuf::int32 E_FishConfig::m_buildfishtype() const {
  return m_buildfishtype_;
}
inline void E_FishConfig::set_m_buildfishtype(::google::protobuf::int32 value) {
  set_has_m_buildfishtype();
  m_buildfishtype_ = value;
}

// optional int32 m_ratiomin = 4;
inline bool E_FishConfig::has_m_ratiomin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FishConfig::set_has_m_ratiomin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FishConfig::clear_has_m_ratiomin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FishConfig::clear_m_ratiomin() {
  m_ratiomin_ = 0;
  clear_has_m_ratiomin();
}
inline ::google::protobuf::int32 E_FishConfig::m_ratiomin() const {
  return m_ratiomin_;
}
inline void E_FishConfig::set_m_ratiomin(::google::protobuf::int32 value) {
  set_has_m_ratiomin();
  m_ratiomin_ = value;
}

// optional int32 m_ratiomax = 5;
inline bool E_FishConfig::has_m_ratiomax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FishConfig::set_has_m_ratiomax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FishConfig::clear_has_m_ratiomax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FishConfig::clear_m_ratiomax() {
  m_ratiomax_ = 0;
  clear_has_m_ratiomax();
}
inline ::google::protobuf::int32 E_FishConfig::m_ratiomax() const {
  return m_ratiomax_;
}
inline void E_FishConfig::set_m_ratiomax(::google::protobuf::int32 value) {
  set_has_m_ratiomax();
  m_ratiomax_ = value;
}

// optional int32 m_doubleawardminratio = 6;
inline bool E_FishConfig::has_m_doubleawardminratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FishConfig::set_has_m_doubleawardminratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FishConfig::clear_has_m_doubleawardminratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FishConfig::clear_m_doubleawardminratio() {
  m_doubleawardminratio_ = 0;
  clear_has_m_doubleawardminratio();
}
inline ::google::protobuf::int32 E_FishConfig::m_doubleawardminratio() const {
  return m_doubleawardminratio_;
}
inline void E_FishConfig::set_m_doubleawardminratio(::google::protobuf::int32 value) {
  set_has_m_doubleawardminratio();
  m_doubleawardminratio_ = value;
}

// optional int32 m_childfishcount = 7;
inline bool E_FishConfig::has_m_childfishcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FishConfig::set_has_m_childfishcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FishConfig::clear_has_m_childfishcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FishConfig::clear_m_childfishcount() {
  m_childfishcount_ = 0;
  clear_has_m_childfishcount();
}
inline ::google::protobuf::int32 E_FishConfig::m_childfishcount() const {
  return m_childfishcount_;
}
inline void E_FishConfig::set_m_childfishcount(::google::protobuf::int32 value) {
  set_has_m_childfishcount();
  m_childfishcount_ = value;
}

// optional int32 m_damageradius = 8;
inline bool E_FishConfig::has_m_damageradius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_FishConfig::set_has_m_damageradius() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_FishConfig::clear_has_m_damageradius() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_FishConfig::clear_m_damageradius() {
  m_damageradius_ = 0;
  clear_has_m_damageradius();
}
inline ::google::protobuf::int32 E_FishConfig::m_damageradius() const {
  return m_damageradius_;
}
inline void E_FishConfig::set_m_damageradius(::google::protobuf::int32 value) {
  set_has_m_damageradius();
  m_damageradius_ = value;
}

// optional string m_damagefishids = 9;
inline bool E_FishConfig::has_m_damagefishids() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_FishConfig::set_has_m_damagefishids() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_FishConfig::clear_has_m_damagefishids() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_FishConfig::clear_m_damagefishids() {
  if (m_damagefishids_ != &::google::protobuf::internal::kEmptyString) {
    m_damagefishids_->clear();
  }
  clear_has_m_damagefishids();
}
inline const ::std::string& E_FishConfig::m_damagefishids() const {
  return *m_damagefishids_;
}
inline void E_FishConfig::set_m_damagefishids(const ::std::string& value) {
  set_has_m_damagefishids();
  if (m_damagefishids_ == &::google::protobuf::internal::kEmptyString) {
    m_damagefishids_ = new ::std::string;
  }
  m_damagefishids_->assign(value);
}
inline void E_FishConfig::set_m_damagefishids(const char* value) {
  set_has_m_damagefishids();
  if (m_damagefishids_ == &::google::protobuf::internal::kEmptyString) {
    m_damagefishids_ = new ::std::string;
  }
  m_damagefishids_->assign(value);
}
inline void E_FishConfig::set_m_damagefishids(const char* value, size_t size) {
  set_has_m_damagefishids();
  if (m_damagefishids_ == &::google::protobuf::internal::kEmptyString) {
    m_damagefishids_ = new ::std::string;
  }
  m_damagefishids_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FishConfig::mutable_m_damagefishids() {
  set_has_m_damagefishids();
  if (m_damagefishids_ == &::google::protobuf::internal::kEmptyString) {
    m_damagefishids_ = new ::std::string;
  }
  return m_damagefishids_;
}
inline ::std::string* E_FishConfig::release_m_damagefishids() {
  clear_has_m_damagefishids();
  if (m_damagefishids_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_damagefishids_;
    m_damagefishids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FishConfig::set_allocated_m_damagefishids(::std::string* m_damagefishids) {
  if (m_damagefishids_ != &::google::protobuf::internal::kEmptyString) {
    delete m_damagefishids_;
  }
  if (m_damagefishids) {
    set_has_m_damagefishids();
    m_damagefishids_ = m_damagefishids;
  } else {
    clear_has_m_damagefishids();
    m_damagefishids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string m_childfishids = 10;
inline int E_FishConfig::m_childfishids_size() const {
  return m_childfishids_.size();
}
inline void E_FishConfig::clear_m_childfishids() {
  m_childfishids_.Clear();
}
inline const ::std::string& E_FishConfig::m_childfishids(int index) const {
  return m_childfishids_.Get(index);
}
inline ::std::string* E_FishConfig::mutable_m_childfishids(int index) {
  return m_childfishids_.Mutable(index);
}
inline void E_FishConfig::set_m_childfishids(int index, const ::std::string& value) {
  m_childfishids_.Mutable(index)->assign(value);
}
inline void E_FishConfig::set_m_childfishids(int index, const char* value) {
  m_childfishids_.Mutable(index)->assign(value);
}
inline void E_FishConfig::set_m_childfishids(int index, const char* value, size_t size) {
  m_childfishids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FishConfig::add_m_childfishids() {
  return m_childfishids_.Add();
}
inline void E_FishConfig::add_m_childfishids(const ::std::string& value) {
  m_childfishids_.Add()->assign(value);
}
inline void E_FishConfig::add_m_childfishids(const char* value) {
  m_childfishids_.Add()->assign(value);
}
inline void E_FishConfig::add_m_childfishids(const char* value, size_t size) {
  m_childfishids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
E_FishConfig::m_childfishids() const {
  return m_childfishids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
E_FishConfig::mutable_m_childfishids() {
  return &m_childfishids_;
}

// -------------------------------------------------------------------

// Sheet_FishConfig

// repeated .proto_ff.E_FishConfig E_FishConfig_List = 1;
inline int Sheet_FishConfig::e_fishconfig_list_size() const {
  return e_fishconfig_list_.size();
}
inline void Sheet_FishConfig::clear_e_fishconfig_list() {
  e_fishconfig_list_.Clear();
}
inline const ::proto_ff::E_FishConfig& Sheet_FishConfig::e_fishconfig_list(int index) const {
  return e_fishconfig_list_.Get(index);
}
inline ::proto_ff::E_FishConfig* Sheet_FishConfig::mutable_e_fishconfig_list(int index) {
  return e_fishconfig_list_.Mutable(index);
}
inline ::proto_ff::E_FishConfig* Sheet_FishConfig::add_e_fishconfig_list() {
  return e_fishconfig_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishConfig >&
Sheet_FishConfig::e_fishconfig_list() const {
  return e_fishconfig_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FishConfig >*
Sheet_FishConfig::mutable_e_fishconfig_list() {
  return &e_fishconfig_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Fish_2eproto__INCLUDED
