// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* tbFishAccountTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbFishAccountTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbFishPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbFishPlayerData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DBProto_2eproto() {
  protobuf_AddDesc_DBProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DBProto.proto");
  GOOGLE_CHECK(file != NULL);
  tbFishAccountTable_descriptor_ = file->message_type(0);
  static const int tbFishAccountTable_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishAccountTable, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishAccountTable, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishAccountTable, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishAccountTable, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishAccountTable, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishAccountTable, phonenum_),
  };
  tbFishAccountTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbFishAccountTable_descriptor_,
      tbFishAccountTable::default_instance_,
      tbFishAccountTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishAccountTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishAccountTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbFishAccountTable));
  tbFishPlayerData_descriptor_ = file->message_type(1);
  static const int tbFishPlayerData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, regdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, last_logout_time_),
  };
  tbFishPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbFishPlayerData_descriptor_,
      tbFishPlayerData::default_instance_,
      tbFishPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbFishPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbFishPlayerData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DBProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbFishAccountTable_descriptor_, &tbFishAccountTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbFishPlayerData_descriptor_, &tbFishPlayerData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DBProto_2eproto() {
  delete tbFishAccountTable::default_instance_;
  delete tbFishAccountTable_reflection_;
  delete tbFishPlayerData::default_instance_;
  delete tbFishPlayerData_reflection_;
}

void protobuf_AddDesc_DBProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rDBProto.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\032\tCom.proto\"\220\002\n\022tbFishAccountTab"
    "le\022,\n\tplayer_id\030\001 \001(\004B\031\300\202\024\002\230\304\023\001\250\304\023\220N\272\304\023\010"
    "\347\216\251\345\256\266ID\022)\n\007account\030\002 \001(\tB\030\300\202\024\004\220\301\024\200\001\310\202\024\200"
    "\001\272\304\023\006\350\264\246\345\217\267\022*\n\010password\030\003 \001(\tB\030\300\202\024\003\220\301\024\200\001"
    "\310\202\024\200\001\272\304\023\006\345\257\206\347\240\201\022&\n\014account_type\030\004 \001(\rB\020\272"
    "\304\023\014\350\264\246\345\217\267\347\261\273\345\236\213\022)\n\tdevice_id\030\005 \001(\tB\026\220\301\024\200"
    "\001\310\202\024\200\001\272\304\023\010\350\256\276\345\244\207ID\022\"\n\010phonenum\030\006 \001(\004B\020\272\304"
    "\023\014\346\211\213\346\234\272\345\217\267\347\240\201\"\250\003\n\020tbFishPlayerData\022#\n\tp"
    "layer_id\030\001 \001(\004B\020\300\202\024\002\272\304\023\010\347\216\251\345\256\266ID\022*\n\010nick"
    "name\030\002 \001(\tB\030\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\230\265\347\247\260\022\032\n\006"
    "faceid\030\003 \001(\rB\n\272\304\023\006\345\244\264\345\203\217\022!\n\007regdate\030\004 \001("
    "\004B\020\272\304\023\014\346\263\250\345\206\214\346\227\266\351\227\264\022\032\n\006gender\030\005 \001(\rB\n\272\304\023"
    "\006\346\200\247\345\210\253\022\027\n\003age\030\006 \001(\rB\n\272\304\023\006\345\271\264\351\276\204\022\"\n\010phon"
    "enum\030\010 \001(\004B\020\272\304\023\014\346\211\213\346\234\272\345\217\267\347\240\201\022\032\n\006jetton\030\t"
    " \001(\004B\n\272\304\023\006\351\207\221\345\270\201\022 \n\002ip\030\013 \001(\tB\024\220\301\024@\310\202\024@\272\304"
    "\023\010IP\345\234\260\345\235\200\0225\n\017last_login_time\030\014 \001(\004B\034\272\304\023"
    "\030\346\234\200\350\277\221\344\270\200\346\254\241\347\231\273\345\275\225\346\227\266\351\227\264\0226\n\020last_logout"
    "_time\030\r \001(\004B\034\272\304\023\030\346\234\200\350\277\221\344\270\200\346\254\241\351\200\200\345\207\272\346\227\266\351\227"
    "\264", 761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBProto.proto", &protobuf_RegisterTypes);
  tbFishAccountTable::default_instance_ = new tbFishAccountTable();
  tbFishPlayerData::default_instance_ = new tbFishPlayerData();
  tbFishAccountTable::default_instance_->InitAsDefaultInstance();
  tbFishPlayerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DBProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DBProto_2eproto {
  StaticDescriptorInitializer_DBProto_2eproto() {
    protobuf_AddDesc_DBProto_2eproto();
  }
} static_descriptor_initializer_DBProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tbFishAccountTable::kPlayerIdFieldNumber;
const int tbFishAccountTable::kAccountFieldNumber;
const int tbFishAccountTable::kPasswordFieldNumber;
const int tbFishAccountTable::kAccountTypeFieldNumber;
const int tbFishAccountTable::kDeviceIdFieldNumber;
const int tbFishAccountTable::kPhonenumFieldNumber;
#endif  // !_MSC_VER

tbFishAccountTable::tbFishAccountTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbFishAccountTable::InitAsDefaultInstance() {
}

tbFishAccountTable::tbFishAccountTable(const tbFishAccountTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbFishAccountTable::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_type_ = 0u;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbFishAccountTable::~tbFishAccountTable() {
  SharedDtor();
}

void tbFishAccountTable::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void tbFishAccountTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbFishAccountTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbFishAccountTable_descriptor_;
}

const tbFishAccountTable& tbFishAccountTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

tbFishAccountTable* tbFishAccountTable::default_instance_ = NULL;

tbFishAccountTable* tbFishAccountTable::New() const {
  return new tbFishAccountTable;
}

void tbFishAccountTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    account_type_ = 0u;
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    phonenum_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbFishAccountTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_type;
        break;
      }

      // optional uint32 account_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_id;
        break;
      }

      // optional string device_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_phonenum;
        break;
      }

      // optional uint64 phonenum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phonenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbFishAccountTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional uint32 account_type = 4;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_type(), output);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_id(), output);
  }

  // optional uint64 phonenum = 6;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->phonenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbFishAccountTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional uint32 account_type = 4;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_type(), target);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_id(), target);
  }

  // optional uint64 phonenum = 6;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->phonenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbFishAccountTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 account_type = 4;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // optional string device_id = 5;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional uint64 phonenum = 6;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phonenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbFishAccountTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbFishAccountTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbFishAccountTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbFishAccountTable::MergeFrom(const tbFishAccountTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbFishAccountTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbFishAccountTable::CopyFrom(const tbFishAccountTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbFishAccountTable::IsInitialized() const {

  return true;
}

void tbFishAccountTable::Swap(tbFishAccountTable* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(account_type_, other->account_type_);
    std::swap(device_id_, other->device_id_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbFishAccountTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbFishAccountTable_descriptor_;
  metadata.reflection = tbFishAccountTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbFishPlayerData::kPlayerIdFieldNumber;
const int tbFishPlayerData::kNicknameFieldNumber;
const int tbFishPlayerData::kFaceidFieldNumber;
const int tbFishPlayerData::kRegdateFieldNumber;
const int tbFishPlayerData::kGenderFieldNumber;
const int tbFishPlayerData::kAgeFieldNumber;
const int tbFishPlayerData::kPhonenumFieldNumber;
const int tbFishPlayerData::kJettonFieldNumber;
const int tbFishPlayerData::kIpFieldNumber;
const int tbFishPlayerData::kLastLoginTimeFieldNumber;
const int tbFishPlayerData::kLastLogoutTimeFieldNumber;
#endif  // !_MSC_VER

tbFishPlayerData::tbFishPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbFishPlayerData::InitAsDefaultInstance() {
}

tbFishPlayerData::tbFishPlayerData(const tbFishPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbFishPlayerData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faceid_ = 0u;
  regdate_ = GOOGLE_ULONGLONG(0);
  gender_ = 0u;
  age_ = 0u;
  phonenum_ = GOOGLE_ULONGLONG(0);
  jetton_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_login_time_ = GOOGLE_ULONGLONG(0);
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbFishPlayerData::~tbFishPlayerData() {
  SharedDtor();
}

void tbFishPlayerData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void tbFishPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbFishPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbFishPlayerData_descriptor_;
}

const tbFishPlayerData& tbFishPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto_2eproto();
  return *default_instance_;
}

tbFishPlayerData* tbFishPlayerData::default_instance_ = NULL;

tbFishPlayerData* tbFishPlayerData::New() const {
  return new tbFishPlayerData;
}

void tbFishPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    faceid_ = 0u;
    regdate_ = GOOGLE_ULONGLONG(0);
    gender_ = 0u;
    age_ = 0u;
    phonenum_ = GOOGLE_ULONGLONG(0);
    jetton_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    last_login_time_ = GOOGLE_ULONGLONG(0);
    last_logout_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbFishPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_faceid;
        break;
      }

      // optional uint32 faceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_regdate;
        break;
      }

      // optional uint64 regdate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &regdate_)));
          set_has_regdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_age;
        break;
      }

      // optional uint32 age = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_phonenum;
        break;
      }

      // optional uint64 phonenum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phonenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_jetton;
        break;
      }

      // optional uint64 jetton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ip;
        break;
      }

      // optional string ip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_last_login_time;
        break;
      }

      // optional uint64 last_login_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_last_logout_time;
        break;
      }

      // optional uint64 last_logout_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbFishPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 faceid = 3;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->faceid(), output);
  }

  // optional uint64 regdate = 4;
  if (has_regdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->regdate(), output);
  }

  // optional uint32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gender(), output);
  }

  // optional uint32 age = 6;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->age(), output);
  }

  // optional uint64 phonenum = 8;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->phonenum(), output);
  }

  // optional uint64 jetton = 9;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->jetton(), output);
  }

  // optional string ip = 11;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ip(), output);
  }

  // optional uint64 last_login_time = 12;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->last_login_time(), output);
  }

  // optional uint64 last_logout_time = 13;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->last_logout_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbFishPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 faceid = 3;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->faceid(), target);
  }

  // optional uint64 regdate = 4;
  if (has_regdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->regdate(), target);
  }

  // optional uint32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gender(), target);
  }

  // optional uint32 age = 6;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->age(), target);
  }

  // optional uint64 phonenum = 8;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->phonenum(), target);
  }

  // optional uint64 jetton = 9;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->jetton(), target);
  }

  // optional string ip = 11;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ip(), target);
  }

  // optional uint64 last_login_time = 12;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->last_login_time(), target);
  }

  // optional uint64 last_logout_time = 13;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->last_logout_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbFishPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 faceid = 3;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faceid());
    }

    // optional uint64 regdate = 4;
    if (has_regdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->regdate());
    }

    // optional uint32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 age = 6;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint64 phonenum = 8;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phonenum());
    }

    // optional uint64 jetton = 9;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 11;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint64 last_login_time = 12;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login_time());
    }

    // optional uint64 last_logout_time = 13;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logout_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbFishPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbFishPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbFishPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbFishPlayerData::MergeFrom(const tbFishPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_regdate()) {
      set_regdate(from.regdate());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbFishPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbFishPlayerData::CopyFrom(const tbFishPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbFishPlayerData::IsInitialized() const {

  return true;
}

void tbFishPlayerData::Swap(tbFishPlayerData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(faceid_, other->faceid_);
    std::swap(regdate_, other->regdate_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(jetton_, other->jetton_);
    std::swap(ip_, other->ip_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbFishPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbFishPlayerData_descriptor_;
  metadata.reflection = tbFishPlayerData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
