// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GunValue.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GunValue.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_GunvalueConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GunvalueConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GunvalueConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GunvalueConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GunValue_2eproto() {
  protobuf_AddDesc_GunValue_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GunValue.proto");
  GOOGLE_CHECK(file != NULL);
  E_GunvalueConfig_descriptor_ = file->message_type(0);
  static const int E_GunvalueConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GunvalueConfig, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GunvalueConfig, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GunvalueConfig, m_gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GunvalueConfig, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GunvalueConfig, m_gunid_),
  };
  E_GunvalueConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GunvalueConfig_descriptor_,
      E_GunvalueConfig::default_instance_,
      E_GunvalueConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GunvalueConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GunvalueConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GunvalueConfig));
  Sheet_GunvalueConfig_descriptor_ = file->message_type(1);
  static const int Sheet_GunvalueConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GunvalueConfig, e_gunvalueconfig_list_),
  };
  Sheet_GunvalueConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GunvalueConfig_descriptor_,
      Sheet_GunvalueConfig::default_instance_,
      Sheet_GunvalueConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GunvalueConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GunvalueConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GunvalueConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GunValue_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GunvalueConfig_descriptor_, &E_GunvalueConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GunvalueConfig_descriptor_, &Sheet_GunvalueConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GunValue_2eproto() {
  delete E_GunvalueConfig::default_instance_;
  delete E_GunvalueConfig_reflection_;
  delete Sheet_GunvalueConfig::default_instance_;
  delete Sheet_GunvalueConfig_reflection_;
}

void protobuf_AddDesc_GunValue_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GunValue.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"\244\001\n\020E_GunvalueConfig\022\032\n\004m_id\030\001"
    " \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024"
    "\003\345\200\274\022\036\n\010m_gameid\030\003 \001(\005B\014\302\377\024\010\346\270\270\346\210\217Id\022\036\n\010"
    "m_roomid\030\004 \001(\005B\014\302\377\024\010\346\210\277\351\227\264ID\022\032\n\007m_gunid\030"
    "\005 \001(\005B\t\302\377\024\005\347\202\256Id\"W\n\024Sheet_GunvalueConfig"
    "\022\?\n\025E_GunvalueConfig_List\030\001 \003(\0132\032.proto_"
    "ff.E_GunvalueConfigB\004\210\301\024d", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GunValue.proto", &protobuf_RegisterTypes);
  E_GunvalueConfig::default_instance_ = new E_GunvalueConfig();
  Sheet_GunvalueConfig::default_instance_ = new Sheet_GunvalueConfig();
  E_GunvalueConfig::default_instance_->InitAsDefaultInstance();
  Sheet_GunvalueConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GunValue_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GunValue_2eproto {
  StaticDescriptorInitializer_GunValue_2eproto() {
    protobuf_AddDesc_GunValue_2eproto();
  }
} static_descriptor_initializer_GunValue_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_GunvalueConfig::kMIdFieldNumber;
const int E_GunvalueConfig::kMValueFieldNumber;
const int E_GunvalueConfig::kMGameidFieldNumber;
const int E_GunvalueConfig::kMRoomidFieldNumber;
const int E_GunvalueConfig::kMGunidFieldNumber;
#endif  // !_MSC_VER

E_GunvalueConfig::E_GunvalueConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GunvalueConfig::InitAsDefaultInstance() {
}

E_GunvalueConfig::E_GunvalueConfig(const E_GunvalueConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GunvalueConfig::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_value_ = 0;
  m_gameid_ = 0;
  m_roomid_ = 0;
  m_gunid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GunvalueConfig::~E_GunvalueConfig() {
  SharedDtor();
}

void E_GunvalueConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GunvalueConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GunvalueConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GunvalueConfig_descriptor_;
}

const E_GunvalueConfig& E_GunvalueConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GunValue_2eproto();
  return *default_instance_;
}

E_GunvalueConfig* E_GunvalueConfig::default_instance_ = NULL;

E_GunvalueConfig* E_GunvalueConfig::New() const {
  return new E_GunvalueConfig;
}

void E_GunvalueConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_value_ = 0;
    m_gameid_ = 0;
    m_roomid_ = 0;
    m_gunid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GunvalueConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gameid;
        break;
      }

      // optional int32 m_gameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameid_)));
          set_has_m_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_gunid;
        break;
      }

      // optional int32 m_gunid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gunid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gunid_)));
          set_has_m_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GunvalueConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  // optional int32 m_gameid = 3;
  if (has_m_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_gameid(), output);
  }

  // optional int32 m_roomid = 4;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_roomid(), output);
  }

  // optional int32 m_gunid = 5;
  if (has_m_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_gunid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GunvalueConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  // optional int32 m_gameid = 3;
  if (has_m_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_gameid(), target);
  }

  // optional int32 m_roomid = 4;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_roomid(), target);
  }

  // optional int32 m_gunid = 5;
  if (has_m_gunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_gunid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GunvalueConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_gameid = 3;
    if (has_m_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameid());
    }

    // optional int32 m_roomid = 4;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

    // optional int32 m_gunid = 5;
    if (has_m_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gunid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GunvalueConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GunvalueConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GunvalueConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GunvalueConfig::MergeFrom(const E_GunvalueConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_gameid()) {
      set_m_gameid(from.m_gameid());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
    if (from.has_m_gunid()) {
      set_m_gunid(from.m_gunid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GunvalueConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GunvalueConfig::CopyFrom(const E_GunvalueConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GunvalueConfig::IsInitialized() const {

  return true;
}

void E_GunvalueConfig::Swap(E_GunvalueConfig* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_gameid_, other->m_gameid_);
    std::swap(m_roomid_, other->m_roomid_);
    std::swap(m_gunid_, other->m_gunid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GunvalueConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GunvalueConfig_descriptor_;
  metadata.reflection = E_GunvalueConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GunvalueConfig::kEGunvalueConfigListFieldNumber;
#endif  // !_MSC_VER

Sheet_GunvalueConfig::Sheet_GunvalueConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GunvalueConfig::InitAsDefaultInstance() {
}

Sheet_GunvalueConfig::Sheet_GunvalueConfig(const Sheet_GunvalueConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GunvalueConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GunvalueConfig::~Sheet_GunvalueConfig() {
  SharedDtor();
}

void Sheet_GunvalueConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GunvalueConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GunvalueConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GunvalueConfig_descriptor_;
}

const Sheet_GunvalueConfig& Sheet_GunvalueConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GunValue_2eproto();
  return *default_instance_;
}

Sheet_GunvalueConfig* Sheet_GunvalueConfig::default_instance_ = NULL;

Sheet_GunvalueConfig* Sheet_GunvalueConfig::New() const {
  return new Sheet_GunvalueConfig;
}

void Sheet_GunvalueConfig::Clear() {
  e_gunvalueconfig_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GunvalueConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GunvalueConfig E_GunvalueConfig_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GunvalueConfig_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_gunvalueconfig_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GunvalueConfig_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GunvalueConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GunvalueConfig E_GunvalueConfig_List = 1;
  for (int i = 0; i < this->e_gunvalueconfig_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_gunvalueconfig_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GunvalueConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GunvalueConfig E_GunvalueConfig_List = 1;
  for (int i = 0; i < this->e_gunvalueconfig_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_gunvalueconfig_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GunvalueConfig::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GunvalueConfig E_GunvalueConfig_List = 1;
  total_size += 1 * this->e_gunvalueconfig_list_size();
  for (int i = 0; i < this->e_gunvalueconfig_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_gunvalueconfig_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GunvalueConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GunvalueConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GunvalueConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GunvalueConfig::MergeFrom(const Sheet_GunvalueConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_gunvalueconfig_list_.MergeFrom(from.e_gunvalueconfig_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GunvalueConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GunvalueConfig::CopyFrom(const Sheet_GunvalueConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GunvalueConfig::IsInitialized() const {

  return true;
}

void Sheet_GunvalueConfig::Swap(Sheet_GunvalueConfig* other) {
  if (other != this) {
    e_gunvalueconfig_list_.Swap(&other->e_gunvalueconfig_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GunvalueConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GunvalueConfig_descriptor_;
  metadata.reflection = Sheet_GunvalueConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
