// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fish.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Fish.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_FishRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FishRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FishRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FishRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FishGunvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FishGunvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FishGunvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FishGunvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FishCtrllevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FishCtrllevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FishCtrllevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FishCtrllevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FishConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FishConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FishConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FishConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Fish_2eproto() {
  protobuf_AddDesc_Fish_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Fish.proto");
  GOOGLE_CHECK(file != NULL);
  E_FishRoom_descriptor_ = file->message_type(0);
  static const int E_FishRoom_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_roomlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_sitenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_deskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_maxpeople_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_entermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_autochair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_isexpscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_expscenegold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, m_tax_),
  };
  E_FishRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FishRoom_descriptor_,
      E_FishRoom::default_instance_,
      E_FishRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FishRoom));
  Sheet_FishRoom_descriptor_ = file->message_type(1);
  static const int Sheet_FishRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishRoom, e_fishroom_list_),
  };
  Sheet_FishRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FishRoom_descriptor_,
      Sheet_FishRoom::default_instance_,
      Sheet_FishRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FishRoom));
  E_FishGunvalue_descriptor_ = file->message_type(2);
  static const int E_FishGunvalue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishGunvalue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishGunvalue, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishGunvalue, m_gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishGunvalue, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishGunvalue, m_gunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishGunvalue, m_gameroomid_),
  };
  E_FishGunvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FishGunvalue_descriptor_,
      E_FishGunvalue::default_instance_,
      E_FishGunvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishGunvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishGunvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FishGunvalue));
  Sheet_FishGunvalue_descriptor_ = file->message_type(3);
  static const int Sheet_FishGunvalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishGunvalue, e_fishgunvalue_list_),
  };
  Sheet_FishGunvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FishGunvalue_descriptor_,
      Sheet_FishGunvalue::default_instance_,
      Sheet_FishGunvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishGunvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishGunvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FishGunvalue));
  E_FishCtrllevel_descriptor_ = file->message_type(4);
  static const int E_FishCtrllevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishCtrllevel, m_controllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishCtrllevel, m_controlrate_),
  };
  E_FishCtrllevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FishCtrllevel_descriptor_,
      E_FishCtrllevel::default_instance_,
      E_FishCtrllevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishCtrllevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishCtrllevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FishCtrllevel));
  Sheet_FishCtrllevel_descriptor_ = file->message_type(5);
  static const int Sheet_FishCtrllevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishCtrllevel, e_fishctrllevel_list_),
  };
  Sheet_FishCtrllevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FishCtrllevel_descriptor_,
      Sheet_FishCtrllevel::default_instance_,
      Sheet_FishCtrllevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishCtrllevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishCtrllevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FishCtrllevel));
  E_FishConfig_descriptor_ = file->message_type(6);
  static const int E_FishConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_buildfishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_ratiomin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_ratiomax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_doubleawardminratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_childfishcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_damageradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_damagefishids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, m_childfishids_),
  };
  E_FishConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FishConfig_descriptor_,
      E_FishConfig::default_instance_,
      E_FishConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FishConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FishConfig));
  Sheet_FishConfig_descriptor_ = file->message_type(7);
  static const int Sheet_FishConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishConfig, e_fishconfig_list_),
  };
  Sheet_FishConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FishConfig_descriptor_,
      Sheet_FishConfig::default_instance_,
      Sheet_FishConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FishConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Fish_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FishRoom_descriptor_, &E_FishRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FishRoom_descriptor_, &Sheet_FishRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FishGunvalue_descriptor_, &E_FishGunvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FishGunvalue_descriptor_, &Sheet_FishGunvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FishCtrllevel_descriptor_, &E_FishCtrllevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FishCtrllevel_descriptor_, &Sheet_FishCtrllevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FishConfig_descriptor_, &E_FishConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FishConfig_descriptor_, &Sheet_FishConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Fish_2eproto() {
  delete E_FishRoom::default_instance_;
  delete E_FishRoom_reflection_;
  delete Sheet_FishRoom::default_instance_;
  delete Sheet_FishRoom_reflection_;
  delete E_FishGunvalue::default_instance_;
  delete E_FishGunvalue_reflection_;
  delete Sheet_FishGunvalue::default_instance_;
  delete Sheet_FishGunvalue_reflection_;
  delete E_FishCtrllevel::default_instance_;
  delete E_FishCtrllevel_reflection_;
  delete Sheet_FishCtrllevel::default_instance_;
  delete Sheet_FishCtrllevel_reflection_;
  delete E_FishConfig::default_instance_;
  delete E_FishConfig_reflection_;
  delete Sheet_FishConfig::default_instance_;
  delete Sheet_FishConfig_reflection_;
}

void protobuf_AddDesc_Fish_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nFish.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\323\004\n\nE_FishRoom\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010"
    "\345\224\257\344\270\200ID\022\036\n\010m_roomid\030\002 \001(\005B\014\302\377\024\010\346\210\277\351\227\264ID"
    "\022\036\n\010m_gameid\030\003 \001(\005B\014\302\377\024\010\346\270\270\346\210\217ID\022%\n\nm_ga"
    "mename\030\004 \001(\tB\021\302\377\024\t\346\270\270\346\210\217\345\220\215\220\301\024@\022$\n\nm_roo"
    "mtype\030\005 \001(\005B\020\302\377\024\014\346\210\277\351\227\264\347\261\273\345\236\213\022%\n\013m_rooml"
    "evel\030\006 \001(\005B\020\302\377\024\014\346\210\277\351\227\264\347\255\211\347\272\247\022%\n\nm_roomna"
    "me\030\007 \001(\tB\021\302\377\024\t\346\210\277\351\227\264\345\220\215\220\301\024@\022 \n\tm_sitenum"
    "\030\010 \001(\005B\r\302\377\024\t\345\272\247\344\275\215\346\225\260\022\"\n\013m_deskcount\030\t \001"
    "(\005B\r\302\377\024\t\346\241\214\345\255\220\346\225\260\022(\n\013m_maxpeople\030\n \001(\005B\023"
    "\302\377\024\017\346\234\200\345\244\247\347\216\251\345\256\266\346\225\260\022$\n\nm_entermin\030\013 \001(\005B"
    "\020\302\377\024\014\346\234\200\345\260\217\347\255\271\347\240\201\022$\n\nm_entermax\030\014 \001(\005B\020\302"
    "\377\024\014\346\234\200\345\244\247\347\255\271\347\240\201\022\"\n\013m_autochair\030\r \001(\005B\r\302\377"
    "\024\t\351\200\211\344\275\215\347\275\256\022#\n\014m_isexpscene\030\016 \001(\005B\r\302\377\024\t\344"
    "\275\223\351\252\214\345\234\272\022+\n\016m_expscenegold\030\017 \001(\005B\023\302\377\024\017\344\275"
    "\223\351\252\214\345\234\272\351\207\221\345\270\201\022\034\n\005m_tax\030\020 \001(\005B\r\302\377\024\t\346\212\275\346\260\264"
    "\347\216\207\"E\n\016Sheet_FishRoom\0223\n\017E_FishRoom_List"
    "\030\001 \003(\0132\024.proto_ff.E_FishRoomB\004\210\301\024\010\"\314\001\n\016E"
    "_FishGunvalue\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200I"
    "D\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\022\036\n\010m_gameid\030"
    "\003 \001(\005B\014\302\377\024\010\346\270\270\346\210\217Id\022\036\n\010m_roomid\030\004 \001(\005B\014\302"
    "\377\024\010\346\210\277\351\227\264ID\022\032\n\007m_gunid\030\005 \001(\005B\t\302\377\024\005\347\202\256Id\022"
    "(\n\014m_gameroomid\030\006 \001(\005B\022\302\377\024\016\346\270\270\346\210\217\346\210\277\351\227\264I"
    "D\"Q\n\022Sheet_FishGunvalue\022;\n\023E_FishGunvalu"
    "e_List\030\001 \003(\0132\030.proto_ff.E_FishGunvalueB\004"
    "\210\301\024@\"`\n\017E_FishCtrllevel\022$\n\016m_controlleve"
    "l\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022\'\n\rm_controlrate\030\002"
    " \001(\005B\020\302\377\024\014\346\216\247\345\210\266\346\246\202\347\216\207\"T\n\023Sheet_FishCtrl"
    "level\022=\n\024E_FishCtrllevel_List\030\001 \003(\0132\031.pr"
    "oto_ff.E_FishCtrllevelB\004\210\301\024\020\"\271\003\n\014E_FishC"
    "onfig\022\033\n\010m_fishid\030\001 \001(\005B\t\302\377\024\005\351\261\274Id\022!\n\nm_"
    "fishtype\030\002 \001(\005B\r\302\377\024\t\351\261\274\347\261\273\345\236\213\022+\n\017m_build"
    "fishtype\030\003 \001(\005B\022\302\377\024\016\351\261\274build\347\261\273\345\236\213\022$\n\nm_"
    "ratiomin\030\004 \001(\005B\020\302\377\024\014\346\234\200\346\226\260\346\257\224\344\276\213\022$\n\nm_ra"
    "tiomax\030\005 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346\257\224\344\276\213\022;\n\025m_doub"
    "leawardminratio\030\006 \001(\005B\034\302\377\024\030\345\217\214\351\207\215\345\245\226\345\212\261\346"
    "\234\200\345\260\217\346\257\224\347\216\207\022\'\n\020m_childfishcount\030\007 \001(\005B\r\302"
    "\377\024\t\345\255\220\351\261\274\346\225\260\022(\n\016m_damageradius\030\010 \001(\005B\020\302\377"
    "\024\014\344\274\244\345\256\263\345\215\212\345\276\204\0221\n\017m_damagefishids\030\t \001(\tB"
    "\030\302\377\024\017\344\274\244\345\256\263\345\255\220\351\261\274Ids\220\301\024\200\001\022-\n\016m_childfish"
    "ids\030\n \003(\tB\025\302\377\024\t\345\255\220\351\261\274Ids\210\301\024\006\220\301\024@\"K\n\020Shee"
    "t_FishConfig\0227\n\021E_FishConfig_List\030\001 \003(\0132"
    "\026.proto_ff.E_FishConfigB\004\210\301\024@", 1709);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Fish.proto", &protobuf_RegisterTypes);
  E_FishRoom::default_instance_ = new E_FishRoom();
  Sheet_FishRoom::default_instance_ = new Sheet_FishRoom();
  E_FishGunvalue::default_instance_ = new E_FishGunvalue();
  Sheet_FishGunvalue::default_instance_ = new Sheet_FishGunvalue();
  E_FishCtrllevel::default_instance_ = new E_FishCtrllevel();
  Sheet_FishCtrllevel::default_instance_ = new Sheet_FishCtrllevel();
  E_FishConfig::default_instance_ = new E_FishConfig();
  Sheet_FishConfig::default_instance_ = new Sheet_FishConfig();
  E_FishRoom::default_instance_->InitAsDefaultInstance();
  Sheet_FishRoom::default_instance_->InitAsDefaultInstance();
  E_FishGunvalue::default_instance_->InitAsDefaultInstance();
  Sheet_FishGunvalue::default_instance_->InitAsDefaultInstance();
  E_FishCtrllevel::default_instance_->InitAsDefaultInstance();
  Sheet_FishCtrllevel::default_instance_->InitAsDefaultInstance();
  E_FishConfig::default_instance_->InitAsDefaultInstance();
  Sheet_FishConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Fish_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Fish_2eproto {
  StaticDescriptorInitializer_Fish_2eproto() {
    protobuf_AddDesc_Fish_2eproto();
  }
} static_descriptor_initializer_Fish_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_FishRoom::kMIdFieldNumber;
const int E_FishRoom::kMRoomidFieldNumber;
const int E_FishRoom::kMGameidFieldNumber;
const int E_FishRoom::kMGamenameFieldNumber;
const int E_FishRoom::kMRoomtypeFieldNumber;
const int E_FishRoom::kMRoomlevelFieldNumber;
const int E_FishRoom::kMRoomnameFieldNumber;
const int E_FishRoom::kMSitenumFieldNumber;
const int E_FishRoom::kMDeskcountFieldNumber;
const int E_FishRoom::kMMaxpeopleFieldNumber;
const int E_FishRoom::kMEnterminFieldNumber;
const int E_FishRoom::kMEntermaxFieldNumber;
const int E_FishRoom::kMAutochairFieldNumber;
const int E_FishRoom::kMIsexpsceneFieldNumber;
const int E_FishRoom::kMExpscenegoldFieldNumber;
const int E_FishRoom::kMTaxFieldNumber;
#endif  // !_MSC_VER

E_FishRoom::E_FishRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FishRoom::InitAsDefaultInstance() {
}

E_FishRoom::E_FishRoom(const E_FishRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FishRoom::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_roomid_ = 0;
  m_gameid_ = 0;
  m_gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_roomtype_ = 0;
  m_roomlevel_ = 0;
  m_roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sitenum_ = 0;
  m_deskcount_ = 0;
  m_maxpeople_ = 0;
  m_entermin_ = 0;
  m_entermax_ = 0;
  m_autochair_ = 0;
  m_isexpscene_ = 0;
  m_expscenegold_ = 0;
  m_tax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FishRoom::~E_FishRoom() {
  SharedDtor();
}

void E_FishRoom::SharedDtor() {
  if (m_gamename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gamename_;
  }
  if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_roomname_;
  }
  if (this != default_instance_) {
  }
}

void E_FishRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FishRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FishRoom_descriptor_;
}

const E_FishRoom& E_FishRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2eproto();
  return *default_instance_;
}

E_FishRoom* E_FishRoom::default_instance_ = NULL;

E_FishRoom* E_FishRoom::New() const {
  return new E_FishRoom;
}

void E_FishRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_roomid_ = 0;
    m_gameid_ = 0;
    if (has_m_gamename()) {
      if (m_gamename_ != &::google::protobuf::internal::kEmptyString) {
        m_gamename_->clear();
      }
    }
    m_roomtype_ = 0;
    m_roomlevel_ = 0;
    if (has_m_roomname()) {
      if (m_roomname_ != &::google::protobuf::internal::kEmptyString) {
        m_roomname_->clear();
      }
    }
    m_sitenum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_deskcount_ = 0;
    m_maxpeople_ = 0;
    m_entermin_ = 0;
    m_entermax_ = 0;
    m_autochair_ = 0;
    m_isexpscene_ = 0;
    m_expscenegold_ = 0;
    m_tax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FishRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gameid;
        break;
      }

      // optional int32 m_gameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameid_)));
          set_has_m_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_gamename;
        break;
      }

      // optional string m_gamename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gamename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gamename().data(), this->m_gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_roomtype;
        break;
      }

      // optional int32 m_roomtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomtype_)));
          set_has_m_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_roomlevel;
        break;
      }

      // optional int32 m_roomlevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomlevel_)));
          set_has_m_roomlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_roomname;
        break;
      }

      // optional string m_roomname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_roomname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_roomname().data(), this->m_roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_sitenum;
        break;
      }

      // optional int32 m_sitenum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sitenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sitenum_)));
          set_has_m_sitenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_deskcount;
        break;
      }

      // optional int32 m_deskcount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_deskcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_deskcount_)));
          set_has_m_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_maxpeople;
        break;
      }

      // optional int32 m_maxpeople = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxpeople:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxpeople_)));
          set_has_m_maxpeople();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_entermin;
        break;
      }

      // optional int32 m_entermin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_entermin_)));
          set_has_m_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_entermax;
        break;
      }

      // optional int32 m_entermax = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_entermax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_entermax_)));
          set_has_m_entermax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_autochair;
        break;
      }

      // optional int32 m_autochair = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_autochair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_autochair_)));
          set_has_m_autochair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_isexpscene;
        break;
      }

      // optional int32 m_isexpscene = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isexpscene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isexpscene_)));
          set_has_m_isexpscene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_expscenegold;
        break;
      }

      // optional int32 m_expscenegold = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expscenegold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expscenegold_)));
          set_has_m_expscenegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_tax;
        break;
      }

      // optional int32 m_tax = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tax_)));
          set_has_m_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FishRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roomid(), output);
  }

  // optional int32 m_gameid = 3;
  if (has_m_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_gameid(), output);
  }

  // optional string m_gamename = 4;
  if (has_m_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gamename().data(), this->m_gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_gamename(), output);
  }

  // optional int32 m_roomtype = 5;
  if (has_m_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_roomtype(), output);
  }

  // optional int32 m_roomlevel = 6;
  if (has_m_roomlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_roomlevel(), output);
  }

  // optional string m_roomname = 7;
  if (has_m_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_roomname().data(), this->m_roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_roomname(), output);
  }

  // optional int32 m_sitenum = 8;
  if (has_m_sitenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_sitenum(), output);
  }

  // optional int32 m_deskcount = 9;
  if (has_m_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_deskcount(), output);
  }

  // optional int32 m_maxpeople = 10;
  if (has_m_maxpeople()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_maxpeople(), output);
  }

  // optional int32 m_entermin = 11;
  if (has_m_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_entermin(), output);
  }

  // optional int32 m_entermax = 12;
  if (has_m_entermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_entermax(), output);
  }

  // optional int32 m_autochair = 13;
  if (has_m_autochair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_autochair(), output);
  }

  // optional int32 m_isexpscene = 14;
  if (has_m_isexpscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_isexpscene(), output);
  }

  // optional int32 m_expscenegold = 15;
  if (has_m_expscenegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_expscenegold(), output);
  }

  // optional int32 m_tax = 16;
  if (has_m_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_tax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FishRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roomid(), target);
  }

  // optional int32 m_gameid = 3;
  if (has_m_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_gameid(), target);
  }

  // optional string m_gamename = 4;
  if (has_m_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gamename().data(), this->m_gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_gamename(), target);
  }

  // optional int32 m_roomtype = 5;
  if (has_m_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_roomtype(), target);
  }

  // optional int32 m_roomlevel = 6;
  if (has_m_roomlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_roomlevel(), target);
  }

  // optional string m_roomname = 7;
  if (has_m_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_roomname().data(), this->m_roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_roomname(), target);
  }

  // optional int32 m_sitenum = 8;
  if (has_m_sitenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_sitenum(), target);
  }

  // optional int32 m_deskcount = 9;
  if (has_m_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_deskcount(), target);
  }

  // optional int32 m_maxpeople = 10;
  if (has_m_maxpeople()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_maxpeople(), target);
  }

  // optional int32 m_entermin = 11;
  if (has_m_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_entermin(), target);
  }

  // optional int32 m_entermax = 12;
  if (has_m_entermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_entermax(), target);
  }

  // optional int32 m_autochair = 13;
  if (has_m_autochair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_autochair(), target);
  }

  // optional int32 m_isexpscene = 14;
  if (has_m_isexpscene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_isexpscene(), target);
  }

  // optional int32 m_expscenegold = 15;
  if (has_m_expscenegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_expscenegold(), target);
  }

  // optional int32 m_tax = 16;
  if (has_m_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_tax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FishRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_roomid = 2;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

    // optional int32 m_gameid = 3;
    if (has_m_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameid());
    }

    // optional string m_gamename = 4;
    if (has_m_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gamename());
    }

    // optional int32 m_roomtype = 5;
    if (has_m_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomtype());
    }

    // optional int32 m_roomlevel = 6;
    if (has_m_roomlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomlevel());
    }

    // optional string m_roomname = 7;
    if (has_m_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_roomname());
    }

    // optional int32 m_sitenum = 8;
    if (has_m_sitenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sitenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_deskcount = 9;
    if (has_m_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_deskcount());
    }

    // optional int32 m_maxpeople = 10;
    if (has_m_maxpeople()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxpeople());
    }

    // optional int32 m_entermin = 11;
    if (has_m_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_entermin());
    }

    // optional int32 m_entermax = 12;
    if (has_m_entermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_entermax());
    }

    // optional int32 m_autochair = 13;
    if (has_m_autochair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_autochair());
    }

    // optional int32 m_isexpscene = 14;
    if (has_m_isexpscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isexpscene());
    }

    // optional int32 m_expscenegold = 15;
    if (has_m_expscenegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expscenegold());
    }

    // optional int32 m_tax = 16;
    if (has_m_tax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FishRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FishRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FishRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FishRoom::MergeFrom(const E_FishRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
    if (from.has_m_gameid()) {
      set_m_gameid(from.m_gameid());
    }
    if (from.has_m_gamename()) {
      set_m_gamename(from.m_gamename());
    }
    if (from.has_m_roomtype()) {
      set_m_roomtype(from.m_roomtype());
    }
    if (from.has_m_roomlevel()) {
      set_m_roomlevel(from.m_roomlevel());
    }
    if (from.has_m_roomname()) {
      set_m_roomname(from.m_roomname());
    }
    if (from.has_m_sitenum()) {
      set_m_sitenum(from.m_sitenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_deskcount()) {
      set_m_deskcount(from.m_deskcount());
    }
    if (from.has_m_maxpeople()) {
      set_m_maxpeople(from.m_maxpeople());
    }
    if (from.has_m_entermin()) {
      set_m_entermin(from.m_entermin());
    }
    if (from.has_m_entermax()) {
      set_m_entermax(from.m_entermax());
    }
    if (from.has_m_autochair()) {
      set_m_autochair(from.m_autochair());
    }
    if (from.has_m_isexpscene()) {
      set_m_isexpscene(from.m_isexpscene());
    }
    if (from.has_m_expscenegold()) {
      set_m_expscenegold(from.m_expscenegold());
    }
    if (from.has_m_tax()) {
      set_m_tax(from.m_tax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FishRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FishRoom::CopyFrom(const E_FishRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FishRoom::IsInitialized() const {

  return true;
}

void E_FishRoom::Swap(E_FishRoom* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_roomid_, other->m_roomid_);
    std::swap(m_gameid_, other->m_gameid_);
    std::swap(m_gamename_, other->m_gamename_);
    std::swap(m_roomtype_, other->m_roomtype_);
    std::swap(m_roomlevel_, other->m_roomlevel_);
    std::swap(m_roomname_, other->m_roomname_);
    std::swap(m_sitenum_, other->m_sitenum_);
    std::swap(m_deskcount_, other->m_deskcount_);
    std::swap(m_maxpeople_, other->m_maxpeople_);
    std::swap(m_entermin_, other->m_entermin_);
    std::swap(m_entermax_, other->m_entermax_);
    std::swap(m_autochair_, other->m_autochair_);
    std::swap(m_isexpscene_, other->m_isexpscene_);
    std::swap(m_expscenegold_, other->m_expscenegold_);
    std::swap(m_tax_, other->m_tax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FishRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FishRoom_descriptor_;
  metadata.reflection = E_FishRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FishRoom::kEFishRoomListFieldNumber;
#endif  // !_MSC_VER

Sheet_FishRoom::Sheet_FishRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FishRoom::InitAsDefaultInstance() {
}

Sheet_FishRoom::Sheet_FishRoom(const Sheet_FishRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FishRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FishRoom::~Sheet_FishRoom() {
  SharedDtor();
}

void Sheet_FishRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FishRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FishRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FishRoom_descriptor_;
}

const Sheet_FishRoom& Sheet_FishRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2eproto();
  return *default_instance_;
}

Sheet_FishRoom* Sheet_FishRoom::default_instance_ = NULL;

Sheet_FishRoom* Sheet_FishRoom::New() const {
  return new Sheet_FishRoom;
}

void Sheet_FishRoom::Clear() {
  e_fishroom_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FishRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FishRoom E_FishRoom_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FishRoom_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_fishroom_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FishRoom_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FishRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FishRoom E_FishRoom_List = 1;
  for (int i = 0; i < this->e_fishroom_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_fishroom_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FishRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FishRoom E_FishRoom_List = 1;
  for (int i = 0; i < this->e_fishroom_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_fishroom_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FishRoom::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FishRoom E_FishRoom_List = 1;
  total_size += 1 * this->e_fishroom_list_size();
  for (int i = 0; i < this->e_fishroom_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_fishroom_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FishRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FishRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FishRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FishRoom::MergeFrom(const Sheet_FishRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_fishroom_list_.MergeFrom(from.e_fishroom_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FishRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FishRoom::CopyFrom(const Sheet_FishRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FishRoom::IsInitialized() const {

  return true;
}

void Sheet_FishRoom::Swap(Sheet_FishRoom* other) {
  if (other != this) {
    e_fishroom_list_.Swap(&other->e_fishroom_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FishRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FishRoom_descriptor_;
  metadata.reflection = Sheet_FishRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FishGunvalue::kMIdFieldNumber;
const int E_FishGunvalue::kMValueFieldNumber;
const int E_FishGunvalue::kMGameidFieldNumber;
const int E_FishGunvalue::kMRoomidFieldNumber;
const int E_FishGunvalue::kMGunidFieldNumber;
const int E_FishGunvalue::kMGameroomidFieldNumber;
#endif  // !_MSC_VER

E_FishGunvalue::E_FishGunvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FishGunvalue::InitAsDefaultInstance() {
}

E_FishGunvalue::E_FishGunvalue(const E_FishGunvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FishGunvalue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_value_ = 0;
  m_gameid_ = 0;
  m_roomid_ = 0;
  m_gunid_ = 0;
  m_gameroomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FishGunvalue::~E_FishGunvalue() {
  SharedDtor();
}

void E_FishGunvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FishGunvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FishGunvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FishGunvalue_descriptor_;
}

const E_FishGunvalue& E_FishGunvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2eproto();
  return *default_instance_;
}

E_FishGunvalue* E_FishGunvalue::default_instance_ = NULL;

E_FishGunvalue* E_FishGunvalue::New() const {
  return new E_FishGunvalue;
}

void E_FishGunvalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_value_ = 0;
    m_gameid_ = 0;
    m_roomid_ = 0;
    m_gunid_ = 0;
    m_gameroomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FishGunvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gameid;
        break;
      }

      // optional int32 m_gameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameid_)));
          set_has_m_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_gunid;
        break;
      }

      // optional int32 m_gunid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gunid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gunid_)));
          set_has_m_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_gameroomid;
        break;
      }

      // optional int32 m_gameroomid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameroomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameroomid_)));
          set_has_m_gameroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FishGunvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  // optional int32 m_gameid = 3;
  if (has_m_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_gameid(), output);
  }

  // optional int32 m_roomid = 4;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_roomid(), output);
  }

  // optional int32 m_gunid = 5;
  if (has_m_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_gunid(), output);
  }

  // optional int32 m_gameroomid = 6;
  if (has_m_gameroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_gameroomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FishGunvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  // optional int32 m_gameid = 3;
  if (has_m_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_gameid(), target);
  }

  // optional int32 m_roomid = 4;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_roomid(), target);
  }

  // optional int32 m_gunid = 5;
  if (has_m_gunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_gunid(), target);
  }

  // optional int32 m_gameroomid = 6;
  if (has_m_gameroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_gameroomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FishGunvalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_gameid = 3;
    if (has_m_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameid());
    }

    // optional int32 m_roomid = 4;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

    // optional int32 m_gunid = 5;
    if (has_m_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gunid());
    }

    // optional int32 m_gameroomid = 6;
    if (has_m_gameroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameroomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FishGunvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FishGunvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FishGunvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FishGunvalue::MergeFrom(const E_FishGunvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_gameid()) {
      set_m_gameid(from.m_gameid());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
    if (from.has_m_gunid()) {
      set_m_gunid(from.m_gunid());
    }
    if (from.has_m_gameroomid()) {
      set_m_gameroomid(from.m_gameroomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FishGunvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FishGunvalue::CopyFrom(const E_FishGunvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FishGunvalue::IsInitialized() const {

  return true;
}

void E_FishGunvalue::Swap(E_FishGunvalue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_gameid_, other->m_gameid_);
    std::swap(m_roomid_, other->m_roomid_);
    std::swap(m_gunid_, other->m_gunid_);
    std::swap(m_gameroomid_, other->m_gameroomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FishGunvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FishGunvalue_descriptor_;
  metadata.reflection = E_FishGunvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FishGunvalue::kEFishGunvalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_FishGunvalue::Sheet_FishGunvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FishGunvalue::InitAsDefaultInstance() {
}

Sheet_FishGunvalue::Sheet_FishGunvalue(const Sheet_FishGunvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FishGunvalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FishGunvalue::~Sheet_FishGunvalue() {
  SharedDtor();
}

void Sheet_FishGunvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FishGunvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FishGunvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FishGunvalue_descriptor_;
}

const Sheet_FishGunvalue& Sheet_FishGunvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2eproto();
  return *default_instance_;
}

Sheet_FishGunvalue* Sheet_FishGunvalue::default_instance_ = NULL;

Sheet_FishGunvalue* Sheet_FishGunvalue::New() const {
  return new Sheet_FishGunvalue;
}

void Sheet_FishGunvalue::Clear() {
  e_fishgunvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FishGunvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FishGunvalue E_FishGunvalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FishGunvalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_fishgunvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FishGunvalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FishGunvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FishGunvalue E_FishGunvalue_List = 1;
  for (int i = 0; i < this->e_fishgunvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_fishgunvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FishGunvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FishGunvalue E_FishGunvalue_List = 1;
  for (int i = 0; i < this->e_fishgunvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_fishgunvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FishGunvalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FishGunvalue E_FishGunvalue_List = 1;
  total_size += 1 * this->e_fishgunvalue_list_size();
  for (int i = 0; i < this->e_fishgunvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_fishgunvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FishGunvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FishGunvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FishGunvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FishGunvalue::MergeFrom(const Sheet_FishGunvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_fishgunvalue_list_.MergeFrom(from.e_fishgunvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FishGunvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FishGunvalue::CopyFrom(const Sheet_FishGunvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FishGunvalue::IsInitialized() const {

  return true;
}

void Sheet_FishGunvalue::Swap(Sheet_FishGunvalue* other) {
  if (other != this) {
    e_fishgunvalue_list_.Swap(&other->e_fishgunvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FishGunvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FishGunvalue_descriptor_;
  metadata.reflection = Sheet_FishGunvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FishCtrllevel::kMControllevelFieldNumber;
const int E_FishCtrllevel::kMControlrateFieldNumber;
#endif  // !_MSC_VER

E_FishCtrllevel::E_FishCtrllevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FishCtrllevel::InitAsDefaultInstance() {
}

E_FishCtrllevel::E_FishCtrllevel(const E_FishCtrllevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FishCtrllevel::SharedCtor() {
  _cached_size_ = 0;
  m_controllevel_ = 0;
  m_controlrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FishCtrllevel::~E_FishCtrllevel() {
  SharedDtor();
}

void E_FishCtrllevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FishCtrllevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FishCtrllevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FishCtrllevel_descriptor_;
}

const E_FishCtrllevel& E_FishCtrllevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2eproto();
  return *default_instance_;
}

E_FishCtrllevel* E_FishCtrllevel::default_instance_ = NULL;

E_FishCtrllevel* E_FishCtrllevel::New() const {
  return new E_FishCtrllevel;
}

void E_FishCtrllevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_controllevel_ = 0;
    m_controlrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FishCtrllevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_controllevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_controllevel_)));
          set_has_m_controllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_controlrate;
        break;
      }

      // optional int32 m_controlrate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_controlrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_controlrate_)));
          set_has_m_controlrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FishCtrllevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_controllevel = 1;
  if (has_m_controllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_controllevel(), output);
  }

  // optional int32 m_controlrate = 2;
  if (has_m_controlrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_controlrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FishCtrllevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_controllevel = 1;
  if (has_m_controllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_controllevel(), target);
  }

  // optional int32 m_controlrate = 2;
  if (has_m_controlrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_controlrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FishCtrllevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_controllevel = 1;
    if (has_m_controllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_controllevel());
    }

    // optional int32 m_controlrate = 2;
    if (has_m_controlrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_controlrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FishCtrllevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FishCtrllevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FishCtrllevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FishCtrllevel::MergeFrom(const E_FishCtrllevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_controllevel()) {
      set_m_controllevel(from.m_controllevel());
    }
    if (from.has_m_controlrate()) {
      set_m_controlrate(from.m_controlrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FishCtrllevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FishCtrllevel::CopyFrom(const E_FishCtrllevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FishCtrllevel::IsInitialized() const {

  return true;
}

void E_FishCtrllevel::Swap(E_FishCtrllevel* other) {
  if (other != this) {
    std::swap(m_controllevel_, other->m_controllevel_);
    std::swap(m_controlrate_, other->m_controlrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FishCtrllevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FishCtrllevel_descriptor_;
  metadata.reflection = E_FishCtrllevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FishCtrllevel::kEFishCtrllevelListFieldNumber;
#endif  // !_MSC_VER

Sheet_FishCtrllevel::Sheet_FishCtrllevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FishCtrllevel::InitAsDefaultInstance() {
}

Sheet_FishCtrllevel::Sheet_FishCtrllevel(const Sheet_FishCtrllevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FishCtrllevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FishCtrllevel::~Sheet_FishCtrllevel() {
  SharedDtor();
}

void Sheet_FishCtrllevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FishCtrllevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FishCtrllevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FishCtrllevel_descriptor_;
}

const Sheet_FishCtrllevel& Sheet_FishCtrllevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2eproto();
  return *default_instance_;
}

Sheet_FishCtrllevel* Sheet_FishCtrllevel::default_instance_ = NULL;

Sheet_FishCtrllevel* Sheet_FishCtrllevel::New() const {
  return new Sheet_FishCtrllevel;
}

void Sheet_FishCtrllevel::Clear() {
  e_fishctrllevel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FishCtrllevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FishCtrllevel E_FishCtrllevel_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FishCtrllevel_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_fishctrllevel_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FishCtrllevel_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FishCtrllevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FishCtrllevel E_FishCtrllevel_List = 1;
  for (int i = 0; i < this->e_fishctrllevel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_fishctrllevel_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FishCtrllevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FishCtrllevel E_FishCtrllevel_List = 1;
  for (int i = 0; i < this->e_fishctrllevel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_fishctrllevel_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FishCtrllevel::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FishCtrllevel E_FishCtrllevel_List = 1;
  total_size += 1 * this->e_fishctrllevel_list_size();
  for (int i = 0; i < this->e_fishctrllevel_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_fishctrllevel_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FishCtrllevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FishCtrllevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FishCtrllevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FishCtrllevel::MergeFrom(const Sheet_FishCtrllevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_fishctrllevel_list_.MergeFrom(from.e_fishctrllevel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FishCtrllevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FishCtrllevel::CopyFrom(const Sheet_FishCtrllevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FishCtrllevel::IsInitialized() const {

  return true;
}

void Sheet_FishCtrllevel::Swap(Sheet_FishCtrllevel* other) {
  if (other != this) {
    e_fishctrllevel_list_.Swap(&other->e_fishctrllevel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FishCtrllevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FishCtrllevel_descriptor_;
  metadata.reflection = Sheet_FishCtrllevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FishConfig::kMFishidFieldNumber;
const int E_FishConfig::kMFishtypeFieldNumber;
const int E_FishConfig::kMBuildfishtypeFieldNumber;
const int E_FishConfig::kMRatiominFieldNumber;
const int E_FishConfig::kMRatiomaxFieldNumber;
const int E_FishConfig::kMDoubleawardminratioFieldNumber;
const int E_FishConfig::kMChildfishcountFieldNumber;
const int E_FishConfig::kMDamageradiusFieldNumber;
const int E_FishConfig::kMDamagefishidsFieldNumber;
const int E_FishConfig::kMChildfishidsFieldNumber;
#endif  // !_MSC_VER

E_FishConfig::E_FishConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FishConfig::InitAsDefaultInstance() {
}

E_FishConfig::E_FishConfig(const E_FishConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FishConfig::SharedCtor() {
  _cached_size_ = 0;
  m_fishid_ = 0;
  m_fishtype_ = 0;
  m_buildfishtype_ = 0;
  m_ratiomin_ = 0;
  m_ratiomax_ = 0;
  m_doubleawardminratio_ = 0;
  m_childfishcount_ = 0;
  m_damageradius_ = 0;
  m_damagefishids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FishConfig::~E_FishConfig() {
  SharedDtor();
}

void E_FishConfig::SharedDtor() {
  if (m_damagefishids_ != &::google::protobuf::internal::kEmptyString) {
    delete m_damagefishids_;
  }
  if (this != default_instance_) {
  }
}

void E_FishConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FishConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FishConfig_descriptor_;
}

const E_FishConfig& E_FishConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2eproto();
  return *default_instance_;
}

E_FishConfig* E_FishConfig::default_instance_ = NULL;

E_FishConfig* E_FishConfig::New() const {
  return new E_FishConfig;
}

void E_FishConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fishid_ = 0;
    m_fishtype_ = 0;
    m_buildfishtype_ = 0;
    m_ratiomin_ = 0;
    m_ratiomax_ = 0;
    m_doubleawardminratio_ = 0;
    m_childfishcount_ = 0;
    m_damageradius_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_damagefishids()) {
      if (m_damagefishids_ != &::google::protobuf::internal::kEmptyString) {
        m_damagefishids_->clear();
      }
    }
  }
  m_childfishids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FishConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_fishid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fishid_)));
          set_has_m_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fishtype;
        break;
      }

      // optional int32 m_fishtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fishtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fishtype_)));
          set_has_m_fishtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_buildfishtype;
        break;
      }

      // optional int32 m_buildfishtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buildfishtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buildfishtype_)));
          set_has_m_buildfishtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_ratiomin;
        break;
      }

      // optional int32 m_ratiomin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ratiomin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ratiomin_)));
          set_has_m_ratiomin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_ratiomax;
        break;
      }

      // optional int32 m_ratiomax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ratiomax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ratiomax_)));
          set_has_m_ratiomax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_doubleawardminratio;
        break;
      }

      // optional int32 m_doubleawardminratio = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_doubleawardminratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_doubleawardminratio_)));
          set_has_m_doubleawardminratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_childfishcount;
        break;
      }

      // optional int32 m_childfishcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_childfishcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_childfishcount_)));
          set_has_m_childfishcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_damageradius;
        break;
      }

      // optional int32 m_damageradius = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_damageradius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_damageradius_)));
          set_has_m_damageradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_damagefishids;
        break;
      }

      // optional string m_damagefishids = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_damagefishids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_damagefishids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_damagefishids().data(), this->m_damagefishids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_childfishids;
        break;
      }

      // repeated string m_childfishids = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_childfishids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_childfishids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_childfishids(this->m_childfishids_size() - 1).data(),
            this->m_childfishids(this->m_childfishids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_childfishids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FishConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_fishid = 1;
  if (has_m_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fishid(), output);
  }

  // optional int32 m_fishtype = 2;
  if (has_m_fishtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fishtype(), output);
  }

  // optional int32 m_buildfishtype = 3;
  if (has_m_buildfishtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_buildfishtype(), output);
  }

  // optional int32 m_ratiomin = 4;
  if (has_m_ratiomin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ratiomin(), output);
  }

  // optional int32 m_ratiomax = 5;
  if (has_m_ratiomax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ratiomax(), output);
  }

  // optional int32 m_doubleawardminratio = 6;
  if (has_m_doubleawardminratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_doubleawardminratio(), output);
  }

  // optional int32 m_childfishcount = 7;
  if (has_m_childfishcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_childfishcount(), output);
  }

  // optional int32 m_damageradius = 8;
  if (has_m_damageradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_damageradius(), output);
  }

  // optional string m_damagefishids = 9;
  if (has_m_damagefishids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_damagefishids().data(), this->m_damagefishids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_damagefishids(), output);
  }

  // repeated string m_childfishids = 10;
  for (int i = 0; i < this->m_childfishids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_childfishids(i).data(), this->m_childfishids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_childfishids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FishConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_fishid = 1;
  if (has_m_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fishid(), target);
  }

  // optional int32 m_fishtype = 2;
  if (has_m_fishtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fishtype(), target);
  }

  // optional int32 m_buildfishtype = 3;
  if (has_m_buildfishtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_buildfishtype(), target);
  }

  // optional int32 m_ratiomin = 4;
  if (has_m_ratiomin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_ratiomin(), target);
  }

  // optional int32 m_ratiomax = 5;
  if (has_m_ratiomax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_ratiomax(), target);
  }

  // optional int32 m_doubleawardminratio = 6;
  if (has_m_doubleawardminratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_doubleawardminratio(), target);
  }

  // optional int32 m_childfishcount = 7;
  if (has_m_childfishcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_childfishcount(), target);
  }

  // optional int32 m_damageradius = 8;
  if (has_m_damageradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_damageradius(), target);
  }

  // optional string m_damagefishids = 9;
  if (has_m_damagefishids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_damagefishids().data(), this->m_damagefishids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_damagefishids(), target);
  }

  // repeated string m_childfishids = 10;
  for (int i = 0; i < this->m_childfishids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_childfishids(i).data(), this->m_childfishids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->m_childfishids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FishConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_fishid = 1;
    if (has_m_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fishid());
    }

    // optional int32 m_fishtype = 2;
    if (has_m_fishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fishtype());
    }

    // optional int32 m_buildfishtype = 3;
    if (has_m_buildfishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buildfishtype());
    }

    // optional int32 m_ratiomin = 4;
    if (has_m_ratiomin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ratiomin());
    }

    // optional int32 m_ratiomax = 5;
    if (has_m_ratiomax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ratiomax());
    }

    // optional int32 m_doubleawardminratio = 6;
    if (has_m_doubleawardminratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_doubleawardminratio());
    }

    // optional int32 m_childfishcount = 7;
    if (has_m_childfishcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_childfishcount());
    }

    // optional int32 m_damageradius = 8;
    if (has_m_damageradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_damageradius());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_damagefishids = 9;
    if (has_m_damagefishids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_damagefishids());
    }

  }
  // repeated string m_childfishids = 10;
  total_size += 1 * this->m_childfishids_size();
  for (int i = 0; i < this->m_childfishids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_childfishids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FishConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FishConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FishConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FishConfig::MergeFrom(const E_FishConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_childfishids_.MergeFrom(from.m_childfishids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fishid()) {
      set_m_fishid(from.m_fishid());
    }
    if (from.has_m_fishtype()) {
      set_m_fishtype(from.m_fishtype());
    }
    if (from.has_m_buildfishtype()) {
      set_m_buildfishtype(from.m_buildfishtype());
    }
    if (from.has_m_ratiomin()) {
      set_m_ratiomin(from.m_ratiomin());
    }
    if (from.has_m_ratiomax()) {
      set_m_ratiomax(from.m_ratiomax());
    }
    if (from.has_m_doubleawardminratio()) {
      set_m_doubleawardminratio(from.m_doubleawardminratio());
    }
    if (from.has_m_childfishcount()) {
      set_m_childfishcount(from.m_childfishcount());
    }
    if (from.has_m_damageradius()) {
      set_m_damageradius(from.m_damageradius());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_damagefishids()) {
      set_m_damagefishids(from.m_damagefishids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FishConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FishConfig::CopyFrom(const E_FishConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FishConfig::IsInitialized() const {

  return true;
}

void E_FishConfig::Swap(E_FishConfig* other) {
  if (other != this) {
    std::swap(m_fishid_, other->m_fishid_);
    std::swap(m_fishtype_, other->m_fishtype_);
    std::swap(m_buildfishtype_, other->m_buildfishtype_);
    std::swap(m_ratiomin_, other->m_ratiomin_);
    std::swap(m_ratiomax_, other->m_ratiomax_);
    std::swap(m_doubleawardminratio_, other->m_doubleawardminratio_);
    std::swap(m_childfishcount_, other->m_childfishcount_);
    std::swap(m_damageradius_, other->m_damageradius_);
    std::swap(m_damagefishids_, other->m_damagefishids_);
    m_childfishids_.Swap(&other->m_childfishids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FishConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FishConfig_descriptor_;
  metadata.reflection = E_FishConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FishConfig::kEFishConfigListFieldNumber;
#endif  // !_MSC_VER

Sheet_FishConfig::Sheet_FishConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FishConfig::InitAsDefaultInstance() {
}

Sheet_FishConfig::Sheet_FishConfig(const Sheet_FishConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FishConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FishConfig::~Sheet_FishConfig() {
  SharedDtor();
}

void Sheet_FishConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FishConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FishConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FishConfig_descriptor_;
}

const Sheet_FishConfig& Sheet_FishConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fish_2eproto();
  return *default_instance_;
}

Sheet_FishConfig* Sheet_FishConfig::default_instance_ = NULL;

Sheet_FishConfig* Sheet_FishConfig::New() const {
  return new Sheet_FishConfig;
}

void Sheet_FishConfig::Clear() {
  e_fishconfig_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FishConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FishConfig E_FishConfig_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FishConfig_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_fishconfig_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FishConfig_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FishConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FishConfig E_FishConfig_List = 1;
  for (int i = 0; i < this->e_fishconfig_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_fishconfig_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FishConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FishConfig E_FishConfig_List = 1;
  for (int i = 0; i < this->e_fishconfig_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_fishconfig_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FishConfig::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FishConfig E_FishConfig_List = 1;
  total_size += 1 * this->e_fishconfig_list_size();
  for (int i = 0; i < this->e_fishconfig_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_fishconfig_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FishConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FishConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FishConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FishConfig::MergeFrom(const Sheet_FishConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_fishconfig_list_.MergeFrom(from.e_fishconfig_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FishConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FishConfig::CopyFrom(const Sheet_FishConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FishConfig::IsInitialized() const {

  return true;
}

void Sheet_FishConfig::Swap(Sheet_FishConfig* other) {
  if (other != this) {
    e_fishconfig_list_.Swap(&other->e_fishconfig_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FishConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FishConfig_descriptor_;
  metadata.reflection = Sheet_FishConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
