// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Com.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Com.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPair64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPair64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPairBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPairBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComItemWithType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComItemWithType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_UserLoginExternalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UserLoginExternalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_UserDetailCommonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UserDetailCommonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSSyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSSyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbGiveBankJetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbGiveBankJetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_UserSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UserSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerDetailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerDetailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerWealthData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerWealthData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerAchievementData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerAchievementData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomStat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Com_2eproto() {
  protobuf_AddDesc_Com_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Com.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyMessage_descriptor_ = file->message_type(0);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMessage));
  ComPair_descriptor_ = file->message_type(1);
  static const int ComPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, value_),
  };
  ComPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPair_descriptor_,
      ComPair::default_instance_,
      ComPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPair));
  ComPair64_descriptor_ = file->message_type(2);
  static const int ComPair64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, value_),
  };
  ComPair64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPair64_descriptor_,
      ComPair64::default_instance_,
      ComPair64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPair64));
  ComPairBool_descriptor_ = file->message_type(3);
  static const int ComPairBool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, value_),
  };
  ComPairBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPairBool_descriptor_,
      ComPairBool::default_instance_,
      ComPairBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPairBool));
  ComItem_descriptor_ = file->message_type(4);
  static const int ComItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItem, item_num_),
  };
  ComItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComItem_descriptor_,
      ComItem::default_instance_,
      ComItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComItem));
  ComItemWithType_descriptor_ = file->message_type(5);
  static const int ComItemWithType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, type_),
  };
  ComItemWithType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComItemWithType_descriptor_,
      ComItemWithType::default_instance_,
      ComItemWithType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComItemWithType));
  Vector3PB_descriptor_ = file->message_type(6);
  static const int Vector3PB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, z_),
  };
  Vector3PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3PB_descriptor_,
      Vector3PB::default_instance_,
      Vector3PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3PB));
  Vector2PB_descriptor_ = file->message_type(7);
  static const int Vector2PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, y_),
  };
  Vector2PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2PB_descriptor_,
      Vector2PB::default_instance_,
      Vector2PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2PB));
  Attr64_descriptor_ = file->message_type(8);
  static const int Attr64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, value_),
  };
  Attr64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr64_descriptor_,
      Attr64::default_instance_,
      Attr64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr64));
  Proto_UserLoginExternalData_descriptor_ = file->message_type(9);
  static const int Proto_UserLoginExternalData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, aread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, referral_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, platform_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, phone_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, device_id_),
  };
  Proto_UserLoginExternalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UserLoginExternalData_descriptor_,
      Proto_UserLoginExternalData::default_instance_,
      Proto_UserLoginExternalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UserLoginExternalData));
  Proto_UserDetailCommonData_descriptor_ = file->message_type(10);
  static const int Proto_UserDetailCommonData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, bank_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, phonenum_),
  };
  Proto_UserDetailCommonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UserDetailCommonData_descriptor_,
      Proto_UserDetailCommonData::default_instance_,
      Proto_UserDetailCommonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UserDetailCommonData));
  Proto_LTSSyncData_descriptor_ = file->message_type(11);
  static const int Proto_LTSSyncData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSSyncData, create_player_db_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSSyncData, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSSyncData, face_id_),
  };
  Proto_LTSSyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSSyncData_descriptor_,
      Proto_LTSSyncData::default_instance_,
      Proto_LTSSyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSSyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSSyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSSyncData));
  tbGiveBankJetton_descriptor_ = file->message_type(12);
  static const int tbGiveBankJetton_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, give_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, give_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, give_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, create_time_),
  };
  tbGiveBankJetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbGiveBankJetton_descriptor_,
      tbGiveBankJetton::default_instance_,
      tbGiveBankJetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbGiveBankJetton));
  Proto_UserSimpleData_descriptor_ = file->message_type(13);
  static const int Proto_UserSimpleData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, age_),
  };
  Proto_UserSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UserSimpleData_descriptor_,
      Proto_UserSimpleData::default_instance_,
      Proto_UserSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UserSimpleData));
  GamePlayerDetailData_descriptor_ = file->message_type(14);
  static const int GamePlayerDetailData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, isrobot_),
  };
  GamePlayerDetailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerDetailData_descriptor_,
      GamePlayerDetailData::default_instance_,
      GamePlayerDetailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerDetailData));
  GamePlayerWealthData_descriptor_ = file->message_type(15);
  static const int GamePlayerWealthData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, total_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, this_game_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, this_game_win_),
  };
  GamePlayerWealthData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerWealthData_descriptor_,
      GamePlayerWealthData::default_instance_,
      GamePlayerWealthData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerWealthData));
  GamePlayerAchievementData_descriptor_ = file->message_type(16);
  static const int GamePlayerAchievementData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerAchievementData, cur_ach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerAchievementData, cur_fee_),
  };
  GamePlayerAchievementData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerAchievementData_descriptor_,
      GamePlayerAchievementData::default_instance_,
      GamePlayerAchievementData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerAchievementData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerAchievementData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerAchievementData));
  GameRoomStat_descriptor_ = file->message_type(17);
  static const int GameRoomStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, cur_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, cur_pour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, cur_win_),
  };
  GameRoomStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomStat_descriptor_,
      GameRoomStat::default_instance_,
      GameRoomStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomStat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Com_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPair_descriptor_, &ComPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPair64_descriptor_, &ComPair64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPairBool_descriptor_, &ComPairBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComItem_descriptor_, &ComItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComItemWithType_descriptor_, &ComItemWithType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3PB_descriptor_, &Vector3PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2PB_descriptor_, &Vector2PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr64_descriptor_, &Attr64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UserLoginExternalData_descriptor_, &Proto_UserLoginExternalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UserDetailCommonData_descriptor_, &Proto_UserDetailCommonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSSyncData_descriptor_, &Proto_LTSSyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbGiveBankJetton_descriptor_, &tbGiveBankJetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UserSimpleData_descriptor_, &Proto_UserSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerDetailData_descriptor_, &GamePlayerDetailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerWealthData_descriptor_, &GamePlayerWealthData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerAchievementData_descriptor_, &GamePlayerAchievementData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomStat_descriptor_, &GameRoomStat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Com_2eproto() {
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete ComPair::default_instance_;
  delete ComPair_reflection_;
  delete ComPair64::default_instance_;
  delete ComPair64_reflection_;
  delete ComPairBool::default_instance_;
  delete ComPairBool_reflection_;
  delete ComItem::default_instance_;
  delete ComItem_reflection_;
  delete ComItemWithType::default_instance_;
  delete ComItemWithType_reflection_;
  delete Vector3PB::default_instance_;
  delete Vector3PB_reflection_;
  delete Vector2PB::default_instance_;
  delete Vector2PB_reflection_;
  delete Attr64::default_instance_;
  delete Attr64_reflection_;
  delete Proto_UserLoginExternalData::default_instance_;
  delete Proto_UserLoginExternalData_reflection_;
  delete Proto_UserDetailCommonData::default_instance_;
  delete Proto_UserDetailCommonData_reflection_;
  delete Proto_LTSSyncData::default_instance_;
  delete Proto_LTSSyncData_reflection_;
  delete tbGiveBankJetton::default_instance_;
  delete tbGiveBankJetton_reflection_;
  delete Proto_UserSimpleData::default_instance_;
  delete Proto_UserSimpleData_reflection_;
  delete GamePlayerDetailData::default_instance_;
  delete GamePlayerDetailData_reflection_;
  delete GamePlayerWealthData::default_instance_;
  delete GamePlayerWealthData_reflection_;
  delete GamePlayerAchievementData::default_instance_;
  delete GamePlayerAchievementData_reflection_;
  delete GameRoomStat::default_instance_;
  delete GameRoomStat_reflection_;
}

void protobuf_AddDesc_Com_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tCom.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\032\017ComDefine.proto\"\016\n\014EmptyMessage\"%\n"
    "\007ComPair\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\"\'\n\t"
    "ComPair64\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\004\")\n"
    "\013ComPairBool\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\010"
    "\",\n\007ComItem\022\017\n\007item_id\030\001 \001(\004\022\020\n\010item_num"
    "\030\002 \001(\004\"B\n\017ComItemWithType\022\017\n\007item_id\030\001 \001"
    "(\004\022\020\n\010item_num\030\002 \001(\004\022\014\n\004type\030\003 \001(\r\",\n\tVe"
    "ctor3PB\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002"
    "\"!\n\tVector2PB\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"#\n\006A"
    "ttr64\022\n\n\002id\030\001 \002(\r\022\r\n\005value\030\002 \002(\003\"\331\001\n\033Pro"
    "to_UserLoginExternalData\022\020\n\010aread_id\030\001 \001"
    "(\r\022\020\n\010agent_id\030\002 \001(\r\022\022\n\nchannel_id\030\003 \001(\r"
    "\022\025\n\rreferral_code\030\004 \001(\004\022\023\n\013platform_os\030\005"
    " \001(\t\022\017\n\007country\030\006 \001(\t\022\020\n\010province\030\007 \001(\t\022"
    "\014\n\004city\030\010 \001(\t\022\022\n\nphone_mode\030\t \001(\t\022\021\n\tdev"
    "ice_id\030\n \001(\t\"\231\001\n\032Proto_UserDetailCommonD"
    "ata\022\021\n\tnick_name\030\001 \001(\t\022\017\n\007face_id\030\002 \001(\r\022"
    "\016\n\006gender\030\003 \001(\r\022\016\n\006jetton\030\004 \001(\004\022\023\n\013bank_"
    "jetton\030\005 \001(\004\022\020\n\010agent_id\030\006 \001(\004\022\020\n\010phonen"
    "um\030\007 \001(\004\"V\n\021Proto_LTSSyncData\022\035\n\025create_"
    "player_db_data\030\001 \001(\010\022\021\n\tnick_name\030\002 \001(\t\022"
    "\017\n\007face_id\030\003 \001(\r\"\232\001\n\020tbGiveBankJetton\022\n\n"
    "\002id\030\001 \002(\004\022\017\n\007user_id\030\002 \001(\004\022\021\n\tuser_name\030"
    "\003 \001(\t\022\024\n\014give_user_id\030\004 \001(\004\022\026\n\016give_user"
    "_name\030\005 \001(\t\022\023\n\013give_jetton\030\006 \001(\004\022\023\n\013crea"
    "te_time\030\007 \001(\004\"c\n\024Proto_UserSimpleData\022\016\n"
    "\006userid\030\001 \001(\004\022\020\n\010nickname\030\002 \001(\t\022\014\n\004face\030"
    "\003 \001(\r\022\016\n\006gender\030\004 \001(\r\022\013\n\003age\030\005 \001(\r\"\254\001\n\024G"
    "amePlayerDetailData\022\021\n\tplayer_id\030\001 \001(\004\022\021"
    "\n\tcur_money\030\002 \001(\003\022\021\n\tvip_level\030\003 \001(\r\022\013\n\003"
    "sex\030\004 \001(\r\022\020\n\010chair_id\030\005 \001(\005\022\035\n\tnick_name"
    "\030\006 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\014\n\004face\030\007 \001(\r\022\017\n\007isRo"
    "bot\030\010 \001(\010\"\221\001\n\024GamePlayerWealthData\022\021\n\tpl"
    "ayer_id\030\001 \001(\004\022\020\n\010recharge\030\002 \001(\003\022\022\n\ntotal"
    "_lost\030\003 \001(\003\022\021\n\ttotal_win\030\004 \001(\003\022\026\n\016this_g"
    "ame_lost\030\005 \001(\003\022\025\n\rthis_game_win\030\006 \001(\003\"=\n"
    "\031GamePlayerAchievementData\022\017\n\007cur_ach\030\002 "
    "\001(\004\022\017\n\007cur_fee\030\003 \001(\004\"B\n\014GameRoomStat\022\017\n\007"
    "cur_fee\030\001 \001(\004\022\020\n\010cur_pour\030\002 \001(\004\022\017\n\007cur_w"
    "in\030\003 \001(\003", 1608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Com.proto", &protobuf_RegisterTypes);
  EmptyMessage::default_instance_ = new EmptyMessage();
  ComPair::default_instance_ = new ComPair();
  ComPair64::default_instance_ = new ComPair64();
  ComPairBool::default_instance_ = new ComPairBool();
  ComItem::default_instance_ = new ComItem();
  ComItemWithType::default_instance_ = new ComItemWithType();
  Vector3PB::default_instance_ = new Vector3PB();
  Vector2PB::default_instance_ = new Vector2PB();
  Attr64::default_instance_ = new Attr64();
  Proto_UserLoginExternalData::default_instance_ = new Proto_UserLoginExternalData();
  Proto_UserDetailCommonData::default_instance_ = new Proto_UserDetailCommonData();
  Proto_LTSSyncData::default_instance_ = new Proto_LTSSyncData();
  tbGiveBankJetton::default_instance_ = new tbGiveBankJetton();
  Proto_UserSimpleData::default_instance_ = new Proto_UserSimpleData();
  GamePlayerDetailData::default_instance_ = new GamePlayerDetailData();
  GamePlayerWealthData::default_instance_ = new GamePlayerWealthData();
  GamePlayerAchievementData::default_instance_ = new GamePlayerAchievementData();
  GameRoomStat::default_instance_ = new GameRoomStat();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  ComPair::default_instance_->InitAsDefaultInstance();
  ComPair64::default_instance_->InitAsDefaultInstance();
  ComPairBool::default_instance_->InitAsDefaultInstance();
  ComItem::default_instance_->InitAsDefaultInstance();
  ComItemWithType::default_instance_->InitAsDefaultInstance();
  Vector3PB::default_instance_->InitAsDefaultInstance();
  Vector2PB::default_instance_->InitAsDefaultInstance();
  Attr64::default_instance_->InitAsDefaultInstance();
  Proto_UserLoginExternalData::default_instance_->InitAsDefaultInstance();
  Proto_UserDetailCommonData::default_instance_->InitAsDefaultInstance();
  Proto_LTSSyncData::default_instance_->InitAsDefaultInstance();
  tbGiveBankJetton::default_instance_->InitAsDefaultInstance();
  Proto_UserSimpleData::default_instance_->InitAsDefaultInstance();
  GamePlayerDetailData::default_instance_->InitAsDefaultInstance();
  GamePlayerWealthData::default_instance_->InitAsDefaultInstance();
  GamePlayerAchievementData::default_instance_->InitAsDefaultInstance();
  GameRoomStat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Com_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Com_2eproto {
  StaticDescriptorInitializer_Com_2eproto() {
    protobuf_AddDesc_Com_2eproto();
  }
} static_descriptor_initializer_Com_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMessage::EmptyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyMessage::InitAsDefaultInstance() {
}

EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMessage::~EmptyMessage() {
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New() const {
  return new EmptyMessage;
}

void EmptyMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {

  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPair::kKeyFieldNumber;
const int ComPair::kValueFieldNumber;
#endif  // !_MSC_VER

ComPair::ComPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPair::InitAsDefaultInstance() {
}

ComPair::ComPair(const ComPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPair::~ComPair() {
  SharedDtor();
}

void ComPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPair_descriptor_;
}

const ComPair& ComPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPair* ComPair::default_instance_ = NULL;

ComPair* ComPair::New() const {
  return new ComPair;
}

void ComPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPair::MergeFrom(const ComPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPair::CopyFrom(const ComPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPair::IsInitialized() const {

  return true;
}

void ComPair::Swap(ComPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPair_descriptor_;
  metadata.reflection = ComPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPair64::kKeyFieldNumber;
const int ComPair64::kValueFieldNumber;
#endif  // !_MSC_VER

ComPair64::ComPair64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPair64::InitAsDefaultInstance() {
}

ComPair64::ComPair64(const ComPair64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPair64::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPair64::~ComPair64() {
  SharedDtor();
}

void ComPair64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPair64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPair64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPair64_descriptor_;
}

const ComPair64& ComPair64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPair64* ComPair64::default_instance_ = NULL;

ComPair64* ComPair64::New() const {
  return new ComPair64;
}

void ComPair64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPair64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPair64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPair64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPair64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPair64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPair64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPair64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPair64::MergeFrom(const ComPair64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPair64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPair64::CopyFrom(const ComPair64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPair64::IsInitialized() const {

  return true;
}

void ComPair64::Swap(ComPair64* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPair64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPair64_descriptor_;
  metadata.reflection = ComPair64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPairBool::kKeyFieldNumber;
const int ComPairBool::kValueFieldNumber;
#endif  // !_MSC_VER

ComPairBool::ComPairBool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPairBool::InitAsDefaultInstance() {
}

ComPairBool::ComPairBool(const ComPairBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPairBool::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPairBool::~ComPairBool() {
  SharedDtor();
}

void ComPairBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPairBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPairBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPairBool_descriptor_;
}

const ComPairBool& ComPairBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPairBool* ComPairBool::default_instance_ = NULL;

ComPairBool* ComPairBool::New() const {
  return new ComPairBool;
}

void ComPairBool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPairBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPairBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional bool value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPairBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional bool value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPairBool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPairBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPairBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPairBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPairBool::MergeFrom(const ComPairBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPairBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPairBool::CopyFrom(const ComPairBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPairBool::IsInitialized() const {

  return true;
}

void ComPairBool::Swap(ComPairBool* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPairBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPairBool_descriptor_;
  metadata.reflection = ComPairBool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComItem::kItemIdFieldNumber;
const int ComItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

ComItem::ComItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComItem::InitAsDefaultInstance() {
}

ComItem::ComItem(const ComItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComItem::~ComItem() {
  SharedDtor();
}

void ComItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComItem_descriptor_;
}

const ComItem& ComItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComItem* ComItem::default_instance_ = NULL;

ComItem* ComItem::New() const {
  return new ComItem;
}

void ComItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    item_num_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional uint64 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint64 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint64 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint64 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComItem::MergeFrom(const ComItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComItem::CopyFrom(const ComItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComItem::IsInitialized() const {

  return true;
}

void ComItem::Swap(ComItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComItem_descriptor_;
  metadata.reflection = ComItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComItemWithType::kItemIdFieldNumber;
const int ComItemWithType::kItemNumFieldNumber;
const int ComItemWithType::kTypeFieldNumber;
#endif  // !_MSC_VER

ComItemWithType::ComItemWithType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComItemWithType::InitAsDefaultInstance() {
}

ComItemWithType::ComItemWithType(const ComItemWithType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComItemWithType::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_num_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComItemWithType::~ComItemWithType() {
  SharedDtor();
}

void ComItemWithType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComItemWithType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComItemWithType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComItemWithType_descriptor_;
}

const ComItemWithType& ComItemWithType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComItemWithType* ComItemWithType::default_instance_ = NULL;

ComItemWithType* ComItemWithType::New() const {
  return new ComItemWithType;
}

void ComItemWithType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    item_num_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComItemWithType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional uint64 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComItemWithType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint64 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_num(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComItemWithType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint64 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_num(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComItemWithType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint64 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_num());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComItemWithType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComItemWithType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComItemWithType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComItemWithType::MergeFrom(const ComItemWithType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComItemWithType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComItemWithType::CopyFrom(const ComItemWithType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComItemWithType::IsInitialized() const {

  return true;
}

void ComItemWithType::Swap(ComItemWithType* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComItemWithType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComItemWithType_descriptor_;
  metadata.reflection = ComItemWithType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3PB::kXFieldNumber;
const int Vector3PB::kYFieldNumber;
const int Vector3PB::kZFieldNumber;
#endif  // !_MSC_VER

Vector3PB::Vector3PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3PB::InitAsDefaultInstance() {
}

Vector3PB::Vector3PB(const Vector3PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3PB::~Vector3PB() {
  SharedDtor();
}

void Vector3PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3PB_descriptor_;
}

const Vector3PB& Vector3PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Vector3PB* Vector3PB::default_instance_ = NULL;

Vector3PB* Vector3PB::New() const {
  return new Vector3PB;
}

void Vector3PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3PB::MergeFrom(const Vector3PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3PB::CopyFrom(const Vector3PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3PB::Swap(Vector3PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3PB_descriptor_;
  metadata.reflection = Vector3PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2PB::kXFieldNumber;
const int Vector2PB::kYFieldNumber;
#endif  // !_MSC_VER

Vector2PB::Vector2PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector2PB::InitAsDefaultInstance() {
}

Vector2PB::Vector2PB(const Vector2PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector2PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2PB::~Vector2PB() {
  SharedDtor();
}

void Vector2PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2PB_descriptor_;
}

const Vector2PB& Vector2PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Vector2PB* Vector2PB::default_instance_ = NULL;

Vector2PB* Vector2PB::New() const {
  return new Vector2PB;
}

void Vector2PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector2PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector2PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector2PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2PB::MergeFrom(const Vector2PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2PB::CopyFrom(const Vector2PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Vector2PB::Swap(Vector2PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2PB_descriptor_;
  metadata.reflection = Vector2PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr64::kIdFieldNumber;
const int Attr64::kValueFieldNumber;
#endif  // !_MSC_VER

Attr64::Attr64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attr64::InitAsDefaultInstance() {
}

Attr64::Attr64(const Attr64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attr64::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr64::~Attr64() {
  SharedDtor();
}

void Attr64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr64_descriptor_;
}

const Attr64& Attr64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Attr64* Attr64::default_instance_ = NULL;

Attr64* Attr64::New() const {
  return new Attr64;
}

void Attr64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attr64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attr64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attr64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr64::MergeFrom(const Attr64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr64::CopyFrom(const Attr64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Attr64::Swap(Attr64* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr64_descriptor_;
  metadata.reflection = Attr64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UserLoginExternalData::kAreadIdFieldNumber;
const int Proto_UserLoginExternalData::kAgentIdFieldNumber;
const int Proto_UserLoginExternalData::kChannelIdFieldNumber;
const int Proto_UserLoginExternalData::kReferralCodeFieldNumber;
const int Proto_UserLoginExternalData::kPlatformOsFieldNumber;
const int Proto_UserLoginExternalData::kCountryFieldNumber;
const int Proto_UserLoginExternalData::kProvinceFieldNumber;
const int Proto_UserLoginExternalData::kCityFieldNumber;
const int Proto_UserLoginExternalData::kPhoneModeFieldNumber;
const int Proto_UserLoginExternalData::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

Proto_UserLoginExternalData::Proto_UserLoginExternalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UserLoginExternalData::InitAsDefaultInstance() {
}

Proto_UserLoginExternalData::Proto_UserLoginExternalData(const Proto_UserLoginExternalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UserLoginExternalData::SharedCtor() {
  _cached_size_ = 0;
  aread_id_ = 0u;
  agent_id_ = 0u;
  channel_id_ = 0u;
  referral_code_ = GOOGLE_ULONGLONG(0);
  platform_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UserLoginExternalData::~Proto_UserLoginExternalData() {
  SharedDtor();
}

void Proto_UserLoginExternalData::SharedDtor() {
  if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_os_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (phone_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_mode_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_UserLoginExternalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UserLoginExternalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UserLoginExternalData_descriptor_;
}

const Proto_UserLoginExternalData& Proto_UserLoginExternalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Proto_UserLoginExternalData* Proto_UserLoginExternalData::default_instance_ = NULL;

Proto_UserLoginExternalData* Proto_UserLoginExternalData::New() const {
  return new Proto_UserLoginExternalData;
}

void Proto_UserLoginExternalData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aread_id_ = 0u;
    agent_id_ = 0u;
    channel_id_ = 0u;
    referral_code_ = GOOGLE_ULONGLONG(0);
    if (has_platform_os()) {
      if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
        platform_os_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::kEmptyString) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_phone_mode()) {
      if (phone_mode_ != &::google::protobuf::internal::kEmptyString) {
        phone_mode_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UserLoginExternalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 aread_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aread_id_)));
          set_has_aread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agent_id;
        break;
      }

      // optional uint32 agent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_referral_code;
        break;
      }

      // optional uint64 referral_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referral_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &referral_code_)));
          set_has_referral_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform_os;
        break;
      }

      // optional string platform_os = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform_os().data(), this->platform_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_country;
        break;
      }

      // optional string country = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_province;
        break;
      }

      // optional string province = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_city;
        break;
      }

      // optional string city = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_phone_mode;
        break;
      }

      // optional string phone_mode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_mode().data(), this->phone_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_device_id;
        break;
      }

      // optional string device_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UserLoginExternalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 aread_id = 1;
  if (has_aread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aread_id(), output);
  }

  // optional uint32 agent_id = 2;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agent_id(), output);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // optional uint64 referral_code = 4;
  if (has_referral_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->referral_code(), output);
  }

  // optional string platform_os = 5;
  if (has_platform_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_os().data(), this->platform_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platform_os(), output);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->country(), output);
  }

  // optional string province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->province(), output);
  }

  // optional string city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->city(), output);
  }

  // optional string phone_mode = 9;
  if (has_phone_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_mode().data(), this->phone_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->phone_mode(), output);
  }

  // optional string device_id = 10;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UserLoginExternalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 aread_id = 1;
  if (has_aread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aread_id(), target);
  }

  // optional uint32 agent_id = 2;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agent_id(), target);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // optional uint64 referral_code = 4;
  if (has_referral_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->referral_code(), target);
  }

  // optional string platform_os = 5;
  if (has_platform_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_os().data(), this->platform_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform_os(), target);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country(), target);
  }

  // optional string province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->province(), target);
  }

  // optional string city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->city(), target);
  }

  // optional string phone_mode = 9;
  if (has_phone_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_mode().data(), this->phone_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->phone_mode(), target);
  }

  // optional string device_id = 10;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UserLoginExternalData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 aread_id = 1;
    if (has_aread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aread_id());
    }

    // optional uint32 agent_id = 2;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agent_id());
    }

    // optional uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint64 referral_code = 4;
    if (has_referral_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->referral_code());
    }

    // optional string platform_os = 5;
    if (has_platform_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_os());
    }

    // optional string country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string province = 7;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 8;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string phone_mode = 9;
    if (has_phone_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_mode());
    }

    // optional string device_id = 10;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UserLoginExternalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UserLoginExternalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UserLoginExternalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UserLoginExternalData::MergeFrom(const Proto_UserLoginExternalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aread_id()) {
      set_aread_id(from.aread_id());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_referral_code()) {
      set_referral_code(from.referral_code());
    }
    if (from.has_platform_os()) {
      set_platform_os(from.platform_os());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phone_mode()) {
      set_phone_mode(from.phone_mode());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UserLoginExternalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UserLoginExternalData::CopyFrom(const Proto_UserLoginExternalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UserLoginExternalData::IsInitialized() const {

  return true;
}

void Proto_UserLoginExternalData::Swap(Proto_UserLoginExternalData* other) {
  if (other != this) {
    std::swap(aread_id_, other->aread_id_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(referral_code_, other->referral_code_);
    std::swap(platform_os_, other->platform_os_);
    std::swap(country_, other->country_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(phone_mode_, other->phone_mode_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UserLoginExternalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UserLoginExternalData_descriptor_;
  metadata.reflection = Proto_UserLoginExternalData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UserDetailCommonData::kNickNameFieldNumber;
const int Proto_UserDetailCommonData::kFaceIdFieldNumber;
const int Proto_UserDetailCommonData::kGenderFieldNumber;
const int Proto_UserDetailCommonData::kJettonFieldNumber;
const int Proto_UserDetailCommonData::kBankJettonFieldNumber;
const int Proto_UserDetailCommonData::kAgentIdFieldNumber;
const int Proto_UserDetailCommonData::kPhonenumFieldNumber;
#endif  // !_MSC_VER

Proto_UserDetailCommonData::Proto_UserDetailCommonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UserDetailCommonData::InitAsDefaultInstance() {
}

Proto_UserDetailCommonData::Proto_UserDetailCommonData(const Proto_UserDetailCommonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UserDetailCommonData::SharedCtor() {
  _cached_size_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_id_ = 0u;
  gender_ = 0u;
  jetton_ = GOOGLE_ULONGLONG(0);
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  agent_id_ = GOOGLE_ULONGLONG(0);
  phonenum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UserDetailCommonData::~Proto_UserDetailCommonData() {
  SharedDtor();
}

void Proto_UserDetailCommonData::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_UserDetailCommonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UserDetailCommonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UserDetailCommonData_descriptor_;
}

const Proto_UserDetailCommonData& Proto_UserDetailCommonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Proto_UserDetailCommonData* Proto_UserDetailCommonData::default_instance_ = NULL;

Proto_UserDetailCommonData* Proto_UserDetailCommonData::New() const {
  return new Proto_UserDetailCommonData;
}

void Proto_UserDetailCommonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    face_id_ = 0u;
    gender_ = 0u;
    jetton_ = GOOGLE_ULONGLONG(0);
    bank_jetton_ = GOOGLE_ULONGLONG(0);
    agent_id_ = GOOGLE_ULONGLONG(0);
    phonenum_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UserDetailCommonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nick_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face_id;
        break;
      }

      // optional uint32 face_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jetton;
        break;
      }

      // optional uint64 jetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bank_jetton;
        break;
      }

      // optional uint64 bank_jetton = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_jetton_)));
          set_has_bank_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agent_id;
        break;
      }

      // optional uint64 agent_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_phonenum;
        break;
      }

      // optional uint64 phonenum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phonenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UserDetailCommonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nick_name = 1;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nick_name(), output);
  }

  // optional uint32 face_id = 2;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->face_id(), output);
  }

  // optional uint32 gender = 3;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gender(), output);
  }

  // optional uint64 jetton = 4;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->jetton(), output);
  }

  // optional uint64 bank_jetton = 5;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bank_jetton(), output);
  }

  // optional uint64 agent_id = 6;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->agent_id(), output);
  }

  // optional uint64 phonenum = 7;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->phonenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UserDetailCommonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nick_name = 1;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nick_name(), target);
  }

  // optional uint32 face_id = 2;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->face_id(), target);
  }

  // optional uint32 gender = 3;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gender(), target);
  }

  // optional uint64 jetton = 4;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->jetton(), target);
  }

  // optional uint64 bank_jetton = 5;
  if (has_bank_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bank_jetton(), target);
  }

  // optional uint64 agent_id = 6;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->agent_id(), target);
  }

  // optional uint64 phonenum = 7;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->phonenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UserDetailCommonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nick_name = 1;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 face_id = 2;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_id());
    }

    // optional uint32 gender = 3;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint64 jetton = 4;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton());
    }

    // optional uint64 bank_jetton = 5;
    if (has_bank_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_jetton());
    }

    // optional uint64 agent_id = 6;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->agent_id());
    }

    // optional uint64 phonenum = 7;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phonenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UserDetailCommonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UserDetailCommonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UserDetailCommonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UserDetailCommonData::MergeFrom(const Proto_UserDetailCommonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UserDetailCommonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UserDetailCommonData::CopyFrom(const Proto_UserDetailCommonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UserDetailCommonData::IsInitialized() const {

  return true;
}

void Proto_UserDetailCommonData::Swap(Proto_UserDetailCommonData* other) {
  if (other != this) {
    std::swap(nick_name_, other->nick_name_);
    std::swap(face_id_, other->face_id_);
    std::swap(gender_, other->gender_);
    std::swap(jetton_, other->jetton_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UserDetailCommonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UserDetailCommonData_descriptor_;
  metadata.reflection = Proto_UserDetailCommonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSSyncData::kCreatePlayerDbDataFieldNumber;
const int Proto_LTSSyncData::kNickNameFieldNumber;
const int Proto_LTSSyncData::kFaceIdFieldNumber;
#endif  // !_MSC_VER

Proto_LTSSyncData::Proto_LTSSyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSSyncData::InitAsDefaultInstance() {
}

Proto_LTSSyncData::Proto_LTSSyncData(const Proto_LTSSyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSSyncData::SharedCtor() {
  _cached_size_ = 0;
  create_player_db_data_ = false;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSSyncData::~Proto_LTSSyncData() {
  SharedDtor();
}

void Proto_LTSSyncData::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_LTSSyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSSyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSSyncData_descriptor_;
}

const Proto_LTSSyncData& Proto_LTSSyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Proto_LTSSyncData* Proto_LTSSyncData::default_instance_ = NULL;

Proto_LTSSyncData* Proto_LTSSyncData::New() const {
  return new Proto_LTSSyncData;
}

void Proto_LTSSyncData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    create_player_db_data_ = false;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    face_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSSyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool create_player_db_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_player_db_data_)));
          set_has_create_player_db_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_id;
        break;
      }

      // optional uint32 face_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSSyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool create_player_db_data = 1;
  if (has_create_player_db_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->create_player_db_data(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional uint32 face_id = 3;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSSyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool create_player_db_data = 1;
  if (has_create_player_db_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->create_player_db_data(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint32 face_id = 3;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSSyncData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool create_player_db_data = 1;
    if (has_create_player_db_data()) {
      total_size += 1 + 1;
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 face_id = 3;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSSyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSSyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSSyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSSyncData::MergeFrom(const Proto_LTSSyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_player_db_data()) {
      set_create_player_db_data(from.create_player_db_data());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSSyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSSyncData::CopyFrom(const Proto_LTSSyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSSyncData::IsInitialized() const {

  return true;
}

void Proto_LTSSyncData::Swap(Proto_LTSSyncData* other) {
  if (other != this) {
    std::swap(create_player_db_data_, other->create_player_db_data_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSSyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSSyncData_descriptor_;
  metadata.reflection = Proto_LTSSyncData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbGiveBankJetton::kIdFieldNumber;
const int tbGiveBankJetton::kUserIdFieldNumber;
const int tbGiveBankJetton::kUserNameFieldNumber;
const int tbGiveBankJetton::kGiveUserIdFieldNumber;
const int tbGiveBankJetton::kGiveUserNameFieldNumber;
const int tbGiveBankJetton::kGiveJettonFieldNumber;
const int tbGiveBankJetton::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

tbGiveBankJetton::tbGiveBankJetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbGiveBankJetton::InitAsDefaultInstance() {
}

tbGiveBankJetton::tbGiveBankJetton(const tbGiveBankJetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbGiveBankJetton::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  give_user_id_ = GOOGLE_ULONGLONG(0);
  give_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  give_jetton_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbGiveBankJetton::~tbGiveBankJetton() {
  SharedDtor();
}

void tbGiveBankJetton::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (give_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete give_user_name_;
  }
  if (this != default_instance_) {
  }
}

void tbGiveBankJetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbGiveBankJetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbGiveBankJetton_descriptor_;
}

const tbGiveBankJetton& tbGiveBankJetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

tbGiveBankJetton* tbGiveBankJetton::default_instance_ = NULL;

tbGiveBankJetton* tbGiveBankJetton::New() const {
  return new tbGiveBankJetton;
}

void tbGiveBankJetton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    give_user_id_ = GOOGLE_ULONGLONG(0);
    if (has_give_user_name()) {
      if (give_user_name_ != &::google::protobuf::internal::kEmptyString) {
        give_user_name_->clear();
      }
    }
    give_jetton_ = GOOGLE_ULONGLONG(0);
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbGiveBankJetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_give_user_id;
        break;
      }

      // optional uint64 give_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &give_user_id_)));
          set_has_give_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_give_user_name;
        break;
      }

      // optional string give_user_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_give_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_give_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->give_user_name().data(), this->give_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_give_jetton;
        break;
      }

      // optional uint64 give_jetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &give_jetton_)));
          set_has_give_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbGiveBankJetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional uint64 give_user_id = 4;
  if (has_give_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->give_user_id(), output);
  }

  // optional string give_user_name = 5;
  if (has_give_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->give_user_name().data(), this->give_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->give_user_name(), output);
  }

  // optional uint64 give_jetton = 6;
  if (has_give_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->give_jetton(), output);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbGiveBankJetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional uint64 give_user_id = 4;
  if (has_give_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->give_user_id(), target);
  }

  // optional string give_user_name = 5;
  if (has_give_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->give_user_name().data(), this->give_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->give_user_name(), target);
  }

  // optional uint64 give_jetton = 6;
  if (has_give_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->give_jetton(), target);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbGiveBankJetton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint64 give_user_id = 4;
    if (has_give_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->give_user_id());
    }

    // optional string give_user_name = 5;
    if (has_give_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->give_user_name());
    }

    // optional uint64 give_jetton = 6;
    if (has_give_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->give_jetton());
    }

    // optional uint64 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbGiveBankJetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbGiveBankJetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbGiveBankJetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbGiveBankJetton::MergeFrom(const tbGiveBankJetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_give_user_id()) {
      set_give_user_id(from.give_user_id());
    }
    if (from.has_give_user_name()) {
      set_give_user_name(from.give_user_name());
    }
    if (from.has_give_jetton()) {
      set_give_jetton(from.give_jetton());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbGiveBankJetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbGiveBankJetton::CopyFrom(const tbGiveBankJetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbGiveBankJetton::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tbGiveBankJetton::Swap(tbGiveBankJetton* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(give_user_id_, other->give_user_id_);
    std::swap(give_user_name_, other->give_user_name_);
    std::swap(give_jetton_, other->give_jetton_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbGiveBankJetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbGiveBankJetton_descriptor_;
  metadata.reflection = tbGiveBankJetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UserSimpleData::kUseridFieldNumber;
const int Proto_UserSimpleData::kNicknameFieldNumber;
const int Proto_UserSimpleData::kFaceFieldNumber;
const int Proto_UserSimpleData::kGenderFieldNumber;
const int Proto_UserSimpleData::kAgeFieldNumber;
#endif  // !_MSC_VER

Proto_UserSimpleData::Proto_UserSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UserSimpleData::InitAsDefaultInstance() {
}

Proto_UserSimpleData::Proto_UserSimpleData(const Proto_UserSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UserSimpleData::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = 0u;
  gender_ = 0u;
  age_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UserSimpleData::~Proto_UserSimpleData() {
  SharedDtor();
}

void Proto_UserSimpleData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void Proto_UserSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UserSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UserSimpleData_descriptor_;
}

const Proto_UserSimpleData& Proto_UserSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Proto_UserSimpleData* Proto_UserSimpleData::default_instance_ = NULL;

Proto_UserSimpleData* Proto_UserSimpleData::New() const {
  return new Proto_UserSimpleData;
}

void Proto_UserSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    face_ = 0u;
    gender_ = 0u;
    age_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UserSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face;
        break;
      }

      // optional uint32 face = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_age;
        break;
      }

      // optional uint32 age = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UserSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->face(), output);
  }

  // optional uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }

  // optional uint32 age = 5;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UserSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 face = 3;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->face(), target);
  }

  // optional uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }

  // optional uint32 age = 5;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UserSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 face = 3;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UserSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UserSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UserSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UserSimpleData::MergeFrom(const Proto_UserSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UserSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UserSimpleData::CopyFrom(const Proto_UserSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UserSimpleData::IsInitialized() const {

  return true;
}

void Proto_UserSimpleData::Swap(Proto_UserSimpleData* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(face_, other->face_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UserSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UserSimpleData_descriptor_;
  metadata.reflection = Proto_UserSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerDetailData::kPlayerIdFieldNumber;
const int GamePlayerDetailData::kCurMoneyFieldNumber;
const int GamePlayerDetailData::kVipLevelFieldNumber;
const int GamePlayerDetailData::kSexFieldNumber;
const int GamePlayerDetailData::kChairIdFieldNumber;
const int GamePlayerDetailData::kNickNameFieldNumber;
const int GamePlayerDetailData::kFaceFieldNumber;
const int GamePlayerDetailData::kIsRobotFieldNumber;
#endif  // !_MSC_VER

GamePlayerDetailData::GamePlayerDetailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerDetailData::InitAsDefaultInstance() {
}

GamePlayerDetailData::GamePlayerDetailData(const GamePlayerDetailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerDetailData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  cur_money_ = GOOGLE_LONGLONG(0);
  vip_level_ = 0u;
  sex_ = 0u;
  chair_id_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = 0u;
  isrobot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerDetailData::~GamePlayerDetailData() {
  SharedDtor();
}

void GamePlayerDetailData::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void GamePlayerDetailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerDetailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerDetailData_descriptor_;
}

const GamePlayerDetailData& GamePlayerDetailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GamePlayerDetailData* GamePlayerDetailData::default_instance_ = NULL;

GamePlayerDetailData* GamePlayerDetailData::New() const {
  return new GamePlayerDetailData;
}

void GamePlayerDetailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    cur_money_ = GOOGLE_LONGLONG(0);
    vip_level_ = 0u;
    sex_ = 0u;
    chair_id_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    face_ = 0u;
    isrobot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerDetailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_money;
        break;
      }

      // optional int64 cur_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chair_id;
        break;
      }

      // optional int32 chair_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_face;
        break;
      }

      // optional uint32 face = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isRobot;
        break;
      }

      // optional bool isRobot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerDetailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional int64 cur_money = 2;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cur_money(), output);
  }

  // optional uint32 vip_level = 3;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip_level(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional int32 chair_id = 5;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chair_id(), output);
  }

  // optional string nick_name = 6;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nick_name(), output);
  }

  // optional uint32 face = 7;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->face(), output);
  }

  // optional bool isRobot = 8;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isrobot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerDetailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional int64 cur_money = 2;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cur_money(), target);
  }

  // optional uint32 vip_level = 3;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vip_level(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional int32 chair_id = 5;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chair_id(), target);
  }

  // optional string nick_name = 6;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nick_name(), target);
  }

  // optional uint32 face = 7;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->face(), target);
  }

  // optional bool isRobot = 8;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isrobot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerDetailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional int64 cur_money = 2;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_money());
    }

    // optional uint32 vip_level = 3;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional int32 chair_id = 5;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional string nick_name = 6;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 face = 7;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional bool isRobot = 8;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerDetailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerDetailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerDetailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerDetailData::MergeFrom(const GamePlayerDetailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerDetailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerDetailData::CopyFrom(const GamePlayerDetailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerDetailData::IsInitialized() const {

  return true;
}

void GamePlayerDetailData::Swap(GamePlayerDetailData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(cur_money_, other->cur_money_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(sex_, other->sex_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(face_, other->face_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerDetailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerDetailData_descriptor_;
  metadata.reflection = GamePlayerDetailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerWealthData::kPlayerIdFieldNumber;
const int GamePlayerWealthData::kRechargeFieldNumber;
const int GamePlayerWealthData::kTotalLostFieldNumber;
const int GamePlayerWealthData::kTotalWinFieldNumber;
const int GamePlayerWealthData::kThisGameLostFieldNumber;
const int GamePlayerWealthData::kThisGameWinFieldNumber;
#endif  // !_MSC_VER

GamePlayerWealthData::GamePlayerWealthData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerWealthData::InitAsDefaultInstance() {
}

GamePlayerWealthData::GamePlayerWealthData(const GamePlayerWealthData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerWealthData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  recharge_ = GOOGLE_LONGLONG(0);
  total_lost_ = GOOGLE_LONGLONG(0);
  total_win_ = GOOGLE_LONGLONG(0);
  this_game_lost_ = GOOGLE_LONGLONG(0);
  this_game_win_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerWealthData::~GamePlayerWealthData() {
  SharedDtor();
}

void GamePlayerWealthData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerWealthData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerWealthData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerWealthData_descriptor_;
}

const GamePlayerWealthData& GamePlayerWealthData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GamePlayerWealthData* GamePlayerWealthData::default_instance_ = NULL;

GamePlayerWealthData* GamePlayerWealthData::New() const {
  return new GamePlayerWealthData;
}

void GamePlayerWealthData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    recharge_ = GOOGLE_LONGLONG(0);
    total_lost_ = GOOGLE_LONGLONG(0);
    total_win_ = GOOGLE_LONGLONG(0);
    this_game_lost_ = GOOGLE_LONGLONG(0);
    this_game_win_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerWealthData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recharge;
        break;
      }

      // optional int64 recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_lost;
        break;
      }

      // optional int64 total_lost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_lost_)));
          set_has_total_lost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_win;
        break;
      }

      // optional int64 total_win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_win_)));
          set_has_total_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_this_game_lost;
        break;
      }

      // optional int64 this_game_lost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_this_game_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &this_game_lost_)));
          set_has_this_game_lost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_this_game_win;
        break;
      }

      // optional int64 this_game_win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_this_game_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &this_game_win_)));
          set_has_this_game_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerWealthData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional int64 recharge = 2;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recharge(), output);
  }

  // optional int64 total_lost = 3;
  if (has_total_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_lost(), output);
  }

  // optional int64 total_win = 4;
  if (has_total_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_win(), output);
  }

  // optional int64 this_game_lost = 5;
  if (has_this_game_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->this_game_lost(), output);
  }

  // optional int64 this_game_win = 6;
  if (has_this_game_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->this_game_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerWealthData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional int64 recharge = 2;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recharge(), target);
  }

  // optional int64 total_lost = 3;
  if (has_total_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_lost(), target);
  }

  // optional int64 total_win = 4;
  if (has_total_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_win(), target);
  }

  // optional int64 this_game_lost = 5;
  if (has_this_game_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->this_game_lost(), target);
  }

  // optional int64 this_game_win = 6;
  if (has_this_game_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->this_game_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerWealthData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional int64 recharge = 2;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recharge());
    }

    // optional int64 total_lost = 3;
    if (has_total_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_lost());
    }

    // optional int64 total_win = 4;
    if (has_total_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_win());
    }

    // optional int64 this_game_lost = 5;
    if (has_this_game_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->this_game_lost());
    }

    // optional int64 this_game_win = 6;
    if (has_this_game_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->this_game_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerWealthData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerWealthData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerWealthData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerWealthData::MergeFrom(const GamePlayerWealthData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
    if (from.has_total_lost()) {
      set_total_lost(from.total_lost());
    }
    if (from.has_total_win()) {
      set_total_win(from.total_win());
    }
    if (from.has_this_game_lost()) {
      set_this_game_lost(from.this_game_lost());
    }
    if (from.has_this_game_win()) {
      set_this_game_win(from.this_game_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerWealthData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerWealthData::CopyFrom(const GamePlayerWealthData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerWealthData::IsInitialized() const {

  return true;
}

void GamePlayerWealthData::Swap(GamePlayerWealthData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(recharge_, other->recharge_);
    std::swap(total_lost_, other->total_lost_);
    std::swap(total_win_, other->total_win_);
    std::swap(this_game_lost_, other->this_game_lost_);
    std::swap(this_game_win_, other->this_game_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerWealthData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerWealthData_descriptor_;
  metadata.reflection = GamePlayerWealthData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerAchievementData::kCurAchFieldNumber;
const int GamePlayerAchievementData::kCurFeeFieldNumber;
#endif  // !_MSC_VER

GamePlayerAchievementData::GamePlayerAchievementData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerAchievementData::InitAsDefaultInstance() {
}

GamePlayerAchievementData::GamePlayerAchievementData(const GamePlayerAchievementData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerAchievementData::SharedCtor() {
  _cached_size_ = 0;
  cur_ach_ = GOOGLE_ULONGLONG(0);
  cur_fee_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerAchievementData::~GamePlayerAchievementData() {
  SharedDtor();
}

void GamePlayerAchievementData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerAchievementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerAchievementData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerAchievementData_descriptor_;
}

const GamePlayerAchievementData& GamePlayerAchievementData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GamePlayerAchievementData* GamePlayerAchievementData::default_instance_ = NULL;

GamePlayerAchievementData* GamePlayerAchievementData::New() const {
  return new GamePlayerAchievementData;
}

void GamePlayerAchievementData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_ach_ = GOOGLE_ULONGLONG(0);
    cur_fee_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerAchievementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cur_ach = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_ach_)));
          set_has_cur_ach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_fee;
        break;
      }

      // optional uint64 cur_fee = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_fee_)));
          set_has_cur_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerAchievementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cur_ach = 2;
  if (has_cur_ach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_ach(), output);
  }

  // optional uint64 cur_fee = 3;
  if (has_cur_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_fee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerAchievementData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cur_ach = 2;
  if (has_cur_ach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_ach(), target);
  }

  // optional uint64 cur_fee = 3;
  if (has_cur_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_fee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerAchievementData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cur_ach = 2;
    if (has_cur_ach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_ach());
    }

    // optional uint64 cur_fee = 3;
    if (has_cur_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_fee());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerAchievementData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerAchievementData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerAchievementData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerAchievementData::MergeFrom(const GamePlayerAchievementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_ach()) {
      set_cur_ach(from.cur_ach());
    }
    if (from.has_cur_fee()) {
      set_cur_fee(from.cur_fee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerAchievementData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerAchievementData::CopyFrom(const GamePlayerAchievementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerAchievementData::IsInitialized() const {

  return true;
}

void GamePlayerAchievementData::Swap(GamePlayerAchievementData* other) {
  if (other != this) {
    std::swap(cur_ach_, other->cur_ach_);
    std::swap(cur_fee_, other->cur_fee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerAchievementData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerAchievementData_descriptor_;
  metadata.reflection = GamePlayerAchievementData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomStat::kCurFeeFieldNumber;
const int GameRoomStat::kCurPourFieldNumber;
const int GameRoomStat::kCurWinFieldNumber;
#endif  // !_MSC_VER

GameRoomStat::GameRoomStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomStat::InitAsDefaultInstance() {
}

GameRoomStat::GameRoomStat(const GameRoomStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomStat::SharedCtor() {
  _cached_size_ = 0;
  cur_fee_ = GOOGLE_ULONGLONG(0);
  cur_pour_ = GOOGLE_ULONGLONG(0);
  cur_win_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomStat::~GameRoomStat() {
  SharedDtor();
}

void GameRoomStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRoomStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomStat_descriptor_;
}

const GameRoomStat& GameRoomStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GameRoomStat* GameRoomStat::default_instance_ = NULL;

GameRoomStat* GameRoomStat::New() const {
  return new GameRoomStat;
}

void GameRoomStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_fee_ = GOOGLE_ULONGLONG(0);
    cur_pour_ = GOOGLE_ULONGLONG(0);
    cur_win_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cur_fee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_fee_)));
          set_has_cur_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_pour;
        break;
      }

      // optional uint64 cur_pour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_pour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_pour_)));
          set_has_cur_pour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_win;
        break;
      }

      // optional int64 cur_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_win_)));
          set_has_cur_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cur_fee = 1;
  if (has_cur_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cur_fee(), output);
  }

  // optional uint64 cur_pour = 2;
  if (has_cur_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_pour(), output);
  }

  // optional int64 cur_win = 3;
  if (has_cur_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cur_fee = 1;
  if (has_cur_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cur_fee(), target);
  }

  // optional uint64 cur_pour = 2;
  if (has_cur_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_pour(), target);
  }

  // optional int64 cur_win = 3;
  if (has_cur_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cur_fee = 1;
    if (has_cur_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_fee());
    }

    // optional uint64 cur_pour = 2;
    if (has_cur_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_pour());
    }

    // optional int64 cur_win = 3;
    if (has_cur_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomStat::MergeFrom(const GameRoomStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_fee()) {
      set_cur_fee(from.cur_fee());
    }
    if (from.has_cur_pour()) {
      set_cur_pour(from.cur_pour());
    }
    if (from.has_cur_win()) {
      set_cur_win(from.cur_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomStat::CopyFrom(const GameRoomStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomStat::IsInitialized() const {

  return true;
}

void GameRoomStat::Swap(GameRoomStat* other) {
  if (other != this) {
    std::swap(cur_fee_, other->cur_fee_);
    std::swap(cur_pour_, other->cur_pour_);
    std::swap(cur_win_, other->cur_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomStat_descriptor_;
  metadata.reflection = GameRoomStat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
