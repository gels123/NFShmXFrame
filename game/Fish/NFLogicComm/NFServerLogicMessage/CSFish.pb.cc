// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSFish.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSFish.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamefish {

namespace {

const ::google::protobuf::Descriptor* FishInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cgUserReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cgUserReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShootBulletReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShootBulletReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShootBulletRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShootBulletRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* cgBulletSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cgBulletSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcBulletSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcBulletSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* cgHitfish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cgHitfish_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcKillSubFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcKillSubFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillFishRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillFishRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* cgAutoShoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cgAutoShoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcAutoShoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcAutoShoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* cgLockOnOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cgLockOnOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcLockOnOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcLockOnOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* cgLockFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cgLockFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcLockFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcLockFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcUserEnterDesk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcUserEnterDesk_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcUserLeaveDesk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcUserLeaveDesk_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcUserDisconnectDesk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcUserDisconnectDesk_reflection_ = NULL;
const ::google::protobuf::Descriptor* CannonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CannonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* cgChangeCannon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cgChangeCannon_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcChangeCannon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcChangeCannon_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSceneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSceneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* gcUserMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gcUserMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_DoubleGunOnOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_DoubleGunOnOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PromptInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PromptInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateDianCiCannonRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateDianCiCannonRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DianCiCannonAimReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DianCiCannonAimReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DianCiCannonAimRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DianCiCannonAimRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DianCiCannonShootReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DianCiCannonShootReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DianCiCannonShootRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DianCiCannonShootRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DianCiCannonHitFishReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DianCiCannonHitFishReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DianCiCannonDestroyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DianCiCannonDestroyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateZuanTouRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateZuanTouRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZuanTouAimReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZuanTouAimReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZuanTouAimRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZuanTouAimRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZuanTouShootReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZuanTouShootReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZuanTouShootRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZuanTouShootRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZuanTouHitFishReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZuanTouHitFishReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZuanTouBombRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZuanTouBombRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SomeZuanTouInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SomeZuanTouInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSomeZuanTouRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSomeZuanTouRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SomeZuanTouShootRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SomeZuanTouShootRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SomeZuanTouHitFishReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SomeZuanTouHitFishReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SomeZuanTouBombRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SomeZuanTouBombRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateFireStormRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateFireStormRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestoryFireStormRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestoryFireStormRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FireStormStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FireStormStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FireStormScoreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FireStormScoreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMadCowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMadCowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestoryMadCowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestoryMadCowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MadCowStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MadCowStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MadCowScoreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MadCowScoreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSerialBombCrabRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSerialBombCrabRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerialBombCrabBombRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerialBombCrabBombRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestorySerialBombCrabRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestorySerialBombCrabRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaiWangCrabHitPartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaiWangCrabHitPartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrabPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrabPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaiWangCrabKilledPartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaiWangCrabKilledPartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaiWangCrabKilledDeadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaiWangCrabKilledDeadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateDelayBombRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateDelayBombRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelayBomb_Bomb_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelayBomb_Bomb_Rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSFish_2eproto() {
  protobuf_AddDesc_CSFish_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSFish.proto");
  GOOGLE_CHECK(file != NULL);
  FishInfo_descriptor_ = file->message_type(0);
  static const int FishInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usfishkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, subfishkinds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, ustraceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usstartindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usoffsetindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usoffsetposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usoffsetpoxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usbirthdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usisredfish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, usgroupid_),
  };
  FishInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishInfo_descriptor_,
      FishInfo::default_instance_,
      FishInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishInfo));
  FishList_descriptor_ = file->message_type(1);
  static const int FishList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishList, fishes_),
  };
  FishList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishList_descriptor_,
      FishList::default_instance_,
      FishList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishList));
  cgUserReady_descriptor_ = file->message_type(2);
  static const int cgUserReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgUserReady, usresvered_),
  };
  cgUserReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cgUserReady_descriptor_,
      cgUserReady::default_instance_,
      cgUserReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgUserReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgUserReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cgUserReady));
  ShootBulletReq_descriptor_ = file->message_type(3);
  static const int ShootBulletReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletReq, usbulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletReq, sangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletReq, bycannonlevelindex_),
  };
  ShootBulletReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShootBulletReq_descriptor_,
      ShootBulletReq::default_instance_,
      ShootBulletReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShootBulletReq));
  ShootBulletRsp_descriptor_ = file->message_type(4);
  static const int ShootBulletRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, usbulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, sangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, usspeedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, usintervalindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, uslevelindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, userrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, usprocuserchairid_),
  };
  ShootBulletRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShootBulletRsp_descriptor_,
      ShootBulletRsp::default_instance_,
      ShootBulletRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShootBulletRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShootBulletRsp));
  cgBulletSpeed_descriptor_ = file->message_type(5);
  static const int cgBulletSpeed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgBulletSpeed, usspeedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgBulletSpeed, usintervalindex_),
  };
  cgBulletSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cgBulletSpeed_descriptor_,
      cgBulletSpeed::default_instance_,
      cgBulletSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgBulletSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgBulletSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cgBulletSpeed));
  gcBulletSpeed_descriptor_ = file->message_type(6);
  static const int gcBulletSpeed_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcBulletSpeed, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcBulletSpeed, usspeedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcBulletSpeed, usintervalindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcBulletSpeed, userrorcode_),
  };
  gcBulletSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcBulletSpeed_descriptor_,
      gcBulletSpeed::default_instance_,
      gcBulletSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcBulletSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcBulletSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcBulletSpeed));
  gcStatus_descriptor_ = file->message_type(7);
  static const int gcStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcStatus, usstatus_),
  };
  gcStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcStatus_descriptor_,
      gcStatus::default_instance_,
      gcStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcStatus));
  cgHitfish_descriptor_ = file->message_type(8);
  static const int cgHitfish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgHitfish, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgHitfish, subfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgHitfish, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgHitfish, usrobotchairid_),
  };
  cgHitfish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cgHitfish_descriptor_,
      cgHitfish::default_instance_,
      cgHitfish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgHitfish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgHitfish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cgHitfish));
  gcKillSubFish_descriptor_ = file->message_type(9);
  static const int gcKillSubFish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcKillSubFish, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcKillSubFish, fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcKillSubFish, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcKillSubFish, score_),
  };
  gcKillSubFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcKillSubFish_descriptor_,
      gcKillSubFish::default_instance_,
      gcKillSubFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcKillSubFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcKillSubFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcKillSubFish));
  KillFishRsp_descriptor_ = file->message_type(10);
  static const int KillFishRsp_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, bombuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, mainfishuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, mainfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, mainfishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, mainmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, mainscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, totalratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, userrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, subfishcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, subfishes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, bombfishid_),
  };
  KillFishRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillFishRsp_descriptor_,
      KillFishRsp::default_instance_,
      KillFishRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillFishRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillFishRsp));
  cgAutoShoot_descriptor_ = file->message_type(11);
  static const int cgAutoShoot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgAutoShoot, onoff_),
  };
  cgAutoShoot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cgAutoShoot_descriptor_,
      cgAutoShoot::default_instance_,
      cgAutoShoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgAutoShoot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgAutoShoot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cgAutoShoot));
  gcAutoShoot_descriptor_ = file->message_type(12);
  static const int gcAutoShoot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcAutoShoot, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcAutoShoot, onoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcAutoShoot, userrorcode_),
  };
  gcAutoShoot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcAutoShoot_descriptor_,
      gcAutoShoot::default_instance_,
      gcAutoShoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcAutoShoot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcAutoShoot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcAutoShoot));
  cgLockOnOff_descriptor_ = file->message_type(13);
  static const int cgLockOnOff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgLockOnOff, onoff_),
  };
  cgLockOnOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cgLockOnOff_descriptor_,
      cgLockOnOff::default_instance_,
      cgLockOnOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgLockOnOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgLockOnOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cgLockOnOff));
  gcLockOnOff_descriptor_ = file->message_type(14);
  static const int gcLockOnOff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockOnOff, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockOnOff, onoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockOnOff, userrorcode_),
  };
  gcLockOnOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcLockOnOff_descriptor_,
      gcLockOnOff::default_instance_,
      gcLockOnOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockOnOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockOnOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcLockOnOff));
  cgLockFish_descriptor_ = file->message_type(15);
  static const int cgLockFish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgLockFish, fishid_),
  };
  cgLockFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cgLockFish_descriptor_,
      cgLockFish::default_instance_,
      cgLockFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgLockFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgLockFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cgLockFish));
  gcLockFish_descriptor_ = file->message_type(16);
  static const int gcLockFish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockFish, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockFish, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockFish, userrorcode_),
  };
  gcLockFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcLockFish_descriptor_,
      gcLockFish::default_instance_,
      gcLockFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcLockFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcLockFish));
  UserInfo_descriptor_ = file->message_type(17);
  static const int UserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, cannon_id_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  UserStatus_descriptor_ = file->message_type(18);
  static const int UserStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, lockfish_onoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, lockfish_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, autoshoot_onoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, bullet_speedlev_),
  };
  UserStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatus_descriptor_,
      UserStatus::default_instance_,
      UserStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatus));
  UserStatusReq_descriptor_ = file->message_type(19);
  static const int UserStatusReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusReq, reserved_),
  };
  UserStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatusReq_descriptor_,
      UserStatusReq::default_instance_,
      UserStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatusReq));
  UserStatusRsp_descriptor_ = file->message_type(20);
  static const int UserStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusRsp, userstatuslist_),
  };
  UserStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatusRsp_descriptor_,
      UserStatusRsp::default_instance_,
      UserStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatusRsp));
  gcUserEnterDesk_descriptor_ = file->message_type(21);
  static const int gcUserEnterDesk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserEnterDesk, userinfo_),
  };
  gcUserEnterDesk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcUserEnterDesk_descriptor_,
      gcUserEnterDesk::default_instance_,
      gcUserEnterDesk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserEnterDesk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserEnterDesk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcUserEnterDesk));
  gcUserLeaveDesk_descriptor_ = file->message_type(22);
  static const int gcUserLeaveDesk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserLeaveDesk, chair_id_),
  };
  gcUserLeaveDesk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcUserLeaveDesk_descriptor_,
      gcUserLeaveDesk::default_instance_,
      gcUserLeaveDesk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserLeaveDesk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserLeaveDesk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcUserLeaveDesk));
  gcUserDisconnectDesk_descriptor_ = file->message_type(23);
  static const int gcUserDisconnectDesk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserDisconnectDesk, chair_id_),
  };
  gcUserDisconnectDesk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcUserDisconnectDesk_descriptor_,
      gcUserDisconnectDesk::default_instance_,
      gcUserDisconnectDesk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserDisconnectDesk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserDisconnectDesk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcUserDisconnectDesk));
  CannonInfo_descriptor_ = file->message_type(24);
  static const int CannonInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CannonInfo, cannon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CannonInfo, cannon_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CannonInfo, cannon_gun_id_),
  };
  CannonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CannonInfo_descriptor_,
      CannonInfo::default_instance_,
      CannonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CannonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CannonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CannonInfo));
  cgChangeCannon_descriptor_ = file->message_type(25);
  static const int cgChangeCannon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgChangeCannon, cannon_id_),
  };
  cgChangeCannon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cgChangeCannon_descriptor_,
      cgChangeCannon::default_instance_,
      cgChangeCannon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgChangeCannon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cgChangeCannon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cgChangeCannon));
  gcChangeCannon_descriptor_ = file->message_type(26);
  static const int gcChangeCannon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcChangeCannon, cannon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcChangeCannon, chair_id_),
  };
  gcChangeCannon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcChangeCannon_descriptor_,
      gcChangeCannon::default_instance_,
      gcChangeCannon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcChangeCannon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcChangeCannon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcChangeCannon));
  ChangeSceneRsp_descriptor_ = file->message_type(27);
  static const int ChangeSceneRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneRsp, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneRsp, time_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneRsp, scene_change_type_),
  };
  ChangeSceneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSceneRsp_descriptor_,
      ChangeSceneRsp::default_instance_,
      ChangeSceneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSceneRsp));
  gcUserMoney_descriptor_ = file->message_type(28);
  static const int gcUserMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserMoney, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserMoney, user_money_),
  };
  gcUserMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gcUserMoney_descriptor_,
      gcUserMoney::default_instance_,
      gcUserMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gcUserMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gcUserMoney));
  SC_DoubleGunOnOff_descriptor_ = file->message_type(29);
  static const int SC_DoubleGunOnOff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DoubleGunOnOff, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DoubleGunOnOff, onoff_),
  };
  SC_DoubleGunOnOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_DoubleGunOnOff_descriptor_,
      SC_DoubleGunOnOff::default_instance_,
      SC_DoubleGunOnOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DoubleGunOnOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_DoubleGunOnOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_DoubleGunOnOff));
  PromptInfoRsp_descriptor_ = file->message_type(30);
  static const int PromptInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromptInfoRsp, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromptInfoRsp, fishkindid_),
  };
  PromptInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PromptInfoRsp_descriptor_,
      PromptInfoRsp::default_instance_,
      PromptInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromptInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromptInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PromptInfoRsp));
  GameStatusRsp_descriptor_ = file->message_type(31);
  static const int GameStatusRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusRsp, background_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusRsp, cannonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusRsp, userlist_),
  };
  GameStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStatusRsp_descriptor_,
      GameStatusRsp::default_instance_,
      GameStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStatusRsp));
  CreateDianCiCannonRsp_descriptor_ = file->message_type(32);
  static const int CreateDianCiCannonRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDianCiCannonRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDianCiCannonRsp, usdiancicannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDianCiCannonRsp, uskilledfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDianCiCannonRsp, usdiancicannonstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDianCiCannonRsp, usdiancicannonstatustime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDianCiCannonRsp, uskilledfishkind_),
  };
  CreateDianCiCannonRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateDianCiCannonRsp_descriptor_,
      CreateDianCiCannonRsp::default_instance_,
      CreateDianCiCannonRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDianCiCannonRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDianCiCannonRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateDianCiCannonRsp));
  DianCiCannonAimReq_descriptor_ = file->message_type(33);
  static const int DianCiCannonAimReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimReq, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimReq, usdiancicannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimReq, usangle_),
  };
  DianCiCannonAimReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DianCiCannonAimReq_descriptor_,
      DianCiCannonAimReq::default_instance_,
      DianCiCannonAimReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DianCiCannonAimReq));
  DianCiCannonAimRsp_descriptor_ = file->message_type(34);
  static const int DianCiCannonAimRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimRsp, usdiancicannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimRsp, usangle_),
  };
  DianCiCannonAimRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DianCiCannonAimRsp_descriptor_,
      DianCiCannonAimRsp::default_instance_,
      DianCiCannonAimRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonAimRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DianCiCannonAimRsp));
  DianCiCannonShootReq_descriptor_ = file->message_type(35);
  static const int DianCiCannonShootReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootReq, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootReq, usdiancicannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootReq, usangle_),
  };
  DianCiCannonShootReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DianCiCannonShootReq_descriptor_,
      DianCiCannonShootReq::default_instance_,
      DianCiCannonShootReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DianCiCannonShootReq));
  DianCiCannonShootRsp_descriptor_ = file->message_type(36);
  static const int DianCiCannonShootRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootRsp, usdiancicannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootRsp, usangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootRsp, usprocuserchairid_),
  };
  DianCiCannonShootRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DianCiCannonShootRsp_descriptor_,
      DianCiCannonShootRsp::default_instance_,
      DianCiCannonShootRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonShootRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DianCiCannonShootRsp));
  DianCiCannonHitFishReq_descriptor_ = file->message_type(37);
  static const int DianCiCannonHitFishReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonHitFishReq, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonHitFishReq, usdiancicannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonHitFishReq, subfishes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonHitFishReq, usrobotchairid_),
  };
  DianCiCannonHitFishReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DianCiCannonHitFishReq_descriptor_,
      DianCiCannonHitFishReq::default_instance_,
      DianCiCannonHitFishReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonHitFishReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonHitFishReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DianCiCannonHitFishReq));
  DianCiCannonDestroyRsp_descriptor_ = file->message_type(38);
  static const int DianCiCannonDestroyRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonDestroyRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonDestroyRsp, usdiancicannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonDestroyRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonDestroyRsp, ustotalmul_),
  };
  DianCiCannonDestroyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DianCiCannonDestroyRsp_descriptor_,
      DianCiCannonDestroyRsp::default_instance_,
      DianCiCannonDestroyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonDestroyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianCiCannonDestroyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DianCiCannonDestroyRsp));
  CreateZuanTouRsp_descriptor_ = file->message_type(39);
  static const int CreateZuanTouRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, uskilledfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, ustraceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, ustracestartpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, uszuantoustatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, uszuantoustatustime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, bombfishid_),
  };
  CreateZuanTouRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateZuanTouRsp_descriptor_,
      CreateZuanTouRsp::default_instance_,
      CreateZuanTouRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateZuanTouRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateZuanTouRsp));
  ZuanTouAimReq_descriptor_ = file->message_type(40);
  static const int ZuanTouAimReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimReq, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimReq, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimReq, usangle_),
  };
  ZuanTouAimReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZuanTouAimReq_descriptor_,
      ZuanTouAimReq::default_instance_,
      ZuanTouAimReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZuanTouAimReq));
  ZuanTouAimRsp_descriptor_ = file->message_type(41);
  static const int ZuanTouAimRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimRsp, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimRsp, usangle_),
  };
  ZuanTouAimRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZuanTouAimRsp_descriptor_,
      ZuanTouAimRsp::default_instance_,
      ZuanTouAimRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouAimRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZuanTouAimRsp));
  ZuanTouShootReq_descriptor_ = file->message_type(42);
  static const int ZuanTouShootReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootReq, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootReq, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootReq, usangle_),
  };
  ZuanTouShootReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZuanTouShootReq_descriptor_,
      ZuanTouShootReq::default_instance_,
      ZuanTouShootReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZuanTouShootReq));
  ZuanTouShootRsp_descriptor_ = file->message_type(43);
  static const int ZuanTouShootRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootRsp, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootRsp, usangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootRsp, ustraceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootRsp, ustracestartpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootRsp, usprocuserchairid_),
  };
  ZuanTouShootRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZuanTouShootRsp_descriptor_,
      ZuanTouShootRsp::default_instance_,
      ZuanTouShootRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouShootRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZuanTouShootRsp));
  ZuanTouHitFishReq_descriptor_ = file->message_type(44);
  static const int ZuanTouHitFishReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouHitFishReq, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouHitFishReq, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouHitFishReq, subfishes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouHitFishReq, usrobotchairid_),
  };
  ZuanTouHitFishReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZuanTouHitFishReq_descriptor_,
      ZuanTouHitFishReq::default_instance_,
      ZuanTouHitFishReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouHitFishReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouHitFishReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZuanTouHitFishReq));
  ZuanTouBombRsp_descriptor_ = file->message_type(45);
  static const int ZuanTouBombRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouBombRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouBombRsp, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouBombRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouBombRsp, ustotalmul_),
  };
  ZuanTouBombRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZuanTouBombRsp_descriptor_,
      ZuanTouBombRsp::default_instance_,
      ZuanTouBombRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouBombRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZuanTouBombRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZuanTouBombRsp));
  SomeZuanTouInfo_descriptor_ = file->message_type(46);
  static const int SomeZuanTouInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouInfo, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouInfo, usangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouInfo, ustraceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouInfo, ustracestartpt_),
  };
  SomeZuanTouInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SomeZuanTouInfo_descriptor_,
      SomeZuanTouInfo::default_instance_,
      SomeZuanTouInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SomeZuanTouInfo));
  CreateSomeZuanTouRsp_descriptor_ = file->message_type(47);
  static const int CreateSomeZuanTouRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSomeZuanTouRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSomeZuanTouRsp, ussomezuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSomeZuanTouRsp, uskilledfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSomeZuanTouRsp, uszuantoustatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSomeZuanTouRsp, uszuantoustatustime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSomeZuanTouRsp, zuantous_),
  };
  CreateSomeZuanTouRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSomeZuanTouRsp_descriptor_,
      CreateSomeZuanTouRsp::default_instance_,
      CreateSomeZuanTouRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSomeZuanTouRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSomeZuanTouRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSomeZuanTouRsp));
  SomeZuanTouShootRsp_descriptor_ = file->message_type(48);
  static const int SomeZuanTouShootRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouShootRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouShootRsp, ussomezuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouShootRsp, somezuantou_),
  };
  SomeZuanTouShootRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SomeZuanTouShootRsp_descriptor_,
      SomeZuanTouShootRsp::default_instance_,
      SomeZuanTouShootRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouShootRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouShootRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SomeZuanTouShootRsp));
  SomeZuanTouHitFishReq_descriptor_ = file->message_type(49);
  static const int SomeZuanTouHitFishReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouHitFishReq, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouHitFishReq, ussomezuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouHitFishReq, uszuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouHitFishReq, subfishes_),
  };
  SomeZuanTouHitFishReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SomeZuanTouHitFishReq_descriptor_,
      SomeZuanTouHitFishReq::default_instance_,
      SomeZuanTouHitFishReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouHitFishReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouHitFishReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SomeZuanTouHitFishReq));
  SomeZuanTouBombRsp_descriptor_ = file->message_type(50);
  static const int SomeZuanTouBombRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouBombRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouBombRsp, ussomezuantouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouBombRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouBombRsp, ustotalmul_),
  };
  SomeZuanTouBombRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SomeZuanTouBombRsp_descriptor_,
      SomeZuanTouBombRsp::default_instance_,
      SomeZuanTouBombRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouBombRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeZuanTouBombRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SomeZuanTouBombRsp));
  CreateFireStormRsp_descriptor_ = file->message_type(51);
  static const int CreateFireStormRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, usfirestormid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, uskilledfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, usstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, usstatustime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, ustotalmul_),
  };
  CreateFireStormRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateFireStormRsp_descriptor_,
      CreateFireStormRsp::default_instance_,
      CreateFireStormRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFireStormRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateFireStormRsp));
  DestoryFireStormRsp_descriptor_ = file->message_type(52);
  static const int DestoryFireStormRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryFireStormRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryFireStormRsp, usfirestormid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryFireStormRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryFireStormRsp, ustotalmul_),
  };
  DestoryFireStormRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestoryFireStormRsp_descriptor_,
      DestoryFireStormRsp::default_instance_,
      DestoryFireStormRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryFireStormRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryFireStormRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestoryFireStormRsp));
  FireStormStatusRsp_descriptor_ = file->message_type(53);
  static const int FireStormStatusRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormStatusRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormStatusRsp, usfirestormid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormStatusRsp, usstatus_),
  };
  FireStormStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FireStormStatusRsp_descriptor_,
      FireStormStatusRsp::default_instance_,
      FireStormStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FireStormStatusRsp));
  FireStormScoreRsp_descriptor_ = file->message_type(54);
  static const int FireStormScoreRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormScoreRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormScoreRsp, usfirestormid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormScoreRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormScoreRsp, ustotalmul_),
  };
  FireStormScoreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FireStormScoreRsp_descriptor_,
      FireStormScoreRsp::default_instance_,
      FireStormScoreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormScoreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireStormScoreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FireStormScoreRsp));
  CreateMadCowRsp_descriptor_ = file->message_type(55);
  static const int CreateMadCowRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, usmadcowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, uskilledfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, usrundirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, usstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, usstatustime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, ustotalmul_),
  };
  CreateMadCowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMadCowRsp_descriptor_,
      CreateMadCowRsp::default_instance_,
      CreateMadCowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMadCowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMadCowRsp));
  DestoryMadCowRsp_descriptor_ = file->message_type(56);
  static const int DestoryMadCowRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryMadCowRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryMadCowRsp, usmadcowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryMadCowRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryMadCowRsp, ustotalmul_),
  };
  DestoryMadCowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestoryMadCowRsp_descriptor_,
      DestoryMadCowRsp::default_instance_,
      DestoryMadCowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryMadCowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestoryMadCowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestoryMadCowRsp));
  MadCowStatusRsp_descriptor_ = file->message_type(57);
  static const int MadCowStatusRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowStatusRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowStatusRsp, usmadcowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowStatusRsp, usstatus_),
  };
  MadCowStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MadCowStatusRsp_descriptor_,
      MadCowStatusRsp::default_instance_,
      MadCowStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MadCowStatusRsp));
  MadCowScoreRsp_descriptor_ = file->message_type(58);
  static const int MadCowScoreRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowScoreRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowScoreRsp, usmadcowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowScoreRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowScoreRsp, ustotalmul_),
  };
  MadCowScoreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MadCowScoreRsp_descriptor_,
      MadCowScoreRsp::default_instance_,
      MadCowScoreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowScoreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MadCowScoreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MadCowScoreRsp));
  CreateSerialBombCrabRsp_descriptor_ = file->message_type(59);
  static const int CreateSerialBombCrabRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, usserialbombcrabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, uskilledfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, usstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, usstatustime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, usbombposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, usbombposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, usnextbombposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, usnextbombposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, usbombcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, bombfishid_),
  };
  CreateSerialBombCrabRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSerialBombCrabRsp_descriptor_,
      CreateSerialBombCrabRsp::default_instance_,
      CreateSerialBombCrabRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSerialBombCrabRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSerialBombCrabRsp));
  SerialBombCrabBombRsp_descriptor_ = file->message_type(60);
  static const int SerialBombCrabBombRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, usserialbombcrabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, ustotalmul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, usbombposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, usbombposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, usnextbombposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, usnextbombposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, usbombcount_),
  };
  SerialBombCrabBombRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SerialBombCrabBombRsp_descriptor_,
      SerialBombCrabBombRsp::default_instance_,
      SerialBombCrabBombRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialBombCrabBombRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SerialBombCrabBombRsp));
  DestorySerialBombCrabRsp_descriptor_ = file->message_type(61);
  static const int DestorySerialBombCrabRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestorySerialBombCrabRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestorySerialBombCrabRsp, usserialbombcrabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestorySerialBombCrabRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestorySerialBombCrabRsp, ustotalmul_),
  };
  DestorySerialBombCrabRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestorySerialBombCrabRsp_descriptor_,
      DestorySerialBombCrabRsp::default_instance_,
      DestorySerialBombCrabRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestorySerialBombCrabRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestorySerialBombCrabRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestorySerialBombCrabRsp));
  HaiWangCrabHitPartReq_descriptor_ = file->message_type(62);
  static const int HaiWangCrabHitPartReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabHitPartReq, usbulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabHitPartReq, ushaiwangcrabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabHitPartReq, uspartid_),
  };
  HaiWangCrabHitPartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaiWangCrabHitPartReq_descriptor_,
      HaiWangCrabHitPartReq::default_instance_,
      HaiWangCrabHitPartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabHitPartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabHitPartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaiWangCrabHitPartReq));
  CrabPart_descriptor_ = file->message_type(63);
  static const int CrabPart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabPart, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabPart, uspartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabPart, uspartmul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabPart, usscore_),
  };
  CrabPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrabPart_descriptor_,
      CrabPart::default_instance_,
      CrabPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrabPart));
  HaiWangCrabKilledPartRsp_descriptor_ = file->message_type(64);
  static const int HaiWangCrabKilledPartRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledPartRsp, ushaiwangcrabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledPartRsp, arykilledparts_),
  };
  HaiWangCrabKilledPartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaiWangCrabKilledPartRsp_descriptor_,
      HaiWangCrabKilledPartRsp::default_instance_,
      HaiWangCrabKilledPartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledPartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledPartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaiWangCrabKilledPartRsp));
  HaiWangCrabKilledDeadRsp_descriptor_ = file->message_type(65);
  static const int HaiWangCrabKilledDeadRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledDeadRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledDeadRsp, ushaiwangcrabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledDeadRsp, uspartmul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledDeadRsp, usselfscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledDeadRsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledDeadRsp, ustotalmul_),
  };
  HaiWangCrabKilledDeadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaiWangCrabKilledDeadRsp_descriptor_,
      HaiWangCrabKilledDeadRsp::default_instance_,
      HaiWangCrabKilledDeadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledDeadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaiWangCrabKilledDeadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaiWangCrabKilledDeadRsp));
  CreateDelayBombRsp_descriptor_ = file->message_type(66);
  static const int CreateDelayBombRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, usdelaybombid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, uskilledfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, usstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, usstatustime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, usposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, uspoxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, bombfishid_),
  };
  CreateDelayBombRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateDelayBombRsp_descriptor_,
      CreateDelayBombRsp::default_instance_,
      CreateDelayBombRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDelayBombRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateDelayBombRsp));
  DelayBomb_Bomb_Rsp_descriptor_ = file->message_type(67);
  static const int DelayBomb_Bomb_Rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayBomb_Bomb_Rsp, uschairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayBomb_Bomb_Rsp, usdelaybombid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayBomb_Bomb_Rsp, ustotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayBomb_Bomb_Rsp, ustotalmul_),
  };
  DelayBomb_Bomb_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelayBomb_Bomb_Rsp_descriptor_,
      DelayBomb_Bomb_Rsp::default_instance_,
      DelayBomb_Bomb_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayBomb_Bomb_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelayBomb_Bomb_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelayBomb_Bomb_Rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSFish_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishInfo_descriptor_, &FishInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishList_descriptor_, &FishList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cgUserReady_descriptor_, &cgUserReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShootBulletReq_descriptor_, &ShootBulletReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShootBulletRsp_descriptor_, &ShootBulletRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cgBulletSpeed_descriptor_, &cgBulletSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcBulletSpeed_descriptor_, &gcBulletSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcStatus_descriptor_, &gcStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cgHitfish_descriptor_, &cgHitfish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcKillSubFish_descriptor_, &gcKillSubFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillFishRsp_descriptor_, &KillFishRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cgAutoShoot_descriptor_, &cgAutoShoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcAutoShoot_descriptor_, &gcAutoShoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cgLockOnOff_descriptor_, &cgLockOnOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcLockOnOff_descriptor_, &gcLockOnOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cgLockFish_descriptor_, &cgLockFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcLockFish_descriptor_, &gcLockFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatus_descriptor_, &UserStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatusReq_descriptor_, &UserStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatusRsp_descriptor_, &UserStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcUserEnterDesk_descriptor_, &gcUserEnterDesk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcUserLeaveDesk_descriptor_, &gcUserLeaveDesk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcUserDisconnectDesk_descriptor_, &gcUserDisconnectDesk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CannonInfo_descriptor_, &CannonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cgChangeCannon_descriptor_, &cgChangeCannon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcChangeCannon_descriptor_, &gcChangeCannon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSceneRsp_descriptor_, &ChangeSceneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gcUserMoney_descriptor_, &gcUserMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_DoubleGunOnOff_descriptor_, &SC_DoubleGunOnOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PromptInfoRsp_descriptor_, &PromptInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStatusRsp_descriptor_, &GameStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateDianCiCannonRsp_descriptor_, &CreateDianCiCannonRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DianCiCannonAimReq_descriptor_, &DianCiCannonAimReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DianCiCannonAimRsp_descriptor_, &DianCiCannonAimRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DianCiCannonShootReq_descriptor_, &DianCiCannonShootReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DianCiCannonShootRsp_descriptor_, &DianCiCannonShootRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DianCiCannonHitFishReq_descriptor_, &DianCiCannonHitFishReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DianCiCannonDestroyRsp_descriptor_, &DianCiCannonDestroyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateZuanTouRsp_descriptor_, &CreateZuanTouRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZuanTouAimReq_descriptor_, &ZuanTouAimReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZuanTouAimRsp_descriptor_, &ZuanTouAimRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZuanTouShootReq_descriptor_, &ZuanTouShootReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZuanTouShootRsp_descriptor_, &ZuanTouShootRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZuanTouHitFishReq_descriptor_, &ZuanTouHitFishReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZuanTouBombRsp_descriptor_, &ZuanTouBombRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SomeZuanTouInfo_descriptor_, &SomeZuanTouInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSomeZuanTouRsp_descriptor_, &CreateSomeZuanTouRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SomeZuanTouShootRsp_descriptor_, &SomeZuanTouShootRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SomeZuanTouHitFishReq_descriptor_, &SomeZuanTouHitFishReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SomeZuanTouBombRsp_descriptor_, &SomeZuanTouBombRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateFireStormRsp_descriptor_, &CreateFireStormRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestoryFireStormRsp_descriptor_, &DestoryFireStormRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FireStormStatusRsp_descriptor_, &FireStormStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FireStormScoreRsp_descriptor_, &FireStormScoreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMadCowRsp_descriptor_, &CreateMadCowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestoryMadCowRsp_descriptor_, &DestoryMadCowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MadCowStatusRsp_descriptor_, &MadCowStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MadCowScoreRsp_descriptor_, &MadCowScoreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSerialBombCrabRsp_descriptor_, &CreateSerialBombCrabRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SerialBombCrabBombRsp_descriptor_, &SerialBombCrabBombRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestorySerialBombCrabRsp_descriptor_, &DestorySerialBombCrabRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaiWangCrabHitPartReq_descriptor_, &HaiWangCrabHitPartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrabPart_descriptor_, &CrabPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaiWangCrabKilledPartRsp_descriptor_, &HaiWangCrabKilledPartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaiWangCrabKilledDeadRsp_descriptor_, &HaiWangCrabKilledDeadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateDelayBombRsp_descriptor_, &CreateDelayBombRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelayBomb_Bomb_Rsp_descriptor_, &DelayBomb_Bomb_Rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSFish_2eproto() {
  delete FishInfo::default_instance_;
  delete FishInfo_reflection_;
  delete FishList::default_instance_;
  delete FishList_reflection_;
  delete cgUserReady::default_instance_;
  delete cgUserReady_reflection_;
  delete ShootBulletReq::default_instance_;
  delete ShootBulletReq_reflection_;
  delete ShootBulletRsp::default_instance_;
  delete ShootBulletRsp_reflection_;
  delete cgBulletSpeed::default_instance_;
  delete cgBulletSpeed_reflection_;
  delete gcBulletSpeed::default_instance_;
  delete gcBulletSpeed_reflection_;
  delete gcStatus::default_instance_;
  delete gcStatus_reflection_;
  delete cgHitfish::default_instance_;
  delete cgHitfish_reflection_;
  delete gcKillSubFish::default_instance_;
  delete gcKillSubFish_reflection_;
  delete KillFishRsp::default_instance_;
  delete KillFishRsp_reflection_;
  delete cgAutoShoot::default_instance_;
  delete cgAutoShoot_reflection_;
  delete gcAutoShoot::default_instance_;
  delete gcAutoShoot_reflection_;
  delete cgLockOnOff::default_instance_;
  delete cgLockOnOff_reflection_;
  delete gcLockOnOff::default_instance_;
  delete gcLockOnOff_reflection_;
  delete cgLockFish::default_instance_;
  delete cgLockFish_reflection_;
  delete gcLockFish::default_instance_;
  delete gcLockFish_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserStatus::default_instance_;
  delete UserStatus_reflection_;
  delete UserStatusReq::default_instance_;
  delete UserStatusReq_reflection_;
  delete UserStatusRsp::default_instance_;
  delete UserStatusRsp_reflection_;
  delete gcUserEnterDesk::default_instance_;
  delete gcUserEnterDesk_reflection_;
  delete gcUserLeaveDesk::default_instance_;
  delete gcUserLeaveDesk_reflection_;
  delete gcUserDisconnectDesk::default_instance_;
  delete gcUserDisconnectDesk_reflection_;
  delete CannonInfo::default_instance_;
  delete CannonInfo_reflection_;
  delete cgChangeCannon::default_instance_;
  delete cgChangeCannon_reflection_;
  delete gcChangeCannon::default_instance_;
  delete gcChangeCannon_reflection_;
  delete ChangeSceneRsp::default_instance_;
  delete ChangeSceneRsp_reflection_;
  delete gcUserMoney::default_instance_;
  delete gcUserMoney_reflection_;
  delete SC_DoubleGunOnOff::default_instance_;
  delete SC_DoubleGunOnOff_reflection_;
  delete PromptInfoRsp::default_instance_;
  delete PromptInfoRsp_reflection_;
  delete GameStatusRsp::default_instance_;
  delete GameStatusRsp_reflection_;
  delete CreateDianCiCannonRsp::default_instance_;
  delete CreateDianCiCannonRsp_reflection_;
  delete DianCiCannonAimReq::default_instance_;
  delete DianCiCannonAimReq_reflection_;
  delete DianCiCannonAimRsp::default_instance_;
  delete DianCiCannonAimRsp_reflection_;
  delete DianCiCannonShootReq::default_instance_;
  delete DianCiCannonShootReq_reflection_;
  delete DianCiCannonShootRsp::default_instance_;
  delete DianCiCannonShootRsp_reflection_;
  delete DianCiCannonHitFishReq::default_instance_;
  delete DianCiCannonHitFishReq_reflection_;
  delete DianCiCannonDestroyRsp::default_instance_;
  delete DianCiCannonDestroyRsp_reflection_;
  delete CreateZuanTouRsp::default_instance_;
  delete CreateZuanTouRsp_reflection_;
  delete ZuanTouAimReq::default_instance_;
  delete ZuanTouAimReq_reflection_;
  delete ZuanTouAimRsp::default_instance_;
  delete ZuanTouAimRsp_reflection_;
  delete ZuanTouShootReq::default_instance_;
  delete ZuanTouShootReq_reflection_;
  delete ZuanTouShootRsp::default_instance_;
  delete ZuanTouShootRsp_reflection_;
  delete ZuanTouHitFishReq::default_instance_;
  delete ZuanTouHitFishReq_reflection_;
  delete ZuanTouBombRsp::default_instance_;
  delete ZuanTouBombRsp_reflection_;
  delete SomeZuanTouInfo::default_instance_;
  delete SomeZuanTouInfo_reflection_;
  delete CreateSomeZuanTouRsp::default_instance_;
  delete CreateSomeZuanTouRsp_reflection_;
  delete SomeZuanTouShootRsp::default_instance_;
  delete SomeZuanTouShootRsp_reflection_;
  delete SomeZuanTouHitFishReq::default_instance_;
  delete SomeZuanTouHitFishReq_reflection_;
  delete SomeZuanTouBombRsp::default_instance_;
  delete SomeZuanTouBombRsp_reflection_;
  delete CreateFireStormRsp::default_instance_;
  delete CreateFireStormRsp_reflection_;
  delete DestoryFireStormRsp::default_instance_;
  delete DestoryFireStormRsp_reflection_;
  delete FireStormStatusRsp::default_instance_;
  delete FireStormStatusRsp_reflection_;
  delete FireStormScoreRsp::default_instance_;
  delete FireStormScoreRsp_reflection_;
  delete CreateMadCowRsp::default_instance_;
  delete CreateMadCowRsp_reflection_;
  delete DestoryMadCowRsp::default_instance_;
  delete DestoryMadCowRsp_reflection_;
  delete MadCowStatusRsp::default_instance_;
  delete MadCowStatusRsp_reflection_;
  delete MadCowScoreRsp::default_instance_;
  delete MadCowScoreRsp_reflection_;
  delete CreateSerialBombCrabRsp::default_instance_;
  delete CreateSerialBombCrabRsp_reflection_;
  delete SerialBombCrabBombRsp::default_instance_;
  delete SerialBombCrabBombRsp_reflection_;
  delete DestorySerialBombCrabRsp::default_instance_;
  delete DestorySerialBombCrabRsp_reflection_;
  delete HaiWangCrabHitPartReq::default_instance_;
  delete HaiWangCrabHitPartReq_reflection_;
  delete CrabPart::default_instance_;
  delete CrabPart_reflection_;
  delete HaiWangCrabKilledPartRsp::default_instance_;
  delete HaiWangCrabKilledPartRsp_reflection_;
  delete HaiWangCrabKilledDeadRsp::default_instance_;
  delete HaiWangCrabKilledDeadRsp_reflection_;
  delete CreateDelayBombRsp::default_instance_;
  delete CreateDelayBombRsp_reflection_;
  delete DelayBomb_Bomb_Rsp::default_instance_;
  delete DelayBomb_Bomb_Rsp_reflection_;
}

void protobuf_AddDesc_CSFish_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CSFish.proto\022\010gamefish\032\025yd_fieldoption"
    "s.proto\"\366\001\n\010FishInfo\022\022\n\nusFishKind\030\001 \001(\r"
    "\022\020\n\010usFishID\030\002 \001(\r\022\032\n\014subFishKinds\030\003 \003(\r"
    "B\004\210\301\024\n\022\021\n\tusTraceId\030\004 \001(\r\022\024\n\014usStartInde"
    "x\030\005 \001(\r\022\025\n\rusOffsetIndex\030\006 \001(\r\022\024\n\014usOffs"
    "etPosX\030\007 \001(\005\022\024\n\014usOffsetPoxY\030\010 \001(\005\022\024\n\014us"
    "BirthDelay\030\t \001(\r\022\023\n\013usIsRedFish\030\n \001(\r\022\021\n"
    "\tusGroupId\030\013 \001(\r\"5\n\010FishList\022)\n\006Fishes\030\001"
    " \003(\0132\022.gamefish.FishInfoB\005\210\301\024\364\003\"!\n\013cgUse"
    "rReady\022\022\n\nusResvered\030\001 \001(\005\"P\n\016ShootBulle"
    "tReq\022\022\n\nusBulletId\030\001 \001(\005\022\016\n\006sAngle\030\002 \001(\005"
    "\022\032\n\022byCannonLevelIndex\030\003 \001(\005\"\274\001\n\016ShootBu"
    "lletRsp\022\022\n\nusBulletId\030\001 \001(\005\022\016\n\006sAngle\030\002 "
    "\001(\005\022\024\n\014usSpeedIndex\030\003 \001(\005\022\027\n\017usIntervalI"
    "ndex\030\004 \001(\005\022\024\n\014usLevelIndex\030\005 \001(\005\022\021\n\tusCh"
    "airId\030\006 \001(\005\022\023\n\013usErrorCode\030\007 \001(\005\022\031\n\021usPr"
    "ocUserChairId\030\010 \001(\005\">\n\rcgBulletSpeed\022\024\n\014"
    "usSpeedIndex\030\001 \001(\005\022\027\n\017usIntervalIndex\030\002 "
    "\001(\005\"f\n\rgcBulletSpeed\022\021\n\tusChairId\030\001 \001(\005\022"
    "\024\n\014usSpeedIndex\030\002 \001(\005\022\027\n\017usIntervalIndex"
    "\030\003 \001(\005\022\023\n\013usErrorCode\030\004 \001(\005\"\034\n\010gcStatus\022"
    "\020\n\010usStatus\030\001 \001(\005\"X\n\tcgHitfish\022\016\n\006fishId"
    "\030\001 \001(\005\022\021\n\tsubFishId\030\002 \001(\005\022\020\n\010bulletid\030\003 "
    "\001(\005\022\026\n\016usRobotChairId\030\004 \001(\005\"R\n\rgcKillSub"
    "Fish\022\016\n\006fishId\030\001 \001(\005\022\020\n\010fishType\030\002 \001(\005\022\020"
    "\n\010multiple\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\"\272\002\n\013Kill"
    "FishRsp\022\017\n\007bombUID\030\001 \001(\005\022\023\n\013mainFishUID\030"
    "\002 \001(\005\022\022\n\nmainFishId\030\003 \001(\005\022\024\n\014mainFishTyp"
    "e\030\004 \001(\005\022\024\n\014mainMultiple\030\005 \001(\005\022\021\n\tmainSco"
    "re\030\006 \001(\005\022\022\n\ntotalScore\030\007 \001(\005\022\022\n\ntotalRat"
    "io\030\010 \001(\005\022\017\n\007chairId\030\t \001(\005\022\023\n\013usErrorCode"
    "\030\n \001(\005\022\024\n\014subFishCount\030\013 \001(\005\022(\n\tSubFishe"
    "s\030\014 \003(\0132\025.gamefish.KillFishRsp\022\020\n\010bullet"
    "id\030\r \001(\005\022\022\n\nbombFishId\030\016 \001(\005\"\034\n\013cgAutoSh"
    "oot\022\r\n\005onOff\030\001 \001(\010\"B\n\013gcAutoShoot\022\017\n\007cha"
    "irId\030\001 \001(\005\022\r\n\005onOff\030\002 \001(\005\022\023\n\013usErrorCode"
    "\030\003 \001(\005\"\034\n\013cgLockOnOff\022\r\n\005onOff\030\001 \001(\010\"B\n\013"
    "gcLockOnOff\022\017\n\007chairId\030\001 \001(\005\022\r\n\005onOff\030\002 "
    "\001(\010\022\023\n\013usErrorCode\030\003 \001(\005\"\034\n\ncgLockFish\022\016"
    "\n\006fishId\030\001 \001(\005\"B\n\ngcLockFish\022\017\n\007chairId\030"
    "\001 \001(\005\022\016\n\006fishId\030\002 \001(\005\022\023\n\013usErrorCode\030\003 \001"
    "(\005\"b\n\010UserInfo\022\020\n\010chair_id\030\001 \001(\r\022\035\n\tuser"
    "_name\030\002 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\022\n\nuser_money\030\003 "
    "\001(\004\022\021\n\tcannon_id\030\004 \001(\r\"~\n\nUserStatus\022\020\n\010"
    "chair_id\030\001 \001(\r\022\026\n\016lockfish_onoff\030\002 \001(\010\022\024"
    "\n\014lockfish_uid\030\003 \001(\r\022\027\n\017autoshoot_onoff\030"
    "\004 \001(\010\022\027\n\017bullet_speedlev\030\005 \001(\r\"!\n\rUserSt"
    "atusReq\022\020\n\010reserved\030\001 \001(\r\"C\n\rUserStatusR"
    "sp\0222\n\016userstatuslist\030\001 \003(\0132\024.gamefish.Us"
    "erStatusB\004\210\301\024d\"7\n\017gcUserEnterDesk\022$\n\010use"
    "rInfo\030\001 \001(\0132\022.gamefish.UserInfo\"#\n\017gcUse"
    "rLeaveDesk\022\020\n\010chair_id\030\001 \001(\r\"(\n\024gcUserDi"
    "sconnectDesk\022\020\n\010chair_id\030\001 \001(\r\"L\n\nCannon"
    "Info\022\021\n\tcannon_id\030\001 \001(\r\022\024\n\014cannon_value\030"
    "\002 \001(\r\022\025\n\rcannon_gun_id\030\003 \001(\r\"#\n\016cgChange"
    "Cannon\022\021\n\tcannon_id\030\001 \001(\r\"5\n\016gcChangeCan"
    "non\022\021\n\tcannon_id\030\001 \001(\r\022\020\n\010chair_id\030\003 \001(\r"
    "\"S\n\016ChangeSceneRsp\022\020\n\010scene_id\030\001 \001(\r\022\024\n\014"
    "time_seconds\030\002 \001(\002\022\031\n\021scene_change_type\030"
    "\003 \001(\r\"3\n\013gcUserMoney\022\020\n\010chair_id\030\001 \001(\r\022\022"
    "\n\nuser_money\030\002 \001(\004\"3\n\021SC_DoubleGunOnOff\022"
    "\017\n\007chairId\030\001 \001(\r\022\r\n\005onOff\030\002 \001(\r\"5\n\rPromp"
    "tInfoRsp\022\020\n\010infoType\030\001 \001(\r\022\022\n\nfishKindId"
    "\030\002 \001(\r\"\205\001\n\rGameStatusRsp\022\030\n\020background_i"
    "ndex\030\001 \001(\r\022.\n\ncannonlist\030\002 \003(\0132\024.gamefis"
    "h.CannonInfoB\004\210\301\024d\022*\n\010userlist\030\003 \003(\0132\022.g"
    "amefish.UserInfoB\004\210\301\024d\"\266\001\n\025CreateDianCiC"
    "annonRsp\022\021\n\tusChairId\030\001 \001(\005\022\030\n\020usDianCiC"
    "annonId\030\002 \001(\005\022\026\n\016usKilledFishId\030\003 \001(\005\022\034\n"
    "\024usDianCiCannonStatus\030\004 \001(\005\022 \n\030usDianCiC"
    "annonStatusTime\030\005 \001(\002\022\030\n\020usKilledFishKin"
    "d\030\006 \001(\005\"R\n\022DianCiCannonAimReq\022\021\n\tusChair"
    "Id\030\001 \001(\005\022\030\n\020usDianCiCannonId\030\002 \001(\005\022\017\n\007us"
    "Angle\030\003 \001(\005\"R\n\022DianCiCannonAimRsp\022\021\n\tusC"
    "hairId\030\001 \001(\005\022\030\n\020usDianCiCannonId\030\002 \001(\005\022\017"
    "\n\007usAngle\030\003 \001(\005\"T\n\024DianCiCannonShootReq\022"
    "\021\n\tusChairId\030\001 \001(\005\022\030\n\020usDianCiCannonId\030\002"
    " \001(\005\022\017\n\007usAngle\030\003 \001(\005\"o\n\024DianCiCannonSho"
    "otRsp\022\021\n\tusChairId\030\001 \001(\005\022\030\n\020usDianCiCann"
    "onId\030\002 \001(\005\022\017\n\007usAngle\030\003 \001(\005\022\031\n\021usProcUse"
    "rChairId\030\004 \001(\005\"p\n\026DianCiCannonHitFishReq"
    "\022\021\n\tusChairId\030\001 \001(\005\022\030\n\020usDianCiCannonId\030"
    "\002 \001(\005\022\021\n\tSubFishes\030\003 \003(\005\022\026\n\016usRobotChair"
    "Id\030\004 \001(\005\"o\n\026DianCiCannonDestroyRsp\022\021\n\tus"
    "ChairId\030\001 \001(\005\022\030\n\020usDianCiCannonId\030\002 \001(\005\022"
    "\024\n\014usTotalScore\030\003 \001(\005\022\022\n\nusTotalMul\030\004 \001("
    "\005\"\307\001\n\020CreateZuanTouRsp\022\021\n\tusChairId\030\001 \001("
    "\005\022\023\n\013usZuanTouId\030\002 \001(\005\022\026\n\016usKilledFishId"
    "\030\003 \001(\005\022\021\n\tusTraceId\030\004 \001(\005\022\026\n\016usTraceStar"
    "tPt\030\005 \001(\005\022\027\n\017usZuanTouStatus\030\006 \001(\005\022\033\n\023us"
    "ZuanTouStatusTime\030\007 \001(\002\022\022\n\nbombFishId\030\010 "
    "\001(\005\"H\n\rZuanTouAimReq\022\021\n\tusChairId\030\001 \001(\005\022"
    "\023\n\013usZuanTouId\030\002 \001(\005\022\017\n\007usAngle\030\003 \001(\005\"H\n"
    "\rZuanTouAimRsp\022\021\n\tusChairId\030\001 \001(\005\022\023\n\013usZ"
    "uanTouId\030\002 \001(\005\022\017\n\007usAngle\030\003 \001(\005\"J\n\017ZuanT"
    "ouShootReq\022\021\n\tusChairId\030\001 \001(\005\022\023\n\013usZuanT"
    "ouId\030\002 \001(\005\022\017\n\007usAngle\030\003 \001(\005\"\220\001\n\017ZuanTouS"
    "hootRsp\022\021\n\tusChairId\030\001 \001(\005\022\023\n\013usZuanTouI"
    "d\030\002 \001(\005\022\017\n\007usAngle\030\003 \001(\005\022\021\n\tusTraceId\030\004 "
    "\001(\005\022\026\n\016usTraceStartPt\030\005 \001(\005\022\031\n\021usProcUse"
    "rChairId\030\006 \001(\005\"f\n\021ZuanTouHitFishReq\022\021\n\tu"
    "sChairId\030\001 \001(\005\022\023\n\013usZuanTouId\030\002 \001(\005\022\021\n\tS"
    "ubFishes\030\003 \003(\005\022\026\n\016usRobotChairId\030\004 \001(\005\"b"
    "\n\016ZuanTouBombRsp\022\021\n\tusChairId\030\001 \001(\005\022\023\n\013u"
    "sZuanTouId\030\002 \001(\005\022\024\n\014usTotalScore\030\003 \001(\005\022\022"
    "\n\nusTotalMul\030\004 \001(\005\"b\n\017SomeZuanTouInfo\022\023\n"
    "\013usZuanTouId\030\001 \001(\005\022\017\n\007usAngle\030\002 \001(\005\022\021\n\tu"
    "sTraceId\030\003 \001(\005\022\026\n\016usTraceStartPt\030\004 \001(\005\"\275"
    "\001\n\024CreateSomeZuanTouRsp\022\021\n\tusChairId\030\001 \001"
    "(\005\022\027\n\017usSomeZuanTouId\030\002 \001(\005\022\026\n\016usKilledF"
    "ishId\030\003 \001(\005\022\027\n\017usZuanTouStatus\030\004 \001(\005\022\033\n\023"
    "usZuanTouStatusTime\030\005 \001(\005\022+\n\010zuanTous\030\006 "
    "\003(\0132\031.gamefish.SomeZuanTouInfo\"q\n\023SomeZu"
    "anTouShootRsp\022\021\n\tusChairId\030\001 \001(\005\022\027\n\017usSo"
    "meZuanTouId\030\002 \001(\005\022.\n\013someZuanTou\030\003 \001(\0132\031"
    ".gamefish.SomeZuanTouInfo\"q\n\025SomeZuanTou"
    "HitFishReq\022\021\n\tusChairId\030\001 \001(\005\022\027\n\017usSomeZ"
    "uanTouId\030\002 \001(\005\022\023\n\013usZuanTouId\030\003 \001(\005\022\027\n\tS"
    "ubFishes\030\004 \003(\005B\004\210\301\024d\"j\n\022SomeZuanTouBombR"
    "sp\022\021\n\tusChairId\030\001 \001(\005\022\027\n\017usSomeZuanTouId"
    "\030\002 \001(\005\022\024\n\014usTotalScore\030\003 \001(\005\022\022\n\nusTotalM"
    "ul\030\004 \001(\005\"\250\001\n\022CreateFireStormRsp\022\021\n\tusCha"
    "irId\030\001 \001(\005\022\025\n\rusFireStormId\030\002 \001(\005\022\026\n\016usK"
    "illedFishId\030\003 \001(\005\022\020\n\010usStatus\030\004 \001(\005\022\024\n\014u"
    "sStatusTime\030\005 \001(\005\022\024\n\014usTotalScore\030\006 \001(\005\022"
    "\022\n\nusTotalMul\030\007 \001(\005\"i\n\023DestoryFireStormR"
    "sp\022\021\n\tusChairId\030\001 \001(\005\022\025\n\rusFireStormId\030\002"
    " \001(\005\022\024\n\014usTotalScore\030\003 \001(\005\022\022\n\nusTotalMul"
    "\030\004 \001(\005\"P\n\022FireStormStatusRsp\022\021\n\tusChairI"
    "d\030\001 \001(\005\022\025\n\rusFireStormId\030\002 \001(\005\022\020\n\010usStat"
    "us\030\003 \001(\005\"g\n\021FireStormScoreRsp\022\021\n\tusChair"
    "Id\030\001 \001(\005\022\025\n\rusFireStormId\030\002 \001(\005\022\024\n\014usTot"
    "alScore\030\003 \001(\005\022\022\n\nusTotalMul\030\004 \001(\005\"\272\001\n\017Cr"
    "eateMadCowRsp\022\021\n\tusChairId\030\001 \001(\005\022\022\n\nusMa"
    "dCowId\030\002 \001(\005\022\026\n\016usKilledFishId\030\003 \001(\005\022\026\n\016"
    "usRunDirection\030\004 \001(\005\022\020\n\010usStatus\030\005 \001(\005\022\024"
    "\n\014usStatusTime\030\006 \001(\005\022\024\n\014usTotalScore\030\007 \001"
    "(\005\022\022\n\nusTotalMul\030\010 \001(\005\"c\n\020DestoryMadCowR"
    "sp\022\021\n\tusChairId\030\001 \001(\005\022\022\n\nusMadCowId\030\002 \001("
    "\005\022\024\n\014usTotalScore\030\003 \001(\005\022\022\n\nusTotalMul\030\004 "
    "\001(\005\"J\n\017MadCowStatusRsp\022\021\n\tusChairId\030\001 \001("
    "\005\022\022\n\nusMadCowId\030\002 \001(\005\022\020\n\010usStatus\030\003 \001(\005\""
    "a\n\016MadCowScoreRsp\022\021\n\tusChairId\030\001 \001(\005\022\022\n\n"
    "usMadCowId\030\002 \001(\005\022\024\n\014usTotalScore\030\003 \001(\005\022\022"
    "\n\nusTotalMul\030\004 \001(\005\"\211\002\n\027CreateSerialBombC"
    "rabRsp\022\021\n\tusChairId\030\001 \001(\005\022\032\n\022usSerialBom"
    "bCrabId\030\002 \001(\005\022\026\n\016usKilledFishId\030\003 \001(\005\022\020\n"
    "\010usStatus\030\004 \001(\005\022\024\n\014usStatusTime\030\005 \001(\005\022\022\n"
    "\nusBombPosX\030\006 \001(\005\022\022\n\nusBombPosY\030\007 \001(\005\022\026\n"
    "\016usNextBombPosX\030\010 \001(\005\022\026\n\016usNextBombPosy\030"
    "\t \001(\005\022\023\n\013usBombCount\030\n \001(\005\022\022\n\nbombFishId"
    "\030\013 \001(\005\"\335\001\n\025SerialBombCrabBombRsp\022\021\n\tusCh"
    "airId\030\001 \001(\005\022\032\n\022usSerialBombCrabId\030\002 \001(\005\022"
    "\024\n\014usTotalScore\030\003 \001(\005\022\022\n\nusTotalMul\030\004 \001("
    "\005\022\022\n\nusBombPosX\030\005 \001(\005\022\022\n\nusBombPosY\030\006 \001("
    "\005\022\026\n\016usNextBombPosX\030\007 \001(\005\022\026\n\016usNextBombP"
    "osy\030\010 \001(\005\022\023\n\013usBombCount\030\t \001(\005\"s\n\030Destor"
    "ySerialBombCrabRsp\022\021\n\tusChairId\030\001 \001(\005\022\032\n"
    "\022usSerialBombCrabId\030\002 \001(\005\022\024\n\014usTotalScor"
    "e\030\003 \001(\005\022\022\n\nusTotalMul\030\004 \001(\005\"V\n\025HaiWangCr"
    "abHitPartReq\022\022\n\nusBulletId\030\001 \001(\005\022\027\n\017usHa"
    "iWangCrabId\030\002 \001(\005\022\020\n\010usPartId\030\003 \001(\005\"S\n\010C"
    "rabPart\022\021\n\tusChairId\030\001 \001(\005\022\020\n\010usPartId\030\002"
    " \001(\005\022\021\n\tusPartMul\030\003 \001(\005\022\017\n\007usScore\030\004 \001(\005"
    "\"_\n\030HaiWangCrabKilledPartRsp\022\027\n\017usHaiwan"
    "gCrabId\030\001 \001(\005\022*\n\016aryKilledParts\030\002 \003(\0132\022."
    "gamefish.CrabPart\"\230\001\n\030HaiWangCrabKilledD"
    "eadRsp\022\021\n\tusChairId\030\001 \001(\005\022\027\n\017usHaiwangCr"
    "abId\030\002 \001(\005\022\021\n\tusPartMul\030\003 \001(\005\022\023\n\013usSelfS"
    "core\030\004 \001(\005\022\024\n\014usTotalScore\030\005 \001(\005\022\022\n\nusTo"
    "talMul\030\006 \001(\005\"\262\001\n\022CreateDelayBombRsp\022\021\n\tu"
    "sChairId\030\001 \001(\005\022\025\n\rusDelayBombId\030\002 \001(\005\022\026\n"
    "\016usKilledFishId\030\003 \001(\005\022\020\n\010usStatus\030\004 \001(\005\022"
    "\024\n\014usStatusTime\030\005 \001(\005\022\016\n\006usPosX\030\006 \001(\005\022\016\n"
    "\006usPoxY\030\007 \001(\005\022\022\n\nbombFishId\030\010 \001(\005\"h\n\022Del"
    "ayBomb_Bomb_Rsp\022\021\n\tusChairId\030\001 \001(\005\022\025\n\rus"
    "DelayBombId\030\002 \001(\005\022\024\n\014usTotalScore\030\003 \001(\005\022"
    "\022\n\nusTotalMul\030\004 \001(\005", 7099);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSFish.proto", &protobuf_RegisterTypes);
  FishInfo::default_instance_ = new FishInfo();
  FishList::default_instance_ = new FishList();
  cgUserReady::default_instance_ = new cgUserReady();
  ShootBulletReq::default_instance_ = new ShootBulletReq();
  ShootBulletRsp::default_instance_ = new ShootBulletRsp();
  cgBulletSpeed::default_instance_ = new cgBulletSpeed();
  gcBulletSpeed::default_instance_ = new gcBulletSpeed();
  gcStatus::default_instance_ = new gcStatus();
  cgHitfish::default_instance_ = new cgHitfish();
  gcKillSubFish::default_instance_ = new gcKillSubFish();
  KillFishRsp::default_instance_ = new KillFishRsp();
  cgAutoShoot::default_instance_ = new cgAutoShoot();
  gcAutoShoot::default_instance_ = new gcAutoShoot();
  cgLockOnOff::default_instance_ = new cgLockOnOff();
  gcLockOnOff::default_instance_ = new gcLockOnOff();
  cgLockFish::default_instance_ = new cgLockFish();
  gcLockFish::default_instance_ = new gcLockFish();
  UserInfo::default_instance_ = new UserInfo();
  UserStatus::default_instance_ = new UserStatus();
  UserStatusReq::default_instance_ = new UserStatusReq();
  UserStatusRsp::default_instance_ = new UserStatusRsp();
  gcUserEnterDesk::default_instance_ = new gcUserEnterDesk();
  gcUserLeaveDesk::default_instance_ = new gcUserLeaveDesk();
  gcUserDisconnectDesk::default_instance_ = new gcUserDisconnectDesk();
  CannonInfo::default_instance_ = new CannonInfo();
  cgChangeCannon::default_instance_ = new cgChangeCannon();
  gcChangeCannon::default_instance_ = new gcChangeCannon();
  ChangeSceneRsp::default_instance_ = new ChangeSceneRsp();
  gcUserMoney::default_instance_ = new gcUserMoney();
  SC_DoubleGunOnOff::default_instance_ = new SC_DoubleGunOnOff();
  PromptInfoRsp::default_instance_ = new PromptInfoRsp();
  GameStatusRsp::default_instance_ = new GameStatusRsp();
  CreateDianCiCannonRsp::default_instance_ = new CreateDianCiCannonRsp();
  DianCiCannonAimReq::default_instance_ = new DianCiCannonAimReq();
  DianCiCannonAimRsp::default_instance_ = new DianCiCannonAimRsp();
  DianCiCannonShootReq::default_instance_ = new DianCiCannonShootReq();
  DianCiCannonShootRsp::default_instance_ = new DianCiCannonShootRsp();
  DianCiCannonHitFishReq::default_instance_ = new DianCiCannonHitFishReq();
  DianCiCannonDestroyRsp::default_instance_ = new DianCiCannonDestroyRsp();
  CreateZuanTouRsp::default_instance_ = new CreateZuanTouRsp();
  ZuanTouAimReq::default_instance_ = new ZuanTouAimReq();
  ZuanTouAimRsp::default_instance_ = new ZuanTouAimRsp();
  ZuanTouShootReq::default_instance_ = new ZuanTouShootReq();
  ZuanTouShootRsp::default_instance_ = new ZuanTouShootRsp();
  ZuanTouHitFishReq::default_instance_ = new ZuanTouHitFishReq();
  ZuanTouBombRsp::default_instance_ = new ZuanTouBombRsp();
  SomeZuanTouInfo::default_instance_ = new SomeZuanTouInfo();
  CreateSomeZuanTouRsp::default_instance_ = new CreateSomeZuanTouRsp();
  SomeZuanTouShootRsp::default_instance_ = new SomeZuanTouShootRsp();
  SomeZuanTouHitFishReq::default_instance_ = new SomeZuanTouHitFishReq();
  SomeZuanTouBombRsp::default_instance_ = new SomeZuanTouBombRsp();
  CreateFireStormRsp::default_instance_ = new CreateFireStormRsp();
  DestoryFireStormRsp::default_instance_ = new DestoryFireStormRsp();
  FireStormStatusRsp::default_instance_ = new FireStormStatusRsp();
  FireStormScoreRsp::default_instance_ = new FireStormScoreRsp();
  CreateMadCowRsp::default_instance_ = new CreateMadCowRsp();
  DestoryMadCowRsp::default_instance_ = new DestoryMadCowRsp();
  MadCowStatusRsp::default_instance_ = new MadCowStatusRsp();
  MadCowScoreRsp::default_instance_ = new MadCowScoreRsp();
  CreateSerialBombCrabRsp::default_instance_ = new CreateSerialBombCrabRsp();
  SerialBombCrabBombRsp::default_instance_ = new SerialBombCrabBombRsp();
  DestorySerialBombCrabRsp::default_instance_ = new DestorySerialBombCrabRsp();
  HaiWangCrabHitPartReq::default_instance_ = new HaiWangCrabHitPartReq();
  CrabPart::default_instance_ = new CrabPart();
  HaiWangCrabKilledPartRsp::default_instance_ = new HaiWangCrabKilledPartRsp();
  HaiWangCrabKilledDeadRsp::default_instance_ = new HaiWangCrabKilledDeadRsp();
  CreateDelayBombRsp::default_instance_ = new CreateDelayBombRsp();
  DelayBomb_Bomb_Rsp::default_instance_ = new DelayBomb_Bomb_Rsp();
  FishInfo::default_instance_->InitAsDefaultInstance();
  FishList::default_instance_->InitAsDefaultInstance();
  cgUserReady::default_instance_->InitAsDefaultInstance();
  ShootBulletReq::default_instance_->InitAsDefaultInstance();
  ShootBulletRsp::default_instance_->InitAsDefaultInstance();
  cgBulletSpeed::default_instance_->InitAsDefaultInstance();
  gcBulletSpeed::default_instance_->InitAsDefaultInstance();
  gcStatus::default_instance_->InitAsDefaultInstance();
  cgHitfish::default_instance_->InitAsDefaultInstance();
  gcKillSubFish::default_instance_->InitAsDefaultInstance();
  KillFishRsp::default_instance_->InitAsDefaultInstance();
  cgAutoShoot::default_instance_->InitAsDefaultInstance();
  gcAutoShoot::default_instance_->InitAsDefaultInstance();
  cgLockOnOff::default_instance_->InitAsDefaultInstance();
  gcLockOnOff::default_instance_->InitAsDefaultInstance();
  cgLockFish::default_instance_->InitAsDefaultInstance();
  gcLockFish::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserStatus::default_instance_->InitAsDefaultInstance();
  UserStatusReq::default_instance_->InitAsDefaultInstance();
  UserStatusRsp::default_instance_->InitAsDefaultInstance();
  gcUserEnterDesk::default_instance_->InitAsDefaultInstance();
  gcUserLeaveDesk::default_instance_->InitAsDefaultInstance();
  gcUserDisconnectDesk::default_instance_->InitAsDefaultInstance();
  CannonInfo::default_instance_->InitAsDefaultInstance();
  cgChangeCannon::default_instance_->InitAsDefaultInstance();
  gcChangeCannon::default_instance_->InitAsDefaultInstance();
  ChangeSceneRsp::default_instance_->InitAsDefaultInstance();
  gcUserMoney::default_instance_->InitAsDefaultInstance();
  SC_DoubleGunOnOff::default_instance_->InitAsDefaultInstance();
  PromptInfoRsp::default_instance_->InitAsDefaultInstance();
  GameStatusRsp::default_instance_->InitAsDefaultInstance();
  CreateDianCiCannonRsp::default_instance_->InitAsDefaultInstance();
  DianCiCannonAimReq::default_instance_->InitAsDefaultInstance();
  DianCiCannonAimRsp::default_instance_->InitAsDefaultInstance();
  DianCiCannonShootReq::default_instance_->InitAsDefaultInstance();
  DianCiCannonShootRsp::default_instance_->InitAsDefaultInstance();
  DianCiCannonHitFishReq::default_instance_->InitAsDefaultInstance();
  DianCiCannonDestroyRsp::default_instance_->InitAsDefaultInstance();
  CreateZuanTouRsp::default_instance_->InitAsDefaultInstance();
  ZuanTouAimReq::default_instance_->InitAsDefaultInstance();
  ZuanTouAimRsp::default_instance_->InitAsDefaultInstance();
  ZuanTouShootReq::default_instance_->InitAsDefaultInstance();
  ZuanTouShootRsp::default_instance_->InitAsDefaultInstance();
  ZuanTouHitFishReq::default_instance_->InitAsDefaultInstance();
  ZuanTouBombRsp::default_instance_->InitAsDefaultInstance();
  SomeZuanTouInfo::default_instance_->InitAsDefaultInstance();
  CreateSomeZuanTouRsp::default_instance_->InitAsDefaultInstance();
  SomeZuanTouShootRsp::default_instance_->InitAsDefaultInstance();
  SomeZuanTouHitFishReq::default_instance_->InitAsDefaultInstance();
  SomeZuanTouBombRsp::default_instance_->InitAsDefaultInstance();
  CreateFireStormRsp::default_instance_->InitAsDefaultInstance();
  DestoryFireStormRsp::default_instance_->InitAsDefaultInstance();
  FireStormStatusRsp::default_instance_->InitAsDefaultInstance();
  FireStormScoreRsp::default_instance_->InitAsDefaultInstance();
  CreateMadCowRsp::default_instance_->InitAsDefaultInstance();
  DestoryMadCowRsp::default_instance_->InitAsDefaultInstance();
  MadCowStatusRsp::default_instance_->InitAsDefaultInstance();
  MadCowScoreRsp::default_instance_->InitAsDefaultInstance();
  CreateSerialBombCrabRsp::default_instance_->InitAsDefaultInstance();
  SerialBombCrabBombRsp::default_instance_->InitAsDefaultInstance();
  DestorySerialBombCrabRsp::default_instance_->InitAsDefaultInstance();
  HaiWangCrabHitPartReq::default_instance_->InitAsDefaultInstance();
  CrabPart::default_instance_->InitAsDefaultInstance();
  HaiWangCrabKilledPartRsp::default_instance_->InitAsDefaultInstance();
  HaiWangCrabKilledDeadRsp::default_instance_->InitAsDefaultInstance();
  CreateDelayBombRsp::default_instance_->InitAsDefaultInstance();
  DelayBomb_Bomb_Rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSFish_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSFish_2eproto {
  StaticDescriptorInitializer_CSFish_2eproto() {
    protobuf_AddDesc_CSFish_2eproto();
  }
} static_descriptor_initializer_CSFish_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FishInfo::kUsFishKindFieldNumber;
const int FishInfo::kUsFishIDFieldNumber;
const int FishInfo::kSubFishKindsFieldNumber;
const int FishInfo::kUsTraceIdFieldNumber;
const int FishInfo::kUsStartIndexFieldNumber;
const int FishInfo::kUsOffsetIndexFieldNumber;
const int FishInfo::kUsOffsetPosXFieldNumber;
const int FishInfo::kUsOffsetPoxYFieldNumber;
const int FishInfo::kUsBirthDelayFieldNumber;
const int FishInfo::kUsIsRedFishFieldNumber;
const int FishInfo::kUsGroupIdFieldNumber;
#endif  // !_MSC_VER

FishInfo::FishInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishInfo::InitAsDefaultInstance() {
}

FishInfo::FishInfo(const FishInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishInfo::SharedCtor() {
  _cached_size_ = 0;
  usfishkind_ = 0u;
  usfishid_ = 0u;
  ustraceid_ = 0u;
  usstartindex_ = 0u;
  usoffsetindex_ = 0u;
  usoffsetposx_ = 0;
  usoffsetpoxy_ = 0;
  usbirthdelay_ = 0u;
  usisredfish_ = 0u;
  usgroupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishInfo::~FishInfo() {
  SharedDtor();
}

void FishInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishInfo_descriptor_;
}

const FishInfo& FishInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

FishInfo* FishInfo::default_instance_ = NULL;

FishInfo* FishInfo::New() const {
  return new FishInfo;
}

void FishInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usfishkind_ = 0u;
    usfishid_ = 0u;
    ustraceid_ = 0u;
    usstartindex_ = 0u;
    usoffsetindex_ = 0u;
    usoffsetposx_ = 0;
    usoffsetpoxy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    usbirthdelay_ = 0u;
    usisredfish_ = 0u;
    usgroupid_ = 0u;
  }
  subfishkinds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 usFishKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usfishkind_)));
          set_has_usfishkind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usFishID;
        break;
      }

      // optional uint32 usFishID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usfishid_)));
          set_has_usfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subFishKinds;
        break;
      }

      // repeated uint32 subFishKinds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subFishKinds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_subfishkinds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subfishkinds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subFishKinds;
        if (input->ExpectTag(32)) goto parse_usTraceId;
        break;
      }

      // optional uint32 usTraceId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTraceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ustraceid_)));
          set_has_ustraceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usStartIndex;
        break;
      }

      // optional uint32 usStartIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStartIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usstartindex_)));
          set_has_usstartindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usOffsetIndex;
        break;
      }

      // optional uint32 usOffsetIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usOffsetIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usoffsetindex_)));
          set_has_usoffsetindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_usOffsetPosX;
        break;
      }

      // optional int32 usOffsetPosX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usOffsetPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usoffsetposx_)));
          set_has_usoffsetposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_usOffsetPoxY;
        break;
      }

      // optional int32 usOffsetPoxY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usOffsetPoxY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usoffsetpoxy_)));
          set_has_usoffsetpoxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_usBirthDelay;
        break;
      }

      // optional uint32 usBirthDelay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usBirthDelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usbirthdelay_)));
          set_has_usbirthdelay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_usIsRedFish;
        break;
      }

      // optional uint32 usIsRedFish = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usIsRedFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usisredfish_)));
          set_has_usisredfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_usGroupId;
        break;
      }

      // optional uint32 usGroupId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usgroupid_)));
          set_has_usgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 usFishKind = 1;
  if (has_usfishkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usfishkind(), output);
  }

  // optional uint32 usFishID = 2;
  if (has_usfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usfishid(), output);
  }

  // repeated uint32 subFishKinds = 3;
  for (int i = 0; i < this->subfishkinds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->subfishkinds(i), output);
  }

  // optional uint32 usTraceId = 4;
  if (has_ustraceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ustraceid(), output);
  }

  // optional uint32 usStartIndex = 5;
  if (has_usstartindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->usstartindex(), output);
  }

  // optional uint32 usOffsetIndex = 6;
  if (has_usoffsetindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->usoffsetindex(), output);
  }

  // optional int32 usOffsetPosX = 7;
  if (has_usoffsetposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->usoffsetposx(), output);
  }

  // optional int32 usOffsetPoxY = 8;
  if (has_usoffsetpoxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->usoffsetpoxy(), output);
  }

  // optional uint32 usBirthDelay = 9;
  if (has_usbirthdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->usbirthdelay(), output);
  }

  // optional uint32 usIsRedFish = 10;
  if (has_usisredfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->usisredfish(), output);
  }

  // optional uint32 usGroupId = 11;
  if (has_usgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->usgroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 usFishKind = 1;
  if (has_usfishkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usfishkind(), target);
  }

  // optional uint32 usFishID = 2;
  if (has_usfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usfishid(), target);
  }

  // repeated uint32 subFishKinds = 3;
  for (int i = 0; i < this->subfishkinds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->subfishkinds(i), target);
  }

  // optional uint32 usTraceId = 4;
  if (has_ustraceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ustraceid(), target);
  }

  // optional uint32 usStartIndex = 5;
  if (has_usstartindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->usstartindex(), target);
  }

  // optional uint32 usOffsetIndex = 6;
  if (has_usoffsetindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->usoffsetindex(), target);
  }

  // optional int32 usOffsetPosX = 7;
  if (has_usoffsetposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->usoffsetposx(), target);
  }

  // optional int32 usOffsetPoxY = 8;
  if (has_usoffsetpoxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->usoffsetpoxy(), target);
  }

  // optional uint32 usBirthDelay = 9;
  if (has_usbirthdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->usbirthdelay(), target);
  }

  // optional uint32 usIsRedFish = 10;
  if (has_usisredfish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->usisredfish(), target);
  }

  // optional uint32 usGroupId = 11;
  if (has_usgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->usgroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 usFishKind = 1;
    if (has_usfishkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usfishkind());
    }

    // optional uint32 usFishID = 2;
    if (has_usfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usfishid());
    }

    // optional uint32 usTraceId = 4;
    if (has_ustraceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ustraceid());
    }

    // optional uint32 usStartIndex = 5;
    if (has_usstartindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usstartindex());
    }

    // optional uint32 usOffsetIndex = 6;
    if (has_usoffsetindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usoffsetindex());
    }

    // optional int32 usOffsetPosX = 7;
    if (has_usoffsetposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usoffsetposx());
    }

    // optional int32 usOffsetPoxY = 8;
    if (has_usoffsetpoxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usoffsetpoxy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 usBirthDelay = 9;
    if (has_usbirthdelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usbirthdelay());
    }

    // optional uint32 usIsRedFish = 10;
    if (has_usisredfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usisredfish());
    }

    // optional uint32 usGroupId = 11;
    if (has_usgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usgroupid());
    }

  }
  // repeated uint32 subFishKinds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->subfishkinds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subfishkinds(i));
    }
    total_size += 1 * this->subfishkinds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishInfo::MergeFrom(const FishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  subfishkinds_.MergeFrom(from.subfishkinds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usfishkind()) {
      set_usfishkind(from.usfishkind());
    }
    if (from.has_usfishid()) {
      set_usfishid(from.usfishid());
    }
    if (from.has_ustraceid()) {
      set_ustraceid(from.ustraceid());
    }
    if (from.has_usstartindex()) {
      set_usstartindex(from.usstartindex());
    }
    if (from.has_usoffsetindex()) {
      set_usoffsetindex(from.usoffsetindex());
    }
    if (from.has_usoffsetposx()) {
      set_usoffsetposx(from.usoffsetposx());
    }
    if (from.has_usoffsetpoxy()) {
      set_usoffsetpoxy(from.usoffsetpoxy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usbirthdelay()) {
      set_usbirthdelay(from.usbirthdelay());
    }
    if (from.has_usisredfish()) {
      set_usisredfish(from.usisredfish());
    }
    if (from.has_usgroupid()) {
      set_usgroupid(from.usgroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishInfo::CopyFrom(const FishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishInfo::IsInitialized() const {

  return true;
}

void FishInfo::Swap(FishInfo* other) {
  if (other != this) {
    std::swap(usfishkind_, other->usfishkind_);
    std::swap(usfishid_, other->usfishid_);
    subfishkinds_.Swap(&other->subfishkinds_);
    std::swap(ustraceid_, other->ustraceid_);
    std::swap(usstartindex_, other->usstartindex_);
    std::swap(usoffsetindex_, other->usoffsetindex_);
    std::swap(usoffsetposx_, other->usoffsetposx_);
    std::swap(usoffsetpoxy_, other->usoffsetpoxy_);
    std::swap(usbirthdelay_, other->usbirthdelay_);
    std::swap(usisredfish_, other->usisredfish_);
    std::swap(usgroupid_, other->usgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishInfo_descriptor_;
  metadata.reflection = FishInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishList::kFishesFieldNumber;
#endif  // !_MSC_VER

FishList::FishList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishList::InitAsDefaultInstance() {
}

FishList::FishList(const FishList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishList::~FishList() {
  SharedDtor();
}

void FishList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishList_descriptor_;
}

const FishList& FishList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

FishList* FishList::default_instance_ = NULL;

FishList* FishList::New() const {
  return new FishList;
}

void FishList::Clear() {
  fishes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gamefish.FishInfo Fishes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Fishes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Fishes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gamefish.FishInfo Fishes = 1;
  for (int i = 0; i < this->fishes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fishes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gamefish.FishInfo Fishes = 1;
  for (int i = 0; i < this->fishes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fishes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishList::ByteSize() const {
  int total_size = 0;

  // repeated .gamefish.FishInfo Fishes = 1;
  total_size += 1 * this->fishes_size();
  for (int i = 0; i < this->fishes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishList::MergeFrom(const FishList& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishes_.MergeFrom(from.fishes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishList::CopyFrom(const FishList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishList::IsInitialized() const {

  return true;
}

void FishList::Swap(FishList* other) {
  if (other != this) {
    fishes_.Swap(&other->fishes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishList_descriptor_;
  metadata.reflection = FishList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cgUserReady::kUsResveredFieldNumber;
#endif  // !_MSC_VER

cgUserReady::cgUserReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cgUserReady::InitAsDefaultInstance() {
}

cgUserReady::cgUserReady(const cgUserReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cgUserReady::SharedCtor() {
  _cached_size_ = 0;
  usresvered_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cgUserReady::~cgUserReady() {
  SharedDtor();
}

void cgUserReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cgUserReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cgUserReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cgUserReady_descriptor_;
}

const cgUserReady& cgUserReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

cgUserReady* cgUserReady::default_instance_ = NULL;

cgUserReady* cgUserReady::New() const {
  return new cgUserReady;
}

void cgUserReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usresvered_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cgUserReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usResvered = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usresvered_)));
          set_has_usresvered();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cgUserReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usResvered = 1;
  if (has_usresvered()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usresvered(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cgUserReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usResvered = 1;
  if (has_usresvered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usresvered(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cgUserReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usResvered = 1;
    if (has_usresvered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usresvered());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cgUserReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cgUserReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cgUserReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cgUserReady::MergeFrom(const cgUserReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usresvered()) {
      set_usresvered(from.usresvered());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cgUserReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cgUserReady::CopyFrom(const cgUserReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cgUserReady::IsInitialized() const {

  return true;
}

void cgUserReady::Swap(cgUserReady* other) {
  if (other != this) {
    std::swap(usresvered_, other->usresvered_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cgUserReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cgUserReady_descriptor_;
  metadata.reflection = cgUserReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShootBulletReq::kUsBulletIdFieldNumber;
const int ShootBulletReq::kSAngleFieldNumber;
const int ShootBulletReq::kByCannonLevelIndexFieldNumber;
#endif  // !_MSC_VER

ShootBulletReq::ShootBulletReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShootBulletReq::InitAsDefaultInstance() {
}

ShootBulletReq::ShootBulletReq(const ShootBulletReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShootBulletReq::SharedCtor() {
  _cached_size_ = 0;
  usbulletid_ = 0;
  sangle_ = 0;
  bycannonlevelindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShootBulletReq::~ShootBulletReq() {
  SharedDtor();
}

void ShootBulletReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShootBulletReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShootBulletReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShootBulletReq_descriptor_;
}

const ShootBulletReq& ShootBulletReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ShootBulletReq* ShootBulletReq::default_instance_ = NULL;

ShootBulletReq* ShootBulletReq::New() const {
  return new ShootBulletReq;
}

void ShootBulletReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usbulletid_ = 0;
    sangle_ = 0;
    bycannonlevelindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShootBulletReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usBulletId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbulletid_)));
          set_has_usbulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sAngle;
        break;
      }

      // optional int32 sAngle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sangle_)));
          set_has_sangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_byCannonLevelIndex;
        break;
      }

      // optional int32 byCannonLevelIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byCannonLevelIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bycannonlevelindex_)));
          set_has_bycannonlevelindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShootBulletReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usBulletId = 1;
  if (has_usbulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usbulletid(), output);
  }

  // optional int32 sAngle = 2;
  if (has_sangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sangle(), output);
  }

  // optional int32 byCannonLevelIndex = 3;
  if (has_bycannonlevelindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bycannonlevelindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShootBulletReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usBulletId = 1;
  if (has_usbulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usbulletid(), target);
  }

  // optional int32 sAngle = 2;
  if (has_sangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sangle(), target);
  }

  // optional int32 byCannonLevelIndex = 3;
  if (has_bycannonlevelindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bycannonlevelindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShootBulletReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usBulletId = 1;
    if (has_usbulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbulletid());
    }

    // optional int32 sAngle = 2;
    if (has_sangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sangle());
    }

    // optional int32 byCannonLevelIndex = 3;
    if (has_bycannonlevelindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bycannonlevelindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShootBulletReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShootBulletReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShootBulletReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShootBulletReq::MergeFrom(const ShootBulletReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usbulletid()) {
      set_usbulletid(from.usbulletid());
    }
    if (from.has_sangle()) {
      set_sangle(from.sangle());
    }
    if (from.has_bycannonlevelindex()) {
      set_bycannonlevelindex(from.bycannonlevelindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShootBulletReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShootBulletReq::CopyFrom(const ShootBulletReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShootBulletReq::IsInitialized() const {

  return true;
}

void ShootBulletReq::Swap(ShootBulletReq* other) {
  if (other != this) {
    std::swap(usbulletid_, other->usbulletid_);
    std::swap(sangle_, other->sangle_);
    std::swap(bycannonlevelindex_, other->bycannonlevelindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShootBulletReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShootBulletReq_descriptor_;
  metadata.reflection = ShootBulletReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShootBulletRsp::kUsBulletIdFieldNumber;
const int ShootBulletRsp::kSAngleFieldNumber;
const int ShootBulletRsp::kUsSpeedIndexFieldNumber;
const int ShootBulletRsp::kUsIntervalIndexFieldNumber;
const int ShootBulletRsp::kUsLevelIndexFieldNumber;
const int ShootBulletRsp::kUsChairIdFieldNumber;
const int ShootBulletRsp::kUsErrorCodeFieldNumber;
const int ShootBulletRsp::kUsProcUserChairIdFieldNumber;
#endif  // !_MSC_VER

ShootBulletRsp::ShootBulletRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShootBulletRsp::InitAsDefaultInstance() {
}

ShootBulletRsp::ShootBulletRsp(const ShootBulletRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShootBulletRsp::SharedCtor() {
  _cached_size_ = 0;
  usbulletid_ = 0;
  sangle_ = 0;
  usspeedindex_ = 0;
  usintervalindex_ = 0;
  uslevelindex_ = 0;
  uschairid_ = 0;
  userrorcode_ = 0;
  usprocuserchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShootBulletRsp::~ShootBulletRsp() {
  SharedDtor();
}

void ShootBulletRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShootBulletRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShootBulletRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShootBulletRsp_descriptor_;
}

const ShootBulletRsp& ShootBulletRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ShootBulletRsp* ShootBulletRsp::default_instance_ = NULL;

ShootBulletRsp* ShootBulletRsp::New() const {
  return new ShootBulletRsp;
}

void ShootBulletRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usbulletid_ = 0;
    sangle_ = 0;
    usspeedindex_ = 0;
    usintervalindex_ = 0;
    uslevelindex_ = 0;
    uschairid_ = 0;
    userrorcode_ = 0;
    usprocuserchairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShootBulletRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usBulletId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbulletid_)));
          set_has_usbulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sAngle;
        break;
      }

      // optional int32 sAngle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sangle_)));
          set_has_sangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usSpeedIndex;
        break;
      }

      // optional int32 usSpeedIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSpeedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usspeedindex_)));
          set_has_usspeedindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usIntervalIndex;
        break;
      }

      // optional int32 usIntervalIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usIntervalIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usintervalindex_)));
          set_has_usintervalindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usLevelIndex;
        break;
      }

      // optional int32 usLevelIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usLevelIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uslevelindex_)));
          set_has_uslevelindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usChairId;
        break;
      }

      // optional int32 usChairId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usChairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_usErrorCode;
        break;
      }

      // optional int32 usErrorCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userrorcode_)));
          set_has_userrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_usProcUserChairId;
        break;
      }

      // optional int32 usProcUserChairId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usProcUserChairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usprocuserchairid_)));
          set_has_usprocuserchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShootBulletRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usBulletId = 1;
  if (has_usbulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usbulletid(), output);
  }

  // optional int32 sAngle = 2;
  if (has_sangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sangle(), output);
  }

  // optional int32 usSpeedIndex = 3;
  if (has_usspeedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usspeedindex(), output);
  }

  // optional int32 usIntervalIndex = 4;
  if (has_usintervalindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usintervalindex(), output);
  }

  // optional int32 usLevelIndex = 5;
  if (has_uslevelindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uslevelindex(), output);
  }

  // optional int32 usChairId = 6;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uschairid(), output);
  }

  // optional int32 usErrorCode = 7;
  if (has_userrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->userrorcode(), output);
  }

  // optional int32 usProcUserChairId = 8;
  if (has_usprocuserchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->usprocuserchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShootBulletRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usBulletId = 1;
  if (has_usbulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usbulletid(), target);
  }

  // optional int32 sAngle = 2;
  if (has_sangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sangle(), target);
  }

  // optional int32 usSpeedIndex = 3;
  if (has_usspeedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usspeedindex(), target);
  }

  // optional int32 usIntervalIndex = 4;
  if (has_usintervalindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usintervalindex(), target);
  }

  // optional int32 usLevelIndex = 5;
  if (has_uslevelindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uslevelindex(), target);
  }

  // optional int32 usChairId = 6;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uschairid(), target);
  }

  // optional int32 usErrorCode = 7;
  if (has_userrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->userrorcode(), target);
  }

  // optional int32 usProcUserChairId = 8;
  if (has_usprocuserchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->usprocuserchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShootBulletRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usBulletId = 1;
    if (has_usbulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbulletid());
    }

    // optional int32 sAngle = 2;
    if (has_sangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sangle());
    }

    // optional int32 usSpeedIndex = 3;
    if (has_usspeedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usspeedindex());
    }

    // optional int32 usIntervalIndex = 4;
    if (has_usintervalindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usintervalindex());
    }

    // optional int32 usLevelIndex = 5;
    if (has_uslevelindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uslevelindex());
    }

    // optional int32 usChairId = 6;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usErrorCode = 7;
    if (has_userrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userrorcode());
    }

    // optional int32 usProcUserChairId = 8;
    if (has_usprocuserchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usprocuserchairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShootBulletRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShootBulletRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShootBulletRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShootBulletRsp::MergeFrom(const ShootBulletRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usbulletid()) {
      set_usbulletid(from.usbulletid());
    }
    if (from.has_sangle()) {
      set_sangle(from.sangle());
    }
    if (from.has_usspeedindex()) {
      set_usspeedindex(from.usspeedindex());
    }
    if (from.has_usintervalindex()) {
      set_usintervalindex(from.usintervalindex());
    }
    if (from.has_uslevelindex()) {
      set_uslevelindex(from.uslevelindex());
    }
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_userrorcode()) {
      set_userrorcode(from.userrorcode());
    }
    if (from.has_usprocuserchairid()) {
      set_usprocuserchairid(from.usprocuserchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShootBulletRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShootBulletRsp::CopyFrom(const ShootBulletRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShootBulletRsp::IsInitialized() const {

  return true;
}

void ShootBulletRsp::Swap(ShootBulletRsp* other) {
  if (other != this) {
    std::swap(usbulletid_, other->usbulletid_);
    std::swap(sangle_, other->sangle_);
    std::swap(usspeedindex_, other->usspeedindex_);
    std::swap(usintervalindex_, other->usintervalindex_);
    std::swap(uslevelindex_, other->uslevelindex_);
    std::swap(uschairid_, other->uschairid_);
    std::swap(userrorcode_, other->userrorcode_);
    std::swap(usprocuserchairid_, other->usprocuserchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShootBulletRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShootBulletRsp_descriptor_;
  metadata.reflection = ShootBulletRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cgBulletSpeed::kUsSpeedIndexFieldNumber;
const int cgBulletSpeed::kUsIntervalIndexFieldNumber;
#endif  // !_MSC_VER

cgBulletSpeed::cgBulletSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cgBulletSpeed::InitAsDefaultInstance() {
}

cgBulletSpeed::cgBulletSpeed(const cgBulletSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cgBulletSpeed::SharedCtor() {
  _cached_size_ = 0;
  usspeedindex_ = 0;
  usintervalindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cgBulletSpeed::~cgBulletSpeed() {
  SharedDtor();
}

void cgBulletSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cgBulletSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cgBulletSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cgBulletSpeed_descriptor_;
}

const cgBulletSpeed& cgBulletSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

cgBulletSpeed* cgBulletSpeed::default_instance_ = NULL;

cgBulletSpeed* cgBulletSpeed::New() const {
  return new cgBulletSpeed;
}

void cgBulletSpeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usspeedindex_ = 0;
    usintervalindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cgBulletSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usSpeedIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usspeedindex_)));
          set_has_usspeedindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usIntervalIndex;
        break;
      }

      // optional int32 usIntervalIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usIntervalIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usintervalindex_)));
          set_has_usintervalindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cgBulletSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usSpeedIndex = 1;
  if (has_usspeedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usspeedindex(), output);
  }

  // optional int32 usIntervalIndex = 2;
  if (has_usintervalindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usintervalindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cgBulletSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usSpeedIndex = 1;
  if (has_usspeedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usspeedindex(), target);
  }

  // optional int32 usIntervalIndex = 2;
  if (has_usintervalindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usintervalindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cgBulletSpeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usSpeedIndex = 1;
    if (has_usspeedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usspeedindex());
    }

    // optional int32 usIntervalIndex = 2;
    if (has_usintervalindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usintervalindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cgBulletSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cgBulletSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cgBulletSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cgBulletSpeed::MergeFrom(const cgBulletSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usspeedindex()) {
      set_usspeedindex(from.usspeedindex());
    }
    if (from.has_usintervalindex()) {
      set_usintervalindex(from.usintervalindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cgBulletSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cgBulletSpeed::CopyFrom(const cgBulletSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cgBulletSpeed::IsInitialized() const {

  return true;
}

void cgBulletSpeed::Swap(cgBulletSpeed* other) {
  if (other != this) {
    std::swap(usspeedindex_, other->usspeedindex_);
    std::swap(usintervalindex_, other->usintervalindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cgBulletSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cgBulletSpeed_descriptor_;
  metadata.reflection = cgBulletSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcBulletSpeed::kUsChairIdFieldNumber;
const int gcBulletSpeed::kUsSpeedIndexFieldNumber;
const int gcBulletSpeed::kUsIntervalIndexFieldNumber;
const int gcBulletSpeed::kUsErrorCodeFieldNumber;
#endif  // !_MSC_VER

gcBulletSpeed::gcBulletSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcBulletSpeed::InitAsDefaultInstance() {
}

gcBulletSpeed::gcBulletSpeed(const gcBulletSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcBulletSpeed::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usspeedindex_ = 0;
  usintervalindex_ = 0;
  userrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcBulletSpeed::~gcBulletSpeed() {
  SharedDtor();
}

void gcBulletSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcBulletSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcBulletSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcBulletSpeed_descriptor_;
}

const gcBulletSpeed& gcBulletSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcBulletSpeed* gcBulletSpeed::default_instance_ = NULL;

gcBulletSpeed* gcBulletSpeed::New() const {
  return new gcBulletSpeed;
}

void gcBulletSpeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usspeedindex_ = 0;
    usintervalindex_ = 0;
    userrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcBulletSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usSpeedIndex;
        break;
      }

      // optional int32 usSpeedIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSpeedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usspeedindex_)));
          set_has_usspeedindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usIntervalIndex;
        break;
      }

      // optional int32 usIntervalIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usIntervalIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usintervalindex_)));
          set_has_usintervalindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usErrorCode;
        break;
      }

      // optional int32 usErrorCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userrorcode_)));
          set_has_userrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcBulletSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usSpeedIndex = 2;
  if (has_usspeedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usspeedindex(), output);
  }

  // optional int32 usIntervalIndex = 3;
  if (has_usintervalindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usintervalindex(), output);
  }

  // optional int32 usErrorCode = 4;
  if (has_userrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcBulletSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usSpeedIndex = 2;
  if (has_usspeedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usspeedindex(), target);
  }

  // optional int32 usIntervalIndex = 3;
  if (has_usintervalindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usintervalindex(), target);
  }

  // optional int32 usErrorCode = 4;
  if (has_userrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcBulletSpeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usSpeedIndex = 2;
    if (has_usspeedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usspeedindex());
    }

    // optional int32 usIntervalIndex = 3;
    if (has_usintervalindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usintervalindex());
    }

    // optional int32 usErrorCode = 4;
    if (has_userrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcBulletSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcBulletSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcBulletSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcBulletSpeed::MergeFrom(const gcBulletSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usspeedindex()) {
      set_usspeedindex(from.usspeedindex());
    }
    if (from.has_usintervalindex()) {
      set_usintervalindex(from.usintervalindex());
    }
    if (from.has_userrorcode()) {
      set_userrorcode(from.userrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcBulletSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcBulletSpeed::CopyFrom(const gcBulletSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcBulletSpeed::IsInitialized() const {

  return true;
}

void gcBulletSpeed::Swap(gcBulletSpeed* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usspeedindex_, other->usspeedindex_);
    std::swap(usintervalindex_, other->usintervalindex_);
    std::swap(userrorcode_, other->userrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcBulletSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcBulletSpeed_descriptor_;
  metadata.reflection = gcBulletSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcStatus::kUsStatusFieldNumber;
#endif  // !_MSC_VER

gcStatus::gcStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcStatus::InitAsDefaultInstance() {
}

gcStatus::gcStatus(const gcStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcStatus::SharedCtor() {
  _cached_size_ = 0;
  usstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcStatus::~gcStatus() {
  SharedDtor();
}

void gcStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcStatus_descriptor_;
}

const gcStatus& gcStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcStatus* gcStatus::default_instance_ = NULL;

gcStatus* gcStatus::New() const {
  return new gcStatus;
}

void gcStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatus_)));
          set_has_usstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usStatus = 1;
  if (has_usstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usStatus = 1;
  if (has_usstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usStatus = 1;
    if (has_usstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcStatus::MergeFrom(const gcStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usstatus()) {
      set_usstatus(from.usstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcStatus::CopyFrom(const gcStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcStatus::IsInitialized() const {

  return true;
}

void gcStatus::Swap(gcStatus* other) {
  if (other != this) {
    std::swap(usstatus_, other->usstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcStatus_descriptor_;
  metadata.reflection = gcStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cgHitfish::kFishIdFieldNumber;
const int cgHitfish::kSubFishIdFieldNumber;
const int cgHitfish::kBulletidFieldNumber;
const int cgHitfish::kUsRobotChairIdFieldNumber;
#endif  // !_MSC_VER

cgHitfish::cgHitfish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cgHitfish::InitAsDefaultInstance() {
}

cgHitfish::cgHitfish(const cgHitfish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cgHitfish::SharedCtor() {
  _cached_size_ = 0;
  fishid_ = 0;
  subfishid_ = 0;
  bulletid_ = 0;
  usrobotchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cgHitfish::~cgHitfish() {
  SharedDtor();
}

void cgHitfish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cgHitfish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cgHitfish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cgHitfish_descriptor_;
}

const cgHitfish& cgHitfish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

cgHitfish* cgHitfish::default_instance_ = NULL;

cgHitfish* cgHitfish::New() const {
  return new cgHitfish;
}

void cgHitfish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fishid_ = 0;
    subfishid_ = 0;
    bulletid_ = 0;
    usrobotchairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cgHitfish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subFishId;
        break;
      }

      // optional int32 subFishId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subfishid_)));
          set_has_subfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bulletid;
        break;
      }

      // optional int32 bulletid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usRobotChairId;
        break;
      }

      // optional int32 usRobotChairId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usRobotChairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usrobotchairid_)));
          set_has_usrobotchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cgHitfish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fishId = 1;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  // optional int32 subFishId = 2;
  if (has_subfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subfishid(), output);
  }

  // optional int32 bulletid = 3;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bulletid(), output);
  }

  // optional int32 usRobotChairId = 4;
  if (has_usrobotchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usrobotchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cgHitfish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fishId = 1;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  // optional int32 subFishId = 2;
  if (has_subfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subfishid(), target);
  }

  // optional int32 bulletid = 3;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bulletid(), target);
  }

  // optional int32 usRobotChairId = 4;
  if (has_usrobotchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usrobotchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cgHitfish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fishId = 1;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

    // optional int32 subFishId = 2;
    if (has_subfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subfishid());
    }

    // optional int32 bulletid = 3;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletid());
    }

    // optional int32 usRobotChairId = 4;
    if (has_usrobotchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usrobotchairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cgHitfish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cgHitfish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cgHitfish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cgHitfish::MergeFrom(const cgHitfish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_subfishid()) {
      set_subfishid(from.subfishid());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_usrobotchairid()) {
      set_usrobotchairid(from.usrobotchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cgHitfish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cgHitfish::CopyFrom(const cgHitfish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cgHitfish::IsInitialized() const {

  return true;
}

void cgHitfish::Swap(cgHitfish* other) {
  if (other != this) {
    std::swap(fishid_, other->fishid_);
    std::swap(subfishid_, other->subfishid_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(usrobotchairid_, other->usrobotchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cgHitfish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cgHitfish_descriptor_;
  metadata.reflection = cgHitfish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcKillSubFish::kFishIdFieldNumber;
const int gcKillSubFish::kFishTypeFieldNumber;
const int gcKillSubFish::kMultipleFieldNumber;
const int gcKillSubFish::kScoreFieldNumber;
#endif  // !_MSC_VER

gcKillSubFish::gcKillSubFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcKillSubFish::InitAsDefaultInstance() {
}

gcKillSubFish::gcKillSubFish(const gcKillSubFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcKillSubFish::SharedCtor() {
  _cached_size_ = 0;
  fishid_ = 0;
  fishtype_ = 0;
  multiple_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcKillSubFish::~gcKillSubFish() {
  SharedDtor();
}

void gcKillSubFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcKillSubFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcKillSubFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcKillSubFish_descriptor_;
}

const gcKillSubFish& gcKillSubFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcKillSubFish* gcKillSubFish::default_instance_ = NULL;

gcKillSubFish* gcKillSubFish::New() const {
  return new gcKillSubFish;
}

void gcKillSubFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fishid_ = 0;
    fishtype_ = 0;
    multiple_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcKillSubFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishType;
        break;
      }

      // optional int32 fishType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishtype_)));
          set_has_fishtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_multiple;
        break;
      }

      // optional int32 multiple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcKillSubFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fishId = 1;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  // optional int32 fishType = 2;
  if (has_fishtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishtype(), output);
  }

  // optional int32 multiple = 3;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->multiple(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcKillSubFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fishId = 1;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  // optional int32 fishType = 2;
  if (has_fishtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishtype(), target);
  }

  // optional int32 multiple = 3;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->multiple(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcKillSubFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fishId = 1;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

    // optional int32 fishType = 2;
    if (has_fishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishtype());
    }

    // optional int32 multiple = 3;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiple());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcKillSubFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcKillSubFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcKillSubFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcKillSubFish::MergeFrom(const gcKillSubFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_fishtype()) {
      set_fishtype(from.fishtype());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcKillSubFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcKillSubFish::CopyFrom(const gcKillSubFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcKillSubFish::IsInitialized() const {

  return true;
}

void gcKillSubFish::Swap(gcKillSubFish* other) {
  if (other != this) {
    std::swap(fishid_, other->fishid_);
    std::swap(fishtype_, other->fishtype_);
    std::swap(multiple_, other->multiple_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcKillSubFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcKillSubFish_descriptor_;
  metadata.reflection = gcKillSubFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillFishRsp::kBombUIDFieldNumber;
const int KillFishRsp::kMainFishUIDFieldNumber;
const int KillFishRsp::kMainFishIdFieldNumber;
const int KillFishRsp::kMainFishTypeFieldNumber;
const int KillFishRsp::kMainMultipleFieldNumber;
const int KillFishRsp::kMainScoreFieldNumber;
const int KillFishRsp::kTotalScoreFieldNumber;
const int KillFishRsp::kTotalRatioFieldNumber;
const int KillFishRsp::kChairIdFieldNumber;
const int KillFishRsp::kUsErrorCodeFieldNumber;
const int KillFishRsp::kSubFishCountFieldNumber;
const int KillFishRsp::kSubFishesFieldNumber;
const int KillFishRsp::kBulletidFieldNumber;
const int KillFishRsp::kBombFishIdFieldNumber;
#endif  // !_MSC_VER

KillFishRsp::KillFishRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillFishRsp::InitAsDefaultInstance() {
}

KillFishRsp::KillFishRsp(const KillFishRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillFishRsp::SharedCtor() {
  _cached_size_ = 0;
  bombuid_ = 0;
  mainfishuid_ = 0;
  mainfishid_ = 0;
  mainfishtype_ = 0;
  mainmultiple_ = 0;
  mainscore_ = 0;
  totalscore_ = 0;
  totalratio_ = 0;
  chairid_ = 0;
  userrorcode_ = 0;
  subfishcount_ = 0;
  bulletid_ = 0;
  bombfishid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillFishRsp::~KillFishRsp() {
  SharedDtor();
}

void KillFishRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillFishRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillFishRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillFishRsp_descriptor_;
}

const KillFishRsp& KillFishRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

KillFishRsp* KillFishRsp::default_instance_ = NULL;

KillFishRsp* KillFishRsp::New() const {
  return new KillFishRsp;
}

void KillFishRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bombuid_ = 0;
    mainfishuid_ = 0;
    mainfishid_ = 0;
    mainfishtype_ = 0;
    mainmultiple_ = 0;
    mainscore_ = 0;
    totalscore_ = 0;
    totalratio_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chairid_ = 0;
    userrorcode_ = 0;
    subfishcount_ = 0;
    bulletid_ = 0;
    bombfishid_ = 0;
  }
  subfishes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillFishRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bombUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bombuid_)));
          set_has_bombuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mainFishUID;
        break;
      }

      // optional int32 mainFishUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainFishUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainfishuid_)));
          set_has_mainfishuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mainFishId;
        break;
      }

      // optional int32 mainFishId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainfishid_)));
          set_has_mainfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mainFishType;
        break;
      }

      // optional int32 mainFishType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainFishType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainfishtype_)));
          set_has_mainfishtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mainMultiple;
        break;
      }

      // optional int32 mainMultiple = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainmultiple_)));
          set_has_mainmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mainScore;
        break;
      }

      // optional int32 mainScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainscore_)));
          set_has_mainscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalScore;
        break;
      }

      // optional int32 totalScore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_totalRatio;
        break;
      }

      // optional int32 totalRatio = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalratio_)));
          set_has_totalratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_chairId;
        break;
      }

      // optional int32 chairId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_usErrorCode;
        break;
      }

      // optional int32 usErrorCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userrorcode_)));
          set_has_userrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_subFishCount;
        break;
      }

      // optional int32 subFishCount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subFishCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subfishcount_)));
          set_has_subfishcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_SubFishes;
        break;
      }

      // repeated .gamefish.KillFishRsp SubFishes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubFishes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subfishes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_SubFishes;
        if (input->ExpectTag(104)) goto parse_bulletid;
        break;
      }

      // optional int32 bulletid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bombFishId;
        break;
      }

      // optional int32 bombFishId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bombFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bombfishid_)));
          set_has_bombfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillFishRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bombUID = 1;
  if (has_bombuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bombuid(), output);
  }

  // optional int32 mainFishUID = 2;
  if (has_mainfishuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mainfishuid(), output);
  }

  // optional int32 mainFishId = 3;
  if (has_mainfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mainfishid(), output);
  }

  // optional int32 mainFishType = 4;
  if (has_mainfishtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mainfishtype(), output);
  }

  // optional int32 mainMultiple = 5;
  if (has_mainmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mainmultiple(), output);
  }

  // optional int32 mainScore = 6;
  if (has_mainscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mainscore(), output);
  }

  // optional int32 totalScore = 7;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalscore(), output);
  }

  // optional int32 totalRatio = 8;
  if (has_totalratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalratio(), output);
  }

  // optional int32 chairId = 9;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->chairid(), output);
  }

  // optional int32 usErrorCode = 10;
  if (has_userrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->userrorcode(), output);
  }

  // optional int32 subFishCount = 11;
  if (has_subfishcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->subfishcount(), output);
  }

  // repeated .gamefish.KillFishRsp SubFishes = 12;
  for (int i = 0; i < this->subfishes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->subfishes(i), output);
  }

  // optional int32 bulletid = 13;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bulletid(), output);
  }

  // optional int32 bombFishId = 14;
  if (has_bombfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bombfishid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillFishRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bombUID = 1;
  if (has_bombuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bombuid(), target);
  }

  // optional int32 mainFishUID = 2;
  if (has_mainfishuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mainfishuid(), target);
  }

  // optional int32 mainFishId = 3;
  if (has_mainfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mainfishid(), target);
  }

  // optional int32 mainFishType = 4;
  if (has_mainfishtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mainfishtype(), target);
  }

  // optional int32 mainMultiple = 5;
  if (has_mainmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mainmultiple(), target);
  }

  // optional int32 mainScore = 6;
  if (has_mainscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mainscore(), target);
  }

  // optional int32 totalScore = 7;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalscore(), target);
  }

  // optional int32 totalRatio = 8;
  if (has_totalratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalratio(), target);
  }

  // optional int32 chairId = 9;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->chairid(), target);
  }

  // optional int32 usErrorCode = 10;
  if (has_userrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->userrorcode(), target);
  }

  // optional int32 subFishCount = 11;
  if (has_subfishcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->subfishcount(), target);
  }

  // repeated .gamefish.KillFishRsp SubFishes = 12;
  for (int i = 0; i < this->subfishes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->subfishes(i), target);
  }

  // optional int32 bulletid = 13;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bulletid(), target);
  }

  // optional int32 bombFishId = 14;
  if (has_bombfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->bombfishid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillFishRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bombUID = 1;
    if (has_bombuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bombuid());
    }

    // optional int32 mainFishUID = 2;
    if (has_mainfishuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainfishuid());
    }

    // optional int32 mainFishId = 3;
    if (has_mainfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainfishid());
    }

    // optional int32 mainFishType = 4;
    if (has_mainfishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainfishtype());
    }

    // optional int32 mainMultiple = 5;
    if (has_mainmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainmultiple());
    }

    // optional int32 mainScore = 6;
    if (has_mainscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainscore());
    }

    // optional int32 totalScore = 7;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 totalRatio = 8;
    if (has_totalratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalratio());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 chairId = 9;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 usErrorCode = 10;
    if (has_userrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userrorcode());
    }

    // optional int32 subFishCount = 11;
    if (has_subfishcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subfishcount());
    }

    // optional int32 bulletid = 13;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletid());
    }

    // optional int32 bombFishId = 14;
    if (has_bombfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bombfishid());
    }

  }
  // repeated .gamefish.KillFishRsp SubFishes = 12;
  total_size += 1 * this->subfishes_size();
  for (int i = 0; i < this->subfishes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subfishes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillFishRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillFishRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillFishRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillFishRsp::MergeFrom(const KillFishRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  subfishes_.MergeFrom(from.subfishes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bombuid()) {
      set_bombuid(from.bombuid());
    }
    if (from.has_mainfishuid()) {
      set_mainfishuid(from.mainfishuid());
    }
    if (from.has_mainfishid()) {
      set_mainfishid(from.mainfishid());
    }
    if (from.has_mainfishtype()) {
      set_mainfishtype(from.mainfishtype());
    }
    if (from.has_mainmultiple()) {
      set_mainmultiple(from.mainmultiple());
    }
    if (from.has_mainscore()) {
      set_mainscore(from.mainscore());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_totalratio()) {
      set_totalratio(from.totalratio());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_userrorcode()) {
      set_userrorcode(from.userrorcode());
    }
    if (from.has_subfishcount()) {
      set_subfishcount(from.subfishcount());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_bombfishid()) {
      set_bombfishid(from.bombfishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillFishRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillFishRsp::CopyFrom(const KillFishRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillFishRsp::IsInitialized() const {

  return true;
}

void KillFishRsp::Swap(KillFishRsp* other) {
  if (other != this) {
    std::swap(bombuid_, other->bombuid_);
    std::swap(mainfishuid_, other->mainfishuid_);
    std::swap(mainfishid_, other->mainfishid_);
    std::swap(mainfishtype_, other->mainfishtype_);
    std::swap(mainmultiple_, other->mainmultiple_);
    std::swap(mainscore_, other->mainscore_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(totalratio_, other->totalratio_);
    std::swap(chairid_, other->chairid_);
    std::swap(userrorcode_, other->userrorcode_);
    std::swap(subfishcount_, other->subfishcount_);
    subfishes_.Swap(&other->subfishes_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(bombfishid_, other->bombfishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillFishRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillFishRsp_descriptor_;
  metadata.reflection = KillFishRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cgAutoShoot::kOnOffFieldNumber;
#endif  // !_MSC_VER

cgAutoShoot::cgAutoShoot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cgAutoShoot::InitAsDefaultInstance() {
}

cgAutoShoot::cgAutoShoot(const cgAutoShoot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cgAutoShoot::SharedCtor() {
  _cached_size_ = 0;
  onoff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cgAutoShoot::~cgAutoShoot() {
  SharedDtor();
}

void cgAutoShoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cgAutoShoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cgAutoShoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cgAutoShoot_descriptor_;
}

const cgAutoShoot& cgAutoShoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

cgAutoShoot* cgAutoShoot::default_instance_ = NULL;

cgAutoShoot* cgAutoShoot::New() const {
  return new cgAutoShoot;
}

void cgAutoShoot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onoff_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cgAutoShoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool onOff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onoff_)));
          set_has_onoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cgAutoShoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool onOff = 1;
  if (has_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->onoff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cgAutoShoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool onOff = 1;
  if (has_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->onoff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cgAutoShoot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool onOff = 1;
    if (has_onoff()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cgAutoShoot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cgAutoShoot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cgAutoShoot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cgAutoShoot::MergeFrom(const cgAutoShoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onoff()) {
      set_onoff(from.onoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cgAutoShoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cgAutoShoot::CopyFrom(const cgAutoShoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cgAutoShoot::IsInitialized() const {

  return true;
}

void cgAutoShoot::Swap(cgAutoShoot* other) {
  if (other != this) {
    std::swap(onoff_, other->onoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cgAutoShoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cgAutoShoot_descriptor_;
  metadata.reflection = cgAutoShoot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcAutoShoot::kChairIdFieldNumber;
const int gcAutoShoot::kOnOffFieldNumber;
const int gcAutoShoot::kUsErrorCodeFieldNumber;
#endif  // !_MSC_VER

gcAutoShoot::gcAutoShoot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcAutoShoot::InitAsDefaultInstance() {
}

gcAutoShoot::gcAutoShoot(const gcAutoShoot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcAutoShoot::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  onoff_ = 0;
  userrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcAutoShoot::~gcAutoShoot() {
  SharedDtor();
}

void gcAutoShoot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcAutoShoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcAutoShoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcAutoShoot_descriptor_;
}

const gcAutoShoot& gcAutoShoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcAutoShoot* gcAutoShoot::default_instance_ = NULL;

gcAutoShoot* gcAutoShoot::New() const {
  return new gcAutoShoot;
}

void gcAutoShoot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    onoff_ = 0;
    userrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcAutoShoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onOff;
        break;
      }

      // optional int32 onOff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onoff_)));
          set_has_onoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usErrorCode;
        break;
      }

      // optional int32 usErrorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userrorcode_)));
          set_has_userrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcAutoShoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 onOff = 2;
  if (has_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onoff(), output);
  }

  // optional int32 usErrorCode = 3;
  if (has_userrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcAutoShoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairId = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 onOff = 2;
  if (has_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onoff(), target);
  }

  // optional int32 usErrorCode = 3;
  if (has_userrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcAutoShoot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 onOff = 2;
    if (has_onoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onoff());
    }

    // optional int32 usErrorCode = 3;
    if (has_userrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcAutoShoot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcAutoShoot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcAutoShoot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcAutoShoot::MergeFrom(const gcAutoShoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_onoff()) {
      set_onoff(from.onoff());
    }
    if (from.has_userrorcode()) {
      set_userrorcode(from.userrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcAutoShoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcAutoShoot::CopyFrom(const gcAutoShoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcAutoShoot::IsInitialized() const {

  return true;
}

void gcAutoShoot::Swap(gcAutoShoot* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(onoff_, other->onoff_);
    std::swap(userrorcode_, other->userrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcAutoShoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcAutoShoot_descriptor_;
  metadata.reflection = gcAutoShoot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cgLockOnOff::kOnOffFieldNumber;
#endif  // !_MSC_VER

cgLockOnOff::cgLockOnOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cgLockOnOff::InitAsDefaultInstance() {
}

cgLockOnOff::cgLockOnOff(const cgLockOnOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cgLockOnOff::SharedCtor() {
  _cached_size_ = 0;
  onoff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cgLockOnOff::~cgLockOnOff() {
  SharedDtor();
}

void cgLockOnOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cgLockOnOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cgLockOnOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cgLockOnOff_descriptor_;
}

const cgLockOnOff& cgLockOnOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

cgLockOnOff* cgLockOnOff::default_instance_ = NULL;

cgLockOnOff* cgLockOnOff::New() const {
  return new cgLockOnOff;
}

void cgLockOnOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onoff_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cgLockOnOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool onOff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onoff_)));
          set_has_onoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cgLockOnOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool onOff = 1;
  if (has_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->onoff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cgLockOnOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool onOff = 1;
  if (has_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->onoff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cgLockOnOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool onOff = 1;
    if (has_onoff()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cgLockOnOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cgLockOnOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cgLockOnOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cgLockOnOff::MergeFrom(const cgLockOnOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onoff()) {
      set_onoff(from.onoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cgLockOnOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cgLockOnOff::CopyFrom(const cgLockOnOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cgLockOnOff::IsInitialized() const {

  return true;
}

void cgLockOnOff::Swap(cgLockOnOff* other) {
  if (other != this) {
    std::swap(onoff_, other->onoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cgLockOnOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cgLockOnOff_descriptor_;
  metadata.reflection = cgLockOnOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcLockOnOff::kChairIdFieldNumber;
const int gcLockOnOff::kOnOffFieldNumber;
const int gcLockOnOff::kUsErrorCodeFieldNumber;
#endif  // !_MSC_VER

gcLockOnOff::gcLockOnOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcLockOnOff::InitAsDefaultInstance() {
}

gcLockOnOff::gcLockOnOff(const gcLockOnOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcLockOnOff::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  onoff_ = false;
  userrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcLockOnOff::~gcLockOnOff() {
  SharedDtor();
}

void gcLockOnOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcLockOnOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcLockOnOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcLockOnOff_descriptor_;
}

const gcLockOnOff& gcLockOnOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcLockOnOff* gcLockOnOff::default_instance_ = NULL;

gcLockOnOff* gcLockOnOff::New() const {
  return new gcLockOnOff;
}

void gcLockOnOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    onoff_ = false;
    userrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcLockOnOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onOff;
        break;
      }

      // optional bool onOff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onoff_)));
          set_has_onoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usErrorCode;
        break;
      }

      // optional int32 usErrorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userrorcode_)));
          set_has_userrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcLockOnOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional bool onOff = 2;
  if (has_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->onoff(), output);
  }

  // optional int32 usErrorCode = 3;
  if (has_userrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcLockOnOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairId = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional bool onOff = 2;
  if (has_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->onoff(), target);
  }

  // optional int32 usErrorCode = 3;
  if (has_userrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcLockOnOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional bool onOff = 2;
    if (has_onoff()) {
      total_size += 1 + 1;
    }

    // optional int32 usErrorCode = 3;
    if (has_userrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcLockOnOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcLockOnOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcLockOnOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcLockOnOff::MergeFrom(const gcLockOnOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_onoff()) {
      set_onoff(from.onoff());
    }
    if (from.has_userrorcode()) {
      set_userrorcode(from.userrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcLockOnOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcLockOnOff::CopyFrom(const gcLockOnOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcLockOnOff::IsInitialized() const {

  return true;
}

void gcLockOnOff::Swap(gcLockOnOff* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(onoff_, other->onoff_);
    std::swap(userrorcode_, other->userrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcLockOnOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcLockOnOff_descriptor_;
  metadata.reflection = gcLockOnOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cgLockFish::kFishIdFieldNumber;
#endif  // !_MSC_VER

cgLockFish::cgLockFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cgLockFish::InitAsDefaultInstance() {
}

cgLockFish::cgLockFish(const cgLockFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cgLockFish::SharedCtor() {
  _cached_size_ = 0;
  fishid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cgLockFish::~cgLockFish() {
  SharedDtor();
}

void cgLockFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cgLockFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cgLockFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cgLockFish_descriptor_;
}

const cgLockFish& cgLockFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

cgLockFish* cgLockFish::default_instance_ = NULL;

cgLockFish* cgLockFish::New() const {
  return new cgLockFish;
}

void cgLockFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fishid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cgLockFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fishId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cgLockFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fishId = 1;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cgLockFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fishId = 1;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fishid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cgLockFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fishId = 1;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cgLockFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cgLockFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cgLockFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cgLockFish::MergeFrom(const cgLockFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cgLockFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cgLockFish::CopyFrom(const cgLockFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cgLockFish::IsInitialized() const {

  return true;
}

void cgLockFish::Swap(cgLockFish* other) {
  if (other != this) {
    std::swap(fishid_, other->fishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cgLockFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cgLockFish_descriptor_;
  metadata.reflection = cgLockFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcLockFish::kChairIdFieldNumber;
const int gcLockFish::kFishIdFieldNumber;
const int gcLockFish::kUsErrorCodeFieldNumber;
#endif  // !_MSC_VER

gcLockFish::gcLockFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcLockFish::InitAsDefaultInstance() {
}

gcLockFish::gcLockFish(const gcLockFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcLockFish::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  fishid_ = 0;
  userrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcLockFish::~gcLockFish() {
  SharedDtor();
}

void gcLockFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcLockFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcLockFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcLockFish_descriptor_;
}

const gcLockFish& gcLockFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcLockFish* gcLockFish::default_instance_ = NULL;

gcLockFish* gcLockFish::New() const {
  return new gcLockFish;
}

void gcLockFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    fishid_ = 0;
    userrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcLockFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishId;
        break;
      }

      // optional int32 fishId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usErrorCode;
        break;
      }

      // optional int32 usErrorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userrorcode_)));
          set_has_userrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcLockFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 fishId = 2;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishid(), output);
  }

  // optional int32 usErrorCode = 3;
  if (has_userrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcLockFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairId = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 fishId = 2;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishid(), target);
  }

  // optional int32 usErrorCode = 3;
  if (has_userrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcLockFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 fishId = 2;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

    // optional int32 usErrorCode = 3;
    if (has_userrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcLockFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcLockFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcLockFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcLockFish::MergeFrom(const gcLockFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_userrorcode()) {
      set_userrorcode(from.userrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcLockFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcLockFish::CopyFrom(const gcLockFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcLockFish::IsInitialized() const {

  return true;
}

void gcLockFish::Swap(gcLockFish* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(fishid_, other->fishid_);
    std::swap(userrorcode_, other->userrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcLockFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcLockFish_descriptor_;
  metadata.reflection = gcLockFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kChairIdFieldNumber;
const int UserInfo::kUserNameFieldNumber;
const int UserInfo::kUserMoneyFieldNumber;
const int UserInfo::kCannonIdFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_money_ = GOOGLE_ULONGLONG(0);
  cannon_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    user_money_ = GOOGLE_ULONGLONG(0);
    cannon_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_money;
        break;
      }

      // optional uint64 user_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_money_)));
          set_has_user_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cannon_id;
        break;
      }

      // optional uint32 cannon_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cannon_id_)));
          set_has_cannon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // optional uint64 user_money = 3;
  if (has_user_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_money(), output);
  }

  // optional uint32 cannon_id = 4;
  if (has_cannon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cannon_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional uint64 user_money = 3;
  if (has_user_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_money(), target);
  }

  // optional uint32 cannon_id = 4;
  if (has_cannon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cannon_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint64 user_money = 3;
    if (has_user_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_money());
    }

    // optional uint32 cannon_id = 4;
    if (has_cannon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cannon_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_user_money()) {
      set_user_money(from.user_money());
    }
    if (from.has_cannon_id()) {
      set_cannon_id(from.cannon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(user_money_, other->user_money_);
    std::swap(cannon_id_, other->cannon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatus::kChairIdFieldNumber;
const int UserStatus::kLockfishOnoffFieldNumber;
const int UserStatus::kLockfishUidFieldNumber;
const int UserStatus::kAutoshootOnoffFieldNumber;
const int UserStatus::kBulletSpeedlevFieldNumber;
#endif  // !_MSC_VER

UserStatus::UserStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStatus::InitAsDefaultInstance() {
}

UserStatus::UserStatus(const UserStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStatus::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  lockfish_onoff_ = false;
  lockfish_uid_ = 0u;
  autoshoot_onoff_ = false;
  bullet_speedlev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatus::~UserStatus() {
  SharedDtor();
}

void UserStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatus_descriptor_;
}

const UserStatus& UserStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

UserStatus* UserStatus::default_instance_ = NULL;

UserStatus* UserStatus::New() const {
  return new UserStatus;
}

void UserStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
    lockfish_onoff_ = false;
    lockfish_uid_ = 0u;
    autoshoot_onoff_ = false;
    bullet_speedlev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lockfish_onoff;
        break;
      }

      // optional bool lockfish_onoff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockfish_onoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lockfish_onoff_)));
          set_has_lockfish_onoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lockfish_uid;
        break;
      }

      // optional uint32 lockfish_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockfish_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockfish_uid_)));
          set_has_lockfish_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_autoshoot_onoff;
        break;
      }

      // optional bool autoshoot_onoff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoshoot_onoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoshoot_onoff_)));
          set_has_autoshoot_onoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bullet_speedlev;
        break;
      }

      // optional uint32 bullet_speedlev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_speedlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_speedlev_)));
          set_has_bullet_speedlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // optional bool lockfish_onoff = 2;
  if (has_lockfish_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lockfish_onoff(), output);
  }

  // optional uint32 lockfish_uid = 3;
  if (has_lockfish_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lockfish_uid(), output);
  }

  // optional bool autoshoot_onoff = 4;
  if (has_autoshoot_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->autoshoot_onoff(), output);
  }

  // optional uint32 bullet_speedlev = 5;
  if (has_bullet_speedlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bullet_speedlev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // optional bool lockfish_onoff = 2;
  if (has_lockfish_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lockfish_onoff(), target);
  }

  // optional uint32 lockfish_uid = 3;
  if (has_lockfish_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lockfish_uid(), target);
  }

  // optional bool autoshoot_onoff = 4;
  if (has_autoshoot_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autoshoot_onoff(), target);
  }

  // optional uint32 bullet_speedlev = 5;
  if (has_bullet_speedlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bullet_speedlev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional bool lockfish_onoff = 2;
    if (has_lockfish_onoff()) {
      total_size += 1 + 1;
    }

    // optional uint32 lockfish_uid = 3;
    if (has_lockfish_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lockfish_uid());
    }

    // optional bool autoshoot_onoff = 4;
    if (has_autoshoot_onoff()) {
      total_size += 1 + 1;
    }

    // optional uint32 bullet_speedlev = 5;
    if (has_bullet_speedlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_speedlev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatus::MergeFrom(const UserStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_lockfish_onoff()) {
      set_lockfish_onoff(from.lockfish_onoff());
    }
    if (from.has_lockfish_uid()) {
      set_lockfish_uid(from.lockfish_uid());
    }
    if (from.has_autoshoot_onoff()) {
      set_autoshoot_onoff(from.autoshoot_onoff());
    }
    if (from.has_bullet_speedlev()) {
      set_bullet_speedlev(from.bullet_speedlev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatus::CopyFrom(const UserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatus::IsInitialized() const {

  return true;
}

void UserStatus::Swap(UserStatus* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(lockfish_onoff_, other->lockfish_onoff_);
    std::swap(lockfish_uid_, other->lockfish_uid_);
    std::swap(autoshoot_onoff_, other->autoshoot_onoff_);
    std::swap(bullet_speedlev_, other->bullet_speedlev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatus_descriptor_;
  metadata.reflection = UserStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatusReq::kReservedFieldNumber;
#endif  // !_MSC_VER

UserStatusReq::UserStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStatusReq::InitAsDefaultInstance() {
}

UserStatusReq::UserStatusReq(const UserStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStatusReq::SharedCtor() {
  _cached_size_ = 0;
  reserved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatusReq::~UserStatusReq() {
  SharedDtor();
}

void UserStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatusReq_descriptor_;
}

const UserStatusReq& UserStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

UserStatusReq* UserStatusReq::default_instance_ = NULL;

UserStatusReq* UserStatusReq::New() const {
  return new UserStatusReq;
}

void UserStatusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserved_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reserved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reserved = 1;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reserved(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reserved = 1;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reserved(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reserved = 1;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatusReq::MergeFrom(const UserStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatusReq::CopyFrom(const UserStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatusReq::IsInitialized() const {

  return true;
}

void UserStatusReq::Swap(UserStatusReq* other) {
  if (other != this) {
    std::swap(reserved_, other->reserved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatusReq_descriptor_;
  metadata.reflection = UserStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatusRsp::kUserstatuslistFieldNumber;
#endif  // !_MSC_VER

UserStatusRsp::UserStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStatusRsp::InitAsDefaultInstance() {
}

UserStatusRsp::UserStatusRsp(const UserStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatusRsp::~UserStatusRsp() {
  SharedDtor();
}

void UserStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatusRsp_descriptor_;
}

const UserStatusRsp& UserStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

UserStatusRsp* UserStatusRsp::default_instance_ = NULL;

UserStatusRsp* UserStatusRsp::New() const {
  return new UserStatusRsp;
}

void UserStatusRsp::Clear() {
  userstatuslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gamefish.UserStatus userstatuslist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userstatuslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userstatuslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userstatuslist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gamefish.UserStatus userstatuslist = 1;
  for (int i = 0; i < this->userstatuslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userstatuslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gamefish.UserStatus userstatuslist = 1;
  for (int i = 0; i < this->userstatuslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userstatuslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStatusRsp::ByteSize() const {
  int total_size = 0;

  // repeated .gamefish.UserStatus userstatuslist = 1;
  total_size += 1 * this->userstatuslist_size();
  for (int i = 0; i < this->userstatuslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userstatuslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatusRsp::MergeFrom(const UserStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userstatuslist_.MergeFrom(from.userstatuslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatusRsp::CopyFrom(const UserStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatusRsp::IsInitialized() const {

  return true;
}

void UserStatusRsp::Swap(UserStatusRsp* other) {
  if (other != this) {
    userstatuslist_.Swap(&other->userstatuslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatusRsp_descriptor_;
  metadata.reflection = UserStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcUserEnterDesk::kUserInfoFieldNumber;
#endif  // !_MSC_VER

gcUserEnterDesk::gcUserEnterDesk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcUserEnterDesk::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::gamefish::UserInfo*>(&::gamefish::UserInfo::default_instance());
}

gcUserEnterDesk::gcUserEnterDesk(const gcUserEnterDesk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcUserEnterDesk::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcUserEnterDesk::~gcUserEnterDesk() {
  SharedDtor();
}

void gcUserEnterDesk::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void gcUserEnterDesk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcUserEnterDesk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcUserEnterDesk_descriptor_;
}

const gcUserEnterDesk& gcUserEnterDesk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcUserEnterDesk* gcUserEnterDesk::default_instance_ = NULL;

gcUserEnterDesk* gcUserEnterDesk::New() const {
  return new gcUserEnterDesk;
}

void gcUserEnterDesk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::gamefish::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcUserEnterDesk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gamefish.UserInfo userInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcUserEnterDesk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .gamefish.UserInfo userInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcUserEnterDesk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .gamefish.UserInfo userInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcUserEnterDesk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gamefish.UserInfo userInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcUserEnterDesk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcUserEnterDesk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcUserEnterDesk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcUserEnterDesk::MergeFrom(const gcUserEnterDesk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::gamefish::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcUserEnterDesk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcUserEnterDesk::CopyFrom(const gcUserEnterDesk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcUserEnterDesk::IsInitialized() const {

  return true;
}

void gcUserEnterDesk::Swap(gcUserEnterDesk* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcUserEnterDesk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcUserEnterDesk_descriptor_;
  metadata.reflection = gcUserEnterDesk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcUserLeaveDesk::kChairIdFieldNumber;
#endif  // !_MSC_VER

gcUserLeaveDesk::gcUserLeaveDesk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcUserLeaveDesk::InitAsDefaultInstance() {
}

gcUserLeaveDesk::gcUserLeaveDesk(const gcUserLeaveDesk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcUserLeaveDesk::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcUserLeaveDesk::~gcUserLeaveDesk() {
  SharedDtor();
}

void gcUserLeaveDesk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcUserLeaveDesk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcUserLeaveDesk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcUserLeaveDesk_descriptor_;
}

const gcUserLeaveDesk& gcUserLeaveDesk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcUserLeaveDesk* gcUserLeaveDesk::default_instance_ = NULL;

gcUserLeaveDesk* gcUserLeaveDesk::New() const {
  return new gcUserLeaveDesk;
}

void gcUserLeaveDesk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcUserLeaveDesk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcUserLeaveDesk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcUserLeaveDesk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcUserLeaveDesk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcUserLeaveDesk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcUserLeaveDesk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcUserLeaveDesk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcUserLeaveDesk::MergeFrom(const gcUserLeaveDesk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcUserLeaveDesk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcUserLeaveDesk::CopyFrom(const gcUserLeaveDesk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcUserLeaveDesk::IsInitialized() const {

  return true;
}

void gcUserLeaveDesk::Swap(gcUserLeaveDesk* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcUserLeaveDesk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcUserLeaveDesk_descriptor_;
  metadata.reflection = gcUserLeaveDesk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcUserDisconnectDesk::kChairIdFieldNumber;
#endif  // !_MSC_VER

gcUserDisconnectDesk::gcUserDisconnectDesk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcUserDisconnectDesk::InitAsDefaultInstance() {
}

gcUserDisconnectDesk::gcUserDisconnectDesk(const gcUserDisconnectDesk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcUserDisconnectDesk::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcUserDisconnectDesk::~gcUserDisconnectDesk() {
  SharedDtor();
}

void gcUserDisconnectDesk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcUserDisconnectDesk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcUserDisconnectDesk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcUserDisconnectDesk_descriptor_;
}

const gcUserDisconnectDesk& gcUserDisconnectDesk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcUserDisconnectDesk* gcUserDisconnectDesk::default_instance_ = NULL;

gcUserDisconnectDesk* gcUserDisconnectDesk::New() const {
  return new gcUserDisconnectDesk;
}

void gcUserDisconnectDesk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcUserDisconnectDesk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcUserDisconnectDesk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcUserDisconnectDesk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcUserDisconnectDesk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcUserDisconnectDesk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcUserDisconnectDesk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcUserDisconnectDesk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcUserDisconnectDesk::MergeFrom(const gcUserDisconnectDesk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcUserDisconnectDesk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcUserDisconnectDesk::CopyFrom(const gcUserDisconnectDesk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcUserDisconnectDesk::IsInitialized() const {

  return true;
}

void gcUserDisconnectDesk::Swap(gcUserDisconnectDesk* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcUserDisconnectDesk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcUserDisconnectDesk_descriptor_;
  metadata.reflection = gcUserDisconnectDesk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CannonInfo::kCannonIdFieldNumber;
const int CannonInfo::kCannonValueFieldNumber;
const int CannonInfo::kCannonGunIdFieldNumber;
#endif  // !_MSC_VER

CannonInfo::CannonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CannonInfo::InitAsDefaultInstance() {
}

CannonInfo::CannonInfo(const CannonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CannonInfo::SharedCtor() {
  _cached_size_ = 0;
  cannon_id_ = 0u;
  cannon_value_ = 0u;
  cannon_gun_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CannonInfo::~CannonInfo() {
  SharedDtor();
}

void CannonInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CannonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CannonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CannonInfo_descriptor_;
}

const CannonInfo& CannonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CannonInfo* CannonInfo::default_instance_ = NULL;

CannonInfo* CannonInfo::New() const {
  return new CannonInfo;
}

void CannonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cannon_id_ = 0u;
    cannon_value_ = 0u;
    cannon_gun_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CannonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cannon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cannon_id_)));
          set_has_cannon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cannon_value;
        break;
      }

      // optional uint32 cannon_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannon_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cannon_value_)));
          set_has_cannon_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cannon_gun_id;
        break;
      }

      // optional uint32 cannon_gun_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannon_gun_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cannon_gun_id_)));
          set_has_cannon_gun_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CannonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cannon_id = 1;
  if (has_cannon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cannon_id(), output);
  }

  // optional uint32 cannon_value = 2;
  if (has_cannon_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cannon_value(), output);
  }

  // optional uint32 cannon_gun_id = 3;
  if (has_cannon_gun_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cannon_gun_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CannonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cannon_id = 1;
  if (has_cannon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cannon_id(), target);
  }

  // optional uint32 cannon_value = 2;
  if (has_cannon_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cannon_value(), target);
  }

  // optional uint32 cannon_gun_id = 3;
  if (has_cannon_gun_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cannon_gun_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CannonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cannon_id = 1;
    if (has_cannon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cannon_id());
    }

    // optional uint32 cannon_value = 2;
    if (has_cannon_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cannon_value());
    }

    // optional uint32 cannon_gun_id = 3;
    if (has_cannon_gun_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cannon_gun_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CannonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CannonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CannonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CannonInfo::MergeFrom(const CannonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cannon_id()) {
      set_cannon_id(from.cannon_id());
    }
    if (from.has_cannon_value()) {
      set_cannon_value(from.cannon_value());
    }
    if (from.has_cannon_gun_id()) {
      set_cannon_gun_id(from.cannon_gun_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CannonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CannonInfo::CopyFrom(const CannonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CannonInfo::IsInitialized() const {

  return true;
}

void CannonInfo::Swap(CannonInfo* other) {
  if (other != this) {
    std::swap(cannon_id_, other->cannon_id_);
    std::swap(cannon_value_, other->cannon_value_);
    std::swap(cannon_gun_id_, other->cannon_gun_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CannonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CannonInfo_descriptor_;
  metadata.reflection = CannonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cgChangeCannon::kCannonIdFieldNumber;
#endif  // !_MSC_VER

cgChangeCannon::cgChangeCannon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cgChangeCannon::InitAsDefaultInstance() {
}

cgChangeCannon::cgChangeCannon(const cgChangeCannon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cgChangeCannon::SharedCtor() {
  _cached_size_ = 0;
  cannon_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cgChangeCannon::~cgChangeCannon() {
  SharedDtor();
}

void cgChangeCannon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cgChangeCannon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cgChangeCannon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cgChangeCannon_descriptor_;
}

const cgChangeCannon& cgChangeCannon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

cgChangeCannon* cgChangeCannon::default_instance_ = NULL;

cgChangeCannon* cgChangeCannon::New() const {
  return new cgChangeCannon;
}

void cgChangeCannon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cannon_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cgChangeCannon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cannon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cannon_id_)));
          set_has_cannon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cgChangeCannon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cannon_id = 1;
  if (has_cannon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cannon_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cgChangeCannon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cannon_id = 1;
  if (has_cannon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cannon_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cgChangeCannon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cannon_id = 1;
    if (has_cannon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cannon_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cgChangeCannon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cgChangeCannon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cgChangeCannon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cgChangeCannon::MergeFrom(const cgChangeCannon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cannon_id()) {
      set_cannon_id(from.cannon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cgChangeCannon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cgChangeCannon::CopyFrom(const cgChangeCannon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cgChangeCannon::IsInitialized() const {

  return true;
}

void cgChangeCannon::Swap(cgChangeCannon* other) {
  if (other != this) {
    std::swap(cannon_id_, other->cannon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cgChangeCannon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cgChangeCannon_descriptor_;
  metadata.reflection = cgChangeCannon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcChangeCannon::kCannonIdFieldNumber;
const int gcChangeCannon::kChairIdFieldNumber;
#endif  // !_MSC_VER

gcChangeCannon::gcChangeCannon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcChangeCannon::InitAsDefaultInstance() {
}

gcChangeCannon::gcChangeCannon(const gcChangeCannon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcChangeCannon::SharedCtor() {
  _cached_size_ = 0;
  cannon_id_ = 0u;
  chair_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcChangeCannon::~gcChangeCannon() {
  SharedDtor();
}

void gcChangeCannon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcChangeCannon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcChangeCannon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcChangeCannon_descriptor_;
}

const gcChangeCannon& gcChangeCannon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcChangeCannon* gcChangeCannon::default_instance_ = NULL;

gcChangeCannon* gcChangeCannon::New() const {
  return new gcChangeCannon;
}

void gcChangeCannon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cannon_id_ = 0u;
    chair_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcChangeCannon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cannon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cannon_id_)));
          set_has_cannon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcChangeCannon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cannon_id = 1;
  if (has_cannon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cannon_id(), output);
  }

  // optional uint32 chair_id = 3;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chair_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcChangeCannon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cannon_id = 1;
  if (has_cannon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cannon_id(), target);
  }

  // optional uint32 chair_id = 3;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chair_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcChangeCannon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cannon_id = 1;
    if (has_cannon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cannon_id());
    }

    // optional uint32 chair_id = 3;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcChangeCannon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcChangeCannon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcChangeCannon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcChangeCannon::MergeFrom(const gcChangeCannon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cannon_id()) {
      set_cannon_id(from.cannon_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcChangeCannon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcChangeCannon::CopyFrom(const gcChangeCannon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcChangeCannon::IsInitialized() const {

  return true;
}

void gcChangeCannon::Swap(gcChangeCannon* other) {
  if (other != this) {
    std::swap(cannon_id_, other->cannon_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcChangeCannon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcChangeCannon_descriptor_;
  metadata.reflection = gcChangeCannon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSceneRsp::kSceneIdFieldNumber;
const int ChangeSceneRsp::kTimeSecondsFieldNumber;
const int ChangeSceneRsp::kSceneChangeTypeFieldNumber;
#endif  // !_MSC_VER

ChangeSceneRsp::ChangeSceneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeSceneRsp::InitAsDefaultInstance() {
}

ChangeSceneRsp::ChangeSceneRsp(const ChangeSceneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeSceneRsp::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0u;
  time_seconds_ = 0;
  scene_change_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSceneRsp::~ChangeSceneRsp() {
  SharedDtor();
}

void ChangeSceneRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSceneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSceneRsp_descriptor_;
}

const ChangeSceneRsp& ChangeSceneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ChangeSceneRsp* ChangeSceneRsp::default_instance_ = NULL;

ChangeSceneRsp* ChangeSceneRsp::New() const {
  return new ChangeSceneRsp;
}

void ChangeSceneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0u;
    time_seconds_ = 0;
    scene_change_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_time_seconds;
        break;
      }

      // optional float time_seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_seconds_)));
          set_has_time_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_change_type;
        break;
      }

      // optional uint32 scene_change_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_change_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_change_type_)));
          set_has_scene_change_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  // optional float time_seconds = 2;
  if (has_time_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_seconds(), output);
  }

  // optional uint32 scene_change_type = 3;
  if (has_scene_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_change_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeSceneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  // optional float time_seconds = 2;
  if (has_time_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_seconds(), target);
  }

  // optional uint32 scene_change_type = 3;
  if (has_scene_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_change_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeSceneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional float time_seconds = 2;
    if (has_time_seconds()) {
      total_size += 1 + 4;
    }

    // optional uint32 scene_change_type = 3;
    if (has_scene_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_change_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSceneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSceneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSceneRsp::MergeFrom(const ChangeSceneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_time_seconds()) {
      set_time_seconds(from.time_seconds());
    }
    if (from.has_scene_change_type()) {
      set_scene_change_type(from.scene_change_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSceneRsp::CopyFrom(const ChangeSceneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSceneRsp::IsInitialized() const {

  return true;
}

void ChangeSceneRsp::Swap(ChangeSceneRsp* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(time_seconds_, other->time_seconds_);
    std::swap(scene_change_type_, other->scene_change_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSceneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSceneRsp_descriptor_;
  metadata.reflection = ChangeSceneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gcUserMoney::kChairIdFieldNumber;
const int gcUserMoney::kUserMoneyFieldNumber;
#endif  // !_MSC_VER

gcUserMoney::gcUserMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gcUserMoney::InitAsDefaultInstance() {
}

gcUserMoney::gcUserMoney(const gcUserMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gcUserMoney::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  user_money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gcUserMoney::~gcUserMoney() {
  SharedDtor();
}

void gcUserMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gcUserMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gcUserMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gcUserMoney_descriptor_;
}

const gcUserMoney& gcUserMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

gcUserMoney* gcUserMoney::default_instance_ = NULL;

gcUserMoney* gcUserMoney::New() const {
  return new gcUserMoney;
}

void gcUserMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
    user_money_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gcUserMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_money;
        break;
      }

      // optional uint64 user_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_money_)));
          set_has_user_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gcUserMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // optional uint64 user_money = 2;
  if (has_user_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gcUserMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // optional uint64 user_money = 2;
  if (has_user_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gcUserMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional uint64 user_money = 2;
    if (has_user_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gcUserMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gcUserMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gcUserMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gcUserMoney::MergeFrom(const gcUserMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_user_money()) {
      set_user_money(from.user_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gcUserMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gcUserMoney::CopyFrom(const gcUserMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gcUserMoney::IsInitialized() const {

  return true;
}

void gcUserMoney::Swap(gcUserMoney* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(user_money_, other->user_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gcUserMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gcUserMoney_descriptor_;
  metadata.reflection = gcUserMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_DoubleGunOnOff::kChairIdFieldNumber;
const int SC_DoubleGunOnOff::kOnOffFieldNumber;
#endif  // !_MSC_VER

SC_DoubleGunOnOff::SC_DoubleGunOnOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_DoubleGunOnOff::InitAsDefaultInstance() {
}

SC_DoubleGunOnOff::SC_DoubleGunOnOff(const SC_DoubleGunOnOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_DoubleGunOnOff::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0u;
  onoff_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_DoubleGunOnOff::~SC_DoubleGunOnOff() {
  SharedDtor();
}

void SC_DoubleGunOnOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_DoubleGunOnOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_DoubleGunOnOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_DoubleGunOnOff_descriptor_;
}

const SC_DoubleGunOnOff& SC_DoubleGunOnOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

SC_DoubleGunOnOff* SC_DoubleGunOnOff::default_instance_ = NULL;

SC_DoubleGunOnOff* SC_DoubleGunOnOff::New() const {
  return new SC_DoubleGunOnOff;
}

void SC_DoubleGunOnOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0u;
    onoff_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_DoubleGunOnOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onOff;
        break;
      }

      // optional uint32 onOff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onoff_)));
          set_has_onoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_DoubleGunOnOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chairid(), output);
  }

  // optional uint32 onOff = 2;
  if (has_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->onoff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_DoubleGunOnOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chairId = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chairid(), target);
  }

  // optional uint32 onOff = 2;
  if (has_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->onoff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_DoubleGunOnOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chairid());
    }

    // optional uint32 onOff = 2;
    if (has_onoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onoff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_DoubleGunOnOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_DoubleGunOnOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_DoubleGunOnOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_DoubleGunOnOff::MergeFrom(const SC_DoubleGunOnOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_onoff()) {
      set_onoff(from.onoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_DoubleGunOnOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DoubleGunOnOff::CopyFrom(const SC_DoubleGunOnOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_DoubleGunOnOff::IsInitialized() const {

  return true;
}

void SC_DoubleGunOnOff::Swap(SC_DoubleGunOnOff* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(onoff_, other->onoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_DoubleGunOnOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_DoubleGunOnOff_descriptor_;
  metadata.reflection = SC_DoubleGunOnOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PromptInfoRsp::kInfoTypeFieldNumber;
const int PromptInfoRsp::kFishKindIdFieldNumber;
#endif  // !_MSC_VER

PromptInfoRsp::PromptInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PromptInfoRsp::InitAsDefaultInstance() {
}

PromptInfoRsp::PromptInfoRsp(const PromptInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PromptInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  infotype_ = 0u;
  fishkindid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PromptInfoRsp::~PromptInfoRsp() {
  SharedDtor();
}

void PromptInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PromptInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PromptInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PromptInfoRsp_descriptor_;
}

const PromptInfoRsp& PromptInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

PromptInfoRsp* PromptInfoRsp::default_instance_ = NULL;

PromptInfoRsp* PromptInfoRsp::New() const {
  return new PromptInfoRsp;
}

void PromptInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    infotype_ = 0u;
    fishkindid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PromptInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 infoType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &infotype_)));
          set_has_infotype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishKindId;
        break;
      }

      // optional uint32 fishKindId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishKindId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fishkindid_)));
          set_has_fishkindid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PromptInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 infoType = 1;
  if (has_infotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->infotype(), output);
  }

  // optional uint32 fishKindId = 2;
  if (has_fishkindid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fishkindid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PromptInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 infoType = 1;
  if (has_infotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->infotype(), target);
  }

  // optional uint32 fishKindId = 2;
  if (has_fishkindid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fishkindid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PromptInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 infoType = 1;
    if (has_infotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->infotype());
    }

    // optional uint32 fishKindId = 2;
    if (has_fishkindid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fishkindid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PromptInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PromptInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PromptInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PromptInfoRsp::MergeFrom(const PromptInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_fishkindid()) {
      set_fishkindid(from.fishkindid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PromptInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromptInfoRsp::CopyFrom(const PromptInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromptInfoRsp::IsInitialized() const {

  return true;
}

void PromptInfoRsp::Swap(PromptInfoRsp* other) {
  if (other != this) {
    std::swap(infotype_, other->infotype_);
    std::swap(fishkindid_, other->fishkindid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PromptInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PromptInfoRsp_descriptor_;
  metadata.reflection = PromptInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStatusRsp::kBackgroundIndexFieldNumber;
const int GameStatusRsp::kCannonlistFieldNumber;
const int GameStatusRsp::kUserlistFieldNumber;
#endif  // !_MSC_VER

GameStatusRsp::GameStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStatusRsp::InitAsDefaultInstance() {
}

GameStatusRsp::GameStatusRsp(const GameStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  background_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatusRsp::~GameStatusRsp() {
  SharedDtor();
}

void GameStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatusRsp_descriptor_;
}

const GameStatusRsp& GameStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

GameStatusRsp* GameStatusRsp::default_instance_ = NULL;

GameStatusRsp* GameStatusRsp::New() const {
  return new GameStatusRsp;
}

void GameStatusRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    background_index_ = 0u;
  }
  cannonlist_.Clear();
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 background_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_index_)));
          set_has_background_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cannonlist;
        break;
      }

      // repeated .gamefish.CannonInfo cannonlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cannonlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cannonlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cannonlist;
        if (input->ExpectTag(26)) goto parse_userlist;
        break;
      }

      // repeated .gamefish.UserInfo userlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 background_index = 1;
  if (has_background_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->background_index(), output);
  }

  // repeated .gamefish.CannonInfo cannonlist = 2;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cannonlist(i), output);
  }

  // repeated .gamefish.UserInfo userlist = 3;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 background_index = 1;
  if (has_background_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->background_index(), target);
  }

  // repeated .gamefish.CannonInfo cannonlist = 2;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cannonlist(i), target);
  }

  // repeated .gamefish.UserInfo userlist = 3;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 background_index = 1;
    if (has_background_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background_index());
    }

  }
  // repeated .gamefish.CannonInfo cannonlist = 2;
  total_size += 1 * this->cannonlist_size();
  for (int i = 0; i < this->cannonlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cannonlist(i));
  }

  // repeated .gamefish.UserInfo userlist = 3;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStatusRsp::MergeFrom(const GameStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cannonlist_.MergeFrom(from.cannonlist_);
  userlist_.MergeFrom(from.userlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_background_index()) {
      set_background_index(from.background_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatusRsp::CopyFrom(const GameStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatusRsp::IsInitialized() const {

  return true;
}

void GameStatusRsp::Swap(GameStatusRsp* other) {
  if (other != this) {
    std::swap(background_index_, other->background_index_);
    cannonlist_.Swap(&other->cannonlist_);
    userlist_.Swap(&other->userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatusRsp_descriptor_;
  metadata.reflection = GameStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateDianCiCannonRsp::kUsChairIdFieldNumber;
const int CreateDianCiCannonRsp::kUsDianCiCannonIdFieldNumber;
const int CreateDianCiCannonRsp::kUsKilledFishIdFieldNumber;
const int CreateDianCiCannonRsp::kUsDianCiCannonStatusFieldNumber;
const int CreateDianCiCannonRsp::kUsDianCiCannonStatusTimeFieldNumber;
const int CreateDianCiCannonRsp::kUsKilledFishKindFieldNumber;
#endif  // !_MSC_VER

CreateDianCiCannonRsp::CreateDianCiCannonRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateDianCiCannonRsp::InitAsDefaultInstance() {
}

CreateDianCiCannonRsp::CreateDianCiCannonRsp(const CreateDianCiCannonRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateDianCiCannonRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdiancicannonid_ = 0;
  uskilledfishid_ = 0;
  usdiancicannonstatus_ = 0;
  usdiancicannonstatustime_ = 0;
  uskilledfishkind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateDianCiCannonRsp::~CreateDianCiCannonRsp() {
  SharedDtor();
}

void CreateDianCiCannonRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateDianCiCannonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDianCiCannonRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateDianCiCannonRsp_descriptor_;
}

const CreateDianCiCannonRsp& CreateDianCiCannonRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CreateDianCiCannonRsp* CreateDianCiCannonRsp::default_instance_ = NULL;

CreateDianCiCannonRsp* CreateDianCiCannonRsp::New() const {
  return new CreateDianCiCannonRsp;
}

void CreateDianCiCannonRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdiancicannonid_ = 0;
    uskilledfishid_ = 0;
    usdiancicannonstatus_ = 0;
    usdiancicannonstatustime_ = 0;
    uskilledfishkind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateDianCiCannonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDianCiCannonId;
        break;
      }

      // optional int32 usDianCiCannonId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDianCiCannonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdiancicannonid_)));
          set_has_usdiancicannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usKilledFishId;
        break;
      }

      // optional int32 usKilledFishId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usKilledFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uskilledfishid_)));
          set_has_uskilledfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usDianCiCannonStatus;
        break;
      }

      // optional int32 usDianCiCannonStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDianCiCannonStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdiancicannonstatus_)));
          set_has_usdiancicannonstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_usDianCiCannonStatusTime;
        break;
      }

      // optional float usDianCiCannonStatusTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_usDianCiCannonStatusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &usdiancicannonstatustime_)));
          set_has_usdiancicannonstatustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usKilledFishKind;
        break;
      }

      // optional int32 usKilledFishKind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usKilledFishKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uskilledfishkind_)));
          set_has_uskilledfishkind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateDianCiCannonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdiancicannonid(), output);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uskilledfishid(), output);
  }

  // optional int32 usDianCiCannonStatus = 4;
  if (has_usdiancicannonstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usdiancicannonstatus(), output);
  }

  // optional float usDianCiCannonStatusTime = 5;
  if (has_usdiancicannonstatustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->usdiancicannonstatustime(), output);
  }

  // optional int32 usKilledFishKind = 6;
  if (has_uskilledfishkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uskilledfishkind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateDianCiCannonRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdiancicannonid(), target);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uskilledfishid(), target);
  }

  // optional int32 usDianCiCannonStatus = 4;
  if (has_usdiancicannonstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usdiancicannonstatus(), target);
  }

  // optional float usDianCiCannonStatusTime = 5;
  if (has_usdiancicannonstatustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->usdiancicannonstatustime(), target);
  }

  // optional int32 usKilledFishKind = 6;
  if (has_uskilledfishkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uskilledfishkind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateDianCiCannonRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDianCiCannonId = 2;
    if (has_usdiancicannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdiancicannonid());
    }

    // optional int32 usKilledFishId = 3;
    if (has_uskilledfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uskilledfishid());
    }

    // optional int32 usDianCiCannonStatus = 4;
    if (has_usdiancicannonstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdiancicannonstatus());
    }

    // optional float usDianCiCannonStatusTime = 5;
    if (has_usdiancicannonstatustime()) {
      total_size += 1 + 4;
    }

    // optional int32 usKilledFishKind = 6;
    if (has_uskilledfishkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uskilledfishkind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDianCiCannonRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateDianCiCannonRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateDianCiCannonRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateDianCiCannonRsp::MergeFrom(const CreateDianCiCannonRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdiancicannonid()) {
      set_usdiancicannonid(from.usdiancicannonid());
    }
    if (from.has_uskilledfishid()) {
      set_uskilledfishid(from.uskilledfishid());
    }
    if (from.has_usdiancicannonstatus()) {
      set_usdiancicannonstatus(from.usdiancicannonstatus());
    }
    if (from.has_usdiancicannonstatustime()) {
      set_usdiancicannonstatustime(from.usdiancicannonstatustime());
    }
    if (from.has_uskilledfishkind()) {
      set_uskilledfishkind(from.uskilledfishkind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateDianCiCannonRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDianCiCannonRsp::CopyFrom(const CreateDianCiCannonRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDianCiCannonRsp::IsInitialized() const {

  return true;
}

void CreateDianCiCannonRsp::Swap(CreateDianCiCannonRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdiancicannonid_, other->usdiancicannonid_);
    std::swap(uskilledfishid_, other->uskilledfishid_);
    std::swap(usdiancicannonstatus_, other->usdiancicannonstatus_);
    std::swap(usdiancicannonstatustime_, other->usdiancicannonstatustime_);
    std::swap(uskilledfishkind_, other->uskilledfishkind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateDianCiCannonRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateDianCiCannonRsp_descriptor_;
  metadata.reflection = CreateDianCiCannonRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DianCiCannonAimReq::kUsChairIdFieldNumber;
const int DianCiCannonAimReq::kUsDianCiCannonIdFieldNumber;
const int DianCiCannonAimReq::kUsAngleFieldNumber;
#endif  // !_MSC_VER

DianCiCannonAimReq::DianCiCannonAimReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DianCiCannonAimReq::InitAsDefaultInstance() {
}

DianCiCannonAimReq::DianCiCannonAimReq(const DianCiCannonAimReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DianCiCannonAimReq::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdiancicannonid_ = 0;
  usangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DianCiCannonAimReq::~DianCiCannonAimReq() {
  SharedDtor();
}

void DianCiCannonAimReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DianCiCannonAimReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DianCiCannonAimReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DianCiCannonAimReq_descriptor_;
}

const DianCiCannonAimReq& DianCiCannonAimReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DianCiCannonAimReq* DianCiCannonAimReq::default_instance_ = NULL;

DianCiCannonAimReq* DianCiCannonAimReq::New() const {
  return new DianCiCannonAimReq;
}

void DianCiCannonAimReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdiancicannonid_ = 0;
    usangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DianCiCannonAimReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDianCiCannonId;
        break;
      }

      // optional int32 usDianCiCannonId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDianCiCannonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdiancicannonid_)));
          set_has_usdiancicannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DianCiCannonAimReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdiancicannonid(), output);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DianCiCannonAimReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdiancicannonid(), target);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DianCiCannonAimReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDianCiCannonId = 2;
    if (has_usdiancicannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdiancicannonid());
    }

    // optional int32 usAngle = 3;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DianCiCannonAimReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DianCiCannonAimReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DianCiCannonAimReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DianCiCannonAimReq::MergeFrom(const DianCiCannonAimReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdiancicannonid()) {
      set_usdiancicannonid(from.usdiancicannonid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DianCiCannonAimReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DianCiCannonAimReq::CopyFrom(const DianCiCannonAimReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DianCiCannonAimReq::IsInitialized() const {

  return true;
}

void DianCiCannonAimReq::Swap(DianCiCannonAimReq* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdiancicannonid_, other->usdiancicannonid_);
    std::swap(usangle_, other->usangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DianCiCannonAimReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DianCiCannonAimReq_descriptor_;
  metadata.reflection = DianCiCannonAimReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DianCiCannonAimRsp::kUsChairIdFieldNumber;
const int DianCiCannonAimRsp::kUsDianCiCannonIdFieldNumber;
const int DianCiCannonAimRsp::kUsAngleFieldNumber;
#endif  // !_MSC_VER

DianCiCannonAimRsp::DianCiCannonAimRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DianCiCannonAimRsp::InitAsDefaultInstance() {
}

DianCiCannonAimRsp::DianCiCannonAimRsp(const DianCiCannonAimRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DianCiCannonAimRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdiancicannonid_ = 0;
  usangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DianCiCannonAimRsp::~DianCiCannonAimRsp() {
  SharedDtor();
}

void DianCiCannonAimRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DianCiCannonAimRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DianCiCannonAimRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DianCiCannonAimRsp_descriptor_;
}

const DianCiCannonAimRsp& DianCiCannonAimRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DianCiCannonAimRsp* DianCiCannonAimRsp::default_instance_ = NULL;

DianCiCannonAimRsp* DianCiCannonAimRsp::New() const {
  return new DianCiCannonAimRsp;
}

void DianCiCannonAimRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdiancicannonid_ = 0;
    usangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DianCiCannonAimRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDianCiCannonId;
        break;
      }

      // optional int32 usDianCiCannonId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDianCiCannonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdiancicannonid_)));
          set_has_usdiancicannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DianCiCannonAimRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdiancicannonid(), output);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DianCiCannonAimRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdiancicannonid(), target);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DianCiCannonAimRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDianCiCannonId = 2;
    if (has_usdiancicannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdiancicannonid());
    }

    // optional int32 usAngle = 3;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DianCiCannonAimRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DianCiCannonAimRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DianCiCannonAimRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DianCiCannonAimRsp::MergeFrom(const DianCiCannonAimRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdiancicannonid()) {
      set_usdiancicannonid(from.usdiancicannonid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DianCiCannonAimRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DianCiCannonAimRsp::CopyFrom(const DianCiCannonAimRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DianCiCannonAimRsp::IsInitialized() const {

  return true;
}

void DianCiCannonAimRsp::Swap(DianCiCannonAimRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdiancicannonid_, other->usdiancicannonid_);
    std::swap(usangle_, other->usangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DianCiCannonAimRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DianCiCannonAimRsp_descriptor_;
  metadata.reflection = DianCiCannonAimRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DianCiCannonShootReq::kUsChairIdFieldNumber;
const int DianCiCannonShootReq::kUsDianCiCannonIdFieldNumber;
const int DianCiCannonShootReq::kUsAngleFieldNumber;
#endif  // !_MSC_VER

DianCiCannonShootReq::DianCiCannonShootReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DianCiCannonShootReq::InitAsDefaultInstance() {
}

DianCiCannonShootReq::DianCiCannonShootReq(const DianCiCannonShootReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DianCiCannonShootReq::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdiancicannonid_ = 0;
  usangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DianCiCannonShootReq::~DianCiCannonShootReq() {
  SharedDtor();
}

void DianCiCannonShootReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DianCiCannonShootReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DianCiCannonShootReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DianCiCannonShootReq_descriptor_;
}

const DianCiCannonShootReq& DianCiCannonShootReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DianCiCannonShootReq* DianCiCannonShootReq::default_instance_ = NULL;

DianCiCannonShootReq* DianCiCannonShootReq::New() const {
  return new DianCiCannonShootReq;
}

void DianCiCannonShootReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdiancicannonid_ = 0;
    usangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DianCiCannonShootReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDianCiCannonId;
        break;
      }

      // optional int32 usDianCiCannonId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDianCiCannonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdiancicannonid_)));
          set_has_usdiancicannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DianCiCannonShootReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdiancicannonid(), output);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DianCiCannonShootReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdiancicannonid(), target);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DianCiCannonShootReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDianCiCannonId = 2;
    if (has_usdiancicannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdiancicannonid());
    }

    // optional int32 usAngle = 3;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DianCiCannonShootReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DianCiCannonShootReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DianCiCannonShootReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DianCiCannonShootReq::MergeFrom(const DianCiCannonShootReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdiancicannonid()) {
      set_usdiancicannonid(from.usdiancicannonid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DianCiCannonShootReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DianCiCannonShootReq::CopyFrom(const DianCiCannonShootReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DianCiCannonShootReq::IsInitialized() const {

  return true;
}

void DianCiCannonShootReq::Swap(DianCiCannonShootReq* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdiancicannonid_, other->usdiancicannonid_);
    std::swap(usangle_, other->usangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DianCiCannonShootReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DianCiCannonShootReq_descriptor_;
  metadata.reflection = DianCiCannonShootReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DianCiCannonShootRsp::kUsChairIdFieldNumber;
const int DianCiCannonShootRsp::kUsDianCiCannonIdFieldNumber;
const int DianCiCannonShootRsp::kUsAngleFieldNumber;
const int DianCiCannonShootRsp::kUsProcUserChairIdFieldNumber;
#endif  // !_MSC_VER

DianCiCannonShootRsp::DianCiCannonShootRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DianCiCannonShootRsp::InitAsDefaultInstance() {
}

DianCiCannonShootRsp::DianCiCannonShootRsp(const DianCiCannonShootRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DianCiCannonShootRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdiancicannonid_ = 0;
  usangle_ = 0;
  usprocuserchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DianCiCannonShootRsp::~DianCiCannonShootRsp() {
  SharedDtor();
}

void DianCiCannonShootRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DianCiCannonShootRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DianCiCannonShootRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DianCiCannonShootRsp_descriptor_;
}

const DianCiCannonShootRsp& DianCiCannonShootRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DianCiCannonShootRsp* DianCiCannonShootRsp::default_instance_ = NULL;

DianCiCannonShootRsp* DianCiCannonShootRsp::New() const {
  return new DianCiCannonShootRsp;
}

void DianCiCannonShootRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdiancicannonid_ = 0;
    usangle_ = 0;
    usprocuserchairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DianCiCannonShootRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDianCiCannonId;
        break;
      }

      // optional int32 usDianCiCannonId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDianCiCannonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdiancicannonid_)));
          set_has_usdiancicannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usProcUserChairId;
        break;
      }

      // optional int32 usProcUserChairId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usProcUserChairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usprocuserchairid_)));
          set_has_usprocuserchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DianCiCannonShootRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdiancicannonid(), output);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usangle(), output);
  }

  // optional int32 usProcUserChairId = 4;
  if (has_usprocuserchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usprocuserchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DianCiCannonShootRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdiancicannonid(), target);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usangle(), target);
  }

  // optional int32 usProcUserChairId = 4;
  if (has_usprocuserchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usprocuserchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DianCiCannonShootRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDianCiCannonId = 2;
    if (has_usdiancicannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdiancicannonid());
    }

    // optional int32 usAngle = 3;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

    // optional int32 usProcUserChairId = 4;
    if (has_usprocuserchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usprocuserchairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DianCiCannonShootRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DianCiCannonShootRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DianCiCannonShootRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DianCiCannonShootRsp::MergeFrom(const DianCiCannonShootRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdiancicannonid()) {
      set_usdiancicannonid(from.usdiancicannonid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
    if (from.has_usprocuserchairid()) {
      set_usprocuserchairid(from.usprocuserchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DianCiCannonShootRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DianCiCannonShootRsp::CopyFrom(const DianCiCannonShootRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DianCiCannonShootRsp::IsInitialized() const {

  return true;
}

void DianCiCannonShootRsp::Swap(DianCiCannonShootRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdiancicannonid_, other->usdiancicannonid_);
    std::swap(usangle_, other->usangle_);
    std::swap(usprocuserchairid_, other->usprocuserchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DianCiCannonShootRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DianCiCannonShootRsp_descriptor_;
  metadata.reflection = DianCiCannonShootRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DianCiCannonHitFishReq::kUsChairIdFieldNumber;
const int DianCiCannonHitFishReq::kUsDianCiCannonIdFieldNumber;
const int DianCiCannonHitFishReq::kSubFishesFieldNumber;
const int DianCiCannonHitFishReq::kUsRobotChairIdFieldNumber;
#endif  // !_MSC_VER

DianCiCannonHitFishReq::DianCiCannonHitFishReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DianCiCannonHitFishReq::InitAsDefaultInstance() {
}

DianCiCannonHitFishReq::DianCiCannonHitFishReq(const DianCiCannonHitFishReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DianCiCannonHitFishReq::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdiancicannonid_ = 0;
  usrobotchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DianCiCannonHitFishReq::~DianCiCannonHitFishReq() {
  SharedDtor();
}

void DianCiCannonHitFishReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DianCiCannonHitFishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DianCiCannonHitFishReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DianCiCannonHitFishReq_descriptor_;
}

const DianCiCannonHitFishReq& DianCiCannonHitFishReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DianCiCannonHitFishReq* DianCiCannonHitFishReq::default_instance_ = NULL;

DianCiCannonHitFishReq* DianCiCannonHitFishReq::New() const {
  return new DianCiCannonHitFishReq;
}

void DianCiCannonHitFishReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdiancicannonid_ = 0;
    usrobotchairid_ = 0;
  }
  subfishes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DianCiCannonHitFishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDianCiCannonId;
        break;
      }

      // optional int32 usDianCiCannonId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDianCiCannonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdiancicannonid_)));
          set_has_usdiancicannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SubFishes;
        break;
      }

      // repeated int32 SubFishes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubFishes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_subfishes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_subfishes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SubFishes;
        if (input->ExpectTag(32)) goto parse_usRobotChairId;
        break;
      }

      // optional int32 usRobotChairId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usRobotChairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usrobotchairid_)));
          set_has_usrobotchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DianCiCannonHitFishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdiancicannonid(), output);
  }

  // repeated int32 SubFishes = 3;
  for (int i = 0; i < this->subfishes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->subfishes(i), output);
  }

  // optional int32 usRobotChairId = 4;
  if (has_usrobotchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usrobotchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DianCiCannonHitFishReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdiancicannonid(), target);
  }

  // repeated int32 SubFishes = 3;
  for (int i = 0; i < this->subfishes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->subfishes(i), target);
  }

  // optional int32 usRobotChairId = 4;
  if (has_usrobotchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usrobotchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DianCiCannonHitFishReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDianCiCannonId = 2;
    if (has_usdiancicannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdiancicannonid());
    }

    // optional int32 usRobotChairId = 4;
    if (has_usrobotchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usrobotchairid());
    }

  }
  // repeated int32 SubFishes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->subfishes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->subfishes(i));
    }
    total_size += 1 * this->subfishes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DianCiCannonHitFishReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DianCiCannonHitFishReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DianCiCannonHitFishReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DianCiCannonHitFishReq::MergeFrom(const DianCiCannonHitFishReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  subfishes_.MergeFrom(from.subfishes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdiancicannonid()) {
      set_usdiancicannonid(from.usdiancicannonid());
    }
    if (from.has_usrobotchairid()) {
      set_usrobotchairid(from.usrobotchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DianCiCannonHitFishReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DianCiCannonHitFishReq::CopyFrom(const DianCiCannonHitFishReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DianCiCannonHitFishReq::IsInitialized() const {

  return true;
}

void DianCiCannonHitFishReq::Swap(DianCiCannonHitFishReq* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdiancicannonid_, other->usdiancicannonid_);
    subfishes_.Swap(&other->subfishes_);
    std::swap(usrobotchairid_, other->usrobotchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DianCiCannonHitFishReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DianCiCannonHitFishReq_descriptor_;
  metadata.reflection = DianCiCannonHitFishReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DianCiCannonDestroyRsp::kUsChairIdFieldNumber;
const int DianCiCannonDestroyRsp::kUsDianCiCannonIdFieldNumber;
const int DianCiCannonDestroyRsp::kUsTotalScoreFieldNumber;
const int DianCiCannonDestroyRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

DianCiCannonDestroyRsp::DianCiCannonDestroyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DianCiCannonDestroyRsp::InitAsDefaultInstance() {
}

DianCiCannonDestroyRsp::DianCiCannonDestroyRsp(const DianCiCannonDestroyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DianCiCannonDestroyRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdiancicannonid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DianCiCannonDestroyRsp::~DianCiCannonDestroyRsp() {
  SharedDtor();
}

void DianCiCannonDestroyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DianCiCannonDestroyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DianCiCannonDestroyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DianCiCannonDestroyRsp_descriptor_;
}

const DianCiCannonDestroyRsp& DianCiCannonDestroyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DianCiCannonDestroyRsp* DianCiCannonDestroyRsp::default_instance_ = NULL;

DianCiCannonDestroyRsp* DianCiCannonDestroyRsp::New() const {
  return new DianCiCannonDestroyRsp;
}

void DianCiCannonDestroyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdiancicannonid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DianCiCannonDestroyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDianCiCannonId;
        break;
      }

      // optional int32 usDianCiCannonId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDianCiCannonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdiancicannonid_)));
          set_has_usdiancicannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DianCiCannonDestroyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdiancicannonid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DianCiCannonDestroyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDianCiCannonId = 2;
  if (has_usdiancicannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdiancicannonid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DianCiCannonDestroyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDianCiCannonId = 2;
    if (has_usdiancicannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdiancicannonid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DianCiCannonDestroyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DianCiCannonDestroyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DianCiCannonDestroyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DianCiCannonDestroyRsp::MergeFrom(const DianCiCannonDestroyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdiancicannonid()) {
      set_usdiancicannonid(from.usdiancicannonid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DianCiCannonDestroyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DianCiCannonDestroyRsp::CopyFrom(const DianCiCannonDestroyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DianCiCannonDestroyRsp::IsInitialized() const {

  return true;
}

void DianCiCannonDestroyRsp::Swap(DianCiCannonDestroyRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdiancicannonid_, other->usdiancicannonid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DianCiCannonDestroyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DianCiCannonDestroyRsp_descriptor_;
  metadata.reflection = DianCiCannonDestroyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateZuanTouRsp::kUsChairIdFieldNumber;
const int CreateZuanTouRsp::kUsZuanTouIdFieldNumber;
const int CreateZuanTouRsp::kUsKilledFishIdFieldNumber;
const int CreateZuanTouRsp::kUsTraceIdFieldNumber;
const int CreateZuanTouRsp::kUsTraceStartPtFieldNumber;
const int CreateZuanTouRsp::kUsZuanTouStatusFieldNumber;
const int CreateZuanTouRsp::kUsZuanTouStatusTimeFieldNumber;
const int CreateZuanTouRsp::kBombFishIdFieldNumber;
#endif  // !_MSC_VER

CreateZuanTouRsp::CreateZuanTouRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateZuanTouRsp::InitAsDefaultInstance() {
}

CreateZuanTouRsp::CreateZuanTouRsp(const CreateZuanTouRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateZuanTouRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  uszuantouid_ = 0;
  uskilledfishid_ = 0;
  ustraceid_ = 0;
  ustracestartpt_ = 0;
  uszuantoustatus_ = 0;
  uszuantoustatustime_ = 0;
  bombfishid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateZuanTouRsp::~CreateZuanTouRsp() {
  SharedDtor();
}

void CreateZuanTouRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateZuanTouRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateZuanTouRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateZuanTouRsp_descriptor_;
}

const CreateZuanTouRsp& CreateZuanTouRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CreateZuanTouRsp* CreateZuanTouRsp::default_instance_ = NULL;

CreateZuanTouRsp* CreateZuanTouRsp::New() const {
  return new CreateZuanTouRsp;
}

void CreateZuanTouRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    uszuantouid_ = 0;
    uskilledfishid_ = 0;
    ustraceid_ = 0;
    ustracestartpt_ = 0;
    uszuantoustatus_ = 0;
    uszuantoustatustime_ = 0;
    bombfishid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateZuanTouRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usZuanTouId;
        break;
      }

      // optional int32 usZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usKilledFishId;
        break;
      }

      // optional int32 usKilledFishId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usKilledFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uskilledfishid_)));
          set_has_uskilledfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTraceId;
        break;
      }

      // optional int32 usTraceId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTraceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustraceid_)));
          set_has_ustraceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usTraceStartPt;
        break;
      }

      // optional int32 usTraceStartPt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTraceStartPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustracestartpt_)));
          set_has_ustracestartpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usZuanTouStatus;
        break;
      }

      // optional int32 usZuanTouStatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantoustatus_)));
          set_has_uszuantoustatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_usZuanTouStatusTime;
        break;
      }

      // optional float usZuanTouStatusTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_usZuanTouStatusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uszuantoustatustime_)));
          set_has_uszuantoustatustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bombFishId;
        break;
      }

      // optional int32 bombFishId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bombFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bombfishid_)));
          set_has_bombfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateZuanTouRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uszuantouid(), output);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uskilledfishid(), output);
  }

  // optional int32 usTraceId = 4;
  if (has_ustraceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustraceid(), output);
  }

  // optional int32 usTraceStartPt = 5;
  if (has_ustracestartpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ustracestartpt(), output);
  }

  // optional int32 usZuanTouStatus = 6;
  if (has_uszuantoustatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uszuantoustatus(), output);
  }

  // optional float usZuanTouStatusTime = 7;
  if (has_uszuantoustatustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->uszuantoustatustime(), output);
  }

  // optional int32 bombFishId = 8;
  if (has_bombfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bombfishid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateZuanTouRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uszuantouid(), target);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uskilledfishid(), target);
  }

  // optional int32 usTraceId = 4;
  if (has_ustraceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustraceid(), target);
  }

  // optional int32 usTraceStartPt = 5;
  if (has_ustracestartpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ustracestartpt(), target);
  }

  // optional int32 usZuanTouStatus = 6;
  if (has_uszuantoustatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uszuantoustatus(), target);
  }

  // optional float usZuanTouStatusTime = 7;
  if (has_uszuantoustatustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->uszuantoustatustime(), target);
  }

  // optional int32 bombFishId = 8;
  if (has_bombfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bombfishid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateZuanTouRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usZuanTouId = 2;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

    // optional int32 usKilledFishId = 3;
    if (has_uskilledfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uskilledfishid());
    }

    // optional int32 usTraceId = 4;
    if (has_ustraceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustraceid());
    }

    // optional int32 usTraceStartPt = 5;
    if (has_ustracestartpt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustracestartpt());
    }

    // optional int32 usZuanTouStatus = 6;
    if (has_uszuantoustatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantoustatus());
    }

    // optional float usZuanTouStatusTime = 7;
    if (has_uszuantoustatustime()) {
      total_size += 1 + 4;
    }

    // optional int32 bombFishId = 8;
    if (has_bombfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bombfishid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateZuanTouRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateZuanTouRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateZuanTouRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateZuanTouRsp::MergeFrom(const CreateZuanTouRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
    if (from.has_uskilledfishid()) {
      set_uskilledfishid(from.uskilledfishid());
    }
    if (from.has_ustraceid()) {
      set_ustraceid(from.ustraceid());
    }
    if (from.has_ustracestartpt()) {
      set_ustracestartpt(from.ustracestartpt());
    }
    if (from.has_uszuantoustatus()) {
      set_uszuantoustatus(from.uszuantoustatus());
    }
    if (from.has_uszuantoustatustime()) {
      set_uszuantoustatustime(from.uszuantoustatustime());
    }
    if (from.has_bombfishid()) {
      set_bombfishid(from.bombfishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateZuanTouRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateZuanTouRsp::CopyFrom(const CreateZuanTouRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateZuanTouRsp::IsInitialized() const {

  return true;
}

void CreateZuanTouRsp::Swap(CreateZuanTouRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(uszuantouid_, other->uszuantouid_);
    std::swap(uskilledfishid_, other->uskilledfishid_);
    std::swap(ustraceid_, other->ustraceid_);
    std::swap(ustracestartpt_, other->ustracestartpt_);
    std::swap(uszuantoustatus_, other->uszuantoustatus_);
    std::swap(uszuantoustatustime_, other->uszuantoustatustime_);
    std::swap(bombfishid_, other->bombfishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateZuanTouRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateZuanTouRsp_descriptor_;
  metadata.reflection = CreateZuanTouRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZuanTouAimReq::kUsChairIdFieldNumber;
const int ZuanTouAimReq::kUsZuanTouIdFieldNumber;
const int ZuanTouAimReq::kUsAngleFieldNumber;
#endif  // !_MSC_VER

ZuanTouAimReq::ZuanTouAimReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZuanTouAimReq::InitAsDefaultInstance() {
}

ZuanTouAimReq::ZuanTouAimReq(const ZuanTouAimReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZuanTouAimReq::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  uszuantouid_ = 0;
  usangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZuanTouAimReq::~ZuanTouAimReq() {
  SharedDtor();
}

void ZuanTouAimReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZuanTouAimReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZuanTouAimReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZuanTouAimReq_descriptor_;
}

const ZuanTouAimReq& ZuanTouAimReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ZuanTouAimReq* ZuanTouAimReq::default_instance_ = NULL;

ZuanTouAimReq* ZuanTouAimReq::New() const {
  return new ZuanTouAimReq;
}

void ZuanTouAimReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    uszuantouid_ = 0;
    usangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZuanTouAimReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usZuanTouId;
        break;
      }

      // optional int32 usZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZuanTouAimReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uszuantouid(), output);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZuanTouAimReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uszuantouid(), target);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZuanTouAimReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usZuanTouId = 2;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

    // optional int32 usAngle = 3;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZuanTouAimReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZuanTouAimReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZuanTouAimReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZuanTouAimReq::MergeFrom(const ZuanTouAimReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZuanTouAimReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZuanTouAimReq::CopyFrom(const ZuanTouAimReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZuanTouAimReq::IsInitialized() const {

  return true;
}

void ZuanTouAimReq::Swap(ZuanTouAimReq* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(uszuantouid_, other->uszuantouid_);
    std::swap(usangle_, other->usangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZuanTouAimReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZuanTouAimReq_descriptor_;
  metadata.reflection = ZuanTouAimReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZuanTouAimRsp::kUsChairIdFieldNumber;
const int ZuanTouAimRsp::kUsZuanTouIdFieldNumber;
const int ZuanTouAimRsp::kUsAngleFieldNumber;
#endif  // !_MSC_VER

ZuanTouAimRsp::ZuanTouAimRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZuanTouAimRsp::InitAsDefaultInstance() {
}

ZuanTouAimRsp::ZuanTouAimRsp(const ZuanTouAimRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZuanTouAimRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  uszuantouid_ = 0;
  usangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZuanTouAimRsp::~ZuanTouAimRsp() {
  SharedDtor();
}

void ZuanTouAimRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZuanTouAimRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZuanTouAimRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZuanTouAimRsp_descriptor_;
}

const ZuanTouAimRsp& ZuanTouAimRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ZuanTouAimRsp* ZuanTouAimRsp::default_instance_ = NULL;

ZuanTouAimRsp* ZuanTouAimRsp::New() const {
  return new ZuanTouAimRsp;
}

void ZuanTouAimRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    uszuantouid_ = 0;
    usangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZuanTouAimRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usZuanTouId;
        break;
      }

      // optional int32 usZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZuanTouAimRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uszuantouid(), output);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZuanTouAimRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uszuantouid(), target);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZuanTouAimRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usZuanTouId = 2;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

    // optional int32 usAngle = 3;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZuanTouAimRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZuanTouAimRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZuanTouAimRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZuanTouAimRsp::MergeFrom(const ZuanTouAimRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZuanTouAimRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZuanTouAimRsp::CopyFrom(const ZuanTouAimRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZuanTouAimRsp::IsInitialized() const {

  return true;
}

void ZuanTouAimRsp::Swap(ZuanTouAimRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(uszuantouid_, other->uszuantouid_);
    std::swap(usangle_, other->usangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZuanTouAimRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZuanTouAimRsp_descriptor_;
  metadata.reflection = ZuanTouAimRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZuanTouShootReq::kUsChairIdFieldNumber;
const int ZuanTouShootReq::kUsZuanTouIdFieldNumber;
const int ZuanTouShootReq::kUsAngleFieldNumber;
#endif  // !_MSC_VER

ZuanTouShootReq::ZuanTouShootReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZuanTouShootReq::InitAsDefaultInstance() {
}

ZuanTouShootReq::ZuanTouShootReq(const ZuanTouShootReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZuanTouShootReq::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  uszuantouid_ = 0;
  usangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZuanTouShootReq::~ZuanTouShootReq() {
  SharedDtor();
}

void ZuanTouShootReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZuanTouShootReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZuanTouShootReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZuanTouShootReq_descriptor_;
}

const ZuanTouShootReq& ZuanTouShootReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ZuanTouShootReq* ZuanTouShootReq::default_instance_ = NULL;

ZuanTouShootReq* ZuanTouShootReq::New() const {
  return new ZuanTouShootReq;
}

void ZuanTouShootReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    uszuantouid_ = 0;
    usangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZuanTouShootReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usZuanTouId;
        break;
      }

      // optional int32 usZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZuanTouShootReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uszuantouid(), output);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZuanTouShootReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uszuantouid(), target);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZuanTouShootReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usZuanTouId = 2;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

    // optional int32 usAngle = 3;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZuanTouShootReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZuanTouShootReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZuanTouShootReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZuanTouShootReq::MergeFrom(const ZuanTouShootReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZuanTouShootReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZuanTouShootReq::CopyFrom(const ZuanTouShootReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZuanTouShootReq::IsInitialized() const {

  return true;
}

void ZuanTouShootReq::Swap(ZuanTouShootReq* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(uszuantouid_, other->uszuantouid_);
    std::swap(usangle_, other->usangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZuanTouShootReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZuanTouShootReq_descriptor_;
  metadata.reflection = ZuanTouShootReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZuanTouShootRsp::kUsChairIdFieldNumber;
const int ZuanTouShootRsp::kUsZuanTouIdFieldNumber;
const int ZuanTouShootRsp::kUsAngleFieldNumber;
const int ZuanTouShootRsp::kUsTraceIdFieldNumber;
const int ZuanTouShootRsp::kUsTraceStartPtFieldNumber;
const int ZuanTouShootRsp::kUsProcUserChairIdFieldNumber;
#endif  // !_MSC_VER

ZuanTouShootRsp::ZuanTouShootRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZuanTouShootRsp::InitAsDefaultInstance() {
}

ZuanTouShootRsp::ZuanTouShootRsp(const ZuanTouShootRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZuanTouShootRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  uszuantouid_ = 0;
  usangle_ = 0;
  ustraceid_ = 0;
  ustracestartpt_ = 0;
  usprocuserchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZuanTouShootRsp::~ZuanTouShootRsp() {
  SharedDtor();
}

void ZuanTouShootRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZuanTouShootRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZuanTouShootRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZuanTouShootRsp_descriptor_;
}

const ZuanTouShootRsp& ZuanTouShootRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ZuanTouShootRsp* ZuanTouShootRsp::default_instance_ = NULL;

ZuanTouShootRsp* ZuanTouShootRsp::New() const {
  return new ZuanTouShootRsp;
}

void ZuanTouShootRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    uszuantouid_ = 0;
    usangle_ = 0;
    ustraceid_ = 0;
    ustracestartpt_ = 0;
    usprocuserchairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZuanTouShootRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usZuanTouId;
        break;
      }

      // optional int32 usZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTraceId;
        break;
      }

      // optional int32 usTraceId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTraceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustraceid_)));
          set_has_ustraceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usTraceStartPt;
        break;
      }

      // optional int32 usTraceStartPt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTraceStartPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustracestartpt_)));
          set_has_ustracestartpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usProcUserChairId;
        break;
      }

      // optional int32 usProcUserChairId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usProcUserChairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usprocuserchairid_)));
          set_has_usprocuserchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZuanTouShootRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uszuantouid(), output);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usangle(), output);
  }

  // optional int32 usTraceId = 4;
  if (has_ustraceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustraceid(), output);
  }

  // optional int32 usTraceStartPt = 5;
  if (has_ustracestartpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ustracestartpt(), output);
  }

  // optional int32 usProcUserChairId = 6;
  if (has_usprocuserchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usprocuserchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZuanTouShootRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uszuantouid(), target);
  }

  // optional int32 usAngle = 3;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usangle(), target);
  }

  // optional int32 usTraceId = 4;
  if (has_ustraceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustraceid(), target);
  }

  // optional int32 usTraceStartPt = 5;
  if (has_ustracestartpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ustracestartpt(), target);
  }

  // optional int32 usProcUserChairId = 6;
  if (has_usprocuserchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usprocuserchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZuanTouShootRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usZuanTouId = 2;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

    // optional int32 usAngle = 3;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

    // optional int32 usTraceId = 4;
    if (has_ustraceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustraceid());
    }

    // optional int32 usTraceStartPt = 5;
    if (has_ustracestartpt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustracestartpt());
    }

    // optional int32 usProcUserChairId = 6;
    if (has_usprocuserchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usprocuserchairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZuanTouShootRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZuanTouShootRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZuanTouShootRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZuanTouShootRsp::MergeFrom(const ZuanTouShootRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
    if (from.has_ustraceid()) {
      set_ustraceid(from.ustraceid());
    }
    if (from.has_ustracestartpt()) {
      set_ustracestartpt(from.ustracestartpt());
    }
    if (from.has_usprocuserchairid()) {
      set_usprocuserchairid(from.usprocuserchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZuanTouShootRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZuanTouShootRsp::CopyFrom(const ZuanTouShootRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZuanTouShootRsp::IsInitialized() const {

  return true;
}

void ZuanTouShootRsp::Swap(ZuanTouShootRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(uszuantouid_, other->uszuantouid_);
    std::swap(usangle_, other->usangle_);
    std::swap(ustraceid_, other->ustraceid_);
    std::swap(ustracestartpt_, other->ustracestartpt_);
    std::swap(usprocuserchairid_, other->usprocuserchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZuanTouShootRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZuanTouShootRsp_descriptor_;
  metadata.reflection = ZuanTouShootRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZuanTouHitFishReq::kUsChairIdFieldNumber;
const int ZuanTouHitFishReq::kUsZuanTouIdFieldNumber;
const int ZuanTouHitFishReq::kSubFishesFieldNumber;
const int ZuanTouHitFishReq::kUsRobotChairIdFieldNumber;
#endif  // !_MSC_VER

ZuanTouHitFishReq::ZuanTouHitFishReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZuanTouHitFishReq::InitAsDefaultInstance() {
}

ZuanTouHitFishReq::ZuanTouHitFishReq(const ZuanTouHitFishReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZuanTouHitFishReq::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  uszuantouid_ = 0;
  usrobotchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZuanTouHitFishReq::~ZuanTouHitFishReq() {
  SharedDtor();
}

void ZuanTouHitFishReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZuanTouHitFishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZuanTouHitFishReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZuanTouHitFishReq_descriptor_;
}

const ZuanTouHitFishReq& ZuanTouHitFishReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ZuanTouHitFishReq* ZuanTouHitFishReq::default_instance_ = NULL;

ZuanTouHitFishReq* ZuanTouHitFishReq::New() const {
  return new ZuanTouHitFishReq;
}

void ZuanTouHitFishReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    uszuantouid_ = 0;
    usrobotchairid_ = 0;
  }
  subfishes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZuanTouHitFishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usZuanTouId;
        break;
      }

      // optional int32 usZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SubFishes;
        break;
      }

      // repeated int32 SubFishes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubFishes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_subfishes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_subfishes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SubFishes;
        if (input->ExpectTag(32)) goto parse_usRobotChairId;
        break;
      }

      // optional int32 usRobotChairId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usRobotChairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usrobotchairid_)));
          set_has_usrobotchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZuanTouHitFishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uszuantouid(), output);
  }

  // repeated int32 SubFishes = 3;
  for (int i = 0; i < this->subfishes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->subfishes(i), output);
  }

  // optional int32 usRobotChairId = 4;
  if (has_usrobotchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usrobotchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZuanTouHitFishReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uszuantouid(), target);
  }

  // repeated int32 SubFishes = 3;
  for (int i = 0; i < this->subfishes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->subfishes(i), target);
  }

  // optional int32 usRobotChairId = 4;
  if (has_usrobotchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usrobotchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZuanTouHitFishReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usZuanTouId = 2;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

    // optional int32 usRobotChairId = 4;
    if (has_usrobotchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usrobotchairid());
    }

  }
  // repeated int32 SubFishes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->subfishes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->subfishes(i));
    }
    total_size += 1 * this->subfishes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZuanTouHitFishReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZuanTouHitFishReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZuanTouHitFishReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZuanTouHitFishReq::MergeFrom(const ZuanTouHitFishReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  subfishes_.MergeFrom(from.subfishes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
    if (from.has_usrobotchairid()) {
      set_usrobotchairid(from.usrobotchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZuanTouHitFishReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZuanTouHitFishReq::CopyFrom(const ZuanTouHitFishReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZuanTouHitFishReq::IsInitialized() const {

  return true;
}

void ZuanTouHitFishReq::Swap(ZuanTouHitFishReq* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(uszuantouid_, other->uszuantouid_);
    subfishes_.Swap(&other->subfishes_);
    std::swap(usrobotchairid_, other->usrobotchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZuanTouHitFishReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZuanTouHitFishReq_descriptor_;
  metadata.reflection = ZuanTouHitFishReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZuanTouBombRsp::kUsChairIdFieldNumber;
const int ZuanTouBombRsp::kUsZuanTouIdFieldNumber;
const int ZuanTouBombRsp::kUsTotalScoreFieldNumber;
const int ZuanTouBombRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

ZuanTouBombRsp::ZuanTouBombRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZuanTouBombRsp::InitAsDefaultInstance() {
}

ZuanTouBombRsp::ZuanTouBombRsp(const ZuanTouBombRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZuanTouBombRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  uszuantouid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZuanTouBombRsp::~ZuanTouBombRsp() {
  SharedDtor();
}

void ZuanTouBombRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZuanTouBombRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZuanTouBombRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZuanTouBombRsp_descriptor_;
}

const ZuanTouBombRsp& ZuanTouBombRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

ZuanTouBombRsp* ZuanTouBombRsp::default_instance_ = NULL;

ZuanTouBombRsp* ZuanTouBombRsp::New() const {
  return new ZuanTouBombRsp;
}

void ZuanTouBombRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    uszuantouid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZuanTouBombRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usZuanTouId;
        break;
      }

      // optional int32 usZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZuanTouBombRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uszuantouid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZuanTouBombRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usZuanTouId = 2;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uszuantouid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZuanTouBombRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usZuanTouId = 2;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZuanTouBombRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZuanTouBombRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZuanTouBombRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZuanTouBombRsp::MergeFrom(const ZuanTouBombRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZuanTouBombRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZuanTouBombRsp::CopyFrom(const ZuanTouBombRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZuanTouBombRsp::IsInitialized() const {

  return true;
}

void ZuanTouBombRsp::Swap(ZuanTouBombRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(uszuantouid_, other->uszuantouid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZuanTouBombRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZuanTouBombRsp_descriptor_;
  metadata.reflection = ZuanTouBombRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SomeZuanTouInfo::kUsZuanTouIdFieldNumber;
const int SomeZuanTouInfo::kUsAngleFieldNumber;
const int SomeZuanTouInfo::kUsTraceIdFieldNumber;
const int SomeZuanTouInfo::kUsTraceStartPtFieldNumber;
#endif  // !_MSC_VER

SomeZuanTouInfo::SomeZuanTouInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SomeZuanTouInfo::InitAsDefaultInstance() {
}

SomeZuanTouInfo::SomeZuanTouInfo(const SomeZuanTouInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SomeZuanTouInfo::SharedCtor() {
  _cached_size_ = 0;
  uszuantouid_ = 0;
  usangle_ = 0;
  ustraceid_ = 0;
  ustracestartpt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SomeZuanTouInfo::~SomeZuanTouInfo() {
  SharedDtor();
}

void SomeZuanTouInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SomeZuanTouInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SomeZuanTouInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SomeZuanTouInfo_descriptor_;
}

const SomeZuanTouInfo& SomeZuanTouInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

SomeZuanTouInfo* SomeZuanTouInfo::default_instance_ = NULL;

SomeZuanTouInfo* SomeZuanTouInfo::New() const {
  return new SomeZuanTouInfo;
}

void SomeZuanTouInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uszuantouid_ = 0;
    usangle_ = 0;
    ustraceid_ = 0;
    ustracestartpt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SomeZuanTouInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usZuanTouId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usAngle;
        break;
      }

      // optional int32 usAngle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usangle_)));
          set_has_usangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTraceId;
        break;
      }

      // optional int32 usTraceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTraceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustraceid_)));
          set_has_ustraceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTraceStartPt;
        break;
      }

      // optional int32 usTraceStartPt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTraceStartPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustracestartpt_)));
          set_has_ustracestartpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SomeZuanTouInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usZuanTouId = 1;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uszuantouid(), output);
  }

  // optional int32 usAngle = 2;
  if (has_usangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usangle(), output);
  }

  // optional int32 usTraceId = 3;
  if (has_ustraceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustraceid(), output);
  }

  // optional int32 usTraceStartPt = 4;
  if (has_ustracestartpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustracestartpt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SomeZuanTouInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usZuanTouId = 1;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uszuantouid(), target);
  }

  // optional int32 usAngle = 2;
  if (has_usangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usangle(), target);
  }

  // optional int32 usTraceId = 3;
  if (has_ustraceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustraceid(), target);
  }

  // optional int32 usTraceStartPt = 4;
  if (has_ustracestartpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustracestartpt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SomeZuanTouInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usZuanTouId = 1;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

    // optional int32 usAngle = 2;
    if (has_usangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usangle());
    }

    // optional int32 usTraceId = 3;
    if (has_ustraceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustraceid());
    }

    // optional int32 usTraceStartPt = 4;
    if (has_ustracestartpt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustracestartpt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SomeZuanTouInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SomeZuanTouInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SomeZuanTouInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SomeZuanTouInfo::MergeFrom(const SomeZuanTouInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
    if (from.has_usangle()) {
      set_usangle(from.usangle());
    }
    if (from.has_ustraceid()) {
      set_ustraceid(from.ustraceid());
    }
    if (from.has_ustracestartpt()) {
      set_ustracestartpt(from.ustracestartpt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SomeZuanTouInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SomeZuanTouInfo::CopyFrom(const SomeZuanTouInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeZuanTouInfo::IsInitialized() const {

  return true;
}

void SomeZuanTouInfo::Swap(SomeZuanTouInfo* other) {
  if (other != this) {
    std::swap(uszuantouid_, other->uszuantouid_);
    std::swap(usangle_, other->usangle_);
    std::swap(ustraceid_, other->ustraceid_);
    std::swap(ustracestartpt_, other->ustracestartpt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SomeZuanTouInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SomeZuanTouInfo_descriptor_;
  metadata.reflection = SomeZuanTouInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSomeZuanTouRsp::kUsChairIdFieldNumber;
const int CreateSomeZuanTouRsp::kUsSomeZuanTouIdFieldNumber;
const int CreateSomeZuanTouRsp::kUsKilledFishIdFieldNumber;
const int CreateSomeZuanTouRsp::kUsZuanTouStatusFieldNumber;
const int CreateSomeZuanTouRsp::kUsZuanTouStatusTimeFieldNumber;
const int CreateSomeZuanTouRsp::kZuanTousFieldNumber;
#endif  // !_MSC_VER

CreateSomeZuanTouRsp::CreateSomeZuanTouRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSomeZuanTouRsp::InitAsDefaultInstance() {
}

CreateSomeZuanTouRsp::CreateSomeZuanTouRsp(const CreateSomeZuanTouRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSomeZuanTouRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  ussomezuantouid_ = 0;
  uskilledfishid_ = 0;
  uszuantoustatus_ = 0;
  uszuantoustatustime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSomeZuanTouRsp::~CreateSomeZuanTouRsp() {
  SharedDtor();
}

void CreateSomeZuanTouRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateSomeZuanTouRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSomeZuanTouRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSomeZuanTouRsp_descriptor_;
}

const CreateSomeZuanTouRsp& CreateSomeZuanTouRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CreateSomeZuanTouRsp* CreateSomeZuanTouRsp::default_instance_ = NULL;

CreateSomeZuanTouRsp* CreateSomeZuanTouRsp::New() const {
  return new CreateSomeZuanTouRsp;
}

void CreateSomeZuanTouRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    ussomezuantouid_ = 0;
    uskilledfishid_ = 0;
    uszuantoustatus_ = 0;
    uszuantoustatustime_ = 0;
  }
  zuantous_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSomeZuanTouRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usSomeZuanTouId;
        break;
      }

      // optional int32 usSomeZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSomeZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ussomezuantouid_)));
          set_has_ussomezuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usKilledFishId;
        break;
      }

      // optional int32 usKilledFishId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usKilledFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uskilledfishid_)));
          set_has_uskilledfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usZuanTouStatus;
        break;
      }

      // optional int32 usZuanTouStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantoustatus_)));
          set_has_uszuantoustatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usZuanTouStatusTime;
        break;
      }

      // optional int32 usZuanTouStatusTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouStatusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantoustatustime_)));
          set_has_uszuantoustatustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zuanTous;
        break;
      }

      // repeated .gamefish.SomeZuanTouInfo zuanTous = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zuanTous:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zuantous()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zuanTous;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSomeZuanTouRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usSomeZuanTouId = 2;
  if (has_ussomezuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ussomezuantouid(), output);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uskilledfishid(), output);
  }

  // optional int32 usZuanTouStatus = 4;
  if (has_uszuantoustatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uszuantoustatus(), output);
  }

  // optional int32 usZuanTouStatusTime = 5;
  if (has_uszuantoustatustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uszuantoustatustime(), output);
  }

  // repeated .gamefish.SomeZuanTouInfo zuanTous = 6;
  for (int i = 0; i < this->zuantous_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->zuantous(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSomeZuanTouRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usSomeZuanTouId = 2;
  if (has_ussomezuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ussomezuantouid(), target);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uskilledfishid(), target);
  }

  // optional int32 usZuanTouStatus = 4;
  if (has_uszuantoustatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uszuantoustatus(), target);
  }

  // optional int32 usZuanTouStatusTime = 5;
  if (has_uszuantoustatustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uszuantoustatustime(), target);
  }

  // repeated .gamefish.SomeZuanTouInfo zuanTous = 6;
  for (int i = 0; i < this->zuantous_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->zuantous(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSomeZuanTouRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usSomeZuanTouId = 2;
    if (has_ussomezuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ussomezuantouid());
    }

    // optional int32 usKilledFishId = 3;
    if (has_uskilledfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uskilledfishid());
    }

    // optional int32 usZuanTouStatus = 4;
    if (has_uszuantoustatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantoustatus());
    }

    // optional int32 usZuanTouStatusTime = 5;
    if (has_uszuantoustatustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantoustatustime());
    }

  }
  // repeated .gamefish.SomeZuanTouInfo zuanTous = 6;
  total_size += 1 * this->zuantous_size();
  for (int i = 0; i < this->zuantous_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zuantous(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSomeZuanTouRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSomeZuanTouRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSomeZuanTouRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSomeZuanTouRsp::MergeFrom(const CreateSomeZuanTouRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  zuantous_.MergeFrom(from.zuantous_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_ussomezuantouid()) {
      set_ussomezuantouid(from.ussomezuantouid());
    }
    if (from.has_uskilledfishid()) {
      set_uskilledfishid(from.uskilledfishid());
    }
    if (from.has_uszuantoustatus()) {
      set_uszuantoustatus(from.uszuantoustatus());
    }
    if (from.has_uszuantoustatustime()) {
      set_uszuantoustatustime(from.uszuantoustatustime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSomeZuanTouRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSomeZuanTouRsp::CopyFrom(const CreateSomeZuanTouRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSomeZuanTouRsp::IsInitialized() const {

  return true;
}

void CreateSomeZuanTouRsp::Swap(CreateSomeZuanTouRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(ussomezuantouid_, other->ussomezuantouid_);
    std::swap(uskilledfishid_, other->uskilledfishid_);
    std::swap(uszuantoustatus_, other->uszuantoustatus_);
    std::swap(uszuantoustatustime_, other->uszuantoustatustime_);
    zuantous_.Swap(&other->zuantous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSomeZuanTouRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSomeZuanTouRsp_descriptor_;
  metadata.reflection = CreateSomeZuanTouRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SomeZuanTouShootRsp::kUsChairIdFieldNumber;
const int SomeZuanTouShootRsp::kUsSomeZuanTouIdFieldNumber;
const int SomeZuanTouShootRsp::kSomeZuanTouFieldNumber;
#endif  // !_MSC_VER

SomeZuanTouShootRsp::SomeZuanTouShootRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SomeZuanTouShootRsp::InitAsDefaultInstance() {
  somezuantou_ = const_cast< ::gamefish::SomeZuanTouInfo*>(&::gamefish::SomeZuanTouInfo::default_instance());
}

SomeZuanTouShootRsp::SomeZuanTouShootRsp(const SomeZuanTouShootRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SomeZuanTouShootRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  ussomezuantouid_ = 0;
  somezuantou_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SomeZuanTouShootRsp::~SomeZuanTouShootRsp() {
  SharedDtor();
}

void SomeZuanTouShootRsp::SharedDtor() {
  if (this != default_instance_) {
    delete somezuantou_;
  }
}

void SomeZuanTouShootRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SomeZuanTouShootRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SomeZuanTouShootRsp_descriptor_;
}

const SomeZuanTouShootRsp& SomeZuanTouShootRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

SomeZuanTouShootRsp* SomeZuanTouShootRsp::default_instance_ = NULL;

SomeZuanTouShootRsp* SomeZuanTouShootRsp::New() const {
  return new SomeZuanTouShootRsp;
}

void SomeZuanTouShootRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    ussomezuantouid_ = 0;
    if (has_somezuantou()) {
      if (somezuantou_ != NULL) somezuantou_->::gamefish::SomeZuanTouInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SomeZuanTouShootRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usSomeZuanTouId;
        break;
      }

      // optional int32 usSomeZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSomeZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ussomezuantouid_)));
          set_has_ussomezuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_someZuanTou;
        break;
      }

      // optional .gamefish.SomeZuanTouInfo someZuanTou = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_someZuanTou:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_somezuantou()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SomeZuanTouShootRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usSomeZuanTouId = 2;
  if (has_ussomezuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ussomezuantouid(), output);
  }

  // optional .gamefish.SomeZuanTouInfo someZuanTou = 3;
  if (has_somezuantou()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->somezuantou(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SomeZuanTouShootRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usSomeZuanTouId = 2;
  if (has_ussomezuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ussomezuantouid(), target);
  }

  // optional .gamefish.SomeZuanTouInfo someZuanTou = 3;
  if (has_somezuantou()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->somezuantou(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SomeZuanTouShootRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usSomeZuanTouId = 2;
    if (has_ussomezuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ussomezuantouid());
    }

    // optional .gamefish.SomeZuanTouInfo someZuanTou = 3;
    if (has_somezuantou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->somezuantou());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SomeZuanTouShootRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SomeZuanTouShootRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SomeZuanTouShootRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SomeZuanTouShootRsp::MergeFrom(const SomeZuanTouShootRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_ussomezuantouid()) {
      set_ussomezuantouid(from.ussomezuantouid());
    }
    if (from.has_somezuantou()) {
      mutable_somezuantou()->::gamefish::SomeZuanTouInfo::MergeFrom(from.somezuantou());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SomeZuanTouShootRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SomeZuanTouShootRsp::CopyFrom(const SomeZuanTouShootRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeZuanTouShootRsp::IsInitialized() const {

  return true;
}

void SomeZuanTouShootRsp::Swap(SomeZuanTouShootRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(ussomezuantouid_, other->ussomezuantouid_);
    std::swap(somezuantou_, other->somezuantou_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SomeZuanTouShootRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SomeZuanTouShootRsp_descriptor_;
  metadata.reflection = SomeZuanTouShootRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SomeZuanTouHitFishReq::kUsChairIdFieldNumber;
const int SomeZuanTouHitFishReq::kUsSomeZuanTouIdFieldNumber;
const int SomeZuanTouHitFishReq::kUsZuanTouIdFieldNumber;
const int SomeZuanTouHitFishReq::kSubFishesFieldNumber;
#endif  // !_MSC_VER

SomeZuanTouHitFishReq::SomeZuanTouHitFishReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SomeZuanTouHitFishReq::InitAsDefaultInstance() {
}

SomeZuanTouHitFishReq::SomeZuanTouHitFishReq(const SomeZuanTouHitFishReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SomeZuanTouHitFishReq::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  ussomezuantouid_ = 0;
  uszuantouid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SomeZuanTouHitFishReq::~SomeZuanTouHitFishReq() {
  SharedDtor();
}

void SomeZuanTouHitFishReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SomeZuanTouHitFishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SomeZuanTouHitFishReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SomeZuanTouHitFishReq_descriptor_;
}

const SomeZuanTouHitFishReq& SomeZuanTouHitFishReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

SomeZuanTouHitFishReq* SomeZuanTouHitFishReq::default_instance_ = NULL;

SomeZuanTouHitFishReq* SomeZuanTouHitFishReq::New() const {
  return new SomeZuanTouHitFishReq;
}

void SomeZuanTouHitFishReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    ussomezuantouid_ = 0;
    uszuantouid_ = 0;
  }
  subfishes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SomeZuanTouHitFishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usSomeZuanTouId;
        break;
      }

      // optional int32 usSomeZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSomeZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ussomezuantouid_)));
          set_has_ussomezuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usZuanTouId;
        break;
      }

      // optional int32 usZuanTouId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uszuantouid_)));
          set_has_uszuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SubFishes;
        break;
      }

      // repeated int32 SubFishes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubFishes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_subfishes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_subfishes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SubFishes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SomeZuanTouHitFishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usSomeZuanTouId = 2;
  if (has_ussomezuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ussomezuantouid(), output);
  }

  // optional int32 usZuanTouId = 3;
  if (has_uszuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uszuantouid(), output);
  }

  // repeated int32 SubFishes = 4;
  for (int i = 0; i < this->subfishes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->subfishes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SomeZuanTouHitFishReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usSomeZuanTouId = 2;
  if (has_ussomezuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ussomezuantouid(), target);
  }

  // optional int32 usZuanTouId = 3;
  if (has_uszuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uszuantouid(), target);
  }

  // repeated int32 SubFishes = 4;
  for (int i = 0; i < this->subfishes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->subfishes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SomeZuanTouHitFishReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usSomeZuanTouId = 2;
    if (has_ussomezuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ussomezuantouid());
    }

    // optional int32 usZuanTouId = 3;
    if (has_uszuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uszuantouid());
    }

  }
  // repeated int32 SubFishes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->subfishes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->subfishes(i));
    }
    total_size += 1 * this->subfishes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SomeZuanTouHitFishReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SomeZuanTouHitFishReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SomeZuanTouHitFishReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SomeZuanTouHitFishReq::MergeFrom(const SomeZuanTouHitFishReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  subfishes_.MergeFrom(from.subfishes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_ussomezuantouid()) {
      set_ussomezuantouid(from.ussomezuantouid());
    }
    if (from.has_uszuantouid()) {
      set_uszuantouid(from.uszuantouid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SomeZuanTouHitFishReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SomeZuanTouHitFishReq::CopyFrom(const SomeZuanTouHitFishReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeZuanTouHitFishReq::IsInitialized() const {

  return true;
}

void SomeZuanTouHitFishReq::Swap(SomeZuanTouHitFishReq* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(ussomezuantouid_, other->ussomezuantouid_);
    std::swap(uszuantouid_, other->uszuantouid_);
    subfishes_.Swap(&other->subfishes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SomeZuanTouHitFishReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SomeZuanTouHitFishReq_descriptor_;
  metadata.reflection = SomeZuanTouHitFishReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SomeZuanTouBombRsp::kUsChairIdFieldNumber;
const int SomeZuanTouBombRsp::kUsSomeZuanTouIdFieldNumber;
const int SomeZuanTouBombRsp::kUsTotalScoreFieldNumber;
const int SomeZuanTouBombRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

SomeZuanTouBombRsp::SomeZuanTouBombRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SomeZuanTouBombRsp::InitAsDefaultInstance() {
}

SomeZuanTouBombRsp::SomeZuanTouBombRsp(const SomeZuanTouBombRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SomeZuanTouBombRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  ussomezuantouid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SomeZuanTouBombRsp::~SomeZuanTouBombRsp() {
  SharedDtor();
}

void SomeZuanTouBombRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SomeZuanTouBombRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SomeZuanTouBombRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SomeZuanTouBombRsp_descriptor_;
}

const SomeZuanTouBombRsp& SomeZuanTouBombRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

SomeZuanTouBombRsp* SomeZuanTouBombRsp::default_instance_ = NULL;

SomeZuanTouBombRsp* SomeZuanTouBombRsp::New() const {
  return new SomeZuanTouBombRsp;
}

void SomeZuanTouBombRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    ussomezuantouid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SomeZuanTouBombRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usSomeZuanTouId;
        break;
      }

      // optional int32 usSomeZuanTouId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSomeZuanTouId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ussomezuantouid_)));
          set_has_ussomezuantouid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SomeZuanTouBombRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usSomeZuanTouId = 2;
  if (has_ussomezuantouid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ussomezuantouid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SomeZuanTouBombRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usSomeZuanTouId = 2;
  if (has_ussomezuantouid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ussomezuantouid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SomeZuanTouBombRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usSomeZuanTouId = 2;
    if (has_ussomezuantouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ussomezuantouid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SomeZuanTouBombRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SomeZuanTouBombRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SomeZuanTouBombRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SomeZuanTouBombRsp::MergeFrom(const SomeZuanTouBombRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_ussomezuantouid()) {
      set_ussomezuantouid(from.ussomezuantouid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SomeZuanTouBombRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SomeZuanTouBombRsp::CopyFrom(const SomeZuanTouBombRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeZuanTouBombRsp::IsInitialized() const {

  return true;
}

void SomeZuanTouBombRsp::Swap(SomeZuanTouBombRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(ussomezuantouid_, other->ussomezuantouid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SomeZuanTouBombRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SomeZuanTouBombRsp_descriptor_;
  metadata.reflection = SomeZuanTouBombRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateFireStormRsp::kUsChairIdFieldNumber;
const int CreateFireStormRsp::kUsFireStormIdFieldNumber;
const int CreateFireStormRsp::kUsKilledFishIdFieldNumber;
const int CreateFireStormRsp::kUsStatusFieldNumber;
const int CreateFireStormRsp::kUsStatusTimeFieldNumber;
const int CreateFireStormRsp::kUsTotalScoreFieldNumber;
const int CreateFireStormRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

CreateFireStormRsp::CreateFireStormRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateFireStormRsp::InitAsDefaultInstance() {
}

CreateFireStormRsp::CreateFireStormRsp(const CreateFireStormRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateFireStormRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usfirestormid_ = 0;
  uskilledfishid_ = 0;
  usstatus_ = 0;
  usstatustime_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateFireStormRsp::~CreateFireStormRsp() {
  SharedDtor();
}

void CreateFireStormRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateFireStormRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateFireStormRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateFireStormRsp_descriptor_;
}

const CreateFireStormRsp& CreateFireStormRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CreateFireStormRsp* CreateFireStormRsp::default_instance_ = NULL;

CreateFireStormRsp* CreateFireStormRsp::New() const {
  return new CreateFireStormRsp;
}

void CreateFireStormRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usfirestormid_ = 0;
    uskilledfishid_ = 0;
    usstatus_ = 0;
    usstatustime_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateFireStormRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usFireStormId;
        break;
      }

      // optional int32 usFireStormId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usFireStormId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usfirestormid_)));
          set_has_usfirestormid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usKilledFishId;
        break;
      }

      // optional int32 usKilledFishId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usKilledFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uskilledfishid_)));
          set_has_uskilledfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usStatus;
        break;
      }

      // optional int32 usStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatus_)));
          set_has_usstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usStatusTime;
        break;
      }

      // optional int32 usStatusTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatustime_)));
          set_has_usstatustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateFireStormRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usFireStormId = 2;
  if (has_usfirestormid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usfirestormid(), output);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uskilledfishid(), output);
  }

  // optional int32 usStatus = 4;
  if (has_usstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usstatus(), output);
  }

  // optional int32 usStatusTime = 5;
  if (has_usstatustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usstatustime(), output);
  }

  // optional int32 usTotalScore = 6;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 7;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateFireStormRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usFireStormId = 2;
  if (has_usfirestormid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usfirestormid(), target);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uskilledfishid(), target);
  }

  // optional int32 usStatus = 4;
  if (has_usstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usstatus(), target);
  }

  // optional int32 usStatusTime = 5;
  if (has_usstatustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usstatustime(), target);
  }

  // optional int32 usTotalScore = 6;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 7;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateFireStormRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usFireStormId = 2;
    if (has_usfirestormid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usfirestormid());
    }

    // optional int32 usKilledFishId = 3;
    if (has_uskilledfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uskilledfishid());
    }

    // optional int32 usStatus = 4;
    if (has_usstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatus());
    }

    // optional int32 usStatusTime = 5;
    if (has_usstatustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatustime());
    }

    // optional int32 usTotalScore = 6;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 7;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateFireStormRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateFireStormRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateFireStormRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateFireStormRsp::MergeFrom(const CreateFireStormRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usfirestormid()) {
      set_usfirestormid(from.usfirestormid());
    }
    if (from.has_uskilledfishid()) {
      set_uskilledfishid(from.uskilledfishid());
    }
    if (from.has_usstatus()) {
      set_usstatus(from.usstatus());
    }
    if (from.has_usstatustime()) {
      set_usstatustime(from.usstatustime());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateFireStormRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFireStormRsp::CopyFrom(const CreateFireStormRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFireStormRsp::IsInitialized() const {

  return true;
}

void CreateFireStormRsp::Swap(CreateFireStormRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usfirestormid_, other->usfirestormid_);
    std::swap(uskilledfishid_, other->uskilledfishid_);
    std::swap(usstatus_, other->usstatus_);
    std::swap(usstatustime_, other->usstatustime_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateFireStormRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateFireStormRsp_descriptor_;
  metadata.reflection = CreateFireStormRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestoryFireStormRsp::kUsChairIdFieldNumber;
const int DestoryFireStormRsp::kUsFireStormIdFieldNumber;
const int DestoryFireStormRsp::kUsTotalScoreFieldNumber;
const int DestoryFireStormRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

DestoryFireStormRsp::DestoryFireStormRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestoryFireStormRsp::InitAsDefaultInstance() {
}

DestoryFireStormRsp::DestoryFireStormRsp(const DestoryFireStormRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestoryFireStormRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usfirestormid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestoryFireStormRsp::~DestoryFireStormRsp() {
  SharedDtor();
}

void DestoryFireStormRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestoryFireStormRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestoryFireStormRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestoryFireStormRsp_descriptor_;
}

const DestoryFireStormRsp& DestoryFireStormRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DestoryFireStormRsp* DestoryFireStormRsp::default_instance_ = NULL;

DestoryFireStormRsp* DestoryFireStormRsp::New() const {
  return new DestoryFireStormRsp;
}

void DestoryFireStormRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usfirestormid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestoryFireStormRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usFireStormId;
        break;
      }

      // optional int32 usFireStormId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usFireStormId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usfirestormid_)));
          set_has_usfirestormid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestoryFireStormRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usFireStormId = 2;
  if (has_usfirestormid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usfirestormid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestoryFireStormRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usFireStormId = 2;
  if (has_usfirestormid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usfirestormid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestoryFireStormRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usFireStormId = 2;
    if (has_usfirestormid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usfirestormid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestoryFireStormRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestoryFireStormRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestoryFireStormRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestoryFireStormRsp::MergeFrom(const DestoryFireStormRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usfirestormid()) {
      set_usfirestormid(from.usfirestormid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestoryFireStormRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestoryFireStormRsp::CopyFrom(const DestoryFireStormRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestoryFireStormRsp::IsInitialized() const {

  return true;
}

void DestoryFireStormRsp::Swap(DestoryFireStormRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usfirestormid_, other->usfirestormid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestoryFireStormRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestoryFireStormRsp_descriptor_;
  metadata.reflection = DestoryFireStormRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FireStormStatusRsp::kUsChairIdFieldNumber;
const int FireStormStatusRsp::kUsFireStormIdFieldNumber;
const int FireStormStatusRsp::kUsStatusFieldNumber;
#endif  // !_MSC_VER

FireStormStatusRsp::FireStormStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FireStormStatusRsp::InitAsDefaultInstance() {
}

FireStormStatusRsp::FireStormStatusRsp(const FireStormStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FireStormStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usfirestormid_ = 0;
  usstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FireStormStatusRsp::~FireStormStatusRsp() {
  SharedDtor();
}

void FireStormStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FireStormStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FireStormStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FireStormStatusRsp_descriptor_;
}

const FireStormStatusRsp& FireStormStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

FireStormStatusRsp* FireStormStatusRsp::default_instance_ = NULL;

FireStormStatusRsp* FireStormStatusRsp::New() const {
  return new FireStormStatusRsp;
}

void FireStormStatusRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usfirestormid_ = 0;
    usstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FireStormStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usFireStormId;
        break;
      }

      // optional int32 usFireStormId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usFireStormId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usfirestormid_)));
          set_has_usfirestormid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usStatus;
        break;
      }

      // optional int32 usStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatus_)));
          set_has_usstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FireStormStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usFireStormId = 2;
  if (has_usfirestormid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usfirestormid(), output);
  }

  // optional int32 usStatus = 3;
  if (has_usstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FireStormStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usFireStormId = 2;
  if (has_usfirestormid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usfirestormid(), target);
  }

  // optional int32 usStatus = 3;
  if (has_usstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FireStormStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usFireStormId = 2;
    if (has_usfirestormid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usfirestormid());
    }

    // optional int32 usStatus = 3;
    if (has_usstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FireStormStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FireStormStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FireStormStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FireStormStatusRsp::MergeFrom(const FireStormStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usfirestormid()) {
      set_usfirestormid(from.usfirestormid());
    }
    if (from.has_usstatus()) {
      set_usstatus(from.usstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FireStormStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireStormStatusRsp::CopyFrom(const FireStormStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireStormStatusRsp::IsInitialized() const {

  return true;
}

void FireStormStatusRsp::Swap(FireStormStatusRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usfirestormid_, other->usfirestormid_);
    std::swap(usstatus_, other->usstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FireStormStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FireStormStatusRsp_descriptor_;
  metadata.reflection = FireStormStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FireStormScoreRsp::kUsChairIdFieldNumber;
const int FireStormScoreRsp::kUsFireStormIdFieldNumber;
const int FireStormScoreRsp::kUsTotalScoreFieldNumber;
const int FireStormScoreRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

FireStormScoreRsp::FireStormScoreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FireStormScoreRsp::InitAsDefaultInstance() {
}

FireStormScoreRsp::FireStormScoreRsp(const FireStormScoreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FireStormScoreRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usfirestormid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FireStormScoreRsp::~FireStormScoreRsp() {
  SharedDtor();
}

void FireStormScoreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FireStormScoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FireStormScoreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FireStormScoreRsp_descriptor_;
}

const FireStormScoreRsp& FireStormScoreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

FireStormScoreRsp* FireStormScoreRsp::default_instance_ = NULL;

FireStormScoreRsp* FireStormScoreRsp::New() const {
  return new FireStormScoreRsp;
}

void FireStormScoreRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usfirestormid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FireStormScoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usFireStormId;
        break;
      }

      // optional int32 usFireStormId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usFireStormId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usfirestormid_)));
          set_has_usfirestormid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FireStormScoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usFireStormId = 2;
  if (has_usfirestormid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usfirestormid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FireStormScoreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usFireStormId = 2;
  if (has_usfirestormid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usfirestormid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FireStormScoreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usFireStormId = 2;
    if (has_usfirestormid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usfirestormid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FireStormScoreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FireStormScoreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FireStormScoreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FireStormScoreRsp::MergeFrom(const FireStormScoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usfirestormid()) {
      set_usfirestormid(from.usfirestormid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FireStormScoreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireStormScoreRsp::CopyFrom(const FireStormScoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireStormScoreRsp::IsInitialized() const {

  return true;
}

void FireStormScoreRsp::Swap(FireStormScoreRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usfirestormid_, other->usfirestormid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FireStormScoreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FireStormScoreRsp_descriptor_;
  metadata.reflection = FireStormScoreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMadCowRsp::kUsChairIdFieldNumber;
const int CreateMadCowRsp::kUsMadCowIdFieldNumber;
const int CreateMadCowRsp::kUsKilledFishIdFieldNumber;
const int CreateMadCowRsp::kUsRunDirectionFieldNumber;
const int CreateMadCowRsp::kUsStatusFieldNumber;
const int CreateMadCowRsp::kUsStatusTimeFieldNumber;
const int CreateMadCowRsp::kUsTotalScoreFieldNumber;
const int CreateMadCowRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

CreateMadCowRsp::CreateMadCowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateMadCowRsp::InitAsDefaultInstance() {
}

CreateMadCowRsp::CreateMadCowRsp(const CreateMadCowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateMadCowRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usmadcowid_ = 0;
  uskilledfishid_ = 0;
  usrundirection_ = 0;
  usstatus_ = 0;
  usstatustime_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMadCowRsp::~CreateMadCowRsp() {
  SharedDtor();
}

void CreateMadCowRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateMadCowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMadCowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMadCowRsp_descriptor_;
}

const CreateMadCowRsp& CreateMadCowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CreateMadCowRsp* CreateMadCowRsp::default_instance_ = NULL;

CreateMadCowRsp* CreateMadCowRsp::New() const {
  return new CreateMadCowRsp;
}

void CreateMadCowRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usmadcowid_ = 0;
    uskilledfishid_ = 0;
    usrundirection_ = 0;
    usstatus_ = 0;
    usstatustime_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMadCowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usMadCowId;
        break;
      }

      // optional int32 usMadCowId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usMadCowId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usmadcowid_)));
          set_has_usmadcowid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usKilledFishId;
        break;
      }

      // optional int32 usKilledFishId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usKilledFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uskilledfishid_)));
          set_has_uskilledfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usRunDirection;
        break;
      }

      // optional int32 usRunDirection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usRunDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usrundirection_)));
          set_has_usrundirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usStatus;
        break;
      }

      // optional int32 usStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatus_)));
          set_has_usstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usStatusTime;
        break;
      }

      // optional int32 usStatusTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatustime_)));
          set_has_usstatustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateMadCowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usMadCowId = 2;
  if (has_usmadcowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usmadcowid(), output);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uskilledfishid(), output);
  }

  // optional int32 usRunDirection = 4;
  if (has_usrundirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usrundirection(), output);
  }

  // optional int32 usStatus = 5;
  if (has_usstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usstatus(), output);
  }

  // optional int32 usStatusTime = 6;
  if (has_usstatustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usstatustime(), output);
  }

  // optional int32 usTotalScore = 7;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 8;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateMadCowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usMadCowId = 2;
  if (has_usmadcowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usmadcowid(), target);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uskilledfishid(), target);
  }

  // optional int32 usRunDirection = 4;
  if (has_usrundirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usrundirection(), target);
  }

  // optional int32 usStatus = 5;
  if (has_usstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usstatus(), target);
  }

  // optional int32 usStatusTime = 6;
  if (has_usstatustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usstatustime(), target);
  }

  // optional int32 usTotalScore = 7;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 8;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateMadCowRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usMadCowId = 2;
    if (has_usmadcowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usmadcowid());
    }

    // optional int32 usKilledFishId = 3;
    if (has_uskilledfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uskilledfishid());
    }

    // optional int32 usRunDirection = 4;
    if (has_usrundirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usrundirection());
    }

    // optional int32 usStatus = 5;
    if (has_usstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatus());
    }

    // optional int32 usStatusTime = 6;
    if (has_usstatustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatustime());
    }

    // optional int32 usTotalScore = 7;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 8;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMadCowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMadCowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMadCowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMadCowRsp::MergeFrom(const CreateMadCowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usmadcowid()) {
      set_usmadcowid(from.usmadcowid());
    }
    if (from.has_uskilledfishid()) {
      set_uskilledfishid(from.uskilledfishid());
    }
    if (from.has_usrundirection()) {
      set_usrundirection(from.usrundirection());
    }
    if (from.has_usstatus()) {
      set_usstatus(from.usstatus());
    }
    if (from.has_usstatustime()) {
      set_usstatustime(from.usstatustime());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMadCowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMadCowRsp::CopyFrom(const CreateMadCowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMadCowRsp::IsInitialized() const {

  return true;
}

void CreateMadCowRsp::Swap(CreateMadCowRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usmadcowid_, other->usmadcowid_);
    std::swap(uskilledfishid_, other->uskilledfishid_);
    std::swap(usrundirection_, other->usrundirection_);
    std::swap(usstatus_, other->usstatus_);
    std::swap(usstatustime_, other->usstatustime_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMadCowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMadCowRsp_descriptor_;
  metadata.reflection = CreateMadCowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestoryMadCowRsp::kUsChairIdFieldNumber;
const int DestoryMadCowRsp::kUsMadCowIdFieldNumber;
const int DestoryMadCowRsp::kUsTotalScoreFieldNumber;
const int DestoryMadCowRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

DestoryMadCowRsp::DestoryMadCowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestoryMadCowRsp::InitAsDefaultInstance() {
}

DestoryMadCowRsp::DestoryMadCowRsp(const DestoryMadCowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestoryMadCowRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usmadcowid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestoryMadCowRsp::~DestoryMadCowRsp() {
  SharedDtor();
}

void DestoryMadCowRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestoryMadCowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestoryMadCowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestoryMadCowRsp_descriptor_;
}

const DestoryMadCowRsp& DestoryMadCowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DestoryMadCowRsp* DestoryMadCowRsp::default_instance_ = NULL;

DestoryMadCowRsp* DestoryMadCowRsp::New() const {
  return new DestoryMadCowRsp;
}

void DestoryMadCowRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usmadcowid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestoryMadCowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usMadCowId;
        break;
      }

      // optional int32 usMadCowId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usMadCowId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usmadcowid_)));
          set_has_usmadcowid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestoryMadCowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usMadCowId = 2;
  if (has_usmadcowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usmadcowid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestoryMadCowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usMadCowId = 2;
  if (has_usmadcowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usmadcowid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestoryMadCowRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usMadCowId = 2;
    if (has_usmadcowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usmadcowid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestoryMadCowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestoryMadCowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestoryMadCowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestoryMadCowRsp::MergeFrom(const DestoryMadCowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usmadcowid()) {
      set_usmadcowid(from.usmadcowid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestoryMadCowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestoryMadCowRsp::CopyFrom(const DestoryMadCowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestoryMadCowRsp::IsInitialized() const {

  return true;
}

void DestoryMadCowRsp::Swap(DestoryMadCowRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usmadcowid_, other->usmadcowid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestoryMadCowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestoryMadCowRsp_descriptor_;
  metadata.reflection = DestoryMadCowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MadCowStatusRsp::kUsChairIdFieldNumber;
const int MadCowStatusRsp::kUsMadCowIdFieldNumber;
const int MadCowStatusRsp::kUsStatusFieldNumber;
#endif  // !_MSC_VER

MadCowStatusRsp::MadCowStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MadCowStatusRsp::InitAsDefaultInstance() {
}

MadCowStatusRsp::MadCowStatusRsp(const MadCowStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MadCowStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usmadcowid_ = 0;
  usstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MadCowStatusRsp::~MadCowStatusRsp() {
  SharedDtor();
}

void MadCowStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MadCowStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MadCowStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MadCowStatusRsp_descriptor_;
}

const MadCowStatusRsp& MadCowStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

MadCowStatusRsp* MadCowStatusRsp::default_instance_ = NULL;

MadCowStatusRsp* MadCowStatusRsp::New() const {
  return new MadCowStatusRsp;
}

void MadCowStatusRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usmadcowid_ = 0;
    usstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MadCowStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usMadCowId;
        break;
      }

      // optional int32 usMadCowId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usMadCowId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usmadcowid_)));
          set_has_usmadcowid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usStatus;
        break;
      }

      // optional int32 usStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatus_)));
          set_has_usstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MadCowStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usMadCowId = 2;
  if (has_usmadcowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usmadcowid(), output);
  }

  // optional int32 usStatus = 3;
  if (has_usstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MadCowStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usMadCowId = 2;
  if (has_usmadcowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usmadcowid(), target);
  }

  // optional int32 usStatus = 3;
  if (has_usstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MadCowStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usMadCowId = 2;
    if (has_usmadcowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usmadcowid());
    }

    // optional int32 usStatus = 3;
    if (has_usstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MadCowStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MadCowStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MadCowStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MadCowStatusRsp::MergeFrom(const MadCowStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usmadcowid()) {
      set_usmadcowid(from.usmadcowid());
    }
    if (from.has_usstatus()) {
      set_usstatus(from.usstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MadCowStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MadCowStatusRsp::CopyFrom(const MadCowStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MadCowStatusRsp::IsInitialized() const {

  return true;
}

void MadCowStatusRsp::Swap(MadCowStatusRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usmadcowid_, other->usmadcowid_);
    std::swap(usstatus_, other->usstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MadCowStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MadCowStatusRsp_descriptor_;
  metadata.reflection = MadCowStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MadCowScoreRsp::kUsChairIdFieldNumber;
const int MadCowScoreRsp::kUsMadCowIdFieldNumber;
const int MadCowScoreRsp::kUsTotalScoreFieldNumber;
const int MadCowScoreRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

MadCowScoreRsp::MadCowScoreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MadCowScoreRsp::InitAsDefaultInstance() {
}

MadCowScoreRsp::MadCowScoreRsp(const MadCowScoreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MadCowScoreRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usmadcowid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MadCowScoreRsp::~MadCowScoreRsp() {
  SharedDtor();
}

void MadCowScoreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MadCowScoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MadCowScoreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MadCowScoreRsp_descriptor_;
}

const MadCowScoreRsp& MadCowScoreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

MadCowScoreRsp* MadCowScoreRsp::default_instance_ = NULL;

MadCowScoreRsp* MadCowScoreRsp::New() const {
  return new MadCowScoreRsp;
}

void MadCowScoreRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usmadcowid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MadCowScoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usMadCowId;
        break;
      }

      // optional int32 usMadCowId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usMadCowId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usmadcowid_)));
          set_has_usmadcowid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MadCowScoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usMadCowId = 2;
  if (has_usmadcowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usmadcowid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MadCowScoreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usMadCowId = 2;
  if (has_usmadcowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usmadcowid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MadCowScoreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usMadCowId = 2;
    if (has_usmadcowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usmadcowid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MadCowScoreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MadCowScoreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MadCowScoreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MadCowScoreRsp::MergeFrom(const MadCowScoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usmadcowid()) {
      set_usmadcowid(from.usmadcowid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MadCowScoreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MadCowScoreRsp::CopyFrom(const MadCowScoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MadCowScoreRsp::IsInitialized() const {

  return true;
}

void MadCowScoreRsp::Swap(MadCowScoreRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usmadcowid_, other->usmadcowid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MadCowScoreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MadCowScoreRsp_descriptor_;
  metadata.reflection = MadCowScoreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSerialBombCrabRsp::kUsChairIdFieldNumber;
const int CreateSerialBombCrabRsp::kUsSerialBombCrabIdFieldNumber;
const int CreateSerialBombCrabRsp::kUsKilledFishIdFieldNumber;
const int CreateSerialBombCrabRsp::kUsStatusFieldNumber;
const int CreateSerialBombCrabRsp::kUsStatusTimeFieldNumber;
const int CreateSerialBombCrabRsp::kUsBombPosXFieldNumber;
const int CreateSerialBombCrabRsp::kUsBombPosYFieldNumber;
const int CreateSerialBombCrabRsp::kUsNextBombPosXFieldNumber;
const int CreateSerialBombCrabRsp::kUsNextBombPosyFieldNumber;
const int CreateSerialBombCrabRsp::kUsBombCountFieldNumber;
const int CreateSerialBombCrabRsp::kBombFishIdFieldNumber;
#endif  // !_MSC_VER

CreateSerialBombCrabRsp::CreateSerialBombCrabRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSerialBombCrabRsp::InitAsDefaultInstance() {
}

CreateSerialBombCrabRsp::CreateSerialBombCrabRsp(const CreateSerialBombCrabRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSerialBombCrabRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usserialbombcrabid_ = 0;
  uskilledfishid_ = 0;
  usstatus_ = 0;
  usstatustime_ = 0;
  usbombposx_ = 0;
  usbombposy_ = 0;
  usnextbombposx_ = 0;
  usnextbombposy_ = 0;
  usbombcount_ = 0;
  bombfishid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSerialBombCrabRsp::~CreateSerialBombCrabRsp() {
  SharedDtor();
}

void CreateSerialBombCrabRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateSerialBombCrabRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSerialBombCrabRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSerialBombCrabRsp_descriptor_;
}

const CreateSerialBombCrabRsp& CreateSerialBombCrabRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CreateSerialBombCrabRsp* CreateSerialBombCrabRsp::default_instance_ = NULL;

CreateSerialBombCrabRsp* CreateSerialBombCrabRsp::New() const {
  return new CreateSerialBombCrabRsp;
}

void CreateSerialBombCrabRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usserialbombcrabid_ = 0;
    uskilledfishid_ = 0;
    usstatus_ = 0;
    usstatustime_ = 0;
    usbombposx_ = 0;
    usbombposy_ = 0;
    usnextbombposx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    usnextbombposy_ = 0;
    usbombcount_ = 0;
    bombfishid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSerialBombCrabRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usSerialBombCrabId;
        break;
      }

      // optional int32 usSerialBombCrabId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSerialBombCrabId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usserialbombcrabid_)));
          set_has_usserialbombcrabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usKilledFishId;
        break;
      }

      // optional int32 usKilledFishId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usKilledFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uskilledfishid_)));
          set_has_uskilledfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usStatus;
        break;
      }

      // optional int32 usStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatus_)));
          set_has_usstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usStatusTime;
        break;
      }

      // optional int32 usStatusTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatustime_)));
          set_has_usstatustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usBombPosX;
        break;
      }

      // optional int32 usBombPosX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usBombPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbombposx_)));
          set_has_usbombposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_usBombPosY;
        break;
      }

      // optional int32 usBombPosY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usBombPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbombposy_)));
          set_has_usbombposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_usNextBombPosX;
        break;
      }

      // optional int32 usNextBombPosX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usNextBombPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usnextbombposx_)));
          set_has_usnextbombposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_usNextBombPosy;
        break;
      }

      // optional int32 usNextBombPosy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usNextBombPosy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usnextbombposy_)));
          set_has_usnextbombposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_usBombCount;
        break;
      }

      // optional int32 usBombCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usBombCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbombcount_)));
          set_has_usbombcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bombFishId;
        break;
      }

      // optional int32 bombFishId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bombFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bombfishid_)));
          set_has_bombfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSerialBombCrabRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usSerialBombCrabId = 2;
  if (has_usserialbombcrabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usserialbombcrabid(), output);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uskilledfishid(), output);
  }

  // optional int32 usStatus = 4;
  if (has_usstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usstatus(), output);
  }

  // optional int32 usStatusTime = 5;
  if (has_usstatustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usstatustime(), output);
  }

  // optional int32 usBombPosX = 6;
  if (has_usbombposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usbombposx(), output);
  }

  // optional int32 usBombPosY = 7;
  if (has_usbombposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->usbombposy(), output);
  }

  // optional int32 usNextBombPosX = 8;
  if (has_usnextbombposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->usnextbombposx(), output);
  }

  // optional int32 usNextBombPosy = 9;
  if (has_usnextbombposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->usnextbombposy(), output);
  }

  // optional int32 usBombCount = 10;
  if (has_usbombcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->usbombcount(), output);
  }

  // optional int32 bombFishId = 11;
  if (has_bombfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bombfishid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSerialBombCrabRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usSerialBombCrabId = 2;
  if (has_usserialbombcrabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usserialbombcrabid(), target);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uskilledfishid(), target);
  }

  // optional int32 usStatus = 4;
  if (has_usstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usstatus(), target);
  }

  // optional int32 usStatusTime = 5;
  if (has_usstatustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usstatustime(), target);
  }

  // optional int32 usBombPosX = 6;
  if (has_usbombposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usbombposx(), target);
  }

  // optional int32 usBombPosY = 7;
  if (has_usbombposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->usbombposy(), target);
  }

  // optional int32 usNextBombPosX = 8;
  if (has_usnextbombposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->usnextbombposx(), target);
  }

  // optional int32 usNextBombPosy = 9;
  if (has_usnextbombposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->usnextbombposy(), target);
  }

  // optional int32 usBombCount = 10;
  if (has_usbombcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->usbombcount(), target);
  }

  // optional int32 bombFishId = 11;
  if (has_bombfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bombfishid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSerialBombCrabRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usSerialBombCrabId = 2;
    if (has_usserialbombcrabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usserialbombcrabid());
    }

    // optional int32 usKilledFishId = 3;
    if (has_uskilledfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uskilledfishid());
    }

    // optional int32 usStatus = 4;
    if (has_usstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatus());
    }

    // optional int32 usStatusTime = 5;
    if (has_usstatustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatustime());
    }

    // optional int32 usBombPosX = 6;
    if (has_usbombposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbombposx());
    }

    // optional int32 usBombPosY = 7;
    if (has_usbombposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbombposy());
    }

    // optional int32 usNextBombPosX = 8;
    if (has_usnextbombposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usnextbombposx());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 usNextBombPosy = 9;
    if (has_usnextbombposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usnextbombposy());
    }

    // optional int32 usBombCount = 10;
    if (has_usbombcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbombcount());
    }

    // optional int32 bombFishId = 11;
    if (has_bombfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bombfishid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSerialBombCrabRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSerialBombCrabRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSerialBombCrabRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSerialBombCrabRsp::MergeFrom(const CreateSerialBombCrabRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usserialbombcrabid()) {
      set_usserialbombcrabid(from.usserialbombcrabid());
    }
    if (from.has_uskilledfishid()) {
      set_uskilledfishid(from.uskilledfishid());
    }
    if (from.has_usstatus()) {
      set_usstatus(from.usstatus());
    }
    if (from.has_usstatustime()) {
      set_usstatustime(from.usstatustime());
    }
    if (from.has_usbombposx()) {
      set_usbombposx(from.usbombposx());
    }
    if (from.has_usbombposy()) {
      set_usbombposy(from.usbombposy());
    }
    if (from.has_usnextbombposx()) {
      set_usnextbombposx(from.usnextbombposx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usnextbombposy()) {
      set_usnextbombposy(from.usnextbombposy());
    }
    if (from.has_usbombcount()) {
      set_usbombcount(from.usbombcount());
    }
    if (from.has_bombfishid()) {
      set_bombfishid(from.bombfishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSerialBombCrabRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSerialBombCrabRsp::CopyFrom(const CreateSerialBombCrabRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSerialBombCrabRsp::IsInitialized() const {

  return true;
}

void CreateSerialBombCrabRsp::Swap(CreateSerialBombCrabRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usserialbombcrabid_, other->usserialbombcrabid_);
    std::swap(uskilledfishid_, other->uskilledfishid_);
    std::swap(usstatus_, other->usstatus_);
    std::swap(usstatustime_, other->usstatustime_);
    std::swap(usbombposx_, other->usbombposx_);
    std::swap(usbombposy_, other->usbombposy_);
    std::swap(usnextbombposx_, other->usnextbombposx_);
    std::swap(usnextbombposy_, other->usnextbombposy_);
    std::swap(usbombcount_, other->usbombcount_);
    std::swap(bombfishid_, other->bombfishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSerialBombCrabRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSerialBombCrabRsp_descriptor_;
  metadata.reflection = CreateSerialBombCrabRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SerialBombCrabBombRsp::kUsChairIdFieldNumber;
const int SerialBombCrabBombRsp::kUsSerialBombCrabIdFieldNumber;
const int SerialBombCrabBombRsp::kUsTotalScoreFieldNumber;
const int SerialBombCrabBombRsp::kUsTotalMulFieldNumber;
const int SerialBombCrabBombRsp::kUsBombPosXFieldNumber;
const int SerialBombCrabBombRsp::kUsBombPosYFieldNumber;
const int SerialBombCrabBombRsp::kUsNextBombPosXFieldNumber;
const int SerialBombCrabBombRsp::kUsNextBombPosyFieldNumber;
const int SerialBombCrabBombRsp::kUsBombCountFieldNumber;
#endif  // !_MSC_VER

SerialBombCrabBombRsp::SerialBombCrabBombRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SerialBombCrabBombRsp::InitAsDefaultInstance() {
}

SerialBombCrabBombRsp::SerialBombCrabBombRsp(const SerialBombCrabBombRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SerialBombCrabBombRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usserialbombcrabid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  usbombposx_ = 0;
  usbombposy_ = 0;
  usnextbombposx_ = 0;
  usnextbombposy_ = 0;
  usbombcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerialBombCrabBombRsp::~SerialBombCrabBombRsp() {
  SharedDtor();
}

void SerialBombCrabBombRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerialBombCrabBombRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerialBombCrabBombRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerialBombCrabBombRsp_descriptor_;
}

const SerialBombCrabBombRsp& SerialBombCrabBombRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

SerialBombCrabBombRsp* SerialBombCrabBombRsp::default_instance_ = NULL;

SerialBombCrabBombRsp* SerialBombCrabBombRsp::New() const {
  return new SerialBombCrabBombRsp;
}

void SerialBombCrabBombRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usserialbombcrabid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
    usbombposx_ = 0;
    usbombposy_ = 0;
    usnextbombposx_ = 0;
    usnextbombposy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    usbombcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SerialBombCrabBombRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usSerialBombCrabId;
        break;
      }

      // optional int32 usSerialBombCrabId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSerialBombCrabId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usserialbombcrabid_)));
          set_has_usserialbombcrabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usBombPosX;
        break;
      }

      // optional int32 usBombPosX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usBombPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbombposx_)));
          set_has_usbombposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usBombPosY;
        break;
      }

      // optional int32 usBombPosY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usBombPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbombposy_)));
          set_has_usbombposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_usNextBombPosX;
        break;
      }

      // optional int32 usNextBombPosX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usNextBombPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usnextbombposx_)));
          set_has_usnextbombposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_usNextBombPosy;
        break;
      }

      // optional int32 usNextBombPosy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usNextBombPosy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usnextbombposy_)));
          set_has_usnextbombposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_usBombCount;
        break;
      }

      // optional int32 usBombCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usBombCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbombcount_)));
          set_has_usbombcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SerialBombCrabBombRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usSerialBombCrabId = 2;
  if (has_usserialbombcrabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usserialbombcrabid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  // optional int32 usBombPosX = 5;
  if (has_usbombposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usbombposx(), output);
  }

  // optional int32 usBombPosY = 6;
  if (has_usbombposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usbombposy(), output);
  }

  // optional int32 usNextBombPosX = 7;
  if (has_usnextbombposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->usnextbombposx(), output);
  }

  // optional int32 usNextBombPosy = 8;
  if (has_usnextbombposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->usnextbombposy(), output);
  }

  // optional int32 usBombCount = 9;
  if (has_usbombcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->usbombcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SerialBombCrabBombRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usSerialBombCrabId = 2;
  if (has_usserialbombcrabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usserialbombcrabid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  // optional int32 usBombPosX = 5;
  if (has_usbombposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usbombposx(), target);
  }

  // optional int32 usBombPosY = 6;
  if (has_usbombposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usbombposy(), target);
  }

  // optional int32 usNextBombPosX = 7;
  if (has_usnextbombposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->usnextbombposx(), target);
  }

  // optional int32 usNextBombPosy = 8;
  if (has_usnextbombposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->usnextbombposy(), target);
  }

  // optional int32 usBombCount = 9;
  if (has_usbombcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->usbombcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SerialBombCrabBombRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usSerialBombCrabId = 2;
    if (has_usserialbombcrabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usserialbombcrabid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

    // optional int32 usBombPosX = 5;
    if (has_usbombposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbombposx());
    }

    // optional int32 usBombPosY = 6;
    if (has_usbombposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbombposy());
    }

    // optional int32 usNextBombPosX = 7;
    if (has_usnextbombposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usnextbombposx());
    }

    // optional int32 usNextBombPosy = 8;
    if (has_usnextbombposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usnextbombposy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 usBombCount = 9;
    if (has_usbombcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbombcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerialBombCrabBombRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SerialBombCrabBombRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SerialBombCrabBombRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SerialBombCrabBombRsp::MergeFrom(const SerialBombCrabBombRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usserialbombcrabid()) {
      set_usserialbombcrabid(from.usserialbombcrabid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
    if (from.has_usbombposx()) {
      set_usbombposx(from.usbombposx());
    }
    if (from.has_usbombposy()) {
      set_usbombposy(from.usbombposy());
    }
    if (from.has_usnextbombposx()) {
      set_usnextbombposx(from.usnextbombposx());
    }
    if (from.has_usnextbombposy()) {
      set_usnextbombposy(from.usnextbombposy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usbombcount()) {
      set_usbombcount(from.usbombcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SerialBombCrabBombRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerialBombCrabBombRsp::CopyFrom(const SerialBombCrabBombRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialBombCrabBombRsp::IsInitialized() const {

  return true;
}

void SerialBombCrabBombRsp::Swap(SerialBombCrabBombRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usserialbombcrabid_, other->usserialbombcrabid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(usbombposx_, other->usbombposx_);
    std::swap(usbombposy_, other->usbombposy_);
    std::swap(usnextbombposx_, other->usnextbombposx_);
    std::swap(usnextbombposy_, other->usnextbombposy_);
    std::swap(usbombcount_, other->usbombcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SerialBombCrabBombRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerialBombCrabBombRsp_descriptor_;
  metadata.reflection = SerialBombCrabBombRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestorySerialBombCrabRsp::kUsChairIdFieldNumber;
const int DestorySerialBombCrabRsp::kUsSerialBombCrabIdFieldNumber;
const int DestorySerialBombCrabRsp::kUsTotalScoreFieldNumber;
const int DestorySerialBombCrabRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

DestorySerialBombCrabRsp::DestorySerialBombCrabRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestorySerialBombCrabRsp::InitAsDefaultInstance() {
}

DestorySerialBombCrabRsp::DestorySerialBombCrabRsp(const DestorySerialBombCrabRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestorySerialBombCrabRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usserialbombcrabid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestorySerialBombCrabRsp::~DestorySerialBombCrabRsp() {
  SharedDtor();
}

void DestorySerialBombCrabRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestorySerialBombCrabRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestorySerialBombCrabRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestorySerialBombCrabRsp_descriptor_;
}

const DestorySerialBombCrabRsp& DestorySerialBombCrabRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DestorySerialBombCrabRsp* DestorySerialBombCrabRsp::default_instance_ = NULL;

DestorySerialBombCrabRsp* DestorySerialBombCrabRsp::New() const {
  return new DestorySerialBombCrabRsp;
}

void DestorySerialBombCrabRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usserialbombcrabid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestorySerialBombCrabRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usSerialBombCrabId;
        break;
      }

      // optional int32 usSerialBombCrabId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSerialBombCrabId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usserialbombcrabid_)));
          set_has_usserialbombcrabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestorySerialBombCrabRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usSerialBombCrabId = 2;
  if (has_usserialbombcrabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usserialbombcrabid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestorySerialBombCrabRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usSerialBombCrabId = 2;
  if (has_usserialbombcrabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usserialbombcrabid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestorySerialBombCrabRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usSerialBombCrabId = 2;
    if (has_usserialbombcrabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usserialbombcrabid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestorySerialBombCrabRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestorySerialBombCrabRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestorySerialBombCrabRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestorySerialBombCrabRsp::MergeFrom(const DestorySerialBombCrabRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usserialbombcrabid()) {
      set_usserialbombcrabid(from.usserialbombcrabid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestorySerialBombCrabRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestorySerialBombCrabRsp::CopyFrom(const DestorySerialBombCrabRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestorySerialBombCrabRsp::IsInitialized() const {

  return true;
}

void DestorySerialBombCrabRsp::Swap(DestorySerialBombCrabRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usserialbombcrabid_, other->usserialbombcrabid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestorySerialBombCrabRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestorySerialBombCrabRsp_descriptor_;
  metadata.reflection = DestorySerialBombCrabRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HaiWangCrabHitPartReq::kUsBulletIdFieldNumber;
const int HaiWangCrabHitPartReq::kUsHaiWangCrabIdFieldNumber;
const int HaiWangCrabHitPartReq::kUsPartIdFieldNumber;
#endif  // !_MSC_VER

HaiWangCrabHitPartReq::HaiWangCrabHitPartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaiWangCrabHitPartReq::InitAsDefaultInstance() {
}

HaiWangCrabHitPartReq::HaiWangCrabHitPartReq(const HaiWangCrabHitPartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaiWangCrabHitPartReq::SharedCtor() {
  _cached_size_ = 0;
  usbulletid_ = 0;
  ushaiwangcrabid_ = 0;
  uspartid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaiWangCrabHitPartReq::~HaiWangCrabHitPartReq() {
  SharedDtor();
}

void HaiWangCrabHitPartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaiWangCrabHitPartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaiWangCrabHitPartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaiWangCrabHitPartReq_descriptor_;
}

const HaiWangCrabHitPartReq& HaiWangCrabHitPartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

HaiWangCrabHitPartReq* HaiWangCrabHitPartReq::default_instance_ = NULL;

HaiWangCrabHitPartReq* HaiWangCrabHitPartReq::New() const {
  return new HaiWangCrabHitPartReq;
}

void HaiWangCrabHitPartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usbulletid_ = 0;
    ushaiwangcrabid_ = 0;
    uspartid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaiWangCrabHitPartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usBulletId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usbulletid_)));
          set_has_usbulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usHaiWangCrabId;
        break;
      }

      // optional int32 usHaiWangCrabId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usHaiWangCrabId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ushaiwangcrabid_)));
          set_has_ushaiwangcrabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usPartId;
        break;
      }

      // optional int32 usPartId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usPartId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uspartid_)));
          set_has_uspartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaiWangCrabHitPartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usBulletId = 1;
  if (has_usbulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->usbulletid(), output);
  }

  // optional int32 usHaiWangCrabId = 2;
  if (has_ushaiwangcrabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ushaiwangcrabid(), output);
  }

  // optional int32 usPartId = 3;
  if (has_uspartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uspartid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaiWangCrabHitPartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usBulletId = 1;
  if (has_usbulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->usbulletid(), target);
  }

  // optional int32 usHaiWangCrabId = 2;
  if (has_ushaiwangcrabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ushaiwangcrabid(), target);
  }

  // optional int32 usPartId = 3;
  if (has_uspartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uspartid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaiWangCrabHitPartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usBulletId = 1;
    if (has_usbulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usbulletid());
    }

    // optional int32 usHaiWangCrabId = 2;
    if (has_ushaiwangcrabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ushaiwangcrabid());
    }

    // optional int32 usPartId = 3;
    if (has_uspartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uspartid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaiWangCrabHitPartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaiWangCrabHitPartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaiWangCrabHitPartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaiWangCrabHitPartReq::MergeFrom(const HaiWangCrabHitPartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usbulletid()) {
      set_usbulletid(from.usbulletid());
    }
    if (from.has_ushaiwangcrabid()) {
      set_ushaiwangcrabid(from.ushaiwangcrabid());
    }
    if (from.has_uspartid()) {
      set_uspartid(from.uspartid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaiWangCrabHitPartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaiWangCrabHitPartReq::CopyFrom(const HaiWangCrabHitPartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaiWangCrabHitPartReq::IsInitialized() const {

  return true;
}

void HaiWangCrabHitPartReq::Swap(HaiWangCrabHitPartReq* other) {
  if (other != this) {
    std::swap(usbulletid_, other->usbulletid_);
    std::swap(ushaiwangcrabid_, other->ushaiwangcrabid_);
    std::swap(uspartid_, other->uspartid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaiWangCrabHitPartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaiWangCrabHitPartReq_descriptor_;
  metadata.reflection = HaiWangCrabHitPartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrabPart::kUsChairIdFieldNumber;
const int CrabPart::kUsPartIdFieldNumber;
const int CrabPart::kUsPartMulFieldNumber;
const int CrabPart::kUsScoreFieldNumber;
#endif  // !_MSC_VER

CrabPart::CrabPart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrabPart::InitAsDefaultInstance() {
}

CrabPart::CrabPart(const CrabPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrabPart::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  uspartid_ = 0;
  uspartmul_ = 0;
  usscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrabPart::~CrabPart() {
  SharedDtor();
}

void CrabPart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrabPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrabPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrabPart_descriptor_;
}

const CrabPart& CrabPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CrabPart* CrabPart::default_instance_ = NULL;

CrabPart* CrabPart::New() const {
  return new CrabPart;
}

void CrabPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    uspartid_ = 0;
    uspartmul_ = 0;
    usscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrabPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usPartId;
        break;
      }

      // optional int32 usPartId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usPartId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uspartid_)));
          set_has_uspartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usPartMul;
        break;
      }

      // optional int32 usPartMul = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usPartMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uspartmul_)));
          set_has_uspartmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usScore;
        break;
      }

      // optional int32 usScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usscore_)));
          set_has_usscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrabPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usPartId = 2;
  if (has_uspartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uspartid(), output);
  }

  // optional int32 usPartMul = 3;
  if (has_uspartmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uspartmul(), output);
  }

  // optional int32 usScore = 4;
  if (has_usscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrabPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usPartId = 2;
  if (has_uspartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uspartid(), target);
  }

  // optional int32 usPartMul = 3;
  if (has_uspartmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uspartmul(), target);
  }

  // optional int32 usScore = 4;
  if (has_usscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrabPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usPartId = 2;
    if (has_uspartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uspartid());
    }

    // optional int32 usPartMul = 3;
    if (has_uspartmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uspartmul());
    }

    // optional int32 usScore = 4;
    if (has_usscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrabPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrabPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrabPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrabPart::MergeFrom(const CrabPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_uspartid()) {
      set_uspartid(from.uspartid());
    }
    if (from.has_uspartmul()) {
      set_uspartmul(from.uspartmul());
    }
    if (from.has_usscore()) {
      set_usscore(from.usscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrabPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrabPart::CopyFrom(const CrabPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrabPart::IsInitialized() const {

  return true;
}

void CrabPart::Swap(CrabPart* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(uspartid_, other->uspartid_);
    std::swap(uspartmul_, other->uspartmul_);
    std::swap(usscore_, other->usscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrabPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrabPart_descriptor_;
  metadata.reflection = CrabPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HaiWangCrabKilledPartRsp::kUsHaiwangCrabIdFieldNumber;
const int HaiWangCrabKilledPartRsp::kAryKilledPartsFieldNumber;
#endif  // !_MSC_VER

HaiWangCrabKilledPartRsp::HaiWangCrabKilledPartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaiWangCrabKilledPartRsp::InitAsDefaultInstance() {
}

HaiWangCrabKilledPartRsp::HaiWangCrabKilledPartRsp(const HaiWangCrabKilledPartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaiWangCrabKilledPartRsp::SharedCtor() {
  _cached_size_ = 0;
  ushaiwangcrabid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaiWangCrabKilledPartRsp::~HaiWangCrabKilledPartRsp() {
  SharedDtor();
}

void HaiWangCrabKilledPartRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaiWangCrabKilledPartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaiWangCrabKilledPartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaiWangCrabKilledPartRsp_descriptor_;
}

const HaiWangCrabKilledPartRsp& HaiWangCrabKilledPartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

HaiWangCrabKilledPartRsp* HaiWangCrabKilledPartRsp::default_instance_ = NULL;

HaiWangCrabKilledPartRsp* HaiWangCrabKilledPartRsp::New() const {
  return new HaiWangCrabKilledPartRsp;
}

void HaiWangCrabKilledPartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ushaiwangcrabid_ = 0;
  }
  arykilledparts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaiWangCrabKilledPartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usHaiwangCrabId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ushaiwangcrabid_)));
          set_has_ushaiwangcrabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_aryKilledParts;
        break;
      }

      // repeated .gamefish.CrabPart aryKilledParts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aryKilledParts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arykilledparts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_aryKilledParts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaiWangCrabKilledPartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usHaiwangCrabId = 1;
  if (has_ushaiwangcrabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ushaiwangcrabid(), output);
  }

  // repeated .gamefish.CrabPart aryKilledParts = 2;
  for (int i = 0; i < this->arykilledparts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arykilledparts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaiWangCrabKilledPartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usHaiwangCrabId = 1;
  if (has_ushaiwangcrabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ushaiwangcrabid(), target);
  }

  // repeated .gamefish.CrabPart aryKilledParts = 2;
  for (int i = 0; i < this->arykilledparts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arykilledparts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaiWangCrabKilledPartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usHaiwangCrabId = 1;
    if (has_ushaiwangcrabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ushaiwangcrabid());
    }

  }
  // repeated .gamefish.CrabPart aryKilledParts = 2;
  total_size += 1 * this->arykilledparts_size();
  for (int i = 0; i < this->arykilledparts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arykilledparts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaiWangCrabKilledPartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaiWangCrabKilledPartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaiWangCrabKilledPartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaiWangCrabKilledPartRsp::MergeFrom(const HaiWangCrabKilledPartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arykilledparts_.MergeFrom(from.arykilledparts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ushaiwangcrabid()) {
      set_ushaiwangcrabid(from.ushaiwangcrabid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaiWangCrabKilledPartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaiWangCrabKilledPartRsp::CopyFrom(const HaiWangCrabKilledPartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaiWangCrabKilledPartRsp::IsInitialized() const {

  return true;
}

void HaiWangCrabKilledPartRsp::Swap(HaiWangCrabKilledPartRsp* other) {
  if (other != this) {
    std::swap(ushaiwangcrabid_, other->ushaiwangcrabid_);
    arykilledparts_.Swap(&other->arykilledparts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaiWangCrabKilledPartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaiWangCrabKilledPartRsp_descriptor_;
  metadata.reflection = HaiWangCrabKilledPartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HaiWangCrabKilledDeadRsp::kUsChairIdFieldNumber;
const int HaiWangCrabKilledDeadRsp::kUsHaiwangCrabIdFieldNumber;
const int HaiWangCrabKilledDeadRsp::kUsPartMulFieldNumber;
const int HaiWangCrabKilledDeadRsp::kUsSelfScoreFieldNumber;
const int HaiWangCrabKilledDeadRsp::kUsTotalScoreFieldNumber;
const int HaiWangCrabKilledDeadRsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

HaiWangCrabKilledDeadRsp::HaiWangCrabKilledDeadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaiWangCrabKilledDeadRsp::InitAsDefaultInstance() {
}

HaiWangCrabKilledDeadRsp::HaiWangCrabKilledDeadRsp(const HaiWangCrabKilledDeadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaiWangCrabKilledDeadRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  ushaiwangcrabid_ = 0;
  uspartmul_ = 0;
  usselfscore_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaiWangCrabKilledDeadRsp::~HaiWangCrabKilledDeadRsp() {
  SharedDtor();
}

void HaiWangCrabKilledDeadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaiWangCrabKilledDeadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaiWangCrabKilledDeadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaiWangCrabKilledDeadRsp_descriptor_;
}

const HaiWangCrabKilledDeadRsp& HaiWangCrabKilledDeadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

HaiWangCrabKilledDeadRsp* HaiWangCrabKilledDeadRsp::default_instance_ = NULL;

HaiWangCrabKilledDeadRsp* HaiWangCrabKilledDeadRsp::New() const {
  return new HaiWangCrabKilledDeadRsp;
}

void HaiWangCrabKilledDeadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    ushaiwangcrabid_ = 0;
    uspartmul_ = 0;
    usselfscore_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaiWangCrabKilledDeadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usHaiwangCrabId;
        break;
      }

      // optional int32 usHaiwangCrabId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usHaiwangCrabId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ushaiwangcrabid_)));
          set_has_ushaiwangcrabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usPartMul;
        break;
      }

      // optional int32 usPartMul = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usPartMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uspartmul_)));
          set_has_uspartmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usSelfScore;
        break;
      }

      // optional int32 usSelfScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usSelfScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usselfscore_)));
          set_has_usselfscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaiWangCrabKilledDeadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usHaiwangCrabId = 2;
  if (has_ushaiwangcrabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ushaiwangcrabid(), output);
  }

  // optional int32 usPartMul = 3;
  if (has_uspartmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uspartmul(), output);
  }

  // optional int32 usSelfScore = 4;
  if (has_usselfscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usselfscore(), output);
  }

  // optional int32 usTotalScore = 5;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 6;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaiWangCrabKilledDeadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usHaiwangCrabId = 2;
  if (has_ushaiwangcrabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ushaiwangcrabid(), target);
  }

  // optional int32 usPartMul = 3;
  if (has_uspartmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uspartmul(), target);
  }

  // optional int32 usSelfScore = 4;
  if (has_usselfscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usselfscore(), target);
  }

  // optional int32 usTotalScore = 5;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 6;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaiWangCrabKilledDeadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usHaiwangCrabId = 2;
    if (has_ushaiwangcrabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ushaiwangcrabid());
    }

    // optional int32 usPartMul = 3;
    if (has_uspartmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uspartmul());
    }

    // optional int32 usSelfScore = 4;
    if (has_usselfscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usselfscore());
    }

    // optional int32 usTotalScore = 5;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 6;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaiWangCrabKilledDeadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaiWangCrabKilledDeadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaiWangCrabKilledDeadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaiWangCrabKilledDeadRsp::MergeFrom(const HaiWangCrabKilledDeadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_ushaiwangcrabid()) {
      set_ushaiwangcrabid(from.ushaiwangcrabid());
    }
    if (from.has_uspartmul()) {
      set_uspartmul(from.uspartmul());
    }
    if (from.has_usselfscore()) {
      set_usselfscore(from.usselfscore());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaiWangCrabKilledDeadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaiWangCrabKilledDeadRsp::CopyFrom(const HaiWangCrabKilledDeadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaiWangCrabKilledDeadRsp::IsInitialized() const {

  return true;
}

void HaiWangCrabKilledDeadRsp::Swap(HaiWangCrabKilledDeadRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(ushaiwangcrabid_, other->ushaiwangcrabid_);
    std::swap(uspartmul_, other->uspartmul_);
    std::swap(usselfscore_, other->usselfscore_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaiWangCrabKilledDeadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaiWangCrabKilledDeadRsp_descriptor_;
  metadata.reflection = HaiWangCrabKilledDeadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateDelayBombRsp::kUsChairIdFieldNumber;
const int CreateDelayBombRsp::kUsDelayBombIdFieldNumber;
const int CreateDelayBombRsp::kUsKilledFishIdFieldNumber;
const int CreateDelayBombRsp::kUsStatusFieldNumber;
const int CreateDelayBombRsp::kUsStatusTimeFieldNumber;
const int CreateDelayBombRsp::kUsPosXFieldNumber;
const int CreateDelayBombRsp::kUsPoxYFieldNumber;
const int CreateDelayBombRsp::kBombFishIdFieldNumber;
#endif  // !_MSC_VER

CreateDelayBombRsp::CreateDelayBombRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateDelayBombRsp::InitAsDefaultInstance() {
}

CreateDelayBombRsp::CreateDelayBombRsp(const CreateDelayBombRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateDelayBombRsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdelaybombid_ = 0;
  uskilledfishid_ = 0;
  usstatus_ = 0;
  usstatustime_ = 0;
  usposx_ = 0;
  uspoxy_ = 0;
  bombfishid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateDelayBombRsp::~CreateDelayBombRsp() {
  SharedDtor();
}

void CreateDelayBombRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateDelayBombRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDelayBombRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateDelayBombRsp_descriptor_;
}

const CreateDelayBombRsp& CreateDelayBombRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

CreateDelayBombRsp* CreateDelayBombRsp::default_instance_ = NULL;

CreateDelayBombRsp* CreateDelayBombRsp::New() const {
  return new CreateDelayBombRsp;
}

void CreateDelayBombRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdelaybombid_ = 0;
    uskilledfishid_ = 0;
    usstatus_ = 0;
    usstatustime_ = 0;
    usposx_ = 0;
    uspoxy_ = 0;
    bombfishid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateDelayBombRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDelayBombId;
        break;
      }

      // optional int32 usDelayBombId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDelayBombId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdelaybombid_)));
          set_has_usdelaybombid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usKilledFishId;
        break;
      }

      // optional int32 usKilledFishId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usKilledFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uskilledfishid_)));
          set_has_uskilledfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usStatus;
        break;
      }

      // optional int32 usStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatus_)));
          set_has_usstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usStatusTime;
        break;
      }

      // optional int32 usStatusTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usStatusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usstatustime_)));
          set_has_usstatustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usPosX;
        break;
      }

      // optional int32 usPosX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usposx_)));
          set_has_usposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_usPoxY;
        break;
      }

      // optional int32 usPoxY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usPoxY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uspoxy_)));
          set_has_uspoxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bombFishId;
        break;
      }

      // optional int32 bombFishId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bombFishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bombfishid_)));
          set_has_bombfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateDelayBombRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDelayBombId = 2;
  if (has_usdelaybombid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdelaybombid(), output);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uskilledfishid(), output);
  }

  // optional int32 usStatus = 4;
  if (has_usstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usstatus(), output);
  }

  // optional int32 usStatusTime = 5;
  if (has_usstatustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usstatustime(), output);
  }

  // optional int32 usPosX = 6;
  if (has_usposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usposx(), output);
  }

  // optional int32 usPoxY = 7;
  if (has_uspoxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->uspoxy(), output);
  }

  // optional int32 bombFishId = 8;
  if (has_bombfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bombfishid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateDelayBombRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDelayBombId = 2;
  if (has_usdelaybombid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdelaybombid(), target);
  }

  // optional int32 usKilledFishId = 3;
  if (has_uskilledfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uskilledfishid(), target);
  }

  // optional int32 usStatus = 4;
  if (has_usstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usstatus(), target);
  }

  // optional int32 usStatusTime = 5;
  if (has_usstatustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usstatustime(), target);
  }

  // optional int32 usPosX = 6;
  if (has_usposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usposx(), target);
  }

  // optional int32 usPoxY = 7;
  if (has_uspoxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->uspoxy(), target);
  }

  // optional int32 bombFishId = 8;
  if (has_bombfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bombfishid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateDelayBombRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDelayBombId = 2;
    if (has_usdelaybombid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdelaybombid());
    }

    // optional int32 usKilledFishId = 3;
    if (has_uskilledfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uskilledfishid());
    }

    // optional int32 usStatus = 4;
    if (has_usstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatus());
    }

    // optional int32 usStatusTime = 5;
    if (has_usstatustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usstatustime());
    }

    // optional int32 usPosX = 6;
    if (has_usposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usposx());
    }

    // optional int32 usPoxY = 7;
    if (has_uspoxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uspoxy());
    }

    // optional int32 bombFishId = 8;
    if (has_bombfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bombfishid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDelayBombRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateDelayBombRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateDelayBombRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateDelayBombRsp::MergeFrom(const CreateDelayBombRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdelaybombid()) {
      set_usdelaybombid(from.usdelaybombid());
    }
    if (from.has_uskilledfishid()) {
      set_uskilledfishid(from.uskilledfishid());
    }
    if (from.has_usstatus()) {
      set_usstatus(from.usstatus());
    }
    if (from.has_usstatustime()) {
      set_usstatustime(from.usstatustime());
    }
    if (from.has_usposx()) {
      set_usposx(from.usposx());
    }
    if (from.has_uspoxy()) {
      set_uspoxy(from.uspoxy());
    }
    if (from.has_bombfishid()) {
      set_bombfishid(from.bombfishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateDelayBombRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDelayBombRsp::CopyFrom(const CreateDelayBombRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDelayBombRsp::IsInitialized() const {

  return true;
}

void CreateDelayBombRsp::Swap(CreateDelayBombRsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdelaybombid_, other->usdelaybombid_);
    std::swap(uskilledfishid_, other->uskilledfishid_);
    std::swap(usstatus_, other->usstatus_);
    std::swap(usstatustime_, other->usstatustime_);
    std::swap(usposx_, other->usposx_);
    std::swap(uspoxy_, other->uspoxy_);
    std::swap(bombfishid_, other->bombfishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateDelayBombRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateDelayBombRsp_descriptor_;
  metadata.reflection = CreateDelayBombRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelayBomb_Bomb_Rsp::kUsChairIdFieldNumber;
const int DelayBomb_Bomb_Rsp::kUsDelayBombIdFieldNumber;
const int DelayBomb_Bomb_Rsp::kUsTotalScoreFieldNumber;
const int DelayBomb_Bomb_Rsp::kUsTotalMulFieldNumber;
#endif  // !_MSC_VER

DelayBomb_Bomb_Rsp::DelayBomb_Bomb_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelayBomb_Bomb_Rsp::InitAsDefaultInstance() {
}

DelayBomb_Bomb_Rsp::DelayBomb_Bomb_Rsp(const DelayBomb_Bomb_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelayBomb_Bomb_Rsp::SharedCtor() {
  _cached_size_ = 0;
  uschairid_ = 0;
  usdelaybombid_ = 0;
  ustotalscore_ = 0;
  ustotalmul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelayBomb_Bomb_Rsp::~DelayBomb_Bomb_Rsp() {
  SharedDtor();
}

void DelayBomb_Bomb_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelayBomb_Bomb_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelayBomb_Bomb_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelayBomb_Bomb_Rsp_descriptor_;
}

const DelayBomb_Bomb_Rsp& DelayBomb_Bomb_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSFish_2eproto();
  return *default_instance_;
}

DelayBomb_Bomb_Rsp* DelayBomb_Bomb_Rsp::default_instance_ = NULL;

DelayBomb_Bomb_Rsp* DelayBomb_Bomb_Rsp::New() const {
  return new DelayBomb_Bomb_Rsp;
}

void DelayBomb_Bomb_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uschairid_ = 0;
    usdelaybombid_ = 0;
    ustotalscore_ = 0;
    ustotalmul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelayBomb_Bomb_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usChairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uschairid_)));
          set_has_uschairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usDelayBombId;
        break;
      }

      // optional int32 usDelayBombId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usDelayBombId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usdelaybombid_)));
          set_has_usdelaybombid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usTotalScore;
        break;
      }

      // optional int32 usTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalscore_)));
          set_has_ustotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usTotalMul;
        break;
      }

      // optional int32 usTotalMul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usTotalMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ustotalmul_)));
          set_has_ustotalmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelayBomb_Bomb_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uschairid(), output);
  }

  // optional int32 usDelayBombId = 2;
  if (has_usdelaybombid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usdelaybombid(), output);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ustotalscore(), output);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ustotalmul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelayBomb_Bomb_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 usChairId = 1;
  if (has_uschairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uschairid(), target);
  }

  // optional int32 usDelayBombId = 2;
  if (has_usdelaybombid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usdelaybombid(), target);
  }

  // optional int32 usTotalScore = 3;
  if (has_ustotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ustotalscore(), target);
  }

  // optional int32 usTotalMul = 4;
  if (has_ustotalmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ustotalmul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelayBomb_Bomb_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 usChairId = 1;
    if (has_uschairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uschairid());
    }

    // optional int32 usDelayBombId = 2;
    if (has_usdelaybombid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usdelaybombid());
    }

    // optional int32 usTotalScore = 3;
    if (has_ustotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalscore());
    }

    // optional int32 usTotalMul = 4;
    if (has_ustotalmul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ustotalmul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelayBomb_Bomb_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelayBomb_Bomb_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelayBomb_Bomb_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelayBomb_Bomb_Rsp::MergeFrom(const DelayBomb_Bomb_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uschairid()) {
      set_uschairid(from.uschairid());
    }
    if (from.has_usdelaybombid()) {
      set_usdelaybombid(from.usdelaybombid());
    }
    if (from.has_ustotalscore()) {
      set_ustotalscore(from.ustotalscore());
    }
    if (from.has_ustotalmul()) {
      set_ustotalmul(from.ustotalmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelayBomb_Bomb_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelayBomb_Bomb_Rsp::CopyFrom(const DelayBomb_Bomb_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelayBomb_Bomb_Rsp::IsInitialized() const {

  return true;
}

void DelayBomb_Bomb_Rsp::Swap(DelayBomb_Bomb_Rsp* other) {
  if (other != this) {
    std::swap(uschairid_, other->uschairid_);
    std::swap(usdelaybombid_, other->usdelaybombid_);
    std::swap(ustotalscore_, other->ustotalscore_);
    std::swap(ustotalmul_, other->ustotalmul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelayBomb_Bomb_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelayBomb_Bomb_Rsp_descriptor_;
  metadata.reflection = DelayBomb_Bomb_Rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamefish

// @@protoc_insertion_point(global_scope)
