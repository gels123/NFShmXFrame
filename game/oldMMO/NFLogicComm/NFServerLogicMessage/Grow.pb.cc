// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Grow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Grow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GrowStarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowStarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowSubInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowSubInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGrowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGrowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowLvUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowLvUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowLvUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowLvUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowFacadeDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowFacadeDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowFacadeDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowFacadeDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowFacadeUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowFacadeUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowFacadeUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowFacadeUnDressRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Grow_2eproto() {
  protobuf_AddDesc_Grow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Grow.proto");
  GOOGLE_CHECK(file != NULL);
  GrowStarInfo_descriptor_ = file->message_type(0);
  static const int GrowStarInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowStarInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowStarInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowStarInfo, state_),
  };
  GrowStarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowStarInfo_descriptor_,
      GrowStarInfo::default_instance_,
      GrowStarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowStarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowStarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowStarInfo));
  GrowSubInfo_descriptor_ = file->message_type(1);
  static const int GrowSubInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowSubInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowSubInfo, subs_),
  };
  GrowSubInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowSubInfo_descriptor_,
      GrowSubInfo::default_instance_,
      GrowSubInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowSubInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowSubInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowSubInfo));
  NotifyGrowRsp_descriptor_ = file->message_type(2);
  static const int NotifyGrowRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGrowRsp, subs_),
  };
  NotifyGrowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGrowRsp_descriptor_,
      NotifyGrowRsp::default_instance_,
      NotifyGrowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGrowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGrowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGrowRsp));
  GrowLvUpReq_descriptor_ = file->message_type(3);
  static const int GrowLvUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowLvUpReq, id_),
  };
  GrowLvUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowLvUpReq_descriptor_,
      GrowLvUpReq::default_instance_,
      GrowLvUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowLvUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowLvUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowLvUpReq));
  GrowLvUpRsp_descriptor_ = file->message_type(4);
  static const int GrowLvUpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowLvUpRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowLvUpRsp, ret_),
  };
  GrowLvUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowLvUpRsp_descriptor_,
      GrowLvUpRsp::default_instance_,
      GrowLvUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowLvUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowLvUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowLvUpRsp));
  GrowFacadeDressReq_descriptor_ = file->message_type(5);
  static const int GrowFacadeDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeDressReq, id_),
  };
  GrowFacadeDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowFacadeDressReq_descriptor_,
      GrowFacadeDressReq::default_instance_,
      GrowFacadeDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowFacadeDressReq));
  GrowFacadeDressRsp_descriptor_ = file->message_type(6);
  static const int GrowFacadeDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeDressRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeDressRsp, ret_),
  };
  GrowFacadeDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowFacadeDressRsp_descriptor_,
      GrowFacadeDressRsp::default_instance_,
      GrowFacadeDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowFacadeDressRsp));
  GrowFacadeUnDressReq_descriptor_ = file->message_type(7);
  static const int GrowFacadeUnDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeUnDressReq, id_),
  };
  GrowFacadeUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowFacadeUnDressReq_descriptor_,
      GrowFacadeUnDressReq::default_instance_,
      GrowFacadeUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowFacadeUnDressReq));
  GrowFacadeUnDressRsp_descriptor_ = file->message_type(8);
  static const int GrowFacadeUnDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeUnDressRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeUnDressRsp, ret_),
  };
  GrowFacadeUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowFacadeUnDressRsp_descriptor_,
      GrowFacadeUnDressRsp::default_instance_,
      GrowFacadeUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowFacadeUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowFacadeUnDressRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Grow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowStarInfo_descriptor_, &GrowStarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowSubInfo_descriptor_, &GrowSubInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGrowRsp_descriptor_, &NotifyGrowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowLvUpReq_descriptor_, &GrowLvUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowLvUpRsp_descriptor_, &GrowLvUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowFacadeDressReq_descriptor_, &GrowFacadeDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowFacadeDressRsp_descriptor_, &GrowFacadeDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowFacadeUnDressReq_descriptor_, &GrowFacadeUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowFacadeUnDressRsp_descriptor_, &GrowFacadeUnDressRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Grow_2eproto() {
  delete GrowStarInfo::default_instance_;
  delete GrowStarInfo_reflection_;
  delete GrowSubInfo::default_instance_;
  delete GrowSubInfo_reflection_;
  delete NotifyGrowRsp::default_instance_;
  delete NotifyGrowRsp_reflection_;
  delete GrowLvUpReq::default_instance_;
  delete GrowLvUpReq_reflection_;
  delete GrowLvUpRsp::default_instance_;
  delete GrowLvUpRsp_reflection_;
  delete GrowFacadeDressReq::default_instance_;
  delete GrowFacadeDressReq_reflection_;
  delete GrowFacadeDressRsp::default_instance_;
  delete GrowFacadeDressRsp_reflection_;
  delete GrowFacadeUnDressReq::default_instance_;
  delete GrowFacadeUnDressReq_reflection_;
  delete GrowFacadeUnDressRsp::default_instance_;
  delete GrowFacadeUnDressRsp_reflection_;
}

void protobuf_AddDesc_Grow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nGrow.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\032\022common_logic.proto\032\tCom.proto\"5\n\014"
    "GrowStarInfo\022\n\n\002id\030\001 \001(\003\022\n\n\002lv\030\002 \001(\005\022\r\n\005"
    "state\030\003 \001(\005\"A\n\013GrowSubInfo\022\014\n\004type\030\001 \001(\005"
    "\022$\n\004subs\030\002 \003(\0132\026.proto_ff.GrowStarInfo\"4"
    "\n\rNotifyGrowRsp\022#\n\004subs\030\001 \003(\0132\025.proto_ff"
    ".GrowSubInfo\"\031\n\013GrowLvUpReq\022\n\n\002id\030\001 \001(\003\""
    "&\n\013GrowLvUpRsp\022\n\n\002id\030\001 \001(\003\022\013\n\003ret\030\002 \001(\005\""
    " \n\022GrowFacadeDressReq\022\n\n\002id\030\001 \001(\003\"-\n\022Gro"
    "wFacadeDressRsp\022\n\n\002id\030\001 \001(\003\022\013\n\003ret\030\002 \001(\005"
    "\"\"\n\024GrowFacadeUnDressReq\022\n\n\002id\030\001 \001(\003\"/\n\024"
    "GrowFacadeUnDressRsp\022\n\n\002id\030\001 \001(\003\022\013\n\003ret\030"
    "\002 \001(\005", 485);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Grow.proto", &protobuf_RegisterTypes);
  GrowStarInfo::default_instance_ = new GrowStarInfo();
  GrowSubInfo::default_instance_ = new GrowSubInfo();
  NotifyGrowRsp::default_instance_ = new NotifyGrowRsp();
  GrowLvUpReq::default_instance_ = new GrowLvUpReq();
  GrowLvUpRsp::default_instance_ = new GrowLvUpRsp();
  GrowFacadeDressReq::default_instance_ = new GrowFacadeDressReq();
  GrowFacadeDressRsp::default_instance_ = new GrowFacadeDressRsp();
  GrowFacadeUnDressReq::default_instance_ = new GrowFacadeUnDressReq();
  GrowFacadeUnDressRsp::default_instance_ = new GrowFacadeUnDressRsp();
  GrowStarInfo::default_instance_->InitAsDefaultInstance();
  GrowSubInfo::default_instance_->InitAsDefaultInstance();
  NotifyGrowRsp::default_instance_->InitAsDefaultInstance();
  GrowLvUpReq::default_instance_->InitAsDefaultInstance();
  GrowLvUpRsp::default_instance_->InitAsDefaultInstance();
  GrowFacadeDressReq::default_instance_->InitAsDefaultInstance();
  GrowFacadeDressRsp::default_instance_->InitAsDefaultInstance();
  GrowFacadeUnDressReq::default_instance_->InitAsDefaultInstance();
  GrowFacadeUnDressRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Grow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Grow_2eproto {
  StaticDescriptorInitializer_Grow_2eproto() {
    protobuf_AddDesc_Grow_2eproto();
  }
} static_descriptor_initializer_Grow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GrowStarInfo::kIdFieldNumber;
const int GrowStarInfo::kLvFieldNumber;
const int GrowStarInfo::kStateFieldNumber;
#endif  // !_MSC_VER

GrowStarInfo::GrowStarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowStarInfo::InitAsDefaultInstance() {
}

GrowStarInfo::GrowStarInfo(const GrowStarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowStarInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowStarInfo::~GrowStarInfo() {
  SharedDtor();
}

void GrowStarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowStarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowStarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowStarInfo_descriptor_;
}

const GrowStarInfo& GrowStarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

GrowStarInfo* GrowStarInfo::default_instance_ = NULL;

GrowStarInfo* GrowStarInfo::New() const {
  return new GrowStarInfo;
}

void GrowStarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowStarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowStarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowStarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowStarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowStarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowStarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowStarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowStarInfo::MergeFrom(const GrowStarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowStarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowStarInfo::CopyFrom(const GrowStarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowStarInfo::IsInitialized() const {

  return true;
}

void GrowStarInfo::Swap(GrowStarInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowStarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowStarInfo_descriptor_;
  metadata.reflection = GrowStarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowSubInfo::kTypeFieldNumber;
const int GrowSubInfo::kSubsFieldNumber;
#endif  // !_MSC_VER

GrowSubInfo::GrowSubInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowSubInfo::InitAsDefaultInstance() {
}

GrowSubInfo::GrowSubInfo(const GrowSubInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowSubInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowSubInfo::~GrowSubInfo() {
  SharedDtor();
}

void GrowSubInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowSubInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowSubInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowSubInfo_descriptor_;
}

const GrowSubInfo& GrowSubInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

GrowSubInfo* GrowSubInfo::default_instance_ = NULL;

GrowSubInfo* GrowSubInfo::New() const {
  return new GrowSubInfo;
}

void GrowSubInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  subs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowSubInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subs;
        break;
      }

      // repeated .proto_ff.GrowStarInfo subs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowSubInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.GrowStarInfo subs = 2;
  for (int i = 0; i < this->subs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowSubInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.GrowStarInfo subs = 2;
  for (int i = 0; i < this->subs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowSubInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.GrowStarInfo subs = 2;
  total_size += 1 * this->subs_size();
  for (int i = 0; i < this->subs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowSubInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowSubInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowSubInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowSubInfo::MergeFrom(const GrowSubInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  subs_.MergeFrom(from.subs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowSubInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowSubInfo::CopyFrom(const GrowSubInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowSubInfo::IsInitialized() const {

  return true;
}

void GrowSubInfo::Swap(GrowSubInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    subs_.Swap(&other->subs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowSubInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowSubInfo_descriptor_;
  metadata.reflection = GrowSubInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGrowRsp::kSubsFieldNumber;
#endif  // !_MSC_VER

NotifyGrowRsp::NotifyGrowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGrowRsp::InitAsDefaultInstance() {
}

NotifyGrowRsp::NotifyGrowRsp(const NotifyGrowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGrowRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGrowRsp::~NotifyGrowRsp() {
  SharedDtor();
}

void NotifyGrowRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGrowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGrowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGrowRsp_descriptor_;
}

const NotifyGrowRsp& NotifyGrowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

NotifyGrowRsp* NotifyGrowRsp::default_instance_ = NULL;

NotifyGrowRsp* NotifyGrowRsp::New() const {
  return new NotifyGrowRsp;
}

void NotifyGrowRsp::Clear() {
  subs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGrowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GrowSubInfo subs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_subs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGrowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GrowSubInfo subs = 1;
  for (int i = 0; i < this->subs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGrowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GrowSubInfo subs = 1;
  for (int i = 0; i < this->subs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGrowRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GrowSubInfo subs = 1;
  total_size += 1 * this->subs_size();
  for (int i = 0; i < this->subs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGrowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGrowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGrowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGrowRsp::MergeFrom(const NotifyGrowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  subs_.MergeFrom(from.subs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGrowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGrowRsp::CopyFrom(const NotifyGrowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGrowRsp::IsInitialized() const {

  return true;
}

void NotifyGrowRsp::Swap(NotifyGrowRsp* other) {
  if (other != this) {
    subs_.Swap(&other->subs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGrowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGrowRsp_descriptor_;
  metadata.reflection = NotifyGrowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowLvUpReq::kIdFieldNumber;
#endif  // !_MSC_VER

GrowLvUpReq::GrowLvUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowLvUpReq::InitAsDefaultInstance() {
}

GrowLvUpReq::GrowLvUpReq(const GrowLvUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowLvUpReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowLvUpReq::~GrowLvUpReq() {
  SharedDtor();
}

void GrowLvUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowLvUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowLvUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowLvUpReq_descriptor_;
}

const GrowLvUpReq& GrowLvUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

GrowLvUpReq* GrowLvUpReq::default_instance_ = NULL;

GrowLvUpReq* GrowLvUpReq::New() const {
  return new GrowLvUpReq;
}

void GrowLvUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowLvUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowLvUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowLvUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowLvUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowLvUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowLvUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowLvUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowLvUpReq::MergeFrom(const GrowLvUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowLvUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowLvUpReq::CopyFrom(const GrowLvUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowLvUpReq::IsInitialized() const {

  return true;
}

void GrowLvUpReq::Swap(GrowLvUpReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowLvUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowLvUpReq_descriptor_;
  metadata.reflection = GrowLvUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowLvUpRsp::kIdFieldNumber;
const int GrowLvUpRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GrowLvUpRsp::GrowLvUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowLvUpRsp::InitAsDefaultInstance() {
}

GrowLvUpRsp::GrowLvUpRsp(const GrowLvUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowLvUpRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowLvUpRsp::~GrowLvUpRsp() {
  SharedDtor();
}

void GrowLvUpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowLvUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowLvUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowLvUpRsp_descriptor_;
}

const GrowLvUpRsp& GrowLvUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

GrowLvUpRsp* GrowLvUpRsp::default_instance_ = NULL;

GrowLvUpRsp* GrowLvUpRsp::New() const {
  return new GrowLvUpRsp;
}

void GrowLvUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowLvUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowLvUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowLvUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowLvUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowLvUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowLvUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowLvUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowLvUpRsp::MergeFrom(const GrowLvUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowLvUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowLvUpRsp::CopyFrom(const GrowLvUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowLvUpRsp::IsInitialized() const {

  return true;
}

void GrowLvUpRsp::Swap(GrowLvUpRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowLvUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowLvUpRsp_descriptor_;
  metadata.reflection = GrowLvUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowFacadeDressReq::kIdFieldNumber;
#endif  // !_MSC_VER

GrowFacadeDressReq::GrowFacadeDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowFacadeDressReq::InitAsDefaultInstance() {
}

GrowFacadeDressReq::GrowFacadeDressReq(const GrowFacadeDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowFacadeDressReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowFacadeDressReq::~GrowFacadeDressReq() {
  SharedDtor();
}

void GrowFacadeDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowFacadeDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowFacadeDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowFacadeDressReq_descriptor_;
}

const GrowFacadeDressReq& GrowFacadeDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

GrowFacadeDressReq* GrowFacadeDressReq::default_instance_ = NULL;

GrowFacadeDressReq* GrowFacadeDressReq::New() const {
  return new GrowFacadeDressReq;
}

void GrowFacadeDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowFacadeDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowFacadeDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowFacadeDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowFacadeDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowFacadeDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowFacadeDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowFacadeDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowFacadeDressReq::MergeFrom(const GrowFacadeDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowFacadeDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowFacadeDressReq::CopyFrom(const GrowFacadeDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowFacadeDressReq::IsInitialized() const {

  return true;
}

void GrowFacadeDressReq::Swap(GrowFacadeDressReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowFacadeDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowFacadeDressReq_descriptor_;
  metadata.reflection = GrowFacadeDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowFacadeDressRsp::kIdFieldNumber;
const int GrowFacadeDressRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GrowFacadeDressRsp::GrowFacadeDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowFacadeDressRsp::InitAsDefaultInstance() {
}

GrowFacadeDressRsp::GrowFacadeDressRsp(const GrowFacadeDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowFacadeDressRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowFacadeDressRsp::~GrowFacadeDressRsp() {
  SharedDtor();
}

void GrowFacadeDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowFacadeDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowFacadeDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowFacadeDressRsp_descriptor_;
}

const GrowFacadeDressRsp& GrowFacadeDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

GrowFacadeDressRsp* GrowFacadeDressRsp::default_instance_ = NULL;

GrowFacadeDressRsp* GrowFacadeDressRsp::New() const {
  return new GrowFacadeDressRsp;
}

void GrowFacadeDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowFacadeDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowFacadeDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowFacadeDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowFacadeDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowFacadeDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowFacadeDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowFacadeDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowFacadeDressRsp::MergeFrom(const GrowFacadeDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowFacadeDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowFacadeDressRsp::CopyFrom(const GrowFacadeDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowFacadeDressRsp::IsInitialized() const {

  return true;
}

void GrowFacadeDressRsp::Swap(GrowFacadeDressRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowFacadeDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowFacadeDressRsp_descriptor_;
  metadata.reflection = GrowFacadeDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowFacadeUnDressReq::kIdFieldNumber;
#endif  // !_MSC_VER

GrowFacadeUnDressReq::GrowFacadeUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowFacadeUnDressReq::InitAsDefaultInstance() {
}

GrowFacadeUnDressReq::GrowFacadeUnDressReq(const GrowFacadeUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowFacadeUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowFacadeUnDressReq::~GrowFacadeUnDressReq() {
  SharedDtor();
}

void GrowFacadeUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowFacadeUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowFacadeUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowFacadeUnDressReq_descriptor_;
}

const GrowFacadeUnDressReq& GrowFacadeUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

GrowFacadeUnDressReq* GrowFacadeUnDressReq::default_instance_ = NULL;

GrowFacadeUnDressReq* GrowFacadeUnDressReq::New() const {
  return new GrowFacadeUnDressReq;
}

void GrowFacadeUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowFacadeUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowFacadeUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowFacadeUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowFacadeUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowFacadeUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowFacadeUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowFacadeUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowFacadeUnDressReq::MergeFrom(const GrowFacadeUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowFacadeUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowFacadeUnDressReq::CopyFrom(const GrowFacadeUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowFacadeUnDressReq::IsInitialized() const {

  return true;
}

void GrowFacadeUnDressReq::Swap(GrowFacadeUnDressReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowFacadeUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowFacadeUnDressReq_descriptor_;
  metadata.reflection = GrowFacadeUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowFacadeUnDressRsp::kIdFieldNumber;
const int GrowFacadeUnDressRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GrowFacadeUnDressRsp::GrowFacadeUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowFacadeUnDressRsp::InitAsDefaultInstance() {
}

GrowFacadeUnDressRsp::GrowFacadeUnDressRsp(const GrowFacadeUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowFacadeUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowFacadeUnDressRsp::~GrowFacadeUnDressRsp() {
  SharedDtor();
}

void GrowFacadeUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowFacadeUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowFacadeUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowFacadeUnDressRsp_descriptor_;
}

const GrowFacadeUnDressRsp& GrowFacadeUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grow_2eproto();
  return *default_instance_;
}

GrowFacadeUnDressRsp* GrowFacadeUnDressRsp::default_instance_ = NULL;

GrowFacadeUnDressRsp* GrowFacadeUnDressRsp::New() const {
  return new GrowFacadeUnDressRsp;
}

void GrowFacadeUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowFacadeUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowFacadeUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowFacadeUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowFacadeUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowFacadeUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowFacadeUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowFacadeUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowFacadeUnDressRsp::MergeFrom(const GrowFacadeUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowFacadeUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowFacadeUnDressRsp::CopyFrom(const GrowFacadeUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowFacadeUnDressRsp::IsInitialized() const {

  return true;
}

void GrowFacadeUnDressRsp::Swap(GrowFacadeUnDressRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowFacadeUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowFacadeUnDressRsp_descriptor_;
  metadata.reflection = GrowFacadeUnDressRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
