// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* chatchat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chatchat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_chatchat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_chatchat_reflection_ = NULL;
const ::google::protobuf::Descriptor* chatspecialchat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chatspecialchat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_chatspecialchat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_chatspecialchat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  chatchat_descriptor_ = file->message_type(0);
  static const int chatchat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatchat, chatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatchat, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatchat, showtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatchat, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatchat, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatchat, crossservice_),
  };
  chatchat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chatchat_descriptor_,
      chatchat::default_instance_,
      chatchat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatchat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatchat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chatchat));
  Sheet_chatchat_descriptor_ = file->message_type(1);
  static const int Sheet_chatchat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_chatchat, chatchat_list_),
  };
  Sheet_chatchat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_chatchat_descriptor_,
      Sheet_chatchat::default_instance_,
      Sheet_chatchat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_chatchat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_chatchat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_chatchat));
  chatspecialchat_descriptor_ = file->message_type(2);
  static const int chatspecialchat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatspecialchat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatspecialchat, parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatspecialchat, paramb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatspecialchat, chat_id_),
  };
  chatspecialchat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chatspecialchat_descriptor_,
      chatspecialchat::default_instance_,
      chatspecialchat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatspecialchat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatspecialchat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chatspecialchat));
  Sheet_chatspecialchat_descriptor_ = file->message_type(3);
  static const int Sheet_chatspecialchat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_chatspecialchat, chatspecialchat_list_),
  };
  Sheet_chatspecialchat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_chatspecialchat_descriptor_,
      Sheet_chatspecialchat::default_instance_,
      Sheet_chatspecialchat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_chatspecialchat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_chatspecialchat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_chatspecialchat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chatchat_descriptor_, &chatchat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_chatchat_descriptor_, &Sheet_chatchat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chatspecialchat_descriptor_, &chatspecialchat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_chatspecialchat_descriptor_, &Sheet_chatspecialchat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete chatchat::default_instance_;
  delete chatchat_reflection_;
  delete Sheet_chatchat::default_instance_;
  delete Sheet_chatchat_reflection_;
  delete chatspecialchat::default_instance_;
  delete chatspecialchat_reflection_;
  delete Sheet_chatspecialchat::default_instance_;
  delete Sheet_chatspecialchat_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\371\001\n\010chatchat\022\034\n\006chatId\030\001 \001(\003B\014\302\377\024\010"
    "\344\274\240\351\227\273ID\022\"\n\010chatType\030\002 \001(\005B\020\302\377\024\014\344\274\240\351\227\273\347\261"
    "\273\345\236\213\022.\n\010showTime\030\003 \001(\005B\034\302\377\024\030\346\264\273\345\212\250\346\217\220\347\244\272"
    "\346\230\276\347\244\272\346\227\266\351\227\264\022*\n\013chatContent\030\004 \001(\tB\025\302\377\024\014\344"
    "\274\240\351\227\273\345\206\205\345\256\271\220\301\024\310\001\022!\n\007channel\030\005 \001(\005B\020\302\377\024\014\346"
    "\230\276\347\244\272\351\242\221\351\201\223\022,\n\014CrossService\030\006 \001(\005B\026\302\377\024\022\346"
    "\230\257\345\220\246\350\267\250\346\234\215\345\271\277\346\222\255\"B\n\016Sheet_chatchat\0220\n\rc"
    "hatchat_List\030\001 \003(\0132\022.proto_ff.chatchatB\005"
    "\210\301\024\310\001\"\267\001\n\017chatspecialchat\022\036\n\004type\030\001 \001(\005B"
    "\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213\022%\n\006parama\030\002 \001(\tB\025\302\377\024\r\344"
    "\272\213\344\273\266\345\217\202\346\225\260a\220\301\024<\022&\n\006paramb\030\003 \001(\tB\026\302\377\024\r\344\272"
    "\213\344\273\266\345\217\202\346\225\260b\220\301\024\214\001\0225\n\007chat_Id\030\004 \001(\003B$\302\377\024 \350"
    "\247\246\345\217\221\345\205\263\350\201\224\347\232\204\350\267\221\351\251\254\347\201\257\345\206\205\345\256\271id\"V\n\025Sheet"
    "_chatspecialchat\022=\n\024chatspecialchat_List"
    "\030\001 \003(\0132\031.proto_ff.chatspecialchatB\004\210\301\024\024", 639);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  chatchat::default_instance_ = new chatchat();
  Sheet_chatchat::default_instance_ = new Sheet_chatchat();
  chatspecialchat::default_instance_ = new chatspecialchat();
  Sheet_chatspecialchat::default_instance_ = new Sheet_chatspecialchat();
  chatchat::default_instance_->InitAsDefaultInstance();
  Sheet_chatchat::default_instance_->InitAsDefaultInstance();
  chatspecialchat::default_instance_->InitAsDefaultInstance();
  Sheet_chatspecialchat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int chatchat::kChatIdFieldNumber;
const int chatchat::kChatTypeFieldNumber;
const int chatchat::kShowTimeFieldNumber;
const int chatchat::kChatContentFieldNumber;
const int chatchat::kChannelFieldNumber;
const int chatchat::kCrossServiceFieldNumber;
#endif  // !_MSC_VER

chatchat::chatchat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chatchat::InitAsDefaultInstance() {
}

chatchat::chatchat(const chatchat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chatchat::SharedCtor() {
  _cached_size_ = 0;
  chatid_ = GOOGLE_LONGLONG(0);
  chattype_ = 0;
  showtime_ = 0;
  chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  crossservice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chatchat::~chatchat() {
  SharedDtor();
}

void chatchat::SharedDtor() {
  if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete chatcontent_;
  }
  if (this != default_instance_) {
  }
}

void chatchat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chatchat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatchat_descriptor_;
}

const chatchat& chatchat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

chatchat* chatchat::default_instance_ = NULL;

chatchat* chatchat::New() const {
  return new chatchat;
}

void chatchat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatid_ = GOOGLE_LONGLONG(0);
    chattype_ = 0;
    showtime_ = 0;
    if (has_chatcontent()) {
      if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
        chatcontent_->clear();
      }
    }
    channel_ = 0;
    crossservice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chatchat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 chatId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chatid_)));
          set_has_chatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chatType;
        break;
      }

      // optional int32 chatType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_showTime;
        break;
      }

      // optional int32 showTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showtime_)));
          set_has_showtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chatContent;
        break;
      }

      // optional string chatContent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatcontent().data(), this->chatcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel;
        break;
      }

      // optional int32 channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CrossService;
        break;
      }

      // optional int32 CrossService = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CrossService:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crossservice_)));
          set_has_crossservice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chatchat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 chatId = 1;
  if (has_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chatid(), output);
  }

  // optional int32 chatType = 2;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chattype(), output);
  }

  // optional int32 showTime = 3;
  if (has_showtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->showtime(), output);
  }

  // optional string chatContent = 4;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chatcontent(), output);
  }

  // optional int32 channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel(), output);
  }

  // optional int32 CrossService = 6;
  if (has_crossservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->crossservice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chatchat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 chatId = 1;
  if (has_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chatid(), target);
  }

  // optional int32 chatType = 2;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chattype(), target);
  }

  // optional int32 showTime = 3;
  if (has_showtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->showtime(), target);
  }

  // optional string chatContent = 4;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatcontent().data(), this->chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chatcontent(), target);
  }

  // optional int32 channel = 5;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel(), target);
  }

  // optional int32 CrossService = 6;
  if (has_crossservice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->crossservice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chatchat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 chatId = 1;
    if (has_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chatid());
    }

    // optional int32 chatType = 2;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

    // optional int32 showTime = 3;
    if (has_showtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showtime());
    }

    // optional string chatContent = 4;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatcontent());
    }

    // optional int32 channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 CrossService = 6;
    if (has_crossservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crossservice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chatchat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chatchat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chatchat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chatchat::MergeFrom(const chatchat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatid()) {
      set_chatid(from.chatid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_showtime()) {
      set_showtime(from.showtime());
    }
    if (from.has_chatcontent()) {
      set_chatcontent(from.chatcontent());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_crossservice()) {
      set_crossservice(from.crossservice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chatchat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatchat::CopyFrom(const chatchat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatchat::IsInitialized() const {

  return true;
}

void chatchat::Swap(chatchat* other) {
  if (other != this) {
    std::swap(chatid_, other->chatid_);
    std::swap(chattype_, other->chattype_);
    std::swap(showtime_, other->showtime_);
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(channel_, other->channel_);
    std::swap(crossservice_, other->crossservice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chatchat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chatchat_descriptor_;
  metadata.reflection = chatchat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_chatchat::kChatchatListFieldNumber;
#endif  // !_MSC_VER

Sheet_chatchat::Sheet_chatchat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_chatchat::InitAsDefaultInstance() {
}

Sheet_chatchat::Sheet_chatchat(const Sheet_chatchat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_chatchat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_chatchat::~Sheet_chatchat() {
  SharedDtor();
}

void Sheet_chatchat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_chatchat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_chatchat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_chatchat_descriptor_;
}

const Sheet_chatchat& Sheet_chatchat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Sheet_chatchat* Sheet_chatchat::default_instance_ = NULL;

Sheet_chatchat* Sheet_chatchat::New() const {
  return new Sheet_chatchat;
}

void Sheet_chatchat::Clear() {
  chatchat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_chatchat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.chatchat chatchat_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatchat_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatchat_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chatchat_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_chatchat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.chatchat chatchat_List = 1;
  for (int i = 0; i < this->chatchat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatchat_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_chatchat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.chatchat chatchat_List = 1;
  for (int i = 0; i < this->chatchat_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatchat_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_chatchat::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.chatchat chatchat_List = 1;
  total_size += 1 * this->chatchat_list_size();
  for (int i = 0; i < this->chatchat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatchat_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_chatchat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_chatchat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_chatchat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_chatchat::MergeFrom(const Sheet_chatchat& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatchat_list_.MergeFrom(from.chatchat_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_chatchat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_chatchat::CopyFrom(const Sheet_chatchat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_chatchat::IsInitialized() const {

  return true;
}

void Sheet_chatchat::Swap(Sheet_chatchat* other) {
  if (other != this) {
    chatchat_list_.Swap(&other->chatchat_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_chatchat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_chatchat_descriptor_;
  metadata.reflection = Sheet_chatchat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chatspecialchat::kTypeFieldNumber;
const int chatspecialchat::kParamaFieldNumber;
const int chatspecialchat::kParambFieldNumber;
const int chatspecialchat::kChatIdFieldNumber;
#endif  // !_MSC_VER

chatspecialchat::chatspecialchat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chatspecialchat::InitAsDefaultInstance() {
}

chatspecialchat::chatspecialchat(const chatspecialchat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chatspecialchat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paramb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chatspecialchat::~chatspecialchat() {
  SharedDtor();
}

void chatspecialchat::SharedDtor() {
  if (parama_ != &::google::protobuf::internal::kEmptyString) {
    delete parama_;
  }
  if (paramb_ != &::google::protobuf::internal::kEmptyString) {
    delete paramb_;
  }
  if (this != default_instance_) {
  }
}

void chatspecialchat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chatspecialchat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatspecialchat_descriptor_;
}

const chatspecialchat& chatspecialchat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

chatspecialchat* chatspecialchat::default_instance_ = NULL;

chatspecialchat* chatspecialchat::New() const {
  return new chatspecialchat;
}

void chatspecialchat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_parama()) {
      if (parama_ != &::google::protobuf::internal::kEmptyString) {
        parama_->clear();
      }
    }
    if (has_paramb()) {
      if (paramb_ != &::google::protobuf::internal::kEmptyString) {
        paramb_->clear();
      }
    }
    chat_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chatspecialchat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parama;
        break;
      }

      // optional string parama = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parama:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parama()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parama().data(), this->parama().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paramb;
        break;
      }

      // optional string paramb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramb().data(), this->paramb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chat_Id;
        break;
      }

      // optional int64 chat_Id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_id_)));
          set_has_chat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chatspecialchat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string parama = 2;
  if (has_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parama().data(), this->parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parama(), output);
  }

  // optional string paramb = 3;
  if (has_paramb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramb().data(), this->paramb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->paramb(), output);
  }

  // optional int64 chat_Id = 4;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->chat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chatspecialchat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string parama = 2;
  if (has_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parama().data(), this->parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parama(), target);
  }

  // optional string paramb = 3;
  if (has_paramb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramb().data(), this->paramb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->paramb(), target);
  }

  // optional int64 chat_Id = 4;
  if (has_chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->chat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chatspecialchat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string parama = 2;
    if (has_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parama());
    }

    // optional string paramb = 3;
    if (has_paramb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramb());
    }

    // optional int64 chat_Id = 4;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chatspecialchat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chatspecialchat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chatspecialchat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chatspecialchat::MergeFrom(const chatspecialchat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_parama()) {
      set_parama(from.parama());
    }
    if (from.has_paramb()) {
      set_paramb(from.paramb());
    }
    if (from.has_chat_id()) {
      set_chat_id(from.chat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chatspecialchat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatspecialchat::CopyFrom(const chatspecialchat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatspecialchat::IsInitialized() const {

  return true;
}

void chatspecialchat::Swap(chatspecialchat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(parama_, other->parama_);
    std::swap(paramb_, other->paramb_);
    std::swap(chat_id_, other->chat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chatspecialchat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chatspecialchat_descriptor_;
  metadata.reflection = chatspecialchat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_chatspecialchat::kChatspecialchatListFieldNumber;
#endif  // !_MSC_VER

Sheet_chatspecialchat::Sheet_chatspecialchat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_chatspecialchat::InitAsDefaultInstance() {
}

Sheet_chatspecialchat::Sheet_chatspecialchat(const Sheet_chatspecialchat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_chatspecialchat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_chatspecialchat::~Sheet_chatspecialchat() {
  SharedDtor();
}

void Sheet_chatspecialchat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_chatspecialchat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_chatspecialchat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_chatspecialchat_descriptor_;
}

const Sheet_chatspecialchat& Sheet_chatspecialchat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Sheet_chatspecialchat* Sheet_chatspecialchat::default_instance_ = NULL;

Sheet_chatspecialchat* Sheet_chatspecialchat::New() const {
  return new Sheet_chatspecialchat;
}

void Sheet_chatspecialchat::Clear() {
  chatspecialchat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_chatspecialchat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.chatspecialchat chatspecialchat_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatspecialchat_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatspecialchat_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chatspecialchat_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_chatspecialchat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.chatspecialchat chatspecialchat_List = 1;
  for (int i = 0; i < this->chatspecialchat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatspecialchat_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_chatspecialchat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.chatspecialchat chatspecialchat_List = 1;
  for (int i = 0; i < this->chatspecialchat_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatspecialchat_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_chatspecialchat::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.chatspecialchat chatspecialchat_List = 1;
  total_size += 1 * this->chatspecialchat_list_size();
  for (int i = 0; i < this->chatspecialchat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatspecialchat_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_chatspecialchat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_chatspecialchat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_chatspecialchat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_chatspecialchat::MergeFrom(const Sheet_chatspecialchat& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatspecialchat_list_.MergeFrom(from.chatspecialchat_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_chatspecialchat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_chatspecialchat::CopyFrom(const Sheet_chatspecialchat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_chatspecialchat::IsInitialized() const {

  return true;
}

void Sheet_chatspecialchat::Swap(Sheet_chatspecialchat* other) {
  if (other != this) {
    chatspecialchat_list_.Swap(&other->chatspecialchat_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_chatspecialchat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_chatspecialchat_descriptor_;
  metadata.reflection = Sheet_chatspecialchat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
