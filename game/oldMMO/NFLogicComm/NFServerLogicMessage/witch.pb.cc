// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: witch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "witch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* witchawarditemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  witchawarditemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* witchaward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  witchaward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_witchaward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_witchaward_reflection_ = NULL;
const ::google::protobuf::Descriptor* witchsummon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  witchsummon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_witchsummon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_witchsummon_reflection_ = NULL;
const ::google::protobuf::Descriptor* witchrewardExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  witchrewardExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_witchrewardExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_witchrewardExp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_witch_2eproto() {
  protobuf_AddDesc_witch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "witch.proto");
  GOOGLE_CHECK(file != NULL);
  witchawarditemDesc_descriptor_ = file->message_type(0);
  static const int witchawarditemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchawarditemDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchawarditemDesc, name_),
  };
  witchawarditemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      witchawarditemDesc_descriptor_,
      witchawarditemDesc::default_instance_,
      witchawarditemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchawarditemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchawarditemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(witchawarditemDesc));
  witchaward_descriptor_ = file->message_type(1);
  static const int witchaward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, rank1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, rank2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, integral_blue_nub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, integral_purple_nub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, integral_red_nub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, item_),
  };
  witchaward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      witchaward_descriptor_,
      witchaward::default_instance_,
      witchaward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchaward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(witchaward));
  Sheet_witchaward_descriptor_ = file->message_type(2);
  static const int Sheet_witchaward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchaward, witchaward_list_),
  };
  Sheet_witchaward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_witchaward_descriptor_,
      Sheet_witchaward::default_instance_,
      Sheet_witchaward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchaward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchaward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_witchaward));
  witchsummon_descriptor_ = file->message_type(3);
  static const int witchsummon_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, purpledrill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, xzhou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, yzhou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, zzhou_),
  };
  witchsummon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      witchsummon_descriptor_,
      witchsummon::default_instance_,
      witchsummon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchsummon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(witchsummon));
  Sheet_witchsummon_descriptor_ = file->message_type(4);
  static const int Sheet_witchsummon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchsummon, witchsummon_list_),
  };
  Sheet_witchsummon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_witchsummon_descriptor_,
      Sheet_witchsummon::default_instance_,
      Sheet_witchsummon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchsummon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchsummon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_witchsummon));
  witchrewardExp_descriptor_ = file->message_type(5);
  static const int witchrewardExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchrewardExp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchrewardExp, reward_exp_),
  };
  witchrewardExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      witchrewardExp_descriptor_,
      witchrewardExp::default_instance_,
      witchrewardExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchrewardExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(witchrewardExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(witchrewardExp));
  Sheet_witchrewardExp_descriptor_ = file->message_type(6);
  static const int Sheet_witchrewardExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchrewardExp, witchrewardexp_list_),
  };
  Sheet_witchrewardExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_witchrewardExp_descriptor_,
      Sheet_witchrewardExp::default_instance_,
      Sheet_witchrewardExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchrewardExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_witchrewardExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_witchrewardExp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_witch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    witchawarditemDesc_descriptor_, &witchawarditemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    witchaward_descriptor_, &witchaward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_witchaward_descriptor_, &Sheet_witchaward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    witchsummon_descriptor_, &witchsummon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_witchsummon_descriptor_, &Sheet_witchsummon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    witchrewardExp_descriptor_, &witchrewardExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_witchrewardExp_descriptor_, &Sheet_witchrewardExp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_witch_2eproto() {
  delete witchawarditemDesc::default_instance_;
  delete witchawarditemDesc_reflection_;
  delete witchaward::default_instance_;
  delete witchaward_reflection_;
  delete Sheet_witchaward::default_instance_;
  delete Sheet_witchaward_reflection_;
  delete witchsummon::default_instance_;
  delete witchsummon_reflection_;
  delete Sheet_witchsummon::default_instance_;
  delete Sheet_witchsummon_reflection_;
  delete witchrewardExp::default_instance_;
  delete witchrewardExp_reflection_;
  delete Sheet_witchrewardExp::default_instance_;
  delete Sheet_witchrewardExp_reflection_;
}

void protobuf_AddDesc_witch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013witch.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"G\n\022witchawarditemDesc\022\027\n\003num\030\001 \001("
    "\005B\n\302\377\024\006\346\225\260\351\207\217\022\030\n\004name\030\002 \001(\003B\n\302\377\024\006\345\220\215\347\247\260\""
    "\262\002\n\nwitchaward\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022%\n\005ra"
    "nk1\030\002 \001(\005B\026\302\377\024\022\346\234\200\345\260\217\346\216\222\350\241\214\345\214\272\351\227\264\022%\n\005ran"
    "k2\030\003 \001(\005B\026\302\377\024\022\346\234\200\345\244\247\346\216\222\350\241\214\345\214\272\351\227\264\022+\n\021inte"
    "gral_blue_nub\030\004 \001(\005B\020\302\377\024\014\350\223\235\350\211\262\347\247\257\345\210\206\022-\n"
    "\023integral_purple_nub\030\005 \001(\005B\020\302\377\024\014\347\264\253\350\211\262\347\247"
    "\257\345\210\206\022*\n\020integral_red_nub\030\006 \001(\005B\020\302\377\024\014\347\272\242\350"
    "\211\262\347\247\257\345\210\206\022:\n\004item\030\007 \003(\0132\034.proto_ff.witcha"
    "warditemDescB\016\302\377\024\006\347\211\251\345\223\201\210\301\024\003\"G\n\020Sheet_wi"
    "tchaward\0223\n\017witchaward_List\030\001 \003(\0132\024.prot"
    "o_ff.witchawardB\004\210\301\024\024\"\237\002\n\013witchsummon\022\022\n"
    "\002id\030\001 \001(\005B\006\302\377\024\002id\022\'\n\007consume\030\002 \001(\005B\026\302\377\024\022"
    "\346\266\210\350\200\227\347\247\257\345\210\206\347\261\273\345\236\213\022!\n\006bossId\030\003 \001(\003B\021\302\377\024\r"
    "\345\217\254\345\224\244BOSS_ID\022 \n\004item\030\004 \001(\003B\022\302\377\024\016\347\272\242\345\214\205\345"
    "\245\226\345\212\261id\022+\n\013purpleDrill\030\005 \001(\005B\026\302\377\024\022\347\264\253\351\222\273"
    "\347\272\242\345\214\205\346\225\260\351\207\217\022\037\n\005xzhou\030\006 \001(\005B\020\302\377\024\014\345\235\220\346\240\207\346"
    "\250\252\345\220\221\022\037\n\005yzhou\030\007 \001(\005B\020\302\377\024\014\345\235\220\346\240\207\347\272\265\345\220\221\022\037"
    "\n\005zzhou\030\010 \001(\005B\020\302\377\024\014\345\235\220\346\240\207\345\236\202\347\233\264\"J\n\021Sheet"
    "_witchsummon\0225\n\020witchsummon_List\030\001 \003(\0132\025"
    ".proto_ff.witchsummonB\004\210\301\024\024\"T\n\016witchrewa"
    "rdExp\022\034\n\002lv\030\001 \001(\005B\020\302\377\024\014\350\247\222\350\211\262\347\255\211\347\272\247\022$\n\nr"
    "eward_Exp\030\002 \001(\003B\020\302\377\024\014\345\245\226\345\212\261\347\273\217\351\252\214\"T\n\024She"
    "et_witchrewardExp\022<\n\023witchrewardExp_List"
    "\030\001 \003(\0132\030.proto_ff.witchrewardExpB\005\210\301\024\320\017", 1039);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "witch.proto", &protobuf_RegisterTypes);
  witchawarditemDesc::default_instance_ = new witchawarditemDesc();
  witchaward::default_instance_ = new witchaward();
  Sheet_witchaward::default_instance_ = new Sheet_witchaward();
  witchsummon::default_instance_ = new witchsummon();
  Sheet_witchsummon::default_instance_ = new Sheet_witchsummon();
  witchrewardExp::default_instance_ = new witchrewardExp();
  Sheet_witchrewardExp::default_instance_ = new Sheet_witchrewardExp();
  witchawarditemDesc::default_instance_->InitAsDefaultInstance();
  witchaward::default_instance_->InitAsDefaultInstance();
  Sheet_witchaward::default_instance_->InitAsDefaultInstance();
  witchsummon::default_instance_->InitAsDefaultInstance();
  Sheet_witchsummon::default_instance_->InitAsDefaultInstance();
  witchrewardExp::default_instance_->InitAsDefaultInstance();
  Sheet_witchrewardExp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_witch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_witch_2eproto {
  StaticDescriptorInitializer_witch_2eproto() {
    protobuf_AddDesc_witch_2eproto();
  }
} static_descriptor_initializer_witch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int witchawarditemDesc::kNumFieldNumber;
const int witchawarditemDesc::kNameFieldNumber;
#endif  // !_MSC_VER

witchawarditemDesc::witchawarditemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void witchawarditemDesc::InitAsDefaultInstance() {
}

witchawarditemDesc::witchawarditemDesc(const witchawarditemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void witchawarditemDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  name_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

witchawarditemDesc::~witchawarditemDesc() {
  SharedDtor();
}

void witchawarditemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void witchawarditemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* witchawarditemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return witchawarditemDesc_descriptor_;
}

const witchawarditemDesc& witchawarditemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witch_2eproto();
  return *default_instance_;
}

witchawarditemDesc* witchawarditemDesc::default_instance_ = NULL;

witchawarditemDesc* witchawarditemDesc::New() const {
  return new witchawarditemDesc;
}

void witchawarditemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    name_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool witchawarditemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional int64 name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void witchawarditemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* witchawarditemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int witchawarditemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void witchawarditemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const witchawarditemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const witchawarditemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void witchawarditemDesc::MergeFrom(const witchawarditemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void witchawarditemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void witchawarditemDesc::CopyFrom(const witchawarditemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool witchawarditemDesc::IsInitialized() const {

  return true;
}

void witchawarditemDesc::Swap(witchawarditemDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata witchawarditemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = witchawarditemDesc_descriptor_;
  metadata.reflection = witchawarditemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int witchaward::kIdFieldNumber;
const int witchaward::kRank1FieldNumber;
const int witchaward::kRank2FieldNumber;
const int witchaward::kIntegralBlueNubFieldNumber;
const int witchaward::kIntegralPurpleNubFieldNumber;
const int witchaward::kIntegralRedNubFieldNumber;
const int witchaward::kItemFieldNumber;
#endif  // !_MSC_VER

witchaward::witchaward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void witchaward::InitAsDefaultInstance() {
}

witchaward::witchaward(const witchaward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void witchaward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  rank1_ = 0;
  rank2_ = 0;
  integral_blue_nub_ = 0;
  integral_purple_nub_ = 0;
  integral_red_nub_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

witchaward::~witchaward() {
  SharedDtor();
}

void witchaward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void witchaward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* witchaward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return witchaward_descriptor_;
}

const witchaward& witchaward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witch_2eproto();
  return *default_instance_;
}

witchaward* witchaward::default_instance_ = NULL;

witchaward* witchaward::New() const {
  return new witchaward;
}

void witchaward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    rank1_ = 0;
    rank2_ = 0;
    integral_blue_nub_ = 0;
    integral_purple_nub_ = 0;
    integral_red_nub_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool witchaward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank1;
        break;
      }

      // optional int32 rank1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank1_)));
          set_has_rank1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank2;
        break;
      }

      // optional int32 rank2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank2_)));
          set_has_rank2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_integral_blue_nub;
        break;
      }

      // optional int32 integral_blue_nub = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral_blue_nub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_blue_nub_)));
          set_has_integral_blue_nub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_integral_purple_nub;
        break;
      }

      // optional int32 integral_purple_nub = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral_purple_nub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_purple_nub_)));
          set_has_integral_purple_nub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_integral_red_nub;
        break;
      }

      // optional int32 integral_red_nub = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral_red_nub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_red_nub_)));
          set_has_integral_red_nub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        break;
      }

      // repeated .proto_ff.witchawarditemDesc item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void witchaward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 rank1 = 2;
  if (has_rank1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank1(), output);
  }

  // optional int32 rank2 = 3;
  if (has_rank2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank2(), output);
  }

  // optional int32 integral_blue_nub = 4;
  if (has_integral_blue_nub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->integral_blue_nub(), output);
  }

  // optional int32 integral_purple_nub = 5;
  if (has_integral_purple_nub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integral_purple_nub(), output);
  }

  // optional int32 integral_red_nub = 6;
  if (has_integral_red_nub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->integral_red_nub(), output);
  }

  // repeated .proto_ff.witchawarditemDesc item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* witchaward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 rank1 = 2;
  if (has_rank1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank1(), target);
  }

  // optional int32 rank2 = 3;
  if (has_rank2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank2(), target);
  }

  // optional int32 integral_blue_nub = 4;
  if (has_integral_blue_nub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->integral_blue_nub(), target);
  }

  // optional int32 integral_purple_nub = 5;
  if (has_integral_purple_nub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integral_purple_nub(), target);
  }

  // optional int32 integral_red_nub = 6;
  if (has_integral_red_nub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->integral_red_nub(), target);
  }

  // repeated .proto_ff.witchawarditemDesc item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int witchaward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 rank1 = 2;
    if (has_rank1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank1());
    }

    // optional int32 rank2 = 3;
    if (has_rank2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank2());
    }

    // optional int32 integral_blue_nub = 4;
    if (has_integral_blue_nub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral_blue_nub());
    }

    // optional int32 integral_purple_nub = 5;
    if (has_integral_purple_nub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral_purple_nub());
    }

    // optional int32 integral_red_nub = 6;
    if (has_integral_red_nub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral_red_nub());
    }

  }
  // repeated .proto_ff.witchawarditemDesc item = 7;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void witchaward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const witchaward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const witchaward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void witchaward::MergeFrom(const witchaward& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank1()) {
      set_rank1(from.rank1());
    }
    if (from.has_rank2()) {
      set_rank2(from.rank2());
    }
    if (from.has_integral_blue_nub()) {
      set_integral_blue_nub(from.integral_blue_nub());
    }
    if (from.has_integral_purple_nub()) {
      set_integral_purple_nub(from.integral_purple_nub());
    }
    if (from.has_integral_red_nub()) {
      set_integral_red_nub(from.integral_red_nub());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void witchaward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void witchaward::CopyFrom(const witchaward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool witchaward::IsInitialized() const {

  return true;
}

void witchaward::Swap(witchaward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rank1_, other->rank1_);
    std::swap(rank2_, other->rank2_);
    std::swap(integral_blue_nub_, other->integral_blue_nub_);
    std::swap(integral_purple_nub_, other->integral_purple_nub_);
    std::swap(integral_red_nub_, other->integral_red_nub_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata witchaward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = witchaward_descriptor_;
  metadata.reflection = witchaward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_witchaward::kWitchawardListFieldNumber;
#endif  // !_MSC_VER

Sheet_witchaward::Sheet_witchaward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_witchaward::InitAsDefaultInstance() {
}

Sheet_witchaward::Sheet_witchaward(const Sheet_witchaward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_witchaward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_witchaward::~Sheet_witchaward() {
  SharedDtor();
}

void Sheet_witchaward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_witchaward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_witchaward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_witchaward_descriptor_;
}

const Sheet_witchaward& Sheet_witchaward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witch_2eproto();
  return *default_instance_;
}

Sheet_witchaward* Sheet_witchaward::default_instance_ = NULL;

Sheet_witchaward* Sheet_witchaward::New() const {
  return new Sheet_witchaward;
}

void Sheet_witchaward::Clear() {
  witchaward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_witchaward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.witchaward witchaward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_witchaward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_witchaward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_witchaward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_witchaward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.witchaward witchaward_List = 1;
  for (int i = 0; i < this->witchaward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->witchaward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_witchaward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.witchaward witchaward_List = 1;
  for (int i = 0; i < this->witchaward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->witchaward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_witchaward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.witchaward witchaward_List = 1;
  total_size += 1 * this->witchaward_list_size();
  for (int i = 0; i < this->witchaward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->witchaward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_witchaward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_witchaward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_witchaward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_witchaward::MergeFrom(const Sheet_witchaward& from) {
  GOOGLE_CHECK_NE(&from, this);
  witchaward_list_.MergeFrom(from.witchaward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_witchaward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_witchaward::CopyFrom(const Sheet_witchaward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_witchaward::IsInitialized() const {

  return true;
}

void Sheet_witchaward::Swap(Sheet_witchaward* other) {
  if (other != this) {
    witchaward_list_.Swap(&other->witchaward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_witchaward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_witchaward_descriptor_;
  metadata.reflection = Sheet_witchaward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int witchsummon::kIdFieldNumber;
const int witchsummon::kConsumeFieldNumber;
const int witchsummon::kBossIdFieldNumber;
const int witchsummon::kItemFieldNumber;
const int witchsummon::kPurpleDrillFieldNumber;
const int witchsummon::kXzhouFieldNumber;
const int witchsummon::kYzhouFieldNumber;
const int witchsummon::kZzhouFieldNumber;
#endif  // !_MSC_VER

witchsummon::witchsummon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void witchsummon::InitAsDefaultInstance() {
}

witchsummon::witchsummon(const witchsummon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void witchsummon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  consume_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  item_ = GOOGLE_LONGLONG(0);
  purpledrill_ = 0;
  xzhou_ = 0;
  yzhou_ = 0;
  zzhou_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

witchsummon::~witchsummon() {
  SharedDtor();
}

void witchsummon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void witchsummon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* witchsummon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return witchsummon_descriptor_;
}

const witchsummon& witchsummon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witch_2eproto();
  return *default_instance_;
}

witchsummon* witchsummon::default_instance_ = NULL;

witchsummon* witchsummon::New() const {
  return new witchsummon;
}

void witchsummon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    consume_ = 0;
    bossid_ = GOOGLE_LONGLONG(0);
    item_ = GOOGLE_LONGLONG(0);
    purpledrill_ = 0;
    xzhou_ = 0;
    yzhou_ = 0;
    zzhou_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool witchsummon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consume;
        break;
      }

      // optional int32 consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item;
        break;
      }

      // optional int64 item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_purpleDrill;
        break;
      }

      // optional int32 purpleDrill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purpleDrill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purpledrill_)));
          set_has_purpledrill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xzhou;
        break;
      }

      // optional int32 xzhou = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xzhou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xzhou_)));
          set_has_xzhou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_yzhou;
        break;
      }

      // optional int32 yzhou = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yzhou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yzhou_)));
          set_has_yzhou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_zzhou;
        break;
      }

      // optional int32 zzhou = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zzhou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zzhou_)));
          set_has_zzhou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void witchsummon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 consume = 2;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->consume(), output);
  }

  // optional int64 bossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bossid(), output);
  }

  // optional int64 item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->item(), output);
  }

  // optional int32 purpleDrill = 5;
  if (has_purpledrill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->purpledrill(), output);
  }

  // optional int32 xzhou = 6;
  if (has_xzhou()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xzhou(), output);
  }

  // optional int32 yzhou = 7;
  if (has_yzhou()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->yzhou(), output);
  }

  // optional int32 zzhou = 8;
  if (has_zzhou()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->zzhou(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* witchsummon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 consume = 2;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->consume(), target);
  }

  // optional int64 bossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bossid(), target);
  }

  // optional int64 item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->item(), target);
  }

  // optional int32 purpleDrill = 5;
  if (has_purpledrill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->purpledrill(), target);
  }

  // optional int32 xzhou = 6;
  if (has_xzhou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xzhou(), target);
  }

  // optional int32 yzhou = 7;
  if (has_yzhou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->yzhou(), target);
  }

  // optional int32 zzhou = 8;
  if (has_zzhou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->zzhou(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int witchsummon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 consume = 2;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume());
    }

    // optional int64 bossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int64 item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 purpleDrill = 5;
    if (has_purpledrill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purpledrill());
    }

    // optional int32 xzhou = 6;
    if (has_xzhou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xzhou());
    }

    // optional int32 yzhou = 7;
    if (has_yzhou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yzhou());
    }

    // optional int32 zzhou = 8;
    if (has_zzhou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zzhou());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void witchsummon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const witchsummon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const witchsummon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void witchsummon::MergeFrom(const witchsummon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_purpledrill()) {
      set_purpledrill(from.purpledrill());
    }
    if (from.has_xzhou()) {
      set_xzhou(from.xzhou());
    }
    if (from.has_yzhou()) {
      set_yzhou(from.yzhou());
    }
    if (from.has_zzhou()) {
      set_zzhou(from.zzhou());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void witchsummon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void witchsummon::CopyFrom(const witchsummon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool witchsummon::IsInitialized() const {

  return true;
}

void witchsummon::Swap(witchsummon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(consume_, other->consume_);
    std::swap(bossid_, other->bossid_);
    std::swap(item_, other->item_);
    std::swap(purpledrill_, other->purpledrill_);
    std::swap(xzhou_, other->xzhou_);
    std::swap(yzhou_, other->yzhou_);
    std::swap(zzhou_, other->zzhou_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata witchsummon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = witchsummon_descriptor_;
  metadata.reflection = witchsummon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_witchsummon::kWitchsummonListFieldNumber;
#endif  // !_MSC_VER

Sheet_witchsummon::Sheet_witchsummon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_witchsummon::InitAsDefaultInstance() {
}

Sheet_witchsummon::Sheet_witchsummon(const Sheet_witchsummon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_witchsummon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_witchsummon::~Sheet_witchsummon() {
  SharedDtor();
}

void Sheet_witchsummon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_witchsummon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_witchsummon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_witchsummon_descriptor_;
}

const Sheet_witchsummon& Sheet_witchsummon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witch_2eproto();
  return *default_instance_;
}

Sheet_witchsummon* Sheet_witchsummon::default_instance_ = NULL;

Sheet_witchsummon* Sheet_witchsummon::New() const {
  return new Sheet_witchsummon;
}

void Sheet_witchsummon::Clear() {
  witchsummon_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_witchsummon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.witchsummon witchsummon_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_witchsummon_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_witchsummon_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_witchsummon_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_witchsummon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.witchsummon witchsummon_List = 1;
  for (int i = 0; i < this->witchsummon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->witchsummon_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_witchsummon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.witchsummon witchsummon_List = 1;
  for (int i = 0; i < this->witchsummon_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->witchsummon_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_witchsummon::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.witchsummon witchsummon_List = 1;
  total_size += 1 * this->witchsummon_list_size();
  for (int i = 0; i < this->witchsummon_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->witchsummon_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_witchsummon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_witchsummon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_witchsummon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_witchsummon::MergeFrom(const Sheet_witchsummon& from) {
  GOOGLE_CHECK_NE(&from, this);
  witchsummon_list_.MergeFrom(from.witchsummon_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_witchsummon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_witchsummon::CopyFrom(const Sheet_witchsummon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_witchsummon::IsInitialized() const {

  return true;
}

void Sheet_witchsummon::Swap(Sheet_witchsummon* other) {
  if (other != this) {
    witchsummon_list_.Swap(&other->witchsummon_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_witchsummon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_witchsummon_descriptor_;
  metadata.reflection = Sheet_witchsummon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int witchrewardExp::kLvFieldNumber;
const int witchrewardExp::kRewardExpFieldNumber;
#endif  // !_MSC_VER

witchrewardExp::witchrewardExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void witchrewardExp::InitAsDefaultInstance() {
}

witchrewardExp::witchrewardExp(const witchrewardExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void witchrewardExp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  reward_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

witchrewardExp::~witchrewardExp() {
  SharedDtor();
}

void witchrewardExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void witchrewardExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* witchrewardExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return witchrewardExp_descriptor_;
}

const witchrewardExp& witchrewardExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witch_2eproto();
  return *default_instance_;
}

witchrewardExp* witchrewardExp::default_instance_ = NULL;

witchrewardExp* witchrewardExp::New() const {
  return new witchrewardExp;
}

void witchrewardExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    reward_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool witchrewardExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_Exp;
        break;
      }

      // optional int64 reward_Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_exp_)));
          set_has_reward_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void witchrewardExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int64 reward_Exp = 2;
  if (has_reward_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->reward_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* witchrewardExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int64 reward_Exp = 2;
  if (has_reward_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->reward_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int witchrewardExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 reward_Exp = 2;
    if (has_reward_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void witchrewardExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const witchrewardExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const witchrewardExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void witchrewardExp::MergeFrom(const witchrewardExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_reward_exp()) {
      set_reward_exp(from.reward_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void witchrewardExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void witchrewardExp::CopyFrom(const witchrewardExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool witchrewardExp::IsInitialized() const {

  return true;
}

void witchrewardExp::Swap(witchrewardExp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(reward_exp_, other->reward_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata witchrewardExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = witchrewardExp_descriptor_;
  metadata.reflection = witchrewardExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_witchrewardExp::kWitchrewardExpListFieldNumber;
#endif  // !_MSC_VER

Sheet_witchrewardExp::Sheet_witchrewardExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_witchrewardExp::InitAsDefaultInstance() {
}

Sheet_witchrewardExp::Sheet_witchrewardExp(const Sheet_witchrewardExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_witchrewardExp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_witchrewardExp::~Sheet_witchrewardExp() {
  SharedDtor();
}

void Sheet_witchrewardExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_witchrewardExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_witchrewardExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_witchrewardExp_descriptor_;
}

const Sheet_witchrewardExp& Sheet_witchrewardExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_witch_2eproto();
  return *default_instance_;
}

Sheet_witchrewardExp* Sheet_witchrewardExp::default_instance_ = NULL;

Sheet_witchrewardExp* Sheet_witchrewardExp::New() const {
  return new Sheet_witchrewardExp;
}

void Sheet_witchrewardExp::Clear() {
  witchrewardexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_witchrewardExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.witchrewardExp witchrewardExp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_witchrewardExp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_witchrewardexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_witchrewardExp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_witchrewardExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.witchrewardExp witchrewardExp_List = 1;
  for (int i = 0; i < this->witchrewardexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->witchrewardexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_witchrewardExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.witchrewardExp witchrewardExp_List = 1;
  for (int i = 0; i < this->witchrewardexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->witchrewardexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_witchrewardExp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.witchrewardExp witchrewardExp_List = 1;
  total_size += 1 * this->witchrewardexp_list_size();
  for (int i = 0; i < this->witchrewardexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->witchrewardexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_witchrewardExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_witchrewardExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_witchrewardExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_witchrewardExp::MergeFrom(const Sheet_witchrewardExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  witchrewardexp_list_.MergeFrom(from.witchrewardexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_witchrewardExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_witchrewardExp::CopyFrom(const Sheet_witchrewardExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_witchrewardExp::IsInitialized() const {

  return true;
}

void Sheet_witchrewardExp::Swap(Sheet_witchrewardExp* other) {
  if (other != this) {
    witchrewardexp_list_.Swap(&other->witchrewardexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_witchrewardExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_witchrewardExp_descriptor_;
  metadata.reflection = Sheet_witchrewardExp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
