// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snowballWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "snowballWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* snowballWarcons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  snowballWarcons_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_snowballWarcons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_snowballWarcons_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_snowballWar_2eproto() {
  protobuf_AddDesc_snowballWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "snowballWar.proto");
  GOOGLE_CHECK(file != NULL);
  snowballWarcons_descriptor_ = file->message_type(0);
  static const int snowballWarcons_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snowballWarcons, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snowballWarcons, valuedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snowballWarcons, stringdata_),
  };
  snowballWarcons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      snowballWarcons_descriptor_,
      snowballWarcons::default_instance_,
      snowballWarcons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snowballWarcons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snowballWarcons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(snowballWarcons));
  Sheet_snowballWarcons_descriptor_ = file->message_type(1);
  static const int Sheet_snowballWarcons_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_snowballWarcons, snowballwarcons_list_),
  };
  Sheet_snowballWarcons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_snowballWarcons_descriptor_,
      Sheet_snowballWarcons::default_instance_,
      Sheet_snowballWarcons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_snowballWarcons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_snowballWarcons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_snowballWarcons));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_snowballWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    snowballWarcons_descriptor_, &snowballWarcons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_snowballWarcons_descriptor_, &Sheet_snowballWarcons::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_snowballWar_2eproto() {
  delete snowballWarcons::default_instance_;
  delete snowballWarcons_reflection_;
  delete Sheet_snowballWarcons::default_instance_;
  delete Sheet_snowballWarcons_reflection_;
}

void protobuf_AddDesc_snowballWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021snowballWar.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"x\n\017snowballWarcons\022\026\n\002ID\030\001 "
    "\001(\005B\n\302\377\024\006\347\274\226\345\217\267\022 \n\tvaluedata\030\002 \001(\003B\r\302\377\024\t"
    "\345\200\274\346\225\260\346\215\256\022+\n\nstringdata\030\003 \001(\tB\027\302\377\024\017\345\255\227\347\254"
    "\246\344\270\262\346\225\260\346\215\256\220\301\024<\"V\n\025Sheet_snowballWarcons\022"
    "=\n\024snowballWarcons_List\030\001 \003(\0132\031.proto_ff"
    ".snowballWarconsB\004\210\301\024\024", 262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "snowballWar.proto", &protobuf_RegisterTypes);
  snowballWarcons::default_instance_ = new snowballWarcons();
  Sheet_snowballWarcons::default_instance_ = new Sheet_snowballWarcons();
  snowballWarcons::default_instance_->InitAsDefaultInstance();
  Sheet_snowballWarcons::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_snowballWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_snowballWar_2eproto {
  StaticDescriptorInitializer_snowballWar_2eproto() {
    protobuf_AddDesc_snowballWar_2eproto();
  }
} static_descriptor_initializer_snowballWar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int snowballWarcons::kIDFieldNumber;
const int snowballWarcons::kValuedataFieldNumber;
const int snowballWarcons::kStringdataFieldNumber;
#endif  // !_MSC_VER

snowballWarcons::snowballWarcons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void snowballWarcons::InitAsDefaultInstance() {
}

snowballWarcons::snowballWarcons(const snowballWarcons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void snowballWarcons::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  valuedata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

snowballWarcons::~snowballWarcons() {
  SharedDtor();
}

void snowballWarcons::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void snowballWarcons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* snowballWarcons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return snowballWarcons_descriptor_;
}

const snowballWarcons& snowballWarcons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snowballWar_2eproto();
  return *default_instance_;
}

snowballWarcons* snowballWarcons::default_instance_ = NULL;

snowballWarcons* snowballWarcons::New() const {
  return new snowballWarcons;
}

void snowballWarcons::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    valuedata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool snowballWarcons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_valuedata;
        break;
      }

      // optional int64 valuedata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &valuedata_)));
          set_has_valuedata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void snowballWarcons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 valuedata = 2;
  if (has_valuedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->valuedata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* snowballWarcons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 valuedata = 2;
  if (has_valuedata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->valuedata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int snowballWarcons::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 valuedata = 2;
    if (has_valuedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->valuedata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void snowballWarcons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const snowballWarcons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const snowballWarcons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void snowballWarcons::MergeFrom(const snowballWarcons& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_valuedata()) {
      set_valuedata(from.valuedata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void snowballWarcons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snowballWarcons::CopyFrom(const snowballWarcons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snowballWarcons::IsInitialized() const {

  return true;
}

void snowballWarcons::Swap(snowballWarcons* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(valuedata_, other->valuedata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata snowballWarcons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = snowballWarcons_descriptor_;
  metadata.reflection = snowballWarcons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_snowballWarcons::kSnowballWarconsListFieldNumber;
#endif  // !_MSC_VER

Sheet_snowballWarcons::Sheet_snowballWarcons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_snowballWarcons::InitAsDefaultInstance() {
}

Sheet_snowballWarcons::Sheet_snowballWarcons(const Sheet_snowballWarcons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_snowballWarcons::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_snowballWarcons::~Sheet_snowballWarcons() {
  SharedDtor();
}

void Sheet_snowballWarcons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_snowballWarcons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_snowballWarcons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_snowballWarcons_descriptor_;
}

const Sheet_snowballWarcons& Sheet_snowballWarcons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snowballWar_2eproto();
  return *default_instance_;
}

Sheet_snowballWarcons* Sheet_snowballWarcons::default_instance_ = NULL;

Sheet_snowballWarcons* Sheet_snowballWarcons::New() const {
  return new Sheet_snowballWarcons;
}

void Sheet_snowballWarcons::Clear() {
  snowballwarcons_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_snowballWarcons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.snowballWarcons snowballWarcons_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snowballWarcons_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_snowballwarcons_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_snowballWarcons_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_snowballWarcons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.snowballWarcons snowballWarcons_List = 1;
  for (int i = 0; i < this->snowballwarcons_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snowballwarcons_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_snowballWarcons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.snowballWarcons snowballWarcons_List = 1;
  for (int i = 0; i < this->snowballwarcons_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snowballwarcons_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_snowballWarcons::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.snowballWarcons snowballWarcons_List = 1;
  total_size += 1 * this->snowballwarcons_list_size();
  for (int i = 0; i < this->snowballwarcons_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->snowballwarcons_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_snowballWarcons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_snowballWarcons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_snowballWarcons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_snowballWarcons::MergeFrom(const Sheet_snowballWarcons& from) {
  GOOGLE_CHECK_NE(&from, this);
  snowballwarcons_list_.MergeFrom(from.snowballwarcons_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_snowballWarcons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_snowballWarcons::CopyFrom(const Sheet_snowballWarcons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_snowballWarcons::IsInitialized() const {

  return true;
}

void Sheet_snowballWarcons::Swap(Sheet_snowballWarcons* other) {
  if (other != this) {
    snowballwarcons_list_.Swap(&other->snowballwarcons_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_snowballWarcons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_snowballWarcons_descriptor_;
  metadata.reflection = Sheet_snowballWarcons_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
