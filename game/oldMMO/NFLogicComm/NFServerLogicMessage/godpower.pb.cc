// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: godpower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "godpower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* godpowergodpower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  godpowergodpower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_godpowergodpower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_godpowergodpower_reflection_ = NULL;
const ::google::protobuf::Descriptor* godpowerskillupdateattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  godpowerskillupdateattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* godpowerskillupdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  godpowerskillupdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_godpowerskillupdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_godpowerskillupdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_godpower_2eproto() {
  protobuf_AddDesc_godpower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "godpower.proto");
  GOOGLE_CHECK(file != NULL);
  godpowergodpower_descriptor_ = file->message_type(0);
  static const int godpowergodpower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowergodpower, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowergodpower, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowergodpower, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowergodpower, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowergodpower, unlock_),
  };
  godpowergodpower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      godpowergodpower_descriptor_,
      godpowergodpower::default_instance_,
      godpowergodpower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowergodpower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowergodpower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(godpowergodpower));
  Sheet_godpowergodpower_descriptor_ = file->message_type(1);
  static const int Sheet_godpowergodpower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godpowergodpower, godpowergodpower_list_),
  };
  Sheet_godpowergodpower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_godpowergodpower_descriptor_,
      Sheet_godpowergodpower::default_instance_,
      Sheet_godpowergodpower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godpowergodpower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godpowergodpower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_godpowergodpower));
  godpowerskillupdateattributeDesc_descriptor_ = file->message_type(2);
  static const int godpowerskillupdateattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdateattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdateattributeDesc, value_),
  };
  godpowerskillupdateattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      godpowerskillupdateattributeDesc_descriptor_,
      godpowerskillupdateattributeDesc::default_instance_,
      godpowerskillupdateattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdateattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdateattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(godpowerskillupdateattributeDesc));
  godpowerskillupdate_descriptor_ = file->message_type(3);
  static const int godpowerskillupdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, isbreak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, attribute_),
  };
  godpowerskillupdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      godpowerskillupdate_descriptor_,
      godpowerskillupdate::default_instance_,
      godpowerskillupdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(godpowerskillupdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(godpowerskillupdate));
  Sheet_godpowerskillupdate_descriptor_ = file->message_type(4);
  static const int Sheet_godpowerskillupdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godpowerskillupdate, godpowerskillupdate_list_),
  };
  Sheet_godpowerskillupdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_godpowerskillupdate_descriptor_,
      Sheet_godpowerskillupdate::default_instance_,
      Sheet_godpowerskillupdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godpowerskillupdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_godpowerskillupdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_godpowerskillupdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_godpower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    godpowergodpower_descriptor_, &godpowergodpower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_godpowergodpower_descriptor_, &Sheet_godpowergodpower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    godpowerskillupdateattributeDesc_descriptor_, &godpowerskillupdateattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    godpowerskillupdate_descriptor_, &godpowerskillupdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_godpowerskillupdate_descriptor_, &Sheet_godpowerskillupdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_godpower_2eproto() {
  delete godpowergodpower::default_instance_;
  delete godpowergodpower_reflection_;
  delete Sheet_godpowergodpower::default_instance_;
  delete Sheet_godpowergodpower_reflection_;
  delete godpowerskillupdateattributeDesc::default_instance_;
  delete godpowerskillupdateattributeDesc_reflection_;
  delete godpowerskillupdate::default_instance_;
  delete godpowerskillupdate_reflection_;
  delete Sheet_godpowerskillupdate::default_instance_;
  delete Sheet_godpowerskillupdate_reflection_;
}

void protobuf_AddDesc_godpower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016godpower.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"\241\001\n\020godpowergodpower\022\022\n\002id\030\001 \001"
    "(\005B\006\302\377\024\002ID\022\031\n\005boxid\030\002 \001(\003B\n\302\377\024\006\345\225\206\345\223\201\022\037\n"
    "\005price\030\003 \001(\005B\020\302\377\024\014\350\264\255\344\271\260\344\273\267\346\240\274\022\037\n\005times\030"
    "\004 \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\254\241\346\225\260\022\034\n\006unlock\030\005 \001(\005B"
    "\014\302\377\024\010\350\247\243\351\224\201ID\"Y\n\026Sheet_godpowergodpower\022"
    "\?\n\025godpowergodpower_List\030\001 \003(\0132\032.proto_f"
    "f.godpowergodpowerB\004\210\301\024\024\"P\n godpowerskil"
    "lupdateattributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002"
    "ID\022\026\n\005value\030\002 \001(\003B\007\302\377\024\003\345\200\274\"\342\002\n\023godpowers"
    "killupdate\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002ID\022\035\n\007tableI"
    "D\030\002 \001(\005B\014\302\377\024\010\346\240\207\347\255\276id\022\026\n\002lv\030\003 \001(\005B\n\302\377\024\006\347"
    "\255\211\347\272\247\022\037\n\006itemID\030\004 \001(\003B\017\302\377\024\013\346\266\210\350\200\227\347\211\251ID\022$"
    "\n\007itemNum\030\005 \001(\005B\023\302\377\024\017\346\266\210\350\200\227\347\211\251\346\225\260\351\207\217\022#\n\007"
    "skillID\030\006 \001(\003B\022\302\377\024\016\345\257\271\345\272\224\346\212\200\350\203\275ID\022!\n\007isB"
    "reak\030\007 \001(\005B\020\302\377\024\014\346\230\257\345\220\246\347\252\201\347\240\264\022\034\n\006unlock\030\010"
    " \001(\005B\014\302\377\024\010\350\247\243\351\224\201ID\022S\n\tattribute\030\t \003(\0132*."
    "proto_ff.godpowerskillupdateattributeDes"
    "cB\024\302\377\024\014\351\242\235\345\244\226\345\261\236\346\200\247\210\301\024\002\"c\n\031Sheet_godpowe"
    "rskillupdate\022F\n\030godpowerskillupdate_List"
    "\030\001 \003(\0132\035.proto_ff.godpowerskillupdateB\005\210"
    "\301\024\254\002", 844);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "godpower.proto", &protobuf_RegisterTypes);
  godpowergodpower::default_instance_ = new godpowergodpower();
  Sheet_godpowergodpower::default_instance_ = new Sheet_godpowergodpower();
  godpowerskillupdateattributeDesc::default_instance_ = new godpowerskillupdateattributeDesc();
  godpowerskillupdate::default_instance_ = new godpowerskillupdate();
  Sheet_godpowerskillupdate::default_instance_ = new Sheet_godpowerskillupdate();
  godpowergodpower::default_instance_->InitAsDefaultInstance();
  Sheet_godpowergodpower::default_instance_->InitAsDefaultInstance();
  godpowerskillupdateattributeDesc::default_instance_->InitAsDefaultInstance();
  godpowerskillupdate::default_instance_->InitAsDefaultInstance();
  Sheet_godpowerskillupdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_godpower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_godpower_2eproto {
  StaticDescriptorInitializer_godpower_2eproto() {
    protobuf_AddDesc_godpower_2eproto();
  }
} static_descriptor_initializer_godpower_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int godpowergodpower::kIdFieldNumber;
const int godpowergodpower::kBoxidFieldNumber;
const int godpowergodpower::kPriceFieldNumber;
const int godpowergodpower::kTimesFieldNumber;
const int godpowergodpower::kUnlockFieldNumber;
#endif  // !_MSC_VER

godpowergodpower::godpowergodpower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void godpowergodpower::InitAsDefaultInstance() {
}

godpowergodpower::godpowergodpower(const godpowergodpower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void godpowergodpower::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  price_ = 0;
  times_ = 0;
  unlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

godpowergodpower::~godpowergodpower() {
  SharedDtor();
}

void godpowergodpower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void godpowergodpower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* godpowergodpower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return godpowergodpower_descriptor_;
}

const godpowergodpower& godpowergodpower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godpower_2eproto();
  return *default_instance_;
}

godpowergodpower* godpowergodpower::default_instance_ = NULL;

godpowergodpower* godpowergodpower::New() const {
  return new godpowergodpower;
}

void godpowergodpower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
    price_ = 0;
    times_ = 0;
    unlock_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool godpowergodpower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // optional int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void godpowergodpower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 boxid = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->boxid(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // optional int32 unlock = 5;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* godpowergodpower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 boxid = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->boxid(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // optional int32 unlock = 5;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int godpowergodpower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 boxid = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 unlock = 5;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void godpowergodpower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const godpowergodpower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const godpowergodpower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void godpowergodpower::MergeFrom(const godpowergodpower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void godpowergodpower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void godpowergodpower::CopyFrom(const godpowergodpower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool godpowergodpower::IsInitialized() const {

  return true;
}

void godpowergodpower::Swap(godpowergodpower* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(boxid_, other->boxid_);
    std::swap(price_, other->price_);
    std::swap(times_, other->times_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata godpowergodpower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = godpowergodpower_descriptor_;
  metadata.reflection = godpowergodpower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_godpowergodpower::kGodpowergodpowerListFieldNumber;
#endif  // !_MSC_VER

Sheet_godpowergodpower::Sheet_godpowergodpower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_godpowergodpower::InitAsDefaultInstance() {
}

Sheet_godpowergodpower::Sheet_godpowergodpower(const Sheet_godpowergodpower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_godpowergodpower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_godpowergodpower::~Sheet_godpowergodpower() {
  SharedDtor();
}

void Sheet_godpowergodpower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_godpowergodpower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_godpowergodpower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_godpowergodpower_descriptor_;
}

const Sheet_godpowergodpower& Sheet_godpowergodpower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godpower_2eproto();
  return *default_instance_;
}

Sheet_godpowergodpower* Sheet_godpowergodpower::default_instance_ = NULL;

Sheet_godpowergodpower* Sheet_godpowergodpower::New() const {
  return new Sheet_godpowergodpower;
}

void Sheet_godpowergodpower::Clear() {
  godpowergodpower_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_godpowergodpower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.godpowergodpower godpowergodpower_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godpowergodpower_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godpowergodpower_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_godpowergodpower_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_godpowergodpower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.godpowergodpower godpowergodpower_List = 1;
  for (int i = 0; i < this->godpowergodpower_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->godpowergodpower_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_godpowergodpower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.godpowergodpower godpowergodpower_List = 1;
  for (int i = 0; i < this->godpowergodpower_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->godpowergodpower_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_godpowergodpower::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.godpowergodpower godpowergodpower_List = 1;
  total_size += 1 * this->godpowergodpower_list_size();
  for (int i = 0; i < this->godpowergodpower_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godpowergodpower_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_godpowergodpower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_godpowergodpower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_godpowergodpower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_godpowergodpower::MergeFrom(const Sheet_godpowergodpower& from) {
  GOOGLE_CHECK_NE(&from, this);
  godpowergodpower_list_.MergeFrom(from.godpowergodpower_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_godpowergodpower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_godpowergodpower::CopyFrom(const Sheet_godpowergodpower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_godpowergodpower::IsInitialized() const {

  return true;
}

void Sheet_godpowergodpower::Swap(Sheet_godpowergodpower* other) {
  if (other != this) {
    godpowergodpower_list_.Swap(&other->godpowergodpower_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_godpowergodpower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_godpowergodpower_descriptor_;
  metadata.reflection = Sheet_godpowergodpower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int godpowerskillupdateattributeDesc::kTypeFieldNumber;
const int godpowerskillupdateattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

godpowerskillupdateattributeDesc::godpowerskillupdateattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void godpowerskillupdateattributeDesc::InitAsDefaultInstance() {
}

godpowerskillupdateattributeDesc::godpowerskillupdateattributeDesc(const godpowerskillupdateattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void godpowerskillupdateattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

godpowerskillupdateattributeDesc::~godpowerskillupdateattributeDesc() {
  SharedDtor();
}

void godpowerskillupdateattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void godpowerskillupdateattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* godpowerskillupdateattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return godpowerskillupdateattributeDesc_descriptor_;
}

const godpowerskillupdateattributeDesc& godpowerskillupdateattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godpower_2eproto();
  return *default_instance_;
}

godpowerskillupdateattributeDesc* godpowerskillupdateattributeDesc::default_instance_ = NULL;

godpowerskillupdateattributeDesc* godpowerskillupdateattributeDesc::New() const {
  return new godpowerskillupdateattributeDesc;
}

void godpowerskillupdateattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool godpowerskillupdateattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void godpowerskillupdateattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* godpowerskillupdateattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int godpowerskillupdateattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void godpowerskillupdateattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const godpowerskillupdateattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const godpowerskillupdateattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void godpowerskillupdateattributeDesc::MergeFrom(const godpowerskillupdateattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void godpowerskillupdateattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void godpowerskillupdateattributeDesc::CopyFrom(const godpowerskillupdateattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool godpowerskillupdateattributeDesc::IsInitialized() const {

  return true;
}

void godpowerskillupdateattributeDesc::Swap(godpowerskillupdateattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata godpowerskillupdateattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = godpowerskillupdateattributeDesc_descriptor_;
  metadata.reflection = godpowerskillupdateattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int godpowerskillupdate::kIdFieldNumber;
const int godpowerskillupdate::kTableIDFieldNumber;
const int godpowerskillupdate::kLvFieldNumber;
const int godpowerskillupdate::kItemIDFieldNumber;
const int godpowerskillupdate::kItemNumFieldNumber;
const int godpowerskillupdate::kSkillIDFieldNumber;
const int godpowerskillupdate::kIsBreakFieldNumber;
const int godpowerskillupdate::kUnlockFieldNumber;
const int godpowerskillupdate::kAttributeFieldNumber;
#endif  // !_MSC_VER

godpowerskillupdate::godpowerskillupdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void godpowerskillupdate::InitAsDefaultInstance() {
}

godpowerskillupdate::godpowerskillupdate(const godpowerskillupdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void godpowerskillupdate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  tableid_ = 0;
  lv_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  isbreak_ = 0;
  unlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

godpowerskillupdate::~godpowerskillupdate() {
  SharedDtor();
}

void godpowerskillupdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void godpowerskillupdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* godpowerskillupdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return godpowerskillupdate_descriptor_;
}

const godpowerskillupdate& godpowerskillupdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godpower_2eproto();
  return *default_instance_;
}

godpowerskillupdate* godpowerskillupdate::default_instance_ = NULL;

godpowerskillupdate* godpowerskillupdate::New() const {
  return new godpowerskillupdate;
}

void godpowerskillupdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    tableid_ = 0;
    lv_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
    skillid_ = GOOGLE_LONGLONG(0);
    isbreak_ = 0;
    unlock_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool godpowerskillupdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableID;
        break;
      }

      // optional int32 tableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemID;
        break;
      }

      // optional int64 itemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skillID;
        break;
      }

      // optional int64 skillID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isBreak;
        break;
      }

      // optional int32 isBreak = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbreak_)));
          set_has_isbreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.godpowerskillupdateattributeDesc attribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void godpowerskillupdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 tableID = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int64 itemID = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->itemid(), output);
  }

  // optional int32 itemNum = 5;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemnum(), output);
  }

  // optional int64 skillID = 6;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->skillid(), output);
  }

  // optional int32 isBreak = 7;
  if (has_isbreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isbreak(), output);
  }

  // optional int32 unlock = 8;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->unlock(), output);
  }

  // repeated .proto_ff.godpowerskillupdateattributeDesc attribute = 9;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* godpowerskillupdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 tableID = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int64 itemID = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->itemid(), target);
  }

  // optional int32 itemNum = 5;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemnum(), target);
  }

  // optional int64 skillID = 6;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->skillid(), target);
  }

  // optional int32 isBreak = 7;
  if (has_isbreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isbreak(), target);
  }

  // optional int32 unlock = 8;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->unlock(), target);
  }

  // repeated .proto_ff.godpowerskillupdateattributeDesc attribute = 9;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int godpowerskillupdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 tableID = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 itemID = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 itemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int64 skillID = 6;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

    // optional int32 isBreak = 7;
    if (has_isbreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbreak());
    }

    // optional int32 unlock = 8;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

  }
  // repeated .proto_ff.godpowerskillupdateattributeDesc attribute = 9;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void godpowerskillupdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const godpowerskillupdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const godpowerskillupdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void godpowerskillupdate::MergeFrom(const godpowerskillupdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_isbreak()) {
      set_isbreak(from.isbreak());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void godpowerskillupdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void godpowerskillupdate::CopyFrom(const godpowerskillupdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool godpowerskillupdate::IsInitialized() const {

  return true;
}

void godpowerskillupdate::Swap(godpowerskillupdate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tableid_, other->tableid_);
    std::swap(lv_, other->lv_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(skillid_, other->skillid_);
    std::swap(isbreak_, other->isbreak_);
    std::swap(unlock_, other->unlock_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata godpowerskillupdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = godpowerskillupdate_descriptor_;
  metadata.reflection = godpowerskillupdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_godpowerskillupdate::kGodpowerskillupdateListFieldNumber;
#endif  // !_MSC_VER

Sheet_godpowerskillupdate::Sheet_godpowerskillupdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_godpowerskillupdate::InitAsDefaultInstance() {
}

Sheet_godpowerskillupdate::Sheet_godpowerskillupdate(const Sheet_godpowerskillupdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_godpowerskillupdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_godpowerskillupdate::~Sheet_godpowerskillupdate() {
  SharedDtor();
}

void Sheet_godpowerskillupdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_godpowerskillupdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_godpowerskillupdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_godpowerskillupdate_descriptor_;
}

const Sheet_godpowerskillupdate& Sheet_godpowerskillupdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godpower_2eproto();
  return *default_instance_;
}

Sheet_godpowerskillupdate* Sheet_godpowerskillupdate::default_instance_ = NULL;

Sheet_godpowerskillupdate* Sheet_godpowerskillupdate::New() const {
  return new Sheet_godpowerskillupdate;
}

void Sheet_godpowerskillupdate::Clear() {
  godpowerskillupdate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_godpowerskillupdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.godpowerskillupdate godpowerskillupdate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godpowerskillupdate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godpowerskillupdate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_godpowerskillupdate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_godpowerskillupdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.godpowerskillupdate godpowerskillupdate_List = 1;
  for (int i = 0; i < this->godpowerskillupdate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->godpowerskillupdate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_godpowerskillupdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.godpowerskillupdate godpowerskillupdate_List = 1;
  for (int i = 0; i < this->godpowerskillupdate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->godpowerskillupdate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_godpowerskillupdate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.godpowerskillupdate godpowerskillupdate_List = 1;
  total_size += 1 * this->godpowerskillupdate_list_size();
  for (int i = 0; i < this->godpowerskillupdate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godpowerskillupdate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_godpowerskillupdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_godpowerskillupdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_godpowerskillupdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_godpowerskillupdate::MergeFrom(const Sheet_godpowerskillupdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  godpowerskillupdate_list_.MergeFrom(from.godpowerskillupdate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_godpowerskillupdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_godpowerskillupdate::CopyFrom(const Sheet_godpowerskillupdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_godpowerskillupdate::IsInitialized() const {

  return true;
}

void Sheet_godpowerskillupdate::Swap(Sheet_godpowerskillupdate* other) {
  if (other != this) {
    godpowerskillupdate_list_.Swap(&other->godpowerskillupdate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_godpowerskillupdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_godpowerskillupdate_descriptor_;
  metadata.reflection = Sheet_godpowerskillupdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
