// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_TeamTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TeamTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TeamTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TeamTeam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_team_2eproto() {
  protobuf_AddDesc_team_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "team.proto");
  GOOGLE_CHECK(file != NULL);
  E_TeamTeam_descriptor_ = file->message_type(0);
  static const int E_TeamTeam_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_teamobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_fobjectnameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_sobjectnameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_duplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_lowlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_uplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_isautomatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_speakchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, m_teamnumber_),
  };
  E_TeamTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TeamTeam_descriptor_,
      E_TeamTeam::default_instance_,
      E_TeamTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TeamTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TeamTeam));
  Sheet_TeamTeam_descriptor_ = file->message_type(1);
  static const int Sheet_TeamTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TeamTeam, e_teamteam_list_),
  };
  Sheet_TeamTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TeamTeam_descriptor_,
      Sheet_TeamTeam::default_instance_,
      Sheet_TeamTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TeamTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TeamTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TeamTeam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_team_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TeamTeam_descriptor_, &E_TeamTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TeamTeam_descriptor_, &Sheet_TeamTeam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_team_2eproto() {
  delete E_TeamTeam::default_instance_;
  delete E_TeamTeam_reflection_;
  delete Sheet_TeamTeam::default_instance_;
  delete Sheet_TeamTeam_reflection_;
}

void protobuf_AddDesc_team_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nteam.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\241\003\n\nE_TeamTeam\022*\n\016m_teamobjectid\030\001"
    " \001(\005B\022\302\377\024\016\347\273\204\351\230\237\347\233\256\346\240\207ID\022.\n\017m_fobjectnam"
    "eid\030\002 \001(\005B\025\302\377\024\021\347\210\266\347\233\256\346\240\207\345\220\215\347\247\260ID\022.\n\017m_so"
    "bjectnameid\030\003 \001(\005B\025\302\377\024\021\345\255\220\347\233\256\346\240\207\345\220\215\347\247\260ID"
    "\022#\n\rm_duplicateid\030\004 \001(\003B\014\302\377\024\010\345\211\257\346\234\254ID\022\"\n"
    "\014m_activityid\030\005 \001(\003B\014\302\377\024\010\346\264\273\345\212\250ID\022!\n\007m_l"
    "owlv\030\006 \001(\005B\020\302\377\024\014\344\270\213\351\231\220\347\255\211\347\272\247\022 \n\006m_uplv\030\007"
    " \001(\005B\020\302\377\024\014\344\270\212\351\231\220\347\255\211\347\272\247\022-\n\rm_isautomatch\030"
    "\010 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\350\207\252\345\212\250\345\214\271\351\205\215\022(\n\016m_speak"
    "channel\030\t \001(\005B\020\302\377\024\014\345\226\212\350\257\235\351\242\221\351\201\223\022 \n\014m_tea"
    "mnumber\030\n \001(\005B\n\302\377\024\006\345\272\217\345\210\227\"E\n\016Sheet_TeamT"
    "eam\0223\n\017E_TeamTeam_List\030\001 \003(\0132\024.proto_ff."
    "E_TeamTeamB\004\210\301\024\024", 536);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "team.proto", &protobuf_RegisterTypes);
  E_TeamTeam::default_instance_ = new E_TeamTeam();
  Sheet_TeamTeam::default_instance_ = new Sheet_TeamTeam();
  E_TeamTeam::default_instance_->InitAsDefaultInstance();
  Sheet_TeamTeam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_team_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_team_2eproto {
  StaticDescriptorInitializer_team_2eproto() {
    protobuf_AddDesc_team_2eproto();
  }
} static_descriptor_initializer_team_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_TeamTeam::kMTeamobjectidFieldNumber;
const int E_TeamTeam::kMFobjectnameidFieldNumber;
const int E_TeamTeam::kMSobjectnameidFieldNumber;
const int E_TeamTeam::kMDuplicateidFieldNumber;
const int E_TeamTeam::kMActivityidFieldNumber;
const int E_TeamTeam::kMLowlvFieldNumber;
const int E_TeamTeam::kMUplvFieldNumber;
const int E_TeamTeam::kMIsautomatchFieldNumber;
const int E_TeamTeam::kMSpeakchannelFieldNumber;
const int E_TeamTeam::kMTeamnumberFieldNumber;
#endif  // !_MSC_VER

E_TeamTeam::E_TeamTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TeamTeam::InitAsDefaultInstance() {
}

E_TeamTeam::E_TeamTeam(const E_TeamTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TeamTeam::SharedCtor() {
  _cached_size_ = 0;
  m_teamobjectid_ = 0;
  m_fobjectnameid_ = 0;
  m_sobjectnameid_ = 0;
  m_duplicateid_ = GOOGLE_LONGLONG(0);
  m_activityid_ = GOOGLE_LONGLONG(0);
  m_lowlv_ = 0;
  m_uplv_ = 0;
  m_isautomatch_ = 0;
  m_speakchannel_ = 0;
  m_teamnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TeamTeam::~E_TeamTeam() {
  SharedDtor();
}

void E_TeamTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_TeamTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TeamTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TeamTeam_descriptor_;
}

const E_TeamTeam& E_TeamTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

E_TeamTeam* E_TeamTeam::default_instance_ = NULL;

E_TeamTeam* E_TeamTeam::New() const {
  return new E_TeamTeam;
}

void E_TeamTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_teamobjectid_ = 0;
    m_fobjectnameid_ = 0;
    m_sobjectnameid_ = 0;
    m_duplicateid_ = GOOGLE_LONGLONG(0);
    m_activityid_ = GOOGLE_LONGLONG(0);
    m_lowlv_ = 0;
    m_uplv_ = 0;
    m_isautomatch_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_speakchannel_ = 0;
    m_teamnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TeamTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_teamobjectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamobjectid_)));
          set_has_m_teamobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fobjectnameid;
        break;
      }

      // optional int32 m_fobjectnameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fobjectnameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fobjectnameid_)));
          set_has_m_fobjectnameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_sobjectnameid;
        break;
      }

      // optional int32 m_sobjectnameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sobjectnameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sobjectnameid_)));
          set_has_m_sobjectnameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_duplicateid;
        break;
      }

      // optional int64 m_duplicateid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_duplicateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_duplicateid_)));
          set_has_m_duplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_activityid;
        break;
      }

      // optional int64 m_activityid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_activityid_)));
          set_has_m_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lowlv;
        break;
      }

      // optional int32 m_lowlv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lowlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lowlv_)));
          set_has_m_lowlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_uplv;
        break;
      }

      // optional int32 m_uplv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplv_)));
          set_has_m_uplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_isautomatch;
        break;
      }

      // optional int32 m_isautomatch = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isautomatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isautomatch_)));
          set_has_m_isautomatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_speakchannel;
        break;
      }

      // optional int32 m_speakchannel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_speakchannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_speakchannel_)));
          set_has_m_speakchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_teamnumber;
        break;
      }

      // optional int32 m_teamnumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_teamnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamnumber_)));
          set_has_m_teamnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TeamTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_teamobjectid = 1;
  if (has_m_teamobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_teamobjectid(), output);
  }

  // optional int32 m_fobjectnameid = 2;
  if (has_m_fobjectnameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fobjectnameid(), output);
  }

  // optional int32 m_sobjectnameid = 3;
  if (has_m_sobjectnameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_sobjectnameid(), output);
  }

  // optional int64 m_duplicateid = 4;
  if (has_m_duplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_duplicateid(), output);
  }

  // optional int64 m_activityid = 5;
  if (has_m_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_activityid(), output);
  }

  // optional int32 m_lowlv = 6;
  if (has_m_lowlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lowlv(), output);
  }

  // optional int32 m_uplv = 7;
  if (has_m_uplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_uplv(), output);
  }

  // optional int32 m_isautomatch = 8;
  if (has_m_isautomatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_isautomatch(), output);
  }

  // optional int32 m_speakchannel = 9;
  if (has_m_speakchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_speakchannel(), output);
  }

  // optional int32 m_teamnumber = 10;
  if (has_m_teamnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_teamnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TeamTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_teamobjectid = 1;
  if (has_m_teamobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_teamobjectid(), target);
  }

  // optional int32 m_fobjectnameid = 2;
  if (has_m_fobjectnameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fobjectnameid(), target);
  }

  // optional int32 m_sobjectnameid = 3;
  if (has_m_sobjectnameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_sobjectnameid(), target);
  }

  // optional int64 m_duplicateid = 4;
  if (has_m_duplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_duplicateid(), target);
  }

  // optional int64 m_activityid = 5;
  if (has_m_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_activityid(), target);
  }

  // optional int32 m_lowlv = 6;
  if (has_m_lowlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lowlv(), target);
  }

  // optional int32 m_uplv = 7;
  if (has_m_uplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_uplv(), target);
  }

  // optional int32 m_isautomatch = 8;
  if (has_m_isautomatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_isautomatch(), target);
  }

  // optional int32 m_speakchannel = 9;
  if (has_m_speakchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_speakchannel(), target);
  }

  // optional int32 m_teamnumber = 10;
  if (has_m_teamnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_teamnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TeamTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_teamobjectid = 1;
    if (has_m_teamobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamobjectid());
    }

    // optional int32 m_fobjectnameid = 2;
    if (has_m_fobjectnameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fobjectnameid());
    }

    // optional int32 m_sobjectnameid = 3;
    if (has_m_sobjectnameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sobjectnameid());
    }

    // optional int64 m_duplicateid = 4;
    if (has_m_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_duplicateid());
    }

    // optional int64 m_activityid = 5;
    if (has_m_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_activityid());
    }

    // optional int32 m_lowlv = 6;
    if (has_m_lowlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lowlv());
    }

    // optional int32 m_uplv = 7;
    if (has_m_uplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplv());
    }

    // optional int32 m_isautomatch = 8;
    if (has_m_isautomatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isautomatch());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_speakchannel = 9;
    if (has_m_speakchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_speakchannel());
    }

    // optional int32 m_teamnumber = 10;
    if (has_m_teamnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TeamTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TeamTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TeamTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TeamTeam::MergeFrom(const E_TeamTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_teamobjectid()) {
      set_m_teamobjectid(from.m_teamobjectid());
    }
    if (from.has_m_fobjectnameid()) {
      set_m_fobjectnameid(from.m_fobjectnameid());
    }
    if (from.has_m_sobjectnameid()) {
      set_m_sobjectnameid(from.m_sobjectnameid());
    }
    if (from.has_m_duplicateid()) {
      set_m_duplicateid(from.m_duplicateid());
    }
    if (from.has_m_activityid()) {
      set_m_activityid(from.m_activityid());
    }
    if (from.has_m_lowlv()) {
      set_m_lowlv(from.m_lowlv());
    }
    if (from.has_m_uplv()) {
      set_m_uplv(from.m_uplv());
    }
    if (from.has_m_isautomatch()) {
      set_m_isautomatch(from.m_isautomatch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_speakchannel()) {
      set_m_speakchannel(from.m_speakchannel());
    }
    if (from.has_m_teamnumber()) {
      set_m_teamnumber(from.m_teamnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TeamTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TeamTeam::CopyFrom(const E_TeamTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TeamTeam::IsInitialized() const {

  return true;
}

void E_TeamTeam::Swap(E_TeamTeam* other) {
  if (other != this) {
    std::swap(m_teamobjectid_, other->m_teamobjectid_);
    std::swap(m_fobjectnameid_, other->m_fobjectnameid_);
    std::swap(m_sobjectnameid_, other->m_sobjectnameid_);
    std::swap(m_duplicateid_, other->m_duplicateid_);
    std::swap(m_activityid_, other->m_activityid_);
    std::swap(m_lowlv_, other->m_lowlv_);
    std::swap(m_uplv_, other->m_uplv_);
    std::swap(m_isautomatch_, other->m_isautomatch_);
    std::swap(m_speakchannel_, other->m_speakchannel_);
    std::swap(m_teamnumber_, other->m_teamnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TeamTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TeamTeam_descriptor_;
  metadata.reflection = E_TeamTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TeamTeam::kETeamTeamListFieldNumber;
#endif  // !_MSC_VER

Sheet_TeamTeam::Sheet_TeamTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TeamTeam::InitAsDefaultInstance() {
}

Sheet_TeamTeam::Sheet_TeamTeam(const Sheet_TeamTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TeamTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TeamTeam::~Sheet_TeamTeam() {
  SharedDtor();
}

void Sheet_TeamTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TeamTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TeamTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TeamTeam_descriptor_;
}

const Sheet_TeamTeam& Sheet_TeamTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Sheet_TeamTeam* Sheet_TeamTeam::default_instance_ = NULL;

Sheet_TeamTeam* Sheet_TeamTeam::New() const {
  return new Sheet_TeamTeam;
}

void Sheet_TeamTeam::Clear() {
  e_teamteam_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TeamTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TeamTeam E_TeamTeam_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TeamTeam_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_teamteam_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TeamTeam_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TeamTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TeamTeam E_TeamTeam_List = 1;
  for (int i = 0; i < this->e_teamteam_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_teamteam_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TeamTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TeamTeam E_TeamTeam_List = 1;
  for (int i = 0; i < this->e_teamteam_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_teamteam_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TeamTeam::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TeamTeam E_TeamTeam_List = 1;
  total_size += 1 * this->e_teamteam_list_size();
  for (int i = 0; i < this->e_teamteam_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_teamteam_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TeamTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TeamTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TeamTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TeamTeam::MergeFrom(const Sheet_TeamTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_teamteam_list_.MergeFrom(from.e_teamteam_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TeamTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TeamTeam::CopyFrom(const Sheet_TeamTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TeamTeam::IsInitialized() const {

  return true;
}

void Sheet_TeamTeam::Swap(Sheet_TeamTeam* other) {
  if (other != this) {
    e_teamteam_list_.Swap(&other->e_teamteam_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TeamTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TeamTeam_descriptor_;
  metadata.reflection = Sheet_TeamTeam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
