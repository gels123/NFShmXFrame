// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_logic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common_logic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* PacketMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerPacketMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerPacketMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldExternalConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldExternalConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharFacadeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharFacadeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharTrimProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharTrimProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceDupProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceDupProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharMultTrimProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharMultTrimProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr64_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrEx64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrEx64_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldItemAttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldItemAttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryEquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryEquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComposeSingleCostProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComposeSingleCostProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComposeCostProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComposeCostProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* blustarAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blustarAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemProtoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemProtoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBPackageBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBPackageBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBPackageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBPackageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMissionItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMissionItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMissionTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMissionTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDyMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDyMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBRecentSubmitMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBRecentSubmitMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSkillItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSkillItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBAttrDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBAttrDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBExtendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBExtendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSlotProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSlotProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplicateSingleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateSingleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplicateGroupProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateGroupProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplicateLadderExProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateLadderExProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupHistoryExpProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupHistoryExpProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupUnionBossDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupUnionBossDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupPalaceFetchDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupPalaceFetchDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupPalaceMultFetchDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupPalaceMultFetchDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupUnionPalaceDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupUnionPalaceDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDuplicateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDuplicateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleAchievementDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleAchievementDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupAchievementDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupAchievementDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterAchievementDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterAchievementDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectParamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectParamProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultEffectParamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultEffectParamProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterBuffData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterBuffData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterArenaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterArenaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterTitleSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterTitleSaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSingleOperateLimitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSingleOperateLimitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBOperateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBOperateProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBOperateMutProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBOperateMutProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBOperateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBOperateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBOperateLimitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBOperateLimitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSingleHuoYueDuInfoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSingleHuoYueDuInfoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBHuoYueDuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBHuoYueDuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndultTaskEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndultTaskEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndultTaskGroupEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndultTaskGroupEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColPointsTaskEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColPointsTaskEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColPointsTaskGroupEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColPointsTaskGroupEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColPointsTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColPointsTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareDailySignInDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareDailySignInDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareLoginGiftDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareLoginGiftDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareLevelGiftDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareLevelGiftDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommodityEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommodityEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitShopGroupEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitShopGroupEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitTaskEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitTaskEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitTaskGroupEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitTaskGroupEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WishDBTypeEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WishDBTypeEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* WishDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WishDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalInvestDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalInvestDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalExchangeDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalExchangeDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalLoginDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalLoginDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalTotalRechargeDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalTotalRechargeDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalConsumptionDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalConsumptionDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalKillBossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalKillBossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalZhiChongData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalZhiChongData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalPreRechargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalPreRechargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalSuperDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalSuperDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalSuperDoubleDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalSuperDoubleDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalHuoYueDuDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalHuoYueDuDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalFirstRechargeDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalFirstRechargeDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalYanHuaDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalYanHuaDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalBigYanHuaDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalBigYanHuaDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalShopDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalShopDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitGiftDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitGiftDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitGiftActiveDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitGiftActiveDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FRechargeDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FRechargeDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FRechargeActiveDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FRechargeActiveDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FSmashEggDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FSmashEggDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalSmashEggDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalSmashEggDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateDailyRechargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateDailyRechargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateMoonCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateMoonCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateFundData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateFundData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateFirstRechargeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateFirstRechargeType_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateFirstRechargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateFirstRechargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareVipGiftDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareVipGiftDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HoroscopeJackpotDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HoroscopeJackpotDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HoroscopeActiveDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HoroscopeActiveDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WelfareOnlineGiftDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WelfareOnlineGiftDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationTurntableTaskDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationTurntableTaskDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationTurntableDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationTurntableDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationTutoraskDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationTutoraskDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationTutorDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationTutorDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* limitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  limitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalWorldBossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalWorldBossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateCommonEntryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateCommonEntryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateWingGiftData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateWingGiftData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateRechargeGiftData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateRechargeGiftData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBOperateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBOperateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerActiveAnswerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerActiveAnswerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBActiveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBActiveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayCountDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayCountDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineRetDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineRetDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterPayData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterPayData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmblemSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmblemSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBEmblemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBEmblemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBIdentifyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBIdentifyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElementInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElementInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBElementData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBElementData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBFashionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBFashionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBWingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBWingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBPartnerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBPartnerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBossDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBossDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBBossAttentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBBossAttentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBBossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBBossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBPvpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBPvpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBTreasureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBTreasureData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBArtifactData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBArtifactData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBFateStarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBFateStarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBConvoyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBConvoyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDailyEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDailyEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDailyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDailyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldCylstalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldCylstalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldExInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldExInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBFieldData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBFieldData_reflection_ = NULL;
const ::google::protobuf::Descriptor* vipGiftDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vipGiftDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipTCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipTCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipTCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipTCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBVipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBVipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMallData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMallData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodhoodSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodhoodSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBGodhoodData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBGodhoodData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoveryCompleteDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoveryCompleteDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoveryDBReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoveryDBReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoveryDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoveryDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBRecoveryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBRecoveryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBActivityScuffleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBActivityScuffleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBActivityChaosDragonsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBActivityChaosDragonsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBActivityAsharmData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBActivityAsharmData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBCombatTeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBCombatTeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSoloData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSoloData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBAtBoxData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBAtBoxData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharDBAncientShopProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharDBAncientShopProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharDBAncientShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharDBAncientShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBAncientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBAncientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChooseGiftData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChooseGiftData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SOAcitveTotalRechargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SOAcitveTotalRechargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SOAcitveAdvanceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SOAcitveAdvanceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SOAcitveGoodsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SOAcitveGoodsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSOAcitveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSOAcitveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBUseItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBUseItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDayUseItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDayUseItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysteryShopDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysteryShopDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMysteryShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMysteryShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBPackageTestRebateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBPackageTestRebateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuncFightDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuncFightDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerInfoDBList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerInfoDBList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupationTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupationTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupationTakeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupationTakeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComStarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComStarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBHeadSetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBHeadSetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBOnlineGiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBOnlineGiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBOnlineGiftData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBOnlineGiftData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharDropItemDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharDropItemDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharDropMultItemDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharDropMultItemDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharDropLimitDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharDropLimitDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBGmHelpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBGmHelpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToolsDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToolsDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBGodGMData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBGodGMData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BowlDBRewardProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BowlDBRewardProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BowlDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BowlDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HidePeriodDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HidePeriodDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBHideData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBHideData_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSimpleInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_5flogic_2eproto() {
  protobuf_AddDesc_common_5flogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common_logic.proto");
  GOOGLE_CHECK(file != NULL);
  PacketMsg_descriptor_ = file->message_type(0);
  static const int PacketMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, upper_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, min_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, control_time_),
  };
  PacketMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PacketMsg_descriptor_,
      PacketMsg::default_instance_,
      PacketMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PacketMsg));
  ServerPacketMsg_descriptor_ = file->message_type(1);
  static const int ServerPacketMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPacketMsg, packetmsg_),
  };
  ServerPacketMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerPacketMsg_descriptor_,
      ServerPacketMsg::default_instance_,
      ServerPacketMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPacketMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPacketMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerPacketMsg));
  WorldExternalConfig_descriptor_ = file->message_type(2);
  static const int WorldExternalConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, tokentimecheck_),
  };
  WorldExternalConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldExternalConfig_descriptor_,
      WorldExternalConfig::default_instance_,
      WorldExternalConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldExternalConfig));
  CharFacadeProto_descriptor_ = file->message_type(3);
  static const int CharFacadeProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, cur_mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, wing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, fashion_clothes_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, fashion_weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, occupationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, treasure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, treasure_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, artifact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, cur_select_mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, bubble_id_),
  };
  CharFacadeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharFacadeProto_descriptor_,
      CharFacadeProto::default_instance_,
      CharFacadeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharFacadeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharFacadeProto));
  CharTrimProto_descriptor_ = file->message_type(4);
  static const int CharTrimProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharTrimProto, trim_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharTrimProto, trim_level_),
  };
  CharTrimProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharTrimProto_descriptor_,
      CharTrimProto::default_instance_,
      CharTrimProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharTrimProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharTrimProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharTrimProto));
  ForceDupProto_descriptor_ = file->message_type(5);
  static const int ForceDupProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceDupProto, treasure_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceDupProto, ladder_state_),
  };
  ForceDupProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceDupProto_descriptor_,
      ForceDupProto::default_instance_,
      ForceDupProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceDupProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceDupProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceDupProto));
  CharMultTrimProto_descriptor_ = file->message_type(6);
  static const int CharMultTrimProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMultTrimProto, trim_lst_),
  };
  CharMultTrimProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharMultTrimProto_descriptor_,
      CharMultTrimProto::default_instance_,
      CharMultTrimProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMultTrimProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMultTrimProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharMultTrimProto));
  CharacterDBBaseInfo_descriptor_ = file->message_type(7);
  static const int CharacterDBBaseInfo_offsets_[72] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastsavetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, logouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enter_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enter_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enterposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enterposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enterposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastrevivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, clx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, cly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, clz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, aptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, arenacoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, staressence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, starexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, starfragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, hanguptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, active_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, godhoodexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, smallspirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, bigspirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, trim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, finish_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, usetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, subpack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, subpack_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, rechargediscountdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, friendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, solo_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, solo_prv_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, dragons_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, total_login_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, login_day_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, login_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, vipcarddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, holydia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, relive_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, last_relive_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, dead_static_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, dead_static_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, dead_static_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, fushi_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, starstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, voucher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, waiguan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, gmpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, gmpoint_limit_),
  };
  CharacterDBBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBBaseInfo_descriptor_,
      CharacterDBBaseInfo::default_instance_,
      CharacterDBBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBBaseInfo));
  Attr_descriptor_ = file->message_type(8);
  static const int Attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, attrnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, attrvalue_),
  };
  Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr_descriptor_,
      Attr::default_instance_,
      Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr));
  Attr64_descriptor_ = file->message_type(9);
  static const int Attr64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, attrnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, attrvalue_),
  };
  Attr64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr64_descriptor_,
      Attr64::default_instance_,
      Attr64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr64));
  AttrEx64_descriptor_ = file->message_type(10);
  static const int AttrEx64_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrEx64, attrnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrEx64, attrvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrEx64, attrindex_),
  };
  AttrEx64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrEx64_descriptor_,
      AttrEx64::default_instance_,
      AttrEx64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrEx64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrEx64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrEx64));
  FieldItemAttrInfo_descriptor_ = file->message_type(11);
  static const int FieldItemAttrInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldItemAttrInfo, base_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldItemAttrInfo, star_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldItemAttrInfo, blue_star_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldItemAttrInfo, refine_level_),
  };
  FieldItemAttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldItemAttrInfo_descriptor_,
      FieldItemAttrInfo::default_instance_,
      FieldItemAttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldItemAttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldItemAttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldItemAttrInfo));
  MarryEquipInfo_descriptor_ = file->message_type(12);
  static const int MarryEquipInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryEquipInfo, strong_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryEquipInfo, strong_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryEquipInfo, stage_lv_),
  };
  MarryEquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryEquipInfo_descriptor_,
      MarryEquipInfo::default_instance_,
      MarryEquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryEquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryEquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryEquipInfo));
  ComposeSingleCostProto_descriptor_ = file->message_type(13);
  static const int ComposeSingleCostProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeSingleCostProto, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeSingleCostProto, bind_),
  };
  ComposeSingleCostProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComposeSingleCostProto_descriptor_,
      ComposeSingleCostProto::default_instance_,
      ComposeSingleCostProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeSingleCostProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeSingleCostProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComposeSingleCostProto));
  ComposeCostProto_descriptor_ = file->message_type(14);
  static const int ComposeCostProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeCostProto, info_),
  };
  ComposeCostProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComposeCostProto_descriptor_,
      ComposeCostProto::default_instance_,
      ComposeCostProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeCostProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeCostProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComposeCostProto));
  blustarAttr_descriptor_ = file->message_type(15);
  static const int blustarAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blustarAttr, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blustarAttr, levelinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blustarAttr, attrvalue_),
  };
  blustarAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blustarAttr_descriptor_,
      blustarAttr::default_instance_,
      blustarAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blustarAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blustarAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blustarAttr));
  ItemProtoInfo_descriptor_ = file->message_type(16);
  static const int ItemProtoInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, baseattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, refineex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, con_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, field_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, marry_equip_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, compose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, out_time_),
  };
  ItemProtoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemProtoInfo_descriptor_,
      ItemProtoInfo::default_instance_,
      ItemProtoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemProtoInfo));
  CharacterDBPackageBag_descriptor_ = file->message_type(17);
  static const int CharacterDBPackageBag_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageBag, package_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageBag, expand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageBag, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageBag, offset_),
  };
  CharacterDBPackageBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBPackageBag_descriptor_,
      CharacterDBPackageBag::default_instance_,
      CharacterDBPackageBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBPackageBag));
  CharacterDBPackageData_descriptor_ = file->message_type(18);
  static const int CharacterDBPackageData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, bags_),
  };
  CharacterDBPackageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBPackageData_descriptor_,
      CharacterDBPackageData::default_instance_,
      CharacterDBPackageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBPackageData));
  CharacterDBMissionItemInfo_descriptor_ = file->message_type(19);
  static const int CharacterDBMissionItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, currentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, finalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, completedflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma3_),
  };
  CharacterDBMissionItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMissionItemInfo_descriptor_,
      CharacterDBMissionItemInfo::default_instance_,
      CharacterDBMissionItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMissionItemInfo));
  CharacterDBMissionTrack_descriptor_ = file->message_type(20);
  static const int CharacterDBMissionTrack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, dynamicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, acceptmissiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, textid_),
  };
  CharacterDBMissionTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMissionTrack_descriptor_,
      CharacterDBMissionTrack::default_instance_,
      CharacterDBMissionTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMissionTrack));
  CharacterDBDyMissionInfo_descriptor_ = file->message_type(21);
  static const int CharacterDBDyMissionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, lastfresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, accept_num_),
  };
  CharacterDBDyMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDyMissionInfo_descriptor_,
      CharacterDBDyMissionInfo::default_instance_,
      CharacterDBDyMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDyMissionInfo));
  CharacterDBRecentSubmitMission_descriptor_ = file->message_type(22);
  static const int CharacterDBRecentSubmitMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, mission_id_),
  };
  CharacterDBRecentSubmitMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBRecentSubmitMission_descriptor_,
      CharacterDBRecentSubmitMission::default_instance_,
      CharacterDBRecentSubmitMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBRecentSubmitMission));
  CharacterDBTaskData_descriptor_ = file->message_type(23);
  static const int CharacterDBTaskData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, missiontrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, dyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, already_submit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, recent_submit_),
  };
  CharacterDBTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBTaskData_descriptor_,
      CharacterDBTaskData::default_instance_,
      CharacterDBTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBTaskData));
  CharacterDBSkillItem_descriptor_ = file->message_type(24);
  static const int CharacterDBSkillItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, replace_skillid_),
  };
  CharacterDBSkillItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSkillItem_descriptor_,
      CharacterDBSkillItem::default_instance_,
      CharacterDBSkillItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSkillItem));
  CharacterDBSkillData_descriptor_ = file->message_type(25);
  static const int CharacterDBSkillData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, skillattrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, skillslot_),
  };
  CharacterDBSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSkillData_descriptor_,
      CharacterDBSkillData::default_instance_,
      CharacterDBSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSkillData));
  CharacterDBAttrDetailInfo_descriptor_ = file->message_type(26);
  static const int CharacterDBAttrDetailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, cur_pos_),
  };
  CharacterDBAttrDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBAttrDetailInfo_descriptor_,
      CharacterDBAttrDetailInfo::default_instance_,
      CharacterDBAttrDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBAttrDetailInfo));
  CharacterDBExtendData_descriptor_ = file->message_type(27);
  static const int CharacterDBExtendData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBExtendData, attr_detail_),
  };
  CharacterDBExtendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBExtendData_descriptor_,
      CharacterDBExtendData::default_instance_,
      CharacterDBExtendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBExtendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBExtendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBExtendData));
  EquipSlotProto_descriptor_ = file->message_type(28);
  static const int EquipSlotProto_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, strenlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, inlay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, strenexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, refineexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, strenattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, refinepecent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, scrutinytrepanningnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, scrutinyattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, clearstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, clearcombat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, suitlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, suit_record_max_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, awaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, enchantinglv_),
  };
  EquipSlotProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSlotProto_descriptor_,
      EquipSlotProto::default_instance_,
      EquipSlotProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSlotProto));
  CharacterDBEquipData_descriptor_ = file->message_type(29);
  static const int CharacterDBEquipData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEquipData, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEquipData, equip_slot_),
  };
  CharacterDBEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBEquipData_descriptor_,
      CharacterDBEquipData::default_instance_,
      CharacterDBEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBEquipData));
  DuplicateSingleProto_descriptor_ = file->message_type(30);
  static const int DuplicateSingleProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, cur_layer_),
  };
  DuplicateSingleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplicateSingleProto_descriptor_,
      DuplicateSingleProto::default_instance_,
      DuplicateSingleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplicateSingleProto));
  DuplicateGroupProto_descriptor_ = file->message_type(31);
  static const int DuplicateGroupProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateGroupProto, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateGroupProto, enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateGroupProto, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateGroupProto, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateGroupProto, last_fresh_),
  };
  DuplicateGroupProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplicateGroupProto_descriptor_,
      DuplicateGroupProto::default_instance_,
      DuplicateGroupProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateGroupProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateGroupProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplicateGroupProto));
  DuplicateLadderExProto_descriptor_ = file->message_type(32);
  static const int DuplicateLadderExProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateLadderExProto, cur_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateLadderExProto, last_mail_time_),
  };
  DuplicateLadderExProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplicateLadderExProto_descriptor_,
      DuplicateLadderExProto::default_instance_,
      DuplicateLadderExProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateLadderExProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateLadderExProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplicateLadderExProto));
  DupHistoryExpProto_descriptor_ = file->message_type(33);
  static const int DupHistoryExpProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupHistoryExpProto, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupHistoryExpProto, exp_),
  };
  DupHistoryExpProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupHistoryExpProto_descriptor_,
      DupHistoryExpProto::default_instance_,
      DupHistoryExpProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupHistoryExpProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupHistoryExpProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupHistoryExpProto));
  DupUnionBossDBProto_descriptor_ = file->message_type(34);
  static const int DupUnionBossDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionBossDBProto, mutex_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionBossDBProto, last_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionBossDBProto, last_fail_),
  };
  DupUnionBossDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupUnionBossDBProto_descriptor_,
      DupUnionBossDBProto::default_instance_,
      DupUnionBossDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionBossDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionBossDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupUnionBossDBProto));
  DupPalaceFetchDBProto_descriptor_ = file->message_type(35);
  static const int DupPalaceFetchDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupPalaceFetchDBProto, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupPalaceFetchDBProto, pass_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupPalaceFetchDBProto, num_lst_),
  };
  DupPalaceFetchDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupPalaceFetchDBProto_descriptor_,
      DupPalaceFetchDBProto::default_instance_,
      DupPalaceFetchDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupPalaceFetchDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupPalaceFetchDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupPalaceFetchDBProto));
  DupPalaceMultFetchDBProto_descriptor_ = file->message_type(36);
  static const int DupPalaceMultFetchDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupPalaceMultFetchDBProto, fetch_progress_),
  };
  DupPalaceMultFetchDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupPalaceMultFetchDBProto_descriptor_,
      DupPalaceMultFetchDBProto::default_instance_,
      DupPalaceMultFetchDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupPalaceMultFetchDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupPalaceMultFetchDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupPalaceMultFetchDBProto));
  DupUnionPalaceDBProto_descriptor_ = file->message_type(37);
  static const int DupUnionPalaceDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionPalaceDBProto, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionPalaceDBProto, fetched_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionPalaceDBProto, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionPalaceDBProto, break_count_),
  };
  DupUnionPalaceDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupUnionPalaceDBProto_descriptor_,
      DupUnionPalaceDBProto::default_instance_,
      DupUnionPalaceDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionPalaceDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupUnionPalaceDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupUnionPalaceDBProto));
  CharacterDBDuplicateData_descriptor_ = file->message_type(38);
  static const int CharacterDBDuplicateData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, duplicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, open_dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, ladder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, dup_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, union_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, palace_),
  };
  CharacterDBDuplicateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDuplicateData_descriptor_,
      CharacterDBDuplicateData::default_instance_,
      CharacterDBDuplicateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDuplicateData));
  SingleAchievementDBData_descriptor_ = file->message_type(39);
  static const int SingleAchievementDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, completecount_),
  };
  SingleAchievementDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleAchievementDBData_descriptor_,
      SingleAchievementDBData::default_instance_,
      SingleAchievementDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleAchievementDBData));
  GroupAchievementDBData_descriptor_ = file->message_type(40);
  static const int GroupAchievementDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, sorttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, achievementinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, achievementreward_),
  };
  GroupAchievementDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupAchievementDBData_descriptor_,
      GroupAchievementDBData::default_instance_,
      GroupAchievementDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupAchievementDBData));
  CharacterAchievementDBData_descriptor_ = file->message_type(41);
  static const int CharacterAchievementDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAchievementDBData, groupachievementdata_),
  };
  CharacterAchievementDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterAchievementDBData_descriptor_,
      CharacterAchievementDBData::default_instance_,
      CharacterAchievementDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAchievementDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAchievementDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterAchievementDBData));
  EffectParamProto_descriptor_ = file->message_type(42);
  static const int EffectParamProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectParamProto, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectParamProto, param2_),
  };
  EffectParamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectParamProto_descriptor_,
      EffectParamProto::default_instance_,
      EffectParamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectParamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectParamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectParamProto));
  MultEffectParamProto_descriptor_ = file->message_type(43);
  static const int MultEffectParamProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultEffectParamProto, param_lst_),
  };
  MultEffectParamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultEffectParamProto_descriptor_,
      MultEffectParamProto::default_instance_,
      MultEffectParamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultEffectParamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultEffectParamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultEffectParamProto));
  BuffBagInfo_descriptor_ = file->message_type(44);
  static const int BuffBagInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, buffbaginstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, statebagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, statebagtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, delayedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, isforever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, sendercid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, targettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, eparam_),
  };
  BuffBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffBagInfo_descriptor_,
      BuffBagInfo::default_instance_,
      BuffBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffBagInfo));
  CharacterBuffData_descriptor_ = file->message_type(45);
  static const int CharacterBuffData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterBuffData, delayedbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterBuffData, buffbaglst_),
  };
  CharacterBuffData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterBuffData_descriptor_,
      CharacterBuffData::default_instance_,
      CharacterBuffData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterBuffData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterBuffData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterBuffData));
  CharacterArenaData_descriptor_ = file->message_type(46);
  static const int CharacterArenaData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, challengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, historyrankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, buychallengetimes_),
  };
  CharacterArenaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterArenaData_descriptor_,
      CharacterArenaData::default_instance_,
      CharacterArenaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterArenaData));
  CharacterTitleInfo_descriptor_ = file->message_type(47);
  static const int CharacterTitleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleInfo, name_),
  };
  CharacterTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterTitleInfo_descriptor_,
      CharacterTitleInfo::default_instance_,
      CharacterTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterTitleInfo));
  CharacterTitleSaveData_descriptor_ = file->message_type(48);
  static const int CharacterTitleSaveData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleSaveData, titeldata_),
  };
  CharacterTitleSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterTitleSaveData_descriptor_,
      CharacterTitleSaveData::default_instance_,
      CharacterTitleSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterTitleSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterTitleSaveData));
  CharacterDBSingleOperateLimitInfo_descriptor_ = file->message_type(49);
  static const int CharacterDBSingleOperateLimitInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleOperateLimitInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleOperateLimitInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleOperateLimitInfo, lasttime_),
  };
  CharacterDBSingleOperateLimitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSingleOperateLimitInfo_descriptor_,
      CharacterDBSingleOperateLimitInfo::default_instance_,
      CharacterDBSingleOperateLimitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleOperateLimitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleOperateLimitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSingleOperateLimitInfo));
  CharacterDBOperateProto_descriptor_ = file->message_type(50);
  static const int CharacterDBOperateProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateProto, num_),
  };
  CharacterDBOperateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBOperateProto_descriptor_,
      CharacterDBOperateProto::default_instance_,
      CharacterDBOperateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBOperateProto));
  CharacterDBOperateMutProto_descriptor_ = file->message_type(51);
  static const int CharacterDBOperateMutProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateMutProto, operate_lst_),
  };
  CharacterDBOperateMutProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBOperateMutProto_descriptor_,
      CharacterDBOperateMutProto::default_instance_,
      CharacterDBOperateMutProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateMutProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateMutProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBOperateMutProto));
  CharacterDBOperateInfo_descriptor_ = file->message_type(52);
  static const int CharacterDBOperateInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, kill_mons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, last_kill_mons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, attend_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, last_attend_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, finish_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, pass_dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, coll_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, make_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, collect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, make_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, make_gold_quip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, identify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, arena_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, die_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, kill_enemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, kill_enemy_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, treasure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, pandos_trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, world_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, refine_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, refine_fail_),
  };
  CharacterDBOperateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBOperateInfo_descriptor_,
      CharacterDBOperateInfo::default_instance_,
      CharacterDBOperateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBOperateInfo));
  CharacterDBOperateLimitInfo_descriptor_ = file->message_type(53);
  static const int CharacterDBOperateLimitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateLimitInfo, operatelimitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateLimitInfo, operate_data_),
  };
  CharacterDBOperateLimitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBOperateLimitInfo_descriptor_,
      CharacterDBOperateLimitInfo::default_instance_,
      CharacterDBOperateLimitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateLimitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateLimitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBOperateLimitInfo));
  CharacterDBSingleHuoYueDuInfoInfo_descriptor_ = file->message_type(54);
  static const int CharacterDBSingleHuoYueDuInfoInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleHuoYueDuInfoInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleHuoYueDuInfoInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleHuoYueDuInfoInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleHuoYueDuInfoInfo, sin_process_),
  };
  CharacterDBSingleHuoYueDuInfoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSingleHuoYueDuInfoInfo_descriptor_,
      CharacterDBSingleHuoYueDuInfoInfo::default_instance_,
      CharacterDBSingleHuoYueDuInfoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleHuoYueDuInfoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSingleHuoYueDuInfoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSingleHuoYueDuInfoInfo));
  CharacterDBHuoYueDuInfo_descriptor_ = file->message_type(55);
  static const int CharacterDBHuoYueDuInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHuoYueDuInfo, huoyueduinfo_),
  };
  CharacterDBHuoYueDuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBHuoYueDuInfo_descriptor_,
      CharacterDBHuoYueDuInfo::default_instance_,
      CharacterDBHuoYueDuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHuoYueDuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHuoYueDuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBHuoYueDuInfo));
  IndultTaskEntry_descriptor_ = file->message_type(56);
  static const int IndultTaskEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskEntry, task_state_),
  };
  IndultTaskEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndultTaskEntry_descriptor_,
      IndultTaskEntry::default_instance_,
      IndultTaskEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndultTaskEntry));
  IndultTaskGroupEntry_descriptor_ = file->message_type(57);
  static const int IndultTaskGroupEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskGroupEntry, group_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskGroupEntry, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskGroupEntry, normal_reward_state_),
  };
  IndultTaskGroupEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndultTaskGroupEntry_descriptor_,
      IndultTaskGroupEntry::default_instance_,
      IndultTaskGroupEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskGroupEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndultTaskGroupEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndultTaskGroupEntry));
  ColPointsTaskEntry_descriptor_ = file->message_type(58);
  static const int ColPointsTaskEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskEntry, task_state_),
  };
  ColPointsTaskEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColPointsTaskEntry_descriptor_,
      ColPointsTaskEntry::default_instance_,
      ColPointsTaskEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColPointsTaskEntry));
  ColPointsTaskGroupEntry_descriptor_ = file->message_type(59);
  static const int ColPointsTaskGroupEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskGroupEntry, group_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskGroupEntry, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskGroupEntry, normal_reward_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskGroupEntry, cur_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskGroupEntry, create_time_),
  };
  ColPointsTaskGroupEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColPointsTaskGroupEntry_descriptor_,
      ColPointsTaskGroupEntry::default_instance_,
      ColPointsTaskGroupEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskGroupEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskGroupEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColPointsTaskGroupEntry));
  ColPointsTaskData_descriptor_ = file->message_type(60);
  static const int ColPointsTaskData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskData, last_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskData, online_time_),
  };
  ColPointsTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColPointsTaskData_descriptor_,
      ColPointsTaskData::default_instance_,
      ColPointsTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColPointsTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColPointsTaskData));
  WelfareDailySignInDBData_descriptor_ = file->message_type(61);
  static const int WelfareDailySignInDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareDailySignInDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareDailySignInDBData, dayindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareDailySignInDBData, nstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareDailySignInDBData, lastresettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareDailySignInDBData, brecharge_),
  };
  WelfareDailySignInDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareDailySignInDBData_descriptor_,
      WelfareDailySignInDBData::default_instance_,
      WelfareDailySignInDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareDailySignInDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareDailySignInDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareDailySignInDBData));
  WelfareLoginGiftDBData_descriptor_ = file->message_type(62);
  static const int WelfareLoginGiftDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLoginGiftDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLoginGiftDBData, lonincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLoginGiftDBData, lastresettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLoginGiftDBData, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLoginGiftDBData, nstate_),
  };
  WelfareLoginGiftDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareLoginGiftDBData_descriptor_,
      WelfareLoginGiftDBData::default_instance_,
      WelfareLoginGiftDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLoginGiftDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLoginGiftDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareLoginGiftDBData));
  WelfareLevelGiftDBData_descriptor_ = file->message_type(63);
  static const int WelfareLevelGiftDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLevelGiftDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLevelGiftDBData, getstate_),
  };
  WelfareLevelGiftDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareLevelGiftDBData_descriptor_,
      WelfareLevelGiftDBData::default_instance_,
      WelfareLevelGiftDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLevelGiftDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareLevelGiftDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareLevelGiftDBData));
  CommodityEntry_descriptor_ = file->message_type(64);
  static const int CommodityEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommodityEntry, commodity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommodityEntry, cur_buy_num_),
  };
  CommodityEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommodityEntry_descriptor_,
      CommodityEntry::default_instance_,
      CommodityEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommodityEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommodityEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommodityEntry));
  LimitShopGroupEntry_descriptor_ = file->message_type(65);
  static const int LimitShopGroupEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopGroupEntry, group_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopGroupEntry, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopGroupEntry, entrys_),
  };
  LimitShopGroupEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitShopGroupEntry_descriptor_,
      LimitShopGroupEntry::default_instance_,
      LimitShopGroupEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopGroupEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopGroupEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitShopGroupEntry));
  LimitShopData_descriptor_ = file->message_type(66);
  static const int LimitShopData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, groups_),
  };
  LimitShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitShopData_descriptor_,
      LimitShopData::default_instance_,
      LimitShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitShopData));
  LimitTaskEntry_descriptor_ = file->message_type(67);
  static const int LimitTaskEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskEntry, task_state_),
  };
  LimitTaskEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitTaskEntry_descriptor_,
      LimitTaskEntry::default_instance_,
      LimitTaskEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitTaskEntry));
  LimitTaskGroupEntry_descriptor_ = file->message_type(68);
  static const int LimitTaskGroupEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskGroupEntry, group_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskGroupEntry, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskGroupEntry, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskGroupEntry, normal_reward_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskGroupEntry, senior_reward_state_),
  };
  LimitTaskGroupEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitTaskGroupEntry_descriptor_,
      LimitTaskGroupEntry::default_instance_,
      LimitTaskGroupEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskGroupEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskGroupEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitTaskGroupEntry));
  LimitTaskData_descriptor_ = file->message_type(69);
  static const int LimitTaskData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskData, groups_),
  };
  LimitTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitTaskData_descriptor_,
      LimitTaskData::default_instance_,
      LimitTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitTaskData));
  WishDBTypeEntry_descriptor_ = file->message_type(70);
  static const int WishDBTypeEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBTypeEntry, wish_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBTypeEntry, wished_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBTypeEntry, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBTypeEntry, last_time_),
  };
  WishDBTypeEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WishDBTypeEntry_descriptor_,
      WishDBTypeEntry::default_instance_,
      WishDBTypeEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBTypeEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBTypeEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WishDBTypeEntry));
  WishDBData_descriptor_ = file->message_type(71);
  static const int WishDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBData, type_entry_),
  };
  WishDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WishDBData_descriptor_,
      WishDBData::default_instance_,
      WishDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WishDBData));
  FestivalInvestDBData_descriptor_ = file->message_type(72);
  static const int FestivalInvestDBData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, nactiveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, binvest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, nlastresettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, nlonincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, investtime_),
  };
  FestivalInvestDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalInvestDBData_descriptor_,
      FestivalInvestDBData::default_instance_,
      FestivalInvestDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInvestDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalInvestDBData));
  FestivalExchangeDBData_descriptor_ = file->message_type(73);
  static const int FestivalExchangeDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalExchangeDBData, nactiveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalExchangeDBData, exchangecount_),
  };
  FestivalExchangeDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalExchangeDBData_descriptor_,
      FestivalExchangeDBData::default_instance_,
      FestivalExchangeDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalExchangeDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalExchangeDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalExchangeDBData));
  FestivalLoginDBData_descriptor_ = file->message_type(74);
  static const int FestivalLoginDBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalLoginDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalLoginDBData, nlastresettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalLoginDBData, nlonincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalLoginDBData, getstate_),
  };
  FestivalLoginDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalLoginDBData_descriptor_,
      FestivalLoginDBData::default_instance_,
      FestivalLoginDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalLoginDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalLoginDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalLoginDBData));
  FestivalTotalRechargeDBData_descriptor_ = file->message_type(75);
  static const int FestivalTotalRechargeDBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalTotalRechargeDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalTotalRechargeDBData, nrechargecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalTotalRechargeDBData, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalTotalRechargeDBData, nrechargeholy_),
  };
  FestivalTotalRechargeDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalTotalRechargeDBData_descriptor_,
      FestivalTotalRechargeDBData::default_instance_,
      FestivalTotalRechargeDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalTotalRechargeDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalTotalRechargeDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalTotalRechargeDBData));
  FestivalConsumptionDBData_descriptor_ = file->message_type(76);
  static const int FestivalConsumptionDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalConsumptionDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalConsumptionDBData, nconsumptionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalConsumptionDBData, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalConsumptionDBData, nconsumptionholy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalConsumptionDBData, nconsumptionvoucher_),
  };
  FestivalConsumptionDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalConsumptionDBData_descriptor_,
      FestivalConsumptionDBData::default_instance_,
      FestivalConsumptionDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalConsumptionDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalConsumptionDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalConsumptionDBData));
  FestivalKillBossData_descriptor_ = file->message_type(77);
  static const int FestivalKillBossData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalKillBossData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalKillBossData, getstate_),
  };
  FestivalKillBossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalKillBossData_descriptor_,
      FestivalKillBossData::default_instance_,
      FestivalKillBossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalKillBossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalKillBossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalKillBossData));
  FestivalZhiChongData_descriptor_ = file->message_type(78);
  static const int FestivalZhiChongData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalZhiChongData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalZhiChongData, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalZhiChongData, pointlist_),
  };
  FestivalZhiChongData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalZhiChongData_descriptor_,
      FestivalZhiChongData::default_instance_,
      FestivalZhiChongData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalZhiChongData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalZhiChongData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalZhiChongData));
  FestivalPreRechargeData_descriptor_ = file->message_type(79);
  static const int FestivalPreRechargeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalPreRechargeData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalPreRechargeData, buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalPreRechargeData, pointlist_),
  };
  FestivalPreRechargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalPreRechargeData_descriptor_,
      FestivalPreRechargeData::default_instance_,
      FestivalPreRechargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalPreRechargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalPreRechargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalPreRechargeData));
  FestivalSuperDBData_descriptor_ = file->message_type(80);
  static const int FestivalSuperDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDBData, nlastresettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDBData, nlonincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDBData, getid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDBData, active_state_),
  };
  FestivalSuperDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalSuperDBData_descriptor_,
      FestivalSuperDBData::default_instance_,
      FestivalSuperDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalSuperDBData));
  FestivalSuperDoubleDBData_descriptor_ = file->message_type(81);
  static const int FestivalSuperDoubleDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDoubleDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDoubleDBData, nlastresettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDoubleDBData, curgiftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDoubleDBData, curgiftstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDoubleDBData, curdailystate_),
  };
  FestivalSuperDoubleDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalSuperDoubleDBData_descriptor_,
      FestivalSuperDoubleDBData::default_instance_,
      FestivalSuperDoubleDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDoubleDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSuperDoubleDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalSuperDoubleDBData));
  FestivalHuoYueDuDBData_descriptor_ = file->message_type(82);
  static const int FestivalHuoYueDuDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalHuoYueDuDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalHuoYueDuDBData, nhuoyuedu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalHuoYueDuDBData, getstate_),
  };
  FestivalHuoYueDuDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalHuoYueDuDBData_descriptor_,
      FestivalHuoYueDuDBData::default_instance_,
      FestivalHuoYueDuDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalHuoYueDuDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalHuoYueDuDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalHuoYueDuDBData));
  FestivalFirstRechargeDBData_descriptor_ = file->message_type(83);
  static const int FestivalFirstRechargeDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalFirstRechargeDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalFirstRechargeDBData, rechargetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalFirstRechargeDBData, getstate_),
  };
  FestivalFirstRechargeDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalFirstRechargeDBData_descriptor_,
      FestivalFirstRechargeDBData::default_instance_,
      FestivalFirstRechargeDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalFirstRechargeDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalFirstRechargeDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalFirstRechargeDBData));
  FestivalYanHuaDBData_descriptor_ = file->message_type(84);
  static const int FestivalYanHuaDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalYanHuaDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalYanHuaDBData, getitems_),
  };
  FestivalYanHuaDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalYanHuaDBData_descriptor_,
      FestivalYanHuaDBData::default_instance_,
      FestivalYanHuaDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalYanHuaDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalYanHuaDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalYanHuaDBData));
  FestivalBigYanHuaDBData_descriptor_ = file->message_type(85);
  static const int FestivalBigYanHuaDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalBigYanHuaDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalBigYanHuaDBData, getitems_),
  };
  FestivalBigYanHuaDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalBigYanHuaDBData_descriptor_,
      FestivalBigYanHuaDBData::default_instance_,
      FestivalBigYanHuaDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalBigYanHuaDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalBigYanHuaDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalBigYanHuaDBData));
  FestivalShopDBData_descriptor_ = file->message_type(86);
  static const int FestivalShopDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalShopDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalShopDBData, buycount_),
  };
  FestivalShopDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalShopDBData_descriptor_,
      FestivalShopDBData::default_instance_,
      FestivalShopDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalShopDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalShopDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalShopDBData));
  LimitGiftDBData_descriptor_ = file->message_type(87);
  static const int LimitGiftDBData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftDBData, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftDBData, buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftDBData, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftDBData, totalback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftDBData, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftDBData, lastresettime_),
  };
  LimitGiftDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitGiftDBData_descriptor_,
      LimitGiftDBData::default_instance_,
      LimitGiftDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitGiftDBData));
  LimitGiftActiveDBData_descriptor_ = file->message_type(88);
  static const int LimitGiftActiveDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftActiveDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftActiveDBData, isfinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftActiveDBData, giftlist_),
  };
  LimitGiftActiveDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitGiftActiveDBData_descriptor_,
      LimitGiftActiveDBData::default_instance_,
      LimitGiftActiveDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftActiveDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGiftActiveDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitGiftActiveDBData));
  FRechargeDBData_descriptor_ = file->message_type(89);
  static const int FRechargeDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRechargeDBData, pointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRechargeDBData, state_),
  };
  FRechargeDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FRechargeDBData_descriptor_,
      FRechargeDBData::default_instance_,
      FRechargeDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRechargeDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRechargeDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FRechargeDBData));
  FRechargeActiveDBData_descriptor_ = file->message_type(90);
  static const int FRechargeActiveDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRechargeActiveDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRechargeActiveDBData, datalist_),
  };
  FRechargeActiveDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FRechargeActiveDBData_descriptor_,
      FRechargeActiveDBData::default_instance_,
      FRechargeActiveDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRechargeActiveDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRechargeActiveDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FRechargeActiveDBData));
  FSmashEggDBData_descriptor_ = file->message_type(91);
  static const int FSmashEggDBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSmashEggDBData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSmashEggDBData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSmashEggDBData, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSmashEggDBData, itemnum_),
  };
  FSmashEggDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FSmashEggDBData_descriptor_,
      FSmashEggDBData::default_instance_,
      FSmashEggDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSmashEggDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSmashEggDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FSmashEggDBData));
  FestivalSmashEggDBData_descriptor_ = file->message_type(92);
  static const int FestivalSmashEggDBData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, smashcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, smashcounttoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, freetimedeadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, addratecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, resetrewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, eggdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, rewardgetstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, daynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, lasttime_),
  };
  FestivalSmashEggDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalSmashEggDBData_descriptor_,
      FestivalSmashEggDBData::default_instance_,
      FestivalSmashEggDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalSmashEggDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalSmashEggDBData));
  OperateReward_descriptor_ = file->message_type(93);
  static const int OperateReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateReward, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateReward, isfinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateReward, isreceivereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateReward, rechargedays_),
  };
  OperateReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateReward_descriptor_,
      OperateReward::default_instance_,
      OperateReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateReward));
  OperateDailyRechargeData_descriptor_ = file->message_type(94);
  static const int OperateDailyRechargeData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDailyRechargeData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDailyRechargeData, rmbtoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDailyRechargeData, rmbtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDailyRechargeData, lastrechargedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDailyRechargeData, list_),
  };
  OperateDailyRechargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateDailyRechargeData_descriptor_,
      OperateDailyRechargeData::default_instance_,
      OperateDailyRechargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDailyRechargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDailyRechargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateDailyRechargeData));
  OperateMoonCardData_descriptor_ = file->message_type(95);
  static const int OperateMoonCardData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateMoonCardData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateMoonCardData, buydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateMoonCardData, list_),
  };
  OperateMoonCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateMoonCardData_descriptor_,
      OperateMoonCardData::default_instance_,
      OperateMoonCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateMoonCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateMoonCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateMoonCardData));
  OperateFundData_descriptor_ = file->message_type(96);
  static const int OperateFundData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFundData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFundData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFundData, buydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFundData, list_),
  };
  OperateFundData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateFundData_descriptor_,
      OperateFundData::default_instance_,
      OperateFundData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFundData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFundData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateFundData));
  OperateFirstRechargeType_descriptor_ = file->message_type(97);
  static const int OperateFirstRechargeType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeType, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeType, loginday_),
  };
  OperateFirstRechargeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateFirstRechargeType_descriptor_,
      OperateFirstRechargeType::default_instance_,
      OperateFirstRechargeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateFirstRechargeType));
  OperateFirstRechargeData_descriptor_ = file->message_type(98);
  static const int OperateFirstRechargeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeData, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeData, firsttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeData, rmb_),
  };
  OperateFirstRechargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateFirstRechargeData_descriptor_,
      OperateFirstRechargeData::default_instance_,
      OperateFirstRechargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateFirstRechargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateFirstRechargeData));
  WelfareVipGiftDBData_descriptor_ = file->message_type(99);
  static const int WelfareVipGiftDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareVipGiftDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareVipGiftDBData, getstate_),
  };
  WelfareVipGiftDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareVipGiftDBData_descriptor_,
      WelfareVipGiftDBData::default_instance_,
      WelfareVipGiftDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareVipGiftDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareVipGiftDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareVipGiftDBData));
  HoroscopeJackpotDBData_descriptor_ = file->message_type(100);
  static const int HoroscopeJackpotDBData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, bopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, nneedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, luckyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, welfarevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, getluckycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, welfaregetstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, curnum_),
  };
  HoroscopeJackpotDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HoroscopeJackpotDBData_descriptor_,
      HoroscopeJackpotDBData::default_instance_,
      HoroscopeJackpotDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeJackpotDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HoroscopeJackpotDBData));
  HoroscopeActiveDBData_descriptor_ = file->message_type(101);
  static const int HoroscopeActiveDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeActiveDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeActiveDBData, drawcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeActiveDBData, freeopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeActiveDBData, lastfreegettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeActiveDBData, jackpotlist_),
  };
  HoroscopeActiveDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HoroscopeActiveDBData_descriptor_,
      HoroscopeActiveDBData::default_instance_,
      HoroscopeActiveDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeActiveDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HoroscopeActiveDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HoroscopeActiveDBData));
  WelfareOnlineGiftDBData_descriptor_ = file->message_type(102);
  static const int WelfareOnlineGiftDBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareOnlineGiftDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareOnlineGiftDBData, lastrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareOnlineGiftDBData, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareOnlineGiftDBData, getstate_),
  };
  WelfareOnlineGiftDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WelfareOnlineGiftDBData_descriptor_,
      WelfareOnlineGiftDBData::default_instance_,
      WelfareOnlineGiftDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareOnlineGiftDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WelfareOnlineGiftDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WelfareOnlineGiftDBData));
  OperationTurntableTaskDBData_descriptor_ = file->message_type(103);
  static const int OperationTurntableTaskDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableTaskDBData, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableTaskDBData, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableTaskDBData, state_),
  };
  OperationTurntableTaskDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationTurntableTaskDBData_descriptor_,
      OperationTurntableTaskDBData::default_instance_,
      OperationTurntableTaskDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableTaskDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableTaskDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationTurntableTaskDBData));
  OperationTurntableDBData_descriptor_ = file->message_type(104);
  static const int OperationTurntableDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableDBData, lastrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableDBData, tasklist_),
  };
  OperationTurntableDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationTurntableDBData_descriptor_,
      OperationTurntableDBData::default_instance_,
      OperationTurntableDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTurntableDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationTurntableDBData));
  OperationTutoraskDBData_descriptor_ = file->message_type(105);
  static const int OperationTutoraskDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutoraskDBData, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutoraskDBData, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutoraskDBData, state_),
  };
  OperationTutoraskDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationTutoraskDBData_descriptor_,
      OperationTutoraskDBData::default_instance_,
      OperationTutoraskDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutoraskDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutoraskDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationTutoraskDBData));
  OperationTutorDBData_descriptor_ = file->message_type(106);
  static const int OperationTutorDBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutorDBData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutorDBData, lastrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutorDBData, diligentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutorDBData, tasklist_),
  };
  OperationTutorDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationTutorDBData_descriptor_,
      OperationTutorDBData::default_instance_,
      OperationTutorDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutorDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationTutorDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationTutorDBData));
  limitInfo_descriptor_ = file->message_type(107);
  static const int limitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(limitInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(limitInfo, infos_),
  };
  limitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      limitInfo_descriptor_,
      limitInfo::default_instance_,
      limitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(limitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(limitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(limitInfo));
  FestivalWorldBossData_descriptor_ = file->message_type(108);
  static const int FestivalWorldBossData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalWorldBossData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalWorldBossData, getstate_),
  };
  FestivalWorldBossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalWorldBossData_descriptor_,
      FestivalWorldBossData::default_instance_,
      FestivalWorldBossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalWorldBossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalWorldBossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalWorldBossData));
  OperateCommonEntryData_descriptor_ = file->message_type(109);
  static const int OperateCommonEntryData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateCommonEntryData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateCommonEntryData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateCommonEntryData, value_),
  };
  OperateCommonEntryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateCommonEntryData_descriptor_,
      OperateCommonEntryData::default_instance_,
      OperateCommonEntryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateCommonEntryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateCommonEntryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateCommonEntryData));
  OperateWingGiftData_descriptor_ = file->message_type(110);
  static const int OperateWingGiftData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWingGiftData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWingGiftData, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWingGiftData, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWingGiftData, loginday_),
  };
  OperateWingGiftData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateWingGiftData_descriptor_,
      OperateWingGiftData::default_instance_,
      OperateWingGiftData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWingGiftData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWingGiftData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateWingGiftData));
  OperateRechargeGiftData_descriptor_ = file->message_type(111);
  static const int OperateRechargeGiftData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRechargeGiftData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRechargeGiftData, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRechargeGiftData, rechargermb_),
  };
  OperateRechargeGiftData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateRechargeGiftData_descriptor_,
      OperateRechargeGiftData::default_instance_,
      OperateRechargeGiftData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRechargeGiftData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRechargeGiftData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateRechargeGiftData));
  CharacterDBOperateData_descriptor_ = file->message_type(112);
  static const int CharacterDBOperateData_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, signindata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, logingiftdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, levelgiftdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, shopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, taskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, wishdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, dailyrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, firstrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, mooncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, novicefund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, growthfund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, dreamfund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, novicefundhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, growthfundhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, dreamfundhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, finvestdbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fexchangedbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, flogindbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, frechargedbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fconsumptiondbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, ffirstrechargedbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fyanhuadbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fshopdbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, limitgiftdbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, horoscopedbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, festivalrechargedbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fsmasheggdbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, redpointclickdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, wvipdbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, wonlinedbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fbossdbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fhuoyuedudbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fturntabledbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, tutordbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, zhichongdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, limitdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, superdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, fbigyanhuadbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, worldbossdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, prerechargedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, winggiftdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, rechargegiftdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, superdoubledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, indulttaskdbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, colpointstaskdata_),
  };
  CharacterDBOperateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBOperateData_descriptor_,
      CharacterDBOperateData::default_instance_,
      CharacterDBOperateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOperateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBOperateData));
  PlayerActiveAnswerData_descriptor_ = file->message_type(113);
  static const int PlayerActiveAnswerData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, answerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, answerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, allexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, allmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, correctnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, isgetreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, lastanswertime_),
  };
  PlayerActiveAnswerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerActiveAnswerData_descriptor_,
      PlayerActiveAnswerData::default_instance_,
      PlayerActiveAnswerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerActiveAnswerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerActiveAnswerData));
  CharacterDBActiveInfo_descriptor_ = file->message_type(114);
  static const int CharacterDBActiveInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActiveInfo, playeractiveanswerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActiveInfo, playeractivedailyanswerinfo_),
  };
  CharacterDBActiveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBActiveInfo_descriptor_,
      CharacterDBActiveInfo::default_instance_,
      CharacterDBActiveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActiveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActiveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBActiveInfo));
  PayCountDBProto_descriptor_ = file->message_type(115);
  static const int PayCountDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayCountDBProto, charge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayCountDBProto, count_),
  };
  PayCountDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayCountDBProto_descriptor_,
      PayCountDBProto::default_instance_,
      PayCountDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayCountDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayCountDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayCountDBProto));
  OfflineRetDBProto_descriptor_ = file->message_type(116);
  static const int OfflineRetDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRetDBProto, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRetDBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRetDBProto, freshtime_),
  };
  OfflineRetDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineRetDBProto_descriptor_,
      OfflineRetDBProto::default_instance_,
      OfflineRetDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRetDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRetDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineRetDBProto));
  CharacterPayData_descriptor_ = file->message_type(117);
  static const int CharacterPayData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, maxpayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, payedproducts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, today_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, pay_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, pay_count_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, real_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, freshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, openwindow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, offline_ret_),
  };
  CharacterPayData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterPayData_descriptor_,
      CharacterPayData::default_instance_,
      CharacterPayData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPayData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterPayData));
  FunctionUnlockInfo_descriptor_ = file->message_type(118);
  static const int FunctionUnlockInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, unlockids_),
  };
  FunctionUnlockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockInfo_descriptor_,
      FunctionUnlockInfo::default_instance_,
      FunctionUnlockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockInfo));
  EmblemSlot_descriptor_ = file->message_type(119);
  static const int EmblemSlot_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, attrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, bind_),
  };
  EmblemSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmblemSlot_descriptor_,
      EmblemSlot::default_instance_,
      EmblemSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmblemSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmblemSlot));
  CharacterDBEmblemData_descriptor_ = file->message_type(120);
  static const int CharacterDBEmblemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEmblemData, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEmblemData, groupsuitids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEmblemData, suitskillid_),
  };
  CharacterDBEmblemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBEmblemData_descriptor_,
      CharacterDBEmblemData::default_instance_,
      CharacterDBEmblemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEmblemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEmblemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBEmblemData));
  CharacterDBIdentifyData_descriptor_ = file->message_type(121);
  static const int CharacterDBIdentifyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBIdentifyData, identifys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBIdentifyData, identifyfates_),
  };
  CharacterDBIdentifyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBIdentifyData_descriptor_,
      CharacterDBIdentifyData::default_instance_,
      CharacterDBIdentifyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBIdentifyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBIdentifyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBIdentifyData));
  ElementInfoData_descriptor_ = file->message_type(122);
  static const int ElementInfoData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfoData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfoData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfoData, exp_),
  };
  ElementInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElementInfoData_descriptor_,
      ElementInfoData::default_instance_,
      ElementInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElementInfoData));
  CharacterDBElementData_descriptor_ = file->message_type(123);
  static const int CharacterDBElementData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBElementData, elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBElementData, fragments_),
  };
  CharacterDBElementData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBElementData_descriptor_,
      CharacterDBElementData::default_instance_,
      CharacterDBElementData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBElementData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBElementData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBElementData));
  CharacterDBFashionData_descriptor_ = file->message_type(124);
  static const int CharacterDBFashionData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, fashions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, dressclothesfashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, dressweaponfashionid_),
  };
  CharacterDBFashionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBFashionData_descriptor_,
      CharacterDBFashionData::default_instance_,
      CharacterDBFashionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBFashionData));
  CharacterDBWingData_descriptor_ = file->message_type(125);
  static const int CharacterDBWingData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWingData, advancewingexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWingData, advancewinglev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWingData, equipwingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWingData, fantasywings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWingData, fragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWingData, isbreak_),
  };
  CharacterDBWingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBWingData_descriptor_,
      CharacterDBWingData::default_instance_,
      CharacterDBWingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBWingData));
  CharacterDBPartnerData_descriptor_ = file->message_type(126);
  static const int CharacterDBPartnerData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, advancepartnerexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, advancepartnerlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, equippartnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, fantasypartners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, fragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, commonpartnerexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, autoswallowflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, autoswallowclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, isbreak_),
  };
  CharacterDBPartnerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBPartnerData_descriptor_,
      CharacterDBPartnerData::default_instance_,
      CharacterDBPartnerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPartnerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBPartnerData));
  CharacterDBMountData_descriptor_ = file->message_type(127);
  static const int CharacterDBMountData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMountData, mounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMountData, mountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMountData, ridestate_),
  };
  CharacterDBMountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMountData_descriptor_,
      CharacterDBMountData::default_instance_,
      CharacterDBMountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMountData));
  PlayerBossDataInfo_descriptor_ = file->message_type(128);
  static const int PlayerBossDataInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossDataInfo, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossDataInfo, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossDataInfo, max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossDataInfo, vip_buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossDataInfo, boss_type_),
  };
  PlayerBossDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBossDataInfo_descriptor_,
      PlayerBossDataInfo::default_instance_,
      PlayerBossDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBossDataInfo));
  CharacterDBBossAttentInfo_descriptor_ = file->message_type(129);
  static const int CharacterDBBossAttentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossAttentInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossAttentInfo, type_),
  };
  CharacterDBBossAttentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBBossAttentInfo_descriptor_,
      CharacterDBBossAttentInfo::default_instance_,
      CharacterDBBossAttentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossAttentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossAttentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBBossAttentInfo));
  CharacterDBBossData_descriptor_ = file->message_type(130);
  static const int CharacterDBBossData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossData, attent_list_),
  };
  CharacterDBBossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBBossData_descriptor_,
      CharacterDBBossData::default_instance_,
      CharacterDBBossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBBossData));
  RedPlayerInfo_descriptor_ = file->message_type(131);
  static const int RedPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPlayerInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPlayerInfo, time_),
  };
  RedPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedPlayerInfo_descriptor_,
      RedPlayerInfo::default_instance_,
      RedPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedPlayerInfo));
  CharacterDBPvpData_descriptor_ = file->message_type(132);
  static const int CharacterDBPvpData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, pk_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, pk_killing_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, red_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, be_kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, be_kill_name_),
  };
  CharacterDBPvpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBPvpData_descriptor_,
      CharacterDBPvpData::default_instance_,
      CharacterDBPvpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBPvpData));
  CharacterDBTreasureData_descriptor_ = file->message_type(133);
  static const int CharacterDBTreasureData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, advancetreasureexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, advancetreasurelev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, equiptreasureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, fantasytreasures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, fragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, skilltreasureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, isbreak_),
  };
  CharacterDBTreasureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBTreasureData_descriptor_,
      CharacterDBTreasureData::default_instance_,
      CharacterDBTreasureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTreasureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBTreasureData));
  ArtifactInfo_descriptor_ = file->message_type(134);
  static const int ArtifactInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, star_lv_),
  };
  ArtifactInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactInfo_descriptor_,
      ArtifactInfo::default_instance_,
      ArtifactInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactInfo));
  CharacterDBArtifactData_descriptor_ = file->message_type(135);
  static const int CharacterDBArtifactData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBArtifactData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBArtifactData, dress_id_),
  };
  CharacterDBArtifactData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBArtifactData_descriptor_,
      CharacterDBArtifactData::default_instance_,
      CharacterDBArtifactData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBArtifactData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBArtifactData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBArtifactData));
  CharacterDBFateStarData_descriptor_ = file->message_type(136);
  static const int CharacterDBFateStarData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, freetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, towerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, nbless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, soltdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, equipstars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, lasttime_),
  };
  CharacterDBFateStarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBFateStarData_descriptor_,
      CharacterDBFateStarData::default_instance_,
      CharacterDBFateStarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFateStarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBFateStarData));
  CharacterDBConvoyData_descriptor_ = file->message_type(137);
  static const int CharacterDBConvoyData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, dotimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, convoydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, escortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, accepttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, refreshtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, selectescortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, refreshtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, lastresettime_),
  };
  CharacterDBConvoyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBConvoyData_descriptor_,
      CharacterDBConvoyData::default_instance_,
      CharacterDBConvoyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBConvoyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBConvoyData));
  CharacterDBDailyEntry_descriptor_ = file->message_type(138);
  static const int CharacterDBDailyEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyEntry, cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyEntry, cur_num_),
  };
  CharacterDBDailyEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDailyEntry_descriptor_,
      CharacterDBDailyEntry::default_instance_,
      CharacterDBDailyEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDailyEntry));
  CharacterDBDailyData_descriptor_ = file->message_type(139);
  static const int CharacterDBDailyData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyData, daily_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyData, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyData, lasttime_),
  };
  CharacterDBDailyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDailyData_descriptor_,
      CharacterDBDailyData::default_instance_,
      CharacterDBDailyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDailyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDailyData));
  FieldCylstalInfo_descriptor_ = file->message_type(140);
  static const int FieldCylstalInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldCylstalInfo, slotindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldCylstalInfo, itemid_),
  };
  FieldCylstalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldCylstalInfo_descriptor_,
      FieldCylstalInfo::default_instance_,
      FieldCylstalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldCylstalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldCylstalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldCylstalInfo));
  FieldExInfo_descriptor_ = file->message_type(141);
  static const int FieldExInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldExInfo, actived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldExInfo, slotinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldExInfo, fieldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldExInfo, fightnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldExInfo, cylstalinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldExInfo, first_active_),
  };
  FieldExInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldExInfo_descriptor_,
      FieldExInfo::default_instance_,
      FieldExInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldExInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldExInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldExInfo));
  CharacterDBFieldData_descriptor_ = file->message_type(142);
  static const int CharacterDBFieldData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFieldData, fieldinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFieldData, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFieldData, maxnum_),
  };
  CharacterDBFieldData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBFieldData_descriptor_,
      CharacterDBFieldData::default_instance_,
      CharacterDBFieldData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFieldData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFieldData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBFieldData));
  vipGiftDBData_descriptor_ = file->message_type(143);
  static const int vipGiftDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipGiftDBData, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipGiftDBData, activetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipGiftDBData, lastgettime_),
  };
  vipGiftDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vipGiftDBData_descriptor_,
      vipGiftDBData::default_instance_,
      vipGiftDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipGiftDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipGiftDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vipGiftDBData));
  VipTCardInfo_descriptor_ = file->message_type(144);
  static const int VipTCardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardInfo, rewardstate_),
  };
  VipTCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipTCardInfo_descriptor_,
      VipTCardInfo::default_instance_,
      VipTCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipTCardInfo));
  VipTCardData_descriptor_ = file->message_type(145);
  static const int VipTCardData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardData, cardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardData, giftstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardData, point_),
  };
  VipTCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipTCardData_descriptor_,
      VipTCardData::default_instance_,
      VipTCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipTCardData));
  CharacterDBVipData_descriptor_ = file->message_type(146);
  static const int CharacterDBVipData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, vipstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, getrewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, expdiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, timelimitexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, vipgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, cardlasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, curaddvipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, point_),
  };
  CharacterDBVipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBVipData_descriptor_,
      CharacterDBVipData::default_instance_,
      CharacterDBVipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBVipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBVipData));
  CharacterDBMallData_descriptor_ = file->message_type(147);
  static const int CharacterDBMallData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMallData, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMallData, goodsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMallData, dailyrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMallData, refreshnum_),
  };
  CharacterDBMallData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMallData_descriptor_,
      CharacterDBMallData::default_instance_,
      CharacterDBMallData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMallData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMallData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMallData));
  GodhoodSlot_descriptor_ = file->message_type(148);
  static const int GodhoodSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodhoodSlot, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodhoodSlot, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodhoodSlot, item_),
  };
  GodhoodSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodhoodSlot_descriptor_,
      GodhoodSlot::default_instance_,
      GodhoodSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodhoodSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodhoodSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodhoodSlot));
  CharacterDBGodhoodData_descriptor_ = file->message_type(149);
  static const int CharacterDBGodhoodData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodhoodData, godhoodslot_),
  };
  CharacterDBGodhoodData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBGodhoodData_descriptor_,
      CharacterDBGodhoodData::default_instance_,
      CharacterDBGodhoodData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodhoodData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodhoodData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBGodhoodData));
  RecoveryCompleteDBData_descriptor_ = file->message_type(150);
  static const int RecoveryCompleteDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryCompleteDBData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryCompleteDBData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryCompleteDBData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryCompleteDBData, completelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryCompleteDBData, fununlock_),
  };
  RecoveryCompleteDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoveryCompleteDBData_descriptor_,
      RecoveryCompleteDBData::default_instance_,
      RecoveryCompleteDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryCompleteDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryCompleteDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoveryCompleteDBData));
  RecoveryDBReward_descriptor_ = file->message_type(151);
  static const int RecoveryDBReward_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, day1countmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, day2countmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, day1vipcountmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, day2vipcountmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, commoncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, vipcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, goldexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, diamondsexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, golditemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, diamondsitemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, needgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, needdiamonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, confid_),
  };
  RecoveryDBReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoveryDBReward_descriptor_,
      RecoveryDBReward::default_instance_,
      RecoveryDBReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoveryDBReward));
  RecoveryDBData_descriptor_ = file->message_type(152);
  static const int RecoveryDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBData, list_),
  };
  RecoveryDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoveryDBData_descriptor_,
      RecoveryDBData::default_instance_,
      RecoveryDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoveryDBData));
  CharacterDBRecoveryData_descriptor_ = file->message_type(153);
  static const int CharacterDBRecoveryData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecoveryData, completedbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecoveryData, recoverydbdata_),
  };
  CharacterDBRecoveryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBRecoveryData_descriptor_,
      CharacterDBRecoveryData::default_instance_,
      CharacterDBRecoveryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecoveryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecoveryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBRecoveryData));
  CharacterDBActivityScuffleData_descriptor_ = file->message_type(154);
  static const int CharacterDBActivityScuffleData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, cur_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, cur_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, before_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, before_map_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, last_kill_num_),
  };
  CharacterDBActivityScuffleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBActivityScuffleData_descriptor_,
      CharacterDBActivityScuffleData::default_instance_,
      CharacterDBActivityScuffleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityScuffleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBActivityScuffleData));
  CharacterDBActivityChaosDragonsData_descriptor_ = file->message_type(155);
  static const int CharacterDBActivityChaosDragonsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityChaosDragonsData, before_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityChaosDragonsData, before_map_point_),
  };
  CharacterDBActivityChaosDragonsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBActivityChaosDragonsData_descriptor_,
      CharacterDBActivityChaosDragonsData::default_instance_,
      CharacterDBActivityChaosDragonsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityChaosDragonsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityChaosDragonsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBActivityChaosDragonsData));
  CharacterDBActivityAsharmData_descriptor_ = file->message_type(156);
  static const int CharacterDBActivityAsharmData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityAsharmData, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityAsharmData, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityAsharmData, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityAsharmData, cur_num_),
  };
  CharacterDBActivityAsharmData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBActivityAsharmData_descriptor_,
      CharacterDBActivityAsharmData::default_instance_,
      CharacterDBActivityAsharmData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityAsharmData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityAsharmData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBActivityAsharmData));
  CharacterDBCombatTeamData_descriptor_ = file->message_type(157);
  static const int CharacterDBCombatTeamData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCombatTeamData, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCombatTeamData, team_end_time_),
  };
  CharacterDBCombatTeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBCombatTeamData_descriptor_,
      CharacterDBCombatTeamData::default_instance_,
      CharacterDBCombatTeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCombatTeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCombatTeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBCombatTeamData));
  CharacterDBSoloData_descriptor_ = file->message_type(158);
  static const int CharacterDBSoloData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, rewarded_join_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, my_solo_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, rewarded_stage_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, rewarded_day_stage_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, solo_time_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, solo_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, cur_buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, lose_num_),
  };
  CharacterDBSoloData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSoloData_descriptor_,
      CharacterDBSoloData::default_instance_,
      CharacterDBSoloData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSoloData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSoloData));
  CharacterDBAtBoxData_descriptor_ = file->message_type(159);
  static const int CharacterDBAtBoxData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAtBoxData, use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAtBoxData, time_),
  };
  CharacterDBAtBoxData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBAtBoxData_descriptor_,
      CharacterDBAtBoxData::default_instance_,
      CharacterDBAtBoxData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAtBoxData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAtBoxData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBAtBoxData));
  CharDBAncientShopProto_descriptor_ = file->message_type(160);
  static const int CharDBAncientShopProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopProto, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopProto, exchge_),
  };
  CharDBAncientShopProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharDBAncientShopProto_descriptor_,
      CharDBAncientShopProto::default_instance_,
      CharDBAncientShopProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharDBAncientShopProto));
  CharDBAncientShopData_descriptor_ = file->message_type(161);
  static const int CharDBAncientShopData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, score_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, dia_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, free_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, fresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, reset_time_),
  };
  CharDBAncientShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharDBAncientShopData_descriptor_,
      CharDBAncientShopData::default_instance_,
      CharDBAncientShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDBAncientShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharDBAncientShopData));
  CharacterDBAncientData_descriptor_ = file->message_type(162);
  static const int CharacterDBAncientData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAncientData, bless_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAncientData, score_incr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAncientData, shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAncientData, bless_reset_time_),
  };
  CharacterDBAncientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBAncientData_descriptor_,
      CharacterDBAncientData::default_instance_,
      CharacterDBAncientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAncientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAncientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBAncientData));
  ChooseGiftData_descriptor_ = file->message_type(163);
  static const int ChooseGiftData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseGiftData, activetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseGiftData, headstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseGiftData, rechargeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseGiftData, rechargeindexstate_),
  };
  ChooseGiftData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChooseGiftData_descriptor_,
      ChooseGiftData::default_instance_,
      ChooseGiftData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseGiftData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseGiftData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChooseGiftData));
  CharacterDBActivityData_descriptor_ = file->message_type(164);
  static const int CharacterDBActivityData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, scuffle_cross_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, scuffle_local_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, chaos_dragons_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, asharm_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, solo_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, box_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, ancient_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, choosegift_data_),
  };
  CharacterDBActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBActivityData_descriptor_,
      CharacterDBActivityData::default_instance_,
      CharacterDBActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBActivityData));
  SOAcitveTotalRechargeData_descriptor_ = file->message_type(165);
  static const int SOAcitveTotalRechargeData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveTotalRechargeData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveTotalRechargeData, pageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveTotalRechargeData, rechargevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveTotalRechargeData, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveTotalRechargeData, rechargeholy_),
  };
  SOAcitveTotalRechargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SOAcitveTotalRechargeData_descriptor_,
      SOAcitveTotalRechargeData::default_instance_,
      SOAcitveTotalRechargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveTotalRechargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveTotalRechargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SOAcitveTotalRechargeData));
  SOAcitveAdvanceData_descriptor_ = file->message_type(166);
  static const int SOAcitveAdvanceData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveAdvanceData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveAdvanceData, pageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveAdvanceData, advancevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveAdvanceData, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveAdvanceData, advancevaluemap_),
  };
  SOAcitveAdvanceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SOAcitveAdvanceData_descriptor_,
      SOAcitveAdvanceData::default_instance_,
      SOAcitveAdvanceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveAdvanceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveAdvanceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SOAcitveAdvanceData));
  SOAcitveGoodsData_descriptor_ = file->message_type(167);
  static const int SOAcitveGoodsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveGoodsData, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveGoodsData, pageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveGoodsData, buycount_),
  };
  SOAcitveGoodsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SOAcitveGoodsData_descriptor_,
      SOAcitveGoodsData::default_instance_,
      SOAcitveGoodsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveGoodsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOAcitveGoodsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SOAcitveGoodsData));
  CharacterDBSOAcitveData_descriptor_ = file->message_type(168);
  static const int CharacterDBSOAcitveData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSOAcitveData, totalrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSOAcitveData, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSOAcitveData, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSOAcitveData, redpointclickdata_),
  };
  CharacterDBSOAcitveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSOAcitveData_descriptor_,
      CharacterDBSOAcitveData::default_instance_,
      CharacterDBSOAcitveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSOAcitveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSOAcitveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSOAcitveData));
  CharacterDBUseItemData_descriptor_ = file->message_type(169);
  static const int CharacterDBUseItemData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBUseItemData, itemusetimes_),
  };
  CharacterDBUseItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBUseItemData_descriptor_,
      CharacterDBUseItemData::default_instance_,
      CharacterDBUseItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBUseItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBUseItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBUseItemData));
  CharacterDBDayUseItemData_descriptor_ = file->message_type(170);
  static const int CharacterDBDayUseItemData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDayUseItemData, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDayUseItemData, itemusetimes_),
  };
  CharacterDBDayUseItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDayUseItemData_descriptor_,
      CharacterDBDayUseItemData::default_instance_,
      CharacterDBDayUseItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDayUseItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDayUseItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDayUseItemData));
  MysteryShopDBData_descriptor_ = file->message_type(171);
  static const int MysteryShopDBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysteryShopDBData, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysteryShopDBData, nstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysteryShopDBData, nfinishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysteryShopDBData, nstate_),
  };
  MysteryShopDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysteryShopDBData_descriptor_,
      MysteryShopDBData::default_instance_,
      MysteryShopDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysteryShopDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysteryShopDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysteryShopDBData));
  CharacterDBMysteryShopData_descriptor_ = file->message_type(172);
  static const int CharacterDBMysteryShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMysteryShopData, datalist_),
  };
  CharacterDBMysteryShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMysteryShopData_descriptor_,
      CharacterDBMysteryShopData::default_instance_,
      CharacterDBMysteryShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMysteryShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMysteryShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMysteryShopData));
  CharacterDBPackageTestRebateData_descriptor_ = file->message_type(173);
  static const int CharacterDBPackageTestRebateData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, bchecked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, rechargevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, powerrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, rewardstatemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, backstatemap_),
  };
  CharacterDBPackageTestRebateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBPackageTestRebateData_descriptor_,
      CharacterDBPackageTestRebateData::default_instance_,
      CharacterDBPackageTestRebateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageTestRebateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBPackageTestRebateData));
  FuncFightDBData_descriptor_ = file->message_type(174);
  static const int FuncFightDBData_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, equip_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, equip_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, equip_strong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, stone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, equip_scrutiny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, equip_suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, equip_awake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, equip_enchant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, fatestar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, godhood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, identify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, partner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, element_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, wing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, treasure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, fantasty_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, artifact_fantasty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, horse_fantasty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, wing_fantasty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, fashion_fantasty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, partner_fantasty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, treasure_fantasty_),
  };
  FuncFightDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuncFightDBData_descriptor_,
      FuncFightDBData::default_instance_,
      FuncFightDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncFightDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuncFightDBData));
  PowerInfo_descriptor_ = file->message_type(175);
  static const int PowerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, curbuynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, skillupdateid_),
  };
  PowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerInfo_descriptor_,
      PowerInfo::default_instance_,
      PowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerInfo));
  PowerInfoDBList_descriptor_ = file->message_type(176);
  static const int PowerInfoDBList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfoDBList, infos_),
  };
  PowerInfoDBList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerInfoDBList_descriptor_,
      PowerInfoDBList::default_instance_,
      PowerInfoDBList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfoDBList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerInfoDBList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerInfoDBList));
  OccupationTaskInfo_descriptor_ = file->message_type(177);
  static const int OccupationTaskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationTaskInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationTaskInfo, curvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationTaskInfo, taskstate_),
  };
  OccupationTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupationTaskInfo_descriptor_,
      OccupationTaskInfo::default_instance_,
      OccupationTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupationTaskInfo));
  OccupationTakeList_descriptor_ = file->message_type(178);
  static const int OccupationTakeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationTakeList, tasks_),
  };
  OccupationTakeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupationTakeList_descriptor_,
      OccupationTakeList::default_instance_,
      OccupationTakeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationTakeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationTakeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupationTakeList));
  ComStarInfo_descriptor_ = file->message_type(179);
  static const int ComStarInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComStarInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComStarInfo, star_lv_),
  };
  ComStarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComStarInfo_descriptor_,
      ComStarInfo::default_instance_,
      ComStarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComStarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComStarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComStarInfo));
  CharacterDBHeadSetData_descriptor_ = file->message_type(180);
  static const int CharacterDBHeadSetData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHeadSetData, headlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHeadSetData, cur_head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHeadSetData, framelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHeadSetData, cur_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHeadSetData, bubblelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHeadSetData, cur_bubble_id_),
  };
  CharacterDBHeadSetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBHeadSetData_descriptor_,
      CharacterDBHeadSetData::default_instance_,
      CharacterDBHeadSetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHeadSetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHeadSetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBHeadSetData));
  CharacterDBOnlineGiftInfo_descriptor_ = file->message_type(181);
  static const int CharacterDBOnlineGiftInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftInfo, state_),
  };
  CharacterDBOnlineGiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBOnlineGiftInfo_descriptor_,
      CharacterDBOnlineGiftInfo::default_instance_,
      CharacterDBOnlineGiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBOnlineGiftInfo));
  CharacterDBOnlineGiftData_descriptor_ = file->message_type(182);
  static const int CharacterDBOnlineGiftData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftData, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftData, reset_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftData, lasttime_),
  };
  CharacterDBOnlineGiftData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBOnlineGiftData_descriptor_,
      CharacterDBOnlineGiftData::default_instance_,
      CharacterDBOnlineGiftData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBOnlineGiftData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBOnlineGiftData));
  CharDropItemDBProto_descriptor_ = file->message_type(183);
  static const int CharDropItemDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropItemDBProto, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropItemDBProto, num_),
  };
  CharDropItemDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharDropItemDBProto_descriptor_,
      CharDropItemDBProto::default_instance_,
      CharDropItemDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropItemDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropItemDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharDropItemDBProto));
  CharDropMultItemDBProto_descriptor_ = file->message_type(184);
  static const int CharDropMultItemDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropMultItemDBProto, info_),
  };
  CharDropMultItemDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharDropMultItemDBProto_descriptor_,
      CharDropMultItemDBProto::default_instance_,
      CharDropMultItemDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropMultItemDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropMultItemDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharDropMultItemDBProto));
  CharDropLimitDBData_descriptor_ = file->message_type(185);
  static const int CharDropLimitDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropLimitDBData, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropLimitDBData, fresh_time_),
  };
  CharDropLimitDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharDropLimitDBData_descriptor_,
      CharDropLimitDBData::default_instance_,
      CharDropLimitDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropLimitDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharDropLimitDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharDropLimitDBData));
  CharacterDBGmHelpData_descriptor_ = file->message_type(186);
  static const int CharacterDBGmHelpData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, helptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, helpday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, applytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, applyday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, helpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, helpstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, applyresult_),
  };
  CharacterDBGmHelpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBGmHelpData_descriptor_,
      CharacterDBGmHelpData::default_instance_,
      CharacterDBGmHelpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGmHelpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBGmHelpData));
  GMToolsDB_descriptor_ = file->message_type(187);
  static const int GMToolsDB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToolsDB, gifts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToolsDB, unlimits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToolsDB, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToolsDB, cur_use_),
  };
  GMToolsDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToolsDB_descriptor_,
      GMToolsDB::default_instance_,
      GMToolsDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToolsDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToolsDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToolsDB));
  CharacterDBGodGMData_descriptor_ = file->message_type(188);
  static const int CharacterDBGodGMData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, curtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, curexchangenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, normalgiftstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, seniorgiftstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, gmtool_),
  };
  CharacterDBGodGMData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBGodGMData_descriptor_,
      CharacterDBGodGMData::default_instance_,
      CharacterDBGodGMData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBGodGMData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBGodGMData));
  BowlDBRewardProto_descriptor_ = file->message_type(189);
  static const int BowlDBRewardProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBRewardProto, recharge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBRewardProto, count_),
  };
  BowlDBRewardProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BowlDBRewardProto_descriptor_,
      BowlDBRewardProto::default_instance_,
      BowlDBRewardProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBRewardProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBRewardProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BowlDBRewardProto));
  BowlDBData_descriptor_ = file->message_type(190);
  static const int BowlDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBData, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBData, info_),
  };
  BowlDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BowlDBData_descriptor_,
      BowlDBData::default_instance_,
      BowlDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BowlDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BowlDBData));
  HidePeriodDBProto_descriptor_ = file->message_type(191);
  static const int HidePeriodDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidePeriodDBProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidePeriodDBProto, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidePeriodDBProto, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidePeriodDBProto, lasttime_),
  };
  HidePeriodDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HidePeriodDBProto_descriptor_,
      HidePeriodDBProto::default_instance_,
      HidePeriodDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidePeriodDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HidePeriodDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HidePeriodDBProto));
  CharacterDBHideData_descriptor_ = file->message_type(192);
  static const int CharacterDBHideData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, forever_quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, unit_quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, unit_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, unit_once_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, f_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, period_),
  };
  CharacterDBHideData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBHideData_descriptor_,
      CharacterDBHideData::default_instance_,
      CharacterDBHideData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBHideData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBHideData));
  tbRoleInfo_descriptor_ = file->message_type(193);
  static const int tbRoleInfo_offsets_[60] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, bornzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, deletechartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, basedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, taskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, extenddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, equipdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, duplicatedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, achievementdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, buffdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, arenadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, titledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, operatelimitdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, huoyuedudata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, operatedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, playeractiveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, cpaydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, unlockinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, emblemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, identifydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, elementdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, fashiondata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, wingdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, mountdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, bossdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, pvpdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, treasure_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, artifact_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, fatestardata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, convoydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, daily_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, field_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, vipdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, partnerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, malldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, godhooddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, recoverydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, activitydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, soactivitydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, useitemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, dayuseitemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, mysteryshop_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, packagetestrebate_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, fight_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, power_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, occupation_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, headset_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, online_gift_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, droplimit_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, gmhelp_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, godgm_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, bowl_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, bagitemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, hide_data_),
  };
  tbRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbRoleInfo_descriptor_,
      tbRoleInfo::default_instance_,
      tbRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbRoleInfo));
  CharacterDBSimpleInfo_descriptor_ = file->message_type(194);
  static const int CharacterDBSimpleInfo_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, enter_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, enter_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, enterposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, enterposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, enterposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, lastsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, lastposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, lastposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, lastposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, deletechartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, totalpay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, clx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, cly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, clz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, aptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, finish_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, palace_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, palace_break_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, dirty_),
  };
  CharacterDBSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSimpleInfo_descriptor_,
      CharacterDBSimpleInfo::default_instance_,
      CharacterDBSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSimpleInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_5flogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PacketMsg_descriptor_, &PacketMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerPacketMsg_descriptor_, &ServerPacketMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldExternalConfig_descriptor_, &WorldExternalConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharFacadeProto_descriptor_, &CharFacadeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharTrimProto_descriptor_, &CharTrimProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceDupProto_descriptor_, &ForceDupProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharMultTrimProto_descriptor_, &CharMultTrimProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBBaseInfo_descriptor_, &CharacterDBBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr_descriptor_, &Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr64_descriptor_, &Attr64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrEx64_descriptor_, &AttrEx64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldItemAttrInfo_descriptor_, &FieldItemAttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryEquipInfo_descriptor_, &MarryEquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComposeSingleCostProto_descriptor_, &ComposeSingleCostProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComposeCostProto_descriptor_, &ComposeCostProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blustarAttr_descriptor_, &blustarAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemProtoInfo_descriptor_, &ItemProtoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBPackageBag_descriptor_, &CharacterDBPackageBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBPackageData_descriptor_, &CharacterDBPackageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMissionItemInfo_descriptor_, &CharacterDBMissionItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMissionTrack_descriptor_, &CharacterDBMissionTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDyMissionInfo_descriptor_, &CharacterDBDyMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBRecentSubmitMission_descriptor_, &CharacterDBRecentSubmitMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBTaskData_descriptor_, &CharacterDBTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSkillItem_descriptor_, &CharacterDBSkillItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSkillData_descriptor_, &CharacterDBSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBAttrDetailInfo_descriptor_, &CharacterDBAttrDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBExtendData_descriptor_, &CharacterDBExtendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSlotProto_descriptor_, &EquipSlotProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBEquipData_descriptor_, &CharacterDBEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplicateSingleProto_descriptor_, &DuplicateSingleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplicateGroupProto_descriptor_, &DuplicateGroupProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplicateLadderExProto_descriptor_, &DuplicateLadderExProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupHistoryExpProto_descriptor_, &DupHistoryExpProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupUnionBossDBProto_descriptor_, &DupUnionBossDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupPalaceFetchDBProto_descriptor_, &DupPalaceFetchDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupPalaceMultFetchDBProto_descriptor_, &DupPalaceMultFetchDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupUnionPalaceDBProto_descriptor_, &DupUnionPalaceDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDuplicateData_descriptor_, &CharacterDBDuplicateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleAchievementDBData_descriptor_, &SingleAchievementDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupAchievementDBData_descriptor_, &GroupAchievementDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterAchievementDBData_descriptor_, &CharacterAchievementDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectParamProto_descriptor_, &EffectParamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultEffectParamProto_descriptor_, &MultEffectParamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffBagInfo_descriptor_, &BuffBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterBuffData_descriptor_, &CharacterBuffData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterArenaData_descriptor_, &CharacterArenaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterTitleInfo_descriptor_, &CharacterTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterTitleSaveData_descriptor_, &CharacterTitleSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSingleOperateLimitInfo_descriptor_, &CharacterDBSingleOperateLimitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBOperateProto_descriptor_, &CharacterDBOperateProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBOperateMutProto_descriptor_, &CharacterDBOperateMutProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBOperateInfo_descriptor_, &CharacterDBOperateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBOperateLimitInfo_descriptor_, &CharacterDBOperateLimitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSingleHuoYueDuInfoInfo_descriptor_, &CharacterDBSingleHuoYueDuInfoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBHuoYueDuInfo_descriptor_, &CharacterDBHuoYueDuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndultTaskEntry_descriptor_, &IndultTaskEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndultTaskGroupEntry_descriptor_, &IndultTaskGroupEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColPointsTaskEntry_descriptor_, &ColPointsTaskEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColPointsTaskGroupEntry_descriptor_, &ColPointsTaskGroupEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColPointsTaskData_descriptor_, &ColPointsTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareDailySignInDBData_descriptor_, &WelfareDailySignInDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareLoginGiftDBData_descriptor_, &WelfareLoginGiftDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareLevelGiftDBData_descriptor_, &WelfareLevelGiftDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommodityEntry_descriptor_, &CommodityEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitShopGroupEntry_descriptor_, &LimitShopGroupEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitShopData_descriptor_, &LimitShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitTaskEntry_descriptor_, &LimitTaskEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitTaskGroupEntry_descriptor_, &LimitTaskGroupEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitTaskData_descriptor_, &LimitTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WishDBTypeEntry_descriptor_, &WishDBTypeEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WishDBData_descriptor_, &WishDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalInvestDBData_descriptor_, &FestivalInvestDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalExchangeDBData_descriptor_, &FestivalExchangeDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalLoginDBData_descriptor_, &FestivalLoginDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalTotalRechargeDBData_descriptor_, &FestivalTotalRechargeDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalConsumptionDBData_descriptor_, &FestivalConsumptionDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalKillBossData_descriptor_, &FestivalKillBossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalZhiChongData_descriptor_, &FestivalZhiChongData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalPreRechargeData_descriptor_, &FestivalPreRechargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalSuperDBData_descriptor_, &FestivalSuperDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalSuperDoubleDBData_descriptor_, &FestivalSuperDoubleDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalHuoYueDuDBData_descriptor_, &FestivalHuoYueDuDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalFirstRechargeDBData_descriptor_, &FestivalFirstRechargeDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalYanHuaDBData_descriptor_, &FestivalYanHuaDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalBigYanHuaDBData_descriptor_, &FestivalBigYanHuaDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalShopDBData_descriptor_, &FestivalShopDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitGiftDBData_descriptor_, &LimitGiftDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitGiftActiveDBData_descriptor_, &LimitGiftActiveDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FRechargeDBData_descriptor_, &FRechargeDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FRechargeActiveDBData_descriptor_, &FRechargeActiveDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FSmashEggDBData_descriptor_, &FSmashEggDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalSmashEggDBData_descriptor_, &FestivalSmashEggDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateReward_descriptor_, &OperateReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateDailyRechargeData_descriptor_, &OperateDailyRechargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateMoonCardData_descriptor_, &OperateMoonCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateFundData_descriptor_, &OperateFundData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateFirstRechargeType_descriptor_, &OperateFirstRechargeType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateFirstRechargeData_descriptor_, &OperateFirstRechargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareVipGiftDBData_descriptor_, &WelfareVipGiftDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HoroscopeJackpotDBData_descriptor_, &HoroscopeJackpotDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HoroscopeActiveDBData_descriptor_, &HoroscopeActiveDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WelfareOnlineGiftDBData_descriptor_, &WelfareOnlineGiftDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationTurntableTaskDBData_descriptor_, &OperationTurntableTaskDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationTurntableDBData_descriptor_, &OperationTurntableDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationTutoraskDBData_descriptor_, &OperationTutoraskDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationTutorDBData_descriptor_, &OperationTutorDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    limitInfo_descriptor_, &limitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalWorldBossData_descriptor_, &FestivalWorldBossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateCommonEntryData_descriptor_, &OperateCommonEntryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateWingGiftData_descriptor_, &OperateWingGiftData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateRechargeGiftData_descriptor_, &OperateRechargeGiftData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBOperateData_descriptor_, &CharacterDBOperateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerActiveAnswerData_descriptor_, &PlayerActiveAnswerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBActiveInfo_descriptor_, &CharacterDBActiveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayCountDBProto_descriptor_, &PayCountDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineRetDBProto_descriptor_, &OfflineRetDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterPayData_descriptor_, &CharacterPayData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockInfo_descriptor_, &FunctionUnlockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmblemSlot_descriptor_, &EmblemSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBEmblemData_descriptor_, &CharacterDBEmblemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBIdentifyData_descriptor_, &CharacterDBIdentifyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElementInfoData_descriptor_, &ElementInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBElementData_descriptor_, &CharacterDBElementData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBFashionData_descriptor_, &CharacterDBFashionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBWingData_descriptor_, &CharacterDBWingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBPartnerData_descriptor_, &CharacterDBPartnerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMountData_descriptor_, &CharacterDBMountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBossDataInfo_descriptor_, &PlayerBossDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBBossAttentInfo_descriptor_, &CharacterDBBossAttentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBBossData_descriptor_, &CharacterDBBossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedPlayerInfo_descriptor_, &RedPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBPvpData_descriptor_, &CharacterDBPvpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBTreasureData_descriptor_, &CharacterDBTreasureData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactInfo_descriptor_, &ArtifactInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBArtifactData_descriptor_, &CharacterDBArtifactData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBFateStarData_descriptor_, &CharacterDBFateStarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBConvoyData_descriptor_, &CharacterDBConvoyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDailyEntry_descriptor_, &CharacterDBDailyEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDailyData_descriptor_, &CharacterDBDailyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldCylstalInfo_descriptor_, &FieldCylstalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldExInfo_descriptor_, &FieldExInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBFieldData_descriptor_, &CharacterDBFieldData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vipGiftDBData_descriptor_, &vipGiftDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipTCardInfo_descriptor_, &VipTCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipTCardData_descriptor_, &VipTCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBVipData_descriptor_, &CharacterDBVipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMallData_descriptor_, &CharacterDBMallData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodhoodSlot_descriptor_, &GodhoodSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBGodhoodData_descriptor_, &CharacterDBGodhoodData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoveryCompleteDBData_descriptor_, &RecoveryCompleteDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoveryDBReward_descriptor_, &RecoveryDBReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoveryDBData_descriptor_, &RecoveryDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBRecoveryData_descriptor_, &CharacterDBRecoveryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBActivityScuffleData_descriptor_, &CharacterDBActivityScuffleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBActivityChaosDragonsData_descriptor_, &CharacterDBActivityChaosDragonsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBActivityAsharmData_descriptor_, &CharacterDBActivityAsharmData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBCombatTeamData_descriptor_, &CharacterDBCombatTeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSoloData_descriptor_, &CharacterDBSoloData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBAtBoxData_descriptor_, &CharacterDBAtBoxData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharDBAncientShopProto_descriptor_, &CharDBAncientShopProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharDBAncientShopData_descriptor_, &CharDBAncientShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBAncientData_descriptor_, &CharacterDBAncientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChooseGiftData_descriptor_, &ChooseGiftData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBActivityData_descriptor_, &CharacterDBActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SOAcitveTotalRechargeData_descriptor_, &SOAcitveTotalRechargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SOAcitveAdvanceData_descriptor_, &SOAcitveAdvanceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SOAcitveGoodsData_descriptor_, &SOAcitveGoodsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSOAcitveData_descriptor_, &CharacterDBSOAcitveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBUseItemData_descriptor_, &CharacterDBUseItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDayUseItemData_descriptor_, &CharacterDBDayUseItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysteryShopDBData_descriptor_, &MysteryShopDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMysteryShopData_descriptor_, &CharacterDBMysteryShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBPackageTestRebateData_descriptor_, &CharacterDBPackageTestRebateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuncFightDBData_descriptor_, &FuncFightDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerInfo_descriptor_, &PowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerInfoDBList_descriptor_, &PowerInfoDBList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupationTaskInfo_descriptor_, &OccupationTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupationTakeList_descriptor_, &OccupationTakeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComStarInfo_descriptor_, &ComStarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBHeadSetData_descriptor_, &CharacterDBHeadSetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBOnlineGiftInfo_descriptor_, &CharacterDBOnlineGiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBOnlineGiftData_descriptor_, &CharacterDBOnlineGiftData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharDropItemDBProto_descriptor_, &CharDropItemDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharDropMultItemDBProto_descriptor_, &CharDropMultItemDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharDropLimitDBData_descriptor_, &CharDropLimitDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBGmHelpData_descriptor_, &CharacterDBGmHelpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToolsDB_descriptor_, &GMToolsDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBGodGMData_descriptor_, &CharacterDBGodGMData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BowlDBRewardProto_descriptor_, &BowlDBRewardProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BowlDBData_descriptor_, &BowlDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HidePeriodDBProto_descriptor_, &HidePeriodDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBHideData_descriptor_, &CharacterDBHideData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbRoleInfo_descriptor_, &tbRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSimpleInfo_descriptor_, &CharacterDBSimpleInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_5flogic_2eproto() {
  delete PacketMsg::default_instance_;
  delete PacketMsg_reflection_;
  delete ServerPacketMsg::default_instance_;
  delete ServerPacketMsg_reflection_;
  delete WorldExternalConfig::default_instance_;
  delete WorldExternalConfig_reflection_;
  delete CharFacadeProto::default_instance_;
  delete CharFacadeProto_reflection_;
  delete CharTrimProto::default_instance_;
  delete CharTrimProto_reflection_;
  delete ForceDupProto::default_instance_;
  delete ForceDupProto_reflection_;
  delete CharMultTrimProto::default_instance_;
  delete CharMultTrimProto_reflection_;
  delete CharacterDBBaseInfo::default_instance_;
  delete CharacterDBBaseInfo_reflection_;
  delete Attr::default_instance_;
  delete Attr_reflection_;
  delete Attr64::default_instance_;
  delete Attr64_reflection_;
  delete AttrEx64::default_instance_;
  delete AttrEx64_reflection_;
  delete FieldItemAttrInfo::default_instance_;
  delete FieldItemAttrInfo_reflection_;
  delete MarryEquipInfo::default_instance_;
  delete MarryEquipInfo_reflection_;
  delete ComposeSingleCostProto::default_instance_;
  delete ComposeSingleCostProto_reflection_;
  delete ComposeCostProto::default_instance_;
  delete ComposeCostProto_reflection_;
  delete blustarAttr::default_instance_;
  delete blustarAttr_reflection_;
  delete ItemProtoInfo::default_instance_;
  delete ItemProtoInfo_reflection_;
  delete CharacterDBPackageBag::default_instance_;
  delete CharacterDBPackageBag_reflection_;
  delete CharacterDBPackageData::default_instance_;
  delete CharacterDBPackageData_reflection_;
  delete CharacterDBMissionItemInfo::default_instance_;
  delete CharacterDBMissionItemInfo_reflection_;
  delete CharacterDBMissionTrack::default_instance_;
  delete CharacterDBMissionTrack_reflection_;
  delete CharacterDBDyMissionInfo::default_instance_;
  delete CharacterDBDyMissionInfo_reflection_;
  delete CharacterDBRecentSubmitMission::default_instance_;
  delete CharacterDBRecentSubmitMission_reflection_;
  delete CharacterDBTaskData::default_instance_;
  delete CharacterDBTaskData_reflection_;
  delete CharacterDBSkillItem::default_instance_;
  delete CharacterDBSkillItem_reflection_;
  delete CharacterDBSkillData::default_instance_;
  delete CharacterDBSkillData_reflection_;
  delete CharacterDBAttrDetailInfo::default_instance_;
  delete CharacterDBAttrDetailInfo_reflection_;
  delete CharacterDBExtendData::default_instance_;
  delete CharacterDBExtendData_reflection_;
  delete EquipSlotProto::default_instance_;
  delete EquipSlotProto_reflection_;
  delete CharacterDBEquipData::default_instance_;
  delete CharacterDBEquipData_reflection_;
  delete DuplicateSingleProto::default_instance_;
  delete DuplicateSingleProto_reflection_;
  delete DuplicateGroupProto::default_instance_;
  delete DuplicateGroupProto_reflection_;
  delete DuplicateLadderExProto::default_instance_;
  delete DuplicateLadderExProto_reflection_;
  delete DupHistoryExpProto::default_instance_;
  delete DupHistoryExpProto_reflection_;
  delete DupUnionBossDBProto::default_instance_;
  delete DupUnionBossDBProto_reflection_;
  delete DupPalaceFetchDBProto::default_instance_;
  delete DupPalaceFetchDBProto_reflection_;
  delete DupPalaceMultFetchDBProto::default_instance_;
  delete DupPalaceMultFetchDBProto_reflection_;
  delete DupUnionPalaceDBProto::default_instance_;
  delete DupUnionPalaceDBProto_reflection_;
  delete CharacterDBDuplicateData::default_instance_;
  delete CharacterDBDuplicateData_reflection_;
  delete SingleAchievementDBData::default_instance_;
  delete SingleAchievementDBData_reflection_;
  delete GroupAchievementDBData::default_instance_;
  delete GroupAchievementDBData_reflection_;
  delete CharacterAchievementDBData::default_instance_;
  delete CharacterAchievementDBData_reflection_;
  delete EffectParamProto::default_instance_;
  delete EffectParamProto_reflection_;
  delete MultEffectParamProto::default_instance_;
  delete MultEffectParamProto_reflection_;
  delete BuffBagInfo::default_instance_;
  delete BuffBagInfo_reflection_;
  delete CharacterBuffData::default_instance_;
  delete CharacterBuffData_reflection_;
  delete CharacterArenaData::default_instance_;
  delete CharacterArenaData_reflection_;
  delete CharacterTitleInfo::default_instance_;
  delete CharacterTitleInfo_reflection_;
  delete CharacterTitleSaveData::default_instance_;
  delete CharacterTitleSaveData_reflection_;
  delete CharacterDBSingleOperateLimitInfo::default_instance_;
  delete CharacterDBSingleOperateLimitInfo_reflection_;
  delete CharacterDBOperateProto::default_instance_;
  delete CharacterDBOperateProto_reflection_;
  delete CharacterDBOperateMutProto::default_instance_;
  delete CharacterDBOperateMutProto_reflection_;
  delete CharacterDBOperateInfo::default_instance_;
  delete CharacterDBOperateInfo_reflection_;
  delete CharacterDBOperateLimitInfo::default_instance_;
  delete CharacterDBOperateLimitInfo_reflection_;
  delete CharacterDBSingleHuoYueDuInfoInfo::default_instance_;
  delete CharacterDBSingleHuoYueDuInfoInfo_reflection_;
  delete CharacterDBHuoYueDuInfo::default_instance_;
  delete CharacterDBHuoYueDuInfo_reflection_;
  delete IndultTaskEntry::default_instance_;
  delete IndultTaskEntry_reflection_;
  delete IndultTaskGroupEntry::default_instance_;
  delete IndultTaskGroupEntry_reflection_;
  delete ColPointsTaskEntry::default_instance_;
  delete ColPointsTaskEntry_reflection_;
  delete ColPointsTaskGroupEntry::default_instance_;
  delete ColPointsTaskGroupEntry_reflection_;
  delete ColPointsTaskData::default_instance_;
  delete ColPointsTaskData_reflection_;
  delete WelfareDailySignInDBData::default_instance_;
  delete WelfareDailySignInDBData_reflection_;
  delete WelfareLoginGiftDBData::default_instance_;
  delete WelfareLoginGiftDBData_reflection_;
  delete WelfareLevelGiftDBData::default_instance_;
  delete WelfareLevelGiftDBData_reflection_;
  delete CommodityEntry::default_instance_;
  delete CommodityEntry_reflection_;
  delete LimitShopGroupEntry::default_instance_;
  delete LimitShopGroupEntry_reflection_;
  delete LimitShopData::default_instance_;
  delete LimitShopData_reflection_;
  delete LimitTaskEntry::default_instance_;
  delete LimitTaskEntry_reflection_;
  delete LimitTaskGroupEntry::default_instance_;
  delete LimitTaskGroupEntry_reflection_;
  delete LimitTaskData::default_instance_;
  delete LimitTaskData_reflection_;
  delete WishDBTypeEntry::default_instance_;
  delete WishDBTypeEntry_reflection_;
  delete WishDBData::default_instance_;
  delete WishDBData_reflection_;
  delete FestivalInvestDBData::default_instance_;
  delete FestivalInvestDBData_reflection_;
  delete FestivalExchangeDBData::default_instance_;
  delete FestivalExchangeDBData_reflection_;
  delete FestivalLoginDBData::default_instance_;
  delete FestivalLoginDBData_reflection_;
  delete FestivalTotalRechargeDBData::default_instance_;
  delete FestivalTotalRechargeDBData_reflection_;
  delete FestivalConsumptionDBData::default_instance_;
  delete FestivalConsumptionDBData_reflection_;
  delete FestivalKillBossData::default_instance_;
  delete FestivalKillBossData_reflection_;
  delete FestivalZhiChongData::default_instance_;
  delete FestivalZhiChongData_reflection_;
  delete FestivalPreRechargeData::default_instance_;
  delete FestivalPreRechargeData_reflection_;
  delete FestivalSuperDBData::default_instance_;
  delete FestivalSuperDBData_reflection_;
  delete FestivalSuperDoubleDBData::default_instance_;
  delete FestivalSuperDoubleDBData_reflection_;
  delete FestivalHuoYueDuDBData::default_instance_;
  delete FestivalHuoYueDuDBData_reflection_;
  delete FestivalFirstRechargeDBData::default_instance_;
  delete FestivalFirstRechargeDBData_reflection_;
  delete FestivalYanHuaDBData::default_instance_;
  delete FestivalYanHuaDBData_reflection_;
  delete FestivalBigYanHuaDBData::default_instance_;
  delete FestivalBigYanHuaDBData_reflection_;
  delete FestivalShopDBData::default_instance_;
  delete FestivalShopDBData_reflection_;
  delete LimitGiftDBData::default_instance_;
  delete LimitGiftDBData_reflection_;
  delete LimitGiftActiveDBData::default_instance_;
  delete LimitGiftActiveDBData_reflection_;
  delete FRechargeDBData::default_instance_;
  delete FRechargeDBData_reflection_;
  delete FRechargeActiveDBData::default_instance_;
  delete FRechargeActiveDBData_reflection_;
  delete FSmashEggDBData::default_instance_;
  delete FSmashEggDBData_reflection_;
  delete FestivalSmashEggDBData::default_instance_;
  delete FestivalSmashEggDBData_reflection_;
  delete OperateReward::default_instance_;
  delete OperateReward_reflection_;
  delete OperateDailyRechargeData::default_instance_;
  delete OperateDailyRechargeData_reflection_;
  delete OperateMoonCardData::default_instance_;
  delete OperateMoonCardData_reflection_;
  delete OperateFundData::default_instance_;
  delete OperateFundData_reflection_;
  delete OperateFirstRechargeType::default_instance_;
  delete OperateFirstRechargeType_reflection_;
  delete OperateFirstRechargeData::default_instance_;
  delete OperateFirstRechargeData_reflection_;
  delete WelfareVipGiftDBData::default_instance_;
  delete WelfareVipGiftDBData_reflection_;
  delete HoroscopeJackpotDBData::default_instance_;
  delete HoroscopeJackpotDBData_reflection_;
  delete HoroscopeActiveDBData::default_instance_;
  delete HoroscopeActiveDBData_reflection_;
  delete WelfareOnlineGiftDBData::default_instance_;
  delete WelfareOnlineGiftDBData_reflection_;
  delete OperationTurntableTaskDBData::default_instance_;
  delete OperationTurntableTaskDBData_reflection_;
  delete OperationTurntableDBData::default_instance_;
  delete OperationTurntableDBData_reflection_;
  delete OperationTutoraskDBData::default_instance_;
  delete OperationTutoraskDBData_reflection_;
  delete OperationTutorDBData::default_instance_;
  delete OperationTutorDBData_reflection_;
  delete limitInfo::default_instance_;
  delete limitInfo_reflection_;
  delete FestivalWorldBossData::default_instance_;
  delete FestivalWorldBossData_reflection_;
  delete OperateCommonEntryData::default_instance_;
  delete OperateCommonEntryData_reflection_;
  delete OperateWingGiftData::default_instance_;
  delete OperateWingGiftData_reflection_;
  delete OperateRechargeGiftData::default_instance_;
  delete OperateRechargeGiftData_reflection_;
  delete CharacterDBOperateData::default_instance_;
  delete CharacterDBOperateData_reflection_;
  delete PlayerActiveAnswerData::default_instance_;
  delete PlayerActiveAnswerData_reflection_;
  delete CharacterDBActiveInfo::default_instance_;
  delete CharacterDBActiveInfo_reflection_;
  delete PayCountDBProto::default_instance_;
  delete PayCountDBProto_reflection_;
  delete OfflineRetDBProto::default_instance_;
  delete OfflineRetDBProto_reflection_;
  delete CharacterPayData::default_instance_;
  delete CharacterPayData_reflection_;
  delete FunctionUnlockInfo::default_instance_;
  delete FunctionUnlockInfo_reflection_;
  delete EmblemSlot::default_instance_;
  delete EmblemSlot_reflection_;
  delete CharacterDBEmblemData::default_instance_;
  delete CharacterDBEmblemData_reflection_;
  delete CharacterDBIdentifyData::default_instance_;
  delete CharacterDBIdentifyData_reflection_;
  delete ElementInfoData::default_instance_;
  delete ElementInfoData_reflection_;
  delete CharacterDBElementData::default_instance_;
  delete CharacterDBElementData_reflection_;
  delete CharacterDBFashionData::default_instance_;
  delete CharacterDBFashionData_reflection_;
  delete CharacterDBWingData::default_instance_;
  delete CharacterDBWingData_reflection_;
  delete CharacterDBPartnerData::default_instance_;
  delete CharacterDBPartnerData_reflection_;
  delete CharacterDBMountData::default_instance_;
  delete CharacterDBMountData_reflection_;
  delete PlayerBossDataInfo::default_instance_;
  delete PlayerBossDataInfo_reflection_;
  delete CharacterDBBossAttentInfo::default_instance_;
  delete CharacterDBBossAttentInfo_reflection_;
  delete CharacterDBBossData::default_instance_;
  delete CharacterDBBossData_reflection_;
  delete RedPlayerInfo::default_instance_;
  delete RedPlayerInfo_reflection_;
  delete CharacterDBPvpData::default_instance_;
  delete CharacterDBPvpData_reflection_;
  delete CharacterDBTreasureData::default_instance_;
  delete CharacterDBTreasureData_reflection_;
  delete ArtifactInfo::default_instance_;
  delete ArtifactInfo_reflection_;
  delete CharacterDBArtifactData::default_instance_;
  delete CharacterDBArtifactData_reflection_;
  delete CharacterDBFateStarData::default_instance_;
  delete CharacterDBFateStarData_reflection_;
  delete CharacterDBConvoyData::default_instance_;
  delete CharacterDBConvoyData_reflection_;
  delete CharacterDBDailyEntry::default_instance_;
  delete CharacterDBDailyEntry_reflection_;
  delete CharacterDBDailyData::default_instance_;
  delete CharacterDBDailyData_reflection_;
  delete FieldCylstalInfo::default_instance_;
  delete FieldCylstalInfo_reflection_;
  delete FieldExInfo::default_instance_;
  delete FieldExInfo_reflection_;
  delete CharacterDBFieldData::default_instance_;
  delete CharacterDBFieldData_reflection_;
  delete vipGiftDBData::default_instance_;
  delete vipGiftDBData_reflection_;
  delete VipTCardInfo::default_instance_;
  delete VipTCardInfo_reflection_;
  delete VipTCardData::default_instance_;
  delete VipTCardData_reflection_;
  delete CharacterDBVipData::default_instance_;
  delete CharacterDBVipData_reflection_;
  delete CharacterDBMallData::default_instance_;
  delete CharacterDBMallData_reflection_;
  delete GodhoodSlot::default_instance_;
  delete GodhoodSlot_reflection_;
  delete CharacterDBGodhoodData::default_instance_;
  delete CharacterDBGodhoodData_reflection_;
  delete RecoveryCompleteDBData::default_instance_;
  delete RecoveryCompleteDBData_reflection_;
  delete RecoveryDBReward::default_instance_;
  delete RecoveryDBReward_reflection_;
  delete RecoveryDBData::default_instance_;
  delete RecoveryDBData_reflection_;
  delete CharacterDBRecoveryData::default_instance_;
  delete CharacterDBRecoveryData_reflection_;
  delete CharacterDBActivityScuffleData::default_instance_;
  delete CharacterDBActivityScuffleData_reflection_;
  delete CharacterDBActivityChaosDragonsData::default_instance_;
  delete CharacterDBActivityChaosDragonsData_reflection_;
  delete CharacterDBActivityAsharmData::default_instance_;
  delete CharacterDBActivityAsharmData_reflection_;
  delete CharacterDBCombatTeamData::default_instance_;
  delete CharacterDBCombatTeamData_reflection_;
  delete CharacterDBSoloData::default_instance_;
  delete CharacterDBSoloData_reflection_;
  delete CharacterDBAtBoxData::default_instance_;
  delete CharacterDBAtBoxData_reflection_;
  delete CharDBAncientShopProto::default_instance_;
  delete CharDBAncientShopProto_reflection_;
  delete CharDBAncientShopData::default_instance_;
  delete CharDBAncientShopData_reflection_;
  delete CharacterDBAncientData::default_instance_;
  delete CharacterDBAncientData_reflection_;
  delete ChooseGiftData::default_instance_;
  delete ChooseGiftData_reflection_;
  delete CharacterDBActivityData::default_instance_;
  delete CharacterDBActivityData_reflection_;
  delete SOAcitveTotalRechargeData::default_instance_;
  delete SOAcitveTotalRechargeData_reflection_;
  delete SOAcitveAdvanceData::default_instance_;
  delete SOAcitveAdvanceData_reflection_;
  delete SOAcitveGoodsData::default_instance_;
  delete SOAcitveGoodsData_reflection_;
  delete CharacterDBSOAcitveData::default_instance_;
  delete CharacterDBSOAcitveData_reflection_;
  delete CharacterDBUseItemData::default_instance_;
  delete CharacterDBUseItemData_reflection_;
  delete CharacterDBDayUseItemData::default_instance_;
  delete CharacterDBDayUseItemData_reflection_;
  delete MysteryShopDBData::default_instance_;
  delete MysteryShopDBData_reflection_;
  delete CharacterDBMysteryShopData::default_instance_;
  delete CharacterDBMysteryShopData_reflection_;
  delete CharacterDBPackageTestRebateData::default_instance_;
  delete CharacterDBPackageTestRebateData_reflection_;
  delete FuncFightDBData::default_instance_;
  delete FuncFightDBData_reflection_;
  delete PowerInfo::default_instance_;
  delete PowerInfo_reflection_;
  delete PowerInfoDBList::default_instance_;
  delete PowerInfoDBList_reflection_;
  delete OccupationTaskInfo::default_instance_;
  delete OccupationTaskInfo_reflection_;
  delete OccupationTakeList::default_instance_;
  delete OccupationTakeList_reflection_;
  delete ComStarInfo::default_instance_;
  delete ComStarInfo_reflection_;
  delete CharacterDBHeadSetData::default_instance_;
  delete CharacterDBHeadSetData_reflection_;
  delete CharacterDBOnlineGiftInfo::default_instance_;
  delete CharacterDBOnlineGiftInfo_reflection_;
  delete CharacterDBOnlineGiftData::default_instance_;
  delete CharacterDBOnlineGiftData_reflection_;
  delete CharDropItemDBProto::default_instance_;
  delete CharDropItemDBProto_reflection_;
  delete CharDropMultItemDBProto::default_instance_;
  delete CharDropMultItemDBProto_reflection_;
  delete CharDropLimitDBData::default_instance_;
  delete CharDropLimitDBData_reflection_;
  delete CharacterDBGmHelpData::default_instance_;
  delete CharacterDBGmHelpData_reflection_;
  delete GMToolsDB::default_instance_;
  delete GMToolsDB_reflection_;
  delete CharacterDBGodGMData::default_instance_;
  delete CharacterDBGodGMData_reflection_;
  delete BowlDBRewardProto::default_instance_;
  delete BowlDBRewardProto_reflection_;
  delete BowlDBData::default_instance_;
  delete BowlDBData_reflection_;
  delete HidePeriodDBProto::default_instance_;
  delete HidePeriodDBProto_reflection_;
  delete CharacterDBHideData::default_instance_;
  delete CharacterDBHideData_reflection_;
  delete tbRoleInfo::default_instance_;
  delete tbRoleInfo_reflection_;
  delete CharacterDBSimpleInfo::default_instance_;
  delete CharacterDBSimpleInfo_reflection_;
}

void protobuf_AddDesc_common_5flogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022common_logic.proto\022\010proto_ff\032\025yd_field"
    "options.proto\032\tCom.proto\032\017ComDefine.prot"
    "o\"s\n\tPacketMsg\022\021\n\003cmd\030\001 \001(\rB\004\240\301\024\001\022\022\n\nser"
    "verType\030\002 \001(\r\022\023\n\013upper_limit\030\003 \001(\r\022\024\n\014mi"
    "n_interval\030\004 \001(\r\022\024\n\014control_time\030\005 \001(\r\"\?"
    "\n\017ServerPacketMsg\022,\n\tPacketMsg\030\001 \003(\0132\023.p"
    "roto_ff.PacketMsgB\004\240\301\024\001\"3\n\023WorldExternal"
    "Config\022\034\n\016TokenTimeCheck\030\001 \001(\010B\004\240\301\024\001\"\255\002\n"
    "\017CharFacadeProto\022\024\n\014cur_mount_id\030\001 \001(\004\022\017"
    "\n\007wing_id\030\002 \001(\004\022\032\n\022fashion_clothes_id\030\003 "
    "\001(\004\022\031\n\021fashion_weapon_id\030\004 \001(\004\022\024\n\014occupa"
    "tionId\030\005 \001(\004\022\023\n\013treasure_id\030\006 \001(\004\022\025\n\rtre"
    "asure_type\030\007 \001(\005\022\023\n\013artifact_id\030\010 \001(\004\022\033\n"
    "\023cur_select_mount_id\030\t \001(\004\022\022\n\npartner_id"
    "\030\n \001(\004\022\017\n\007head_id\030\013 \001(\004\022\020\n\010frame_id\030\014 \001("
    "\004\022\021\n\tbubble_id\030\r \001(\004\"6\n\rCharTrimProto\022\021\n"
    "\ttrim_type\030\001 \001(\005\022\022\n\ntrim_level\030\002 \001(\005\"=\n\r"
    "ForceDupProto\022\026\n\016treasure_state\030\001 \001(\005\022\024\n"
    "\014ladder_state\030\002 \001(\005\"D\n\021CharMultTrimProto"
    "\022/\n\010trim_lst\030\001 \003(\0132\027.proto_ff.CharTrimPr"
    "otoB\004\210\301\024\014\"\341\013\n\023CharacterDBBaseInfo\022\022\n\ncre"
    "ateTime\030\001 \001(\004\022\024\n\014lastSaveTime\030\002 \001(\004\022\022\n\no"
    "nlineTime\030\003 \001(\004\022\021\n\tloginTime\030\004 \001(\004\022\022\n\nlo"
    "goutTime\030\005 \001(\004\022\023\n\004name\030\006 \001(\tB\005\220\301\024\200\001\022\013\n\003s"
    "ex\030\007 \001(\r\022\014\n\004prof\030\010 \001(\r\022\r\n\005level\030\t \001(\r\022\013\n"
    "\003exp\030\n \001(\003\022\n\n\002hp\030\013 \001(\003\022\r\n\005fight\030\014 \001(\003\022\014\n"
    "\004gold\030\r \001(\004\022\017\n\007diamond\030\016 \001(\004\022\023\n\013binddiam"
    "ond\030\017 \001(\004\022\026\n\016enter_scene_id\030\020 \001(\004\022\024\n\014ent"
    "er_map_id\030\021 \001(\004\022\021\n\tenterPosX\030\022 \001(\002\022\021\n\ten"
    "terPosY\030\023 \001(\002\022\021\n\tenterPosZ\030\024 \001(\002\022\023\n\013last"
    "SceneId\030\025 \001(\004\022\021\n\tlastMapId\030\026 \001(\004\022\020\n\010last"
    "PosX\030\027 \001(\002\022\020\n\010lastPosY\030\030 \001(\002\022\020\n\010lastPosZ"
    "\030\031 \001(\002\022\026\n\016lastReviveTime\030\032 \001(\004\022\020\n\010curSta"
    "te\030\033 \001(\r\022\013\n\003clx\030\034 \001(\002\022\013\n\003cly\030\035 \001(\002\022\013\n\003cl"
    "z\030\036 \001(\002\022\022\n\noccupation\030\037 \001(\004\022\020\n\010aptitude\030"
    "  \001(\004\022)\n\006facade\030! \001(\0132\031.proto_ff.CharFac"
    "adeProto\022\021\n\tarenacoin\030\" \001(\003\022\023\n\013starEssen"
    "ce\030# \001(\003\022\017\n\007starExp\030$ \001(\003\022\024\n\014starFragmen"
    "t\030% \001(\003\022\022\n\nhangUpTime\030& \001(\003\022\022\n\nactive_nu"
    "m\030\' \001(\r\022\020\n\010vipLevel\030( \001(\003\022\022\n\ngodhoodExp\030"
    ") \001(\003\022\023\n\013smallSpirit\030* \001(\003\022\021\n\tbigSpirit\030"
    "+ \001(\003\022)\n\004trim\030, \001(\0132\033.proto_ff.CharMultT"
    "rimProto\022\023\n\013finish_flag\030- \001(\005\022\024\n\005guide\030."
    " \001(\tB\005\220\301\024\200\001\022&\n\005force\030/ \001(\0132\027.proto_ff.Fo"
    "rceDupProto\022\020\n\010useTitle\0300 \001(\003\022\024\n\014subpack"
    "_type\0301 \001(\005\022\025\n\rsubpack_fetch\0302 \001(\005\022\034\n\024re"
    "chargeDiscountDate\0303 \001(\005\022\021\n\tfriendNum\0304 "
    "\001(\005\022\025\n\006platid\0305 \001(\tB\005\220\301\024\200\001\022\022\n\nsolo_score"
    "\0306 \001(\005\022\026\n\016solo_prv_score\0307 \001(\005\022\023\n\013dragon"
    "s_num\0308 \001(\005\022\027\n\017total_login_day\0309 \001(\r\022\026\n\016"
    "login_day_time\030: \001(\004\022\022\n\nlogin_gift\030; \001(\005"
    "\022\026\n\016vipCardDiamond\030< \001(\003\022\017\n\007holydia\030= \001("
    "\004\022\022\n\nrelive_num\030> \001(\005\022\030\n\020last_relive_tim"
    "e\030\? \001(\003\022\032\n\022dead_static_map_id\030@ \001(\003\022\027\n\017d"
    "ead_static_num\030A \001(\005\022\026\n\016dead_static_cd\030B"
    " \001(\003\022\022\n\nfushi_time\030C \001(\005\022\021\n\tstarStone\030D "
    "\001(\003\022\017\n\007voucher\030E \001(\003\022\017\n\007waiguan\030F \001(\003\022\017\n"
    "\007gmpoint\030G \001(\003\022\025\n\rgmpoint_limit\030H \001(\003\"*\n"
    "\004Attr\022\017\n\007AttrNum\030\001 \001(\r\022\021\n\tAttrvalue\030\002 \001("
    "\r\",\n\006Attr64\022\017\n\007AttrNum\030\001 \001(\r\022\021\n\tAttrvalu"
    "e\030\002 \001(\003\"A\n\010AttrEx64\022\017\n\007AttrNum\030\001 \001(\r\022\021\n\t"
    "Attrvalue\030\002 \001(\004\022\021\n\tAttrIndex\030\003 \001(\r\"\251\001\n\021F"
    "ieldItemAttrInfo\022\'\n\tbase_attr\030\001 \003(\0132\016.pr"
    "oto_ff.AttrB\004\210\301\024\014\022\'\n\tstar_attr\030\002 \003(\0132\016.p"
    "roto_ff.AttrB\004\210\301\024\014\022,\n\016blue_star_attr\030\003 \003"
    "(\0132\016.proto_ff.AttrB\004\210\301\024\014\022\024\n\014refine_level"
    "\030\004 \001(\005\"I\n\016MarryEquipInfo\022\021\n\tstrong_lv\030\001 "
    "\001(\005\022\022\n\nstrong_exp\030\002 \001(\005\022\020\n\010stage_lv\030\003 \001("
    "\005\"6\n\026ComposeSingleCostProto\022\016\n\006itemid\030\001 "
    "\001(\004\022\014\n\004bind\030\002 \001(\005\"H\n\020ComposeCostProto\0224\n"
    "\004info\030\001 \003(\0132 .proto_ff.ComposeSingleCost"
    "ProtoB\004\210\301\024\014\"G\n\013blustarAttr\022\016\n\006attrid\030\001 \001"
    "(\r\022\025\n\rlevelinterval\030\002 \001(\r\022\021\n\tattrvalue\030\003"
    " \001(\r\"\225\003\n\rItemProtoInfo\022\017\n\007item_id\030\001 \001(\004\022"
    "\020\n\010item_num\030\002 \001(\003\022\014\n\004bind\030\003 \001(\005\022&\n\010basea"
    "ttr\030\004 \003(\0132\016.proto_ff.AttrB\004\210\301\024\014\022\r\n\005index"
    "\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022&\n\010refineex\030\010 \003(\0132"
    "\016.proto_ff.AttrB\004\210\301\024\014\022-\n\010con_attr\030\t \003(\0132"
    "\025.proto_ff.blustarAttrB\004\210\301\024\014\022\022\n\nexpireTi"
    "me\030\n \001(\004\022/\n\nfield_data\030\013 \001(\0132\033.proto_ff."
    "FieldItemAttrInfo\0222\n\020marry_equip_data\030\014 "
    "\001(\0132\030.proto_ff.MarryEquipInfo\022+\n\007compose"
    "\030\r \001(\0132\032.proto_ff.ComposeCostProto\022\020\n\010ou"
    "t_time\030\016 \001(\004\"\177\n\025CharacterDBPackageBag\022\024\n"
    "\014package_type\030\001 \001(\r\022\022\n\nexpand_num\030\002 \001(\r\022"
    ",\n\005items\030\003 \003(\0132\027.proto_ff.ItemProtoInfoB"
    "\004\210\301\024\014\022\016\n\006offset\030\004 \001(\005\"M\n\026CharacterDBPack"
    "ageData\0223\n\004bags\030\001 \003(\0132\037.proto_ff.Charact"
    "erDBPackageBagB\004\210\301\024\014\"\247\001\n\032CharacterDBMiss"
    "ionItemInfo\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022\024\n"
    "\014currentValue\030\003 \001(\r\022\022\n\nfinalValue\030\004 \001(\r\022"
    "\025\n\rcompletedFlag\030\005 \001(\010\022\016\n\006parma1\030\006 \001(\004\022\016"
    "\n\006parma2\030\007 \001(\004\022\016\n\006parma3\030\010 \001(\004\"\270\001\n\027Chara"
    "cterDBMissionTrack\022\021\n\tmissionId\030\001 \001(\004\022\021\n"
    "\tdynamicid\030\002 \001(\004\022\016\n\006status\030\003 \001(\r\022\031\n\021acce"
    "ptMissionTime\030\004 \001(\004\022<\n\010itemInfo\030\005 \003(\0132$."
    "proto_ff.CharacterDBMissionItemInfoB\004\210\301\024"
    "\014\022\016\n\006textid\030\006 \001(\004\"W\n\030CharacterDBDyMissio"
    "nInfo\022\024\n\014mission_type\030\001 \001(\005\022\021\n\tlastfresh"
    "\030\002 \001(\004\022\022\n\naccept_num\030\003 \001(\005\"J\n\036CharacterD"
    "BRecentSubmitMission\022\024\n\014mission_type\030\001 \001"
    "(\005\022\022\n\nmission_id\030\002 \001(\004\"\363\001\n\023CharacterDBTa"
    "skData\022=\n\014missionTrack\030\001 \003(\0132!.proto_ff."
    "CharacterDBMissionTrackB\004\210\301\024\014\0228\n\006dyinfo\030"
    "\002 \003(\0132\".proto_ff.CharacterDBDyMissionInf"
    "oB\004\210\301\024\014\022\034\n\016already_submit\030\003 \003(\004B\004\210\301\024\014\022E\n"
    "\rrecent_submit\030\004 \003(\0132(.proto_ff.Characte"
    "rDBRecentSubmitMissionB\004\210\301\024\014\"p\n\024Characte"
    "rDBSkillItem\022\017\n\007skillID\030\001 \001(\003\022\022\n\nskillLe"
    "vel\030\002 \001(\005\022\n\n\002cd\030\003 \001(\004\022\016\n\006unlock\030\004 \001(\005\022\027\n"
    "\017replace_skillid\030\005 \001(\003\"\202\001\n\024CharacterDBSk"
    "illData\0227\n\tskillList\030\001 \003(\0132\036.proto_ff.Ch"
    "aracterDBSkillItemB\004\210\301\024\024\022\030\n\nskillAttrs\030\002"
    " \003(\rB\004\210\301\024\014\022\027\n\tskillslot\030\003 \003(\003B\004\210\301\024\014\"h\n\031C"
    "haracterDBAttrDetailInfo\022%\n\005attrs\030\001 \003(\0132"
    "\020.proto_ff.Attr64B\004\210\301\024\014\022$\n\007cur_pos\030\002 \001(\013"
    "2\023.proto_ff.Vector3PB\"Q\n\025CharacterDBExte"
    "ndData\0228\n\013attr_detail\030\001 \001(\0132#.proto_ff.C"
    "haracterDBAttrDetailInfo\"\204\003\n\016EquipSlotPr"
    "oto\022\r\n\005index\030\001 \001(\005\022\017\n\007strenlv\030\002 \001(\005\022\020\n\010r"
    "efinelv\030\003 \001(\005\022\023\n\005inlay\030\004 \003(\004B\004\210\301\024\014\022\020\n\010st"
    "renexp\030\005 \001(\005\022\021\n\trefineexp\030\006 \001(\005\022\'\n\tstren"
    "Attr\030\007 \003(\0132\016.proto_ff.AttrB\004\210\301\024\014\022\024\n\014refi"
    "nepecent\030\010 \001(\003\022\035\n\025scrutinyTrepanningNum\030"
    "\t \001(\005\022.\n\014scrutinyAttr\030\n \003(\0132\022.proto_ff.A"
    "ttrEx64B\004\210\301\024\014\022\021\n\tclearStep\030\013 \001(\005\022\023\n\013clea"
    "rCombat\030\014 \001(\003\022\016\n\006suitlv\030\r \001(\005\022\032\n\022suit_re"
    "cord_max_lv\030\016 \001(\005\022\016\n\006awaklv\030\017 \001(\005\022\024\n\014enc"
    "hantinglv\030\020 \001(\005\"x\n\024CharacterDBEquipData\022"
    ",\n\005equip\030\001 \003(\0132\027.proto_ff.ItemProtoInfoB"
    "\004\210\301\024\014\0222\n\nequip_slot\030\002 \003(\0132\030.proto_ff.Equ"
    "ipSlotProtoB\004\210\301\024\014\"M\n\024DuplicateSingleProt"
    "o\022\024\n\014duplicate_id\030\001 \001(\004\022\014\n\004star\030\002 \001(\005\022\021\n"
    "\tcur_layer\030\003 \001(\005\"r\n\023DuplicateGroupProto\022"
    "\020\n\010group_id\030\001 \001(\004\022\021\n\tenter_num\030\002 \001(\005\022\021\n\t"
    "total_num\030\003 \001(\005\022\017\n\007buy_num\030\004 \001(\005\022\022\n\nlast"
    "_fresh\030\005 \001(\004\"I\n\026DuplicateLadderExProto\022\027"
    "\n\tcur_layer\030\001 \001(\005B\004\210\301\024\014\022\026\n\016last_mail_tim"
    "e\030\002 \001(\004\"7\n\022DupHistoryExpProto\022\024\n\014duplica"
    "te_id\030\001 \001(\004\022\013\n\003exp\030\002 \001(\004\"S\n\023DupUnionBoss"
    "DBProto\022\026\n\010mutex_id\030\001 \003(\004B\004\210\301\024\014\022\021\n\tlast_"
    "pass\030\002 \001(\004\022\021\n\tlast_fail\030\003 \001(\004\"O\n\025DupPala"
    "ceFetchDBProto\022\r\n\005layer\030\001 \001(\005\022\020\n\010pass_nu"
    "m\030\002 \001(\005\022\025\n\007num_lst\030\003 \003(\rB\004\210\301\024\014\"Z\n\031DupPal"
    "aceMultFetchDBProto\022=\n\016fetch_progress\030\001 "
    "\003(\0132\037.proto_ff.DupPalaceFetchDBProtoB\004\210\301"
    "\024\014\"\212\001\n\025DupUnionPalaceDBProto\022\r\n\005layer\030\001 "
    "\001(\005\022\031\n\013fetched_lst\030\002 \003(\005B\004\210\301\024\014\0222\n\005fetch\030"
    "\003 \001(\0132#.proto_ff.DupPalaceMultFetchDBPro"
    "to\022\023\n\013break_count\030\004 \001(\005\"\352\002\n\030CharacterDBD"
    "uplicateData\0227\n\tduplicate\030\001 \003(\0132\036.proto_"
    "ff.DuplicateSingleProtoB\004\210\301\024\014\0222\n\005group\030\002"
    " \003(\0132\035.proto_ff.DuplicateGroupProtoB\004\210\301\024"
    "\014\022\026\n\010open_dup\030\003 \003(\rB\004\210\301\024\014\0220\n\006ladder\030\004 \001("
    "\0132 .proto_ff.DuplicateLadderExProto\0223\n\007d"
    "up_exp\030\005 \003(\0132\034.proto_ff.DupHistoryExpPro"
    "toB\004\210\301\024\014\0221\n\nunion_boss\030\006 \001(\0132\035.proto_ff."
    "DupUnionBossDBProto\022/\n\006palace\030\007 \001(\0132\037.pr"
    "oto_ff.DupUnionPalaceDBProto\"L\n\027SingleAc"
    "hievementDBData\022\n\n\002id\030\001 \001(\004\022\016\n\006status\030\002 "
    "\001(\r\022\025\n\rcompleteCount\030\003 \001(\r\"\213\001\n\026GroupAchi"
    "evementDBData\022\020\n\010sortType\030\001 \001(\r\022D\n\023achie"
    "vementInfoList\030\002 \003(\0132!.proto_ff.SingleAc"
    "hievementDBDataB\004\210\301\024\014\022\031\n\021achievementRewa"
    "rd\030\003 \001(\r\"b\n\032CharacterAchievementDBData\022D"
    "\n\024groupAchievementData\030\001 \003(\0132 .proto_ff."
    "GroupAchievementDBDataB\004\210\301\024\014\"2\n\020EffectPa"
    "ramProto\022\016\n\006param1\030\001 \001(\003\022\016\n\006param2\030\002 \001(\003"
    "\"L\n\024MultEffectParamProto\0224\n\tparam_lst\030\001 "
    "\003(\0132\032.proto_ff.EffectParamProtoB\005\210\301\024\200\001\"\253"
    "\002\n\013BuffBagInfo\022\025\n\rbuffBagInstId\030\001 \001(\r\022\022\n"
    "\nstateBagId\030\002 \001(\004\022\024\n\014stateBagTime\030\003 \001(\r\022"
    "\023\n\013delayedTime\030\004 \001(\r\022\021\n\tisForever\030\006 \001(\010\022"
    "\017\n\007skillId\030\007 \001(\004\022\022\n\nskillLevel\030\010 \001(\r\022\021\n\t"
    "senderCid\030\n \001(\004\022\024\n\006params\030\013 \003(\004B\004\210\301\024\014\022\016\n"
    "\006status\030\014 \001(\r\022\022\n\ntargettype\030\r \001(\r\022\021\n\tsta"
    "rtTime\030\016 \001(\004\022.\n\006eparam\030\017 \001(\0132\036.proto_ff."
    "MultEffectParamProto\"u\n\021CharacterBuffDat"
    "a\022/\n\ndelayedBag\030\001 \003(\0132\025.proto_ff.BuffBag"
    "InfoB\004\210\301\024\014\022/\n\nbuffbagLst\030\002 \003(\0132\025.proto_f"
    "f.BuffBagInfoB\004\210\301\024\014\"x\n\022CharacterArenaDat"
    "a\022\026\n\016challengeTimes\030\001 \001(\r\022\022\n\nupdateTime\030"
    "\002 \001(\004\022\033\n\rhistoryRankId\030\003 \001(\r:\0045001\022\031\n\021bu"
    "yChallengeTimes\030\004 \001(\r\"W\n\022CharacterTitleI"
    "nfo\022\n\n\002id\030\001 \001(\004\022\r\n\005param\030\002 \001(\r\022\021\n\tstartT"
    "ime\030\003 \001(\004\022\023\n\004name\030\004 \001(\tB\005\220\301\024\200\001\"O\n\026Charac"
    "terTitleSaveData\0225\n\ttitelData\030\001 \003(\0132\034.pr"
    "oto_ff.CharacterTitleInfoB\004\210\301\024\014\"R\n!Chara"
    "cterDBSingleOperateLimitInfo\022\014\n\004type\030\001 \001"
    "(\r\022\r\n\005value\030\002 \001(\r\022\020\n\010lastTime\030\003 \001(\r\"2\n\027C"
    "haracterDBOperateProto\022\n\n\002id\030\001 \001(\r\022\013\n\003nu"
    "m\030\002 \001(\004\"Z\n\032CharacterDBOperateMutProto\022<\n"
    "\013operate_lst\030\001 \003(\0132!.proto_ff.CharacterD"
    "BOperateProtoB\004\210\301\024\014\"\335\006\n\026CharacterDBOpera"
    "teInfo\0227\n\tkill_mons\030\001 \001(\0132$.proto_ff.Cha"
    "racterDBOperateMutProto\022<\n\016last_kill_mon"
    "s\030\002 \001(\0132$.proto_ff.CharacterDBOperateMut"
    "Proto\0228\n\nattend_act\030\003 \001(\0132$.proto_ff.Cha"
    "racterDBOperateMutProto\022=\n\017last_attend_a"
    "ct\030\004 \001(\0132$.proto_ff.CharacterDBOperateMu"
    "tProto\0228\n\nfinish_act\030\005 \001(\0132$.proto_ff.Ch"
    "aracterDBOperateMutProto\0226\n\010pass_dup\030\006 \001"
    "(\0132$.proto_ff.CharacterDBOperateMutProto"
    "\0229\n\013coll_action\030\007 \001(\0132$.proto_ff.Charact"
    "erDBOperateMutProto\0229\n\013make_action\030\010 \001(\013"
    "2$.proto_ff.CharacterDBOperateMutProto\0225"
    "\n\007collect\030\t \001(\0132$.proto_ff.CharacterDBOp"
    "erateMutProto\0222\n\004make\030\n \001(\0132$.proto_ff.C"
    "haracterDBOperateMutProto\022\026\n\016make_gold_q"
    "uip\030\013 \001(\004\022\020\n\010identify\030\014 \001(\004\022\025\n\rarena_suc"
    "cess\030\r \001(\004\022\013\n\003die\030\016 \001(\004\022\022\n\nkill_enemy\030\017 "
    "\001(\004\022\027\n\017kill_enemy_camp\030\020 \001(\004\022\016\n\006charge\030\021"
    " \001(\004\022\014\n\004gold\030\022 \001(\004\022\020\n\010treasure\030\023 \001(\004\022\024\n\014"
    "pandos_trans\030\024 \001(\004\022\022\n\nworld_chat\030\025 \001(\004\022\026"
    "\n\016refine_success\030\026 \001(\004\022\023\n\013refine_fail\030\027 "
    "\001(\004\"\242\001\n\033CharacterDBOperateLimitInfo\022K\n\020o"
    "perateLimitInfo\030\001 \003(\0132+.proto_ff.Charact"
    "erDBSingleOperateLimitInfoB\004\210\301\024\014\0226\n\014oper"
    "ate_data\030\002 \001(\0132 .proto_ff.CharacterDBOpe"
    "rateInfo\"c\n!CharacterDBSingleHuoYueDuInf"
    "oInfo\022\014\n\004type\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\014\n\004ti"
    "me\030\003 \001(\r\022\023\n\013sin_process\030\004 \001(\r\"b\n\027Charact"
    "erDBHuoYueDuInfo\022G\n\014huoYueDuInfo\030\001 \003(\0132+"
    ".proto_ff.CharacterDBSingleHuoYueDuInfoI"
    "nfoB\004\210\301\024\014\"K\n\017IndultTaskEntry\022\023\n\013task_cfg"
    "_id\030\001 \001(\004\022\017\n\007cur_num\030\002 \001(\005\022\022\n\ntask_state"
    "\030\003 \001(\005\"z\n\024IndultTaskGroupEntry\022\024\n\014group_"
    "cfg_id\030\001 \001(\004\022/\n\006entrys\030\002 \003(\0132\031.proto_ff."
    "IndultTaskEntryB\004\210\301\024\014\022\033\n\023normal_reward_s"
    "tate\030\003 \001(\005\"N\n\022ColPointsTaskEntry\022\023\n\013task"
    "_cfg_id\030\001 \001(\004\022\017\n\007cur_num\030\002 \001(\005\022\022\n\ntask_s"
    "tate\030\003 \001(\005\"\251\001\n\027ColPointsTaskGroupEntry\022\024"
    "\n\014group_cfg_id\030\001 \001(\004\0222\n\006entrys\030\002 \003(\0132\034.p"
    "roto_ff.ColPointsTaskEntryB\004\210\301\024\014\022\033\n\023norm"
    "al_reward_state\030\003 \001(\005\022\022\n\ncur_points\030\004 \001("
    "\005\022\023\n\013create_time\030\005 \001(\004\"t\n\021ColPointsTaskD"
    "ata\022/\n\004data\030\001 \001(\0132!.proto_ff.ColPointsTa"
    "skGroupEntry\022\031\n\021last_refresh_time\030\002 \001(\004\022"
    "\023\n\013online_time\030\003 \001(\004\"r\n\030WelfareDailySign"
    "InDBData\022\n\n\002id\030\001 \001(\004\022\020\n\010dayIndex\030\002 \001(\r\022\016"
    "\n\006nState\030\003 \001(\r\022\025\n\rlastResetTime\030\004 \001(\004\022\021\n"
    "\tbRecharge\030\005 \001(\010\"\212\001\n\026WelfareLoginGiftDBD"
    "ata\022\n\n\002id\030\001 \001(\004\022\022\n\nLoninCount\030\002 \001(\r\022\025\n\rl"
    "astResetTime\030\003 \001(\004\022)\n\010getState\030\004 \003(\0132\021.p"
    "roto_ff.ComPairB\004\210\301\024\014\022\016\n\006nState\030\005 \001(\r\"O\n"
    "\026WelfareLevelGiftDBData\022\n\n\002id\030\001 \001(\004\022)\n\010g"
    "etState\030\002 \003(\0132\021.proto_ff.ComPairB\004\210\301\024\014\";"
    "\n\016CommodityEntry\022\024\n\014commodity_id\030\001 \001(\004\022\023"
    "\n\013cur_buy_num\030\002 \001(\005\"n\n\023LimitShopGroupEnt"
    "ry\022\024\n\014group_cfg_id\030\001 \001(\004\022\021\n\topen_time\030\002 "
    "\001(\005\022.\n\006entrys\030\003 \003(\0132\030.proto_ff.Commodity"
    "EntryB\004\210\301\024\014\"P\n\rLimitShopData\022\n\n\002id\030\001 \001(\004"
    "\0223\n\006groups\030\002 \003(\0132\035.proto_ff.LimitShopGro"
    "upEntryB\004\210\301\024\014\"J\n\016LimitTaskEntry\022\023\n\013task_"
    "cfg_id\030\001 \001(\004\022\017\n\007cur_num\030\002 \001(\005\022\022\n\ntask_st"
    "ate\030\003 \001(\005\"\250\001\n\023LimitTaskGroupEntry\022\024\n\014gro"
    "up_cfg_id\030\001 \001(\004\022\021\n\topen_time\030\002 \001(\005\022.\n\006en"
    "trys\030\003 \003(\0132\030.proto_ff.LimitTaskEntryB\004\210\301"
    "\024\014\022\033\n\023normal_reward_state\030\004 \001(\005\022\033\n\023senio"
    "r_reward_state\030\005 \001(\005\"P\n\rLimitTaskData\022\n\n"
    "\002id\030\001 \001(\004\0223\n\006groups\030\002 \003(\0132\035.proto_ff.Lim"
    "itTaskGroupEntryB\004\210\301\024\014\"a\n\017WishDBTypeEntr"
    "y\022\021\n\twish_type\030\001 \001(\005\022\022\n\nwished_num\030\002 \001(\005"
    "\022\024\n\014refresh_time\030\003 \001(\004\022\021\n\tlast_time\030\004 \001("
    "\004\"M\n\nWishDBData\022\n\n\002id\030\001 \001(\004\0223\n\ntype_entr"
    "y\030\002 \003(\0132\031.proto_ff.WishDBTypeEntryB\004\210\301\024\014"
    "\"\317\001\n\024FestivalInvestDBData\022\021\n\tnActiveId\030\001"
    " \001(\004\022\017\n\007bInvest\030\002 \001(\010\022\026\n\016nLastResetTime\030"
    "\003 \001(\004\022\023\n\013nLoninCount\030\004 \001(\005\022)\n\010getState\030\005"
    " \003(\0132\021.proto_ff.ComPairB\004\210\301\024\014\022\'\n\006params\030"
    "\006 \003(\0132\021.proto_ff.ComPairB\004\210\301\024\014\022\022\n\ninvest"
    "Time\030\007 \001(\003\"[\n\026FestivalExchangeDBData\022\021\n\t"
    "nActiveId\030\001 \001(\004\022.\n\rexchangeCount\030\002 \003(\0132\021"
    ".proto_ff.ComPairB\004\210\301\024\014\"\177\n\023FestivalLogin"
    "DBData\022\020\n\010activeId\030\001 \001(\004\022\026\n\016nLastResetTi"
    "me\030\002 \001(\004\022\023\n\013nLoninCount\030\003 \001(\r\022)\n\010getStat"
    "e\030\004 \003(\0132\021.proto_ff.ComPairB\004\210\301\024\014\"\211\001\n\033Fes"
    "tivalTotalRechargeDBData\022\020\n\010activeId\030\001 \001"
    "(\004\022\026\n\016nRechargeCount\030\002 \001(\r\022)\n\010getState\030\003"
    " \003(\0132\021.proto_ff.ComPairB\004\210\301\024\014\022\025\n\rnRechar"
    "geHoly\030\004 \001(\r\"\252\001\n\031FestivalConsumptionDBDa"
    "ta\022\020\n\010activeId\030\001 \001(\004\022\031\n\021nConsumptionValu"
    "e\030\002 \001(\r\022)\n\010getState\030\003 \003(\0132\021.proto_ff.Com"
    "PairB\004\210\301\024\014\022\030\n\020nConsumptionHoly\030\004 \001(\r\022\033\n\023"
    "nConsumptionVoucher\030\005 \001(\r\"S\n\024FestivalKil"
    "lBossData\022\020\n\010activeId\030\001 \001(\004\022)\n\010getState\030"
    "\002 \003(\0132\021.proto_ff.ComPairB\004\210\301\024\014\"l\n\024Festiv"
    "alZhiChongData\022\020\n\010activeId\030\001 \001(\004\022)\n\010getS"
    "tate\030\002 \003(\0132\021.proto_ff.ComPairB\004\210\301\024\014\022\027\n\tp"
    "ointList\030\003 \003(\003B\004\210\301\024\014\"j\n\027FestivalPreRecha"
    "rgeData\022\020\n\010activeId\030\001 \001(\004\022$\n\003buy\030\002 \003(\0132\021"
    ".proto_ff.ComPairB\004\210\301\024\014\022\027\n\tpointList\030\003 \003"
    "(\003B\004\210\301\024\014\"y\n\023FestivalSuperDBData\022\020\n\010activ"
    "eId\030\001 \001(\004\022\026\n\016nLastResetTime\030\002 \001(\004\022\023\n\013nLo"
    "ninCount\030\003 \001(\r\022\r\n\005getId\030\004 \001(\005\022\024\n\014active_"
    "state\030\005 \001(\005\"\205\001\n\031FestivalSuperDoubleDBDat"
    "a\022\020\n\010activeId\030\001 \001(\004\022\026\n\016nLastResetTime\030\002 "
    "\001(\004\022\021\n\tcurGiftId\030\003 \001(\r\022\024\n\014curGiftState\030\004"
    " \001(\005\022\025\n\rcurDailyState\030\005 \001(\005\"h\n\026FestivalH"
    "uoYueDuDBData\022\020\n\010activeId\030\001 \001(\004\022\021\n\tnHuoY"
    "ueDu\030\002 \001(\r\022)\n\010getState\030\003 \003(\0132\021.proto_ff."
    "ComPairB\004\210\301\024\014\"p\n\033FestivalFirstRechargeDB"
    "Data\022\020\n\010activeId\030\001 \001(\004\022\024\n\014rechargeTime\030\002"
    " \001(\r\022)\n\010getState\030\003 \003(\0132\021.proto_ff.ComPai"
    "rB\004\210\301\024\014\"@\n\024FestivalYanHuaDBData\022\020\n\010activ"
    "eId\030\001 \001(\004\022\026\n\010getItems\030\002 \003(\004B\004\210\301\024\014\"C\n\027Fes"
    "tivalBigYanHuaDBData\022\020\n\010activeId\030\001 \001(\004\022\026"
    "\n\010getItems\030\002 \003(\004B\004\210\301\024\014\"S\n\022FestivalShopDB"
    "Data\022\020\n\010activeId\030\001 \001(\004\022+\n\010buyCount\030\002 \003(\013"
    "2\023.proto_ff.ComPair64B\004\210\301\024\014\"\200\001\n\017LimitGif"
    "tDBData\022\016\n\006giftId\030\001 \001(\r\022\017\n\007buyTime\030\002 \001(\004"
    "\022\020\n\010getState\030\003 \001(\r\022\021\n\ttotalBack\030\004 \001(\r\022\020\n"
    "\010openTime\030\005 \001(\r\022\025\n\rlastResetTime\030\006 \001(\004\"n"
    "\n\025LimitGiftActiveDBData\022\020\n\010activeId\030\001 \001("
    "\004\022\020\n\010isFinish\030\002 \001(\010\0221\n\010giftList\030\003 \003(\0132\031."
    "proto_ff.LimitGiftDBDataB\004\210\301\024\014\"1\n\017FRecha"
    "rgeDBData\022\017\n\007pointId\030\001 \001(\004\022\r\n\005state\030\002 \001("
    "\r\"\\\n\025FRechargeActiveDBData\022\020\n\010activeId\030\001"
    " \001(\004\0221\n\010dataList\030\002 \003(\0132\031.proto_ff.FRecha"
    "rgeDBDataB\004\210\301\024\014\"U\n\017FSmashEggDBData\022\016\n\006it"
    "emId\030\001 \001(\004\022\020\n\010position\030\002 \001(\r\022\017\n\007quality\030"
    "\003 \001(\r\022\017\n\007itemNum\030\004 \001(\r\"\245\002\n\026FestivalSmash"
    "EggDBData\022\020\n\010activeId\030\001 \001(\004\022\022\n\nsmashCoun"
    "t\030\002 \001(\004\022\027\n\017smashCountToday\030\003 \001(\004\022\030\n\020free"
    "TimeDeadLine\030\004 \001(\004\022\024\n\014addRateCount\030\005 \001(\r"
    "\022\027\n\017resetRewardTime\030\006 \001(\r\0220\n\007eggData\030\007 \003"
    "(\0132\031.proto_ff.FSmashEggDBDataB\004\210\301\024\014\022/\n\016r"
    "ewardGetState\030\010 \003(\0132\021.proto_ff.ComPairB\004"
    "\210\301\024\014\022\016\n\006daynum\030\t \001(\005\022\020\n\010lastTime\030\n \001(\003\"s"
    "\n\rOperateReward\022\016\n\006key_id\030\001 \001(\004\022\020\n\010isFin"
    "ish\030\002 \001(\010\022\027\n\017isReceiveReward\030\003 \001(\010\022\'\n\014re"
    "chargeDays\030\004 \001(\0132\021.proto_ff.ComPair\"\221\001\n\030"
    "OperateDailyRechargeData\022\n\n\002id\030\001 \001(\004\022\020\n\010"
    "rmbToday\030\002 \001(\r\022\020\n\010rmbTotal\030\003 \001(\r\022\030\n\020last"
    "RechargeDate\030\004 \001(\r\022+\n\004list\030\005 \003(\0132\027.proto"
    "_ff.OperateRewardB\004\210\301\024\014\"_\n\023OperateMoonCa"
    "rdData\022\n\n\002id\030\001 \001(\004\022\017\n\007buyDate\030\002 \001(\r\022+\n\004l"
    "ist\030\003 \003(\0132\027.proto_ff.OperateRewardB\004\210\301\024\014"
    "\"j\n\017OperateFundData\022\n\n\002id\030\001 \001(\004\022\r\n\005level"
    "\030\002 \001(\r\022\017\n\007buyDate\030\003 \001(\r\022+\n\004list\030\004 \003(\0132\027."
    "proto_ff.OperateRewardB\004\210\301\024\014\"N\n\030OperateF"
    "irstRechargeType\022\014\n\004type\030\001 \001(\005\022\022\n\nupdate"
    "Time\030\002 \001(\004\022\020\n\010loginDay\030\003 \001(\005\"\235\001\n\030Operate"
    "FirstRechargeData\022\n\n\002id\030\001 \001(\004\022+\n\004list\030\002 "
    "\003(\0132\027.proto_ff.OperateRewardB\004\210\301\024\014\022;\n\tfi"
    "rstType\030\003 \003(\0132\".proto_ff.OperateFirstRec"
    "hargeTypeB\004\210\301\024\014\022\013\n\003rmb\030\004 \001(\005\"M\n\024WelfareV"
    "ipGiftDBData\022\n\n\002id\030\001 \001(\004\022)\n\010getState\030\002 \003"
    "(\0132\021.proto_ff.ComPairB\004\210\301\024\014\"\334\001\n\026Horoscop"
    "eJackpotDBData\022\n\n\002id\030\001 \001(\r\022\r\n\005bOpen\030\002 \001("
    "\010\022\022\n\nnNeedLevel\030\003 \001(\r\022\022\n\nluckyValue\030\004 \001("
    "\r\022\024\n\014welfareValue\030\005 \001(\r\022\025\n\rgetLuckyCount"
    "\030\006 \001(\r\0220\n\017welfareGetState\030\007 \003(\0132\021.proto_"
    "ff.ComPairB\004\210\301\024\014\022\020\n\010lastTime\030\010 \001(\003\022\016\n\006cu"
    "rNum\030\t \001(\005\"\244\001\n\025HoroscopeActiveDBData\022\020\n\010"
    "activeId\030\001 \001(\004\022\021\n\tdrawCount\030\002 \001(\004\022\020\n\010fre"
    "eOpId\030\003 \001(\r\022\027\n\017lastFreeGetTime\030\004 \001(\004\022;\n\013"
    "jackpotList\030\005 \003(\0132 .proto_ff.HoroscopeJa"
    "ckpotDBDataB\004\210\301\024\014\"}\n\027WelfareOnlineGiftDB"
    "Data\022\n\n\002id\030\001 \001(\004\022\027\n\017lastRefreshTime\030\002 \001("
    "\004\022\022\n\nOnlineTime\030\003 \001(\004\022)\n\010getState\030\004 \003(\0132"
    "\021.proto_ff.ComPairB\004\210\301\024\014\"O\n\034OperationTur"
    "ntableTaskDBData\022\016\n\006taskId\030\001 \001(\004\022\020\n\010prog"
    "ress\030\002 \001(\004\022\r\n\005state\030\003 \001(\r\"\205\001\n\030OperationT"
    "urntableDBData\022\020\n\010activeId\030\001 \001(\004\022\027\n\017last"
    "RefreshTime\030\002 \001(\004\022>\n\010tasklist\030\003 \003(\0132&.pr"
    "oto_ff.OperationTurntableTaskDBDataB\004\210\301\024"
    "\014\"J\n\027OperationTutoraskDBData\022\016\n\006taskId\030\001"
    " \001(\004\022\020\n\010progress\030\002 \001(\004\022\r\n\005state\030\003 \001(\r\"\223\001"
    "\n\024OperationTutorDBData\022\020\n\010activeId\030\001 \001(\004"
    "\022\027\n\017lastRefreshTime\030\002 \001(\004\022\025\n\rdiligentVal"
    "ue\030\003 \001(\004\0229\n\010tasklist\030\004 \003(\0132!.proto_ff.Op"
    "erationTutoraskDBDataB\004\210\301\024\014\"A\n\tlimitInfo"
    "\022\n\n\002id\030\001 \001(\004\022(\n\005infos\030\002 \003(\0132\023.proto_ff.C"
    "omPair64B\004\210\301\024\014\"T\n\025FestivalWorldBossData\022"
    "\020\n\010activeId\030\001 \001(\004\022)\n\010getState\030\002 \003(\0132\021.pr"
    "oto_ff.ComPairB\004\210\301\024\014\"B\n\026OperateCommonEnt"
    "ryData\022\n\n\002id\030\001 \001(\004\022\r\n\005state\030\002 \001(\005\022\r\n\005val"
    "ue\030\003 \001(\003\"\206\001\n\023OperateWingGiftData\022\020\n\010acti"
    "veId\030\001 \001(\004\0226\n\006entrys\030\002 \003(\0132 .proto_ff.Op"
    "erateCommonEntryDataB\004\210\301\024\014\022\023\n\013refreshTim"
    "e\030\003 \001(\003\022\020\n\010loginDay\030\004 \001(\005\"x\n\027OperateRech"
    "argeGiftData\022\020\n\010activeId\030\001 \001(\004\0226\n\006entrys"
    "\030\002 \003(\0132 .proto_ff.OperateCommonEntryData"
    "B\004\210\301\024\014\022\023\n\013rechargeRmb\030\003 \001(\005\"\374\024\n\026Characte"
    "rDBOperateData\022<\n\nsignInData\030\001 \003(\0132\".pro"
    "to_ff.WelfareDailySignInDBDataB\004\210\301\024\014\022=\n\r"
    "loginGiftData\030\002 \003(\0132 .proto_ff.WelfareLo"
    "ginGiftDBDataB\004\210\301\024\014\022=\n\rlevelGiftData\030\003 \003"
    "(\0132 .proto_ff.WelfareLevelGiftDBDataB\004\210\301"
    "\024\014\022/\n\010shopData\030\004 \003(\0132\027.proto_ff.LimitSho"
    "pDataB\004\210\301\024\014\022/\n\010taskData\030\005 \003(\0132\027.proto_ff"
    ".LimitTaskDataB\004\210\301\024\014\022,\n\010wishData\030\006 \003(\0132\024"
    ".proto_ff.WishDBDataB\004\210\301\024\014\0229\n\rdailyRecha"
    "rge\030\007 \001(\0132\".proto_ff.OperateDailyRecharg"
    "eData\0229\n\rfirstRecharge\030\010 \001(\0132\".proto_ff."
    "OperateFirstRechargeData\022/\n\010moonCard\030\t \001"
    "(\0132\035.proto_ff.OperateMoonCardData\022-\n\nnov"
    "iceFund\030\n \001(\0132\031.proto_ff.OperateFundData"
    "\022-\n\ngrowthFund\030\013 \001(\0132\031.proto_ff.OperateF"
    "undData\022,\n\tdreamFund\030\014 \001(\0132\031.proto_ff.Op"
    "erateFundData\0221\n\016noviceFundHigh\030\r \001(\0132\031."
    "proto_ff.OperateFundData\0221\n\016growthFundHi"
    "gh\030\016 \001(\0132\031.proto_ff.OperateFundData\0220\n\rd"
    "reamFundHigh\030\017 \001(\0132\031.proto_ff.OperateFun"
    "dData\022;\n\rfInvestDBData\030\020 \003(\0132\036.proto_ff."
    "FestivalInvestDBDataB\004\210\301\024\014\022\?\n\017fExchangeD"
    "BData\030\021 \003(\0132 .proto_ff.FestivalExchangeD"
    "BDataB\004\210\301\024\014\0229\n\014fLoginDBData\030\022 \003(\0132\035.prot"
    "o_ff.FestivalLoginDBDataB\004\210\301\024\014\022D\n\017fRecha"
    "rgeDBData\030\023 \003(\0132%.proto_ff.FestivalTotal"
    "RechargeDBDataB\004\210\301\024\014\022E\n\022fConsumptionDBDa"
    "ta\030\024 \003(\0132#.proto_ff.FestivalConsumptionD"
    "BDataB\004\210\301\024\014\022I\n\024fFirstRechargeDBData\030\025 \003("
    "\0132%.proto_ff.FestivalFirstRechargeDBData"
    "B\004\210\301\024\014\022;\n\rfYanHuaDBData\030\026 \003(\0132\036.proto_ff"
    ".FestivalYanHuaDBDataB\004\210\301\024\014\0227\n\013fShopDBDa"
    "ta\030\027 \003(\0132\034.proto_ff.FestivalShopDBDataB\004"
    "\210\301\024\014\022>\n\017limitGiftDBData\030\030 \003(\0132\037.proto_ff"
    ".LimitGiftActiveDBDataB\004\210\301\024\014\022>\n\017horoscop"
    "eDBData\030\031 \003(\0132\037.proto_ff.HoroscopeActive"
    "DBDataB\004\210\301\024\014\022E\n\026festivalRechargeDBData\030\032"
    " \003(\0132\037.proto_ff.FRechargeActiveDBDataB\004\210"
    "\301\024\014\022\?\n\017fSmashEggDBData\030\033 \003(\0132 .proto_ff."
    "FestivalSmashEggDBDataB\004\210\301\024\014\0224\n\021redPoint"
    "ClickData\030\034 \003(\0132\023.proto_ff.ComPair64B\004\210\301"
    "\024\014\0228\n\nwVipDBData\030\035 \003(\0132\036.proto_ff.Welfar"
    "eVipGiftDBDataB\004\210\301\024\014\022>\n\rwOnlineDBData\030\036 "
    "\003(\0132!.proto_ff.WelfareOnlineGiftDBDataB\004"
    "\210\301\024\014\0229\n\013fBossDBData\030\037 \003(\0132\036.proto_ff.Fes"
    "tivalKillBossDataB\004\210\301\024\014\022\?\n\017fHuoYueDuDBDa"
    "ta\030  \003(\0132 .proto_ff.FestivalHuoYueDuDBDa"
    "taB\004\210\301\024\014\022B\n\020fTurntableDBData\030! \003(\0132\".pro"
    "to_ff.OperationTurntableDBDataB\004\210\301\024\014\0229\n\013"
    "TutorDBData\030\" \003(\0132\036.proto_ff.OperationTu"
    "torDBDataB\004\210\301\024\014\022:\n\014zhiChongData\030# \003(\0132\036."
    "proto_ff.FestivalZhiChongDataB\004\210\301\024\014\022,\n\tl"
    "imitData\030$ \003(\0132\023.proto_ff.limitInfoB\004\210\301\024"
    "\014\0226\n\tsuperData\030% \003(\0132\035.proto_ff.Festival"
    "SuperDBDataB\004\210\301\024\014\022A\n\020fBigYanHuaDBData\030& "
    "\003(\0132!.proto_ff.FestivalBigYanHuaDBDataB\004"
    "\210\301\024\014\022<\n\rworldBossData\030\' \003(\0132\037.proto_ff.F"
    "estivalWorldBossDataB\004\210\301\024\014\022@\n\017prerecharg"
    "edata\030( \003(\0132!.proto_ff.FestivalPreRechar"
    "geDataB\004\210\301\024\014\0223\n\014winggiftdata\030) \001(\0132\035.pro"
    "to_ff.OperateWingGiftData\022;\n\020rechargegif"
    "tdata\030* \001(\0132!.proto_ff.OperateRechargeGi"
    "ftData\022B\n\017superDoubleData\030+ \003(\0132#.proto_"
    "ff.FestivalSuperDoubleDBDataB\004\210\301\024\014\022>\n\020In"
    "dultTaskDBData\030, \003(\0132\036.proto_ff.IndultTa"
    "skGroupEntryB\004\210\301\024\014\0226\n\021ColPointsTaskData\030"
    "- \001(\0132\033.proto_ff.ColPointsTaskData\"\252\001\n\026P"
    "layerActiveAnswerData\022\023\n\013answerIndex\030\001 \001"
    "(\r\022\030\n\nanswerList\030\002 \003(\rB\004\210\301\024\014\022\016\n\006allexp\030\003"
    " \001(\r\022\020\n\010allmoney\030\004 \001(\r\022\022\n\ncorrectnum\030\005 \001"
    "(\r\022\023\n\013isGetReward\030\006 \001(\r\022\026\n\016lastAnswerTim"
    "e\030\007 \001(\004\"\240\001\n\025CharacterDBActiveInfo\022@\n\026pla"
    "yerActiveAnswerInfo\030\001 \001(\0132 .proto_ff.Pla"
    "yerActiveAnswerData\022E\n\033playerActiveDaily"
    "AnswerInfo\030\002 \001(\0132 .proto_ff.PlayerActive"
    "AnswerData\"3\n\017PayCountDBProto\022\021\n\tcharge_"
    "id\030\001 \001(\005\022\r\n\005count\030\002 \001(\r\"E\n\021OfflineRetDBP"
    "roto\022\017\n\007diamond\030\001 \001(\003\022\014\n\004time\030\002 \001(\004\022\021\n\tf"
    "reshtime\030\003 \001(\004\"\301\002\n\020CharacterPayData\022\013\n\003r"
    "mb\030\001 \001(\r\022\020\n\010maxPayId\030\002 \001(\r\022 \n\rpayedProdu"
    "cts\030\003 \003(\tB\t\210\301\024\014\220\301\024\200\001\022\021\n\ttoday_rmb\030\004 \001(\r\022"
    "\021\n\tlast_time\030\005 \001(\004\0222\n\tpay_count\030\006 \003(\0132\031."
    "proto_ff.PayCountDBProtoB\004\210\301\024\014\022\026\n\016pay_co"
    "unt_time\030\007 \001(\004\022\017\n\007diamond\030\010 \001(\003\022\020\n\010real_"
    "rmb\030\t \001(\004\022\021\n\tfreshtime\030\n \001(\003\022\022\n\nopenwind"
    "ow\030\013 \001(\005\0220\n\013offline_ret\030\014 \001(\0132\033.proto_ff"
    ".OfflineRetDBProto\"-\n\022FunctionUnlockInfo"
    "\022\027\n\tunlockIds\030\001 \003(\004B\004\210\301\024\014\"z\n\nEmblemSlot\022"
    "\016\n\006slotId\030\001 \001(\r\022\017\n\007groupId\030\002 \001(\r\022\r\n\005posI"
    "d\030\003 \001(\r\022\020\n\010attrType\030\004 \001(\r\022\014\n\004open\030\005 \001(\010\022"
    "\016\n\006itemId\030\006 \001(\004\022\014\n\004bind\030\007 \001(\r\"\237\001\n\025Charac"
    "terDBEmblemData\022)\n\005slots\030\001 \003(\0132\024.proto_f"
    "f.EmblemSlotB\004\210\301\024\014\022-\n\014groupSuitIds\030\002 \003(\013"
    "2\021.proto_ff.ComPairB\004\210\301\024\014\022,\n\013suitSkillId"
    "\030\003 \003(\0132\021.proto_ff.ComPairB\004\210\301\024\014\"y\n\027Chara"
    "cterDBIdentifyData\022,\n\tidentifys\030\001 \003(\0132\023."
    "proto_ff.ComPair64B\004\210\301\024\014\0220\n\ridentifyfate"
    "s\030\002 \003(\0132\023.proto_ff.ComPair64B\004\210\301\024\014\";\n\017El"
    "ementInfoData\022\014\n\004type\030\001 \001(\r\022\r\n\005level\030\002 \001"
    "(\r\022\013\n\003exp\030\003 \001(\004\"y\n\026CharacterDBElementDat"
    "a\0221\n\010elements\030\001 \003(\0132\031.proto_ff.ElementIn"
    "foDataB\004\210\301\024\014\022,\n\tfragments\030\002 \003(\0132\023.proto_"
    "ff.ComPair64B\004\210\301\024\014\"\202\001\n\026CharacterDBFashio"
    "nData\022+\n\010fashions\030\001 \003(\0132\023.proto_ff.ComPa"
    "ir64B\004\210\301\024\014\022\035\n\025dressClothesFashionID\030\002 \001("
    "\004\022\034\n\024dressWeaponFashionID\030\003 \001(\004\"\312\001\n\023Char"
    "acterDBWingData\022\026\n\016advanceWingExp\030\001 \001(\004\022"
    "\026\n\016advanceWingLev\030\002 \001(\r\022\023\n\013equipWingID\030\003"
    " \001(\004\022/\n\014fantasyWings\030\004 \003(\0132\023.proto_ff.Co"
    "mPair64B\004\210\301\024\014\022,\n\tfragments\030\005 \003(\0132\023.proto"
    "_ff.ComPair64B\004\210\301\024\014\022\017\n\007isbreak\030\006 \001(\005\"\246\002\n"
    "\026CharacterDBPartnerData\022\031\n\021advancePartne"
    "rExp\030\001 \001(\004\022\031\n\021advancePartnerLev\030\002 \001(\r\022\026\n"
    "\016equipPartnerID\030\003 \001(\004\0222\n\017fantasyPartners"
    "\030\004 \003(\0132\023.proto_ff.ComPair64B\004\210\301\024\014\022,\n\tfra"
    "gments\030\005 \003(\0132\023.proto_ff.ComPair64B\004\210\301\024\014\022"
    "\030\n\020commonPartnerExp\030\006 \001(\004\022\027\n\017autoSwallow"
    "Flag\030\007 \001(\r\022\030\n\020autoSwallowClass\030\010 \001(\004\022\017\n\007"
    "isbreak\030\t \001(\005\"e\n\024CharacterDBMountData\022)\n"
    "\006mounts\030\001 \003(\0132\023.proto_ff.ComPair64B\004\210\301\024\014"
    "\022\017\n\007mountID\030\002 \001(\004\022\021\n\trideState\030\003 \001(\r\"r\n\022"
    "PlayerBossDataInfo\022\022\n\ngroup_type\030\001 \001(\005\022\017"
    "\n\007cur_num\030\002 \001(\005\022\017\n\007max_num\030\003 \001(\005\022\023\n\013vip_"
    "buy_num\030\004 \001(\005\022\021\n\tboss_type\030\005 \001(\005\"5\n\031Char"
    "acterDBBossAttentInfo\022\n\n\002id\030\001 \001(\004\022\014\n\004typ"
    "e\030\002 \001(\005\"u\n\023CharacterDBBossData\0221\n\005infos\030"
    "\001 \003(\0132\034.proto_ff.PlayerBossDataInfoB\004\210\301\024"
    "\014\022\020\n\010lastTime\030\002 \001(\004\022\031\n\013attent_list\030\003 \003(\003"
    "B\004\210\301\024\014\"*\n\rRedPlayerInfo\022\013\n\003cid\030\001 \001(\004\022\014\n\004"
    "time\030\002 \001(\004\"\335\001\n\022CharacterDBPvpData\022\017\n\007pk_"
    "mode\030\001 \001(\r\022\030\n\020pk_killing_value\030\002 \001(\r\0221\n\n"
    "red_player\030\003 \003(\0132\027.proto_ff.RedPlayerInf"
    "oB\004\210\301\024\014\022\023\n\013online_time\030\004 \001(\004\022\020\n\010kill_num"
    "\030\005 \001(\005\022\023\n\013be_kill_num\030\006 \001(\005\022\020\n\010lastTime\030"
    "\007 \001(\003\022\033\n\014be_kill_name\030\010 \001(\tB\005\220\301\024\200\001\"\367\001\n\027C"
    "haracterDBTreasureData\022\032\n\022advanceTreasur"
    "eExp\030\001 \001(\004\022\032\n\022advanceTreasureLev\030\002 \001(\r\022\027"
    "\n\017equipTreasureID\030\003 \001(\004\0223\n\020fantasyTreasu"
    "res\030\004 \003(\0132\023.proto_ff.ComPair64B\004\210\301\024\014\022,\n\t"
    "fragments\030\005 \003(\0132\023.proto_ff.ComPair64B\004\210\301"
    "\024\014\022\027\n\017skillTreasureID\030\006 \001(\004\022\017\n\007isbreak\030\007"
    " \001(\005\"+\n\014ArtifactInfo\022\n\n\002id\030\001 \001(\004\022\017\n\007star"
    "_lv\030\002 \001(\005\"X\n\027CharacterDBArtifactData\022+\n\005"
    "infos\030\001 \003(\0132\026.proto_ff.ArtifactInfoB\004\210\301\024"
    "\014\022\020\n\010dress_id\030\002 \001(\004\"\317\001\n\027CharacterDBFateS"
    "tarData\022\020\n\010freeTime\030\001 \001(\004\022\022\n\ntowerLevel\030"
    "\002 \001(\r\022\016\n\006nbless\030\003 \001(\r\022)\n\010soltData\030\004 \003(\0132"
    "\021.proto_ff.ComPairB\004\210\301\024\014\0221\n\nequipStars\030\005"
    " \003(\0132\027.proto_ff.ItemProtoInfoB\004\210\301\024\014\022\016\n\006c"
    "urnum\030\006 \001(\r\022\020\n\010lasttime\030\007 \001(\004\"\301\001\n\025Charac"
    "terDBConvoyData\022\017\n\007doTimes\030\001 \001(\r\022\022\n\nconv"
    "oyDate\030\002 \001(\r\022\020\n\010escortid\030\003 \001(\004\022\022\n\naccept"
    "Time\030\004 \001(\004\022\024\n\014refreshTimes\030\005 \001(\r\022\026\n\016sele"
    "ctEscortId\030\006 \001(\004\022\030\n\020refreshTimeStamp\030\007 \001"
    "(\004\022\025\n\rLastResetTime\030\010 \001(\004\"8\n\025CharacterDB"
    "DailyEntry\022\016\n\006cfg_id\030\001 \001(\004\022\017\n\007cur_num\030\002 "
    "\001(\005\"{\n\024CharacterDBDailyData\022:\n\013daily_ent"
    "ry\030\001 \003(\0132\037.proto_ff.CharacterDBDailyEntr"
    "yB\004\210\301\024\014\022\025\n\007rewards\030\002 \003(\004B\004\210\301\024\014\022\020\n\010lastti"
    "me\030\003 \001(\004\"5\n\020FieldCylstalInfo\022\021\n\tslotInde"
    "x\030\001 \001(\005\022\016\n\006itemid\030\002 \001(\003\"\301\001\n\013FieldExInfo\022"
    "\017\n\007actived\030\001 \001(\005\0220\n\tslotInfos\030\002 \003(\0132\027.pr"
    "oto_ff.ItemProtoInfoB\004\210\301\024\014\022\017\n\007fieldId\030\003 "
    "\001(\004\022\020\n\010fightNum\030\004 \001(\004\0226\n\014cylstalInfos\030\005 "
    "\003(\0132\032.proto_ff.FieldCylstalInfoB\004\210\301\024\014\022\024\n"
    "\014first_active\030\006 \001(\010\"g\n\024CharacterDBFieldD"
    "ata\022/\n\nfieldInfos\030\001 \003(\0132\025.proto_ff.Field"
    "ExInfoB\004\210\301\024\014\022\016\n\006curExp\030\002 \001(\004\022\016\n\006maxNum\030\003"
    " \001(\005\"H\n\rvipGiftDBData\022\016\n\006giftId\030\001 \001(\004\022\022\n"
    "\nactiveTime\030\002 \001(\004\022\023\n\013lastGetTime\030\003 \001(\004\"O"
    "\n\014VipTCardInfo\022\n\n\002id\030\001 \001(\005\022\017\n\007endTime\030\002 "
    "\001(\003\022\r\n\005state\030\003 \001(\005\022\023\n\013rewardState\030\004 \001(\005\""
    "`\n\014VipTCardData\022.\n\010cardInfo\030\001 \003(\0132\026.prot"
    "o_ff.VipTCardInfoB\004\210\301\024\014\022\021\n\tgiftState\030\002 \001"
    "(\005\022\r\n\005point\030\003 \001(\005\"\247\002\n\022CharacterDBVipData"
    "\022\020\n\010vipState\030\001 \001(\r\022\016\n\006vipExp\030\002 \001(\004\022\025\n\rge"
    "tRewardTime\030\003 \001(\004\022\022\n\nexpDiamond\030\004 \001(\004\022/\n"
    "\014timeLimitExp\030\005 \003(\0132\023.proto_ff.ComPair64"
    "B\004\210\301\024\014\022.\n\007vipGift\030\006 \003(\0132\027.proto_ff.vipGi"
    "ftDBDataB\004\210\301\024\014\022(\n\010cardData\030\007 \001(\0132\026.proto"
    "_ff.VipTCardData\022\024\n\014cardLastTime\030\010 \001(\003\022\024"
    "\n\014curAddVipExp\030\t \001(\003\022\r\n\005point\030\n \001(\005\"\206\001\n\023"
    "CharacterDBMallData\022\023\n\013refreshTime\030\001 \001(\004"
    "\022,\n\tgoodsInfo\030\002 \003(\0132\023.proto_ff.ComPair64"
    "B\004\210\301\024\014\022\030\n\020dailyRefreshTime\030\003 \001(\004\022\022\n\nrefr"
    "eshNum\030\004 \001(\005\"O\n\013GodhoodSlot\022\013\n\003idx\030\001 \001(\r"
    "\022\014\n\004open\030\002 \001(\010\022%\n\004item\030\003 \001(\0132\027.proto_ff."
    "ItemProtoInfo\"J\n\026CharacterDBGodhoodData\022"
    "0\n\013godhoodSlot\030\001 \003(\0132\025.proto_ff.GodhoodS"
    "lotB\004\210\301\024\014\"\246\001\n\026RecoveryCompleteDBData\022\r\n\005"
    "level\030\001 \001(\r\022\020\n\010vipLevel\030\002 \001(\r\022\014\n\004time\030\003 "
    "\001(\004\022-\n\014completeList\030\004 \003(\0132\021.proto_ff.Com"
    "PairB\004\210\301\024\014\022.\n\tfunUnlock\030\005 \003(\0132\025.proto_ff"
    ".ComPairBoolB\004\210\301\024\014\"\310\002\n\020RecoveryDBReward\022"
    "\017\n\007groupid\030\001 \001(\r\022\024\n\014day1CountMax\030\002 \001(\r\022\024"
    "\n\014day2CountMax\030\003 \001(\r\022\027\n\017day1VipCountMax\030"
    "\004 \001(\r\022\027\n\017day2VipCountMax\030\005 \001(\r\022\023\n\013common"
    "Count\030\006 \001(\r\022\020\n\010vipCount\030\007 \001(\r\022\017\n\007goldExp"
    "\030\010 \001(\r\022\023\n\013diamondsExp\030\t \001(\r\022\025\n\rgoldItemC"
    "ount\030\n \001(\r\022\031\n\021diamondsItemCount\030\013 \001(\r\022\020\n"
    "\010needGold\030\014 \001(\r\022\024\n\014needDiamonds\030\r \001(\r\022\016\n"
    "\006ItemId\030\016 \001(\004\022\016\n\006confid\030\017 \001(\r\"N\n\016Recover"
    "yDBData\022\014\n\004time\030\001 \001(\004\022.\n\004list\030\002 \003(\0132\032.pr"
    "oto_ff.RecoveryDBRewardB\004\210\301\024\014\"\213\001\n\027Charac"
    "terDBRecoveryData\022>\n\016completeDBData\030\001 \003("
    "\0132 .proto_ff.RecoveryCompleteDBDataB\004\210\301\024"
    "\014\0220\n\016recoveryDBData\030\002 \001(\0132\030.proto_ff.Rec"
    "overyDBData\"\361\001\n\036CharacterDBActivityScuff"
    "leData\022\022\n\ncur_cfg_id\030\001 \001(\004\022\022\n\ncur_points"
    "\030\002 \001(\005\022\023\n\013activity_id\030\003 \001(\004\022\025\n\rbefore_ma"
    "p_id\030\004 \001(\004\022-\n\020before_map_point\030\005 \001(\0132\023.p"
    "roto_ff.Vector3PB\022\021\n\tlast_time\030\006 \001(\005\022\020\n\010"
    "end_time\030\007 \001(\005\022\020\n\010kill_num\030\010 \001(\005\022\025\n\rlast"
    "_kill_num\030\t \001(\005\"k\n#CharacterDBActivityCh"
    "aosDragonsData\022\025\n\rbefore_map_id\030\001 \001(\004\022-\n"
    "\020before_map_point\030\002 \001(\0132\023.proto_ff.Vecto"
    "r3PB\"c\n\035CharacterDBActivityAsharmData\022\014\n"
    "\004step\030\001 \001(\005\022\020\n\010end_time\030\002 \001(\004\022\021\n\tlast_ti"
    "me\030\003 \001(\004\022\017\n\007cur_num\030\004 \001(\005\"C\n\031CharacterDB"
    "CombatTeamData\022\017\n\007team_id\030\001 \001(\005\022\025\n\rteam_"
    "end_time\030\002 \001(\004\"\377\001\n\023CharacterDBSoloData\022!"
    "\n\023rewarded_join_index\030\001 \003(\005B\004\210\301\024\014\022\023\n\013my_"
    "solo_num\030\002 \001(\005\022\"\n\024rewarded_stage_index\030\003"
    " \003(\005B\004\210\301\024\014\022&\n\030rewarded_day_stage_index\030\004"
    " \003(\005B\004\210\301\024\014\022\025\n\rsolo_time_end\030\005 \001(\004\022\023\n\013sol"
    "o_season\030\006 \001(\005\022\023\n\013cur_buy_num\030\007 \001(\005\022\021\n\tl"
    "ast_time\030\010 \001(\004\022\020\n\010lose_num\030\t \001(\005\"7\n\024Char"
    "acterDBAtBoxData\022\021\n\tuse_count\030\001 \001(\005\022\014\n\004t"
    "ime\030\002 \001(\004\"5\n\026CharDBAncientShopProto\022\013\n\003i"
    "dx\030\001 \001(\005\022\016\n\006exchge\030\004 \001(\005\"\272\001\n\025CharDBAncie"
    "ntShopData\0224\n\004info\030\001 \003(\0132 .proto_ff.Char"
    "DBAncientShopProtoB\004\210\301\024\014\022\r\n\005score\030\002 \001(\003\022"
    "\021\n\tscore_cnt\030\003 \001(\005\022\017\n\007dia_cnt\030\004 \001(\005\022\020\n\010f"
    "ree_cnt\030\005 \001(\005\022\022\n\nfresh_time\030\006 \001(\004\022\022\n\nres"
    "et_time\030\007 \001(\004\"\212\001\n\026CharacterDBAncientData"
    "\022\023\n\013bless_value\030\001 \001(\003\022\022\n\nscore_incr\030\002 \001("
    "\003\022-\n\004shop\030\003 \001(\0132\037.proto_ff.CharDBAncient"
    "ShopData\022\030\n\020bless_reset_time\030\004 \001(\004\"j\n\016Ch"
    "ooseGiftData\022\022\n\nactiveTime\030\001 \001(\004\022\021\n\thead"
    "State\030\002 \001(\005\022\025\n\rrechargeIndex\030\003 \001(\005\022\032\n\022re"
    "chargeIndexState\030\004 \001(\005\"\375\003\n\027CharacterDBAc"
    "tivityData\022D\n\022scuffle_cross_data\030\001 \001(\0132("
    ".proto_ff.CharacterDBActivityScuffleData"
    "\022D\n\022scuffle_local_data\030\002 \001(\0132(.proto_ff."
    "CharacterDBActivityScuffleData\022I\n\022chaos_"
    "dragons_data\030\003 \001(\0132-.proto_ff.CharacterD"
    "BActivityChaosDragonsData\022<\n\013asharm_data"
    "\030\004 \001(\0132\'.proto_ff.CharacterDBActivityAsh"
    "armData\0220\n\tsolo_data\030\005 \001(\0132\035.proto_ff.Ch"
    "aracterDBSoloData\0220\n\010box_data\030\006 \001(\0132\036.pr"
    "oto_ff.CharacterDBAtBoxData\0226\n\014ancient_d"
    "ata\030\007 \001(\0132 .proto_ff.CharacterDBAncientD"
    "ata\0221\n\017choosegift_data\030\010 \001(\0132\030.proto_ff."
    "ChooseGiftData\"\225\001\n\031SOAcitveTotalRecharge"
    "Data\022\020\n\010activeId\030\001 \001(\004\022\016\n\006pageId\030\002 \001(\r\022\025"
    "\n\rrechargeValue\030\003 \001(\004\022)\n\010getState\030\004 \003(\0132"
    "\021.proto_ff.ComPairB\004\210\301\024\014\022\024\n\014rechargeholy"
    "\030\005 \001(\004\"\254\001\n\023SOAcitveAdvanceData\022\020\n\010active"
    "Id\030\001 \001(\004\022\016\n\006pageId\030\002 \001(\r\022\024\n\014advanceValue"
    "\030\003 \001(\004\022)\n\010getState\030\004 \003(\0132\021.proto_ff.ComP"
    "airB\004\210\301\024\014\0222\n\017advanceValueMap\030\005 \003(\0132\023.pro"
    "to_ff.ComPair64B\004\210\301\024\014\"b\n\021SOAcitveGoodsDa"
    "ta\022\020\n\010activeId\030\001 \001(\004\022\016\n\006pageId\030\002 \001(\r\022+\n\010"
    "buyCount\030\003 \003(\0132\023.proto_ff.ComPair64B\004\210\301\024"
    "\014\"\371\001\n\027CharacterDBSOAcitveData\022@\n\rtotalRe"
    "charge\030\001 \003(\0132#.proto_ff.SOAcitveTotalRec"
    "hargeDataB\004\210\301\024\014\0224\n\007advance\030\002 \003(\0132\035.proto"
    "_ff.SOAcitveAdvanceDataB\004\210\301\024\014\0220\n\005goods\030\003"
    " \003(\0132\033.proto_ff.SOAcitveGoodsDataB\004\210\301\024\014\022"
    "4\n\021redPointClickData\030\004 \003(\0132\023.proto_ff.Co"
    "mPair64B\004\210\301\024\014\"I\n\026CharacterDBUseItemData\022"
    "/\n\014itemUseTimes\030\001 \003(\0132\023.proto_ff.ComPair"
    "64B\004\210\301\024\014\"Y\n\031CharacterDBDayUseItemData\022\013\n"
    "\003day\030\001 \001(\004\022/\n\014itemUseTimes\030\002 \003(\0132\023.proto"
    "_ff.ComPair64B\004\210\301\024\014\"Y\n\021MysteryShopDBData"
    "\022\013\n\003nId\030\001 \001(\r\022\022\n\nnStartTime\030\002 \001(\004\022\023\n\013nFi"
    "nishTime\030\003 \001(\004\022\016\n\006nState\030\004 \001(\r\"Q\n\032Charac"
    "terDBMysteryShopData\0223\n\010dataList\030\001 \003(\0132\033"
    ".proto_ff.MysteryShopDBDataB\004\210\301\024\014\"\343\001\n Ch"
    "aracterDBPackageTestRebateData\022\020\n\010bCheck"
    "ed\030\001 \001(\010\022\r\n\005state\030\002 \001(\r\022\025\n\rrechargeValue"
    "\030\003 \001(\r\022\021\n\tpowerRank\030\004 \001(\r\022\020\n\010deadline\030\005 "
    "\001(\004\0221\n\016rewardStateMap\030\006 \003(\0132\023.proto_ff.C"
    "omPair64B\004\210\301\024\014\022/\n\014backStateMap\030\007 \003(\0132\023.p"
    "roto_ff.ComPair64B\004\210\301\024\014\"\356\003\n\017FuncFightDBD"
    "ata\022\023\n\013equip_total\030\001 \001(\003\022\022\n\nequip_base\030\002"
    " \001(\003\022\024\n\014equip_strong\030\003 \001(\003\022\r\n\005stone\030\004 \001("
    "\003\022\026\n\016equip_scrutiny\030\005 \001(\003\022\022\n\nequip_suit\030"
    "\006 \001(\003\022\023\n\013equip_awake\030\007 \001(\003\022\025\n\requip_ench"
    "ant\030\010 \001(\003\022\020\n\010fatestar\030\t \001(\003\022\017\n\007godhood\030\n"
    " \001(\003\022\020\n\010identify\030\013 \001(\003\022\017\n\007partner\030\014 \001(\003\022"
    "\r\n\005field\030\r \001(\003\022\017\n\007element\030\016 \001(\003\022\014\n\004wing\030"
    "\017 \001(\003\022\020\n\010treasure\030\020 \001(\003\022\026\n\016fantasty_tota"
    "l\030\021 \001(\003\022\031\n\021artifact_fantasty\030\022 \001(\003\022\026\n\016ho"
    "rse_fantasty\030\023 \001(\003\022\025\n\rwing_fantasty\030\024 \001("
    "\003\022\030\n\020fashion_fantasty\030\025 \001(\003\022\030\n\020partner_f"
    "antasty\030\026 \001(\003\022\031\n\021treasure_fantasty\030\027 \001(\003"
    "\"F\n\tPowerInfo\022\017\n\007titleId\030\001 \001(\005\022\021\n\tcurBuy"
    "Num\030\002 \001(\005\022\025\n\rskillUpdateId\030\003 \001(\005\";\n\017Powe"
    "rInfoDBList\022(\n\005infos\030\001 \003(\0132\023.proto_ff.Po"
    "werInfoB\004\210\301\024\014\"I\n\022OccupationTaskInfo\022\016\n\006t"
    "askID\030\001 \001(\005\022\020\n\010curValue\030\002 \001(\005\022\021\n\ttaskSta"
    "te\030\003 \001(\005\"G\n\022OccupationTakeList\0221\n\005tasks\030"
    "\001 \003(\0132\034.proto_ff.OccupationTaskInfoB\004\210\301\024"
    "\014\"*\n\013ComStarInfo\022\n\n\002id\030\001 \001(\004\022\017\n\007star_lv\030"
    "\002 \001(\005\"\352\001\n\026CharacterDBHeadSetData\022-\n\010head"
    "List\030\001 \003(\0132\025.proto_ff.ComStarInfoB\004\210\301\024\014\022"
    "\023\n\013cur_head_id\030\002 \001(\004\022.\n\tframeList\030\003 \003(\0132"
    "\025.proto_ff.ComStarInfoB\004\210\301\024\014\022\024\n\014cur_fram"
    "e_id\030\004 \001(\004\022/\n\nbubbleList\030\005 \003(\0132\025.proto_f"
    "f.ComStarInfoB\004\210\301\024\014\022\025\n\rcur_bubble_id\030\006 \001"
    "(\004\"6\n\031CharacterDBOnlineGiftInfo\022\n\n\002id\030\001 "
    "\001(\005\022\r\n\005state\030\002 \001(\005\"\217\001\n\031CharacterDBOnline"
    "GiftData\022\023\n\013online_time\030\001 \001(\005\0228\n\005infos\030\002"
    " \003(\0132#.proto_ff.CharacterDBOnlineGiftInf"
    "oB\004\210\301\024\014\022\021\n\treset_day\030\003 \001(\005\022\020\n\010lasttime\030\004"
    " \001(\003\"2\n\023CharDropItemDBProto\022\016\n\006itemid\030\001 "
    "\001(\004\022\013\n\003num\030\002 \001(\003\"L\n\027CharDropMultItemDBPr"
    "oto\0221\n\004info\030\001 \003(\0132\035.proto_ff.CharDropIte"
    "mDBProtoB\004\210\301\024\014\"[\n\023CharDropLimitDBData\0220\n"
    "\005limit\030\001 \001(\0132!.proto_ff.CharDropMultItem"
    "DBProto\022\022\n\nfresh_time\030\002 \001(\004\"\302\001\n\025Characte"
    "rDBGmHelpData\022\017\n\007timeEnd\030\001 \001(\003\022\020\n\010helpTi"
    "me\030\002 \001(\003\022\017\n\007helpDay\030\003 \001(\005\022\021\n\tapplyTime\030\004"
    " \001(\003\022\020\n\010applyDay\030\005 \001(\005\022\017\n\007helpcid\030\006 \001(\003\022"
    "*\n\thelpState\030\007 \003(\0132\021.proto_ff.ComPairB\004\210"
    "\301\024\014\022\023\n\013applyResult\030\010 \001(\005\"r\n\tGMToolsDB\022\023\n"
    "\005gifts\030\001 \003(\005B\004\210\301\024\014\022)\n\010unlimits\030\002 \003(\0132\021.p"
    "roto_ff.ComPairB\004\210\301\024\014\022\024\n\014refresh_time\030\003 "
    "\001(\004\022\017\n\007cur_use\030\004 \001(\004\"\311\001\n\024CharacterDBGodG"
    "MData\022\017\n\007curType\030\001 \001(\005\022\017\n\007timeEnd\030\002 \001(\003\022"
    "\026\n\016curExchangeNum\030\003 \001(\005\022\027\n\017normalGiftSta"
    "te\030\004 \001(\005\022\027\n\017seniorGiftState\030\005 \001(\005\022\020\n\010las"
    "tTime\030\006 \001(\003\022\016\n\006unlock\030\007 \001(\005\022#\n\006gmtool\030\010 "
    "\001(\0132\023.proto_ff.GMToolsDB\"7\n\021BowlDBReward"
    "Proto\022\023\n\013recharge_id\030\001 \001(\r\022\r\n\005count\030\002 \001("
    "\r\"\\\n\nBowlDBData\022\r\n\005level\030\001 \001(\r\022\016\n\006active"
    "\030\002 \001(\005\022/\n\004info\030\003 \003(\0132\033.proto_ff.BowlDBRe"
    "wardProtoB\004\210\301\024\014\"P\n\021HidePeriodDBProto\022\n\n\002"
    "id\030\001 \001(\005\022\r\n\005total\030\002 \001(\004\022\016\n\006reward\030\003 \001(\005\022"
    "\020\n\010lasttime\030\004 \001(\004\"\354\001\n\023CharacterDBHideDat"
    "a\022\025\n\rforever_quota\030\001 \001(\005\022\020\n\010lastTime\030\002 \001"
    "(\003\022\022\n\nunit_quota\030\003 \001(\005\022\026\n\010unit_ids\030\004 \003(\005"
    "B\004\210\301\024\014\022\033\n\runit_once_ids\030\005 \003(\005B\004\210\301\024\014\022\023\n\005f"
    "_ids\030\006 \003(\005B\004\210\301\024\014\022\r\n\005ctime\030\007 \001(\003\022\014\n\004days\030"
    "\010 \001(\005\0221\n\006period\030\t \003(\0132\033.proto_ff.HidePer"
    "iodDBProtoB\004\210\301\024\014\"\345\027\n\ntbRoleInfo\022\024\n\006charI"
    "d\030\001 \001(\004B\004\300\202\024\002\022\026\n\010playerId\030\002 \001(\004B\004\300\202\024\003\022\030\n"
    "\nbornZoneId\030\003 \001(\004B\004\300\202\024\003\022\034\n\010charName\030\004 \001("
    "\tB\n\220\301\024\200\001\310\202\024\200\001\022\032\n\006platId\030\005 \001(\tB\n\220\301\024\200\001\310\202\024\200"
    "\001\022\026\n\016deletechartime\030\006 \001(\004\022\r\n\005dirty\030\007 \001(\005"
    "\022/\n\010baseData\030\024 \001(\0132\035.proto_ff.CharacterD"
    "BBaseInfo\0222\n\010itemData\030\025 \001(\0132 .proto_ff.C"
    "haracterDBPackageData\022/\n\010taskData\030\026 \001(\0132"
    "\035.proto_ff.CharacterDBTaskData\0221\n\tskillD"
    "ata\030\027 \001(\0132\036.proto_ff.CharacterDBSkillDat"
    "a\0223\n\nextendData\030\030 \001(\0132\037.proto_ff.Charact"
    "erDBExtendData\0221\n\tequipData\030\031 \001(\0132\036.prot"
    "o_ff.CharacterDBEquipData\0229\n\rduplicateDa"
    "ta\030\032 \001(\0132\".proto_ff.CharacterDBDuplicate"
    "Data\022=\n\017achievementData\030\033 \001(\0132$.proto_ff"
    ".CharacterAchievementDBData\022-\n\010buffData\030"
    "\034 \001(\0132\033.proto_ff.CharacterBuffData\022/\n\tar"
    "enaData\030\035 \001(\0132\034.proto_ff.CharacterArenaD"
    "ata\0223\n\ttitleData\030\036 \001(\0132 .proto_ff.Charac"
    "terTitleSaveData\022\?\n\020operateLimitData\030\037 \001"
    "(\0132%.proto_ff.CharacterDBOperateLimitInf"
    "o\0227\n\014huoYueDuData\030  \001(\0132!.proto_ff.Chara"
    "cterDBHuoYueDuInfo\0225\n\013operateData\030! \001(\0132"
    " .proto_ff.CharacterDBOperateData\0229\n\020pla"
    "yerActiveInfo\030\" \001(\0132\037.proto_ff.Character"
    "DBActiveInfo\022,\n\010cPayData\030# \001(\0132\032.proto_f"
    "f.CharacterPayData\0220\n\nunlockInfo\030$ \001(\0132\034"
    ".proto_ff.FunctionUnlockInfo\0223\n\nemblemDa"
    "ta\030% \001(\0132\037.proto_ff.CharacterDBEmblemDat"
    "a\0227\n\014identifyData\030& \001(\0132!.proto_ff.Chara"
    "cterDBIdentifyData\0225\n\013elementData\030\' \001(\0132"
    " .proto_ff.CharacterDBElementData\0225\n\013fas"
    "hionData\030( \001(\0132 .proto_ff.CharacterDBFas"
    "hionData\022/\n\010wingData\030) \001(\0132\035.proto_ff.Ch"
    "aracterDBWingData\0221\n\tmountData\030* \001(\0132\036.p"
    "roto_ff.CharacterDBMountData\022/\n\010bossData"
    "\030+ \001(\0132\035.proto_ff.CharacterDBBossData\022-\n"
    "\007pvpData\030, \001(\0132\034.proto_ff.CharacterDBPvp"
    "Data\0228\n\rtreasure_data\030- \001(\0132!.proto_ff.C"
    "haracterDBTreasureData\0228\n\rartifact_data\030"
    ". \001(\0132!.proto_ff.CharacterDBArtifactData"
    "\0227\n\014fateStarData\030/ \001(\0132!.proto_ff.Charac"
    "terDBFateStarData\0223\n\nconvoyData\0300 \001(\0132\037."
    "proto_ff.CharacterDBConvoyData\0222\n\ndaily_"
    "data\0301 \001(\0132\036.proto_ff.CharacterDBDailyDa"
    "ta\0222\n\nfield_data\0302 \001(\0132\036.proto_ff.Charac"
    "terDBFieldData\022-\n\007vipData\0303 \001(\0132\034.proto_"
    "ff.CharacterDBVipData\0225\n\013partnerData\0304 \001"
    "(\0132 .proto_ff.CharacterDBPartnerData\022/\n\010"
    "mallData\0305 \001(\0132\035.proto_ff.CharacterDBMal"
    "lData\0225\n\013godhoodData\0306 \001(\0132 .proto_ff.Ch"
    "aracterDBGodhoodData\0227\n\014recoveryData\0307 \001"
    "(\0132!.proto_ff.CharacterDBRecoveryData\0227\n"
    "\014activityData\0308 \001(\0132!.proto_ff.Character"
    "DBActivityData\0229\n\016soActivityData\0309 \001(\0132!"
    ".proto_ff.CharacterDBSOAcitveData\0225\n\013use"
    "itemData\030: \001(\0132 .proto_ff.CharacterDBUse"
    "ItemData\022;\n\016dayUseItemData\030; \001(\0132#.proto"
    "_ff.CharacterDBDayUseItemData\022>\n\020mystery"
    "shop_data\030< \001(\0132$.proto_ff.CharacterDBMy"
    "steryShopData\022J\n\026packagetestrebate_data\030"
    "= \001(\0132*.proto_ff.CharacterDBPackageTestR"
    "ebateData\022-\n\nfight_data\030> \001(\0132\031.proto_ff"
    ".FuncFightDBData\022-\n\npower_data\030\? \001(\0132\031.p"
    "roto_ff.PowerInfoDBList\0225\n\017occupation_da"
    "ta\030@ \001(\0132\034.proto_ff.OccupationTakeList\0226"
    "\n\014headset_data\030A \001(\0132 .proto_ff.Characte"
    "rDBHeadSetData\022=\n\020online_gift_data\030B \001(\013"
    "2#.proto_ff.CharacterDBOnlineGiftData\0225\n"
    "\016droplimit_data\030C \001(\0132\035.proto_ff.CharDro"
    "pLimitDBData\0224\n\013gmhelp_data\030D \001(\0132\037.prot"
    "o_ff.CharacterDBGmHelpData\0222\n\ngodgm_data"
    "\030E \001(\0132\036.proto_ff.CharacterDBGodGMData\022\'"
    "\n\tbowl_data\030F \001(\0132\024.proto_ff.BowlDBData\022"
    "5\n\013bagitemData\030G \001(\0132 .proto_ff.Characte"
    "rDBPackageData\0220\n\thide_data\030H \001(\0132\035.prot"
    "o_ff.CharacterDBHideData\"\205\005\n\025CharacterDB"
    "SimpleInfo\022\024\n\006charId\030\001 \001(\004B\004\240\301\024\001\022\014\n\004name"
    "\030\002 \001(\t\022\013\n\003sex\030\003 \001(\r\022\014\n\004prof\030\004 \001(\r\022\r\n\005lev"
    "el\030\005 \001(\r\022\013\n\003exp\030\006 \001(\003\022\n\n\002hp\030\007 \001(\004\022\022\n\nfig"
    "htPower\030\010 \001(\004\022\026\n\016enter_scene_id\030\t \001(\004\022\024\n"
    "\014enter_map_id\030\n \001(\004\022\021\n\tenterPosX\030\013 \001(\002\022\021"
    "\n\tenterPosY\030\014 \001(\002\022\021\n\tenterPosZ\030\r \001(\002\022\023\n\013"
    "lastSceneId\030\016 \001(\004\022\021\n\tlastMapId\030\017 \001(\004\022\020\n\010"
    "lastPosX\030\020 \001(\002\022\020\n\010lastPosY\030\021 \001(\002\022\020\n\010last"
    "PosZ\030\022 \001(\002\022)\n\006facade\030\023 \001(\0132\031.proto_ff.Ch"
    "arFacadeProto\022\020\n\010curstate\030\024 \001(\005\022\026\n\016delet"
    "echartime\030\025 \001(\004\022\022\n\ncreateTime\030\026 \001(\004\022\020\n\010t"
    "otalpay\030\027 \001(\r\022\013\n\003clx\030\030 \001(\002\022\013\n\003cly\030\031 \001(\002\022"
    "\013\n\003clz\030\032 \001(\002\022\022\n\noccupation\030\033 \001(\004\022\020\n\010apti"
    "tude\030\034 \001(\004\022\023\n\013finish_flag\030\035 \001(\005\022\016\n\006plati"
    "d\030\036 \001(\t\022\024\n\014palace_layer\030\037 \001(\005\022\032\n\022palace_"
    "break_count\030  \001(\005\022\r\n\005dirty\030! \001(\005", 32952);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common_logic.proto", &protobuf_RegisterTypes);
  PacketMsg::default_instance_ = new PacketMsg();
  ServerPacketMsg::default_instance_ = new ServerPacketMsg();
  WorldExternalConfig::default_instance_ = new WorldExternalConfig();
  CharFacadeProto::default_instance_ = new CharFacadeProto();
  CharTrimProto::default_instance_ = new CharTrimProto();
  ForceDupProto::default_instance_ = new ForceDupProto();
  CharMultTrimProto::default_instance_ = new CharMultTrimProto();
  CharacterDBBaseInfo::default_instance_ = new CharacterDBBaseInfo();
  Attr::default_instance_ = new Attr();
  Attr64::default_instance_ = new Attr64();
  AttrEx64::default_instance_ = new AttrEx64();
  FieldItemAttrInfo::default_instance_ = new FieldItemAttrInfo();
  MarryEquipInfo::default_instance_ = new MarryEquipInfo();
  ComposeSingleCostProto::default_instance_ = new ComposeSingleCostProto();
  ComposeCostProto::default_instance_ = new ComposeCostProto();
  blustarAttr::default_instance_ = new blustarAttr();
  ItemProtoInfo::default_instance_ = new ItemProtoInfo();
  CharacterDBPackageBag::default_instance_ = new CharacterDBPackageBag();
  CharacterDBPackageData::default_instance_ = new CharacterDBPackageData();
  CharacterDBMissionItemInfo::default_instance_ = new CharacterDBMissionItemInfo();
  CharacterDBMissionTrack::default_instance_ = new CharacterDBMissionTrack();
  CharacterDBDyMissionInfo::default_instance_ = new CharacterDBDyMissionInfo();
  CharacterDBRecentSubmitMission::default_instance_ = new CharacterDBRecentSubmitMission();
  CharacterDBTaskData::default_instance_ = new CharacterDBTaskData();
  CharacterDBSkillItem::default_instance_ = new CharacterDBSkillItem();
  CharacterDBSkillData::default_instance_ = new CharacterDBSkillData();
  CharacterDBAttrDetailInfo::default_instance_ = new CharacterDBAttrDetailInfo();
  CharacterDBExtendData::default_instance_ = new CharacterDBExtendData();
  EquipSlotProto::default_instance_ = new EquipSlotProto();
  CharacterDBEquipData::default_instance_ = new CharacterDBEquipData();
  DuplicateSingleProto::default_instance_ = new DuplicateSingleProto();
  DuplicateGroupProto::default_instance_ = new DuplicateGroupProto();
  DuplicateLadderExProto::default_instance_ = new DuplicateLadderExProto();
  DupHistoryExpProto::default_instance_ = new DupHistoryExpProto();
  DupUnionBossDBProto::default_instance_ = new DupUnionBossDBProto();
  DupPalaceFetchDBProto::default_instance_ = new DupPalaceFetchDBProto();
  DupPalaceMultFetchDBProto::default_instance_ = new DupPalaceMultFetchDBProto();
  DupUnionPalaceDBProto::default_instance_ = new DupUnionPalaceDBProto();
  CharacterDBDuplicateData::default_instance_ = new CharacterDBDuplicateData();
  SingleAchievementDBData::default_instance_ = new SingleAchievementDBData();
  GroupAchievementDBData::default_instance_ = new GroupAchievementDBData();
  CharacterAchievementDBData::default_instance_ = new CharacterAchievementDBData();
  EffectParamProto::default_instance_ = new EffectParamProto();
  MultEffectParamProto::default_instance_ = new MultEffectParamProto();
  BuffBagInfo::default_instance_ = new BuffBagInfo();
  CharacterBuffData::default_instance_ = new CharacterBuffData();
  CharacterArenaData::default_instance_ = new CharacterArenaData();
  CharacterTitleInfo::default_instance_ = new CharacterTitleInfo();
  CharacterTitleSaveData::default_instance_ = new CharacterTitleSaveData();
  CharacterDBSingleOperateLimitInfo::default_instance_ = new CharacterDBSingleOperateLimitInfo();
  CharacterDBOperateProto::default_instance_ = new CharacterDBOperateProto();
  CharacterDBOperateMutProto::default_instance_ = new CharacterDBOperateMutProto();
  CharacterDBOperateInfo::default_instance_ = new CharacterDBOperateInfo();
  CharacterDBOperateLimitInfo::default_instance_ = new CharacterDBOperateLimitInfo();
  CharacterDBSingleHuoYueDuInfoInfo::default_instance_ = new CharacterDBSingleHuoYueDuInfoInfo();
  CharacterDBHuoYueDuInfo::default_instance_ = new CharacterDBHuoYueDuInfo();
  IndultTaskEntry::default_instance_ = new IndultTaskEntry();
  IndultTaskGroupEntry::default_instance_ = new IndultTaskGroupEntry();
  ColPointsTaskEntry::default_instance_ = new ColPointsTaskEntry();
  ColPointsTaskGroupEntry::default_instance_ = new ColPointsTaskGroupEntry();
  ColPointsTaskData::default_instance_ = new ColPointsTaskData();
  WelfareDailySignInDBData::default_instance_ = new WelfareDailySignInDBData();
  WelfareLoginGiftDBData::default_instance_ = new WelfareLoginGiftDBData();
  WelfareLevelGiftDBData::default_instance_ = new WelfareLevelGiftDBData();
  CommodityEntry::default_instance_ = new CommodityEntry();
  LimitShopGroupEntry::default_instance_ = new LimitShopGroupEntry();
  LimitShopData::default_instance_ = new LimitShopData();
  LimitTaskEntry::default_instance_ = new LimitTaskEntry();
  LimitTaskGroupEntry::default_instance_ = new LimitTaskGroupEntry();
  LimitTaskData::default_instance_ = new LimitTaskData();
  WishDBTypeEntry::default_instance_ = new WishDBTypeEntry();
  WishDBData::default_instance_ = new WishDBData();
  FestivalInvestDBData::default_instance_ = new FestivalInvestDBData();
  FestivalExchangeDBData::default_instance_ = new FestivalExchangeDBData();
  FestivalLoginDBData::default_instance_ = new FestivalLoginDBData();
  FestivalTotalRechargeDBData::default_instance_ = new FestivalTotalRechargeDBData();
  FestivalConsumptionDBData::default_instance_ = new FestivalConsumptionDBData();
  FestivalKillBossData::default_instance_ = new FestivalKillBossData();
  FestivalZhiChongData::default_instance_ = new FestivalZhiChongData();
  FestivalPreRechargeData::default_instance_ = new FestivalPreRechargeData();
  FestivalSuperDBData::default_instance_ = new FestivalSuperDBData();
  FestivalSuperDoubleDBData::default_instance_ = new FestivalSuperDoubleDBData();
  FestivalHuoYueDuDBData::default_instance_ = new FestivalHuoYueDuDBData();
  FestivalFirstRechargeDBData::default_instance_ = new FestivalFirstRechargeDBData();
  FestivalYanHuaDBData::default_instance_ = new FestivalYanHuaDBData();
  FestivalBigYanHuaDBData::default_instance_ = new FestivalBigYanHuaDBData();
  FestivalShopDBData::default_instance_ = new FestivalShopDBData();
  LimitGiftDBData::default_instance_ = new LimitGiftDBData();
  LimitGiftActiveDBData::default_instance_ = new LimitGiftActiveDBData();
  FRechargeDBData::default_instance_ = new FRechargeDBData();
  FRechargeActiveDBData::default_instance_ = new FRechargeActiveDBData();
  FSmashEggDBData::default_instance_ = new FSmashEggDBData();
  FestivalSmashEggDBData::default_instance_ = new FestivalSmashEggDBData();
  OperateReward::default_instance_ = new OperateReward();
  OperateDailyRechargeData::default_instance_ = new OperateDailyRechargeData();
  OperateMoonCardData::default_instance_ = new OperateMoonCardData();
  OperateFundData::default_instance_ = new OperateFundData();
  OperateFirstRechargeType::default_instance_ = new OperateFirstRechargeType();
  OperateFirstRechargeData::default_instance_ = new OperateFirstRechargeData();
  WelfareVipGiftDBData::default_instance_ = new WelfareVipGiftDBData();
  HoroscopeJackpotDBData::default_instance_ = new HoroscopeJackpotDBData();
  HoroscopeActiveDBData::default_instance_ = new HoroscopeActiveDBData();
  WelfareOnlineGiftDBData::default_instance_ = new WelfareOnlineGiftDBData();
  OperationTurntableTaskDBData::default_instance_ = new OperationTurntableTaskDBData();
  OperationTurntableDBData::default_instance_ = new OperationTurntableDBData();
  OperationTutoraskDBData::default_instance_ = new OperationTutoraskDBData();
  OperationTutorDBData::default_instance_ = new OperationTutorDBData();
  limitInfo::default_instance_ = new limitInfo();
  FestivalWorldBossData::default_instance_ = new FestivalWorldBossData();
  OperateCommonEntryData::default_instance_ = new OperateCommonEntryData();
  OperateWingGiftData::default_instance_ = new OperateWingGiftData();
  OperateRechargeGiftData::default_instance_ = new OperateRechargeGiftData();
  CharacterDBOperateData::default_instance_ = new CharacterDBOperateData();
  PlayerActiveAnswerData::default_instance_ = new PlayerActiveAnswerData();
  CharacterDBActiveInfo::default_instance_ = new CharacterDBActiveInfo();
  PayCountDBProto::default_instance_ = new PayCountDBProto();
  OfflineRetDBProto::default_instance_ = new OfflineRetDBProto();
  CharacterPayData::default_instance_ = new CharacterPayData();
  FunctionUnlockInfo::default_instance_ = new FunctionUnlockInfo();
  EmblemSlot::default_instance_ = new EmblemSlot();
  CharacterDBEmblemData::default_instance_ = new CharacterDBEmblemData();
  CharacterDBIdentifyData::default_instance_ = new CharacterDBIdentifyData();
  ElementInfoData::default_instance_ = new ElementInfoData();
  CharacterDBElementData::default_instance_ = new CharacterDBElementData();
  CharacterDBFashionData::default_instance_ = new CharacterDBFashionData();
  CharacterDBWingData::default_instance_ = new CharacterDBWingData();
  CharacterDBPartnerData::default_instance_ = new CharacterDBPartnerData();
  CharacterDBMountData::default_instance_ = new CharacterDBMountData();
  PlayerBossDataInfo::default_instance_ = new PlayerBossDataInfo();
  CharacterDBBossAttentInfo::default_instance_ = new CharacterDBBossAttentInfo();
  CharacterDBBossData::default_instance_ = new CharacterDBBossData();
  RedPlayerInfo::default_instance_ = new RedPlayerInfo();
  CharacterDBPvpData::default_instance_ = new CharacterDBPvpData();
  CharacterDBTreasureData::default_instance_ = new CharacterDBTreasureData();
  ArtifactInfo::default_instance_ = new ArtifactInfo();
  CharacterDBArtifactData::default_instance_ = new CharacterDBArtifactData();
  CharacterDBFateStarData::default_instance_ = new CharacterDBFateStarData();
  CharacterDBConvoyData::default_instance_ = new CharacterDBConvoyData();
  CharacterDBDailyEntry::default_instance_ = new CharacterDBDailyEntry();
  CharacterDBDailyData::default_instance_ = new CharacterDBDailyData();
  FieldCylstalInfo::default_instance_ = new FieldCylstalInfo();
  FieldExInfo::default_instance_ = new FieldExInfo();
  CharacterDBFieldData::default_instance_ = new CharacterDBFieldData();
  vipGiftDBData::default_instance_ = new vipGiftDBData();
  VipTCardInfo::default_instance_ = new VipTCardInfo();
  VipTCardData::default_instance_ = new VipTCardData();
  CharacterDBVipData::default_instance_ = new CharacterDBVipData();
  CharacterDBMallData::default_instance_ = new CharacterDBMallData();
  GodhoodSlot::default_instance_ = new GodhoodSlot();
  CharacterDBGodhoodData::default_instance_ = new CharacterDBGodhoodData();
  RecoveryCompleteDBData::default_instance_ = new RecoveryCompleteDBData();
  RecoveryDBReward::default_instance_ = new RecoveryDBReward();
  RecoveryDBData::default_instance_ = new RecoveryDBData();
  CharacterDBRecoveryData::default_instance_ = new CharacterDBRecoveryData();
  CharacterDBActivityScuffleData::default_instance_ = new CharacterDBActivityScuffleData();
  CharacterDBActivityChaosDragonsData::default_instance_ = new CharacterDBActivityChaosDragonsData();
  CharacterDBActivityAsharmData::default_instance_ = new CharacterDBActivityAsharmData();
  CharacterDBCombatTeamData::default_instance_ = new CharacterDBCombatTeamData();
  CharacterDBSoloData::default_instance_ = new CharacterDBSoloData();
  CharacterDBAtBoxData::default_instance_ = new CharacterDBAtBoxData();
  CharDBAncientShopProto::default_instance_ = new CharDBAncientShopProto();
  CharDBAncientShopData::default_instance_ = new CharDBAncientShopData();
  CharacterDBAncientData::default_instance_ = new CharacterDBAncientData();
  ChooseGiftData::default_instance_ = new ChooseGiftData();
  CharacterDBActivityData::default_instance_ = new CharacterDBActivityData();
  SOAcitveTotalRechargeData::default_instance_ = new SOAcitveTotalRechargeData();
  SOAcitveAdvanceData::default_instance_ = new SOAcitveAdvanceData();
  SOAcitveGoodsData::default_instance_ = new SOAcitveGoodsData();
  CharacterDBSOAcitveData::default_instance_ = new CharacterDBSOAcitveData();
  CharacterDBUseItemData::default_instance_ = new CharacterDBUseItemData();
  CharacterDBDayUseItemData::default_instance_ = new CharacterDBDayUseItemData();
  MysteryShopDBData::default_instance_ = new MysteryShopDBData();
  CharacterDBMysteryShopData::default_instance_ = new CharacterDBMysteryShopData();
  CharacterDBPackageTestRebateData::default_instance_ = new CharacterDBPackageTestRebateData();
  FuncFightDBData::default_instance_ = new FuncFightDBData();
  PowerInfo::default_instance_ = new PowerInfo();
  PowerInfoDBList::default_instance_ = new PowerInfoDBList();
  OccupationTaskInfo::default_instance_ = new OccupationTaskInfo();
  OccupationTakeList::default_instance_ = new OccupationTakeList();
  ComStarInfo::default_instance_ = new ComStarInfo();
  CharacterDBHeadSetData::default_instance_ = new CharacterDBHeadSetData();
  CharacterDBOnlineGiftInfo::default_instance_ = new CharacterDBOnlineGiftInfo();
  CharacterDBOnlineGiftData::default_instance_ = new CharacterDBOnlineGiftData();
  CharDropItemDBProto::default_instance_ = new CharDropItemDBProto();
  CharDropMultItemDBProto::default_instance_ = new CharDropMultItemDBProto();
  CharDropLimitDBData::default_instance_ = new CharDropLimitDBData();
  CharacterDBGmHelpData::default_instance_ = new CharacterDBGmHelpData();
  GMToolsDB::default_instance_ = new GMToolsDB();
  CharacterDBGodGMData::default_instance_ = new CharacterDBGodGMData();
  BowlDBRewardProto::default_instance_ = new BowlDBRewardProto();
  BowlDBData::default_instance_ = new BowlDBData();
  HidePeriodDBProto::default_instance_ = new HidePeriodDBProto();
  CharacterDBHideData::default_instance_ = new CharacterDBHideData();
  tbRoleInfo::default_instance_ = new tbRoleInfo();
  CharacterDBSimpleInfo::default_instance_ = new CharacterDBSimpleInfo();
  PacketMsg::default_instance_->InitAsDefaultInstance();
  ServerPacketMsg::default_instance_->InitAsDefaultInstance();
  WorldExternalConfig::default_instance_->InitAsDefaultInstance();
  CharFacadeProto::default_instance_->InitAsDefaultInstance();
  CharTrimProto::default_instance_->InitAsDefaultInstance();
  ForceDupProto::default_instance_->InitAsDefaultInstance();
  CharMultTrimProto::default_instance_->InitAsDefaultInstance();
  CharacterDBBaseInfo::default_instance_->InitAsDefaultInstance();
  Attr::default_instance_->InitAsDefaultInstance();
  Attr64::default_instance_->InitAsDefaultInstance();
  AttrEx64::default_instance_->InitAsDefaultInstance();
  FieldItemAttrInfo::default_instance_->InitAsDefaultInstance();
  MarryEquipInfo::default_instance_->InitAsDefaultInstance();
  ComposeSingleCostProto::default_instance_->InitAsDefaultInstance();
  ComposeCostProto::default_instance_->InitAsDefaultInstance();
  blustarAttr::default_instance_->InitAsDefaultInstance();
  ItemProtoInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBPackageBag::default_instance_->InitAsDefaultInstance();
  CharacterDBPackageData::default_instance_->InitAsDefaultInstance();
  CharacterDBMissionItemInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBMissionTrack::default_instance_->InitAsDefaultInstance();
  CharacterDBDyMissionInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBRecentSubmitMission::default_instance_->InitAsDefaultInstance();
  CharacterDBTaskData::default_instance_->InitAsDefaultInstance();
  CharacterDBSkillItem::default_instance_->InitAsDefaultInstance();
  CharacterDBSkillData::default_instance_->InitAsDefaultInstance();
  CharacterDBAttrDetailInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBExtendData::default_instance_->InitAsDefaultInstance();
  EquipSlotProto::default_instance_->InitAsDefaultInstance();
  CharacterDBEquipData::default_instance_->InitAsDefaultInstance();
  DuplicateSingleProto::default_instance_->InitAsDefaultInstance();
  DuplicateGroupProto::default_instance_->InitAsDefaultInstance();
  DuplicateLadderExProto::default_instance_->InitAsDefaultInstance();
  DupHistoryExpProto::default_instance_->InitAsDefaultInstance();
  DupUnionBossDBProto::default_instance_->InitAsDefaultInstance();
  DupPalaceFetchDBProto::default_instance_->InitAsDefaultInstance();
  DupPalaceMultFetchDBProto::default_instance_->InitAsDefaultInstance();
  DupUnionPalaceDBProto::default_instance_->InitAsDefaultInstance();
  CharacterDBDuplicateData::default_instance_->InitAsDefaultInstance();
  SingleAchievementDBData::default_instance_->InitAsDefaultInstance();
  GroupAchievementDBData::default_instance_->InitAsDefaultInstance();
  CharacterAchievementDBData::default_instance_->InitAsDefaultInstance();
  EffectParamProto::default_instance_->InitAsDefaultInstance();
  MultEffectParamProto::default_instance_->InitAsDefaultInstance();
  BuffBagInfo::default_instance_->InitAsDefaultInstance();
  CharacterBuffData::default_instance_->InitAsDefaultInstance();
  CharacterArenaData::default_instance_->InitAsDefaultInstance();
  CharacterTitleInfo::default_instance_->InitAsDefaultInstance();
  CharacterTitleSaveData::default_instance_->InitAsDefaultInstance();
  CharacterDBSingleOperateLimitInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBOperateProto::default_instance_->InitAsDefaultInstance();
  CharacterDBOperateMutProto::default_instance_->InitAsDefaultInstance();
  CharacterDBOperateInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBOperateLimitInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBSingleHuoYueDuInfoInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBHuoYueDuInfo::default_instance_->InitAsDefaultInstance();
  IndultTaskEntry::default_instance_->InitAsDefaultInstance();
  IndultTaskGroupEntry::default_instance_->InitAsDefaultInstance();
  ColPointsTaskEntry::default_instance_->InitAsDefaultInstance();
  ColPointsTaskGroupEntry::default_instance_->InitAsDefaultInstance();
  ColPointsTaskData::default_instance_->InitAsDefaultInstance();
  WelfareDailySignInDBData::default_instance_->InitAsDefaultInstance();
  WelfareLoginGiftDBData::default_instance_->InitAsDefaultInstance();
  WelfareLevelGiftDBData::default_instance_->InitAsDefaultInstance();
  CommodityEntry::default_instance_->InitAsDefaultInstance();
  LimitShopGroupEntry::default_instance_->InitAsDefaultInstance();
  LimitShopData::default_instance_->InitAsDefaultInstance();
  LimitTaskEntry::default_instance_->InitAsDefaultInstance();
  LimitTaskGroupEntry::default_instance_->InitAsDefaultInstance();
  LimitTaskData::default_instance_->InitAsDefaultInstance();
  WishDBTypeEntry::default_instance_->InitAsDefaultInstance();
  WishDBData::default_instance_->InitAsDefaultInstance();
  FestivalInvestDBData::default_instance_->InitAsDefaultInstance();
  FestivalExchangeDBData::default_instance_->InitAsDefaultInstance();
  FestivalLoginDBData::default_instance_->InitAsDefaultInstance();
  FestivalTotalRechargeDBData::default_instance_->InitAsDefaultInstance();
  FestivalConsumptionDBData::default_instance_->InitAsDefaultInstance();
  FestivalKillBossData::default_instance_->InitAsDefaultInstance();
  FestivalZhiChongData::default_instance_->InitAsDefaultInstance();
  FestivalPreRechargeData::default_instance_->InitAsDefaultInstance();
  FestivalSuperDBData::default_instance_->InitAsDefaultInstance();
  FestivalSuperDoubleDBData::default_instance_->InitAsDefaultInstance();
  FestivalHuoYueDuDBData::default_instance_->InitAsDefaultInstance();
  FestivalFirstRechargeDBData::default_instance_->InitAsDefaultInstance();
  FestivalYanHuaDBData::default_instance_->InitAsDefaultInstance();
  FestivalBigYanHuaDBData::default_instance_->InitAsDefaultInstance();
  FestivalShopDBData::default_instance_->InitAsDefaultInstance();
  LimitGiftDBData::default_instance_->InitAsDefaultInstance();
  LimitGiftActiveDBData::default_instance_->InitAsDefaultInstance();
  FRechargeDBData::default_instance_->InitAsDefaultInstance();
  FRechargeActiveDBData::default_instance_->InitAsDefaultInstance();
  FSmashEggDBData::default_instance_->InitAsDefaultInstance();
  FestivalSmashEggDBData::default_instance_->InitAsDefaultInstance();
  OperateReward::default_instance_->InitAsDefaultInstance();
  OperateDailyRechargeData::default_instance_->InitAsDefaultInstance();
  OperateMoonCardData::default_instance_->InitAsDefaultInstance();
  OperateFundData::default_instance_->InitAsDefaultInstance();
  OperateFirstRechargeType::default_instance_->InitAsDefaultInstance();
  OperateFirstRechargeData::default_instance_->InitAsDefaultInstance();
  WelfareVipGiftDBData::default_instance_->InitAsDefaultInstance();
  HoroscopeJackpotDBData::default_instance_->InitAsDefaultInstance();
  HoroscopeActiveDBData::default_instance_->InitAsDefaultInstance();
  WelfareOnlineGiftDBData::default_instance_->InitAsDefaultInstance();
  OperationTurntableTaskDBData::default_instance_->InitAsDefaultInstance();
  OperationTurntableDBData::default_instance_->InitAsDefaultInstance();
  OperationTutoraskDBData::default_instance_->InitAsDefaultInstance();
  OperationTutorDBData::default_instance_->InitAsDefaultInstance();
  limitInfo::default_instance_->InitAsDefaultInstance();
  FestivalWorldBossData::default_instance_->InitAsDefaultInstance();
  OperateCommonEntryData::default_instance_->InitAsDefaultInstance();
  OperateWingGiftData::default_instance_->InitAsDefaultInstance();
  OperateRechargeGiftData::default_instance_->InitAsDefaultInstance();
  CharacterDBOperateData::default_instance_->InitAsDefaultInstance();
  PlayerActiveAnswerData::default_instance_->InitAsDefaultInstance();
  CharacterDBActiveInfo::default_instance_->InitAsDefaultInstance();
  PayCountDBProto::default_instance_->InitAsDefaultInstance();
  OfflineRetDBProto::default_instance_->InitAsDefaultInstance();
  CharacterPayData::default_instance_->InitAsDefaultInstance();
  FunctionUnlockInfo::default_instance_->InitAsDefaultInstance();
  EmblemSlot::default_instance_->InitAsDefaultInstance();
  CharacterDBEmblemData::default_instance_->InitAsDefaultInstance();
  CharacterDBIdentifyData::default_instance_->InitAsDefaultInstance();
  ElementInfoData::default_instance_->InitAsDefaultInstance();
  CharacterDBElementData::default_instance_->InitAsDefaultInstance();
  CharacterDBFashionData::default_instance_->InitAsDefaultInstance();
  CharacterDBWingData::default_instance_->InitAsDefaultInstance();
  CharacterDBPartnerData::default_instance_->InitAsDefaultInstance();
  CharacterDBMountData::default_instance_->InitAsDefaultInstance();
  PlayerBossDataInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBBossAttentInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBBossData::default_instance_->InitAsDefaultInstance();
  RedPlayerInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBPvpData::default_instance_->InitAsDefaultInstance();
  CharacterDBTreasureData::default_instance_->InitAsDefaultInstance();
  ArtifactInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBArtifactData::default_instance_->InitAsDefaultInstance();
  CharacterDBFateStarData::default_instance_->InitAsDefaultInstance();
  CharacterDBConvoyData::default_instance_->InitAsDefaultInstance();
  CharacterDBDailyEntry::default_instance_->InitAsDefaultInstance();
  CharacterDBDailyData::default_instance_->InitAsDefaultInstance();
  FieldCylstalInfo::default_instance_->InitAsDefaultInstance();
  FieldExInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBFieldData::default_instance_->InitAsDefaultInstance();
  vipGiftDBData::default_instance_->InitAsDefaultInstance();
  VipTCardInfo::default_instance_->InitAsDefaultInstance();
  VipTCardData::default_instance_->InitAsDefaultInstance();
  CharacterDBVipData::default_instance_->InitAsDefaultInstance();
  CharacterDBMallData::default_instance_->InitAsDefaultInstance();
  GodhoodSlot::default_instance_->InitAsDefaultInstance();
  CharacterDBGodhoodData::default_instance_->InitAsDefaultInstance();
  RecoveryCompleteDBData::default_instance_->InitAsDefaultInstance();
  RecoveryDBReward::default_instance_->InitAsDefaultInstance();
  RecoveryDBData::default_instance_->InitAsDefaultInstance();
  CharacterDBRecoveryData::default_instance_->InitAsDefaultInstance();
  CharacterDBActivityScuffleData::default_instance_->InitAsDefaultInstance();
  CharacterDBActivityChaosDragonsData::default_instance_->InitAsDefaultInstance();
  CharacterDBActivityAsharmData::default_instance_->InitAsDefaultInstance();
  CharacterDBCombatTeamData::default_instance_->InitAsDefaultInstance();
  CharacterDBSoloData::default_instance_->InitAsDefaultInstance();
  CharacterDBAtBoxData::default_instance_->InitAsDefaultInstance();
  CharDBAncientShopProto::default_instance_->InitAsDefaultInstance();
  CharDBAncientShopData::default_instance_->InitAsDefaultInstance();
  CharacterDBAncientData::default_instance_->InitAsDefaultInstance();
  ChooseGiftData::default_instance_->InitAsDefaultInstance();
  CharacterDBActivityData::default_instance_->InitAsDefaultInstance();
  SOAcitveTotalRechargeData::default_instance_->InitAsDefaultInstance();
  SOAcitveAdvanceData::default_instance_->InitAsDefaultInstance();
  SOAcitveGoodsData::default_instance_->InitAsDefaultInstance();
  CharacterDBSOAcitveData::default_instance_->InitAsDefaultInstance();
  CharacterDBUseItemData::default_instance_->InitAsDefaultInstance();
  CharacterDBDayUseItemData::default_instance_->InitAsDefaultInstance();
  MysteryShopDBData::default_instance_->InitAsDefaultInstance();
  CharacterDBMysteryShopData::default_instance_->InitAsDefaultInstance();
  CharacterDBPackageTestRebateData::default_instance_->InitAsDefaultInstance();
  FuncFightDBData::default_instance_->InitAsDefaultInstance();
  PowerInfo::default_instance_->InitAsDefaultInstance();
  PowerInfoDBList::default_instance_->InitAsDefaultInstance();
  OccupationTaskInfo::default_instance_->InitAsDefaultInstance();
  OccupationTakeList::default_instance_->InitAsDefaultInstance();
  ComStarInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBHeadSetData::default_instance_->InitAsDefaultInstance();
  CharacterDBOnlineGiftInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBOnlineGiftData::default_instance_->InitAsDefaultInstance();
  CharDropItemDBProto::default_instance_->InitAsDefaultInstance();
  CharDropMultItemDBProto::default_instance_->InitAsDefaultInstance();
  CharDropLimitDBData::default_instance_->InitAsDefaultInstance();
  CharacterDBGmHelpData::default_instance_->InitAsDefaultInstance();
  GMToolsDB::default_instance_->InitAsDefaultInstance();
  CharacterDBGodGMData::default_instance_->InitAsDefaultInstance();
  BowlDBRewardProto::default_instance_->InitAsDefaultInstance();
  BowlDBData::default_instance_->InitAsDefaultInstance();
  HidePeriodDBProto::default_instance_->InitAsDefaultInstance();
  CharacterDBHideData::default_instance_->InitAsDefaultInstance();
  tbRoleInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBSimpleInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_5flogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_5flogic_2eproto {
  StaticDescriptorInitializer_common_5flogic_2eproto() {
    protobuf_AddDesc_common_5flogic_2eproto();
  }
} static_descriptor_initializer_common_5flogic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PacketMsg::kCmdFieldNumber;
const int PacketMsg::kServerTypeFieldNumber;
const int PacketMsg::kUpperLimitFieldNumber;
const int PacketMsg::kMinIntervalFieldNumber;
const int PacketMsg::kControlTimeFieldNumber;
#endif  // !_MSC_VER

PacketMsg::PacketMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PacketMsg::InitAsDefaultInstance() {
}

PacketMsg::PacketMsg(const PacketMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PacketMsg::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  servertype_ = 0u;
  upper_limit_ = 0u;
  min_interval_ = 0u;
  control_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketMsg::~PacketMsg() {
  SharedDtor();
}

void PacketMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PacketMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketMsg_descriptor_;
}

const PacketMsg& PacketMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

PacketMsg* PacketMsg::default_instance_ = NULL;

PacketMsg* PacketMsg::New() const {
  return new PacketMsg;
}

void PacketMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0u;
    servertype_ = 0u;
    upper_limit_ = 0u;
    min_interval_ = 0u;
    control_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PacketMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverType;
        break;
      }

      // optional uint32 serverType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_upper_limit;
        break;
      }

      // optional uint32 upper_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upper_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upper_limit_)));
          set_has_upper_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_min_interval;
        break;
      }

      // optional uint32 min_interval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_interval_)));
          set_has_min_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_control_time;
        break;
      }

      // optional uint32 control_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_time_)));
          set_has_control_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PacketMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional uint32 serverType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertype(), output);
  }

  // optional uint32 upper_limit = 3;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upper_limit(), output);
  }

  // optional uint32 min_interval = 4;
  if (has_min_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_interval(), output);
  }

  // optional uint32 control_time = 5;
  if (has_control_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->control_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PacketMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional uint32 serverType = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertype(), target);
  }

  // optional uint32 upper_limit = 3;
  if (has_upper_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upper_limit(), target);
  }

  // optional uint32 min_interval = 4;
  if (has_min_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min_interval(), target);
  }

  // optional uint32 control_time = 5;
  if (has_control_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->control_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PacketMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 serverType = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // optional uint32 upper_limit = 3;
    if (has_upper_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upper_limit());
    }

    // optional uint32 min_interval = 4;
    if (has_min_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_interval());
    }

    // optional uint32 control_time = 5;
    if (has_control_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PacketMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PacketMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketMsg::MergeFrom(const PacketMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_upper_limit()) {
      set_upper_limit(from.upper_limit());
    }
    if (from.has_min_interval()) {
      set_min_interval(from.min_interval());
    }
    if (from.has_control_time()) {
      set_control_time(from.control_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PacketMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketMsg::CopyFrom(const PacketMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketMsg::IsInitialized() const {

  return true;
}

void PacketMsg::Swap(PacketMsg* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(servertype_, other->servertype_);
    std::swap(upper_limit_, other->upper_limit_);
    std::swap(min_interval_, other->min_interval_);
    std::swap(control_time_, other->control_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PacketMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketMsg_descriptor_;
  metadata.reflection = PacketMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerPacketMsg::kPacketMsgFieldNumber;
#endif  // !_MSC_VER

ServerPacketMsg::ServerPacketMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerPacketMsg::InitAsDefaultInstance() {
}

ServerPacketMsg::ServerPacketMsg(const ServerPacketMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerPacketMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPacketMsg::~ServerPacketMsg() {
  SharedDtor();
}

void ServerPacketMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerPacketMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerPacketMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerPacketMsg_descriptor_;
}

const ServerPacketMsg& ServerPacketMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ServerPacketMsg* ServerPacketMsg::default_instance_ = NULL;

ServerPacketMsg* ServerPacketMsg::New() const {
  return new ServerPacketMsg;
}

void ServerPacketMsg::Clear() {
  packetmsg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerPacketMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.PacketMsg PacketMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PacketMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packetmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PacketMsg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerPacketMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.PacketMsg PacketMsg = 1;
  for (int i = 0; i < this->packetmsg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->packetmsg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerPacketMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.PacketMsg PacketMsg = 1;
  for (int i = 0; i < this->packetmsg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->packetmsg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerPacketMsg::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.PacketMsg PacketMsg = 1;
  total_size += 1 * this->packetmsg_size();
  for (int i = 0; i < this->packetmsg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packetmsg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPacketMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerPacketMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerPacketMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerPacketMsg::MergeFrom(const ServerPacketMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  packetmsg_.MergeFrom(from.packetmsg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerPacketMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerPacketMsg::CopyFrom(const ServerPacketMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPacketMsg::IsInitialized() const {

  return true;
}

void ServerPacketMsg::Swap(ServerPacketMsg* other) {
  if (other != this) {
    packetmsg_.Swap(&other->packetmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerPacketMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerPacketMsg_descriptor_;
  metadata.reflection = ServerPacketMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldExternalConfig::kTokenTimeCheckFieldNumber;
#endif  // !_MSC_VER

WorldExternalConfig::WorldExternalConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldExternalConfig::InitAsDefaultInstance() {
}

WorldExternalConfig::WorldExternalConfig(const WorldExternalConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldExternalConfig::SharedCtor() {
  _cached_size_ = 0;
  tokentimecheck_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldExternalConfig::~WorldExternalConfig() {
  SharedDtor();
}

void WorldExternalConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldExternalConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldExternalConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldExternalConfig_descriptor_;
}

const WorldExternalConfig& WorldExternalConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WorldExternalConfig* WorldExternalConfig::default_instance_ = NULL;

WorldExternalConfig* WorldExternalConfig::New() const {
  return new WorldExternalConfig;
}

void WorldExternalConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tokentimecheck_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldExternalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool TokenTimeCheck = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tokentimecheck_)));
          set_has_tokentimecheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldExternalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool TokenTimeCheck = 1;
  if (has_tokentimecheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->tokentimecheck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldExternalConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool TokenTimeCheck = 1;
  if (has_tokentimecheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->tokentimecheck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldExternalConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool TokenTimeCheck = 1;
    if (has_tokentimecheck()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldExternalConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldExternalConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldExternalConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldExternalConfig::MergeFrom(const WorldExternalConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokentimecheck()) {
      set_tokentimecheck(from.tokentimecheck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldExternalConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldExternalConfig::CopyFrom(const WorldExternalConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldExternalConfig::IsInitialized() const {

  return true;
}

void WorldExternalConfig::Swap(WorldExternalConfig* other) {
  if (other != this) {
    std::swap(tokentimecheck_, other->tokentimecheck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldExternalConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldExternalConfig_descriptor_;
  metadata.reflection = WorldExternalConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharFacadeProto::kCurMountIdFieldNumber;
const int CharFacadeProto::kWingIdFieldNumber;
const int CharFacadeProto::kFashionClothesIdFieldNumber;
const int CharFacadeProto::kFashionWeaponIdFieldNumber;
const int CharFacadeProto::kOccupationIdFieldNumber;
const int CharFacadeProto::kTreasureIdFieldNumber;
const int CharFacadeProto::kTreasureTypeFieldNumber;
const int CharFacadeProto::kArtifactIdFieldNumber;
const int CharFacadeProto::kCurSelectMountIdFieldNumber;
const int CharFacadeProto::kPartnerIdFieldNumber;
const int CharFacadeProto::kHeadIdFieldNumber;
const int CharFacadeProto::kFrameIdFieldNumber;
const int CharFacadeProto::kBubbleIdFieldNumber;
#endif  // !_MSC_VER

CharFacadeProto::CharFacadeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharFacadeProto::InitAsDefaultInstance() {
}

CharFacadeProto::CharFacadeProto(const CharFacadeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharFacadeProto::SharedCtor() {
  _cached_size_ = 0;
  cur_mount_id_ = GOOGLE_ULONGLONG(0);
  wing_id_ = GOOGLE_ULONGLONG(0);
  fashion_clothes_id_ = GOOGLE_ULONGLONG(0);
  fashion_weapon_id_ = GOOGLE_ULONGLONG(0);
  occupationid_ = GOOGLE_ULONGLONG(0);
  treasure_id_ = GOOGLE_ULONGLONG(0);
  treasure_type_ = 0;
  artifact_id_ = GOOGLE_ULONGLONG(0);
  cur_select_mount_id_ = GOOGLE_ULONGLONG(0);
  partner_id_ = GOOGLE_ULONGLONG(0);
  head_id_ = GOOGLE_ULONGLONG(0);
  frame_id_ = GOOGLE_ULONGLONG(0);
  bubble_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharFacadeProto::~CharFacadeProto() {
  SharedDtor();
}

void CharFacadeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharFacadeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharFacadeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharFacadeProto_descriptor_;
}

const CharFacadeProto& CharFacadeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharFacadeProto* CharFacadeProto::default_instance_ = NULL;

CharFacadeProto* CharFacadeProto::New() const {
  return new CharFacadeProto;
}

void CharFacadeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_mount_id_ = GOOGLE_ULONGLONG(0);
    wing_id_ = GOOGLE_ULONGLONG(0);
    fashion_clothes_id_ = GOOGLE_ULONGLONG(0);
    fashion_weapon_id_ = GOOGLE_ULONGLONG(0);
    occupationid_ = GOOGLE_ULONGLONG(0);
    treasure_id_ = GOOGLE_ULONGLONG(0);
    treasure_type_ = 0;
    artifact_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_select_mount_id_ = GOOGLE_ULONGLONG(0);
    partner_id_ = GOOGLE_ULONGLONG(0);
    head_id_ = GOOGLE_ULONGLONG(0);
    frame_id_ = GOOGLE_ULONGLONG(0);
    bubble_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharFacadeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cur_mount_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_mount_id_)));
          set_has_cur_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wing_id;
        break;
      }

      // optional uint64 wing_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wing_id_)));
          set_has_wing_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fashion_clothes_id;
        break;
      }

      // optional uint64 fashion_clothes_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_clothes_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fashion_clothes_id_)));
          set_has_fashion_clothes_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fashion_weapon_id;
        break;
      }

      // optional uint64 fashion_weapon_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fashion_weapon_id_)));
          set_has_fashion_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_occupationId;
        break;
      }

      // optional uint64 occupationId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &occupationid_)));
          set_has_occupationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_treasure_id;
        break;
      }

      // optional uint64 treasure_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &treasure_id_)));
          set_has_treasure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_treasure_type;
        break;
      }

      // optional int32 treasure_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_type_)));
          set_has_treasure_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_artifact_id;
        break;
      }

      // optional uint64 artifact_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_artifact_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &artifact_id_)));
          set_has_artifact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cur_select_mount_id;
        break;
      }

      // optional uint64 cur_select_mount_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_select_mount_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_select_mount_id_)));
          set_has_cur_select_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_head_id;
        break;
      }

      // optional uint64 head_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_frame_id;
        break;
      }

      // optional uint64 frame_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bubble_id;
        break;
      }

      // optional uint64 bubble_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bubble_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bubble_id_)));
          set_has_bubble_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharFacadeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cur_mount_id = 1;
  if (has_cur_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cur_mount_id(), output);
  }

  // optional uint64 wing_id = 2;
  if (has_wing_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->wing_id(), output);
  }

  // optional uint64 fashion_clothes_id = 3;
  if (has_fashion_clothes_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fashion_clothes_id(), output);
  }

  // optional uint64 fashion_weapon_id = 4;
  if (has_fashion_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fashion_weapon_id(), output);
  }

  // optional uint64 occupationId = 5;
  if (has_occupationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->occupationid(), output);
  }

  // optional uint64 treasure_id = 6;
  if (has_treasure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->treasure_id(), output);
  }

  // optional int32 treasure_type = 7;
  if (has_treasure_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->treasure_type(), output);
  }

  // optional uint64 artifact_id = 8;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->artifact_id(), output);
  }

  // optional uint64 cur_select_mount_id = 9;
  if (has_cur_select_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->cur_select_mount_id(), output);
  }

  // optional uint64 partner_id = 10;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->partner_id(), output);
  }

  // optional uint64 head_id = 11;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->head_id(), output);
  }

  // optional uint64 frame_id = 12;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->frame_id(), output);
  }

  // optional uint64 bubble_id = 13;
  if (has_bubble_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->bubble_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharFacadeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cur_mount_id = 1;
  if (has_cur_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cur_mount_id(), target);
  }

  // optional uint64 wing_id = 2;
  if (has_wing_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->wing_id(), target);
  }

  // optional uint64 fashion_clothes_id = 3;
  if (has_fashion_clothes_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fashion_clothes_id(), target);
  }

  // optional uint64 fashion_weapon_id = 4;
  if (has_fashion_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fashion_weapon_id(), target);
  }

  // optional uint64 occupationId = 5;
  if (has_occupationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->occupationid(), target);
  }

  // optional uint64 treasure_id = 6;
  if (has_treasure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->treasure_id(), target);
  }

  // optional int32 treasure_type = 7;
  if (has_treasure_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->treasure_type(), target);
  }

  // optional uint64 artifact_id = 8;
  if (has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->artifact_id(), target);
  }

  // optional uint64 cur_select_mount_id = 9;
  if (has_cur_select_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->cur_select_mount_id(), target);
  }

  // optional uint64 partner_id = 10;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->partner_id(), target);
  }

  // optional uint64 head_id = 11;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->head_id(), target);
  }

  // optional uint64 frame_id = 12;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->frame_id(), target);
  }

  // optional uint64 bubble_id = 13;
  if (has_bubble_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->bubble_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharFacadeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cur_mount_id = 1;
    if (has_cur_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_mount_id());
    }

    // optional uint64 wing_id = 2;
    if (has_wing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wing_id());
    }

    // optional uint64 fashion_clothes_id = 3;
    if (has_fashion_clothes_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fashion_clothes_id());
    }

    // optional uint64 fashion_weapon_id = 4;
    if (has_fashion_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fashion_weapon_id());
    }

    // optional uint64 occupationId = 5;
    if (has_occupationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->occupationid());
    }

    // optional uint64 treasure_id = 6;
    if (has_treasure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->treasure_id());
    }

    // optional int32 treasure_type = 7;
    if (has_treasure_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_type());
    }

    // optional uint64 artifact_id = 8;
    if (has_artifact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->artifact_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 cur_select_mount_id = 9;
    if (has_cur_select_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_select_mount_id());
    }

    // optional uint64 partner_id = 10;
    if (has_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->partner_id());
    }

    // optional uint64 head_id = 11;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->head_id());
    }

    // optional uint64 frame_id = 12;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frame_id());
    }

    // optional uint64 bubble_id = 13;
    if (has_bubble_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bubble_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharFacadeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharFacadeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharFacadeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharFacadeProto::MergeFrom(const CharFacadeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_mount_id()) {
      set_cur_mount_id(from.cur_mount_id());
    }
    if (from.has_wing_id()) {
      set_wing_id(from.wing_id());
    }
    if (from.has_fashion_clothes_id()) {
      set_fashion_clothes_id(from.fashion_clothes_id());
    }
    if (from.has_fashion_weapon_id()) {
      set_fashion_weapon_id(from.fashion_weapon_id());
    }
    if (from.has_occupationid()) {
      set_occupationid(from.occupationid());
    }
    if (from.has_treasure_id()) {
      set_treasure_id(from.treasure_id());
    }
    if (from.has_treasure_type()) {
      set_treasure_type(from.treasure_type());
    }
    if (from.has_artifact_id()) {
      set_artifact_id(from.artifact_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_select_mount_id()) {
      set_cur_select_mount_id(from.cur_select_mount_id());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_bubble_id()) {
      set_bubble_id(from.bubble_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharFacadeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharFacadeProto::CopyFrom(const CharFacadeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharFacadeProto::IsInitialized() const {

  return true;
}

void CharFacadeProto::Swap(CharFacadeProto* other) {
  if (other != this) {
    std::swap(cur_mount_id_, other->cur_mount_id_);
    std::swap(wing_id_, other->wing_id_);
    std::swap(fashion_clothes_id_, other->fashion_clothes_id_);
    std::swap(fashion_weapon_id_, other->fashion_weapon_id_);
    std::swap(occupationid_, other->occupationid_);
    std::swap(treasure_id_, other->treasure_id_);
    std::swap(treasure_type_, other->treasure_type_);
    std::swap(artifact_id_, other->artifact_id_);
    std::swap(cur_select_mount_id_, other->cur_select_mount_id_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(head_id_, other->head_id_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(bubble_id_, other->bubble_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharFacadeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharFacadeProto_descriptor_;
  metadata.reflection = CharFacadeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharTrimProto::kTrimTypeFieldNumber;
const int CharTrimProto::kTrimLevelFieldNumber;
#endif  // !_MSC_VER

CharTrimProto::CharTrimProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharTrimProto::InitAsDefaultInstance() {
}

CharTrimProto::CharTrimProto(const CharTrimProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharTrimProto::SharedCtor() {
  _cached_size_ = 0;
  trim_type_ = 0;
  trim_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharTrimProto::~CharTrimProto() {
  SharedDtor();
}

void CharTrimProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharTrimProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharTrimProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharTrimProto_descriptor_;
}

const CharTrimProto& CharTrimProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharTrimProto* CharTrimProto::default_instance_ = NULL;

CharTrimProto* CharTrimProto::New() const {
  return new CharTrimProto;
}

void CharTrimProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trim_type_ = 0;
    trim_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharTrimProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trim_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trim_type_)));
          set_has_trim_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trim_level;
        break;
      }

      // optional int32 trim_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trim_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trim_level_)));
          set_has_trim_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharTrimProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 trim_type = 1;
  if (has_trim_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trim_type(), output);
  }

  // optional int32 trim_level = 2;
  if (has_trim_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trim_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharTrimProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 trim_type = 1;
  if (has_trim_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trim_type(), target);
  }

  // optional int32 trim_level = 2;
  if (has_trim_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trim_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharTrimProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 trim_type = 1;
    if (has_trim_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trim_type());
    }

    // optional int32 trim_level = 2;
    if (has_trim_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trim_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharTrimProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharTrimProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharTrimProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharTrimProto::MergeFrom(const CharTrimProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trim_type()) {
      set_trim_type(from.trim_type());
    }
    if (from.has_trim_level()) {
      set_trim_level(from.trim_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharTrimProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharTrimProto::CopyFrom(const CharTrimProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharTrimProto::IsInitialized() const {

  return true;
}

void CharTrimProto::Swap(CharTrimProto* other) {
  if (other != this) {
    std::swap(trim_type_, other->trim_type_);
    std::swap(trim_level_, other->trim_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharTrimProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharTrimProto_descriptor_;
  metadata.reflection = CharTrimProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceDupProto::kTreasureStateFieldNumber;
const int ForceDupProto::kLadderStateFieldNumber;
#endif  // !_MSC_VER

ForceDupProto::ForceDupProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForceDupProto::InitAsDefaultInstance() {
}

ForceDupProto::ForceDupProto(const ForceDupProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForceDupProto::SharedCtor() {
  _cached_size_ = 0;
  treasure_state_ = 0;
  ladder_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceDupProto::~ForceDupProto() {
  SharedDtor();
}

void ForceDupProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForceDupProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceDupProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceDupProto_descriptor_;
}

const ForceDupProto& ForceDupProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ForceDupProto* ForceDupProto::default_instance_ = NULL;

ForceDupProto* ForceDupProto::New() const {
  return new ForceDupProto;
}

void ForceDupProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    treasure_state_ = 0;
    ladder_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceDupProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 treasure_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_state_)));
          set_has_treasure_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ladder_state;
        break;
      }

      // optional int32 ladder_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ladder_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ladder_state_)));
          set_has_ladder_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForceDupProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 treasure_state = 1;
  if (has_treasure_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->treasure_state(), output);
  }

  // optional int32 ladder_state = 2;
  if (has_ladder_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ladder_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForceDupProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 treasure_state = 1;
  if (has_treasure_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->treasure_state(), target);
  }

  // optional int32 ladder_state = 2;
  if (has_ladder_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ladder_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForceDupProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 treasure_state = 1;
    if (has_treasure_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_state());
    }

    // optional int32 ladder_state = 2;
    if (has_ladder_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ladder_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceDupProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceDupProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceDupProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceDupProto::MergeFrom(const ForceDupProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treasure_state()) {
      set_treasure_state(from.treasure_state());
    }
    if (from.has_ladder_state()) {
      set_ladder_state(from.ladder_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceDupProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceDupProto::CopyFrom(const ForceDupProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceDupProto::IsInitialized() const {

  return true;
}

void ForceDupProto::Swap(ForceDupProto* other) {
  if (other != this) {
    std::swap(treasure_state_, other->treasure_state_);
    std::swap(ladder_state_, other->ladder_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceDupProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceDupProto_descriptor_;
  metadata.reflection = ForceDupProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharMultTrimProto::kTrimLstFieldNumber;
#endif  // !_MSC_VER

CharMultTrimProto::CharMultTrimProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharMultTrimProto::InitAsDefaultInstance() {
}

CharMultTrimProto::CharMultTrimProto(const CharMultTrimProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharMultTrimProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharMultTrimProto::~CharMultTrimProto() {
  SharedDtor();
}

void CharMultTrimProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharMultTrimProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharMultTrimProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharMultTrimProto_descriptor_;
}

const CharMultTrimProto& CharMultTrimProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharMultTrimProto* CharMultTrimProto::default_instance_ = NULL;

CharMultTrimProto* CharMultTrimProto::New() const {
  return new CharMultTrimProto;
}

void CharMultTrimProto::Clear() {
  trim_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharMultTrimProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharTrimProto trim_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trim_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trim_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trim_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharMultTrimProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharTrimProto trim_lst = 1;
  for (int i = 0; i < this->trim_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trim_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharMultTrimProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharTrimProto trim_lst = 1;
  for (int i = 0; i < this->trim_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trim_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharMultTrimProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharTrimProto trim_lst = 1;
  total_size += 1 * this->trim_lst_size();
  for (int i = 0; i < this->trim_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trim_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharMultTrimProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharMultTrimProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharMultTrimProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharMultTrimProto::MergeFrom(const CharMultTrimProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  trim_lst_.MergeFrom(from.trim_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharMultTrimProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharMultTrimProto::CopyFrom(const CharMultTrimProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharMultTrimProto::IsInitialized() const {

  return true;
}

void CharMultTrimProto::Swap(CharMultTrimProto* other) {
  if (other != this) {
    trim_lst_.Swap(&other->trim_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharMultTrimProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharMultTrimProto_descriptor_;
  metadata.reflection = CharMultTrimProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBBaseInfo::kCreateTimeFieldNumber;
const int CharacterDBBaseInfo::kLastSaveTimeFieldNumber;
const int CharacterDBBaseInfo::kOnlineTimeFieldNumber;
const int CharacterDBBaseInfo::kLoginTimeFieldNumber;
const int CharacterDBBaseInfo::kLogoutTimeFieldNumber;
const int CharacterDBBaseInfo::kNameFieldNumber;
const int CharacterDBBaseInfo::kSexFieldNumber;
const int CharacterDBBaseInfo::kProfFieldNumber;
const int CharacterDBBaseInfo::kLevelFieldNumber;
const int CharacterDBBaseInfo::kExpFieldNumber;
const int CharacterDBBaseInfo::kHpFieldNumber;
const int CharacterDBBaseInfo::kFightFieldNumber;
const int CharacterDBBaseInfo::kGoldFieldNumber;
const int CharacterDBBaseInfo::kDiamondFieldNumber;
const int CharacterDBBaseInfo::kBinddiamondFieldNumber;
const int CharacterDBBaseInfo::kEnterSceneIdFieldNumber;
const int CharacterDBBaseInfo::kEnterMapIdFieldNumber;
const int CharacterDBBaseInfo::kEnterPosXFieldNumber;
const int CharacterDBBaseInfo::kEnterPosYFieldNumber;
const int CharacterDBBaseInfo::kEnterPosZFieldNumber;
const int CharacterDBBaseInfo::kLastSceneIdFieldNumber;
const int CharacterDBBaseInfo::kLastMapIdFieldNumber;
const int CharacterDBBaseInfo::kLastPosXFieldNumber;
const int CharacterDBBaseInfo::kLastPosYFieldNumber;
const int CharacterDBBaseInfo::kLastPosZFieldNumber;
const int CharacterDBBaseInfo::kLastReviveTimeFieldNumber;
const int CharacterDBBaseInfo::kCurStateFieldNumber;
const int CharacterDBBaseInfo::kClxFieldNumber;
const int CharacterDBBaseInfo::kClyFieldNumber;
const int CharacterDBBaseInfo::kClzFieldNumber;
const int CharacterDBBaseInfo::kOccupationFieldNumber;
const int CharacterDBBaseInfo::kAptitudeFieldNumber;
const int CharacterDBBaseInfo::kFacadeFieldNumber;
const int CharacterDBBaseInfo::kArenacoinFieldNumber;
const int CharacterDBBaseInfo::kStarEssenceFieldNumber;
const int CharacterDBBaseInfo::kStarExpFieldNumber;
const int CharacterDBBaseInfo::kStarFragmentFieldNumber;
const int CharacterDBBaseInfo::kHangUpTimeFieldNumber;
const int CharacterDBBaseInfo::kActiveNumFieldNumber;
const int CharacterDBBaseInfo::kVipLevelFieldNumber;
const int CharacterDBBaseInfo::kGodhoodExpFieldNumber;
const int CharacterDBBaseInfo::kSmallSpiritFieldNumber;
const int CharacterDBBaseInfo::kBigSpiritFieldNumber;
const int CharacterDBBaseInfo::kTrimFieldNumber;
const int CharacterDBBaseInfo::kFinishFlagFieldNumber;
const int CharacterDBBaseInfo::kGuideFieldNumber;
const int CharacterDBBaseInfo::kForceFieldNumber;
const int CharacterDBBaseInfo::kUseTitleFieldNumber;
const int CharacterDBBaseInfo::kSubpackTypeFieldNumber;
const int CharacterDBBaseInfo::kSubpackFetchFieldNumber;
const int CharacterDBBaseInfo::kRechargeDiscountDateFieldNumber;
const int CharacterDBBaseInfo::kFriendNumFieldNumber;
const int CharacterDBBaseInfo::kPlatidFieldNumber;
const int CharacterDBBaseInfo::kSoloScoreFieldNumber;
const int CharacterDBBaseInfo::kSoloPrvScoreFieldNumber;
const int CharacterDBBaseInfo::kDragonsNumFieldNumber;
const int CharacterDBBaseInfo::kTotalLoginDayFieldNumber;
const int CharacterDBBaseInfo::kLoginDayTimeFieldNumber;
const int CharacterDBBaseInfo::kLoginGiftFieldNumber;
const int CharacterDBBaseInfo::kVipCardDiamondFieldNumber;
const int CharacterDBBaseInfo::kHolydiaFieldNumber;
const int CharacterDBBaseInfo::kReliveNumFieldNumber;
const int CharacterDBBaseInfo::kLastReliveTimeFieldNumber;
const int CharacterDBBaseInfo::kDeadStaticMapIdFieldNumber;
const int CharacterDBBaseInfo::kDeadStaticNumFieldNumber;
const int CharacterDBBaseInfo::kDeadStaticCdFieldNumber;
const int CharacterDBBaseInfo::kFushiTimeFieldNumber;
const int CharacterDBBaseInfo::kStarStoneFieldNumber;
const int CharacterDBBaseInfo::kVoucherFieldNumber;
const int CharacterDBBaseInfo::kWaiguanFieldNumber;
const int CharacterDBBaseInfo::kGmpointFieldNumber;
const int CharacterDBBaseInfo::kGmpointLimitFieldNumber;
#endif  // !_MSC_VER

CharacterDBBaseInfo::CharacterDBBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBBaseInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::CharFacadeProto*>(&::proto_ff::CharFacadeProto::default_instance());
  trim_ = const_cast< ::proto_ff::CharMultTrimProto*>(&::proto_ff::CharMultTrimProto::default_instance());
  force_ = const_cast< ::proto_ff::ForceDupProto*>(&::proto_ff::ForceDupProto::default_instance());
}

CharacterDBBaseInfo::CharacterDBBaseInfo(const CharacterDBBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  createtime_ = GOOGLE_ULONGLONG(0);
  lastsavetime_ = GOOGLE_ULONGLONG(0);
  onlinetime_ = GOOGLE_ULONGLONG(0);
  logintime_ = GOOGLE_ULONGLONG(0);
  logouttime_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  prof_ = 0u;
  level_ = 0u;
  exp_ = GOOGLE_LONGLONG(0);
  hp_ = GOOGLE_LONGLONG(0);
  fight_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_ULONGLONG(0);
  diamond_ = GOOGLE_ULONGLONG(0);
  binddiamond_ = GOOGLE_ULONGLONG(0);
  enter_scene_id_ = GOOGLE_ULONGLONG(0);
  enter_map_id_ = GOOGLE_ULONGLONG(0);
  enterposx_ = 0;
  enterposy_ = 0;
  enterposz_ = 0;
  lastsceneid_ = GOOGLE_ULONGLONG(0);
  lastmapid_ = GOOGLE_ULONGLONG(0);
  lastposx_ = 0;
  lastposy_ = 0;
  lastposz_ = 0;
  lastrevivetime_ = GOOGLE_ULONGLONG(0);
  curstate_ = 0u;
  clx_ = 0;
  cly_ = 0;
  clz_ = 0;
  occupation_ = GOOGLE_ULONGLONG(0);
  aptitude_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  arenacoin_ = GOOGLE_LONGLONG(0);
  staressence_ = GOOGLE_LONGLONG(0);
  starexp_ = GOOGLE_LONGLONG(0);
  starfragment_ = GOOGLE_LONGLONG(0);
  hanguptime_ = GOOGLE_LONGLONG(0);
  active_num_ = 0u;
  viplevel_ = GOOGLE_LONGLONG(0);
  godhoodexp_ = GOOGLE_LONGLONG(0);
  smallspirit_ = GOOGLE_LONGLONG(0);
  bigspirit_ = GOOGLE_LONGLONG(0);
  trim_ = NULL;
  finish_flag_ = 0;
  guide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  force_ = NULL;
  usetitle_ = GOOGLE_LONGLONG(0);
  subpack_type_ = 0;
  subpack_fetch_ = 0;
  rechargediscountdate_ = 0;
  friendnum_ = 0;
  platid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  solo_score_ = 0;
  solo_prv_score_ = 0;
  dragons_num_ = 0;
  total_login_day_ = 0u;
  login_day_time_ = GOOGLE_ULONGLONG(0);
  login_gift_ = 0;
  vipcarddiamond_ = GOOGLE_LONGLONG(0);
  holydia_ = GOOGLE_ULONGLONG(0);
  relive_num_ = 0;
  last_relive_time_ = GOOGLE_LONGLONG(0);
  dead_static_map_id_ = GOOGLE_LONGLONG(0);
  dead_static_num_ = 0;
  dead_static_cd_ = GOOGLE_LONGLONG(0);
  fushi_time_ = 0;
  starstone_ = GOOGLE_LONGLONG(0);
  voucher_ = GOOGLE_LONGLONG(0);
  waiguan_ = GOOGLE_LONGLONG(0);
  gmpoint_ = GOOGLE_LONGLONG(0);
  gmpoint_limit_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBBaseInfo::~CharacterDBBaseInfo() {
  SharedDtor();
}

void CharacterDBBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guide_ != &::google::protobuf::internal::kEmptyString) {
    delete guide_;
  }
  if (platid_ != &::google::protobuf::internal::kEmptyString) {
    delete platid_;
  }
  if (this != default_instance_) {
    delete facade_;
    delete trim_;
    delete force_;
  }
}

void CharacterDBBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBBaseInfo_descriptor_;
}

const CharacterDBBaseInfo& CharacterDBBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBBaseInfo* CharacterDBBaseInfo::default_instance_ = NULL;

CharacterDBBaseInfo* CharacterDBBaseInfo::New() const {
  return new CharacterDBBaseInfo;
}

void CharacterDBBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    createtime_ = GOOGLE_ULONGLONG(0);
    lastsavetime_ = GOOGLE_ULONGLONG(0);
    onlinetime_ = GOOGLE_ULONGLONG(0);
    logintime_ = GOOGLE_ULONGLONG(0);
    logouttime_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    prof_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0u;
    exp_ = GOOGLE_LONGLONG(0);
    hp_ = GOOGLE_LONGLONG(0);
    fight_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_ULONGLONG(0);
    diamond_ = GOOGLE_ULONGLONG(0);
    binddiamond_ = GOOGLE_ULONGLONG(0);
    enter_scene_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    enter_map_id_ = GOOGLE_ULONGLONG(0);
    enterposx_ = 0;
    enterposy_ = 0;
    enterposz_ = 0;
    lastsceneid_ = GOOGLE_ULONGLONG(0);
    lastmapid_ = GOOGLE_ULONGLONG(0);
    lastposx_ = 0;
    lastposy_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    lastposz_ = 0;
    lastrevivetime_ = GOOGLE_ULONGLONG(0);
    curstate_ = 0u;
    clx_ = 0;
    cly_ = 0;
    clz_ = 0;
    occupation_ = GOOGLE_ULONGLONG(0);
    aptitude_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::CharFacadeProto::Clear();
    }
    arenacoin_ = GOOGLE_LONGLONG(0);
    staressence_ = GOOGLE_LONGLONG(0);
    starexp_ = GOOGLE_LONGLONG(0);
    starfragment_ = GOOGLE_LONGLONG(0);
    hanguptime_ = GOOGLE_LONGLONG(0);
    active_num_ = 0u;
    viplevel_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    godhoodexp_ = GOOGLE_LONGLONG(0);
    smallspirit_ = GOOGLE_LONGLONG(0);
    bigspirit_ = GOOGLE_LONGLONG(0);
    if (has_trim()) {
      if (trim_ != NULL) trim_->::proto_ff::CharMultTrimProto::Clear();
    }
    finish_flag_ = 0;
    if (has_guide()) {
      if (guide_ != &::google::protobuf::internal::kEmptyString) {
        guide_->clear();
      }
    }
    if (has_force()) {
      if (force_ != NULL) force_->::proto_ff::ForceDupProto::Clear();
    }
    usetitle_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    subpack_type_ = 0;
    subpack_fetch_ = 0;
    rechargediscountdate_ = 0;
    friendnum_ = 0;
    if (has_platid()) {
      if (platid_ != &::google::protobuf::internal::kEmptyString) {
        platid_->clear();
      }
    }
    solo_score_ = 0;
    solo_prv_score_ = 0;
    dragons_num_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    total_login_day_ = 0u;
    login_day_time_ = GOOGLE_ULONGLONG(0);
    login_gift_ = 0;
    vipcarddiamond_ = GOOGLE_LONGLONG(0);
    holydia_ = GOOGLE_ULONGLONG(0);
    relive_num_ = 0;
    last_relive_time_ = GOOGLE_LONGLONG(0);
    dead_static_map_id_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    dead_static_num_ = 0;
    dead_static_cd_ = GOOGLE_LONGLONG(0);
    fushi_time_ = 0;
    starstone_ = GOOGLE_LONGLONG(0);
    voucher_ = GOOGLE_LONGLONG(0);
    waiguan_ = GOOGLE_LONGLONG(0);
    gmpoint_ = GOOGLE_LONGLONG(0);
    gmpoint_limit_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 createTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastSaveTime;
        break;
      }

      // optional uint64 lastSaveTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSaveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsavetime_)));
          set_has_lastsavetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_onlineTime;
        break;
      }

      // optional uint64 onlineTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginTime;
        break;
      }

      // optional uint64 loginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logoutTime;
        break;
      }

      // optional uint64 logoutTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logouttime_)));
          set_has_logouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional uint32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_exp;
        break;
      }

      // optional int64 exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }

      // optional int64 hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fight;
        break;
      }

      // optional int64 fight = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_diamond;
        break;
      }

      // optional uint64 diamond = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_binddiamond;
        break;
      }

      // optional uint64 binddiamond = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binddiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_enter_scene_id;
        break;
      }

      // optional uint64 enter_scene_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_scene_id_)));
          set_has_enter_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_enter_map_id;
        break;
      }

      // optional uint64 enter_map_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_map_id_)));
          set_has_enter_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_enterPosX;
        break;
      }

      // optional float enterPosX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposx_)));
          set_has_enterposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_enterPosY;
        break;
      }

      // optional float enterPosY = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposy_)));
          set_has_enterposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_enterPosZ;
        break;
      }

      // optional float enterPosZ = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposz_)));
          set_has_enterposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lastSceneId;
        break;
      }

      // optional uint64 lastSceneId = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsceneid_)));
          set_has_lastsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_lastMapId;
        break;
      }

      // optional uint64 lastMapId = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_lastPosX;
        break;
      }

      // optional float lastPosX = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposx_)));
          set_has_lastposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_lastPosY;
        break;
      }

      // optional float lastPosY = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposy_)));
          set_has_lastposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_lastPosZ;
        break;
      }

      // optional float lastPosZ = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposz_)));
          set_has_lastposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_lastReviveTime;
        break;
      }

      // optional uint64 lastReviveTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastReviveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastrevivetime_)));
          set_has_lastrevivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_curState;
        break;
      }

      // optional uint32 curState = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_clx;
        break;
      }

      // optional float clx = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clx_)));
          set_has_clx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_cly;
        break;
      }

      // optional float cly = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cly_)));
          set_has_cly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_clz;
        break;
      }

      // optional float clz = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clz_)));
          set_has_clz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_occupation;
        break;
      }

      // optional uint64 occupation = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_aptitude;
        break;
      }

      // optional uint64 aptitude = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aptitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aptitude_)));
          set_has_aptitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_facade;
        break;
      }

      // optional .proto_ff.CharFacadeProto facade = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_arenacoin;
        break;
      }

      // optional int64 arenacoin = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenacoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &arenacoin_)));
          set_has_arenacoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_starEssence;
        break;
      }

      // optional int64 starEssence = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starEssence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &staressence_)));
          set_has_staressence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_starExp;
        break;
      }

      // optional int64 starExp = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starexp_)));
          set_has_starexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_starFragment;
        break;
      }

      // optional int64 starFragment = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starFragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starfragment_)));
          set_has_starfragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_hangUpTime;
        break;
      }

      // optional int64 hangUpTime = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangUpTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hanguptime_)));
          set_has_hanguptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_active_num;
        break;
      }

      // optional uint32 active_num = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_num_)));
          set_has_active_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_vipLevel;
        break;
      }

      // optional int64 vipLevel = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_godhoodExp;
        break;
      }

      // optional int64 godhoodExp = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godhoodExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &godhoodexp_)));
          set_has_godhoodexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_smallSpirit;
        break;
      }

      // optional int64 smallSpirit = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallSpirit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallspirit_)));
          set_has_smallspirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_bigSpirit;
        break;
      }

      // optional int64 bigSpirit = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigSpirit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bigspirit_)));
          set_has_bigspirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_trim;
        break;
      }

      // optional .proto_ff.CharMultTrimProto trim = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_finish_flag;
        break;
      }

      // optional int32 finish_flag = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_flag_)));
          set_has_finish_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_guide;
        break;
      }

      // optional string guide = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guide().data(), this->guide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_force;
        break;
      }

      // optional .proto_ff.ForceDupProto force = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_force:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_useTitle;
        break;
      }

      // optional int64 useTitle = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usetitle_)));
          set_has_usetitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_subpack_type;
        break;
      }

      // optional int32 subpack_type = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subpack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subpack_type_)));
          set_has_subpack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_subpack_fetch;
        break;
      }

      // optional int32 subpack_fetch = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subpack_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subpack_fetch_)));
          set_has_subpack_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_rechargeDiscountDate;
        break;
      }

      // optional int32 rechargeDiscountDate = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeDiscountDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargediscountdate_)));
          set_has_rechargediscountdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_friendNum;
        break;
      }

      // optional int32 friendNum = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendnum_)));
          set_has_friendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_platid;
        break;
      }

      // optional string platid = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platid().data(), this->platid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_solo_score;
        break;
      }

      // optional int32 solo_score = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solo_score_)));
          set_has_solo_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_solo_prv_score;
        break;
      }

      // optional int32 solo_prv_score = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo_prv_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solo_prv_score_)));
          set_has_solo_prv_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_dragons_num;
        break;
      }

      // optional int32 dragons_num = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragons_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dragons_num_)));
          set_has_dragons_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_total_login_day;
        break;
      }

      // optional uint32 total_login_day = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_login_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_login_day_)));
          set_has_total_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_login_day_time;
        break;
      }

      // optional uint64 login_day_time = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_day_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_day_time_)));
          set_has_login_day_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_login_gift;
        break;
      }

      // optional int32 login_gift = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_gift_)));
          set_has_login_gift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_vipCardDiamond;
        break;
      }

      // optional int64 vipCardDiamond = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipCardDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vipcarddiamond_)));
          set_has_vipcarddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_holydia;
        break;
      }

      // optional uint64 holydia = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holydia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &holydia_)));
          set_has_holydia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_relive_num;
        break;
      }

      // optional int32 relive_num = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relive_num_)));
          set_has_relive_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_last_relive_time;
        break;
      }

      // optional int64 last_relive_time = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_relive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_relive_time_)));
          set_has_last_relive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_dead_static_map_id;
        break;
      }

      // optional int64 dead_static_map_id = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_static_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dead_static_map_id_)));
          set_has_dead_static_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_dead_static_num;
        break;
      }

      // optional int32 dead_static_num = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_static_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_static_num_)));
          set_has_dead_static_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_dead_static_cd;
        break;
      }

      // optional int64 dead_static_cd = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_static_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dead_static_cd_)));
          set_has_dead_static_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_fushi_time;
        break;
      }

      // optional int32 fushi_time = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fushi_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fushi_time_)));
          set_has_fushi_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_starStone;
        break;
      }

      // optional int64 starStone = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starStone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starstone_)));
          set_has_starstone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_voucher;
        break;
      }

      // optional int64 voucher = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voucher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &voucher_)));
          set_has_voucher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_waiguan;
        break;
      }

      // optional int64 waiguan = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waiguan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &waiguan_)));
          set_has_waiguan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_gmpoint;
        break;
      }

      // optional int64 gmpoint = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmpoint_)));
          set_has_gmpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_gmpoint_limit;
        break;
      }

      // optional int64 gmpoint_limit = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmpoint_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmpoint_limit_)));
          set_has_gmpoint_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 createTime = 1;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->createtime(), output);
  }

  // optional uint64 lastSaveTime = 2;
  if (has_lastsavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastsavetime(), output);
  }

  // optional uint64 onlineTime = 3;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->onlinetime(), output);
  }

  // optional uint64 loginTime = 4;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logintime(), output);
  }

  // optional uint64 logoutTime = 5;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logouttime(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional uint32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sex(), output);
  }

  // optional uint32 prof = 8;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->prof(), output);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // optional int64 exp = 10;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->exp(), output);
  }

  // optional int64 hp = 11;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->hp(), output);
  }

  // optional int64 fight = 12;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->fight(), output);
  }

  // optional uint64 gold = 13;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->gold(), output);
  }

  // optional uint64 diamond = 14;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->diamond(), output);
  }

  // optional uint64 binddiamond = 15;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->binddiamond(), output);
  }

  // optional uint64 enter_scene_id = 16;
  if (has_enter_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->enter_scene_id(), output);
  }

  // optional uint64 enter_map_id = 17;
  if (has_enter_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->enter_map_id(), output);
  }

  // optional float enterPosX = 18;
  if (has_enterposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->enterposx(), output);
  }

  // optional float enterPosY = 19;
  if (has_enterposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->enterposy(), output);
  }

  // optional float enterPosZ = 20;
  if (has_enterposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->enterposz(), output);
  }

  // optional uint64 lastSceneId = 21;
  if (has_lastsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->lastsceneid(), output);
  }

  // optional uint64 lastMapId = 22;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->lastmapid(), output);
  }

  // optional float lastPosX = 23;
  if (has_lastposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->lastposx(), output);
  }

  // optional float lastPosY = 24;
  if (has_lastposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->lastposy(), output);
  }

  // optional float lastPosZ = 25;
  if (has_lastposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->lastposz(), output);
  }

  // optional uint64 lastReviveTime = 26;
  if (has_lastrevivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->lastrevivetime(), output);
  }

  // optional uint32 curState = 27;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->curstate(), output);
  }

  // optional float clx = 28;
  if (has_clx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->clx(), output);
  }

  // optional float cly = 29;
  if (has_cly()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->cly(), output);
  }

  // optional float clz = 30;
  if (has_clz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->clz(), output);
  }

  // optional uint64 occupation = 31;
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->occupation(), output);
  }

  // optional uint64 aptitude = 32;
  if (has_aptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->aptitude(), output);
  }

  // optional .proto_ff.CharFacadeProto facade = 33;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->facade(), output);
  }

  // optional int64 arenacoin = 34;
  if (has_arenacoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->arenacoin(), output);
  }

  // optional int64 starEssence = 35;
  if (has_staressence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->staressence(), output);
  }

  // optional int64 starExp = 36;
  if (has_starexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->starexp(), output);
  }

  // optional int64 starFragment = 37;
  if (has_starfragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->starfragment(), output);
  }

  // optional int64 hangUpTime = 38;
  if (has_hanguptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->hanguptime(), output);
  }

  // optional uint32 active_num = 39;
  if (has_active_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->active_num(), output);
  }

  // optional int64 vipLevel = 40;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->viplevel(), output);
  }

  // optional int64 godhoodExp = 41;
  if (has_godhoodexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->godhoodexp(), output);
  }

  // optional int64 smallSpirit = 42;
  if (has_smallspirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->smallspirit(), output);
  }

  // optional int64 bigSpirit = 43;
  if (has_bigspirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->bigspirit(), output);
  }

  // optional .proto_ff.CharMultTrimProto trim = 44;
  if (has_trim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->trim(), output);
  }

  // optional int32 finish_flag = 45;
  if (has_finish_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->finish_flag(), output);
  }

  // optional string guide = 46;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guide().data(), this->guide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->guide(), output);
  }

  // optional .proto_ff.ForceDupProto force = 47;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->force(), output);
  }

  // optional int64 useTitle = 48;
  if (has_usetitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->usetitle(), output);
  }

  // optional int32 subpack_type = 49;
  if (has_subpack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->subpack_type(), output);
  }

  // optional int32 subpack_fetch = 50;
  if (has_subpack_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->subpack_fetch(), output);
  }

  // optional int32 rechargeDiscountDate = 51;
  if (has_rechargediscountdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->rechargediscountdate(), output);
  }

  // optional int32 friendNum = 52;
  if (has_friendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->friendnum(), output);
  }

  // optional string platid = 53;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      53, this->platid(), output);
  }

  // optional int32 solo_score = 54;
  if (has_solo_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->solo_score(), output);
  }

  // optional int32 solo_prv_score = 55;
  if (has_solo_prv_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->solo_prv_score(), output);
  }

  // optional int32 dragons_num = 56;
  if (has_dragons_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->dragons_num(), output);
  }

  // optional uint32 total_login_day = 57;
  if (has_total_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->total_login_day(), output);
  }

  // optional uint64 login_day_time = 58;
  if (has_login_day_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(58, this->login_day_time(), output);
  }

  // optional int32 login_gift = 59;
  if (has_login_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->login_gift(), output);
  }

  // optional int64 vipCardDiamond = 60;
  if (has_vipcarddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(60, this->vipcarddiamond(), output);
  }

  // optional uint64 holydia = 61;
  if (has_holydia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(61, this->holydia(), output);
  }

  // optional int32 relive_num = 62;
  if (has_relive_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->relive_num(), output);
  }

  // optional int64 last_relive_time = 63;
  if (has_last_relive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(63, this->last_relive_time(), output);
  }

  // optional int64 dead_static_map_id = 64;
  if (has_dead_static_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(64, this->dead_static_map_id(), output);
  }

  // optional int32 dead_static_num = 65;
  if (has_dead_static_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->dead_static_num(), output);
  }

  // optional int64 dead_static_cd = 66;
  if (has_dead_static_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(66, this->dead_static_cd(), output);
  }

  // optional int32 fushi_time = 67;
  if (has_fushi_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->fushi_time(), output);
  }

  // optional int64 starStone = 68;
  if (has_starstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(68, this->starstone(), output);
  }

  // optional int64 voucher = 69;
  if (has_voucher()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(69, this->voucher(), output);
  }

  // optional int64 waiguan = 70;
  if (has_waiguan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(70, this->waiguan(), output);
  }

  // optional int64 gmpoint = 71;
  if (has_gmpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(71, this->gmpoint(), output);
  }

  // optional int64 gmpoint_limit = 72;
  if (has_gmpoint_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(72, this->gmpoint_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 createTime = 1;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->createtime(), target);
  }

  // optional uint64 lastSaveTime = 2;
  if (has_lastsavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastsavetime(), target);
  }

  // optional uint64 onlineTime = 3;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->onlinetime(), target);
  }

  // optional uint64 loginTime = 4;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logintime(), target);
  }

  // optional uint64 logoutTime = 5;
  if (has_logouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logouttime(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sex(), target);
  }

  // optional uint32 prof = 8;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->prof(), target);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // optional int64 exp = 10;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->exp(), target);
  }

  // optional int64 hp = 11;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->hp(), target);
  }

  // optional int64 fight = 12;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->fight(), target);
  }

  // optional uint64 gold = 13;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->gold(), target);
  }

  // optional uint64 diamond = 14;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->diamond(), target);
  }

  // optional uint64 binddiamond = 15;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->binddiamond(), target);
  }

  // optional uint64 enter_scene_id = 16;
  if (has_enter_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->enter_scene_id(), target);
  }

  // optional uint64 enter_map_id = 17;
  if (has_enter_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->enter_map_id(), target);
  }

  // optional float enterPosX = 18;
  if (has_enterposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->enterposx(), target);
  }

  // optional float enterPosY = 19;
  if (has_enterposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->enterposy(), target);
  }

  // optional float enterPosZ = 20;
  if (has_enterposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->enterposz(), target);
  }

  // optional uint64 lastSceneId = 21;
  if (has_lastsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->lastsceneid(), target);
  }

  // optional uint64 lastMapId = 22;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->lastmapid(), target);
  }

  // optional float lastPosX = 23;
  if (has_lastposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->lastposx(), target);
  }

  // optional float lastPosY = 24;
  if (has_lastposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->lastposy(), target);
  }

  // optional float lastPosZ = 25;
  if (has_lastposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->lastposz(), target);
  }

  // optional uint64 lastReviveTime = 26;
  if (has_lastrevivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->lastrevivetime(), target);
  }

  // optional uint32 curState = 27;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->curstate(), target);
  }

  // optional float clx = 28;
  if (has_clx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->clx(), target);
  }

  // optional float cly = 29;
  if (has_cly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->cly(), target);
  }

  // optional float clz = 30;
  if (has_clz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->clz(), target);
  }

  // optional uint64 occupation = 31;
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->occupation(), target);
  }

  // optional uint64 aptitude = 32;
  if (has_aptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->aptitude(), target);
  }

  // optional .proto_ff.CharFacadeProto facade = 33;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->facade(), target);
  }

  // optional int64 arenacoin = 34;
  if (has_arenacoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->arenacoin(), target);
  }

  // optional int64 starEssence = 35;
  if (has_staressence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->staressence(), target);
  }

  // optional int64 starExp = 36;
  if (has_starexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->starexp(), target);
  }

  // optional int64 starFragment = 37;
  if (has_starfragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->starfragment(), target);
  }

  // optional int64 hangUpTime = 38;
  if (has_hanguptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->hanguptime(), target);
  }

  // optional uint32 active_num = 39;
  if (has_active_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->active_num(), target);
  }

  // optional int64 vipLevel = 40;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->viplevel(), target);
  }

  // optional int64 godhoodExp = 41;
  if (has_godhoodexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->godhoodexp(), target);
  }

  // optional int64 smallSpirit = 42;
  if (has_smallspirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->smallspirit(), target);
  }

  // optional int64 bigSpirit = 43;
  if (has_bigspirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->bigspirit(), target);
  }

  // optional .proto_ff.CharMultTrimProto trim = 44;
  if (has_trim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->trim(), target);
  }

  // optional int32 finish_flag = 45;
  if (has_finish_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->finish_flag(), target);
  }

  // optional string guide = 46;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guide().data(), this->guide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->guide(), target);
  }

  // optional .proto_ff.ForceDupProto force = 47;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->force(), target);
  }

  // optional int64 useTitle = 48;
  if (has_usetitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->usetitle(), target);
  }

  // optional int32 subpack_type = 49;
  if (has_subpack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->subpack_type(), target);
  }

  // optional int32 subpack_fetch = 50;
  if (has_subpack_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->subpack_fetch(), target);
  }

  // optional int32 rechargeDiscountDate = 51;
  if (has_rechargediscountdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->rechargediscountdate(), target);
  }

  // optional int32 friendNum = 52;
  if (has_friendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->friendnum(), target);
  }

  // optional string platid = 53;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->platid(), target);
  }

  // optional int32 solo_score = 54;
  if (has_solo_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->solo_score(), target);
  }

  // optional int32 solo_prv_score = 55;
  if (has_solo_prv_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->solo_prv_score(), target);
  }

  // optional int32 dragons_num = 56;
  if (has_dragons_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->dragons_num(), target);
  }

  // optional uint32 total_login_day = 57;
  if (has_total_login_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->total_login_day(), target);
  }

  // optional uint64 login_day_time = 58;
  if (has_login_day_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(58, this->login_day_time(), target);
  }

  // optional int32 login_gift = 59;
  if (has_login_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->login_gift(), target);
  }

  // optional int64 vipCardDiamond = 60;
  if (has_vipcarddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(60, this->vipcarddiamond(), target);
  }

  // optional uint64 holydia = 61;
  if (has_holydia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(61, this->holydia(), target);
  }

  // optional int32 relive_num = 62;
  if (has_relive_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->relive_num(), target);
  }

  // optional int64 last_relive_time = 63;
  if (has_last_relive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(63, this->last_relive_time(), target);
  }

  // optional int64 dead_static_map_id = 64;
  if (has_dead_static_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(64, this->dead_static_map_id(), target);
  }

  // optional int32 dead_static_num = 65;
  if (has_dead_static_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->dead_static_num(), target);
  }

  // optional int64 dead_static_cd = 66;
  if (has_dead_static_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(66, this->dead_static_cd(), target);
  }

  // optional int32 fushi_time = 67;
  if (has_fushi_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->fushi_time(), target);
  }

  // optional int64 starStone = 68;
  if (has_starstone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(68, this->starstone(), target);
  }

  // optional int64 voucher = 69;
  if (has_voucher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(69, this->voucher(), target);
  }

  // optional int64 waiguan = 70;
  if (has_waiguan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(70, this->waiguan(), target);
  }

  // optional int64 gmpoint = 71;
  if (has_gmpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(71, this->gmpoint(), target);
  }

  // optional int64 gmpoint_limit = 72;
  if (has_gmpoint_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(72, this->gmpoint_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 createTime = 1;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 lastSaveTime = 2;
    if (has_lastsavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsavetime());
    }

    // optional uint64 onlineTime = 3;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->onlinetime());
    }

    // optional uint64 loginTime = 4;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintime());
    }

    // optional uint64 logoutTime = 5;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logouttime());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 prof = 8;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int64 exp = 10;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int64 hp = 11;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 fight = 12;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight());
    }

    // optional uint64 gold = 13;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 diamond = 14;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->diamond());
    }

    // optional uint64 binddiamond = 15;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->binddiamond());
    }

    // optional uint64 enter_scene_id = 16;
    if (has_enter_scene_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_scene_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 enter_map_id = 17;
    if (has_enter_map_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_map_id());
    }

    // optional float enterPosX = 18;
    if (has_enterposx()) {
      total_size += 2 + 4;
    }

    // optional float enterPosY = 19;
    if (has_enterposy()) {
      total_size += 2 + 4;
    }

    // optional float enterPosZ = 20;
    if (has_enterposz()) {
      total_size += 2 + 4;
    }

    // optional uint64 lastSceneId = 21;
    if (has_lastsceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsceneid());
    }

    // optional uint64 lastMapId = 22;
    if (has_lastmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmapid());
    }

    // optional float lastPosX = 23;
    if (has_lastposx()) {
      total_size += 2 + 4;
    }

    // optional float lastPosY = 24;
    if (has_lastposy()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float lastPosZ = 25;
    if (has_lastposz()) {
      total_size += 2 + 4;
    }

    // optional uint64 lastReviveTime = 26;
    if (has_lastrevivetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastrevivetime());
    }

    // optional uint32 curState = 27;
    if (has_curstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // optional float clx = 28;
    if (has_clx()) {
      total_size += 2 + 4;
    }

    // optional float cly = 29;
    if (has_cly()) {
      total_size += 2 + 4;
    }

    // optional float clz = 30;
    if (has_clz()) {
      total_size += 2 + 4;
    }

    // optional uint64 occupation = 31;
    if (has_occupation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->occupation());
    }

    // optional uint64 aptitude = 32;
    if (has_aptitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aptitude());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .proto_ff.CharFacadeProto facade = 33;
    if (has_facade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional int64 arenacoin = 34;
    if (has_arenacoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->arenacoin());
    }

    // optional int64 starEssence = 35;
    if (has_staressence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->staressence());
    }

    // optional int64 starExp = 36;
    if (has_starexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starexp());
    }

    // optional int64 starFragment = 37;
    if (has_starfragment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starfragment());
    }

    // optional int64 hangUpTime = 38;
    if (has_hanguptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hanguptime());
    }

    // optional uint32 active_num = 39;
    if (has_active_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_num());
    }

    // optional int64 vipLevel = 40;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->viplevel());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int64 godhoodExp = 41;
    if (has_godhoodexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->godhoodexp());
    }

    // optional int64 smallSpirit = 42;
    if (has_smallspirit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->smallspirit());
    }

    // optional int64 bigSpirit = 43;
    if (has_bigspirit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bigspirit());
    }

    // optional .proto_ff.CharMultTrimProto trim = 44;
    if (has_trim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trim());
    }

    // optional int32 finish_flag = 45;
    if (has_finish_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_flag());
    }

    // optional string guide = 46;
    if (has_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guide());
    }

    // optional .proto_ff.ForceDupProto force = 47;
    if (has_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->force());
    }

    // optional int64 useTitle = 48;
    if (has_usetitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usetitle());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 subpack_type = 49;
    if (has_subpack_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subpack_type());
    }

    // optional int32 subpack_fetch = 50;
    if (has_subpack_fetch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subpack_fetch());
    }

    // optional int32 rechargeDiscountDate = 51;
    if (has_rechargediscountdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargediscountdate());
    }

    // optional int32 friendNum = 52;
    if (has_friendnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendnum());
    }

    // optional string platid = 53;
    if (has_platid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }

    // optional int32 solo_score = 54;
    if (has_solo_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solo_score());
    }

    // optional int32 solo_prv_score = 55;
    if (has_solo_prv_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solo_prv_score());
    }

    // optional int32 dragons_num = 56;
    if (has_dragons_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dragons_num());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 total_login_day = 57;
    if (has_total_login_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_login_day());
    }

    // optional uint64 login_day_time = 58;
    if (has_login_day_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_day_time());
    }

    // optional int32 login_gift = 59;
    if (has_login_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_gift());
    }

    // optional int64 vipCardDiamond = 60;
    if (has_vipcarddiamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vipcarddiamond());
    }

    // optional uint64 holydia = 61;
    if (has_holydia()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->holydia());
    }

    // optional int32 relive_num = 62;
    if (has_relive_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relive_num());
    }

    // optional int64 last_relive_time = 63;
    if (has_last_relive_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_relive_time());
    }

    // optional int64 dead_static_map_id = 64;
    if (has_dead_static_map_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dead_static_map_id());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 dead_static_num = 65;
    if (has_dead_static_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_static_num());
    }

    // optional int64 dead_static_cd = 66;
    if (has_dead_static_cd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dead_static_cd());
    }

    // optional int32 fushi_time = 67;
    if (has_fushi_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fushi_time());
    }

    // optional int64 starStone = 68;
    if (has_starstone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starstone());
    }

    // optional int64 voucher = 69;
    if (has_voucher()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->voucher());
    }

    // optional int64 waiguan = 70;
    if (has_waiguan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->waiguan());
    }

    // optional int64 gmpoint = 71;
    if (has_gmpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmpoint());
    }

    // optional int64 gmpoint_limit = 72;
    if (has_gmpoint_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmpoint_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBBaseInfo::MergeFrom(const CharacterDBBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_lastsavetime()) {
      set_lastsavetime(from.lastsavetime());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_enter_scene_id()) {
      set_enter_scene_id(from.enter_scene_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_enter_map_id()) {
      set_enter_map_id(from.enter_map_id());
    }
    if (from.has_enterposx()) {
      set_enterposx(from.enterposx());
    }
    if (from.has_enterposy()) {
      set_enterposy(from.enterposy());
    }
    if (from.has_enterposz()) {
      set_enterposz(from.enterposz());
    }
    if (from.has_lastsceneid()) {
      set_lastsceneid(from.lastsceneid());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
    if (from.has_lastposx()) {
      set_lastposx(from.lastposx());
    }
    if (from.has_lastposy()) {
      set_lastposy(from.lastposy());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lastposz()) {
      set_lastposz(from.lastposz());
    }
    if (from.has_lastrevivetime()) {
      set_lastrevivetime(from.lastrevivetime());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_clx()) {
      set_clx(from.clx());
    }
    if (from.has_cly()) {
      set_cly(from.cly());
    }
    if (from.has_clz()) {
      set_clz(from.clz());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_aptitude()) {
      set_aptitude(from.aptitude());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::CharFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_arenacoin()) {
      set_arenacoin(from.arenacoin());
    }
    if (from.has_staressence()) {
      set_staressence(from.staressence());
    }
    if (from.has_starexp()) {
      set_starexp(from.starexp());
    }
    if (from.has_starfragment()) {
      set_starfragment(from.starfragment());
    }
    if (from.has_hanguptime()) {
      set_hanguptime(from.hanguptime());
    }
    if (from.has_active_num()) {
      set_active_num(from.active_num());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_godhoodexp()) {
      set_godhoodexp(from.godhoodexp());
    }
    if (from.has_smallspirit()) {
      set_smallspirit(from.smallspirit());
    }
    if (from.has_bigspirit()) {
      set_bigspirit(from.bigspirit());
    }
    if (from.has_trim()) {
      mutable_trim()->::proto_ff::CharMultTrimProto::MergeFrom(from.trim());
    }
    if (from.has_finish_flag()) {
      set_finish_flag(from.finish_flag());
    }
    if (from.has_guide()) {
      set_guide(from.guide());
    }
    if (from.has_force()) {
      mutable_force()->::proto_ff::ForceDupProto::MergeFrom(from.force());
    }
    if (from.has_usetitle()) {
      set_usetitle(from.usetitle());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_subpack_type()) {
      set_subpack_type(from.subpack_type());
    }
    if (from.has_subpack_fetch()) {
      set_subpack_fetch(from.subpack_fetch());
    }
    if (from.has_rechargediscountdate()) {
      set_rechargediscountdate(from.rechargediscountdate());
    }
    if (from.has_friendnum()) {
      set_friendnum(from.friendnum());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_solo_score()) {
      set_solo_score(from.solo_score());
    }
    if (from.has_solo_prv_score()) {
      set_solo_prv_score(from.solo_prv_score());
    }
    if (from.has_dragons_num()) {
      set_dragons_num(from.dragons_num());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_total_login_day()) {
      set_total_login_day(from.total_login_day());
    }
    if (from.has_login_day_time()) {
      set_login_day_time(from.login_day_time());
    }
    if (from.has_login_gift()) {
      set_login_gift(from.login_gift());
    }
    if (from.has_vipcarddiamond()) {
      set_vipcarddiamond(from.vipcarddiamond());
    }
    if (from.has_holydia()) {
      set_holydia(from.holydia());
    }
    if (from.has_relive_num()) {
      set_relive_num(from.relive_num());
    }
    if (from.has_last_relive_time()) {
      set_last_relive_time(from.last_relive_time());
    }
    if (from.has_dead_static_map_id()) {
      set_dead_static_map_id(from.dead_static_map_id());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_dead_static_num()) {
      set_dead_static_num(from.dead_static_num());
    }
    if (from.has_dead_static_cd()) {
      set_dead_static_cd(from.dead_static_cd());
    }
    if (from.has_fushi_time()) {
      set_fushi_time(from.fushi_time());
    }
    if (from.has_starstone()) {
      set_starstone(from.starstone());
    }
    if (from.has_voucher()) {
      set_voucher(from.voucher());
    }
    if (from.has_waiguan()) {
      set_waiguan(from.waiguan());
    }
    if (from.has_gmpoint()) {
      set_gmpoint(from.gmpoint());
    }
    if (from.has_gmpoint_limit()) {
      set_gmpoint_limit(from.gmpoint_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBBaseInfo::CopyFrom(const CharacterDBBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBBaseInfo::IsInitialized() const {

  return true;
}

void CharacterDBBaseInfo::Swap(CharacterDBBaseInfo* other) {
  if (other != this) {
    std::swap(createtime_, other->createtime_);
    std::swap(lastsavetime_, other->lastsavetime_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(logintime_, other->logintime_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(fight_, other->fight_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(enter_scene_id_, other->enter_scene_id_);
    std::swap(enter_map_id_, other->enter_map_id_);
    std::swap(enterposx_, other->enterposx_);
    std::swap(enterposy_, other->enterposy_);
    std::swap(enterposz_, other->enterposz_);
    std::swap(lastsceneid_, other->lastsceneid_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastposx_, other->lastposx_);
    std::swap(lastposy_, other->lastposy_);
    std::swap(lastposz_, other->lastposz_);
    std::swap(lastrevivetime_, other->lastrevivetime_);
    std::swap(curstate_, other->curstate_);
    std::swap(clx_, other->clx_);
    std::swap(cly_, other->cly_);
    std::swap(clz_, other->clz_);
    std::swap(occupation_, other->occupation_);
    std::swap(aptitude_, other->aptitude_);
    std::swap(facade_, other->facade_);
    std::swap(arenacoin_, other->arenacoin_);
    std::swap(staressence_, other->staressence_);
    std::swap(starexp_, other->starexp_);
    std::swap(starfragment_, other->starfragment_);
    std::swap(hanguptime_, other->hanguptime_);
    std::swap(active_num_, other->active_num_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(godhoodexp_, other->godhoodexp_);
    std::swap(smallspirit_, other->smallspirit_);
    std::swap(bigspirit_, other->bigspirit_);
    std::swap(trim_, other->trim_);
    std::swap(finish_flag_, other->finish_flag_);
    std::swap(guide_, other->guide_);
    std::swap(force_, other->force_);
    std::swap(usetitle_, other->usetitle_);
    std::swap(subpack_type_, other->subpack_type_);
    std::swap(subpack_fetch_, other->subpack_fetch_);
    std::swap(rechargediscountdate_, other->rechargediscountdate_);
    std::swap(friendnum_, other->friendnum_);
    std::swap(platid_, other->platid_);
    std::swap(solo_score_, other->solo_score_);
    std::swap(solo_prv_score_, other->solo_prv_score_);
    std::swap(dragons_num_, other->dragons_num_);
    std::swap(total_login_day_, other->total_login_day_);
    std::swap(login_day_time_, other->login_day_time_);
    std::swap(login_gift_, other->login_gift_);
    std::swap(vipcarddiamond_, other->vipcarddiamond_);
    std::swap(holydia_, other->holydia_);
    std::swap(relive_num_, other->relive_num_);
    std::swap(last_relive_time_, other->last_relive_time_);
    std::swap(dead_static_map_id_, other->dead_static_map_id_);
    std::swap(dead_static_num_, other->dead_static_num_);
    std::swap(dead_static_cd_, other->dead_static_cd_);
    std::swap(fushi_time_, other->fushi_time_);
    std::swap(starstone_, other->starstone_);
    std::swap(voucher_, other->voucher_);
    std::swap(waiguan_, other->waiguan_);
    std::swap(gmpoint_, other->gmpoint_);
    std::swap(gmpoint_limit_, other->gmpoint_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBBaseInfo_descriptor_;
  metadata.reflection = CharacterDBBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr::kAttrNumFieldNumber;
const int Attr::kAttrvalueFieldNumber;
#endif  // !_MSC_VER

Attr::Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attr::InitAsDefaultInstance() {
}

Attr::Attr(const Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attr::SharedCtor() {
  _cached_size_ = 0;
  attrnum_ = 0u;
  attrvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr::~Attr() {
  SharedDtor();
}

void Attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr_descriptor_;
}

const Attr& Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

Attr* Attr::default_instance_ = NULL;

Attr* Attr::New() const {
  return new Attr;
}

void Attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrnum_ = 0u;
    attrvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttrNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrnum_)));
          set_has_attrnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Attrvalue;
        break;
      }

      // optional uint32 Attrvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Attrvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 AttrNum = 1;
  if (has_attrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrnum(), output);
  }

  // optional uint32 Attrvalue = 2;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AttrNum = 1;
  if (has_attrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrnum(), target);
  }

  // optional uint32 Attrvalue = 2;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attrvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttrNum = 1;
    if (has_attrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrnum());
    }

    // optional uint32 Attrvalue = 2;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr::MergeFrom(const Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrnum()) {
      set_attrnum(from.attrnum());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr::CopyFrom(const Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr::IsInitialized() const {

  return true;
}

void Attr::Swap(Attr* other) {
  if (other != this) {
    std::swap(attrnum_, other->attrnum_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr_descriptor_;
  metadata.reflection = Attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr64::kAttrNumFieldNumber;
const int Attr64::kAttrvalueFieldNumber;
#endif  // !_MSC_VER

Attr64::Attr64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attr64::InitAsDefaultInstance() {
}

Attr64::Attr64(const Attr64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attr64::SharedCtor() {
  _cached_size_ = 0;
  attrnum_ = 0u;
  attrvalue_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr64::~Attr64() {
  SharedDtor();
}

void Attr64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr64_descriptor_;
}

const Attr64& Attr64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

Attr64* Attr64::default_instance_ = NULL;

Attr64* Attr64::New() const {
  return new Attr64;
}

void Attr64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrnum_ = 0u;
    attrvalue_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttrNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrnum_)));
          set_has_attrnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Attrvalue;
        break;
      }

      // optional int64 Attrvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Attrvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attr64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 AttrNum = 1;
  if (has_attrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrnum(), output);
  }

  // optional int64 Attrvalue = 2;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->attrvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attr64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AttrNum = 1;
  if (has_attrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrnum(), target);
  }

  // optional int64 Attrvalue = 2;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->attrvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attr64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttrNum = 1;
    if (has_attrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrnum());
    }

    // optional int64 Attrvalue = 2;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attrvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr64::MergeFrom(const Attr64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrnum()) {
      set_attrnum(from.attrnum());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr64::CopyFrom(const Attr64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr64::IsInitialized() const {

  return true;
}

void Attr64::Swap(Attr64* other) {
  if (other != this) {
    std::swap(attrnum_, other->attrnum_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr64_descriptor_;
  metadata.reflection = Attr64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrEx64::kAttrNumFieldNumber;
const int AttrEx64::kAttrvalueFieldNumber;
const int AttrEx64::kAttrIndexFieldNumber;
#endif  // !_MSC_VER

AttrEx64::AttrEx64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrEx64::InitAsDefaultInstance() {
}

AttrEx64::AttrEx64(const AttrEx64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrEx64::SharedCtor() {
  _cached_size_ = 0;
  attrnum_ = 0u;
  attrvalue_ = GOOGLE_ULONGLONG(0);
  attrindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrEx64::~AttrEx64() {
  SharedDtor();
}

void AttrEx64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrEx64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrEx64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrEx64_descriptor_;
}

const AttrEx64& AttrEx64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

AttrEx64* AttrEx64::default_instance_ = NULL;

AttrEx64* AttrEx64::New() const {
  return new AttrEx64;
}

void AttrEx64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrnum_ = 0u;
    attrvalue_ = GOOGLE_ULONGLONG(0);
    attrindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrEx64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttrNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrnum_)));
          set_has_attrnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Attrvalue;
        break;
      }

      // optional uint64 Attrvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Attrvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AttrIndex;
        break;
      }

      // optional uint32 AttrIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttrIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrindex_)));
          set_has_attrindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrEx64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 AttrNum = 1;
  if (has_attrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrnum(), output);
  }

  // optional uint64 Attrvalue = 2;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->attrvalue(), output);
  }

  // optional uint32 AttrIndex = 3;
  if (has_attrindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attrindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrEx64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AttrNum = 1;
  if (has_attrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrnum(), target);
  }

  // optional uint64 Attrvalue = 2;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->attrvalue(), target);
  }

  // optional uint32 AttrIndex = 3;
  if (has_attrindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attrindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrEx64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttrNum = 1;
    if (has_attrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrnum());
    }

    // optional uint64 Attrvalue = 2;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attrvalue());
    }

    // optional uint32 AttrIndex = 3;
    if (has_attrindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrEx64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrEx64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrEx64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrEx64::MergeFrom(const AttrEx64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrnum()) {
      set_attrnum(from.attrnum());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
    if (from.has_attrindex()) {
      set_attrindex(from.attrindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrEx64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrEx64::CopyFrom(const AttrEx64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrEx64::IsInitialized() const {

  return true;
}

void AttrEx64::Swap(AttrEx64* other) {
  if (other != this) {
    std::swap(attrnum_, other->attrnum_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(attrindex_, other->attrindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrEx64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrEx64_descriptor_;
  metadata.reflection = AttrEx64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldItemAttrInfo::kBaseAttrFieldNumber;
const int FieldItemAttrInfo::kStarAttrFieldNumber;
const int FieldItemAttrInfo::kBlueStarAttrFieldNumber;
const int FieldItemAttrInfo::kRefineLevelFieldNumber;
#endif  // !_MSC_VER

FieldItemAttrInfo::FieldItemAttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldItemAttrInfo::InitAsDefaultInstance() {
}

FieldItemAttrInfo::FieldItemAttrInfo(const FieldItemAttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldItemAttrInfo::SharedCtor() {
  _cached_size_ = 0;
  refine_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldItemAttrInfo::~FieldItemAttrInfo() {
  SharedDtor();
}

void FieldItemAttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldItemAttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldItemAttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldItemAttrInfo_descriptor_;
}

const FieldItemAttrInfo& FieldItemAttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FieldItemAttrInfo* FieldItemAttrInfo::default_instance_ = NULL;

FieldItemAttrInfo* FieldItemAttrInfo::New() const {
  return new FieldItemAttrInfo;
}

void FieldItemAttrInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    refine_level_ = 0;
  }
  base_attr_.Clear();
  star_attr_.Clear();
  blue_star_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldItemAttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Attr base_attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_base_attr;
        if (input->ExpectTag(18)) goto parse_star_attr;
        break;
      }

      // repeated .proto_ff.Attr star_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_star_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_star_attr;
        if (input->ExpectTag(26)) goto parse_blue_star_attr;
        break;
      }

      // repeated .proto_ff.Attr blue_star_attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_star_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue_star_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blue_star_attr;
        if (input->ExpectTag(32)) goto parse_refine_level;
        break;
      }

      // optional int32 refine_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldItemAttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Attr base_attr = 1;
  for (int i = 0; i < this->base_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_attr(i), output);
  }

  // repeated .proto_ff.Attr star_attr = 2;
  for (int i = 0; i < this->star_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->star_attr(i), output);
  }

  // repeated .proto_ff.Attr blue_star_attr = 3;
  for (int i = 0; i < this->blue_star_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blue_star_attr(i), output);
  }

  // optional int32 refine_level = 4;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refine_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldItemAttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Attr base_attr = 1;
  for (int i = 0; i < this->base_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_attr(i), target);
  }

  // repeated .proto_ff.Attr star_attr = 2;
  for (int i = 0; i < this->star_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->star_attr(i), target);
  }

  // repeated .proto_ff.Attr blue_star_attr = 3;
  for (int i = 0; i < this->blue_star_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->blue_star_attr(i), target);
  }

  // optional int32 refine_level = 4;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refine_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldItemAttrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 refine_level = 4;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_level());
    }

  }
  // repeated .proto_ff.Attr base_attr = 1;
  total_size += 1 * this->base_attr_size();
  for (int i = 0; i < this->base_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_attr(i));
  }

  // repeated .proto_ff.Attr star_attr = 2;
  total_size += 1 * this->star_attr_size();
  for (int i = 0; i < this->star_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star_attr(i));
  }

  // repeated .proto_ff.Attr blue_star_attr = 3;
  total_size += 1 * this->blue_star_attr_size();
  for (int i = 0; i < this->blue_star_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue_star_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldItemAttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldItemAttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldItemAttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldItemAttrInfo::MergeFrom(const FieldItemAttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_attr_.MergeFrom(from.base_attr_);
  star_attr_.MergeFrom(from.star_attr_);
  blue_star_attr_.MergeFrom(from.blue_star_attr_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldItemAttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldItemAttrInfo::CopyFrom(const FieldItemAttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldItemAttrInfo::IsInitialized() const {

  return true;
}

void FieldItemAttrInfo::Swap(FieldItemAttrInfo* other) {
  if (other != this) {
    base_attr_.Swap(&other->base_attr_);
    star_attr_.Swap(&other->star_attr_);
    blue_star_attr_.Swap(&other->blue_star_attr_);
    std::swap(refine_level_, other->refine_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldItemAttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldItemAttrInfo_descriptor_;
  metadata.reflection = FieldItemAttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryEquipInfo::kStrongLvFieldNumber;
const int MarryEquipInfo::kStrongExpFieldNumber;
const int MarryEquipInfo::kStageLvFieldNumber;
#endif  // !_MSC_VER

MarryEquipInfo::MarryEquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryEquipInfo::InitAsDefaultInstance() {
}

MarryEquipInfo::MarryEquipInfo(const MarryEquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  strong_lv_ = 0;
  strong_exp_ = 0;
  stage_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryEquipInfo::~MarryEquipInfo() {
  SharedDtor();
}

void MarryEquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryEquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryEquipInfo_descriptor_;
}

const MarryEquipInfo& MarryEquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MarryEquipInfo* MarryEquipInfo::default_instance_ = NULL;

MarryEquipInfo* MarryEquipInfo::New() const {
  return new MarryEquipInfo;
}

void MarryEquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strong_lv_ = 0;
    strong_exp_ = 0;
    stage_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 strong_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_lv_)));
          set_has_strong_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strong_exp;
        break;
      }

      // optional int32 strong_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_exp_)));
          set_has_strong_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stage_lv;
        break;
      }

      // optional int32 stage_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_lv_)));
          set_has_stage_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 strong_lv = 1;
  if (has_strong_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->strong_lv(), output);
  }

  // optional int32 strong_exp = 2;
  if (has_strong_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->strong_exp(), output);
  }

  // optional int32 stage_lv = 3;
  if (has_stage_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stage_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryEquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 strong_lv = 1;
  if (has_strong_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->strong_lv(), target);
  }

  // optional int32 strong_exp = 2;
  if (has_strong_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->strong_exp(), target);
  }

  // optional int32 stage_lv = 3;
  if (has_stage_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stage_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 strong_lv = 1;
    if (has_strong_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong_lv());
    }

    // optional int32 strong_exp = 2;
    if (has_strong_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong_exp());
    }

    // optional int32 stage_lv = 3;
    if (has_stage_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryEquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryEquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryEquipInfo::MergeFrom(const MarryEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strong_lv()) {
      set_strong_lv(from.strong_lv());
    }
    if (from.has_strong_exp()) {
      set_strong_exp(from.strong_exp());
    }
    if (from.has_stage_lv()) {
      set_stage_lv(from.stage_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryEquipInfo::CopyFrom(const MarryEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryEquipInfo::IsInitialized() const {

  return true;
}

void MarryEquipInfo::Swap(MarryEquipInfo* other) {
  if (other != this) {
    std::swap(strong_lv_, other->strong_lv_);
    std::swap(strong_exp_, other->strong_exp_);
    std::swap(stage_lv_, other->stage_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryEquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryEquipInfo_descriptor_;
  metadata.reflection = MarryEquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComposeSingleCostProto::kItemidFieldNumber;
const int ComposeSingleCostProto::kBindFieldNumber;
#endif  // !_MSC_VER

ComposeSingleCostProto::ComposeSingleCostProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComposeSingleCostProto::InitAsDefaultInstance() {
}

ComposeSingleCostProto::ComposeSingleCostProto(const ComposeSingleCostProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComposeSingleCostProto::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComposeSingleCostProto::~ComposeSingleCostProto() {
  SharedDtor();
}

void ComposeSingleCostProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComposeSingleCostProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComposeSingleCostProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComposeSingleCostProto_descriptor_;
}

const ComposeSingleCostProto& ComposeSingleCostProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ComposeSingleCostProto* ComposeSingleCostProto::default_instance_ = NULL;

ComposeSingleCostProto* ComposeSingleCostProto::New() const {
  return new ComposeSingleCostProto;
}

void ComposeSingleCostProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_ULONGLONG(0);
    bind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComposeSingleCostProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bind;
        break;
      }

      // optional int32 bind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComposeSingleCostProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional int32 bind = 2;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComposeSingleCostProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional int32 bind = 2;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComposeSingleCostProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional int32 bind = 2;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComposeSingleCostProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComposeSingleCostProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComposeSingleCostProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComposeSingleCostProto::MergeFrom(const ComposeSingleCostProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComposeSingleCostProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComposeSingleCostProto::CopyFrom(const ComposeSingleCostProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComposeSingleCostProto::IsInitialized() const {

  return true;
}

void ComposeSingleCostProto::Swap(ComposeSingleCostProto* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComposeSingleCostProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComposeSingleCostProto_descriptor_;
  metadata.reflection = ComposeSingleCostProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComposeCostProto::kInfoFieldNumber;
#endif  // !_MSC_VER

ComposeCostProto::ComposeCostProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComposeCostProto::InitAsDefaultInstance() {
}

ComposeCostProto::ComposeCostProto(const ComposeCostProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComposeCostProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComposeCostProto::~ComposeCostProto() {
  SharedDtor();
}

void ComposeCostProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComposeCostProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComposeCostProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComposeCostProto_descriptor_;
}

const ComposeCostProto& ComposeCostProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ComposeCostProto* ComposeCostProto::default_instance_ = NULL;

ComposeCostProto* ComposeCostProto::New() const {
  return new ComposeCostProto;
}

void ComposeCostProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComposeCostProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComposeSingleCostProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComposeCostProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComposeSingleCostProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComposeCostProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComposeSingleCostProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComposeCostProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComposeSingleCostProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComposeCostProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComposeCostProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComposeCostProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComposeCostProto::MergeFrom(const ComposeCostProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComposeCostProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComposeCostProto::CopyFrom(const ComposeCostProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComposeCostProto::IsInitialized() const {

  return true;
}

void ComposeCostProto::Swap(ComposeCostProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComposeCostProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComposeCostProto_descriptor_;
  metadata.reflection = ComposeCostProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blustarAttr::kAttridFieldNumber;
const int blustarAttr::kLevelintervalFieldNumber;
const int blustarAttr::kAttrvalueFieldNumber;
#endif  // !_MSC_VER

blustarAttr::blustarAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void blustarAttr::InitAsDefaultInstance() {
}

blustarAttr::blustarAttr(const blustarAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void blustarAttr::SharedCtor() {
  _cached_size_ = 0;
  attrid_ = 0u;
  levelinterval_ = 0u;
  attrvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blustarAttr::~blustarAttr() {
  SharedDtor();
}

void blustarAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void blustarAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blustarAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blustarAttr_descriptor_;
}

const blustarAttr& blustarAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

blustarAttr* blustarAttr::default_instance_ = NULL;

blustarAttr* blustarAttr::New() const {
  return new blustarAttr;
}

void blustarAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrid_ = 0u;
    levelinterval_ = 0u;
    attrvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blustarAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelinterval;
        break;
      }

      // optional uint32 levelinterval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelinterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelinterval_)));
          set_has_levelinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attrvalue;
        break;
      }

      // optional uint32 attrvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void blustarAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attrid = 1;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrid(), output);
  }

  // optional uint32 levelinterval = 2;
  if (has_levelinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelinterval(), output);
  }

  // optional uint32 attrvalue = 3;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attrvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* blustarAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attrid = 1;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrid(), target);
  }

  // optional uint32 levelinterval = 2;
  if (has_levelinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelinterval(), target);
  }

  // optional uint32 attrvalue = 3;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attrvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int blustarAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attrid = 1;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrid());
    }

    // optional uint32 levelinterval = 2;
    if (has_levelinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelinterval());
    }

    // optional uint32 attrvalue = 3;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blustarAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blustarAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blustarAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blustarAttr::MergeFrom(const blustarAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_levelinterval()) {
      set_levelinterval(from.levelinterval());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blustarAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blustarAttr::CopyFrom(const blustarAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blustarAttr::IsInitialized() const {

  return true;
}

void blustarAttr::Swap(blustarAttr* other) {
  if (other != this) {
    std::swap(attrid_, other->attrid_);
    std::swap(levelinterval_, other->levelinterval_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blustarAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blustarAttr_descriptor_;
  metadata.reflection = blustarAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemProtoInfo::kItemIdFieldNumber;
const int ItemProtoInfo::kItemNumFieldNumber;
const int ItemProtoInfo::kBindFieldNumber;
const int ItemProtoInfo::kBaseattrFieldNumber;
const int ItemProtoInfo::kIndexFieldNumber;
const int ItemProtoInfo::kLevelFieldNumber;
const int ItemProtoInfo::kRefineexFieldNumber;
const int ItemProtoInfo::kConAttrFieldNumber;
const int ItemProtoInfo::kExpireTimeFieldNumber;
const int ItemProtoInfo::kFieldDataFieldNumber;
const int ItemProtoInfo::kMarryEquipDataFieldNumber;
const int ItemProtoInfo::kComposeFieldNumber;
const int ItemProtoInfo::kOutTimeFieldNumber;
#endif  // !_MSC_VER

ItemProtoInfo::ItemProtoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemProtoInfo::InitAsDefaultInstance() {
  field_data_ = const_cast< ::proto_ff::FieldItemAttrInfo*>(&::proto_ff::FieldItemAttrInfo::default_instance());
  marry_equip_data_ = const_cast< ::proto_ff::MarryEquipInfo*>(&::proto_ff::MarryEquipInfo::default_instance());
  compose_ = const_cast< ::proto_ff::ComposeCostProto*>(&::proto_ff::ComposeCostProto::default_instance());
}

ItemProtoInfo::ItemProtoInfo(const ItemProtoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemProtoInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_num_ = GOOGLE_LONGLONG(0);
  bind_ = 0;
  index_ = 0;
  level_ = 0;
  expiretime_ = GOOGLE_ULONGLONG(0);
  field_data_ = NULL;
  marry_equip_data_ = NULL;
  compose_ = NULL;
  out_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemProtoInfo::~ItemProtoInfo() {
  SharedDtor();
}

void ItemProtoInfo::SharedDtor() {
  if (this != default_instance_) {
    delete field_data_;
    delete marry_equip_data_;
    delete compose_;
  }
}

void ItemProtoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemProtoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemProtoInfo_descriptor_;
}

const ItemProtoInfo& ItemProtoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ItemProtoInfo* ItemProtoInfo::default_instance_ = NULL;

ItemProtoInfo* ItemProtoInfo::New() const {
  return new ItemProtoInfo;
}

void ItemProtoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    item_num_ = GOOGLE_LONGLONG(0);
    bind_ = 0;
    index_ = 0;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    expiretime_ = GOOGLE_ULONGLONG(0);
    if (has_field_data()) {
      if (field_data_ != NULL) field_data_->::proto_ff::FieldItemAttrInfo::Clear();
    }
    if (has_marry_equip_data()) {
      if (marry_equip_data_ != NULL) marry_equip_data_->::proto_ff::MarryEquipInfo::Clear();
    }
    if (has_compose()) {
      if (compose_ != NULL) compose_->::proto_ff::ComposeCostProto::Clear();
    }
    out_time_ = GOOGLE_ULONGLONG(0);
  }
  baseattr_.Clear();
  refineex_.Clear();
  con_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemProtoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional int64 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional int32 bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_baseattr;
        break;
      }

      // repeated .proto_ff.Attr baseattr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseattr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_baseattr;
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_refineex;
        break;
      }

      // repeated .proto_ff.Attr refineex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refineex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_refineex;
        if (input->ExpectTag(74)) goto parse_con_attr;
        break;
      }

      // repeated .proto_ff.blustarAttr con_attr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_con_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_con_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_con_attr;
        if (input->ExpectTag(80)) goto parse_expireTime;
        break;
      }

      // optional uint64 expireTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_field_data;
        break;
      }

      // optional .proto_ff.FieldItemAttrInfo field_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_marry_equip_data;
        break;
      }

      // optional .proto_ff.MarryEquipInfo marry_equip_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marry_equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marry_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_compose;
        break;
      }

      // optional .proto_ff.ComposeCostProto compose = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_out_time;
        break;
      }

      // optional uint64 out_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_time_)));
          set_has_out_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemProtoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional int64 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item_num(), output);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }

  // repeated .proto_ff.Attr baseattr = 4;
  for (int i = 0; i < this->baseattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->baseattr(i), output);
  }

  // optional int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // repeated .proto_ff.Attr refineex = 8;
  for (int i = 0; i < this->refineex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->refineex(i), output);
  }

  // repeated .proto_ff.blustarAttr con_attr = 9;
  for (int i = 0; i < this->con_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->con_attr(i), output);
  }

  // optional uint64 expireTime = 10;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->expiretime(), output);
  }

  // optional .proto_ff.FieldItemAttrInfo field_data = 11;
  if (has_field_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->field_data(), output);
  }

  // optional .proto_ff.MarryEquipInfo marry_equip_data = 12;
  if (has_marry_equip_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->marry_equip_data(), output);
  }

  // optional .proto_ff.ComposeCostProto compose = 13;
  if (has_compose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->compose(), output);
  }

  // optional uint64 out_time = 14;
  if (has_out_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->out_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemProtoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional int64 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->item_num(), target);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }

  // repeated .proto_ff.Attr baseattr = 4;
  for (int i = 0; i < this->baseattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->baseattr(i), target);
  }

  // optional int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // repeated .proto_ff.Attr refineex = 8;
  for (int i = 0; i < this->refineex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->refineex(i), target);
  }

  // repeated .proto_ff.blustarAttr con_attr = 9;
  for (int i = 0; i < this->con_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->con_attr(i), target);
  }

  // optional uint64 expireTime = 10;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->expiretime(), target);
  }

  // optional .proto_ff.FieldItemAttrInfo field_data = 11;
  if (has_field_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->field_data(), target);
  }

  // optional .proto_ff.MarryEquipInfo marry_equip_data = 12;
  if (has_marry_equip_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->marry_equip_data(), target);
  }

  // optional .proto_ff.ComposeCostProto compose = 13;
  if (has_compose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->compose(), target);
  }

  // optional uint64 out_time = 14;
  if (has_out_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->out_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemProtoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional int64 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_num());
    }

    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 expireTime = 10;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional .proto_ff.FieldItemAttrInfo field_data = 11;
    if (has_field_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_data());
    }

    // optional .proto_ff.MarryEquipInfo marry_equip_data = 12;
    if (has_marry_equip_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marry_equip_data());
    }

    // optional .proto_ff.ComposeCostProto compose = 13;
    if (has_compose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compose());
    }

    // optional uint64 out_time = 14;
    if (has_out_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_time());
    }

  }
  // repeated .proto_ff.Attr baseattr = 4;
  total_size += 1 * this->baseattr_size();
  for (int i = 0; i < this->baseattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseattr(i));
  }

  // repeated .proto_ff.Attr refineex = 8;
  total_size += 1 * this->refineex_size();
  for (int i = 0; i < this->refineex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refineex(i));
  }

  // repeated .proto_ff.blustarAttr con_attr = 9;
  total_size += 1 * this->con_attr_size();
  for (int i = 0; i < this->con_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->con_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemProtoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemProtoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemProtoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemProtoInfo::MergeFrom(const ItemProtoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  baseattr_.MergeFrom(from.baseattr_);
  refineex_.MergeFrom(from.refineex_);
  con_attr_.MergeFrom(from.con_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_field_data()) {
      mutable_field_data()->::proto_ff::FieldItemAttrInfo::MergeFrom(from.field_data());
    }
    if (from.has_marry_equip_data()) {
      mutable_marry_equip_data()->::proto_ff::MarryEquipInfo::MergeFrom(from.marry_equip_data());
    }
    if (from.has_compose()) {
      mutable_compose()->::proto_ff::ComposeCostProto::MergeFrom(from.compose());
    }
    if (from.has_out_time()) {
      set_out_time(from.out_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemProtoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemProtoInfo::CopyFrom(const ItemProtoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemProtoInfo::IsInitialized() const {

  return true;
}

void ItemProtoInfo::Swap(ItemProtoInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(bind_, other->bind_);
    baseattr_.Swap(&other->baseattr_);
    std::swap(index_, other->index_);
    std::swap(level_, other->level_);
    refineex_.Swap(&other->refineex_);
    con_attr_.Swap(&other->con_attr_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(field_data_, other->field_data_);
    std::swap(marry_equip_data_, other->marry_equip_data_);
    std::swap(compose_, other->compose_);
    std::swap(out_time_, other->out_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemProtoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemProtoInfo_descriptor_;
  metadata.reflection = ItemProtoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBPackageBag::kPackageTypeFieldNumber;
const int CharacterDBPackageBag::kExpandNumFieldNumber;
const int CharacterDBPackageBag::kItemsFieldNumber;
const int CharacterDBPackageBag::kOffsetFieldNumber;
#endif  // !_MSC_VER

CharacterDBPackageBag::CharacterDBPackageBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBPackageBag::InitAsDefaultInstance() {
}

CharacterDBPackageBag::CharacterDBPackageBag(const CharacterDBPackageBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBPackageBag::SharedCtor() {
  _cached_size_ = 0;
  package_type_ = 0u;
  expand_num_ = 0u;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBPackageBag::~CharacterDBPackageBag() {
  SharedDtor();
}

void CharacterDBPackageBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBPackageBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBPackageBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBPackageBag_descriptor_;
}

const CharacterDBPackageBag& CharacterDBPackageBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBPackageBag* CharacterDBPackageBag::default_instance_ = NULL;

CharacterDBPackageBag* CharacterDBPackageBag::New() const {
  return new CharacterDBPackageBag;
}

void CharacterDBPackageBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_type_ = 0u;
    expand_num_ = 0u;
    offset_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBPackageBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_type_)));
          set_has_package_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expand_num;
        break;
      }

      // optional uint32 expand_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expand_num_)));
          set_has_expand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBPackageBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_type = 1;
  if (has_package_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_type(), output);
  }

  // optional uint32 expand_num = 2;
  if (has_expand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expand_num(), output);
  }

  // repeated .proto_ff.ItemProtoInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBPackageBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 package_type = 1;
  if (has_package_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_type(), target);
  }

  // optional uint32 expand_num = 2;
  if (has_expand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expand_num(), target);
  }

  // repeated .proto_ff.ItemProtoInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBPackageBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_type = 1;
    if (has_package_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_type());
    }

    // optional uint32 expand_num = 2;
    if (has_expand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expand_num());
    }

    // optional int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .proto_ff.ItemProtoInfo items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBPackageBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBPackageBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBPackageBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBPackageBag::MergeFrom(const CharacterDBPackageBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_type()) {
      set_package_type(from.package_type());
    }
    if (from.has_expand_num()) {
      set_expand_num(from.expand_num());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBPackageBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBPackageBag::CopyFrom(const CharacterDBPackageBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBPackageBag::IsInitialized() const {

  return true;
}

void CharacterDBPackageBag::Swap(CharacterDBPackageBag* other) {
  if (other != this) {
    std::swap(package_type_, other->package_type_);
    std::swap(expand_num_, other->expand_num_);
    items_.Swap(&other->items_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBPackageBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBPackageBag_descriptor_;
  metadata.reflection = CharacterDBPackageBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBPackageData::kBagsFieldNumber;
#endif  // !_MSC_VER

CharacterDBPackageData::CharacterDBPackageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBPackageData::InitAsDefaultInstance() {
}

CharacterDBPackageData::CharacterDBPackageData(const CharacterDBPackageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBPackageData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBPackageData::~CharacterDBPackageData() {
  SharedDtor();
}

void CharacterDBPackageData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBPackageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBPackageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBPackageData_descriptor_;
}

const CharacterDBPackageData& CharacterDBPackageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBPackageData* CharacterDBPackageData::default_instance_ = NULL;

CharacterDBPackageData* CharacterDBPackageData::New() const {
  return new CharacterDBPackageData;
}

void CharacterDBPackageData::Clear() {
  bags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBPackageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBPackageBag bags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBPackageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBPackageBag bags = 1;
  for (int i = 0; i < this->bags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBPackageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBPackageBag bags = 1;
  for (int i = 0; i < this->bags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBPackageData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharacterDBPackageBag bags = 1;
  total_size += 1 * this->bags_size();
  for (int i = 0; i < this->bags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBPackageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBPackageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBPackageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBPackageData::MergeFrom(const CharacterDBPackageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  bags_.MergeFrom(from.bags_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBPackageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBPackageData::CopyFrom(const CharacterDBPackageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBPackageData::IsInitialized() const {

  return true;
}

void CharacterDBPackageData::Swap(CharacterDBPackageData* other) {
  if (other != this) {
    bags_.Swap(&other->bags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBPackageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBPackageData_descriptor_;
  metadata.reflection = CharacterDBPackageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMissionItemInfo::kTypeFieldNumber;
const int CharacterDBMissionItemInfo::kIdFieldNumber;
const int CharacterDBMissionItemInfo::kCurrentValueFieldNumber;
const int CharacterDBMissionItemInfo::kFinalValueFieldNumber;
const int CharacterDBMissionItemInfo::kCompletedFlagFieldNumber;
const int CharacterDBMissionItemInfo::kParma1FieldNumber;
const int CharacterDBMissionItemInfo::kParma2FieldNumber;
const int CharacterDBMissionItemInfo::kParma3FieldNumber;
#endif  // !_MSC_VER

CharacterDBMissionItemInfo::CharacterDBMissionItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMissionItemInfo::InitAsDefaultInstance() {
}

CharacterDBMissionItemInfo::CharacterDBMissionItemInfo(const CharacterDBMissionItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMissionItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  currentvalue_ = 0u;
  finalvalue_ = 0u;
  completedflag_ = false;
  parma1_ = GOOGLE_ULONGLONG(0);
  parma2_ = GOOGLE_ULONGLONG(0);
  parma3_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMissionItemInfo::~CharacterDBMissionItemInfo() {
  SharedDtor();
}

void CharacterDBMissionItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMissionItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMissionItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMissionItemInfo_descriptor_;
}

const CharacterDBMissionItemInfo& CharacterDBMissionItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBMissionItemInfo* CharacterDBMissionItemInfo::default_instance_ = NULL;

CharacterDBMissionItemInfo* CharacterDBMissionItemInfo::New() const {
  return new CharacterDBMissionItemInfo;
}

void CharacterDBMissionItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    currentvalue_ = 0u;
    finalvalue_ = 0u;
    completedflag_ = false;
    parma1_ = GOOGLE_ULONGLONG(0);
    parma2_ = GOOGLE_ULONGLONG(0);
    parma3_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMissionItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentValue;
        break;
      }

      // optional uint32 currentValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentvalue_)));
          set_has_currentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finalValue;
        break;
      }

      // optional uint32 finalValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finalvalue_)));
          set_has_finalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_completedFlag;
        break;
      }

      // optional bool completedFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completedFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completedflag_)));
          set_has_completedflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parma1;
        break;
      }

      // optional uint64 parma1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma1_)));
          set_has_parma1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_parma2;
        break;
      }

      // optional uint64 parma2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma2_)));
          set_has_parma2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_parma3;
        break;
      }

      // optional uint64 parma3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma3_)));
          set_has_parma3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMissionItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentvalue(), output);
  }

  // optional uint32 finalValue = 4;
  if (has_finalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->finalvalue(), output);
  }

  // optional bool completedFlag = 5;
  if (has_completedflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->completedflag(), output);
  }

  // optional uint64 parma1 = 6;
  if (has_parma1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->parma1(), output);
  }

  // optional uint64 parma2 = 7;
  if (has_parma2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->parma2(), output);
  }

  // optional uint64 parma3 = 8;
  if (has_parma3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->parma3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMissionItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentvalue(), target);
  }

  // optional uint32 finalValue = 4;
  if (has_finalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->finalvalue(), target);
  }

  // optional bool completedFlag = 5;
  if (has_completedflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->completedflag(), target);
  }

  // optional uint64 parma1 = 6;
  if (has_parma1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->parma1(), target);
  }

  // optional uint64 parma2 = 7;
  if (has_parma2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->parma2(), target);
  }

  // optional uint64 parma3 = 8;
  if (has_parma3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->parma3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMissionItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 currentValue = 3;
    if (has_currentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentvalue());
    }

    // optional uint32 finalValue = 4;
    if (has_finalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finalvalue());
    }

    // optional bool completedFlag = 5;
    if (has_completedflag()) {
      total_size += 1 + 1;
    }

    // optional uint64 parma1 = 6;
    if (has_parma1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma1());
    }

    // optional uint64 parma2 = 7;
    if (has_parma2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma2());
    }

    // optional uint64 parma3 = 8;
    if (has_parma3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMissionItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMissionItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMissionItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMissionItemInfo::MergeFrom(const CharacterDBMissionItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currentvalue()) {
      set_currentvalue(from.currentvalue());
    }
    if (from.has_finalvalue()) {
      set_finalvalue(from.finalvalue());
    }
    if (from.has_completedflag()) {
      set_completedflag(from.completedflag());
    }
    if (from.has_parma1()) {
      set_parma1(from.parma1());
    }
    if (from.has_parma2()) {
      set_parma2(from.parma2());
    }
    if (from.has_parma3()) {
      set_parma3(from.parma3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMissionItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMissionItemInfo::CopyFrom(const CharacterDBMissionItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMissionItemInfo::IsInitialized() const {

  return true;
}

void CharacterDBMissionItemInfo::Swap(CharacterDBMissionItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(currentvalue_, other->currentvalue_);
    std::swap(finalvalue_, other->finalvalue_);
    std::swap(completedflag_, other->completedflag_);
    std::swap(parma1_, other->parma1_);
    std::swap(parma2_, other->parma2_);
    std::swap(parma3_, other->parma3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMissionItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMissionItemInfo_descriptor_;
  metadata.reflection = CharacterDBMissionItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMissionTrack::kMissionIdFieldNumber;
const int CharacterDBMissionTrack::kDynamicidFieldNumber;
const int CharacterDBMissionTrack::kStatusFieldNumber;
const int CharacterDBMissionTrack::kAcceptMissionTimeFieldNumber;
const int CharacterDBMissionTrack::kItemInfoFieldNumber;
const int CharacterDBMissionTrack::kTextidFieldNumber;
#endif  // !_MSC_VER

CharacterDBMissionTrack::CharacterDBMissionTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMissionTrack::InitAsDefaultInstance() {
}

CharacterDBMissionTrack::CharacterDBMissionTrack(const CharacterDBMissionTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMissionTrack::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = GOOGLE_ULONGLONG(0);
  dynamicid_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  acceptmissiontime_ = GOOGLE_ULONGLONG(0);
  textid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMissionTrack::~CharacterDBMissionTrack() {
  SharedDtor();
}

void CharacterDBMissionTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMissionTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMissionTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMissionTrack_descriptor_;
}

const CharacterDBMissionTrack& CharacterDBMissionTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBMissionTrack* CharacterDBMissionTrack::default_instance_ = NULL;

CharacterDBMissionTrack* CharacterDBMissionTrack::New() const {
  return new CharacterDBMissionTrack;
}

void CharacterDBMissionTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = GOOGLE_ULONGLONG(0);
    dynamicid_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    acceptmissiontime_ = GOOGLE_ULONGLONG(0);
    textid_ = GOOGLE_ULONGLONG(0);
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMissionTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynamicid;
        break;
      }

      // optional uint64 dynamicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamicid_)));
          set_has_dynamicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_acceptMissionTime;
        break;
      }

      // optional uint64 acceptMissionTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptMissionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acceptmissiontime_)));
          set_has_acceptmissiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemInfo;
        break;
      }

      // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemInfo;
        if (input->ExpectTag(48)) goto parse_textid;
        break;
      }

      // optional uint64 textid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &textid_)));
          set_has_textid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMissionTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->missionid(), output);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynamicid(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional uint64 acceptMissionTime = 4;
  if (has_acceptmissiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->acceptmissiontime(), output);
  }

  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->iteminfo(i), output);
  }

  // optional uint64 textid = 6;
  if (has_textid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->textid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMissionTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->missionid(), target);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynamicid(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional uint64 acceptMissionTime = 4;
  if (has_acceptmissiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->acceptmissiontime(), target);
  }

  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->iteminfo(i), target);
  }

  // optional uint64 textid = 6;
  if (has_textid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->textid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMissionTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missionid());
    }

    // optional uint64 dynamicid = 2;
    if (has_dynamicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamicid());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 acceptMissionTime = 4;
    if (has_acceptmissiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acceptmissiontime());
    }

    // optional uint64 textid = 6;
    if (has_textid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->textid());
    }

  }
  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMissionTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMissionTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMissionTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMissionTrack::MergeFrom(const CharacterDBMissionTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_dynamicid()) {
      set_dynamicid(from.dynamicid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_acceptmissiontime()) {
      set_acceptmissiontime(from.acceptmissiontime());
    }
    if (from.has_textid()) {
      set_textid(from.textid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMissionTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMissionTrack::CopyFrom(const CharacterDBMissionTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMissionTrack::IsInitialized() const {

  return true;
}

void CharacterDBMissionTrack::Swap(CharacterDBMissionTrack* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(dynamicid_, other->dynamicid_);
    std::swap(status_, other->status_);
    std::swap(acceptmissiontime_, other->acceptmissiontime_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(textid_, other->textid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMissionTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMissionTrack_descriptor_;
  metadata.reflection = CharacterDBMissionTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDyMissionInfo::kMissionTypeFieldNumber;
const int CharacterDBDyMissionInfo::kLastfreshFieldNumber;
const int CharacterDBDyMissionInfo::kAcceptNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBDyMissionInfo::CharacterDBDyMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDyMissionInfo::InitAsDefaultInstance() {
}

CharacterDBDyMissionInfo::CharacterDBDyMissionInfo(const CharacterDBDyMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDyMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 0;
  lastfresh_ = GOOGLE_ULONGLONG(0);
  accept_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDyMissionInfo::~CharacterDBDyMissionInfo() {
  SharedDtor();
}

void CharacterDBDyMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBDyMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDyMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDyMissionInfo_descriptor_;
}

const CharacterDBDyMissionInfo& CharacterDBDyMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBDyMissionInfo* CharacterDBDyMissionInfo::default_instance_ = NULL;

CharacterDBDyMissionInfo* CharacterDBDyMissionInfo::New() const {
  return new CharacterDBDyMissionInfo;
}

void CharacterDBDyMissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_type_ = 0;
    lastfresh_ = GOOGLE_ULONGLONG(0);
    accept_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDyMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mission_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
          set_has_mission_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastfresh;
        break;
      }

      // optional uint64 lastfresh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastfresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastfresh_)));
          set_has_lastfresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept_num;
        break;
      }

      // optional int32 accept_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_num_)));
          set_has_accept_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDyMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_type(), output);
  }

  // optional uint64 lastfresh = 2;
  if (has_lastfresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastfresh(), output);
  }

  // optional int32 accept_num = 3;
  if (has_accept_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accept_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDyMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_type(), target);
  }

  // optional uint64 lastfresh = 2;
  if (has_lastfresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastfresh(), target);
  }

  // optional int32 accept_num = 3;
  if (has_accept_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accept_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDyMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_type());
    }

    // optional uint64 lastfresh = 2;
    if (has_lastfresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastfresh());
    }

    // optional int32 accept_num = 3;
    if (has_accept_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDyMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDyMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDyMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDyMissionInfo::MergeFrom(const CharacterDBDyMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_lastfresh()) {
      set_lastfresh(from.lastfresh());
    }
    if (from.has_accept_num()) {
      set_accept_num(from.accept_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDyMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDyMissionInfo::CopyFrom(const CharacterDBDyMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDyMissionInfo::IsInitialized() const {

  return true;
}

void CharacterDBDyMissionInfo::Swap(CharacterDBDyMissionInfo* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(lastfresh_, other->lastfresh_);
    std::swap(accept_num_, other->accept_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDyMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDyMissionInfo_descriptor_;
  metadata.reflection = CharacterDBDyMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBRecentSubmitMission::kMissionTypeFieldNumber;
const int CharacterDBRecentSubmitMission::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CharacterDBRecentSubmitMission::CharacterDBRecentSubmitMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBRecentSubmitMission::InitAsDefaultInstance() {
}

CharacterDBRecentSubmitMission::CharacterDBRecentSubmitMission(const CharacterDBRecentSubmitMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBRecentSubmitMission::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 0;
  mission_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBRecentSubmitMission::~CharacterDBRecentSubmitMission() {
  SharedDtor();
}

void CharacterDBRecentSubmitMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBRecentSubmitMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBRecentSubmitMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBRecentSubmitMission_descriptor_;
}

const CharacterDBRecentSubmitMission& CharacterDBRecentSubmitMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBRecentSubmitMission* CharacterDBRecentSubmitMission::default_instance_ = NULL;

CharacterDBRecentSubmitMission* CharacterDBRecentSubmitMission::New() const {
  return new CharacterDBRecentSubmitMission;
}

void CharacterDBRecentSubmitMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_type_ = 0;
    mission_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBRecentSubmitMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mission_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
          set_has_mission_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mission_id;
        break;
      }

      // optional uint64 mission_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBRecentSubmitMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_type(), output);
  }

  // optional uint64 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mission_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBRecentSubmitMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_type(), target);
  }

  // optional uint64 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mission_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBRecentSubmitMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_type());
    }

    // optional uint64 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mission_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBRecentSubmitMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBRecentSubmitMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBRecentSubmitMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBRecentSubmitMission::MergeFrom(const CharacterDBRecentSubmitMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBRecentSubmitMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBRecentSubmitMission::CopyFrom(const CharacterDBRecentSubmitMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBRecentSubmitMission::IsInitialized() const {

  return true;
}

void CharacterDBRecentSubmitMission::Swap(CharacterDBRecentSubmitMission* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBRecentSubmitMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBRecentSubmitMission_descriptor_;
  metadata.reflection = CharacterDBRecentSubmitMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBTaskData::kMissionTrackFieldNumber;
const int CharacterDBTaskData::kDyinfoFieldNumber;
const int CharacterDBTaskData::kAlreadySubmitFieldNumber;
const int CharacterDBTaskData::kRecentSubmitFieldNumber;
#endif  // !_MSC_VER

CharacterDBTaskData::CharacterDBTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBTaskData::InitAsDefaultInstance() {
}

CharacterDBTaskData::CharacterDBTaskData(const CharacterDBTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBTaskData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBTaskData::~CharacterDBTaskData() {
  SharedDtor();
}

void CharacterDBTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBTaskData_descriptor_;
}

const CharacterDBTaskData& CharacterDBTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBTaskData* CharacterDBTaskData::default_instance_ = NULL;

CharacterDBTaskData* CharacterDBTaskData::New() const {
  return new CharacterDBTaskData;
}

void CharacterDBTaskData::Clear() {
  missiontrack_.Clear();
  dyinfo_.Clear();
  already_submit_.Clear();
  recent_submit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missiontrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_missionTrack;
        if (input->ExpectTag(18)) goto parse_dyinfo;
        break;
      }

      // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dyinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dyinfo;
        if (input->ExpectTag(24)) goto parse_already_submit;
        break;
      }

      // repeated uint64 already_submit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_submit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_already_submit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_already_submit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_already_submit;
        if (input->ExpectTag(34)) goto parse_recent_submit;
        break;
      }

      // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recent_submit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recent_submit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recent_submit;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  for (int i = 0; i < this->missiontrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missiontrack(i), output);
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  for (int i = 0; i < this->dyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dyinfo(i), output);
  }

  // repeated uint64 already_submit = 3;
  for (int i = 0; i < this->already_submit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->already_submit(i), output);
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  for (int i = 0; i < this->recent_submit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recent_submit(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  for (int i = 0; i < this->missiontrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missiontrack(i), target);
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  for (int i = 0; i < this->dyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dyinfo(i), target);
  }

  // repeated uint64 already_submit = 3;
  for (int i = 0; i < this->already_submit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->already_submit(i), target);
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  for (int i = 0; i < this->recent_submit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recent_submit(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBTaskData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  total_size += 1 * this->missiontrack_size();
  for (int i = 0; i < this->missiontrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missiontrack(i));
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  total_size += 1 * this->dyinfo_size();
  for (int i = 0; i < this->dyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dyinfo(i));
  }

  // repeated uint64 already_submit = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->already_submit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->already_submit(i));
    }
    total_size += 1 * this->already_submit_size() + data_size;
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  total_size += 1 * this->recent_submit_size();
  for (int i = 0; i < this->recent_submit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recent_submit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBTaskData::MergeFrom(const CharacterDBTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  missiontrack_.MergeFrom(from.missiontrack_);
  dyinfo_.MergeFrom(from.dyinfo_);
  already_submit_.MergeFrom(from.already_submit_);
  recent_submit_.MergeFrom(from.recent_submit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBTaskData::CopyFrom(const CharacterDBTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBTaskData::IsInitialized() const {

  return true;
}

void CharacterDBTaskData::Swap(CharacterDBTaskData* other) {
  if (other != this) {
    missiontrack_.Swap(&other->missiontrack_);
    dyinfo_.Swap(&other->dyinfo_);
    already_submit_.Swap(&other->already_submit_);
    recent_submit_.Swap(&other->recent_submit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBTaskData_descriptor_;
  metadata.reflection = CharacterDBTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSkillItem::kSkillIDFieldNumber;
const int CharacterDBSkillItem::kSkillLevelFieldNumber;
const int CharacterDBSkillItem::kCdFieldNumber;
const int CharacterDBSkillItem::kUnlockFieldNumber;
const int CharacterDBSkillItem::kReplaceSkillidFieldNumber;
#endif  // !_MSC_VER

CharacterDBSkillItem::CharacterDBSkillItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSkillItem::InitAsDefaultInstance() {
}

CharacterDBSkillItem::CharacterDBSkillItem(const CharacterDBSkillItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSkillItem::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  skilllevel_ = 0;
  cd_ = GOOGLE_ULONGLONG(0);
  unlock_ = 0;
  replace_skillid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSkillItem::~CharacterDBSkillItem() {
  SharedDtor();
}

void CharacterDBSkillItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSkillItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSkillItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSkillItem_descriptor_;
}

const CharacterDBSkillItem& CharacterDBSkillItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBSkillItem* CharacterDBSkillItem::default_instance_ = NULL;

CharacterDBSkillItem* CharacterDBSkillItem::New() const {
  return new CharacterDBSkillItem;
}

void CharacterDBSkillItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = GOOGLE_LONGLONG(0);
    skilllevel_ = 0;
    cd_ = GOOGLE_ULONGLONG(0);
    unlock_ = 0;
    replace_skillid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSkillItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLevel;
        break;
      }

      // optional int32 skillLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // optional uint64 cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_replace_skillid;
        break;
      }

      // optional int64 replace_skillid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replace_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replace_skillid_)));
          set_has_replace_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSkillItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->skillid(), output);
  }

  // optional int32 skillLevel = 2;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skilllevel(), output);
  }

  // optional uint64 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cd(), output);
  }

  // optional int32 unlock = 4;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unlock(), output);
  }

  // optional int64 replace_skillid = 5;
  if (has_replace_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->replace_skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSkillItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->skillid(), target);
  }

  // optional int32 skillLevel = 2;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skilllevel(), target);
  }

  // optional uint64 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cd(), target);
  }

  // optional int32 unlock = 4;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unlock(), target);
  }

  // optional int64 replace_skillid = 5;
  if (has_replace_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->replace_skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSkillItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

    // optional int32 skillLevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

    // optional uint64 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cd());
    }

    // optional int32 unlock = 4;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

    // optional int64 replace_skillid = 5;
    if (has_replace_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->replace_skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSkillItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSkillItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSkillItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSkillItem::MergeFrom(const CharacterDBSkillItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_replace_skillid()) {
      set_replace_skillid(from.replace_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSkillItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSkillItem::CopyFrom(const CharacterDBSkillItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSkillItem::IsInitialized() const {

  return true;
}

void CharacterDBSkillItem::Swap(CharacterDBSkillItem* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(cd_, other->cd_);
    std::swap(unlock_, other->unlock_);
    std::swap(replace_skillid_, other->replace_skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSkillItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSkillItem_descriptor_;
  metadata.reflection = CharacterDBSkillItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSkillData::kSkillListFieldNumber;
const int CharacterDBSkillData::kSkillAttrsFieldNumber;
const int CharacterDBSkillData::kSkillslotFieldNumber;
#endif  // !_MSC_VER

CharacterDBSkillData::CharacterDBSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSkillData::InitAsDefaultInstance() {
}

CharacterDBSkillData::CharacterDBSkillData(const CharacterDBSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSkillData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSkillData::~CharacterDBSkillData() {
  SharedDtor();
}

void CharacterDBSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSkillData_descriptor_;
}

const CharacterDBSkillData& CharacterDBSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBSkillData* CharacterDBSkillData::default_instance_ = NULL;

CharacterDBSkillData* CharacterDBSkillData::New() const {
  return new CharacterDBSkillData;
}

void CharacterDBSkillData::Clear() {
  skilllist_.Clear();
  skillattrs_.Clear();
  skillslot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBSkillItem skillList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillList;
        if (input->ExpectTag(16)) goto parse_skillAttrs;
        break;
      }

      // repeated uint32 skillAttrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillAttrs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_skillattrs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillattrs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillAttrs;
        if (input->ExpectTag(24)) goto parse_skillslot;
        break;
      }

      // repeated int64 skillslot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_skillslot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_skillslot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillslot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBSkillItem skillList = 1;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skilllist(i), output);
  }

  // repeated uint32 skillAttrs = 2;
  for (int i = 0; i < this->skillattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->skillattrs(i), output);
  }

  // repeated int64 skillslot = 3;
  for (int i = 0; i < this->skillslot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->skillslot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBSkillItem skillList = 1;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skilllist(i), target);
  }

  // repeated uint32 skillAttrs = 2;
  for (int i = 0; i < this->skillattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->skillattrs(i), target);
  }

  // repeated int64 skillslot = 3;
  for (int i = 0; i < this->skillslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->skillslot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSkillData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharacterDBSkillItem skillList = 1;
  total_size += 1 * this->skilllist_size();
  for (int i = 0; i < this->skilllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilllist(i));
  }

  // repeated uint32 skillAttrs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillattrs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillattrs(i));
    }
    total_size += 1 * this->skillattrs_size() + data_size;
  }

  // repeated int64 skillslot = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillslot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->skillslot(i));
    }
    total_size += 1 * this->skillslot_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSkillData::MergeFrom(const CharacterDBSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilllist_.MergeFrom(from.skilllist_);
  skillattrs_.MergeFrom(from.skillattrs_);
  skillslot_.MergeFrom(from.skillslot_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSkillData::CopyFrom(const CharacterDBSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSkillData::IsInitialized() const {

  return true;
}

void CharacterDBSkillData::Swap(CharacterDBSkillData* other) {
  if (other != this) {
    skilllist_.Swap(&other->skilllist_);
    skillattrs_.Swap(&other->skillattrs_);
    skillslot_.Swap(&other->skillslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSkillData_descriptor_;
  metadata.reflection = CharacterDBSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBAttrDetailInfo::kAttrsFieldNumber;
const int CharacterDBAttrDetailInfo::kCurPosFieldNumber;
#endif  // !_MSC_VER

CharacterDBAttrDetailInfo::CharacterDBAttrDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBAttrDetailInfo::InitAsDefaultInstance() {
  cur_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

CharacterDBAttrDetailInfo::CharacterDBAttrDetailInfo(const CharacterDBAttrDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBAttrDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  cur_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBAttrDetailInfo::~CharacterDBAttrDetailInfo() {
  SharedDtor();
}

void CharacterDBAttrDetailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cur_pos_;
  }
}

void CharacterDBAttrDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBAttrDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBAttrDetailInfo_descriptor_;
}

const CharacterDBAttrDetailInfo& CharacterDBAttrDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBAttrDetailInfo* CharacterDBAttrDetailInfo::default_instance_ = NULL;

CharacterDBAttrDetailInfo* CharacterDBAttrDetailInfo::New() const {
  return new CharacterDBAttrDetailInfo;
}

void CharacterDBAttrDetailInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_cur_pos()) {
      if (cur_pos_ != NULL) cur_pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBAttrDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Attr64 attrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectTag(18)) goto parse_cur_pos;
        break;
      }

      // optional .proto_ff.Vector3PB cur_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBAttrDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Attr64 attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrs(i), output);
  }

  // optional .proto_ff.Vector3PB cur_pos = 2;
  if (has_cur_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cur_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBAttrDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Attr64 attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrs(i), target);
  }

  // optional .proto_ff.Vector3PB cur_pos = 2;
  if (has_cur_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cur_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBAttrDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto_ff.Vector3PB cur_pos = 2;
    if (has_cur_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cur_pos());
    }

  }
  // repeated .proto_ff.Attr64 attrs = 1;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBAttrDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBAttrDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBAttrDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBAttrDetailInfo::MergeFrom(const CharacterDBAttrDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_pos()) {
      mutable_cur_pos()->::proto_ff::Vector3PB::MergeFrom(from.cur_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBAttrDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBAttrDetailInfo::CopyFrom(const CharacterDBAttrDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBAttrDetailInfo::IsInitialized() const {

  return true;
}

void CharacterDBAttrDetailInfo::Swap(CharacterDBAttrDetailInfo* other) {
  if (other != this) {
    attrs_.Swap(&other->attrs_);
    std::swap(cur_pos_, other->cur_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBAttrDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBAttrDetailInfo_descriptor_;
  metadata.reflection = CharacterDBAttrDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBExtendData::kAttrDetailFieldNumber;
#endif  // !_MSC_VER

CharacterDBExtendData::CharacterDBExtendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBExtendData::InitAsDefaultInstance() {
  attr_detail_ = const_cast< ::proto_ff::CharacterDBAttrDetailInfo*>(&::proto_ff::CharacterDBAttrDetailInfo::default_instance());
}

CharacterDBExtendData::CharacterDBExtendData(const CharacterDBExtendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBExtendData::SharedCtor() {
  _cached_size_ = 0;
  attr_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBExtendData::~CharacterDBExtendData() {
  SharedDtor();
}

void CharacterDBExtendData::SharedDtor() {
  if (this != default_instance_) {
    delete attr_detail_;
  }
}

void CharacterDBExtendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBExtendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBExtendData_descriptor_;
}

const CharacterDBExtendData& CharacterDBExtendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBExtendData* CharacterDBExtendData::default_instance_ = NULL;

CharacterDBExtendData* CharacterDBExtendData::New() const {
  return new CharacterDBExtendData;
}

void CharacterDBExtendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attr_detail()) {
      if (attr_detail_ != NULL) attr_detail_->::proto_ff::CharacterDBAttrDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBExtendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CharacterDBAttrDetailInfo attr_detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBExtendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CharacterDBAttrDetailInfo attr_detail = 1;
  if (has_attr_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBExtendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CharacterDBAttrDetailInfo attr_detail = 1;
  if (has_attr_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBExtendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CharacterDBAttrDetailInfo attr_detail = 1;
    if (has_attr_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBExtendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBExtendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBExtendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBExtendData::MergeFrom(const CharacterDBExtendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_detail()) {
      mutable_attr_detail()->::proto_ff::CharacterDBAttrDetailInfo::MergeFrom(from.attr_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBExtendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBExtendData::CopyFrom(const CharacterDBExtendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBExtendData::IsInitialized() const {

  return true;
}

void CharacterDBExtendData::Swap(CharacterDBExtendData* other) {
  if (other != this) {
    std::swap(attr_detail_, other->attr_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBExtendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBExtendData_descriptor_;
  metadata.reflection = CharacterDBExtendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSlotProto::kIndexFieldNumber;
const int EquipSlotProto::kStrenlvFieldNumber;
const int EquipSlotProto::kRefinelvFieldNumber;
const int EquipSlotProto::kInlayFieldNumber;
const int EquipSlotProto::kStrenexpFieldNumber;
const int EquipSlotProto::kRefineexpFieldNumber;
const int EquipSlotProto::kStrenAttrFieldNumber;
const int EquipSlotProto::kRefinepecentFieldNumber;
const int EquipSlotProto::kScrutinyTrepanningNumFieldNumber;
const int EquipSlotProto::kScrutinyAttrFieldNumber;
const int EquipSlotProto::kClearStepFieldNumber;
const int EquipSlotProto::kClearCombatFieldNumber;
const int EquipSlotProto::kSuitlvFieldNumber;
const int EquipSlotProto::kSuitRecordMaxLvFieldNumber;
const int EquipSlotProto::kAwaklvFieldNumber;
const int EquipSlotProto::kEnchantinglvFieldNumber;
#endif  // !_MSC_VER

EquipSlotProto::EquipSlotProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSlotProto::InitAsDefaultInstance() {
}

EquipSlotProto::EquipSlotProto(const EquipSlotProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSlotProto::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  strenlv_ = 0;
  refinelv_ = 0;
  strenexp_ = 0;
  refineexp_ = 0;
  refinepecent_ = GOOGLE_LONGLONG(0);
  scrutinytrepanningnum_ = 0;
  clearstep_ = 0;
  clearcombat_ = GOOGLE_LONGLONG(0);
  suitlv_ = 0;
  suit_record_max_lv_ = 0;
  awaklv_ = 0;
  enchantinglv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSlotProto::~EquipSlotProto() {
  SharedDtor();
}

void EquipSlotProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSlotProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSlotProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSlotProto_descriptor_;
}

const EquipSlotProto& EquipSlotProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

EquipSlotProto* EquipSlotProto::default_instance_ = NULL;

EquipSlotProto* EquipSlotProto::New() const {
  return new EquipSlotProto;
}

void EquipSlotProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    strenlv_ = 0;
    refinelv_ = 0;
    strenexp_ = 0;
    refineexp_ = 0;
    refinepecent_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scrutinytrepanningnum_ = 0;
    clearstep_ = 0;
    clearcombat_ = GOOGLE_LONGLONG(0);
    suitlv_ = 0;
    suit_record_max_lv_ = 0;
    awaklv_ = 0;
    enchantinglv_ = 0;
  }
  inlay_.Clear();
  strenattr_.Clear();
  scrutinyattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSlotProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strenlv;
        break;
      }

      // optional int32 strenlv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strenlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strenlv_)));
          set_has_strenlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refinelv;
        break;
      }

      // optional int32 refinelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inlay;
        break;
      }

      // repeated uint64 inlay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inlay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_inlay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_inlay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inlay;
        if (input->ExpectTag(40)) goto parse_strenexp;
        break;
      }

      // optional int32 strenexp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strenexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strenexp_)));
          set_has_strenexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_refineexp;
        break;
      }

      // optional int32 refineexp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refineexp_)));
          set_has_refineexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strenAttr;
        break;
      }

      // repeated .proto_ff.Attr strenAttr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strenAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strenattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strenAttr;
        if (input->ExpectTag(64)) goto parse_refinepecent;
        break;
      }

      // optional int64 refinepecent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refinepecent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refinepecent_)));
          set_has_refinepecent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_scrutinyTrepanningNum;
        break;
      }

      // optional int32 scrutinyTrepanningNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scrutinyTrepanningNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scrutinytrepanningnum_)));
          set_has_scrutinytrepanningnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_scrutinyAttr;
        break;
      }

      // repeated .proto_ff.AttrEx64 scrutinyAttr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrutinyAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scrutinyattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_scrutinyAttr;
        if (input->ExpectTag(88)) goto parse_clearStep;
        break;
      }

      // optional int32 clearStep = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clearStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clearstep_)));
          set_has_clearstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_clearCombat;
        break;
      }

      // optional int64 clearCombat = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clearCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clearcombat_)));
          set_has_clearcombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_suitlv;
        break;
      }

      // optional int32 suitlv = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suitlv_)));
          set_has_suitlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_suit_record_max_lv;
        break;
      }

      // optional int32 suit_record_max_lv = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_record_max_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suit_record_max_lv_)));
          set_has_suit_record_max_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_awaklv;
        break;
      }

      // optional int32 awaklv = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaklv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awaklv_)));
          set_has_awaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_enchantinglv;
        break;
      }

      // optional int32 enchantinglv = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchantinglv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchantinglv_)));
          set_has_enchantinglv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSlotProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 strenlv = 2;
  if (has_strenlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->strenlv(), output);
  }

  // optional int32 refinelv = 3;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refinelv(), output);
  }

  // repeated uint64 inlay = 4;
  for (int i = 0; i < this->inlay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->inlay(i), output);
  }

  // optional int32 strenexp = 5;
  if (has_strenexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strenexp(), output);
  }

  // optional int32 refineexp = 6;
  if (has_refineexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->refineexp(), output);
  }

  // repeated .proto_ff.Attr strenAttr = 7;
  for (int i = 0; i < this->strenattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->strenattr(i), output);
  }

  // optional int64 refinepecent = 8;
  if (has_refinepecent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->refinepecent(), output);
  }

  // optional int32 scrutinyTrepanningNum = 9;
  if (has_scrutinytrepanningnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->scrutinytrepanningnum(), output);
  }

  // repeated .proto_ff.AttrEx64 scrutinyAttr = 10;
  for (int i = 0; i < this->scrutinyattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->scrutinyattr(i), output);
  }

  // optional int32 clearStep = 11;
  if (has_clearstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->clearstep(), output);
  }

  // optional int64 clearCombat = 12;
  if (has_clearcombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->clearcombat(), output);
  }

  // optional int32 suitlv = 13;
  if (has_suitlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->suitlv(), output);
  }

  // optional int32 suit_record_max_lv = 14;
  if (has_suit_record_max_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->suit_record_max_lv(), output);
  }

  // optional int32 awaklv = 15;
  if (has_awaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->awaklv(), output);
  }

  // optional int32 enchantinglv = 16;
  if (has_enchantinglv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->enchantinglv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSlotProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 strenlv = 2;
  if (has_strenlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->strenlv(), target);
  }

  // optional int32 refinelv = 3;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refinelv(), target);
  }

  // repeated uint64 inlay = 4;
  for (int i = 0; i < this->inlay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->inlay(i), target);
  }

  // optional int32 strenexp = 5;
  if (has_strenexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strenexp(), target);
  }

  // optional int32 refineexp = 6;
  if (has_refineexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->refineexp(), target);
  }

  // repeated .proto_ff.Attr strenAttr = 7;
  for (int i = 0; i < this->strenattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->strenattr(i), target);
  }

  // optional int64 refinepecent = 8;
  if (has_refinepecent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->refinepecent(), target);
  }

  // optional int32 scrutinyTrepanningNum = 9;
  if (has_scrutinytrepanningnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->scrutinytrepanningnum(), target);
  }

  // repeated .proto_ff.AttrEx64 scrutinyAttr = 10;
  for (int i = 0; i < this->scrutinyattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->scrutinyattr(i), target);
  }

  // optional int32 clearStep = 11;
  if (has_clearstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->clearstep(), target);
  }

  // optional int64 clearCombat = 12;
  if (has_clearcombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->clearcombat(), target);
  }

  // optional int32 suitlv = 13;
  if (has_suitlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->suitlv(), target);
  }

  // optional int32 suit_record_max_lv = 14;
  if (has_suit_record_max_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->suit_record_max_lv(), target);
  }

  // optional int32 awaklv = 15;
  if (has_awaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->awaklv(), target);
  }

  // optional int32 enchantinglv = 16;
  if (has_enchantinglv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->enchantinglv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSlotProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 strenlv = 2;
    if (has_strenlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strenlv());
    }

    // optional int32 refinelv = 3;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinelv());
    }

    // optional int32 strenexp = 5;
    if (has_strenexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strenexp());
    }

    // optional int32 refineexp = 6;
    if (has_refineexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refineexp());
    }

    // optional int64 refinepecent = 8;
    if (has_refinepecent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refinepecent());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 scrutinyTrepanningNum = 9;
    if (has_scrutinytrepanningnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scrutinytrepanningnum());
    }

    // optional int32 clearStep = 11;
    if (has_clearstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clearstep());
    }

    // optional int64 clearCombat = 12;
    if (has_clearcombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clearcombat());
    }

    // optional int32 suitlv = 13;
    if (has_suitlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suitlv());
    }

    // optional int32 suit_record_max_lv = 14;
    if (has_suit_record_max_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suit_record_max_lv());
    }

    // optional int32 awaklv = 15;
    if (has_awaklv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awaklv());
    }

    // optional int32 enchantinglv = 16;
    if (has_enchantinglv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchantinglv());
    }

  }
  // repeated uint64 inlay = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->inlay_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->inlay(i));
    }
    total_size += 1 * this->inlay_size() + data_size;
  }

  // repeated .proto_ff.Attr strenAttr = 7;
  total_size += 1 * this->strenattr_size();
  for (int i = 0; i < this->strenattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strenattr(i));
  }

  // repeated .proto_ff.AttrEx64 scrutinyAttr = 10;
  total_size += 1 * this->scrutinyattr_size();
  for (int i = 0; i < this->scrutinyattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scrutinyattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSlotProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSlotProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSlotProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSlotProto::MergeFrom(const EquipSlotProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  inlay_.MergeFrom(from.inlay_);
  strenattr_.MergeFrom(from.strenattr_);
  scrutinyattr_.MergeFrom(from.scrutinyattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_strenlv()) {
      set_strenlv(from.strenlv());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_strenexp()) {
      set_strenexp(from.strenexp());
    }
    if (from.has_refineexp()) {
      set_refineexp(from.refineexp());
    }
    if (from.has_refinepecent()) {
      set_refinepecent(from.refinepecent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scrutinytrepanningnum()) {
      set_scrutinytrepanningnum(from.scrutinytrepanningnum());
    }
    if (from.has_clearstep()) {
      set_clearstep(from.clearstep());
    }
    if (from.has_clearcombat()) {
      set_clearcombat(from.clearcombat());
    }
    if (from.has_suitlv()) {
      set_suitlv(from.suitlv());
    }
    if (from.has_suit_record_max_lv()) {
      set_suit_record_max_lv(from.suit_record_max_lv());
    }
    if (from.has_awaklv()) {
      set_awaklv(from.awaklv());
    }
    if (from.has_enchantinglv()) {
      set_enchantinglv(from.enchantinglv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSlotProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSlotProto::CopyFrom(const EquipSlotProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSlotProto::IsInitialized() const {

  return true;
}

void EquipSlotProto::Swap(EquipSlotProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(strenlv_, other->strenlv_);
    std::swap(refinelv_, other->refinelv_);
    inlay_.Swap(&other->inlay_);
    std::swap(strenexp_, other->strenexp_);
    std::swap(refineexp_, other->refineexp_);
    strenattr_.Swap(&other->strenattr_);
    std::swap(refinepecent_, other->refinepecent_);
    std::swap(scrutinytrepanningnum_, other->scrutinytrepanningnum_);
    scrutinyattr_.Swap(&other->scrutinyattr_);
    std::swap(clearstep_, other->clearstep_);
    std::swap(clearcombat_, other->clearcombat_);
    std::swap(suitlv_, other->suitlv_);
    std::swap(suit_record_max_lv_, other->suit_record_max_lv_);
    std::swap(awaklv_, other->awaklv_);
    std::swap(enchantinglv_, other->enchantinglv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSlotProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSlotProto_descriptor_;
  metadata.reflection = EquipSlotProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBEquipData::kEquipFieldNumber;
const int CharacterDBEquipData::kEquipSlotFieldNumber;
#endif  // !_MSC_VER

CharacterDBEquipData::CharacterDBEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBEquipData::InitAsDefaultInstance() {
}

CharacterDBEquipData::CharacterDBEquipData(const CharacterDBEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBEquipData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBEquipData::~CharacterDBEquipData() {
  SharedDtor();
}

void CharacterDBEquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBEquipData_descriptor_;
}

const CharacterDBEquipData& CharacterDBEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBEquipData* CharacterDBEquipData::default_instance_ = NULL;

CharacterDBEquipData* CharacterDBEquipData::New() const {
  return new CharacterDBEquipData;
}

void CharacterDBEquipData::Clear() {
  equip_.Clear();
  equip_slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectTag(18)) goto parse_equip_slot;
        break;
      }

      // repeated .proto_ff.EquipSlotProto equip_slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_slot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(i), output);
  }

  // repeated .proto_ff.EquipSlotProto equip_slot = 2;
  for (int i = 0; i < this->equip_slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_slot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(i), target);
  }

  // repeated .proto_ff.EquipSlotProto equip_slot = 2;
  for (int i = 0; i < this->equip_slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_slot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBEquipData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ItemProtoInfo equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .proto_ff.EquipSlotProto equip_slot = 2;
  total_size += 1 * this->equip_slot_size();
  for (int i = 0; i < this->equip_slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_slot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBEquipData::MergeFrom(const CharacterDBEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  equip_slot_.MergeFrom(from.equip_slot_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBEquipData::CopyFrom(const CharacterDBEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBEquipData::IsInitialized() const {

  return true;
}

void CharacterDBEquipData::Swap(CharacterDBEquipData* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    equip_slot_.Swap(&other->equip_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBEquipData_descriptor_;
  metadata.reflection = CharacterDBEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplicateSingleProto::kDuplicateIdFieldNumber;
const int DuplicateSingleProto::kStarFieldNumber;
const int DuplicateSingleProto::kCurLayerFieldNumber;
#endif  // !_MSC_VER

DuplicateSingleProto::DuplicateSingleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplicateSingleProto::InitAsDefaultInstance() {
}

DuplicateSingleProto::DuplicateSingleProto(const DuplicateSingleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplicateSingleProto::SharedCtor() {
  _cached_size_ = 0;
  duplicate_id_ = GOOGLE_ULONGLONG(0);
  star_ = 0;
  cur_layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateSingleProto::~DuplicateSingleProto() {
  SharedDtor();
}

void DuplicateSingleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateSingleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateSingleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateSingleProto_descriptor_;
}

const DuplicateSingleProto& DuplicateSingleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

DuplicateSingleProto* DuplicateSingleProto::default_instance_ = NULL;

DuplicateSingleProto* DuplicateSingleProto::New() const {
  return new DuplicateSingleProto;
}

void DuplicateSingleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicate_id_ = GOOGLE_ULONGLONG(0);
    star_ = 0;
    cur_layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplicateSingleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 duplicate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_layer;
        break;
      }

      // optional int32 cur_layer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_layer_)));
          set_has_cur_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplicateSingleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 duplicate_id = 1;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->duplicate_id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 cur_layer = 3;
  if (has_cur_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplicateSingleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 duplicate_id = 1;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->duplicate_id(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional int32 cur_layer = 3;
  if (has_cur_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplicateSingleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 duplicate_id = 1;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duplicate_id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 cur_layer = 3;
    if (has_cur_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateSingleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplicateSingleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplicateSingleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplicateSingleProto::MergeFrom(const DuplicateSingleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_cur_layer()) {
      set_cur_layer(from.cur_layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplicateSingleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateSingleProto::CopyFrom(const DuplicateSingleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateSingleProto::IsInitialized() const {

  return true;
}

void DuplicateSingleProto::Swap(DuplicateSingleProto* other) {
  if (other != this) {
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(star_, other->star_);
    std::swap(cur_layer_, other->cur_layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplicateSingleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateSingleProto_descriptor_;
  metadata.reflection = DuplicateSingleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplicateGroupProto::kGroupIdFieldNumber;
const int DuplicateGroupProto::kEnterNumFieldNumber;
const int DuplicateGroupProto::kTotalNumFieldNumber;
const int DuplicateGroupProto::kBuyNumFieldNumber;
const int DuplicateGroupProto::kLastFreshFieldNumber;
#endif  // !_MSC_VER

DuplicateGroupProto::DuplicateGroupProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplicateGroupProto::InitAsDefaultInstance() {
}

DuplicateGroupProto::DuplicateGroupProto(const DuplicateGroupProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplicateGroupProto::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  enter_num_ = 0;
  total_num_ = 0;
  buy_num_ = 0;
  last_fresh_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateGroupProto::~DuplicateGroupProto() {
  SharedDtor();
}

void DuplicateGroupProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateGroupProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateGroupProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateGroupProto_descriptor_;
}

const DuplicateGroupProto& DuplicateGroupProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

DuplicateGroupProto* DuplicateGroupProto::default_instance_ = NULL;

DuplicateGroupProto* DuplicateGroupProto::New() const {
  return new DuplicateGroupProto;
}

void DuplicateGroupProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    enter_num_ = 0;
    total_num_ = 0;
    buy_num_ = 0;
    last_fresh_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplicateGroupProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enter_num;
        break;
      }

      // optional int32 enter_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_num_)));
          set_has_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_num;
        break;
      }

      // optional int32 total_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_fresh;
        break;
      }

      // optional uint64 last_fresh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_fresh_)));
          set_has_last_fresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplicateGroupProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional int32 enter_num = 2;
  if (has_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enter_num(), output);
  }

  // optional int32 total_num = 3;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_num(), output);
  }

  // optional int32 buy_num = 4;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_num(), output);
  }

  // optional uint64 last_fresh = 5;
  if (has_last_fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_fresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplicateGroupProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional int32 enter_num = 2;
  if (has_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enter_num(), target);
  }

  // optional int32 total_num = 3;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_num(), target);
  }

  // optional int32 buy_num = 4;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_num(), target);
  }

  // optional uint64 last_fresh = 5;
  if (has_last_fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_fresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplicateGroupProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional int32 enter_num = 2;
    if (has_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_num());
    }

    // optional int32 total_num = 3;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }

    // optional int32 buy_num = 4;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

    // optional uint64 last_fresh = 5;
    if (has_last_fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_fresh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateGroupProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplicateGroupProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplicateGroupProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplicateGroupProto::MergeFrom(const DuplicateGroupProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_enter_num()) {
      set_enter_num(from.enter_num());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_last_fresh()) {
      set_last_fresh(from.last_fresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplicateGroupProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateGroupProto::CopyFrom(const DuplicateGroupProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateGroupProto::IsInitialized() const {

  return true;
}

void DuplicateGroupProto::Swap(DuplicateGroupProto* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(enter_num_, other->enter_num_);
    std::swap(total_num_, other->total_num_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(last_fresh_, other->last_fresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplicateGroupProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateGroupProto_descriptor_;
  metadata.reflection = DuplicateGroupProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplicateLadderExProto::kCurLayerFieldNumber;
const int DuplicateLadderExProto::kLastMailTimeFieldNumber;
#endif  // !_MSC_VER

DuplicateLadderExProto::DuplicateLadderExProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplicateLadderExProto::InitAsDefaultInstance() {
}

DuplicateLadderExProto::DuplicateLadderExProto(const DuplicateLadderExProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplicateLadderExProto::SharedCtor() {
  _cached_size_ = 0;
  cur_layer_ = 0;
  last_mail_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateLadderExProto::~DuplicateLadderExProto() {
  SharedDtor();
}

void DuplicateLadderExProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateLadderExProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateLadderExProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateLadderExProto_descriptor_;
}

const DuplicateLadderExProto& DuplicateLadderExProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

DuplicateLadderExProto* DuplicateLadderExProto::default_instance_ = NULL;

DuplicateLadderExProto* DuplicateLadderExProto::New() const {
  return new DuplicateLadderExProto;
}

void DuplicateLadderExProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_layer_ = 0;
    last_mail_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplicateLadderExProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_layer_)));
          set_has_cur_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_mail_time;
        break;
      }

      // optional uint64 last_mail_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_mail_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_mail_time_)));
          set_has_last_mail_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplicateLadderExProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_layer = 1;
  if (has_cur_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_layer(), output);
  }

  // optional uint64 last_mail_time = 2;
  if (has_last_mail_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_mail_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplicateLadderExProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_layer = 1;
  if (has_cur_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_layer(), target);
  }

  // optional uint64 last_mail_time = 2;
  if (has_last_mail_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_mail_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplicateLadderExProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_layer = 1;
    if (has_cur_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_layer());
    }

    // optional uint64 last_mail_time = 2;
    if (has_last_mail_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_mail_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateLadderExProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplicateLadderExProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplicateLadderExProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplicateLadderExProto::MergeFrom(const DuplicateLadderExProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_layer()) {
      set_cur_layer(from.cur_layer());
    }
    if (from.has_last_mail_time()) {
      set_last_mail_time(from.last_mail_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplicateLadderExProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateLadderExProto::CopyFrom(const DuplicateLadderExProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateLadderExProto::IsInitialized() const {

  return true;
}

void DuplicateLadderExProto::Swap(DuplicateLadderExProto* other) {
  if (other != this) {
    std::swap(cur_layer_, other->cur_layer_);
    std::swap(last_mail_time_, other->last_mail_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplicateLadderExProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateLadderExProto_descriptor_;
  metadata.reflection = DuplicateLadderExProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupHistoryExpProto::kDuplicateIdFieldNumber;
const int DupHistoryExpProto::kExpFieldNumber;
#endif  // !_MSC_VER

DupHistoryExpProto::DupHistoryExpProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupHistoryExpProto::InitAsDefaultInstance() {
}

DupHistoryExpProto::DupHistoryExpProto(const DupHistoryExpProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupHistoryExpProto::SharedCtor() {
  _cached_size_ = 0;
  duplicate_id_ = GOOGLE_ULONGLONG(0);
  exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupHistoryExpProto::~DupHistoryExpProto() {
  SharedDtor();
}

void DupHistoryExpProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupHistoryExpProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupHistoryExpProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupHistoryExpProto_descriptor_;
}

const DupHistoryExpProto& DupHistoryExpProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

DupHistoryExpProto* DupHistoryExpProto::default_instance_ = NULL;

DupHistoryExpProto* DupHistoryExpProto::New() const {
  return new DupHistoryExpProto;
}

void DupHistoryExpProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicate_id_ = GOOGLE_ULONGLONG(0);
    exp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupHistoryExpProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 duplicate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupHistoryExpProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 duplicate_id = 1;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->duplicate_id(), output);
  }

  // optional uint64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupHistoryExpProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 duplicate_id = 1;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->duplicate_id(), target);
  }

  // optional uint64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupHistoryExpProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 duplicate_id = 1;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duplicate_id());
    }

    // optional uint64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupHistoryExpProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupHistoryExpProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupHistoryExpProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupHistoryExpProto::MergeFrom(const DupHistoryExpProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupHistoryExpProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupHistoryExpProto::CopyFrom(const DupHistoryExpProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupHistoryExpProto::IsInitialized() const {

  return true;
}

void DupHistoryExpProto::Swap(DupHistoryExpProto* other) {
  if (other != this) {
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupHistoryExpProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupHistoryExpProto_descriptor_;
  metadata.reflection = DupHistoryExpProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupUnionBossDBProto::kMutexIdFieldNumber;
const int DupUnionBossDBProto::kLastPassFieldNumber;
const int DupUnionBossDBProto::kLastFailFieldNumber;
#endif  // !_MSC_VER

DupUnionBossDBProto::DupUnionBossDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupUnionBossDBProto::InitAsDefaultInstance() {
}

DupUnionBossDBProto::DupUnionBossDBProto(const DupUnionBossDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupUnionBossDBProto::SharedCtor() {
  _cached_size_ = 0;
  last_pass_ = GOOGLE_ULONGLONG(0);
  last_fail_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupUnionBossDBProto::~DupUnionBossDBProto() {
  SharedDtor();
}

void DupUnionBossDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupUnionBossDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupUnionBossDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupUnionBossDBProto_descriptor_;
}

const DupUnionBossDBProto& DupUnionBossDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

DupUnionBossDBProto* DupUnionBossDBProto::default_instance_ = NULL;

DupUnionBossDBProto* DupUnionBossDBProto::New() const {
  return new DupUnionBossDBProto;
}

void DupUnionBossDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_pass_ = GOOGLE_ULONGLONG(0);
    last_fail_ = GOOGLE_ULONGLONG(0);
  }
  mutex_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupUnionBossDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 mutex_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mutex_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_mutex_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mutex_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mutex_id;
        if (input->ExpectTag(16)) goto parse_last_pass;
        break;
      }

      // optional uint64 last_pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_pass_)));
          set_has_last_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_fail;
        break;
      }

      // optional uint64 last_fail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_fail_)));
          set_has_last_fail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupUnionBossDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 mutex_id = 1;
  for (int i = 0; i < this->mutex_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->mutex_id(i), output);
  }

  // optional uint64 last_pass = 2;
  if (has_last_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_pass(), output);
  }

  // optional uint64 last_fail = 3;
  if (has_last_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_fail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupUnionBossDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 mutex_id = 1;
  for (int i = 0; i < this->mutex_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->mutex_id(i), target);
  }

  // optional uint64 last_pass = 2;
  if (has_last_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_pass(), target);
  }

  // optional uint64 last_fail = 3;
  if (has_last_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_fail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupUnionBossDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 last_pass = 2;
    if (has_last_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_pass());
    }

    // optional uint64 last_fail = 3;
    if (has_last_fail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_fail());
    }

  }
  // repeated uint64 mutex_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mutex_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mutex_id(i));
    }
    total_size += 1 * this->mutex_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupUnionBossDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupUnionBossDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupUnionBossDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupUnionBossDBProto::MergeFrom(const DupUnionBossDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutex_id_.MergeFrom(from.mutex_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_pass()) {
      set_last_pass(from.last_pass());
    }
    if (from.has_last_fail()) {
      set_last_fail(from.last_fail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupUnionBossDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupUnionBossDBProto::CopyFrom(const DupUnionBossDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupUnionBossDBProto::IsInitialized() const {

  return true;
}

void DupUnionBossDBProto::Swap(DupUnionBossDBProto* other) {
  if (other != this) {
    mutex_id_.Swap(&other->mutex_id_);
    std::swap(last_pass_, other->last_pass_);
    std::swap(last_fail_, other->last_fail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupUnionBossDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupUnionBossDBProto_descriptor_;
  metadata.reflection = DupUnionBossDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupPalaceFetchDBProto::kLayerFieldNumber;
const int DupPalaceFetchDBProto::kPassNumFieldNumber;
const int DupPalaceFetchDBProto::kNumLstFieldNumber;
#endif  // !_MSC_VER

DupPalaceFetchDBProto::DupPalaceFetchDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupPalaceFetchDBProto::InitAsDefaultInstance() {
}

DupPalaceFetchDBProto::DupPalaceFetchDBProto(const DupPalaceFetchDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupPalaceFetchDBProto::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  pass_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupPalaceFetchDBProto::~DupPalaceFetchDBProto() {
  SharedDtor();
}

void DupPalaceFetchDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupPalaceFetchDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupPalaceFetchDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupPalaceFetchDBProto_descriptor_;
}

const DupPalaceFetchDBProto& DupPalaceFetchDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

DupPalaceFetchDBProto* DupPalaceFetchDBProto::default_instance_ = NULL;

DupPalaceFetchDBProto* DupPalaceFetchDBProto::New() const {
  return new DupPalaceFetchDBProto;
}

void DupPalaceFetchDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0;
    pass_num_ = 0;
  }
  num_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupPalaceFetchDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_num;
        break;
      }

      // optional int32 pass_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_num_)));
          set_has_pass_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_lst;
        break;
      }

      // repeated uint32 num_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_num_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupPalaceFetchDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  // optional int32 pass_num = 2;
  if (has_pass_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_num(), output);
  }

  // repeated uint32 num_lst = 3;
  for (int i = 0; i < this->num_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->num_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupPalaceFetchDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  // optional int32 pass_num = 2;
  if (has_pass_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_num(), target);
  }

  // repeated uint32 num_lst = 3;
  for (int i = 0; i < this->num_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->num_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupPalaceFetchDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 pass_num = 2;
    if (has_pass_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_num());
    }

  }
  // repeated uint32 num_lst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num_lst(i));
    }
    total_size += 1 * this->num_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupPalaceFetchDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupPalaceFetchDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupPalaceFetchDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupPalaceFetchDBProto::MergeFrom(const DupPalaceFetchDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  num_lst_.MergeFrom(from.num_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_pass_num()) {
      set_pass_num(from.pass_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupPalaceFetchDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupPalaceFetchDBProto::CopyFrom(const DupPalaceFetchDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupPalaceFetchDBProto::IsInitialized() const {

  return true;
}

void DupPalaceFetchDBProto::Swap(DupPalaceFetchDBProto* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(pass_num_, other->pass_num_);
    num_lst_.Swap(&other->num_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupPalaceFetchDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupPalaceFetchDBProto_descriptor_;
  metadata.reflection = DupPalaceFetchDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupPalaceMultFetchDBProto::kFetchProgressFieldNumber;
#endif  // !_MSC_VER

DupPalaceMultFetchDBProto::DupPalaceMultFetchDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupPalaceMultFetchDBProto::InitAsDefaultInstance() {
}

DupPalaceMultFetchDBProto::DupPalaceMultFetchDBProto(const DupPalaceMultFetchDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupPalaceMultFetchDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupPalaceMultFetchDBProto::~DupPalaceMultFetchDBProto() {
  SharedDtor();
}

void DupPalaceMultFetchDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupPalaceMultFetchDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupPalaceMultFetchDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupPalaceMultFetchDBProto_descriptor_;
}

const DupPalaceMultFetchDBProto& DupPalaceMultFetchDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

DupPalaceMultFetchDBProto* DupPalaceMultFetchDBProto::default_instance_ = NULL;

DupPalaceMultFetchDBProto* DupPalaceMultFetchDBProto::New() const {
  return new DupPalaceMultFetchDBProto;
}

void DupPalaceMultFetchDBProto::Clear() {
  fetch_progress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupPalaceMultFetchDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DupPalaceFetchDBProto fetch_progress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch_progress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetch_progress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fetch_progress;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupPalaceMultFetchDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DupPalaceFetchDBProto fetch_progress = 1;
  for (int i = 0; i < this->fetch_progress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetch_progress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupPalaceMultFetchDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DupPalaceFetchDBProto fetch_progress = 1;
  for (int i = 0; i < this->fetch_progress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetch_progress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupPalaceMultFetchDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DupPalaceFetchDBProto fetch_progress = 1;
  total_size += 1 * this->fetch_progress_size();
  for (int i = 0; i < this->fetch_progress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fetch_progress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupPalaceMultFetchDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupPalaceMultFetchDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupPalaceMultFetchDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupPalaceMultFetchDBProto::MergeFrom(const DupPalaceMultFetchDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_progress_.MergeFrom(from.fetch_progress_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupPalaceMultFetchDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupPalaceMultFetchDBProto::CopyFrom(const DupPalaceMultFetchDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupPalaceMultFetchDBProto::IsInitialized() const {

  return true;
}

void DupPalaceMultFetchDBProto::Swap(DupPalaceMultFetchDBProto* other) {
  if (other != this) {
    fetch_progress_.Swap(&other->fetch_progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupPalaceMultFetchDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupPalaceMultFetchDBProto_descriptor_;
  metadata.reflection = DupPalaceMultFetchDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupUnionPalaceDBProto::kLayerFieldNumber;
const int DupUnionPalaceDBProto::kFetchedLstFieldNumber;
const int DupUnionPalaceDBProto::kFetchFieldNumber;
const int DupUnionPalaceDBProto::kBreakCountFieldNumber;
#endif  // !_MSC_VER

DupUnionPalaceDBProto::DupUnionPalaceDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupUnionPalaceDBProto::InitAsDefaultInstance() {
  fetch_ = const_cast< ::proto_ff::DupPalaceMultFetchDBProto*>(&::proto_ff::DupPalaceMultFetchDBProto::default_instance());
}

DupUnionPalaceDBProto::DupUnionPalaceDBProto(const DupUnionPalaceDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupUnionPalaceDBProto::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  fetch_ = NULL;
  break_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupUnionPalaceDBProto::~DupUnionPalaceDBProto() {
  SharedDtor();
}

void DupUnionPalaceDBProto::SharedDtor() {
  if (this != default_instance_) {
    delete fetch_;
  }
}

void DupUnionPalaceDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupUnionPalaceDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupUnionPalaceDBProto_descriptor_;
}

const DupUnionPalaceDBProto& DupUnionPalaceDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

DupUnionPalaceDBProto* DupUnionPalaceDBProto::default_instance_ = NULL;

DupUnionPalaceDBProto* DupUnionPalaceDBProto::New() const {
  return new DupUnionPalaceDBProto;
}

void DupUnionPalaceDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0;
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::DupPalaceMultFetchDBProto::Clear();
    }
    break_count_ = 0;
  }
  fetched_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupUnionPalaceDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetched_lst;
        break;
      }

      // repeated int32 fetched_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetched_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_fetched_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetched_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetched_lst;
        if (input->ExpectTag(26)) goto parse_fetch;
        break;
      }

      // optional .proto_ff.DupPalaceMultFetchDBProto fetch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_break_count;
        break;
      }

      // optional int32 break_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &break_count_)));
          set_has_break_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupUnionPalaceDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  // repeated int32 fetched_lst = 2;
  for (int i = 0; i < this->fetched_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->fetched_lst(i), output);
  }

  // optional .proto_ff.DupPalaceMultFetchDBProto fetch = 3;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fetch(), output);
  }

  // optional int32 break_count = 4;
  if (has_break_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->break_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupUnionPalaceDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  // repeated int32 fetched_lst = 2;
  for (int i = 0; i < this->fetched_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->fetched_lst(i), target);
  }

  // optional .proto_ff.DupPalaceMultFetchDBProto fetch = 3;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fetch(), target);
  }

  // optional int32 break_count = 4;
  if (has_break_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->break_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupUnionPalaceDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional .proto_ff.DupPalaceMultFetchDBProto fetch = 3;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

    // optional int32 break_count = 4;
    if (has_break_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->break_count());
    }

  }
  // repeated int32 fetched_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetched_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetched_lst(i));
    }
    total_size += 1 * this->fetched_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupUnionPalaceDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupUnionPalaceDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupUnionPalaceDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupUnionPalaceDBProto::MergeFrom(const DupUnionPalaceDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetched_lst_.MergeFrom(from.fetched_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::DupPalaceMultFetchDBProto::MergeFrom(from.fetch());
    }
    if (from.has_break_count()) {
      set_break_count(from.break_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupUnionPalaceDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupUnionPalaceDBProto::CopyFrom(const DupUnionPalaceDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupUnionPalaceDBProto::IsInitialized() const {

  return true;
}

void DupUnionPalaceDBProto::Swap(DupUnionPalaceDBProto* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    fetched_lst_.Swap(&other->fetched_lst_);
    std::swap(fetch_, other->fetch_);
    std::swap(break_count_, other->break_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupUnionPalaceDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupUnionPalaceDBProto_descriptor_;
  metadata.reflection = DupUnionPalaceDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDuplicateData::kDuplicateFieldNumber;
const int CharacterDBDuplicateData::kGroupFieldNumber;
const int CharacterDBDuplicateData::kOpenDupFieldNumber;
const int CharacterDBDuplicateData::kLadderFieldNumber;
const int CharacterDBDuplicateData::kDupExpFieldNumber;
const int CharacterDBDuplicateData::kUnionBossFieldNumber;
const int CharacterDBDuplicateData::kPalaceFieldNumber;
#endif  // !_MSC_VER

CharacterDBDuplicateData::CharacterDBDuplicateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDuplicateData::InitAsDefaultInstance() {
  ladder_ = const_cast< ::proto_ff::DuplicateLadderExProto*>(&::proto_ff::DuplicateLadderExProto::default_instance());
  union_boss_ = const_cast< ::proto_ff::DupUnionBossDBProto*>(&::proto_ff::DupUnionBossDBProto::default_instance());
  palace_ = const_cast< ::proto_ff::DupUnionPalaceDBProto*>(&::proto_ff::DupUnionPalaceDBProto::default_instance());
}

CharacterDBDuplicateData::CharacterDBDuplicateData(const CharacterDBDuplicateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDuplicateData::SharedCtor() {
  _cached_size_ = 0;
  ladder_ = NULL;
  union_boss_ = NULL;
  palace_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDuplicateData::~CharacterDBDuplicateData() {
  SharedDtor();
}

void CharacterDBDuplicateData::SharedDtor() {
  if (this != default_instance_) {
    delete ladder_;
    delete union_boss_;
    delete palace_;
  }
}

void CharacterDBDuplicateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDuplicateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDuplicateData_descriptor_;
}

const CharacterDBDuplicateData& CharacterDBDuplicateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBDuplicateData* CharacterDBDuplicateData::default_instance_ = NULL;

CharacterDBDuplicateData* CharacterDBDuplicateData::New() const {
  return new CharacterDBDuplicateData;
}

void CharacterDBDuplicateData::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_ladder()) {
      if (ladder_ != NULL) ladder_->::proto_ff::DuplicateLadderExProto::Clear();
    }
    if (has_union_boss()) {
      if (union_boss_ != NULL) union_boss_->::proto_ff::DupUnionBossDBProto::Clear();
    }
    if (has_palace()) {
      if (palace_ != NULL) palace_->::proto_ff::DupUnionPalaceDBProto::Clear();
    }
  }
  duplicate_.Clear();
  group_.Clear();
  open_dup_.Clear();
  dup_exp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDuplicateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DuplicateSingleProto duplicate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicate;
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // repeated .proto_ff.DuplicateGroupProto group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        if (input->ExpectTag(24)) goto parse_open_dup;
        break;
      }

      // repeated uint32 open_dup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_dup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_open_dup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_open_dup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_dup;
        if (input->ExpectTag(34)) goto parse_ladder;
        break;
      }

      // optional .proto_ff.DuplicateLadderExProto ladder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ladder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ladder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dup_exp;
        break;
      }

      // repeated .proto_ff.DupHistoryExpProto dup_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dup_exp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dup_exp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dup_exp;
        if (input->ExpectTag(50)) goto parse_union_boss;
        break;
      }

      // optional .proto_ff.DupUnionBossDBProto union_boss = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_union_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_union_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_palace;
        break;
      }

      // optional .proto_ff.DupUnionPalaceDBProto palace = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_palace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_palace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDuplicateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DuplicateSingleProto duplicate = 1;
  for (int i = 0; i < this->duplicate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicate(i), output);
  }

  // repeated .proto_ff.DuplicateGroupProto group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(i), output);
  }

  // repeated uint32 open_dup = 3;
  for (int i = 0; i < this->open_dup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->open_dup(i), output);
  }

  // optional .proto_ff.DuplicateLadderExProto ladder = 4;
  if (has_ladder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ladder(), output);
  }

  // repeated .proto_ff.DupHistoryExpProto dup_exp = 5;
  for (int i = 0; i < this->dup_exp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dup_exp(i), output);
  }

  // optional .proto_ff.DupUnionBossDBProto union_boss = 6;
  if (has_union_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->union_boss(), output);
  }

  // optional .proto_ff.DupUnionPalaceDBProto palace = 7;
  if (has_palace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->palace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDuplicateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DuplicateSingleProto duplicate = 1;
  for (int i = 0; i < this->duplicate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicate(i), target);
  }

  // repeated .proto_ff.DuplicateGroupProto group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group(i), target);
  }

  // repeated uint32 open_dup = 3;
  for (int i = 0; i < this->open_dup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->open_dup(i), target);
  }

  // optional .proto_ff.DuplicateLadderExProto ladder = 4;
  if (has_ladder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ladder(), target);
  }

  // repeated .proto_ff.DupHistoryExpProto dup_exp = 5;
  for (int i = 0; i < this->dup_exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dup_exp(i), target);
  }

  // optional .proto_ff.DupUnionBossDBProto union_boss = 6;
  if (has_union_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->union_boss(), target);
  }

  // optional .proto_ff.DupUnionPalaceDBProto palace = 7;
  if (has_palace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->palace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDuplicateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .proto_ff.DuplicateLadderExProto ladder = 4;
    if (has_ladder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ladder());
    }

    // optional .proto_ff.DupUnionBossDBProto union_boss = 6;
    if (has_union_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->union_boss());
    }

    // optional .proto_ff.DupUnionPalaceDBProto palace = 7;
    if (has_palace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->palace());
    }

  }
  // repeated .proto_ff.DuplicateSingleProto duplicate = 1;
  total_size += 1 * this->duplicate_size();
  for (int i = 0; i < this->duplicate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicate(i));
  }

  // repeated .proto_ff.DuplicateGroupProto group = 2;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  // repeated uint32 open_dup = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_dup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->open_dup(i));
    }
    total_size += 1 * this->open_dup_size() + data_size;
  }

  // repeated .proto_ff.DupHistoryExpProto dup_exp = 5;
  total_size += 1 * this->dup_exp_size();
  for (int i = 0; i < this->dup_exp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dup_exp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDuplicateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDuplicateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDuplicateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDuplicateData::MergeFrom(const CharacterDBDuplicateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicate_.MergeFrom(from.duplicate_);
  group_.MergeFrom(from.group_);
  open_dup_.MergeFrom(from.open_dup_);
  dup_exp_.MergeFrom(from.dup_exp_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_ladder()) {
      mutable_ladder()->::proto_ff::DuplicateLadderExProto::MergeFrom(from.ladder());
    }
    if (from.has_union_boss()) {
      mutable_union_boss()->::proto_ff::DupUnionBossDBProto::MergeFrom(from.union_boss());
    }
    if (from.has_palace()) {
      mutable_palace()->::proto_ff::DupUnionPalaceDBProto::MergeFrom(from.palace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDuplicateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDuplicateData::CopyFrom(const CharacterDBDuplicateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDuplicateData::IsInitialized() const {

  return true;
}

void CharacterDBDuplicateData::Swap(CharacterDBDuplicateData* other) {
  if (other != this) {
    duplicate_.Swap(&other->duplicate_);
    group_.Swap(&other->group_);
    open_dup_.Swap(&other->open_dup_);
    std::swap(ladder_, other->ladder_);
    dup_exp_.Swap(&other->dup_exp_);
    std::swap(union_boss_, other->union_boss_);
    std::swap(palace_, other->palace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDuplicateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDuplicateData_descriptor_;
  metadata.reflection = CharacterDBDuplicateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleAchievementDBData::kIdFieldNumber;
const int SingleAchievementDBData::kStatusFieldNumber;
const int SingleAchievementDBData::kCompleteCountFieldNumber;
#endif  // !_MSC_VER

SingleAchievementDBData::SingleAchievementDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleAchievementDBData::InitAsDefaultInstance() {
}

SingleAchievementDBData::SingleAchievementDBData(const SingleAchievementDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleAchievementDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  completecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleAchievementDBData::~SingleAchievementDBData() {
  SharedDtor();
}

void SingleAchievementDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleAchievementDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleAchievementDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleAchievementDBData_descriptor_;
}

const SingleAchievementDBData& SingleAchievementDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

SingleAchievementDBData* SingleAchievementDBData::default_instance_ = NULL;

SingleAchievementDBData* SingleAchievementDBData::New() const {
  return new SingleAchievementDBData;
}

void SingleAchievementDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    completecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleAchievementDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_completeCount;
        break;
      }

      // optional uint32 completeCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completecount_)));
          set_has_completecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleAchievementDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 completeCount = 3;
  if (has_completecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->completecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleAchievementDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 completeCount = 3;
  if (has_completecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->completecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleAchievementDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 completeCount = 3;
    if (has_completecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleAchievementDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleAchievementDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleAchievementDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleAchievementDBData::MergeFrom(const SingleAchievementDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_completecount()) {
      set_completecount(from.completecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleAchievementDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAchievementDBData::CopyFrom(const SingleAchievementDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAchievementDBData::IsInitialized() const {

  return true;
}

void SingleAchievementDBData::Swap(SingleAchievementDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(completecount_, other->completecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleAchievementDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleAchievementDBData_descriptor_;
  metadata.reflection = SingleAchievementDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupAchievementDBData::kSortTypeFieldNumber;
const int GroupAchievementDBData::kAchievementInfoListFieldNumber;
const int GroupAchievementDBData::kAchievementRewardFieldNumber;
#endif  // !_MSC_VER

GroupAchievementDBData::GroupAchievementDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupAchievementDBData::InitAsDefaultInstance() {
}

GroupAchievementDBData::GroupAchievementDBData(const GroupAchievementDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupAchievementDBData::SharedCtor() {
  _cached_size_ = 0;
  sorttype_ = 0u;
  achievementreward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupAchievementDBData::~GroupAchievementDBData() {
  SharedDtor();
}

void GroupAchievementDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupAchievementDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAchievementDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAchievementDBData_descriptor_;
}

const GroupAchievementDBData& GroupAchievementDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

GroupAchievementDBData* GroupAchievementDBData::default_instance_ = NULL;

GroupAchievementDBData* GroupAchievementDBData::New() const {
  return new GroupAchievementDBData;
}

void GroupAchievementDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sorttype_ = 0u;
    achievementreward_ = 0u;
  }
  achievementinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupAchievementDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sortType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sorttype_)));
          set_has_sorttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achievementInfoList;
        break;
      }

      // repeated .proto_ff.SingleAchievementDBData achievementInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achievementInfoList;
        if (input->ExpectTag(24)) goto parse_achievementReward;
        break;
      }

      // optional uint32 achievementReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementreward_)));
          set_has_achievementreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupAchievementDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sorttype(), output);
  }

  // repeated .proto_ff.SingleAchievementDBData achievementInfoList = 2;
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achievementinfolist(i), output);
  }

  // optional uint32 achievementReward = 3;
  if (has_achievementreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->achievementreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupAchievementDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sorttype(), target);
  }

  // repeated .proto_ff.SingleAchievementDBData achievementInfoList = 2;
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achievementinfolist(i), target);
  }

  // optional uint32 achievementReward = 3;
  if (has_achievementreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->achievementreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupAchievementDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sortType = 1;
    if (has_sorttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sorttype());
    }

    // optional uint32 achievementReward = 3;
    if (has_achievementreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementreward());
    }

  }
  // repeated .proto_ff.SingleAchievementDBData achievementInfoList = 2;
  total_size += 1 * this->achievementinfolist_size();
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAchievementDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupAchievementDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupAchievementDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupAchievementDBData::MergeFrom(const GroupAchievementDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievementinfolist_.MergeFrom(from.achievementinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorttype()) {
      set_sorttype(from.sorttype());
    }
    if (from.has_achievementreward()) {
      set_achievementreward(from.achievementreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupAchievementDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAchievementDBData::CopyFrom(const GroupAchievementDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAchievementDBData::IsInitialized() const {

  return true;
}

void GroupAchievementDBData::Swap(GroupAchievementDBData* other) {
  if (other != this) {
    std::swap(sorttype_, other->sorttype_);
    achievementinfolist_.Swap(&other->achievementinfolist_);
    std::swap(achievementreward_, other->achievementreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupAchievementDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupAchievementDBData_descriptor_;
  metadata.reflection = GroupAchievementDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterAchievementDBData::kGroupAchievementDataFieldNumber;
#endif  // !_MSC_VER

CharacterAchievementDBData::CharacterAchievementDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterAchievementDBData::InitAsDefaultInstance() {
}

CharacterAchievementDBData::CharacterAchievementDBData(const CharacterAchievementDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterAchievementDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterAchievementDBData::~CharacterAchievementDBData() {
  SharedDtor();
}

void CharacterAchievementDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterAchievementDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterAchievementDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterAchievementDBData_descriptor_;
}

const CharacterAchievementDBData& CharacterAchievementDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterAchievementDBData* CharacterAchievementDBData::default_instance_ = NULL;

CharacterAchievementDBData* CharacterAchievementDBData::New() const {
  return new CharacterAchievementDBData;
}

void CharacterAchievementDBData::Clear() {
  groupachievementdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterAchievementDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GroupAchievementDBData groupAchievementData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupAchievementData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupachievementdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_groupAchievementData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterAchievementDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GroupAchievementDBData groupAchievementData = 1;
  for (int i = 0; i < this->groupachievementdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groupachievementdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterAchievementDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GroupAchievementDBData groupAchievementData = 1;
  for (int i = 0; i < this->groupachievementdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groupachievementdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterAchievementDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GroupAchievementDBData groupAchievementData = 1;
  total_size += 1 * this->groupachievementdata_size();
  for (int i = 0; i < this->groupachievementdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupachievementdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterAchievementDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterAchievementDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterAchievementDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterAchievementDBData::MergeFrom(const CharacterAchievementDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupachievementdata_.MergeFrom(from.groupachievementdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterAchievementDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterAchievementDBData::CopyFrom(const CharacterAchievementDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterAchievementDBData::IsInitialized() const {

  return true;
}

void CharacterAchievementDBData::Swap(CharacterAchievementDBData* other) {
  if (other != this) {
    groupachievementdata_.Swap(&other->groupachievementdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterAchievementDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterAchievementDBData_descriptor_;
  metadata.reflection = CharacterAchievementDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectParamProto::kParam1FieldNumber;
const int EffectParamProto::kParam2FieldNumber;
#endif  // !_MSC_VER

EffectParamProto::EffectParamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EffectParamProto::InitAsDefaultInstance() {
}

EffectParamProto::EffectParamProto(const EffectParamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EffectParamProto::SharedCtor() {
  _cached_size_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  param2_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectParamProto::~EffectParamProto() {
  SharedDtor();
}

void EffectParamProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EffectParamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectParamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectParamProto_descriptor_;
}

const EffectParamProto& EffectParamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

EffectParamProto* EffectParamProto::default_instance_ = NULL;

EffectParamProto* EffectParamProto::New() const {
  return new EffectParamProto;
}

void EffectParamProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param1_ = GOOGLE_LONGLONG(0);
    param2_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectParamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 param1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param2;
        break;
      }

      // optional int64 param2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EffectParamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->param1(), output);
  }

  // optional int64 param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EffectParamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 param1 = 1;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->param1(), target);
  }

  // optional int64 param2 = 2;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EffectParamProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 param1 = 1;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

    // optional int64 param2 = 2;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectParamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectParamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectParamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectParamProto::MergeFrom(const EffectParamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectParamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectParamProto::CopyFrom(const EffectParamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectParamProto::IsInitialized() const {

  return true;
}

void EffectParamProto::Swap(EffectParamProto* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectParamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectParamProto_descriptor_;
  metadata.reflection = EffectParamProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultEffectParamProto::kParamLstFieldNumber;
#endif  // !_MSC_VER

MultEffectParamProto::MultEffectParamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultEffectParamProto::InitAsDefaultInstance() {
}

MultEffectParamProto::MultEffectParamProto(const MultEffectParamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultEffectParamProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultEffectParamProto::~MultEffectParamProto() {
  SharedDtor();
}

void MultEffectParamProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultEffectParamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultEffectParamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultEffectParamProto_descriptor_;
}

const MultEffectParamProto& MultEffectParamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MultEffectParamProto* MultEffectParamProto::default_instance_ = NULL;

MultEffectParamProto* MultEffectParamProto::New() const {
  return new MultEffectParamProto;
}

void MultEffectParamProto::Clear() {
  param_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultEffectParamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.EffectParamProto param_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_param_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultEffectParamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.EffectParamProto param_lst = 1;
  for (int i = 0; i < this->param_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultEffectParamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.EffectParamProto param_lst = 1;
  for (int i = 0; i < this->param_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultEffectParamProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.EffectParamProto param_lst = 1;
  total_size += 1 * this->param_lst_size();
  for (int i = 0; i < this->param_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultEffectParamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultEffectParamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultEffectParamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultEffectParamProto::MergeFrom(const MultEffectParamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_lst_.MergeFrom(from.param_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultEffectParamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultEffectParamProto::CopyFrom(const MultEffectParamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultEffectParamProto::IsInitialized() const {

  return true;
}

void MultEffectParamProto::Swap(MultEffectParamProto* other) {
  if (other != this) {
    param_lst_.Swap(&other->param_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultEffectParamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultEffectParamProto_descriptor_;
  metadata.reflection = MultEffectParamProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffBagInfo::kBuffBagInstIdFieldNumber;
const int BuffBagInfo::kStateBagIdFieldNumber;
const int BuffBagInfo::kStateBagTimeFieldNumber;
const int BuffBagInfo::kDelayedTimeFieldNumber;
const int BuffBagInfo::kIsForeverFieldNumber;
const int BuffBagInfo::kSkillIdFieldNumber;
const int BuffBagInfo::kSkillLevelFieldNumber;
const int BuffBagInfo::kSenderCidFieldNumber;
const int BuffBagInfo::kParamsFieldNumber;
const int BuffBagInfo::kStatusFieldNumber;
const int BuffBagInfo::kTargettypeFieldNumber;
const int BuffBagInfo::kStartTimeFieldNumber;
const int BuffBagInfo::kEparamFieldNumber;
#endif  // !_MSC_VER

BuffBagInfo::BuffBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffBagInfo::InitAsDefaultInstance() {
  eparam_ = const_cast< ::proto_ff::MultEffectParamProto*>(&::proto_ff::MultEffectParamProto::default_instance());
}

BuffBagInfo::BuffBagInfo(const BuffBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffBagInfo::SharedCtor() {
  _cached_size_ = 0;
  buffbaginstid_ = 0u;
  statebagid_ = GOOGLE_ULONGLONG(0);
  statebagtime_ = 0u;
  delayedtime_ = 0u;
  isforever_ = false;
  skillid_ = GOOGLE_ULONGLONG(0);
  skilllevel_ = 0u;
  sendercid_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  targettype_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  eparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffBagInfo::~BuffBagInfo() {
  SharedDtor();
}

void BuffBagInfo::SharedDtor() {
  if (this != default_instance_) {
    delete eparam_;
  }
}

void BuffBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffBagInfo_descriptor_;
}

const BuffBagInfo& BuffBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

BuffBagInfo* BuffBagInfo::default_instance_ = NULL;

BuffBagInfo* BuffBagInfo::New() const {
  return new BuffBagInfo;
}

void BuffBagInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffbaginstid_ = 0u;
    statebagid_ = GOOGLE_ULONGLONG(0);
    statebagtime_ = 0u;
    delayedtime_ = 0u;
    isforever_ = false;
    skillid_ = GOOGLE_ULONGLONG(0);
    skilllevel_ = 0u;
    sendercid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    status_ = 0u;
    targettype_ = 0u;
    starttime_ = GOOGLE_ULONGLONG(0);
    if (has_eparam()) {
      if (eparam_ != NULL) eparam_->::proto_ff::MultEffectParamProto::Clear();
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buffBagInstId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffbaginstid_)));
          set_has_buffbaginstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stateBagId;
        break;
      }

      // optional uint64 stateBagId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateBagId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &statebagid_)));
          set_has_statebagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stateBagTime;
        break;
      }

      // optional uint32 stateBagTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateBagTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statebagtime_)));
          set_has_statebagtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delayedTime;
        break;
      }

      // optional uint32 delayedTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delayedtime_)));
          set_has_delayedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isForever;
        break;
      }

      // optional bool isForever = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isForever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isforever_)));
          set_has_isforever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skillId;
        break;
      }

      // optional uint64 skillId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skillLevel;
        break;
      }

      // optional uint32 skillLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_senderCid;
        break;
      }

      // optional uint64 senderCid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendercid_)));
          set_has_sendercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_params;
        break;
      }

      // repeated uint64 params = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 88, input, this->mutable_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_params;
        if (input->ExpectTag(96)) goto parse_status;
        break;
      }

      // optional uint32 status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_targettype;
        break;
      }

      // optional uint32 targettype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targettype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_eparam;
        break;
      }

      // optional .proto_ff.MultEffectParamProto eparam = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buffBagInstId = 1;
  if (has_buffbaginstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffbaginstid(), output);
  }

  // optional uint64 stateBagId = 2;
  if (has_statebagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->statebagid(), output);
  }

  // optional uint32 stateBagTime = 3;
  if (has_statebagtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->statebagtime(), output);
  }

  // optional uint32 delayedTime = 4;
  if (has_delayedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delayedtime(), output);
  }

  // optional bool isForever = 6;
  if (has_isforever()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isforever(), output);
  }

  // optional uint64 skillId = 7;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->skillid(), output);
  }

  // optional uint32 skillLevel = 8;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->skilllevel(), output);
  }

  // optional uint64 senderCid = 10;
  if (has_sendercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->sendercid(), output);
  }

  // repeated uint64 params = 11;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      11, this->params(i), output);
  }

  // optional uint32 status = 12;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->status(), output);
  }

  // optional uint32 targettype = 13;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->targettype(), output);
  }

  // optional uint64 startTime = 14;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->starttime(), output);
  }

  // optional .proto_ff.MultEffectParamProto eparam = 15;
  if (has_eparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->eparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buffBagInstId = 1;
  if (has_buffbaginstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffbaginstid(), target);
  }

  // optional uint64 stateBagId = 2;
  if (has_statebagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->statebagid(), target);
  }

  // optional uint32 stateBagTime = 3;
  if (has_statebagtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->statebagtime(), target);
  }

  // optional uint32 delayedTime = 4;
  if (has_delayedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delayedtime(), target);
  }

  // optional bool isForever = 6;
  if (has_isforever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isforever(), target);
  }

  // optional uint64 skillId = 7;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->skillid(), target);
  }

  // optional uint32 skillLevel = 8;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->skilllevel(), target);
  }

  // optional uint64 senderCid = 10;
  if (has_sendercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->sendercid(), target);
  }

  // repeated uint64 params = 11;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(11, this->params(i), target);
  }

  // optional uint32 status = 12;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->status(), target);
  }

  // optional uint32 targettype = 13;
  if (has_targettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->targettype(), target);
  }

  // optional uint64 startTime = 14;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->starttime(), target);
  }

  // optional .proto_ff.MultEffectParamProto eparam = 15;
  if (has_eparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->eparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buffBagInstId = 1;
    if (has_buffbaginstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffbaginstid());
    }

    // optional uint64 stateBagId = 2;
    if (has_statebagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->statebagid());
    }

    // optional uint32 stateBagTime = 3;
    if (has_statebagtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statebagtime());
    }

    // optional uint32 delayedTime = 4;
    if (has_delayedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delayedtime());
    }

    // optional bool isForever = 6;
    if (has_isforever()) {
      total_size += 1 + 1;
    }

    // optional uint64 skillId = 7;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skillid());
    }

    // optional uint32 skillLevel = 8;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllevel());
    }

    // optional uint64 senderCid = 10;
    if (has_sendercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendercid());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 status = 12;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 targettype = 13;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettype());
    }

    // optional uint64 startTime = 14;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional .proto_ff.MultEffectParamProto eparam = 15;
    if (has_eparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eparam());
    }

  }
  // repeated uint64 params = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffBagInfo::MergeFrom(const BuffBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffbaginstid()) {
      set_buffbaginstid(from.buffbaginstid());
    }
    if (from.has_statebagid()) {
      set_statebagid(from.statebagid());
    }
    if (from.has_statebagtime()) {
      set_statebagtime(from.statebagtime());
    }
    if (from.has_delayedtime()) {
      set_delayedtime(from.delayedtime());
    }
    if (from.has_isforever()) {
      set_isforever(from.isforever());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_sendercid()) {
      set_sendercid(from.sendercid());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_eparam()) {
      mutable_eparam()->::proto_ff::MultEffectParamProto::MergeFrom(from.eparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffBagInfo::CopyFrom(const BuffBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffBagInfo::IsInitialized() const {

  return true;
}

void BuffBagInfo::Swap(BuffBagInfo* other) {
  if (other != this) {
    std::swap(buffbaginstid_, other->buffbaginstid_);
    std::swap(statebagid_, other->statebagid_);
    std::swap(statebagtime_, other->statebagtime_);
    std::swap(delayedtime_, other->delayedtime_);
    std::swap(isforever_, other->isforever_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(sendercid_, other->sendercid_);
    params_.Swap(&other->params_);
    std::swap(status_, other->status_);
    std::swap(targettype_, other->targettype_);
    std::swap(starttime_, other->starttime_);
    std::swap(eparam_, other->eparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffBagInfo_descriptor_;
  metadata.reflection = BuffBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterBuffData::kDelayedBagFieldNumber;
const int CharacterBuffData::kBuffbagLstFieldNumber;
#endif  // !_MSC_VER

CharacterBuffData::CharacterBuffData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterBuffData::InitAsDefaultInstance() {
}

CharacterBuffData::CharacterBuffData(const CharacterBuffData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterBuffData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterBuffData::~CharacterBuffData() {
  SharedDtor();
}

void CharacterBuffData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterBuffData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterBuffData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterBuffData_descriptor_;
}

const CharacterBuffData& CharacterBuffData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterBuffData* CharacterBuffData::default_instance_ = NULL;

CharacterBuffData* CharacterBuffData::New() const {
  return new CharacterBuffData;
}

void CharacterBuffData::Clear() {
  delayedbag_.Clear();
  buffbaglst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterBuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BuffBagInfo delayedBag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delayedBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delayedbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_delayedBag;
        if (input->ExpectTag(18)) goto parse_buffbagLst;
        break;
      }

      // repeated .proto_ff.BuffBagInfo buffbagLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffbagLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffbaglst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buffbagLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterBuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BuffBagInfo delayedBag = 1;
  for (int i = 0; i < this->delayedbag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->delayedbag(i), output);
  }

  // repeated .proto_ff.BuffBagInfo buffbagLst = 2;
  for (int i = 0; i < this->buffbaglst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buffbaglst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterBuffData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BuffBagInfo delayedBag = 1;
  for (int i = 0; i < this->delayedbag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->delayedbag(i), target);
  }

  // repeated .proto_ff.BuffBagInfo buffbagLst = 2;
  for (int i = 0; i < this->buffbaglst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buffbaglst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterBuffData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BuffBagInfo delayedBag = 1;
  total_size += 1 * this->delayedbag_size();
  for (int i = 0; i < this->delayedbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delayedbag(i));
  }

  // repeated .proto_ff.BuffBagInfo buffbagLst = 2;
  total_size += 1 * this->buffbaglst_size();
  for (int i = 0; i < this->buffbaglst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffbaglst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterBuffData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterBuffData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterBuffData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterBuffData::MergeFrom(const CharacterBuffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  delayedbag_.MergeFrom(from.delayedbag_);
  buffbaglst_.MergeFrom(from.buffbaglst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterBuffData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterBuffData::CopyFrom(const CharacterBuffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterBuffData::IsInitialized() const {

  return true;
}

void CharacterBuffData::Swap(CharacterBuffData* other) {
  if (other != this) {
    delayedbag_.Swap(&other->delayedbag_);
    buffbaglst_.Swap(&other->buffbaglst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterBuffData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterBuffData_descriptor_;
  metadata.reflection = CharacterBuffData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterArenaData::kChallengeTimesFieldNumber;
const int CharacterArenaData::kUpdateTimeFieldNumber;
const int CharacterArenaData::kHistoryRankIdFieldNumber;
const int CharacterArenaData::kBuyChallengeTimesFieldNumber;
#endif  // !_MSC_VER

CharacterArenaData::CharacterArenaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterArenaData::InitAsDefaultInstance() {
}

CharacterArenaData::CharacterArenaData(const CharacterArenaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterArenaData::SharedCtor() {
  _cached_size_ = 0;
  challengetimes_ = 0u;
  updatetime_ = GOOGLE_ULONGLONG(0);
  historyrankid_ = 5001u;
  buychallengetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterArenaData::~CharacterArenaData() {
  SharedDtor();
}

void CharacterArenaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterArenaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterArenaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterArenaData_descriptor_;
}

const CharacterArenaData& CharacterArenaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterArenaData* CharacterArenaData::default_instance_ = NULL;

CharacterArenaData* CharacterArenaData::New() const {
  return new CharacterArenaData;
}

void CharacterArenaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challengetimes_ = 0u;
    updatetime_ = GOOGLE_ULONGLONG(0);
    historyrankid_ = 5001u;
    buychallengetimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterArenaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 challengeTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengetimes_)));
          set_has_challengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_updateTime;
        break;
      }

      // optional uint64 updateTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_historyRankId;
        break;
      }

      // optional uint32 historyRankId = 3 [default = 5001];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyRankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historyrankid_)));
          set_has_historyrankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyChallengeTimes;
        break;
      }

      // optional uint32 buyChallengeTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyChallengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengetimes_)));
          set_has_buychallengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterArenaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 challengeTimes = 1;
  if (has_challengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challengetimes(), output);
  }

  // optional uint64 updateTime = 2;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->updatetime(), output);
  }

  // optional uint32 historyRankId = 3 [default = 5001];
  if (has_historyrankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->historyrankid(), output);
  }

  // optional uint32 buyChallengeTimes = 4;
  if (has_buychallengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buychallengetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterArenaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 challengeTimes = 1;
  if (has_challengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challengetimes(), target);
  }

  // optional uint64 updateTime = 2;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->updatetime(), target);
  }

  // optional uint32 historyRankId = 3 [default = 5001];
  if (has_historyrankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->historyrankid(), target);
  }

  // optional uint32 buyChallengeTimes = 4;
  if (has_buychallengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buychallengetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterArenaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 challengeTimes = 1;
    if (has_challengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengetimes());
    }

    // optional uint64 updateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

    // optional uint32 historyRankId = 3 [default = 5001];
    if (has_historyrankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->historyrankid());
    }

    // optional uint32 buyChallengeTimes = 4;
    if (has_buychallengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterArenaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterArenaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterArenaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterArenaData::MergeFrom(const CharacterArenaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengetimes()) {
      set_challengetimes(from.challengetimes());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_historyrankid()) {
      set_historyrankid(from.historyrankid());
    }
    if (from.has_buychallengetimes()) {
      set_buychallengetimes(from.buychallengetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterArenaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterArenaData::CopyFrom(const CharacterArenaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterArenaData::IsInitialized() const {

  return true;
}

void CharacterArenaData::Swap(CharacterArenaData* other) {
  if (other != this) {
    std::swap(challengetimes_, other->challengetimes_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(historyrankid_, other->historyrankid_);
    std::swap(buychallengetimes_, other->buychallengetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterArenaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterArenaData_descriptor_;
  metadata.reflection = CharacterArenaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterTitleInfo::kIdFieldNumber;
const int CharacterTitleInfo::kParamFieldNumber;
const int CharacterTitleInfo::kStartTimeFieldNumber;
const int CharacterTitleInfo::kNameFieldNumber;
#endif  // !_MSC_VER

CharacterTitleInfo::CharacterTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterTitleInfo::InitAsDefaultInstance() {
}

CharacterTitleInfo::CharacterTitleInfo(const CharacterTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterTitleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  param_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterTitleInfo::~CharacterTitleInfo() {
  SharedDtor();
}

void CharacterTitleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CharacterTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterTitleInfo_descriptor_;
}

const CharacterTitleInfo& CharacterTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterTitleInfo* CharacterTitleInfo::default_instance_ = NULL;

CharacterTitleInfo* CharacterTitleInfo::New() const {
  return new CharacterTitleInfo;
}

void CharacterTitleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    param_ = 0u;
    starttime_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint32 param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  // optional uint64 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->starttime(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  // optional uint64 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->starttime(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterTitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

    // optional uint64 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterTitleInfo::MergeFrom(const CharacterTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterTitleInfo::CopyFrom(const CharacterTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterTitleInfo::IsInitialized() const {

  return true;
}

void CharacterTitleInfo::Swap(CharacterTitleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(param_, other->param_);
    std::swap(starttime_, other->starttime_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterTitleInfo_descriptor_;
  metadata.reflection = CharacterTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterTitleSaveData::kTitelDataFieldNumber;
#endif  // !_MSC_VER

CharacterTitleSaveData::CharacterTitleSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterTitleSaveData::InitAsDefaultInstance() {
}

CharacterTitleSaveData::CharacterTitleSaveData(const CharacterTitleSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterTitleSaveData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterTitleSaveData::~CharacterTitleSaveData() {
  SharedDtor();
}

void CharacterTitleSaveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterTitleSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterTitleSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterTitleSaveData_descriptor_;
}

const CharacterTitleSaveData& CharacterTitleSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterTitleSaveData* CharacterTitleSaveData::default_instance_ = NULL;

CharacterTitleSaveData* CharacterTitleSaveData::New() const {
  return new CharacterTitleSaveData;
}

void CharacterTitleSaveData::Clear() {
  titeldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterTitleSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterTitleInfo titelData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titelData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titeldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_titelData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterTitleSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterTitleInfo titelData = 1;
  for (int i = 0; i < this->titeldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->titeldata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterTitleSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterTitleInfo titelData = 1;
  for (int i = 0; i < this->titeldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->titeldata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterTitleSaveData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharacterTitleInfo titelData = 1;
  total_size += 1 * this->titeldata_size();
  for (int i = 0; i < this->titeldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titeldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterTitleSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterTitleSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterTitleSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterTitleSaveData::MergeFrom(const CharacterTitleSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  titeldata_.MergeFrom(from.titeldata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterTitleSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterTitleSaveData::CopyFrom(const CharacterTitleSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterTitleSaveData::IsInitialized() const {

  return true;
}

void CharacterTitleSaveData::Swap(CharacterTitleSaveData* other) {
  if (other != this) {
    titeldata_.Swap(&other->titeldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterTitleSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterTitleSaveData_descriptor_;
  metadata.reflection = CharacterTitleSaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSingleOperateLimitInfo::kTypeFieldNumber;
const int CharacterDBSingleOperateLimitInfo::kValueFieldNumber;
const int CharacterDBSingleOperateLimitInfo::kLastTimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBSingleOperateLimitInfo::CharacterDBSingleOperateLimitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSingleOperateLimitInfo::InitAsDefaultInstance() {
}

CharacterDBSingleOperateLimitInfo::CharacterDBSingleOperateLimitInfo(const CharacterDBSingleOperateLimitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSingleOperateLimitInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  lasttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSingleOperateLimitInfo::~CharacterDBSingleOperateLimitInfo() {
  SharedDtor();
}

void CharacterDBSingleOperateLimitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSingleOperateLimitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSingleOperateLimitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSingleOperateLimitInfo_descriptor_;
}

const CharacterDBSingleOperateLimitInfo& CharacterDBSingleOperateLimitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBSingleOperateLimitInfo* CharacterDBSingleOperateLimitInfo::default_instance_ = NULL;

CharacterDBSingleOperateLimitInfo* CharacterDBSingleOperateLimitInfo::New() const {
  return new CharacterDBSingleOperateLimitInfo;
}

void CharacterDBSingleOperateLimitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
    lasttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSingleOperateLimitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastTime;
        break;
      }

      // optional uint32 lastTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSingleOperateLimitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 lastTime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSingleOperateLimitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 lastTime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSingleOperateLimitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 lastTime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSingleOperateLimitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSingleOperateLimitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSingleOperateLimitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSingleOperateLimitInfo::MergeFrom(const CharacterDBSingleOperateLimitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSingleOperateLimitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSingleOperateLimitInfo::CopyFrom(const CharacterDBSingleOperateLimitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSingleOperateLimitInfo::IsInitialized() const {

  return true;
}

void CharacterDBSingleOperateLimitInfo::Swap(CharacterDBSingleOperateLimitInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSingleOperateLimitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSingleOperateLimitInfo_descriptor_;
  metadata.reflection = CharacterDBSingleOperateLimitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBOperateProto::kIdFieldNumber;
const int CharacterDBOperateProto::kNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBOperateProto::CharacterDBOperateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBOperateProto::InitAsDefaultInstance() {
}

CharacterDBOperateProto::CharacterDBOperateProto(const CharacterDBOperateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBOperateProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBOperateProto::~CharacterDBOperateProto() {
  SharedDtor();
}

void CharacterDBOperateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBOperateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBOperateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBOperateProto_descriptor_;
}

const CharacterDBOperateProto& CharacterDBOperateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBOperateProto* CharacterDBOperateProto::default_instance_ = NULL;

CharacterDBOperateProto* CharacterDBOperateProto::New() const {
  return new CharacterDBOperateProto;
}

void CharacterDBOperateProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBOperateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBOperateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBOperateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBOperateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBOperateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBOperateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBOperateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBOperateProto::MergeFrom(const CharacterDBOperateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBOperateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBOperateProto::CopyFrom(const CharacterDBOperateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBOperateProto::IsInitialized() const {

  return true;
}

void CharacterDBOperateProto::Swap(CharacterDBOperateProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBOperateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBOperateProto_descriptor_;
  metadata.reflection = CharacterDBOperateProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBOperateMutProto::kOperateLstFieldNumber;
#endif  // !_MSC_VER

CharacterDBOperateMutProto::CharacterDBOperateMutProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBOperateMutProto::InitAsDefaultInstance() {
}

CharacterDBOperateMutProto::CharacterDBOperateMutProto(const CharacterDBOperateMutProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBOperateMutProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBOperateMutProto::~CharacterDBOperateMutProto() {
  SharedDtor();
}

void CharacterDBOperateMutProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBOperateMutProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBOperateMutProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBOperateMutProto_descriptor_;
}

const CharacterDBOperateMutProto& CharacterDBOperateMutProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBOperateMutProto* CharacterDBOperateMutProto::default_instance_ = NULL;

CharacterDBOperateMutProto* CharacterDBOperateMutProto::New() const {
  return new CharacterDBOperateMutProto;
}

void CharacterDBOperateMutProto::Clear() {
  operate_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBOperateMutProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBOperateProto operate_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operate_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operate_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operate_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBOperateMutProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBOperateProto operate_lst = 1;
  for (int i = 0; i < this->operate_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operate_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBOperateMutProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBOperateProto operate_lst = 1;
  for (int i = 0; i < this->operate_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operate_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBOperateMutProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharacterDBOperateProto operate_lst = 1;
  total_size += 1 * this->operate_lst_size();
  for (int i = 0; i < this->operate_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operate_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBOperateMutProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBOperateMutProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBOperateMutProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBOperateMutProto::MergeFrom(const CharacterDBOperateMutProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  operate_lst_.MergeFrom(from.operate_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBOperateMutProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBOperateMutProto::CopyFrom(const CharacterDBOperateMutProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBOperateMutProto::IsInitialized() const {

  return true;
}

void CharacterDBOperateMutProto::Swap(CharacterDBOperateMutProto* other) {
  if (other != this) {
    operate_lst_.Swap(&other->operate_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBOperateMutProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBOperateMutProto_descriptor_;
  metadata.reflection = CharacterDBOperateMutProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBOperateInfo::kKillMonsFieldNumber;
const int CharacterDBOperateInfo::kLastKillMonsFieldNumber;
const int CharacterDBOperateInfo::kAttendActFieldNumber;
const int CharacterDBOperateInfo::kLastAttendActFieldNumber;
const int CharacterDBOperateInfo::kFinishActFieldNumber;
const int CharacterDBOperateInfo::kPassDupFieldNumber;
const int CharacterDBOperateInfo::kCollActionFieldNumber;
const int CharacterDBOperateInfo::kMakeActionFieldNumber;
const int CharacterDBOperateInfo::kCollectFieldNumber;
const int CharacterDBOperateInfo::kMakeFieldNumber;
const int CharacterDBOperateInfo::kMakeGoldQuipFieldNumber;
const int CharacterDBOperateInfo::kIdentifyFieldNumber;
const int CharacterDBOperateInfo::kArenaSuccessFieldNumber;
const int CharacterDBOperateInfo::kDieFieldNumber;
const int CharacterDBOperateInfo::kKillEnemyFieldNumber;
const int CharacterDBOperateInfo::kKillEnemyCampFieldNumber;
const int CharacterDBOperateInfo::kChargeFieldNumber;
const int CharacterDBOperateInfo::kGoldFieldNumber;
const int CharacterDBOperateInfo::kTreasureFieldNumber;
const int CharacterDBOperateInfo::kPandosTransFieldNumber;
const int CharacterDBOperateInfo::kWorldChatFieldNumber;
const int CharacterDBOperateInfo::kRefineSuccessFieldNumber;
const int CharacterDBOperateInfo::kRefineFailFieldNumber;
#endif  // !_MSC_VER

CharacterDBOperateInfo::CharacterDBOperateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBOperateInfo::InitAsDefaultInstance() {
  kill_mons_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  last_kill_mons_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  attend_act_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  last_attend_act_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  finish_act_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  pass_dup_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  coll_action_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  make_action_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  collect_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
  make_ = const_cast< ::proto_ff::CharacterDBOperateMutProto*>(&::proto_ff::CharacterDBOperateMutProto::default_instance());
}

CharacterDBOperateInfo::CharacterDBOperateInfo(const CharacterDBOperateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBOperateInfo::SharedCtor() {
  _cached_size_ = 0;
  kill_mons_ = NULL;
  last_kill_mons_ = NULL;
  attend_act_ = NULL;
  last_attend_act_ = NULL;
  finish_act_ = NULL;
  pass_dup_ = NULL;
  coll_action_ = NULL;
  make_action_ = NULL;
  collect_ = NULL;
  make_ = NULL;
  make_gold_quip_ = GOOGLE_ULONGLONG(0);
  identify_ = GOOGLE_ULONGLONG(0);
  arena_success_ = GOOGLE_ULONGLONG(0);
  die_ = GOOGLE_ULONGLONG(0);
  kill_enemy_ = GOOGLE_ULONGLONG(0);
  kill_enemy_camp_ = GOOGLE_ULONGLONG(0);
  charge_ = GOOGLE_ULONGLONG(0);
  gold_ = GOOGLE_ULONGLONG(0);
  treasure_ = GOOGLE_ULONGLONG(0);
  pandos_trans_ = GOOGLE_ULONGLONG(0);
  world_chat_ = GOOGLE_ULONGLONG(0);
  refine_success_ = GOOGLE_ULONGLONG(0);
  refine_fail_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBOperateInfo::~CharacterDBOperateInfo() {
  SharedDtor();
}

void CharacterDBOperateInfo::SharedDtor() {
  if (this != default_instance_) {
    delete kill_mons_;
    delete last_kill_mons_;
    delete attend_act_;
    delete last_attend_act_;
    delete finish_act_;
    delete pass_dup_;
    delete coll_action_;
    delete make_action_;
    delete collect_;
    delete make_;
  }
}

void CharacterDBOperateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBOperateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBOperateInfo_descriptor_;
}

const CharacterDBOperateInfo& CharacterDBOperateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBOperateInfo* CharacterDBOperateInfo::default_instance_ = NULL;

CharacterDBOperateInfo* CharacterDBOperateInfo::New() const {
  return new CharacterDBOperateInfo;
}

void CharacterDBOperateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_kill_mons()) {
      if (kill_mons_ != NULL) kill_mons_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    if (has_last_kill_mons()) {
      if (last_kill_mons_ != NULL) last_kill_mons_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    if (has_attend_act()) {
      if (attend_act_ != NULL) attend_act_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    if (has_last_attend_act()) {
      if (last_attend_act_ != NULL) last_attend_act_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    if (has_finish_act()) {
      if (finish_act_ != NULL) finish_act_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    if (has_pass_dup()) {
      if (pass_dup_ != NULL) pass_dup_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    if (has_coll_action()) {
      if (coll_action_ != NULL) coll_action_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    if (has_make_action()) {
      if (make_action_ != NULL) make_action_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_collect()) {
      if (collect_ != NULL) collect_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    if (has_make()) {
      if (make_ != NULL) make_->::proto_ff::CharacterDBOperateMutProto::Clear();
    }
    make_gold_quip_ = GOOGLE_ULONGLONG(0);
    identify_ = GOOGLE_ULONGLONG(0);
    arena_success_ = GOOGLE_ULONGLONG(0);
    die_ = GOOGLE_ULONGLONG(0);
    kill_enemy_ = GOOGLE_ULONGLONG(0);
    kill_enemy_camp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    charge_ = GOOGLE_ULONGLONG(0);
    gold_ = GOOGLE_ULONGLONG(0);
    treasure_ = GOOGLE_ULONGLONG(0);
    pandos_trans_ = GOOGLE_ULONGLONG(0);
    world_chat_ = GOOGLE_ULONGLONG(0);
    refine_success_ = GOOGLE_ULONGLONG(0);
    refine_fail_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBOperateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CharacterDBOperateMutProto kill_mons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kill_mons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_kill_mons;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto last_kill_mons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_kill_mons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_kill_mons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attend_act;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto attend_act = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attend_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attend_act()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_last_attend_act;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto last_attend_act = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_attend_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_attend_act()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_finish_act;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto finish_act = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finish_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_act()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pass_dup;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto pass_dup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass_dup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pass_dup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_coll_action;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto coll_action = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coll_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coll_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_make_action;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto make_action = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_make_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_collect;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto collect = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_make;
        break;
      }

      // optional .proto_ff.CharacterDBOperateMutProto make = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_make:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_make_gold_quip;
        break;
      }

      // optional uint64 make_gold_quip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_make_gold_quip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &make_gold_quip_)));
          set_has_make_gold_quip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_identify;
        break;
      }

      // optional uint64 identify = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &identify_)));
          set_has_identify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_arena_success;
        break;
      }

      // optional uint64 arena_success = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arena_success_)));
          set_has_arena_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_die;
        break;
      }

      // optional uint64 die = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &die_)));
          set_has_die();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_kill_enemy;
        break;
      }

      // optional uint64 kill_enemy = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_enemy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kill_enemy_)));
          set_has_kill_enemy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_kill_enemy_camp;
        break;
      }

      // optional uint64 kill_enemy_camp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_enemy_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kill_enemy_camp_)));
          set_has_kill_enemy_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_charge;
        break;
      }

      // optional uint64 charge = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_treasure;
        break;
      }

      // optional uint64 treasure = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &treasure_)));
          set_has_treasure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_pandos_trans;
        break;
      }

      // optional uint64 pandos_trans = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pandos_trans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pandos_trans_)));
          set_has_pandos_trans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_world_chat;
        break;
      }

      // optional uint64 world_chat = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_chat_)));
          set_has_world_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_refine_success;
        break;
      }

      // optional uint64 refine_success = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refine_success_)));
          set_has_refine_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_refine_fail;
        break;
      }

      // optional uint64 refine_fail = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_fail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refine_fail_)));
          set_has_refine_fail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBOperateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CharacterDBOperateMutProto kill_mons = 1;
  if (has_kill_mons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kill_mons(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto last_kill_mons = 2;
  if (has_last_kill_mons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->last_kill_mons(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto attend_act = 3;
  if (has_attend_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attend_act(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto last_attend_act = 4;
  if (has_last_attend_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->last_attend_act(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto finish_act = 5;
  if (has_finish_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->finish_act(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto pass_dup = 6;
  if (has_pass_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pass_dup(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto coll_action = 7;
  if (has_coll_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->coll_action(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto make_action = 8;
  if (has_make_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->make_action(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto collect = 9;
  if (has_collect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->collect(), output);
  }

  // optional .proto_ff.CharacterDBOperateMutProto make = 10;
  if (has_make()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->make(), output);
  }

  // optional uint64 make_gold_quip = 11;
  if (has_make_gold_quip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->make_gold_quip(), output);
  }

  // optional uint64 identify = 12;
  if (has_identify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->identify(), output);
  }

  // optional uint64 arena_success = 13;
  if (has_arena_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->arena_success(), output);
  }

  // optional uint64 die = 14;
  if (has_die()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->die(), output);
  }

  // optional uint64 kill_enemy = 15;
  if (has_kill_enemy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->kill_enemy(), output);
  }

  // optional uint64 kill_enemy_camp = 16;
  if (has_kill_enemy_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->kill_enemy_camp(), output);
  }

  // optional uint64 charge = 17;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->charge(), output);
  }

  // optional uint64 gold = 18;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->gold(), output);
  }

  // optional uint64 treasure = 19;
  if (has_treasure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->treasure(), output);
  }

  // optional uint64 pandos_trans = 20;
  if (has_pandos_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->pandos_trans(), output);
  }

  // optional uint64 world_chat = 21;
  if (has_world_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->world_chat(), output);
  }

  // optional uint64 refine_success = 22;
  if (has_refine_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->refine_success(), output);
  }

  // optional uint64 refine_fail = 23;
  if (has_refine_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->refine_fail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBOperateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CharacterDBOperateMutProto kill_mons = 1;
  if (has_kill_mons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kill_mons(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto last_kill_mons = 2;
  if (has_last_kill_mons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->last_kill_mons(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto attend_act = 3;
  if (has_attend_act()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attend_act(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto last_attend_act = 4;
  if (has_last_attend_act()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->last_attend_act(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto finish_act = 5;
  if (has_finish_act()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->finish_act(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto pass_dup = 6;
  if (has_pass_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pass_dup(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto coll_action = 7;
  if (has_coll_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->coll_action(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto make_action = 8;
  if (has_make_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->make_action(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto collect = 9;
  if (has_collect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->collect(), target);
  }

  // optional .proto_ff.CharacterDBOperateMutProto make = 10;
  if (has_make()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->make(), target);
  }

  // optional uint64 make_gold_quip = 11;
  if (has_make_gold_quip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->make_gold_quip(), target);
  }

  // optional uint64 identify = 12;
  if (has_identify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->identify(), target);
  }

  // optional uint64 arena_success = 13;
  if (has_arena_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->arena_success(), target);
  }

  // optional uint64 die = 14;
  if (has_die()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->die(), target);
  }

  // optional uint64 kill_enemy = 15;
  if (has_kill_enemy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->kill_enemy(), target);
  }

  // optional uint64 kill_enemy_camp = 16;
  if (has_kill_enemy_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->kill_enemy_camp(), target);
  }

  // optional uint64 charge = 17;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->charge(), target);
  }

  // optional uint64 gold = 18;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->gold(), target);
  }

  // optional uint64 treasure = 19;
  if (has_treasure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->treasure(), target);
  }

  // optional uint64 pandos_trans = 20;
  if (has_pandos_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->pandos_trans(), target);
  }

  // optional uint64 world_chat = 21;
  if (has_world_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->world_chat(), target);
  }

  // optional uint64 refine_success = 22;
  if (has_refine_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->refine_success(), target);
  }

  // optional uint64 refine_fail = 23;
  if (has_refine_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->refine_fail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBOperateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CharacterDBOperateMutProto kill_mons = 1;
    if (has_kill_mons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kill_mons());
    }

    // optional .proto_ff.CharacterDBOperateMutProto last_kill_mons = 2;
    if (has_last_kill_mons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_kill_mons());
    }

    // optional .proto_ff.CharacterDBOperateMutProto attend_act = 3;
    if (has_attend_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attend_act());
    }

    // optional .proto_ff.CharacterDBOperateMutProto last_attend_act = 4;
    if (has_last_attend_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_attend_act());
    }

    // optional .proto_ff.CharacterDBOperateMutProto finish_act = 5;
    if (has_finish_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_act());
    }

    // optional .proto_ff.CharacterDBOperateMutProto pass_dup = 6;
    if (has_pass_dup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pass_dup());
    }

    // optional .proto_ff.CharacterDBOperateMutProto coll_action = 7;
    if (has_coll_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coll_action());
    }

    // optional .proto_ff.CharacterDBOperateMutProto make_action = 8;
    if (has_make_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make_action());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.CharacterDBOperateMutProto collect = 9;
    if (has_collect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collect());
    }

    // optional .proto_ff.CharacterDBOperateMutProto make = 10;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make());
    }

    // optional uint64 make_gold_quip = 11;
    if (has_make_gold_quip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->make_gold_quip());
    }

    // optional uint64 identify = 12;
    if (has_identify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->identify());
    }

    // optional uint64 arena_success = 13;
    if (has_arena_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arena_success());
    }

    // optional uint64 die = 14;
    if (has_die()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->die());
    }

    // optional uint64 kill_enemy = 15;
    if (has_kill_enemy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kill_enemy());
    }

    // optional uint64 kill_enemy_camp = 16;
    if (has_kill_enemy_camp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kill_enemy_camp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 charge = 17;
    if (has_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charge());
    }

    // optional uint64 gold = 18;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 treasure = 19;
    if (has_treasure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->treasure());
    }

    // optional uint64 pandos_trans = 20;
    if (has_pandos_trans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pandos_trans());
    }

    // optional uint64 world_chat = 21;
    if (has_world_chat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->world_chat());
    }

    // optional uint64 refine_success = 22;
    if (has_refine_success()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refine_success());
    }

    // optional uint64 refine_fail = 23;
    if (has_refine_fail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refine_fail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBOperateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBOperateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBOperateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBOperateInfo::MergeFrom(const CharacterDBOperateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kill_mons()) {
      mutable_kill_mons()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.kill_mons());
    }
    if (from.has_last_kill_mons()) {
      mutable_last_kill_mons()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.last_kill_mons());
    }
    if (from.has_attend_act()) {
      mutable_attend_act()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.attend_act());
    }
    if (from.has_last_attend_act()) {
      mutable_last_attend_act()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.last_attend_act());
    }
    if (from.has_finish_act()) {
      mutable_finish_act()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.finish_act());
    }
    if (from.has_pass_dup()) {
      mutable_pass_dup()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.pass_dup());
    }
    if (from.has_coll_action()) {
      mutable_coll_action()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.coll_action());
    }
    if (from.has_make_action()) {
      mutable_make_action()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.make_action());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_collect()) {
      mutable_collect()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.collect());
    }
    if (from.has_make()) {
      mutable_make()->::proto_ff::CharacterDBOperateMutProto::MergeFrom(from.make());
    }
    if (from.has_make_gold_quip()) {
      set_make_gold_quip(from.make_gold_quip());
    }
    if (from.has_identify()) {
      set_identify(from.identify());
    }
    if (from.has_arena_success()) {
      set_arena_success(from.arena_success());
    }
    if (from.has_die()) {
      set_die(from.die());
    }
    if (from.has_kill_enemy()) {
      set_kill_enemy(from.kill_enemy());
    }
    if (from.has_kill_enemy_camp()) {
      set_kill_enemy_camp(from.kill_enemy_camp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_treasure()) {
      set_treasure(from.treasure());
    }
    if (from.has_pandos_trans()) {
      set_pandos_trans(from.pandos_trans());
    }
    if (from.has_world_chat()) {
      set_world_chat(from.world_chat());
    }
    if (from.has_refine_success()) {
      set_refine_success(from.refine_success());
    }
    if (from.has_refine_fail()) {
      set_refine_fail(from.refine_fail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBOperateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBOperateInfo::CopyFrom(const CharacterDBOperateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBOperateInfo::IsInitialized() const {

  return true;
}

void CharacterDBOperateInfo::Swap(CharacterDBOperateInfo* other) {
  if (other != this) {
    std::swap(kill_mons_, other->kill_mons_);
    std::swap(last_kill_mons_, other->last_kill_mons_);
    std::swap(attend_act_, other->attend_act_);
    std::swap(last_attend_act_, other->last_attend_act_);
    std::swap(finish_act_, other->finish_act_);
    std::swap(pass_dup_, other->pass_dup_);
    std::swap(coll_action_, other->coll_action_);
    std::swap(make_action_, other->make_action_);
    std::swap(collect_, other->collect_);
    std::swap(make_, other->make_);
    std::swap(make_gold_quip_, other->make_gold_quip_);
    std::swap(identify_, other->identify_);
    std::swap(arena_success_, other->arena_success_);
    std::swap(die_, other->die_);
    std::swap(kill_enemy_, other->kill_enemy_);
    std::swap(kill_enemy_camp_, other->kill_enemy_camp_);
    std::swap(charge_, other->charge_);
    std::swap(gold_, other->gold_);
    std::swap(treasure_, other->treasure_);
    std::swap(pandos_trans_, other->pandos_trans_);
    std::swap(world_chat_, other->world_chat_);
    std::swap(refine_success_, other->refine_success_);
    std::swap(refine_fail_, other->refine_fail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBOperateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBOperateInfo_descriptor_;
  metadata.reflection = CharacterDBOperateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBOperateLimitInfo::kOperateLimitInfoFieldNumber;
const int CharacterDBOperateLimitInfo::kOperateDataFieldNumber;
#endif  // !_MSC_VER

CharacterDBOperateLimitInfo::CharacterDBOperateLimitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBOperateLimitInfo::InitAsDefaultInstance() {
  operate_data_ = const_cast< ::proto_ff::CharacterDBOperateInfo*>(&::proto_ff::CharacterDBOperateInfo::default_instance());
}

CharacterDBOperateLimitInfo::CharacterDBOperateLimitInfo(const CharacterDBOperateLimitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBOperateLimitInfo::SharedCtor() {
  _cached_size_ = 0;
  operate_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBOperateLimitInfo::~CharacterDBOperateLimitInfo() {
  SharedDtor();
}

void CharacterDBOperateLimitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete operate_data_;
  }
}

void CharacterDBOperateLimitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBOperateLimitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBOperateLimitInfo_descriptor_;
}

const CharacterDBOperateLimitInfo& CharacterDBOperateLimitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBOperateLimitInfo* CharacterDBOperateLimitInfo::default_instance_ = NULL;

CharacterDBOperateLimitInfo* CharacterDBOperateLimitInfo::New() const {
  return new CharacterDBOperateLimitInfo;
}

void CharacterDBOperateLimitInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_operate_data()) {
      if (operate_data_ != NULL) operate_data_->::proto_ff::CharacterDBOperateInfo::Clear();
    }
  }
  operatelimitinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBOperateLimitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBSingleOperateLimitInfo operateLimitInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateLimitInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatelimitinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operateLimitInfo;
        if (input->ExpectTag(18)) goto parse_operate_data;
        break;
      }

      // optional .proto_ff.CharacterDBOperateInfo operate_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operate_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operate_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBOperateLimitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBSingleOperateLimitInfo operateLimitInfo = 1;
  for (int i = 0; i < this->operatelimitinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatelimitinfo(i), output);
  }

  // optional .proto_ff.CharacterDBOperateInfo operate_data = 2;
  if (has_operate_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operate_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBOperateLimitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBSingleOperateLimitInfo operateLimitInfo = 1;
  for (int i = 0; i < this->operatelimitinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatelimitinfo(i), target);
  }

  // optional .proto_ff.CharacterDBOperateInfo operate_data = 2;
  if (has_operate_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->operate_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBOperateLimitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto_ff.CharacterDBOperateInfo operate_data = 2;
    if (has_operate_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operate_data());
    }

  }
  // repeated .proto_ff.CharacterDBSingleOperateLimitInfo operateLimitInfo = 1;
  total_size += 1 * this->operatelimitinfo_size();
  for (int i = 0; i < this->operatelimitinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatelimitinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBOperateLimitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBOperateLimitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBOperateLimitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBOperateLimitInfo::MergeFrom(const CharacterDBOperateLimitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatelimitinfo_.MergeFrom(from.operatelimitinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_operate_data()) {
      mutable_operate_data()->::proto_ff::CharacterDBOperateInfo::MergeFrom(from.operate_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBOperateLimitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBOperateLimitInfo::CopyFrom(const CharacterDBOperateLimitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBOperateLimitInfo::IsInitialized() const {

  return true;
}

void CharacterDBOperateLimitInfo::Swap(CharacterDBOperateLimitInfo* other) {
  if (other != this) {
    operatelimitinfo_.Swap(&other->operatelimitinfo_);
    std::swap(operate_data_, other->operate_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBOperateLimitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBOperateLimitInfo_descriptor_;
  metadata.reflection = CharacterDBOperateLimitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSingleHuoYueDuInfoInfo::kTypeFieldNumber;
const int CharacterDBSingleHuoYueDuInfoInfo::kValueFieldNumber;
const int CharacterDBSingleHuoYueDuInfoInfo::kTimeFieldNumber;
const int CharacterDBSingleHuoYueDuInfoInfo::kSinProcessFieldNumber;
#endif  // !_MSC_VER

CharacterDBSingleHuoYueDuInfoInfo::CharacterDBSingleHuoYueDuInfoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSingleHuoYueDuInfoInfo::InitAsDefaultInstance() {
}

CharacterDBSingleHuoYueDuInfoInfo::CharacterDBSingleHuoYueDuInfoInfo(const CharacterDBSingleHuoYueDuInfoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSingleHuoYueDuInfoInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  time_ = 0u;
  sin_process_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSingleHuoYueDuInfoInfo::~CharacterDBSingleHuoYueDuInfoInfo() {
  SharedDtor();
}

void CharacterDBSingleHuoYueDuInfoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSingleHuoYueDuInfoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSingleHuoYueDuInfoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSingleHuoYueDuInfoInfo_descriptor_;
}

const CharacterDBSingleHuoYueDuInfoInfo& CharacterDBSingleHuoYueDuInfoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBSingleHuoYueDuInfoInfo* CharacterDBSingleHuoYueDuInfoInfo::default_instance_ = NULL;

CharacterDBSingleHuoYueDuInfoInfo* CharacterDBSingleHuoYueDuInfoInfo::New() const {
  return new CharacterDBSingleHuoYueDuInfoInfo;
}

void CharacterDBSingleHuoYueDuInfoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
    time_ = 0u;
    sin_process_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSingleHuoYueDuInfoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sin_process;
        break;
      }

      // optional uint32 sin_process = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sin_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sin_process_)));
          set_has_sin_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSingleHuoYueDuInfoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 sin_process = 4;
  if (has_sin_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sin_process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSingleHuoYueDuInfoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 sin_process = 4;
  if (has_sin_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sin_process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSingleHuoYueDuInfoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 sin_process = 4;
    if (has_sin_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sin_process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSingleHuoYueDuInfoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSingleHuoYueDuInfoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSingleHuoYueDuInfoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSingleHuoYueDuInfoInfo::MergeFrom(const CharacterDBSingleHuoYueDuInfoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sin_process()) {
      set_sin_process(from.sin_process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSingleHuoYueDuInfoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSingleHuoYueDuInfoInfo::CopyFrom(const CharacterDBSingleHuoYueDuInfoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSingleHuoYueDuInfoInfo::IsInitialized() const {

  return true;
}

void CharacterDBSingleHuoYueDuInfoInfo::Swap(CharacterDBSingleHuoYueDuInfoInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(sin_process_, other->sin_process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSingleHuoYueDuInfoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSingleHuoYueDuInfoInfo_descriptor_;
  metadata.reflection = CharacterDBSingleHuoYueDuInfoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBHuoYueDuInfo::kHuoYueDuInfoFieldNumber;
#endif  // !_MSC_VER

CharacterDBHuoYueDuInfo::CharacterDBHuoYueDuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBHuoYueDuInfo::InitAsDefaultInstance() {
}

CharacterDBHuoYueDuInfo::CharacterDBHuoYueDuInfo(const CharacterDBHuoYueDuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBHuoYueDuInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBHuoYueDuInfo::~CharacterDBHuoYueDuInfo() {
  SharedDtor();
}

void CharacterDBHuoYueDuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBHuoYueDuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBHuoYueDuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBHuoYueDuInfo_descriptor_;
}

const CharacterDBHuoYueDuInfo& CharacterDBHuoYueDuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBHuoYueDuInfo* CharacterDBHuoYueDuInfo::default_instance_ = NULL;

CharacterDBHuoYueDuInfo* CharacterDBHuoYueDuInfo::New() const {
  return new CharacterDBHuoYueDuInfo;
}

void CharacterDBHuoYueDuInfo::Clear() {
  huoyueduinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBHuoYueDuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBSingleHuoYueDuInfoInfo huoYueDuInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_huoYueDuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huoyueduinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_huoYueDuInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBHuoYueDuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBSingleHuoYueDuInfoInfo huoYueDuInfo = 1;
  for (int i = 0; i < this->huoyueduinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->huoyueduinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBHuoYueDuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBSingleHuoYueDuInfoInfo huoYueDuInfo = 1;
  for (int i = 0; i < this->huoyueduinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->huoyueduinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBHuoYueDuInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharacterDBSingleHuoYueDuInfoInfo huoYueDuInfo = 1;
  total_size += 1 * this->huoyueduinfo_size();
  for (int i = 0; i < this->huoyueduinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huoyueduinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBHuoYueDuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBHuoYueDuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBHuoYueDuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBHuoYueDuInfo::MergeFrom(const CharacterDBHuoYueDuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huoyueduinfo_.MergeFrom(from.huoyueduinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBHuoYueDuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBHuoYueDuInfo::CopyFrom(const CharacterDBHuoYueDuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBHuoYueDuInfo::IsInitialized() const {

  return true;
}

void CharacterDBHuoYueDuInfo::Swap(CharacterDBHuoYueDuInfo* other) {
  if (other != this) {
    huoyueduinfo_.Swap(&other->huoyueduinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBHuoYueDuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBHuoYueDuInfo_descriptor_;
  metadata.reflection = CharacterDBHuoYueDuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndultTaskEntry::kTaskCfgIdFieldNumber;
const int IndultTaskEntry::kCurNumFieldNumber;
const int IndultTaskEntry::kTaskStateFieldNumber;
#endif  // !_MSC_VER

IndultTaskEntry::IndultTaskEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndultTaskEntry::InitAsDefaultInstance() {
}

IndultTaskEntry::IndultTaskEntry(const IndultTaskEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndultTaskEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndultTaskEntry::~IndultTaskEntry() {
  SharedDtor();
}

void IndultTaskEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndultTaskEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndultTaskEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndultTaskEntry_descriptor_;
}

const IndultTaskEntry& IndultTaskEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

IndultTaskEntry* IndultTaskEntry::default_instance_ = NULL;

IndultTaskEntry* IndultTaskEntry::New() const {
  return new IndultTaskEntry;
}

void IndultTaskEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndultTaskEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IndultTaskEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndultTaskEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndultTaskEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndultTaskEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndultTaskEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndultTaskEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndultTaskEntry::MergeFrom(const IndultTaskEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndultTaskEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndultTaskEntry::CopyFrom(const IndultTaskEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndultTaskEntry::IsInitialized() const {

  return true;
}

void IndultTaskEntry::Swap(IndultTaskEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndultTaskEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndultTaskEntry_descriptor_;
  metadata.reflection = IndultTaskEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndultTaskGroupEntry::kGroupCfgIdFieldNumber;
const int IndultTaskGroupEntry::kEntrysFieldNumber;
const int IndultTaskGroupEntry::kNormalRewardStateFieldNumber;
#endif  // !_MSC_VER

IndultTaskGroupEntry::IndultTaskGroupEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndultTaskGroupEntry::InitAsDefaultInstance() {
}

IndultTaskGroupEntry::IndultTaskGroupEntry(const IndultTaskGroupEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndultTaskGroupEntry::SharedCtor() {
  _cached_size_ = 0;
  group_cfg_id_ = GOOGLE_ULONGLONG(0);
  normal_reward_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndultTaskGroupEntry::~IndultTaskGroupEntry() {
  SharedDtor();
}

void IndultTaskGroupEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndultTaskGroupEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndultTaskGroupEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndultTaskGroupEntry_descriptor_;
}

const IndultTaskGroupEntry& IndultTaskGroupEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

IndultTaskGroupEntry* IndultTaskGroupEntry::default_instance_ = NULL;

IndultTaskGroupEntry* IndultTaskGroupEntry::New() const {
  return new IndultTaskGroupEntry;
}

void IndultTaskGroupEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_cfg_id_ = GOOGLE_ULONGLONG(0);
    normal_reward_state_ = 0;
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndultTaskGroupEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_cfg_id_)));
          set_has_group_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.IndultTaskEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(24)) goto parse_normal_reward_state;
        break;
      }

      // optional int32 normal_reward_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_reward_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_reward_state_)));
          set_has_normal_reward_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IndultTaskGroupEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_cfg_id(), output);
  }

  // repeated .proto_ff.IndultTaskEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional int32 normal_reward_state = 3;
  if (has_normal_reward_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->normal_reward_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndultTaskGroupEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_cfg_id(), target);
  }

  // repeated .proto_ff.IndultTaskEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional int32 normal_reward_state = 3;
  if (has_normal_reward_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->normal_reward_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndultTaskGroupEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_cfg_id = 1;
    if (has_group_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_cfg_id());
    }

    // optional int32 normal_reward_state = 3;
    if (has_normal_reward_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_reward_state());
    }

  }
  // repeated .proto_ff.IndultTaskEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndultTaskGroupEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndultTaskGroupEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndultTaskGroupEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndultTaskGroupEntry::MergeFrom(const IndultTaskGroupEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_cfg_id()) {
      set_group_cfg_id(from.group_cfg_id());
    }
    if (from.has_normal_reward_state()) {
      set_normal_reward_state(from.normal_reward_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndultTaskGroupEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndultTaskGroupEntry::CopyFrom(const IndultTaskGroupEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndultTaskGroupEntry::IsInitialized() const {

  return true;
}

void IndultTaskGroupEntry::Swap(IndultTaskGroupEntry* other) {
  if (other != this) {
    std::swap(group_cfg_id_, other->group_cfg_id_);
    entrys_.Swap(&other->entrys_);
    std::swap(normal_reward_state_, other->normal_reward_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndultTaskGroupEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndultTaskGroupEntry_descriptor_;
  metadata.reflection = IndultTaskGroupEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColPointsTaskEntry::kTaskCfgIdFieldNumber;
const int ColPointsTaskEntry::kCurNumFieldNumber;
const int ColPointsTaskEntry::kTaskStateFieldNumber;
#endif  // !_MSC_VER

ColPointsTaskEntry::ColPointsTaskEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColPointsTaskEntry::InitAsDefaultInstance() {
}

ColPointsTaskEntry::ColPointsTaskEntry(const ColPointsTaskEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColPointsTaskEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColPointsTaskEntry::~ColPointsTaskEntry() {
  SharedDtor();
}

void ColPointsTaskEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColPointsTaskEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColPointsTaskEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColPointsTaskEntry_descriptor_;
}

const ColPointsTaskEntry& ColPointsTaskEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ColPointsTaskEntry* ColPointsTaskEntry::default_instance_ = NULL;

ColPointsTaskEntry* ColPointsTaskEntry::New() const {
  return new ColPointsTaskEntry;
}

void ColPointsTaskEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColPointsTaskEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColPointsTaskEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColPointsTaskEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColPointsTaskEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColPointsTaskEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColPointsTaskEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColPointsTaskEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColPointsTaskEntry::MergeFrom(const ColPointsTaskEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColPointsTaskEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColPointsTaskEntry::CopyFrom(const ColPointsTaskEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColPointsTaskEntry::IsInitialized() const {

  return true;
}

void ColPointsTaskEntry::Swap(ColPointsTaskEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColPointsTaskEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColPointsTaskEntry_descriptor_;
  metadata.reflection = ColPointsTaskEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColPointsTaskGroupEntry::kGroupCfgIdFieldNumber;
const int ColPointsTaskGroupEntry::kEntrysFieldNumber;
const int ColPointsTaskGroupEntry::kNormalRewardStateFieldNumber;
const int ColPointsTaskGroupEntry::kCurPointsFieldNumber;
const int ColPointsTaskGroupEntry::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

ColPointsTaskGroupEntry::ColPointsTaskGroupEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColPointsTaskGroupEntry::InitAsDefaultInstance() {
}

ColPointsTaskGroupEntry::ColPointsTaskGroupEntry(const ColPointsTaskGroupEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColPointsTaskGroupEntry::SharedCtor() {
  _cached_size_ = 0;
  group_cfg_id_ = GOOGLE_ULONGLONG(0);
  normal_reward_state_ = 0;
  cur_points_ = 0;
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColPointsTaskGroupEntry::~ColPointsTaskGroupEntry() {
  SharedDtor();
}

void ColPointsTaskGroupEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColPointsTaskGroupEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColPointsTaskGroupEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColPointsTaskGroupEntry_descriptor_;
}

const ColPointsTaskGroupEntry& ColPointsTaskGroupEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ColPointsTaskGroupEntry* ColPointsTaskGroupEntry::default_instance_ = NULL;

ColPointsTaskGroupEntry* ColPointsTaskGroupEntry::New() const {
  return new ColPointsTaskGroupEntry;
}

void ColPointsTaskGroupEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_cfg_id_ = GOOGLE_ULONGLONG(0);
    normal_reward_state_ = 0;
    cur_points_ = 0;
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColPointsTaskGroupEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_cfg_id_)));
          set_has_group_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.ColPointsTaskEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(24)) goto parse_normal_reward_state;
        break;
      }

      // optional int32 normal_reward_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_reward_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_reward_state_)));
          set_has_normal_reward_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_points;
        break;
      }

      // optional int32 cur_points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_points_)));
          set_has_cur_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColPointsTaskGroupEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_cfg_id(), output);
  }

  // repeated .proto_ff.ColPointsTaskEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional int32 normal_reward_state = 3;
  if (has_normal_reward_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->normal_reward_state(), output);
  }

  // optional int32 cur_points = 4;
  if (has_cur_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_points(), output);
  }

  // optional uint64 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColPointsTaskGroupEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_cfg_id(), target);
  }

  // repeated .proto_ff.ColPointsTaskEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional int32 normal_reward_state = 3;
  if (has_normal_reward_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->normal_reward_state(), target);
  }

  // optional int32 cur_points = 4;
  if (has_cur_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_points(), target);
  }

  // optional uint64 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColPointsTaskGroupEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_cfg_id = 1;
    if (has_group_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_cfg_id());
    }

    // optional int32 normal_reward_state = 3;
    if (has_normal_reward_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_reward_state());
    }

    // optional int32 cur_points = 4;
    if (has_cur_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_points());
    }

    // optional uint64 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  // repeated .proto_ff.ColPointsTaskEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColPointsTaskGroupEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColPointsTaskGroupEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColPointsTaskGroupEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColPointsTaskGroupEntry::MergeFrom(const ColPointsTaskGroupEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_cfg_id()) {
      set_group_cfg_id(from.group_cfg_id());
    }
    if (from.has_normal_reward_state()) {
      set_normal_reward_state(from.normal_reward_state());
    }
    if (from.has_cur_points()) {
      set_cur_points(from.cur_points());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColPointsTaskGroupEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColPointsTaskGroupEntry::CopyFrom(const ColPointsTaskGroupEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColPointsTaskGroupEntry::IsInitialized() const {

  return true;
}

void ColPointsTaskGroupEntry::Swap(ColPointsTaskGroupEntry* other) {
  if (other != this) {
    std::swap(group_cfg_id_, other->group_cfg_id_);
    entrys_.Swap(&other->entrys_);
    std::swap(normal_reward_state_, other->normal_reward_state_);
    std::swap(cur_points_, other->cur_points_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColPointsTaskGroupEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColPointsTaskGroupEntry_descriptor_;
  metadata.reflection = ColPointsTaskGroupEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColPointsTaskData::kDataFieldNumber;
const int ColPointsTaskData::kLastRefreshTimeFieldNumber;
const int ColPointsTaskData::kOnlineTimeFieldNumber;
#endif  // !_MSC_VER

ColPointsTaskData::ColPointsTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColPointsTaskData::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::ColPointsTaskGroupEntry*>(&::proto_ff::ColPointsTaskGroupEntry::default_instance());
}

ColPointsTaskData::ColPointsTaskData(const ColPointsTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColPointsTaskData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  last_refresh_time_ = GOOGLE_ULONGLONG(0);
  online_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColPointsTaskData::~ColPointsTaskData() {
  SharedDtor();
}

void ColPointsTaskData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ColPointsTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColPointsTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColPointsTaskData_descriptor_;
}

const ColPointsTaskData& ColPointsTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ColPointsTaskData* ColPointsTaskData::default_instance_ = NULL;

ColPointsTaskData* ColPointsTaskData::New() const {
  return new ColPointsTaskData;
}

void ColPointsTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::ColPointsTaskGroupEntry::Clear();
    }
    last_refresh_time_ = GOOGLE_ULONGLONG(0);
    online_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColPointsTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ColPointsTaskGroupEntry data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_refresh_time;
        break;
      }

      // optional uint64 last_refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_refresh_time_)));
          set_has_last_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online_time;
        break;
      }

      // optional uint64 online_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColPointsTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ColPointsTaskGroupEntry data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional uint64 last_refresh_time = 2;
  if (has_last_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_refresh_time(), output);
  }

  // optional uint64 online_time = 3;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->online_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColPointsTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ColPointsTaskGroupEntry data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional uint64 last_refresh_time = 2;
  if (has_last_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_refresh_time(), target);
  }

  // optional uint64 online_time = 3;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->online_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColPointsTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ColPointsTaskGroupEntry data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint64 last_refresh_time = 2;
    if (has_last_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_refresh_time());
    }

    // optional uint64 online_time = 3;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->online_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColPointsTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColPointsTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColPointsTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColPointsTaskData::MergeFrom(const ColPointsTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::ColPointsTaskGroupEntry::MergeFrom(from.data());
    }
    if (from.has_last_refresh_time()) {
      set_last_refresh_time(from.last_refresh_time());
    }
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColPointsTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColPointsTaskData::CopyFrom(const ColPointsTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColPointsTaskData::IsInitialized() const {

  return true;
}

void ColPointsTaskData::Swap(ColPointsTaskData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(last_refresh_time_, other->last_refresh_time_);
    std::swap(online_time_, other->online_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColPointsTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColPointsTaskData_descriptor_;
  metadata.reflection = ColPointsTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareDailySignInDBData::kIdFieldNumber;
const int WelfareDailySignInDBData::kDayIndexFieldNumber;
const int WelfareDailySignInDBData::kNStateFieldNumber;
const int WelfareDailySignInDBData::kLastResetTimeFieldNumber;
const int WelfareDailySignInDBData::kBRechargeFieldNumber;
#endif  // !_MSC_VER

WelfareDailySignInDBData::WelfareDailySignInDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareDailySignInDBData::InitAsDefaultInstance() {
}

WelfareDailySignInDBData::WelfareDailySignInDBData(const WelfareDailySignInDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareDailySignInDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  dayindex_ = 0u;
  nstate_ = 0u;
  lastresettime_ = GOOGLE_ULONGLONG(0);
  brecharge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareDailySignInDBData::~WelfareDailySignInDBData() {
  SharedDtor();
}

void WelfareDailySignInDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareDailySignInDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareDailySignInDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareDailySignInDBData_descriptor_;
}

const WelfareDailySignInDBData& WelfareDailySignInDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WelfareDailySignInDBData* WelfareDailySignInDBData::default_instance_ = NULL;

WelfareDailySignInDBData* WelfareDailySignInDBData::New() const {
  return new WelfareDailySignInDBData;
}

void WelfareDailySignInDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    dayindex_ = 0u;
    nstate_ = 0u;
    lastresettime_ = GOOGLE_ULONGLONG(0);
    brecharge_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareDailySignInDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dayIndex;
        break;
      }

      // optional uint32 dayIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayindex_)));
          set_has_dayindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nState;
        break;
      }

      // optional uint32 nState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstate_)));
          set_has_nstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastResetTime;
        break;
      }

      // optional uint64 lastResetTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastresettime_)));
          set_has_lastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bRecharge;
        break;
      }

      // optional bool bRecharge = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brecharge_)));
          set_has_brecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareDailySignInDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 dayIndex = 2;
  if (has_dayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dayindex(), output);
  }

  // optional uint32 nState = 3;
  if (has_nstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nstate(), output);
  }

  // optional uint64 lastResetTime = 4;
  if (has_lastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastresettime(), output);
  }

  // optional bool bRecharge = 5;
  if (has_brecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->brecharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareDailySignInDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 dayIndex = 2;
  if (has_dayindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dayindex(), target);
  }

  // optional uint32 nState = 3;
  if (has_nstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nstate(), target);
  }

  // optional uint64 lastResetTime = 4;
  if (has_lastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastresettime(), target);
  }

  // optional bool bRecharge = 5;
  if (has_brecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->brecharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareDailySignInDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 dayIndex = 2;
    if (has_dayindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayindex());
    }

    // optional uint32 nState = 3;
    if (has_nstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nstate());
    }

    // optional uint64 lastResetTime = 4;
    if (has_lastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastresettime());
    }

    // optional bool bRecharge = 5;
    if (has_brecharge()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareDailySignInDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareDailySignInDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareDailySignInDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareDailySignInDBData::MergeFrom(const WelfareDailySignInDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_dayindex()) {
      set_dayindex(from.dayindex());
    }
    if (from.has_nstate()) {
      set_nstate(from.nstate());
    }
    if (from.has_lastresettime()) {
      set_lastresettime(from.lastresettime());
    }
    if (from.has_brecharge()) {
      set_brecharge(from.brecharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareDailySignInDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareDailySignInDBData::CopyFrom(const WelfareDailySignInDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareDailySignInDBData::IsInitialized() const {

  return true;
}

void WelfareDailySignInDBData::Swap(WelfareDailySignInDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(dayindex_, other->dayindex_);
    std::swap(nstate_, other->nstate_);
    std::swap(lastresettime_, other->lastresettime_);
    std::swap(brecharge_, other->brecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareDailySignInDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareDailySignInDBData_descriptor_;
  metadata.reflection = WelfareDailySignInDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareLoginGiftDBData::kIdFieldNumber;
const int WelfareLoginGiftDBData::kLoninCountFieldNumber;
const int WelfareLoginGiftDBData::kLastResetTimeFieldNumber;
const int WelfareLoginGiftDBData::kGetStateFieldNumber;
const int WelfareLoginGiftDBData::kNStateFieldNumber;
#endif  // !_MSC_VER

WelfareLoginGiftDBData::WelfareLoginGiftDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareLoginGiftDBData::InitAsDefaultInstance() {
}

WelfareLoginGiftDBData::WelfareLoginGiftDBData(const WelfareLoginGiftDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareLoginGiftDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  lonincount_ = 0u;
  lastresettime_ = GOOGLE_ULONGLONG(0);
  nstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareLoginGiftDBData::~WelfareLoginGiftDBData() {
  SharedDtor();
}

void WelfareLoginGiftDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareLoginGiftDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareLoginGiftDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareLoginGiftDBData_descriptor_;
}

const WelfareLoginGiftDBData& WelfareLoginGiftDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WelfareLoginGiftDBData* WelfareLoginGiftDBData::default_instance_ = NULL;

WelfareLoginGiftDBData* WelfareLoginGiftDBData::New() const {
  return new WelfareLoginGiftDBData;
}

void WelfareLoginGiftDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    lonincount_ = 0u;
    lastresettime_ = GOOGLE_ULONGLONG(0);
    nstate_ = 0u;
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareLoginGiftDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LoninCount;
        break;
      }

      // optional uint32 LoninCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoninCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lonincount_)));
          set_has_lonincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastResetTime;
        break;
      }

      // optional uint64 lastResetTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastresettime_)));
          set_has_lastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        if (input->ExpectTag(40)) goto parse_nState;
        break;
      }

      // optional uint32 nState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstate_)));
          set_has_nstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareLoginGiftDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 LoninCount = 2;
  if (has_lonincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lonincount(), output);
  }

  // optional uint64 lastResetTime = 3;
  if (has_lastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastresettime(), output);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->getstate(i), output);
  }

  // optional uint32 nState = 5;
  if (has_nstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareLoginGiftDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 LoninCount = 2;
  if (has_lonincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lonincount(), target);
  }

  // optional uint64 lastResetTime = 3;
  if (has_lastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastresettime(), target);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->getstate(i), target);
  }

  // optional uint32 nState = 5;
  if (has_nstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareLoginGiftDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 LoninCount = 2;
    if (has_lonincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lonincount());
    }

    // optional uint64 lastResetTime = 3;
    if (has_lastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastresettime());
    }

    // optional uint32 nState = 5;
    if (has_nstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nstate());
    }

  }
  // repeated .proto_ff.ComPair getState = 4;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareLoginGiftDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareLoginGiftDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareLoginGiftDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareLoginGiftDBData::MergeFrom(const WelfareLoginGiftDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lonincount()) {
      set_lonincount(from.lonincount());
    }
    if (from.has_lastresettime()) {
      set_lastresettime(from.lastresettime());
    }
    if (from.has_nstate()) {
      set_nstate(from.nstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareLoginGiftDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareLoginGiftDBData::CopyFrom(const WelfareLoginGiftDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareLoginGiftDBData::IsInitialized() const {

  return true;
}

void WelfareLoginGiftDBData::Swap(WelfareLoginGiftDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lonincount_, other->lonincount_);
    std::swap(lastresettime_, other->lastresettime_);
    getstate_.Swap(&other->getstate_);
    std::swap(nstate_, other->nstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareLoginGiftDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareLoginGiftDBData_descriptor_;
  metadata.reflection = WelfareLoginGiftDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareLevelGiftDBData::kIdFieldNumber;
const int WelfareLevelGiftDBData::kGetStateFieldNumber;
#endif  // !_MSC_VER

WelfareLevelGiftDBData::WelfareLevelGiftDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareLevelGiftDBData::InitAsDefaultInstance() {
}

WelfareLevelGiftDBData::WelfareLevelGiftDBData(const WelfareLevelGiftDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareLevelGiftDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareLevelGiftDBData::~WelfareLevelGiftDBData() {
  SharedDtor();
}

void WelfareLevelGiftDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareLevelGiftDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareLevelGiftDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareLevelGiftDBData_descriptor_;
}

const WelfareLevelGiftDBData& WelfareLevelGiftDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WelfareLevelGiftDBData* WelfareLevelGiftDBData::default_instance_ = NULL;

WelfareLevelGiftDBData* WelfareLevelGiftDBData::New() const {
  return new WelfareLevelGiftDBData;
}

void WelfareLevelGiftDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareLevelGiftDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareLevelGiftDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareLevelGiftDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareLevelGiftDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.ComPair getState = 2;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareLevelGiftDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareLevelGiftDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareLevelGiftDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareLevelGiftDBData::MergeFrom(const WelfareLevelGiftDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareLevelGiftDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareLevelGiftDBData::CopyFrom(const WelfareLevelGiftDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareLevelGiftDBData::IsInitialized() const {

  return true;
}

void WelfareLevelGiftDBData::Swap(WelfareLevelGiftDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    getstate_.Swap(&other->getstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareLevelGiftDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareLevelGiftDBData_descriptor_;
  metadata.reflection = WelfareLevelGiftDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommodityEntry::kCommodityIdFieldNumber;
const int CommodityEntry::kCurBuyNumFieldNumber;
#endif  // !_MSC_VER

CommodityEntry::CommodityEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommodityEntry::InitAsDefaultInstance() {
}

CommodityEntry::CommodityEntry(const CommodityEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommodityEntry::SharedCtor() {
  _cached_size_ = 0;
  commodity_id_ = GOOGLE_ULONGLONG(0);
  cur_buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommodityEntry::~CommodityEntry() {
  SharedDtor();
}

void CommodityEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommodityEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommodityEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommodityEntry_descriptor_;
}

const CommodityEntry& CommodityEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CommodityEntry* CommodityEntry::default_instance_ = NULL;

CommodityEntry* CommodityEntry::New() const {
  return new CommodityEntry;
}

void CommodityEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commodity_id_ = GOOGLE_ULONGLONG(0);
    cur_buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommodityEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 commodity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commodity_id_)));
          set_has_commodity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_buy_num;
        break;
      }

      // optional int32 cur_buy_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_buy_num_)));
          set_has_cur_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommodityEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 commodity_id = 1;
  if (has_commodity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->commodity_id(), output);
  }

  // optional int32 cur_buy_num = 2;
  if (has_cur_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommodityEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 commodity_id = 1;
  if (has_commodity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->commodity_id(), target);
  }

  // optional int32 cur_buy_num = 2;
  if (has_cur_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommodityEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 commodity_id = 1;
    if (has_commodity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commodity_id());
    }

    // optional int32 cur_buy_num = 2;
    if (has_cur_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommodityEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommodityEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommodityEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommodityEntry::MergeFrom(const CommodityEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commodity_id()) {
      set_commodity_id(from.commodity_id());
    }
    if (from.has_cur_buy_num()) {
      set_cur_buy_num(from.cur_buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommodityEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommodityEntry::CopyFrom(const CommodityEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommodityEntry::IsInitialized() const {

  return true;
}

void CommodityEntry::Swap(CommodityEntry* other) {
  if (other != this) {
    std::swap(commodity_id_, other->commodity_id_);
    std::swap(cur_buy_num_, other->cur_buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommodityEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommodityEntry_descriptor_;
  metadata.reflection = CommodityEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitShopGroupEntry::kGroupCfgIdFieldNumber;
const int LimitShopGroupEntry::kOpenTimeFieldNumber;
const int LimitShopGroupEntry::kEntrysFieldNumber;
#endif  // !_MSC_VER

LimitShopGroupEntry::LimitShopGroupEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitShopGroupEntry::InitAsDefaultInstance() {
}

LimitShopGroupEntry::LimitShopGroupEntry(const LimitShopGroupEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitShopGroupEntry::SharedCtor() {
  _cached_size_ = 0;
  group_cfg_id_ = GOOGLE_ULONGLONG(0);
  open_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitShopGroupEntry::~LimitShopGroupEntry() {
  SharedDtor();
}

void LimitShopGroupEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitShopGroupEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitShopGroupEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitShopGroupEntry_descriptor_;
}

const LimitShopGroupEntry& LimitShopGroupEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

LimitShopGroupEntry* LimitShopGroupEntry::default_instance_ = NULL;

LimitShopGroupEntry* LimitShopGroupEntry::New() const {
  return new LimitShopGroupEntry;
}

void LimitShopGroupEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_cfg_id_ = GOOGLE_ULONGLONG(0);
    open_time_ = 0;
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitShopGroupEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_cfg_id_)));
          set_has_group_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_time;
        break;
      }

      // optional int32 open_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.CommodityEntry entrys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitShopGroupEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_cfg_id(), output);
  }

  // optional int32 open_time = 2;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_time(), output);
  }

  // repeated .proto_ff.CommodityEntry entrys = 3;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitShopGroupEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_cfg_id(), target);
  }

  // optional int32 open_time = 2;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_time(), target);
  }

  // repeated .proto_ff.CommodityEntry entrys = 3;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitShopGroupEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_cfg_id = 1;
    if (has_group_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_cfg_id());
    }

    // optional int32 open_time = 2;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_time());
    }

  }
  // repeated .proto_ff.CommodityEntry entrys = 3;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitShopGroupEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitShopGroupEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitShopGroupEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitShopGroupEntry::MergeFrom(const LimitShopGroupEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_cfg_id()) {
      set_group_cfg_id(from.group_cfg_id());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitShopGroupEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitShopGroupEntry::CopyFrom(const LimitShopGroupEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitShopGroupEntry::IsInitialized() const {

  return true;
}

void LimitShopGroupEntry::Swap(LimitShopGroupEntry* other) {
  if (other != this) {
    std::swap(group_cfg_id_, other->group_cfg_id_);
    std::swap(open_time_, other->open_time_);
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitShopGroupEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitShopGroupEntry_descriptor_;
  metadata.reflection = LimitShopGroupEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitShopData::kIdFieldNumber;
const int LimitShopData::kGroupsFieldNumber;
#endif  // !_MSC_VER

LimitShopData::LimitShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitShopData::InitAsDefaultInstance() {
}

LimitShopData::LimitShopData(const LimitShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitShopData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitShopData::~LimitShopData() {
  SharedDtor();
}

void LimitShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitShopData_descriptor_;
}

const LimitShopData& LimitShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

LimitShopData* LimitShopData::default_instance_ = NULL;

LimitShopData* LimitShopData::New() const {
  return new LimitShopData;
}

void LimitShopData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groups;
        break;
      }

      // repeated .proto_ff.LimitShopGroupEntry groups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.LimitShopGroupEntry groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.LimitShopGroupEntry groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.LimitShopGroupEntry groups = 2;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitShopData::MergeFrom(const LimitShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitShopData::CopyFrom(const LimitShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitShopData::IsInitialized() const {

  return true;
}

void LimitShopData::Swap(LimitShopData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitShopData_descriptor_;
  metadata.reflection = LimitShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitTaskEntry::kTaskCfgIdFieldNumber;
const int LimitTaskEntry::kCurNumFieldNumber;
const int LimitTaskEntry::kTaskStateFieldNumber;
#endif  // !_MSC_VER

LimitTaskEntry::LimitTaskEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitTaskEntry::InitAsDefaultInstance() {
}

LimitTaskEntry::LimitTaskEntry(const LimitTaskEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitTaskEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitTaskEntry::~LimitTaskEntry() {
  SharedDtor();
}

void LimitTaskEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitTaskEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitTaskEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitTaskEntry_descriptor_;
}

const LimitTaskEntry& LimitTaskEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

LimitTaskEntry* LimitTaskEntry::default_instance_ = NULL;

LimitTaskEntry* LimitTaskEntry::New() const {
  return new LimitTaskEntry;
}

void LimitTaskEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitTaskEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitTaskEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitTaskEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitTaskEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitTaskEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitTaskEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitTaskEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitTaskEntry::MergeFrom(const LimitTaskEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitTaskEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitTaskEntry::CopyFrom(const LimitTaskEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitTaskEntry::IsInitialized() const {

  return true;
}

void LimitTaskEntry::Swap(LimitTaskEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitTaskEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitTaskEntry_descriptor_;
  metadata.reflection = LimitTaskEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitTaskGroupEntry::kGroupCfgIdFieldNumber;
const int LimitTaskGroupEntry::kOpenTimeFieldNumber;
const int LimitTaskGroupEntry::kEntrysFieldNumber;
const int LimitTaskGroupEntry::kNormalRewardStateFieldNumber;
const int LimitTaskGroupEntry::kSeniorRewardStateFieldNumber;
#endif  // !_MSC_VER

LimitTaskGroupEntry::LimitTaskGroupEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitTaskGroupEntry::InitAsDefaultInstance() {
}

LimitTaskGroupEntry::LimitTaskGroupEntry(const LimitTaskGroupEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitTaskGroupEntry::SharedCtor() {
  _cached_size_ = 0;
  group_cfg_id_ = GOOGLE_ULONGLONG(0);
  open_time_ = 0;
  normal_reward_state_ = 0;
  senior_reward_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitTaskGroupEntry::~LimitTaskGroupEntry() {
  SharedDtor();
}

void LimitTaskGroupEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitTaskGroupEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitTaskGroupEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitTaskGroupEntry_descriptor_;
}

const LimitTaskGroupEntry& LimitTaskGroupEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

LimitTaskGroupEntry* LimitTaskGroupEntry::default_instance_ = NULL;

LimitTaskGroupEntry* LimitTaskGroupEntry::New() const {
  return new LimitTaskGroupEntry;
}

void LimitTaskGroupEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_cfg_id_ = GOOGLE_ULONGLONG(0);
    open_time_ = 0;
    normal_reward_state_ = 0;
    senior_reward_state_ = 0;
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitTaskGroupEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_cfg_id_)));
          set_has_group_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_time;
        break;
      }

      // optional int32 open_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.LimitTaskEntry entrys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entrys;
        if (input->ExpectTag(32)) goto parse_normal_reward_state;
        break;
      }

      // optional int32 normal_reward_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_reward_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_reward_state_)));
          set_has_normal_reward_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_senior_reward_state;
        break;
      }

      // optional int32 senior_reward_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senior_reward_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senior_reward_state_)));
          set_has_senior_reward_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitTaskGroupEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_cfg_id(), output);
  }

  // optional int32 open_time = 2;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_time(), output);
  }

  // repeated .proto_ff.LimitTaskEntry entrys = 3;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entrys(i), output);
  }

  // optional int32 normal_reward_state = 4;
  if (has_normal_reward_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->normal_reward_state(), output);
  }

  // optional int32 senior_reward_state = 5;
  if (has_senior_reward_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->senior_reward_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitTaskGroupEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_cfg_id(), target);
  }

  // optional int32 open_time = 2;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_time(), target);
  }

  // repeated .proto_ff.LimitTaskEntry entrys = 3;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entrys(i), target);
  }

  // optional int32 normal_reward_state = 4;
  if (has_normal_reward_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->normal_reward_state(), target);
  }

  // optional int32 senior_reward_state = 5;
  if (has_senior_reward_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->senior_reward_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitTaskGroupEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_cfg_id = 1;
    if (has_group_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_cfg_id());
    }

    // optional int32 open_time = 2;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_time());
    }

    // optional int32 normal_reward_state = 4;
    if (has_normal_reward_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_reward_state());
    }

    // optional int32 senior_reward_state = 5;
    if (has_senior_reward_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senior_reward_state());
    }

  }
  // repeated .proto_ff.LimitTaskEntry entrys = 3;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitTaskGroupEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitTaskGroupEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitTaskGroupEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitTaskGroupEntry::MergeFrom(const LimitTaskGroupEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_cfg_id()) {
      set_group_cfg_id(from.group_cfg_id());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_normal_reward_state()) {
      set_normal_reward_state(from.normal_reward_state());
    }
    if (from.has_senior_reward_state()) {
      set_senior_reward_state(from.senior_reward_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitTaskGroupEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitTaskGroupEntry::CopyFrom(const LimitTaskGroupEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitTaskGroupEntry::IsInitialized() const {

  return true;
}

void LimitTaskGroupEntry::Swap(LimitTaskGroupEntry* other) {
  if (other != this) {
    std::swap(group_cfg_id_, other->group_cfg_id_);
    std::swap(open_time_, other->open_time_);
    entrys_.Swap(&other->entrys_);
    std::swap(normal_reward_state_, other->normal_reward_state_);
    std::swap(senior_reward_state_, other->senior_reward_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitTaskGroupEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitTaskGroupEntry_descriptor_;
  metadata.reflection = LimitTaskGroupEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitTaskData::kIdFieldNumber;
const int LimitTaskData::kGroupsFieldNumber;
#endif  // !_MSC_VER

LimitTaskData::LimitTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitTaskData::InitAsDefaultInstance() {
}

LimitTaskData::LimitTaskData(const LimitTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitTaskData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitTaskData::~LimitTaskData() {
  SharedDtor();
}

void LimitTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitTaskData_descriptor_;
}

const LimitTaskData& LimitTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

LimitTaskData* LimitTaskData::default_instance_ = NULL;

LimitTaskData* LimitTaskData::New() const {
  return new LimitTaskData;
}

void LimitTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groups;
        break;
      }

      // repeated .proto_ff.LimitTaskGroupEntry groups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.LimitTaskGroupEntry groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.LimitTaskGroupEntry groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.LimitTaskGroupEntry groups = 2;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitTaskData::MergeFrom(const LimitTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitTaskData::CopyFrom(const LimitTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitTaskData::IsInitialized() const {

  return true;
}

void LimitTaskData::Swap(LimitTaskData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitTaskData_descriptor_;
  metadata.reflection = LimitTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WishDBTypeEntry::kWishTypeFieldNumber;
const int WishDBTypeEntry::kWishedNumFieldNumber;
const int WishDBTypeEntry::kRefreshTimeFieldNumber;
const int WishDBTypeEntry::kLastTimeFieldNumber;
#endif  // !_MSC_VER

WishDBTypeEntry::WishDBTypeEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WishDBTypeEntry::InitAsDefaultInstance() {
}

WishDBTypeEntry::WishDBTypeEntry(const WishDBTypeEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WishDBTypeEntry::SharedCtor() {
  _cached_size_ = 0;
  wish_type_ = 0;
  wished_num_ = 0;
  refresh_time_ = GOOGLE_ULONGLONG(0);
  last_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WishDBTypeEntry::~WishDBTypeEntry() {
  SharedDtor();
}

void WishDBTypeEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WishDBTypeEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WishDBTypeEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WishDBTypeEntry_descriptor_;
}

const WishDBTypeEntry& WishDBTypeEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WishDBTypeEntry* WishDBTypeEntry::default_instance_ = NULL;

WishDBTypeEntry* WishDBTypeEntry::New() const {
  return new WishDBTypeEntry;
}

void WishDBTypeEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wish_type_ = 0;
    wished_num_ = 0;
    refresh_time_ = GOOGLE_ULONGLONG(0);
    last_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WishDBTypeEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wish_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wish_type_)));
          set_has_wish_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wished_num;
        break;
      }

      // optional int32 wished_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wished_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wished_num_)));
          set_has_wished_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WishDBTypeEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wish_type = 1;
  if (has_wish_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wish_type(), output);
  }

  // optional int32 wished_num = 2;
  if (has_wished_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wished_num(), output);
  }

  // optional uint64 refresh_time = 3;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->refresh_time(), output);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WishDBTypeEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wish_type = 1;
  if (has_wish_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wish_type(), target);
  }

  // optional int32 wished_num = 2;
  if (has_wished_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wished_num(), target);
  }

  // optional uint64 refresh_time = 3;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->refresh_time(), target);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WishDBTypeEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wish_type = 1;
    if (has_wish_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wish_type());
    }

    // optional int32 wished_num = 2;
    if (has_wished_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wished_num());
    }

    // optional uint64 refresh_time = 3;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

    // optional uint64 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WishDBTypeEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WishDBTypeEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WishDBTypeEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WishDBTypeEntry::MergeFrom(const WishDBTypeEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wish_type()) {
      set_wish_type(from.wish_type());
    }
    if (from.has_wished_num()) {
      set_wished_num(from.wished_num());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WishDBTypeEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WishDBTypeEntry::CopyFrom(const WishDBTypeEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WishDBTypeEntry::IsInitialized() const {

  return true;
}

void WishDBTypeEntry::Swap(WishDBTypeEntry* other) {
  if (other != this) {
    std::swap(wish_type_, other->wish_type_);
    std::swap(wished_num_, other->wished_num_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WishDBTypeEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WishDBTypeEntry_descriptor_;
  metadata.reflection = WishDBTypeEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WishDBData::kIdFieldNumber;
const int WishDBData::kTypeEntryFieldNumber;
#endif  // !_MSC_VER

WishDBData::WishDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WishDBData::InitAsDefaultInstance() {
}

WishDBData::WishDBData(const WishDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WishDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WishDBData::~WishDBData() {
  SharedDtor();
}

void WishDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WishDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WishDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WishDBData_descriptor_;
}

const WishDBData& WishDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WishDBData* WishDBData::default_instance_ = NULL;

WishDBData* WishDBData::New() const {
  return new WishDBData;
}

void WishDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  type_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WishDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_entry;
        break;
      }

      // repeated .proto_ff.WishDBTypeEntry type_entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WishDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.WishDBTypeEntry type_entry = 2;
  for (int i = 0; i < this->type_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type_entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WishDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.WishDBTypeEntry type_entry = 2;
  for (int i = 0; i < this->type_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type_entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WishDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.WishDBTypeEntry type_entry = 2;
  total_size += 1 * this->type_entry_size();
  for (int i = 0; i < this->type_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->type_entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WishDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WishDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WishDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WishDBData::MergeFrom(const WishDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_entry_.MergeFrom(from.type_entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WishDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WishDBData::CopyFrom(const WishDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WishDBData::IsInitialized() const {

  return true;
}

void WishDBData::Swap(WishDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    type_entry_.Swap(&other->type_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WishDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WishDBData_descriptor_;
  metadata.reflection = WishDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalInvestDBData::kNActiveIdFieldNumber;
const int FestivalInvestDBData::kBInvestFieldNumber;
const int FestivalInvestDBData::kNLastResetTimeFieldNumber;
const int FestivalInvestDBData::kNLoninCountFieldNumber;
const int FestivalInvestDBData::kGetStateFieldNumber;
const int FestivalInvestDBData::kParamsFieldNumber;
const int FestivalInvestDBData::kInvestTimeFieldNumber;
#endif  // !_MSC_VER

FestivalInvestDBData::FestivalInvestDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalInvestDBData::InitAsDefaultInstance() {
}

FestivalInvestDBData::FestivalInvestDBData(const FestivalInvestDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalInvestDBData::SharedCtor() {
  _cached_size_ = 0;
  nactiveid_ = GOOGLE_ULONGLONG(0);
  binvest_ = false;
  nlastresettime_ = GOOGLE_ULONGLONG(0);
  nlonincount_ = 0;
  investtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalInvestDBData::~FestivalInvestDBData() {
  SharedDtor();
}

void FestivalInvestDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalInvestDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalInvestDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalInvestDBData_descriptor_;
}

const FestivalInvestDBData& FestivalInvestDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalInvestDBData* FestivalInvestDBData::default_instance_ = NULL;

FestivalInvestDBData* FestivalInvestDBData::New() const {
  return new FestivalInvestDBData;
}

void FestivalInvestDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nactiveid_ = GOOGLE_ULONGLONG(0);
    binvest_ = false;
    nlastresettime_ = GOOGLE_ULONGLONG(0);
    nlonincount_ = 0;
    investtime_ = GOOGLE_LONGLONG(0);
  }
  getstate_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalInvestDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nActiveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nactiveid_)));
          set_has_nactiveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bInvest;
        break;
      }

      // optional bool bInvest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bInvest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binvest_)));
          set_has_binvest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nLastResetTime;
        break;
      }

      // optional uint64 nLastResetTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nlastresettime_)));
          set_has_nlastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nLoninCount;
        break;
      }

      // optional int32 nLoninCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLoninCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlonincount_)));
          set_has_nlonincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_getState;
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }

      // repeated .proto_ff.ComPair params = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_params;
        if (input->ExpectTag(56)) goto parse_investTime;
        break;
      }

      // optional int64 investTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_investTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &investtime_)));
          set_has_investtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalInvestDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 nActiveId = 1;
  if (has_nactiveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nactiveid(), output);
  }

  // optional bool bInvest = 2;
  if (has_binvest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binvest(), output);
  }

  // optional uint64 nLastResetTime = 3;
  if (has_nlastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nlastresettime(), output);
  }

  // optional int32 nLoninCount = 4;
  if (has_nlonincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nlonincount(), output);
  }

  // repeated .proto_ff.ComPair getState = 5;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->getstate(i), output);
  }

  // repeated .proto_ff.ComPair params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->params(i), output);
  }

  // optional int64 investTime = 7;
  if (has_investtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->investtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalInvestDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 nActiveId = 1;
  if (has_nactiveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nactiveid(), target);
  }

  // optional bool bInvest = 2;
  if (has_binvest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binvest(), target);
  }

  // optional uint64 nLastResetTime = 3;
  if (has_nlastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nlastresettime(), target);
  }

  // optional int32 nLoninCount = 4;
  if (has_nlonincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nlonincount(), target);
  }

  // repeated .proto_ff.ComPair getState = 5;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->getstate(i), target);
  }

  // repeated .proto_ff.ComPair params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->params(i), target);
  }

  // optional int64 investTime = 7;
  if (has_investtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->investtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalInvestDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nActiveId = 1;
    if (has_nactiveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nactiveid());
    }

    // optional bool bInvest = 2;
    if (has_binvest()) {
      total_size += 1 + 1;
    }

    // optional uint64 nLastResetTime = 3;
    if (has_nlastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nlastresettime());
    }

    // optional int32 nLoninCount = 4;
    if (has_nlonincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlonincount());
    }

    // optional int64 investTime = 7;
    if (has_investtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->investtime());
    }

  }
  // repeated .proto_ff.ComPair getState = 5;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  // repeated .proto_ff.ComPair params = 6;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalInvestDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalInvestDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalInvestDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalInvestDBData::MergeFrom(const FestivalInvestDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nactiveid()) {
      set_nactiveid(from.nactiveid());
    }
    if (from.has_binvest()) {
      set_binvest(from.binvest());
    }
    if (from.has_nlastresettime()) {
      set_nlastresettime(from.nlastresettime());
    }
    if (from.has_nlonincount()) {
      set_nlonincount(from.nlonincount());
    }
    if (from.has_investtime()) {
      set_investtime(from.investtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalInvestDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalInvestDBData::CopyFrom(const FestivalInvestDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalInvestDBData::IsInitialized() const {

  return true;
}

void FestivalInvestDBData::Swap(FestivalInvestDBData* other) {
  if (other != this) {
    std::swap(nactiveid_, other->nactiveid_);
    std::swap(binvest_, other->binvest_);
    std::swap(nlastresettime_, other->nlastresettime_);
    std::swap(nlonincount_, other->nlonincount_);
    getstate_.Swap(&other->getstate_);
    params_.Swap(&other->params_);
    std::swap(investtime_, other->investtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalInvestDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalInvestDBData_descriptor_;
  metadata.reflection = FestivalInvestDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalExchangeDBData::kNActiveIdFieldNumber;
const int FestivalExchangeDBData::kExchangeCountFieldNumber;
#endif  // !_MSC_VER

FestivalExchangeDBData::FestivalExchangeDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalExchangeDBData::InitAsDefaultInstance() {
}

FestivalExchangeDBData::FestivalExchangeDBData(const FestivalExchangeDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalExchangeDBData::SharedCtor() {
  _cached_size_ = 0;
  nactiveid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalExchangeDBData::~FestivalExchangeDBData() {
  SharedDtor();
}

void FestivalExchangeDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalExchangeDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalExchangeDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalExchangeDBData_descriptor_;
}

const FestivalExchangeDBData& FestivalExchangeDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalExchangeDBData* FestivalExchangeDBData::default_instance_ = NULL;

FestivalExchangeDBData* FestivalExchangeDBData::New() const {
  return new FestivalExchangeDBData;
}

void FestivalExchangeDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nactiveid_ = GOOGLE_ULONGLONG(0);
  }
  exchangecount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalExchangeDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 nActiveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nactiveid_)));
          set_has_nactiveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exchangeCount;
        break;
      }

      // repeated .proto_ff.ComPair exchangeCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchangeCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchangecount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exchangeCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalExchangeDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 nActiveId = 1;
  if (has_nactiveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nactiveid(), output);
  }

  // repeated .proto_ff.ComPair exchangeCount = 2;
  for (int i = 0; i < this->exchangecount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exchangecount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalExchangeDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 nActiveId = 1;
  if (has_nactiveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nactiveid(), target);
  }

  // repeated .proto_ff.ComPair exchangeCount = 2;
  for (int i = 0; i < this->exchangecount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exchangecount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalExchangeDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 nActiveId = 1;
    if (has_nactiveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nactiveid());
    }

  }
  // repeated .proto_ff.ComPair exchangeCount = 2;
  total_size += 1 * this->exchangecount_size();
  for (int i = 0; i < this->exchangecount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchangecount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalExchangeDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalExchangeDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalExchangeDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalExchangeDBData::MergeFrom(const FestivalExchangeDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchangecount_.MergeFrom(from.exchangecount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nactiveid()) {
      set_nactiveid(from.nactiveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalExchangeDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalExchangeDBData::CopyFrom(const FestivalExchangeDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalExchangeDBData::IsInitialized() const {

  return true;
}

void FestivalExchangeDBData::Swap(FestivalExchangeDBData* other) {
  if (other != this) {
    std::swap(nactiveid_, other->nactiveid_);
    exchangecount_.Swap(&other->exchangecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalExchangeDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalExchangeDBData_descriptor_;
  metadata.reflection = FestivalExchangeDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalLoginDBData::kActiveIdFieldNumber;
const int FestivalLoginDBData::kNLastResetTimeFieldNumber;
const int FestivalLoginDBData::kNLoninCountFieldNumber;
const int FestivalLoginDBData::kGetStateFieldNumber;
#endif  // !_MSC_VER

FestivalLoginDBData::FestivalLoginDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalLoginDBData::InitAsDefaultInstance() {
}

FestivalLoginDBData::FestivalLoginDBData(const FestivalLoginDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalLoginDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  nlastresettime_ = GOOGLE_ULONGLONG(0);
  nlonincount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalLoginDBData::~FestivalLoginDBData() {
  SharedDtor();
}

void FestivalLoginDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalLoginDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalLoginDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalLoginDBData_descriptor_;
}

const FestivalLoginDBData& FestivalLoginDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalLoginDBData* FestivalLoginDBData::default_instance_ = NULL;

FestivalLoginDBData* FestivalLoginDBData::New() const {
  return new FestivalLoginDBData;
}

void FestivalLoginDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    nlastresettime_ = GOOGLE_ULONGLONG(0);
    nlonincount_ = 0u;
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalLoginDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLastResetTime;
        break;
      }

      // optional uint64 nLastResetTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nlastresettime_)));
          set_has_nlastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nLoninCount;
        break;
      }

      // optional uint32 nLoninCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLoninCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlonincount_)));
          set_has_nlonincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalLoginDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint64 nLastResetTime = 2;
  if (has_nlastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nlastresettime(), output);
  }

  // optional uint32 nLoninCount = 3;
  if (has_nlonincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nlonincount(), output);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->getstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalLoginDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint64 nLastResetTime = 2;
  if (has_nlastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nlastresettime(), target);
  }

  // optional uint32 nLoninCount = 3;
  if (has_nlonincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nlonincount(), target);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->getstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalLoginDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint64 nLastResetTime = 2;
    if (has_nlastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nlastresettime());
    }

    // optional uint32 nLoninCount = 3;
    if (has_nlonincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlonincount());
    }

  }
  // repeated .proto_ff.ComPair getState = 4;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalLoginDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalLoginDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalLoginDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalLoginDBData::MergeFrom(const FestivalLoginDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_nlastresettime()) {
      set_nlastresettime(from.nlastresettime());
    }
    if (from.has_nlonincount()) {
      set_nlonincount(from.nlonincount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalLoginDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalLoginDBData::CopyFrom(const FestivalLoginDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalLoginDBData::IsInitialized() const {

  return true;
}

void FestivalLoginDBData::Swap(FestivalLoginDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(nlastresettime_, other->nlastresettime_);
    std::swap(nlonincount_, other->nlonincount_);
    getstate_.Swap(&other->getstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalLoginDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalLoginDBData_descriptor_;
  metadata.reflection = FestivalLoginDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalTotalRechargeDBData::kActiveIdFieldNumber;
const int FestivalTotalRechargeDBData::kNRechargeCountFieldNumber;
const int FestivalTotalRechargeDBData::kGetStateFieldNumber;
const int FestivalTotalRechargeDBData::kNRechargeHolyFieldNumber;
#endif  // !_MSC_VER

FestivalTotalRechargeDBData::FestivalTotalRechargeDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalTotalRechargeDBData::InitAsDefaultInstance() {
}

FestivalTotalRechargeDBData::FestivalTotalRechargeDBData(const FestivalTotalRechargeDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalTotalRechargeDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  nrechargecount_ = 0u;
  nrechargeholy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalTotalRechargeDBData::~FestivalTotalRechargeDBData() {
  SharedDtor();
}

void FestivalTotalRechargeDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalTotalRechargeDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalTotalRechargeDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalTotalRechargeDBData_descriptor_;
}

const FestivalTotalRechargeDBData& FestivalTotalRechargeDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalTotalRechargeDBData* FestivalTotalRechargeDBData::default_instance_ = NULL;

FestivalTotalRechargeDBData* FestivalTotalRechargeDBData::New() const {
  return new FestivalTotalRechargeDBData;
}

void FestivalTotalRechargeDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    nrechargecount_ = 0u;
    nrechargeholy_ = 0u;
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalTotalRechargeDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nRechargeCount;
        break;
      }

      // optional uint32 nRechargeCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRechargeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrechargecount_)));
          set_has_nrechargecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getState;
        if (input->ExpectTag(32)) goto parse_nRechargeHoly;
        break;
      }

      // optional uint32 nRechargeHoly = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRechargeHoly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrechargeholy_)));
          set_has_nrechargeholy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalTotalRechargeDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint32 nRechargeCount = 2;
  if (has_nrechargecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nrechargecount(), output);
  }

  // repeated .proto_ff.ComPair getState = 3;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getstate(i), output);
  }

  // optional uint32 nRechargeHoly = 4;
  if (has_nrechargeholy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nrechargeholy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalTotalRechargeDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint32 nRechargeCount = 2;
  if (has_nrechargecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nrechargecount(), target);
  }

  // repeated .proto_ff.ComPair getState = 3;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getstate(i), target);
  }

  // optional uint32 nRechargeHoly = 4;
  if (has_nrechargeholy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nrechargeholy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalTotalRechargeDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint32 nRechargeCount = 2;
    if (has_nrechargecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nrechargecount());
    }

    // optional uint32 nRechargeHoly = 4;
    if (has_nrechargeholy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nrechargeholy());
    }

  }
  // repeated .proto_ff.ComPair getState = 3;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalTotalRechargeDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalTotalRechargeDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalTotalRechargeDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalTotalRechargeDBData::MergeFrom(const FestivalTotalRechargeDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_nrechargecount()) {
      set_nrechargecount(from.nrechargecount());
    }
    if (from.has_nrechargeholy()) {
      set_nrechargeholy(from.nrechargeholy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalTotalRechargeDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalTotalRechargeDBData::CopyFrom(const FestivalTotalRechargeDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalTotalRechargeDBData::IsInitialized() const {

  return true;
}

void FestivalTotalRechargeDBData::Swap(FestivalTotalRechargeDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(nrechargecount_, other->nrechargecount_);
    getstate_.Swap(&other->getstate_);
    std::swap(nrechargeholy_, other->nrechargeholy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalTotalRechargeDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalTotalRechargeDBData_descriptor_;
  metadata.reflection = FestivalTotalRechargeDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalConsumptionDBData::kActiveIdFieldNumber;
const int FestivalConsumptionDBData::kNConsumptionValueFieldNumber;
const int FestivalConsumptionDBData::kGetStateFieldNumber;
const int FestivalConsumptionDBData::kNConsumptionHolyFieldNumber;
const int FestivalConsumptionDBData::kNConsumptionVoucherFieldNumber;
#endif  // !_MSC_VER

FestivalConsumptionDBData::FestivalConsumptionDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalConsumptionDBData::InitAsDefaultInstance() {
}

FestivalConsumptionDBData::FestivalConsumptionDBData(const FestivalConsumptionDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalConsumptionDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  nconsumptionvalue_ = 0u;
  nconsumptionholy_ = 0u;
  nconsumptionvoucher_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalConsumptionDBData::~FestivalConsumptionDBData() {
  SharedDtor();
}

void FestivalConsumptionDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalConsumptionDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalConsumptionDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalConsumptionDBData_descriptor_;
}

const FestivalConsumptionDBData& FestivalConsumptionDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalConsumptionDBData* FestivalConsumptionDBData::default_instance_ = NULL;

FestivalConsumptionDBData* FestivalConsumptionDBData::New() const {
  return new FestivalConsumptionDBData;
}

void FestivalConsumptionDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    nconsumptionvalue_ = 0u;
    nconsumptionholy_ = 0u;
    nconsumptionvoucher_ = 0u;
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalConsumptionDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nConsumptionValue;
        break;
      }

      // optional uint32 nConsumptionValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nConsumptionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nconsumptionvalue_)));
          set_has_nconsumptionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getState;
        if (input->ExpectTag(32)) goto parse_nConsumptionHoly;
        break;
      }

      // optional uint32 nConsumptionHoly = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nConsumptionHoly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nconsumptionholy_)));
          set_has_nconsumptionholy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nConsumptionVoucher;
        break;
      }

      // optional uint32 nConsumptionVoucher = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nConsumptionVoucher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nconsumptionvoucher_)));
          set_has_nconsumptionvoucher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalConsumptionDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint32 nConsumptionValue = 2;
  if (has_nconsumptionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nconsumptionvalue(), output);
  }

  // repeated .proto_ff.ComPair getState = 3;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getstate(i), output);
  }

  // optional uint32 nConsumptionHoly = 4;
  if (has_nconsumptionholy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nconsumptionholy(), output);
  }

  // optional uint32 nConsumptionVoucher = 5;
  if (has_nconsumptionvoucher()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nconsumptionvoucher(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalConsumptionDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint32 nConsumptionValue = 2;
  if (has_nconsumptionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nconsumptionvalue(), target);
  }

  // repeated .proto_ff.ComPair getState = 3;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getstate(i), target);
  }

  // optional uint32 nConsumptionHoly = 4;
  if (has_nconsumptionholy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nconsumptionholy(), target);
  }

  // optional uint32 nConsumptionVoucher = 5;
  if (has_nconsumptionvoucher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nconsumptionvoucher(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalConsumptionDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint32 nConsumptionValue = 2;
    if (has_nconsumptionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nconsumptionvalue());
    }

    // optional uint32 nConsumptionHoly = 4;
    if (has_nconsumptionholy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nconsumptionholy());
    }

    // optional uint32 nConsumptionVoucher = 5;
    if (has_nconsumptionvoucher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nconsumptionvoucher());
    }

  }
  // repeated .proto_ff.ComPair getState = 3;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalConsumptionDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalConsumptionDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalConsumptionDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalConsumptionDBData::MergeFrom(const FestivalConsumptionDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_nconsumptionvalue()) {
      set_nconsumptionvalue(from.nconsumptionvalue());
    }
    if (from.has_nconsumptionholy()) {
      set_nconsumptionholy(from.nconsumptionholy());
    }
    if (from.has_nconsumptionvoucher()) {
      set_nconsumptionvoucher(from.nconsumptionvoucher());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalConsumptionDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalConsumptionDBData::CopyFrom(const FestivalConsumptionDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalConsumptionDBData::IsInitialized() const {

  return true;
}

void FestivalConsumptionDBData::Swap(FestivalConsumptionDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(nconsumptionvalue_, other->nconsumptionvalue_);
    getstate_.Swap(&other->getstate_);
    std::swap(nconsumptionholy_, other->nconsumptionholy_);
    std::swap(nconsumptionvoucher_, other->nconsumptionvoucher_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalConsumptionDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalConsumptionDBData_descriptor_;
  metadata.reflection = FestivalConsumptionDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalKillBossData::kActiveIdFieldNumber;
const int FestivalKillBossData::kGetStateFieldNumber;
#endif  // !_MSC_VER

FestivalKillBossData::FestivalKillBossData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalKillBossData::InitAsDefaultInstance() {
}

FestivalKillBossData::FestivalKillBossData(const FestivalKillBossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalKillBossData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalKillBossData::~FestivalKillBossData() {
  SharedDtor();
}

void FestivalKillBossData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalKillBossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalKillBossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalKillBossData_descriptor_;
}

const FestivalKillBossData& FestivalKillBossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalKillBossData* FestivalKillBossData::default_instance_ = NULL;

FestivalKillBossData* FestivalKillBossData::New() const {
  return new FestivalKillBossData;
}

void FestivalKillBossData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalKillBossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalKillBossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalKillBossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalKillBossData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

  }
  // repeated .proto_ff.ComPair getState = 2;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalKillBossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalKillBossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalKillBossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalKillBossData::MergeFrom(const FestivalKillBossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalKillBossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalKillBossData::CopyFrom(const FestivalKillBossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalKillBossData::IsInitialized() const {

  return true;
}

void FestivalKillBossData::Swap(FestivalKillBossData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    getstate_.Swap(&other->getstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalKillBossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalKillBossData_descriptor_;
  metadata.reflection = FestivalKillBossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalZhiChongData::kActiveIdFieldNumber;
const int FestivalZhiChongData::kGetStateFieldNumber;
const int FestivalZhiChongData::kPointListFieldNumber;
#endif  // !_MSC_VER

FestivalZhiChongData::FestivalZhiChongData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalZhiChongData::InitAsDefaultInstance() {
}

FestivalZhiChongData::FestivalZhiChongData(const FestivalZhiChongData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalZhiChongData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalZhiChongData::~FestivalZhiChongData() {
  SharedDtor();
}

void FestivalZhiChongData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalZhiChongData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalZhiChongData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalZhiChongData_descriptor_;
}

const FestivalZhiChongData& FestivalZhiChongData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalZhiChongData* FestivalZhiChongData::default_instance_ = NULL;

FestivalZhiChongData* FestivalZhiChongData::New() const {
  return new FestivalZhiChongData;
}

void FestivalZhiChongData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
  }
  getstate_.Clear();
  pointlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalZhiChongData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        if (input->ExpectTag(24)) goto parse_pointList;
        break;
      }

      // repeated int64 pointList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_pointlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_pointlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pointList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalZhiChongData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getstate(i), output);
  }

  // repeated int64 pointList = 3;
  for (int i = 0; i < this->pointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->pointlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalZhiChongData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getstate(i), target);
  }

  // repeated int64 pointList = 3;
  for (int i = 0; i < this->pointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->pointlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalZhiChongData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

  }
  // repeated .proto_ff.ComPair getState = 2;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  // repeated int64 pointList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pointlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->pointlist(i));
    }
    total_size += 1 * this->pointlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalZhiChongData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalZhiChongData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalZhiChongData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalZhiChongData::MergeFrom(const FestivalZhiChongData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  pointlist_.MergeFrom(from.pointlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalZhiChongData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalZhiChongData::CopyFrom(const FestivalZhiChongData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalZhiChongData::IsInitialized() const {

  return true;
}

void FestivalZhiChongData::Swap(FestivalZhiChongData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    getstate_.Swap(&other->getstate_);
    pointlist_.Swap(&other->pointlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalZhiChongData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalZhiChongData_descriptor_;
  metadata.reflection = FestivalZhiChongData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalPreRechargeData::kActiveIdFieldNumber;
const int FestivalPreRechargeData::kBuyFieldNumber;
const int FestivalPreRechargeData::kPointListFieldNumber;
#endif  // !_MSC_VER

FestivalPreRechargeData::FestivalPreRechargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalPreRechargeData::InitAsDefaultInstance() {
}

FestivalPreRechargeData::FestivalPreRechargeData(const FestivalPreRechargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalPreRechargeData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalPreRechargeData::~FestivalPreRechargeData() {
  SharedDtor();
}

void FestivalPreRechargeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalPreRechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalPreRechargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalPreRechargeData_descriptor_;
}

const FestivalPreRechargeData& FestivalPreRechargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalPreRechargeData* FestivalPreRechargeData::default_instance_ = NULL;

FestivalPreRechargeData* FestivalPreRechargeData::New() const {
  return new FestivalPreRechargeData;
}

void FestivalPreRechargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
  }
  buy_.Clear();
  pointlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalPreRechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buy;
        break;
      }

      // repeated .proto_ff.ComPair buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buy;
        if (input->ExpectTag(24)) goto parse_pointList;
        break;
      }

      // repeated int64 pointList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_pointlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_pointlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pointList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalPreRechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated .proto_ff.ComPair buy = 2;
  for (int i = 0; i < this->buy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buy(i), output);
  }

  // repeated int64 pointList = 3;
  for (int i = 0; i < this->pointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->pointlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalPreRechargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated .proto_ff.ComPair buy = 2;
  for (int i = 0; i < this->buy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buy(i), target);
  }

  // repeated int64 pointList = 3;
  for (int i = 0; i < this->pointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->pointlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalPreRechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

  }
  // repeated .proto_ff.ComPair buy = 2;
  total_size += 1 * this->buy_size();
  for (int i = 0; i < this->buy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy(i));
  }

  // repeated int64 pointList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pointlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->pointlist(i));
    }
    total_size += 1 * this->pointlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalPreRechargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalPreRechargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalPreRechargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalPreRechargeData::MergeFrom(const FestivalPreRechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_.MergeFrom(from.buy_);
  pointlist_.MergeFrom(from.pointlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalPreRechargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalPreRechargeData::CopyFrom(const FestivalPreRechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalPreRechargeData::IsInitialized() const {

  return true;
}

void FestivalPreRechargeData::Swap(FestivalPreRechargeData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    buy_.Swap(&other->buy_);
    pointlist_.Swap(&other->pointlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalPreRechargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalPreRechargeData_descriptor_;
  metadata.reflection = FestivalPreRechargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalSuperDBData::kActiveIdFieldNumber;
const int FestivalSuperDBData::kNLastResetTimeFieldNumber;
const int FestivalSuperDBData::kNLoninCountFieldNumber;
const int FestivalSuperDBData::kGetIdFieldNumber;
const int FestivalSuperDBData::kActiveStateFieldNumber;
#endif  // !_MSC_VER

FestivalSuperDBData::FestivalSuperDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalSuperDBData::InitAsDefaultInstance() {
}

FestivalSuperDBData::FestivalSuperDBData(const FestivalSuperDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalSuperDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  nlastresettime_ = GOOGLE_ULONGLONG(0);
  nlonincount_ = 0u;
  getid_ = 0;
  active_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalSuperDBData::~FestivalSuperDBData() {
  SharedDtor();
}

void FestivalSuperDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalSuperDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalSuperDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalSuperDBData_descriptor_;
}

const FestivalSuperDBData& FestivalSuperDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalSuperDBData* FestivalSuperDBData::default_instance_ = NULL;

FestivalSuperDBData* FestivalSuperDBData::New() const {
  return new FestivalSuperDBData;
}

void FestivalSuperDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    nlastresettime_ = GOOGLE_ULONGLONG(0);
    nlonincount_ = 0u;
    getid_ = 0;
    active_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalSuperDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLastResetTime;
        break;
      }

      // optional uint64 nLastResetTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nlastresettime_)));
          set_has_nlastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nLoninCount;
        break;
      }

      // optional uint32 nLoninCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLoninCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlonincount_)));
          set_has_nlonincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getId;
        break;
      }

      // optional int32 getId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getid_)));
          set_has_getid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_active_state;
        break;
      }

      // optional int32 active_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_state_)));
          set_has_active_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalSuperDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint64 nLastResetTime = 2;
  if (has_nlastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nlastresettime(), output);
  }

  // optional uint32 nLoninCount = 3;
  if (has_nlonincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nlonincount(), output);
  }

  // optional int32 getId = 4;
  if (has_getid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->getid(), output);
  }

  // optional int32 active_state = 5;
  if (has_active_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->active_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalSuperDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint64 nLastResetTime = 2;
  if (has_nlastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nlastresettime(), target);
  }

  // optional uint32 nLoninCount = 3;
  if (has_nlonincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nlonincount(), target);
  }

  // optional int32 getId = 4;
  if (has_getid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->getid(), target);
  }

  // optional int32 active_state = 5;
  if (has_active_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->active_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalSuperDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint64 nLastResetTime = 2;
    if (has_nlastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nlastresettime());
    }

    // optional uint32 nLoninCount = 3;
    if (has_nlonincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nlonincount());
    }

    // optional int32 getId = 4;
    if (has_getid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getid());
    }

    // optional int32 active_state = 5;
    if (has_active_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalSuperDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalSuperDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalSuperDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalSuperDBData::MergeFrom(const FestivalSuperDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_nlastresettime()) {
      set_nlastresettime(from.nlastresettime());
    }
    if (from.has_nlonincount()) {
      set_nlonincount(from.nlonincount());
    }
    if (from.has_getid()) {
      set_getid(from.getid());
    }
    if (from.has_active_state()) {
      set_active_state(from.active_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalSuperDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalSuperDBData::CopyFrom(const FestivalSuperDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalSuperDBData::IsInitialized() const {

  return true;
}

void FestivalSuperDBData::Swap(FestivalSuperDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(nlastresettime_, other->nlastresettime_);
    std::swap(nlonincount_, other->nlonincount_);
    std::swap(getid_, other->getid_);
    std::swap(active_state_, other->active_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalSuperDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalSuperDBData_descriptor_;
  metadata.reflection = FestivalSuperDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalSuperDoubleDBData::kActiveIdFieldNumber;
const int FestivalSuperDoubleDBData::kNLastResetTimeFieldNumber;
const int FestivalSuperDoubleDBData::kCurGiftIdFieldNumber;
const int FestivalSuperDoubleDBData::kCurGiftStateFieldNumber;
const int FestivalSuperDoubleDBData::kCurDailyStateFieldNumber;
#endif  // !_MSC_VER

FestivalSuperDoubleDBData::FestivalSuperDoubleDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalSuperDoubleDBData::InitAsDefaultInstance() {
}

FestivalSuperDoubleDBData::FestivalSuperDoubleDBData(const FestivalSuperDoubleDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalSuperDoubleDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  nlastresettime_ = GOOGLE_ULONGLONG(0);
  curgiftid_ = 0u;
  curgiftstate_ = 0;
  curdailystate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalSuperDoubleDBData::~FestivalSuperDoubleDBData() {
  SharedDtor();
}

void FestivalSuperDoubleDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalSuperDoubleDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalSuperDoubleDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalSuperDoubleDBData_descriptor_;
}

const FestivalSuperDoubleDBData& FestivalSuperDoubleDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalSuperDoubleDBData* FestivalSuperDoubleDBData::default_instance_ = NULL;

FestivalSuperDoubleDBData* FestivalSuperDoubleDBData::New() const {
  return new FestivalSuperDoubleDBData;
}

void FestivalSuperDoubleDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    nlastresettime_ = GOOGLE_ULONGLONG(0);
    curgiftid_ = 0u;
    curgiftstate_ = 0;
    curdailystate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalSuperDoubleDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLastResetTime;
        break;
      }

      // optional uint64 nLastResetTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nlastresettime_)));
          set_has_nlastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curGiftId;
        break;
      }

      // optional uint32 curGiftId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curGiftId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curgiftid_)));
          set_has_curgiftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curGiftState;
        break;
      }

      // optional int32 curGiftState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curGiftState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curgiftstate_)));
          set_has_curgiftstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curDailyState;
        break;
      }

      // optional int32 curDailyState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curDailyState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curdailystate_)));
          set_has_curdailystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalSuperDoubleDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint64 nLastResetTime = 2;
  if (has_nlastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nlastresettime(), output);
  }

  // optional uint32 curGiftId = 3;
  if (has_curgiftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curgiftid(), output);
  }

  // optional int32 curGiftState = 4;
  if (has_curgiftstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curgiftstate(), output);
  }

  // optional int32 curDailyState = 5;
  if (has_curdailystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curdailystate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalSuperDoubleDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint64 nLastResetTime = 2;
  if (has_nlastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nlastresettime(), target);
  }

  // optional uint32 curGiftId = 3;
  if (has_curgiftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curgiftid(), target);
  }

  // optional int32 curGiftState = 4;
  if (has_curgiftstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curgiftstate(), target);
  }

  // optional int32 curDailyState = 5;
  if (has_curdailystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curdailystate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalSuperDoubleDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint64 nLastResetTime = 2;
    if (has_nlastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nlastresettime());
    }

    // optional uint32 curGiftId = 3;
    if (has_curgiftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curgiftid());
    }

    // optional int32 curGiftState = 4;
    if (has_curgiftstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curgiftstate());
    }

    // optional int32 curDailyState = 5;
    if (has_curdailystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curdailystate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalSuperDoubleDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalSuperDoubleDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalSuperDoubleDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalSuperDoubleDBData::MergeFrom(const FestivalSuperDoubleDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_nlastresettime()) {
      set_nlastresettime(from.nlastresettime());
    }
    if (from.has_curgiftid()) {
      set_curgiftid(from.curgiftid());
    }
    if (from.has_curgiftstate()) {
      set_curgiftstate(from.curgiftstate());
    }
    if (from.has_curdailystate()) {
      set_curdailystate(from.curdailystate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalSuperDoubleDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalSuperDoubleDBData::CopyFrom(const FestivalSuperDoubleDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalSuperDoubleDBData::IsInitialized() const {

  return true;
}

void FestivalSuperDoubleDBData::Swap(FestivalSuperDoubleDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(nlastresettime_, other->nlastresettime_);
    std::swap(curgiftid_, other->curgiftid_);
    std::swap(curgiftstate_, other->curgiftstate_);
    std::swap(curdailystate_, other->curdailystate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalSuperDoubleDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalSuperDoubleDBData_descriptor_;
  metadata.reflection = FestivalSuperDoubleDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalHuoYueDuDBData::kActiveIdFieldNumber;
const int FestivalHuoYueDuDBData::kNHuoYueDuFieldNumber;
const int FestivalHuoYueDuDBData::kGetStateFieldNumber;
#endif  // !_MSC_VER

FestivalHuoYueDuDBData::FestivalHuoYueDuDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalHuoYueDuDBData::InitAsDefaultInstance() {
}

FestivalHuoYueDuDBData::FestivalHuoYueDuDBData(const FestivalHuoYueDuDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalHuoYueDuDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  nhuoyuedu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalHuoYueDuDBData::~FestivalHuoYueDuDBData() {
  SharedDtor();
}

void FestivalHuoYueDuDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalHuoYueDuDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalHuoYueDuDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalHuoYueDuDBData_descriptor_;
}

const FestivalHuoYueDuDBData& FestivalHuoYueDuDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalHuoYueDuDBData* FestivalHuoYueDuDBData::default_instance_ = NULL;

FestivalHuoYueDuDBData* FestivalHuoYueDuDBData::New() const {
  return new FestivalHuoYueDuDBData;
}

void FestivalHuoYueDuDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    nhuoyuedu_ = 0u;
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalHuoYueDuDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nHuoYueDu;
        break;
      }

      // optional uint32 nHuoYueDu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nHuoYueDu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nhuoyuedu_)));
          set_has_nhuoyuedu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalHuoYueDuDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint32 nHuoYueDu = 2;
  if (has_nhuoyuedu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nhuoyuedu(), output);
  }

  // repeated .proto_ff.ComPair getState = 3;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalHuoYueDuDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint32 nHuoYueDu = 2;
  if (has_nhuoyuedu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nhuoyuedu(), target);
  }

  // repeated .proto_ff.ComPair getState = 3;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalHuoYueDuDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint32 nHuoYueDu = 2;
    if (has_nhuoyuedu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nhuoyuedu());
    }

  }
  // repeated .proto_ff.ComPair getState = 3;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalHuoYueDuDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalHuoYueDuDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalHuoYueDuDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalHuoYueDuDBData::MergeFrom(const FestivalHuoYueDuDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_nhuoyuedu()) {
      set_nhuoyuedu(from.nhuoyuedu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalHuoYueDuDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalHuoYueDuDBData::CopyFrom(const FestivalHuoYueDuDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalHuoYueDuDBData::IsInitialized() const {

  return true;
}

void FestivalHuoYueDuDBData::Swap(FestivalHuoYueDuDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(nhuoyuedu_, other->nhuoyuedu_);
    getstate_.Swap(&other->getstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalHuoYueDuDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalHuoYueDuDBData_descriptor_;
  metadata.reflection = FestivalHuoYueDuDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalFirstRechargeDBData::kActiveIdFieldNumber;
const int FestivalFirstRechargeDBData::kRechargeTimeFieldNumber;
const int FestivalFirstRechargeDBData::kGetStateFieldNumber;
#endif  // !_MSC_VER

FestivalFirstRechargeDBData::FestivalFirstRechargeDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalFirstRechargeDBData::InitAsDefaultInstance() {
}

FestivalFirstRechargeDBData::FestivalFirstRechargeDBData(const FestivalFirstRechargeDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalFirstRechargeDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  rechargetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalFirstRechargeDBData::~FestivalFirstRechargeDBData() {
  SharedDtor();
}

void FestivalFirstRechargeDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalFirstRechargeDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalFirstRechargeDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalFirstRechargeDBData_descriptor_;
}

const FestivalFirstRechargeDBData& FestivalFirstRechargeDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalFirstRechargeDBData* FestivalFirstRechargeDBData::default_instance_ = NULL;

FestivalFirstRechargeDBData* FestivalFirstRechargeDBData::New() const {
  return new FestivalFirstRechargeDBData;
}

void FestivalFirstRechargeDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    rechargetime_ = 0u;
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalFirstRechargeDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rechargeTime;
        break;
      }

      // optional uint32 rechargeTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargetime_)));
          set_has_rechargetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalFirstRechargeDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint32 rechargeTime = 2;
  if (has_rechargetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rechargetime(), output);
  }

  // repeated .proto_ff.ComPair getState = 3;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalFirstRechargeDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint32 rechargeTime = 2;
  if (has_rechargetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rechargetime(), target);
  }

  // repeated .proto_ff.ComPair getState = 3;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalFirstRechargeDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint32 rechargeTime = 2;
    if (has_rechargetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargetime());
    }

  }
  // repeated .proto_ff.ComPair getState = 3;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalFirstRechargeDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalFirstRechargeDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalFirstRechargeDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalFirstRechargeDBData::MergeFrom(const FestivalFirstRechargeDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_rechargetime()) {
      set_rechargetime(from.rechargetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalFirstRechargeDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalFirstRechargeDBData::CopyFrom(const FestivalFirstRechargeDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalFirstRechargeDBData::IsInitialized() const {

  return true;
}

void FestivalFirstRechargeDBData::Swap(FestivalFirstRechargeDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(rechargetime_, other->rechargetime_);
    getstate_.Swap(&other->getstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalFirstRechargeDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalFirstRechargeDBData_descriptor_;
  metadata.reflection = FestivalFirstRechargeDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalYanHuaDBData::kActiveIdFieldNumber;
const int FestivalYanHuaDBData::kGetItemsFieldNumber;
#endif  // !_MSC_VER

FestivalYanHuaDBData::FestivalYanHuaDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalYanHuaDBData::InitAsDefaultInstance() {
}

FestivalYanHuaDBData::FestivalYanHuaDBData(const FestivalYanHuaDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalYanHuaDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalYanHuaDBData::~FestivalYanHuaDBData() {
  SharedDtor();
}

void FestivalYanHuaDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalYanHuaDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalYanHuaDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalYanHuaDBData_descriptor_;
}

const FestivalYanHuaDBData& FestivalYanHuaDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalYanHuaDBData* FestivalYanHuaDBData::default_instance_ = NULL;

FestivalYanHuaDBData* FestivalYanHuaDBData::New() const {
  return new FestivalYanHuaDBData;
}

void FestivalYanHuaDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
  }
  getitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalYanHuaDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getItems;
        break;
      }

      // repeated uint64 getItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_getitems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_getitems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalYanHuaDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated uint64 getItems = 2;
  for (int i = 0; i < this->getitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->getitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalYanHuaDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated uint64 getItems = 2;
  for (int i = 0; i < this->getitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->getitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalYanHuaDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

  }
  // repeated uint64 getItems = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->getitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->getitems(i));
    }
    total_size += 1 * this->getitems_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalYanHuaDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalYanHuaDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalYanHuaDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalYanHuaDBData::MergeFrom(const FestivalYanHuaDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getitems_.MergeFrom(from.getitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalYanHuaDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalYanHuaDBData::CopyFrom(const FestivalYanHuaDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalYanHuaDBData::IsInitialized() const {

  return true;
}

void FestivalYanHuaDBData::Swap(FestivalYanHuaDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    getitems_.Swap(&other->getitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalYanHuaDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalYanHuaDBData_descriptor_;
  metadata.reflection = FestivalYanHuaDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalBigYanHuaDBData::kActiveIdFieldNumber;
const int FestivalBigYanHuaDBData::kGetItemsFieldNumber;
#endif  // !_MSC_VER

FestivalBigYanHuaDBData::FestivalBigYanHuaDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalBigYanHuaDBData::InitAsDefaultInstance() {
}

FestivalBigYanHuaDBData::FestivalBigYanHuaDBData(const FestivalBigYanHuaDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalBigYanHuaDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalBigYanHuaDBData::~FestivalBigYanHuaDBData() {
  SharedDtor();
}

void FestivalBigYanHuaDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalBigYanHuaDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalBigYanHuaDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalBigYanHuaDBData_descriptor_;
}

const FestivalBigYanHuaDBData& FestivalBigYanHuaDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalBigYanHuaDBData* FestivalBigYanHuaDBData::default_instance_ = NULL;

FestivalBigYanHuaDBData* FestivalBigYanHuaDBData::New() const {
  return new FestivalBigYanHuaDBData;
}

void FestivalBigYanHuaDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
  }
  getitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalBigYanHuaDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getItems;
        break;
      }

      // repeated uint64 getItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_getitems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_getitems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalBigYanHuaDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated uint64 getItems = 2;
  for (int i = 0; i < this->getitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->getitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalBigYanHuaDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated uint64 getItems = 2;
  for (int i = 0; i < this->getitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->getitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalBigYanHuaDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

  }
  // repeated uint64 getItems = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->getitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->getitems(i));
    }
    total_size += 1 * this->getitems_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalBigYanHuaDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalBigYanHuaDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalBigYanHuaDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalBigYanHuaDBData::MergeFrom(const FestivalBigYanHuaDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getitems_.MergeFrom(from.getitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalBigYanHuaDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalBigYanHuaDBData::CopyFrom(const FestivalBigYanHuaDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalBigYanHuaDBData::IsInitialized() const {

  return true;
}

void FestivalBigYanHuaDBData::Swap(FestivalBigYanHuaDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    getitems_.Swap(&other->getitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalBigYanHuaDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalBigYanHuaDBData_descriptor_;
  metadata.reflection = FestivalBigYanHuaDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalShopDBData::kActiveIdFieldNumber;
const int FestivalShopDBData::kBuyCountFieldNumber;
#endif  // !_MSC_VER

FestivalShopDBData::FestivalShopDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalShopDBData::InitAsDefaultInstance() {
}

FestivalShopDBData::FestivalShopDBData(const FestivalShopDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalShopDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalShopDBData::~FestivalShopDBData() {
  SharedDtor();
}

void FestivalShopDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalShopDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalShopDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalShopDBData_descriptor_;
}

const FestivalShopDBData& FestivalShopDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalShopDBData* FestivalShopDBData::default_instance_ = NULL;

FestivalShopDBData* FestivalShopDBData::New() const {
  return new FestivalShopDBData;
}

void FestivalShopDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
  }
  buycount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalShopDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buyCount;
        break;
      }

      // repeated .proto_ff.ComPair64 buyCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buycount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buyCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalShopDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated .proto_ff.ComPair64 buyCount = 2;
  for (int i = 0; i < this->buycount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buycount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalShopDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated .proto_ff.ComPair64 buyCount = 2;
  for (int i = 0; i < this->buycount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buycount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalShopDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

  }
  // repeated .proto_ff.ComPair64 buyCount = 2;
  total_size += 1 * this->buycount_size();
  for (int i = 0; i < this->buycount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buycount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalShopDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalShopDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalShopDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalShopDBData::MergeFrom(const FestivalShopDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buycount_.MergeFrom(from.buycount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalShopDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalShopDBData::CopyFrom(const FestivalShopDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalShopDBData::IsInitialized() const {

  return true;
}

void FestivalShopDBData::Swap(FestivalShopDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    buycount_.Swap(&other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalShopDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalShopDBData_descriptor_;
  metadata.reflection = FestivalShopDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitGiftDBData::kGiftIdFieldNumber;
const int LimitGiftDBData::kBuyTimeFieldNumber;
const int LimitGiftDBData::kGetStateFieldNumber;
const int LimitGiftDBData::kTotalBackFieldNumber;
const int LimitGiftDBData::kOpenTimeFieldNumber;
const int LimitGiftDBData::kLastResetTimeFieldNumber;
#endif  // !_MSC_VER

LimitGiftDBData::LimitGiftDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitGiftDBData::InitAsDefaultInstance() {
}

LimitGiftDBData::LimitGiftDBData(const LimitGiftDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitGiftDBData::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  getstate_ = 0u;
  totalback_ = 0u;
  opentime_ = 0u;
  lastresettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitGiftDBData::~LimitGiftDBData() {
  SharedDtor();
}

void LimitGiftDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitGiftDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitGiftDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitGiftDBData_descriptor_;
}

const LimitGiftDBData& LimitGiftDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

LimitGiftDBData* LimitGiftDBData::default_instance_ = NULL;

LimitGiftDBData* LimitGiftDBData::New() const {
  return new LimitGiftDBData;
}

void LimitGiftDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giftid_ = 0u;
    buytime_ = GOOGLE_ULONGLONG(0);
    getstate_ = 0u;
    totalback_ = 0u;
    opentime_ = 0u;
    lastresettime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitGiftDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 giftId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyTime;
        break;
      }

      // optional uint64 buyTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getState;
        break;
      }

      // optional uint32 getState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getstate_)));
          set_has_getstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalBack;
        break;
      }

      // optional uint32 totalBack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalback_)));
          set_has_totalback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_openTime;
        break;
      }

      // optional uint32 openTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastResetTime;
        break;
      }

      // optional uint64 lastResetTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastresettime_)));
          set_has_lastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitGiftDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 giftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giftid(), output);
  }

  // optional uint64 buyTime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buytime(), output);
  }

  // optional uint32 getState = 3;
  if (has_getstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->getstate(), output);
  }

  // optional uint32 totalBack = 4;
  if (has_totalback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalback(), output);
  }

  // optional uint32 openTime = 5;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->opentime(), output);
  }

  // optional uint64 lastResetTime = 6;
  if (has_lastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->lastresettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitGiftDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 giftId = 1;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giftid(), target);
  }

  // optional uint64 buyTime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buytime(), target);
  }

  // optional uint32 getState = 3;
  if (has_getstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->getstate(), target);
  }

  // optional uint32 totalBack = 4;
  if (has_totalback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalback(), target);
  }

  // optional uint32 openTime = 5;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->opentime(), target);
  }

  // optional uint64 lastResetTime = 6;
  if (has_lastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->lastresettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitGiftDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 giftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftid());
    }

    // optional uint64 buyTime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

    // optional uint32 getState = 3;
    if (has_getstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getstate());
    }

    // optional uint32 totalBack = 4;
    if (has_totalback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalback());
    }

    // optional uint32 openTime = 5;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opentime());
    }

    // optional uint64 lastResetTime = 6;
    if (has_lastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastresettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitGiftDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitGiftDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitGiftDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitGiftDBData::MergeFrom(const LimitGiftDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
    if (from.has_getstate()) {
      set_getstate(from.getstate());
    }
    if (from.has_totalback()) {
      set_totalback(from.totalback());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_lastresettime()) {
      set_lastresettime(from.lastresettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitGiftDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitGiftDBData::CopyFrom(const LimitGiftDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitGiftDBData::IsInitialized() const {

  return true;
}

void LimitGiftDBData::Swap(LimitGiftDBData* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(buytime_, other->buytime_);
    std::swap(getstate_, other->getstate_);
    std::swap(totalback_, other->totalback_);
    std::swap(opentime_, other->opentime_);
    std::swap(lastresettime_, other->lastresettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitGiftDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitGiftDBData_descriptor_;
  metadata.reflection = LimitGiftDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitGiftActiveDBData::kActiveIdFieldNumber;
const int LimitGiftActiveDBData::kIsFinishFieldNumber;
const int LimitGiftActiveDBData::kGiftListFieldNumber;
#endif  // !_MSC_VER

LimitGiftActiveDBData::LimitGiftActiveDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitGiftActiveDBData::InitAsDefaultInstance() {
}

LimitGiftActiveDBData::LimitGiftActiveDBData(const LimitGiftActiveDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitGiftActiveDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  isfinish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitGiftActiveDBData::~LimitGiftActiveDBData() {
  SharedDtor();
}

void LimitGiftActiveDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitGiftActiveDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitGiftActiveDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitGiftActiveDBData_descriptor_;
}

const LimitGiftActiveDBData& LimitGiftActiveDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

LimitGiftActiveDBData* LimitGiftActiveDBData::default_instance_ = NULL;

LimitGiftActiveDBData* LimitGiftActiveDBData::New() const {
  return new LimitGiftActiveDBData;
}

void LimitGiftActiveDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    isfinish_ = false;
  }
  giftlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitGiftActiveDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isFinish;
        break;
      }

      // optional bool isFinish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinish_)));
          set_has_isfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_giftList;
        break;
      }

      // repeated .proto_ff.LimitGiftDBData giftList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_giftList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitGiftActiveDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional bool isFinish = 2;
  if (has_isfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfinish(), output);
  }

  // repeated .proto_ff.LimitGiftDBData giftList = 3;
  for (int i = 0; i < this->giftlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->giftlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitGiftActiveDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional bool isFinish = 2;
  if (has_isfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfinish(), target);
  }

  // repeated .proto_ff.LimitGiftDBData giftList = 3;
  for (int i = 0; i < this->giftlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->giftlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitGiftActiveDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional bool isFinish = 2;
    if (has_isfinish()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto_ff.LimitGiftDBData giftList = 3;
  total_size += 1 * this->giftlist_size();
  for (int i = 0; i < this->giftlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitGiftActiveDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitGiftActiveDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitGiftActiveDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitGiftActiveDBData::MergeFrom(const LimitGiftActiveDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  giftlist_.MergeFrom(from.giftlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_isfinish()) {
      set_isfinish(from.isfinish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitGiftActiveDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitGiftActiveDBData::CopyFrom(const LimitGiftActiveDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitGiftActiveDBData::IsInitialized() const {

  return true;
}

void LimitGiftActiveDBData::Swap(LimitGiftActiveDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(isfinish_, other->isfinish_);
    giftlist_.Swap(&other->giftlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitGiftActiveDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitGiftActiveDBData_descriptor_;
  metadata.reflection = LimitGiftActiveDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FRechargeDBData::kPointIdFieldNumber;
const int FRechargeDBData::kStateFieldNumber;
#endif  // !_MSC_VER

FRechargeDBData::FRechargeDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FRechargeDBData::InitAsDefaultInstance() {
}

FRechargeDBData::FRechargeDBData(const FRechargeDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FRechargeDBData::SharedCtor() {
  _cached_size_ = 0;
  pointid_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FRechargeDBData::~FRechargeDBData() {
  SharedDtor();
}

void FRechargeDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FRechargeDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FRechargeDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRechargeDBData_descriptor_;
}

const FRechargeDBData& FRechargeDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FRechargeDBData* FRechargeDBData::default_instance_ = NULL;

FRechargeDBData* FRechargeDBData::New() const {
  return new FRechargeDBData;
}

void FRechargeDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pointid_ = GOOGLE_ULONGLONG(0);
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FRechargeDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pointId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pointid_)));
          set_has_pointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FRechargeDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pointId = 1;
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pointid(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FRechargeDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pointId = 1;
  if (has_pointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pointid(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FRechargeDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pointId = 1;
    if (has_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pointid());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FRechargeDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FRechargeDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FRechargeDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FRechargeDBData::MergeFrom(const FRechargeDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pointid()) {
      set_pointid(from.pointid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FRechargeDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FRechargeDBData::CopyFrom(const FRechargeDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FRechargeDBData::IsInitialized() const {

  return true;
}

void FRechargeDBData::Swap(FRechargeDBData* other) {
  if (other != this) {
    std::swap(pointid_, other->pointid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FRechargeDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FRechargeDBData_descriptor_;
  metadata.reflection = FRechargeDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FRechargeActiveDBData::kActiveIdFieldNumber;
const int FRechargeActiveDBData::kDataListFieldNumber;
#endif  // !_MSC_VER

FRechargeActiveDBData::FRechargeActiveDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FRechargeActiveDBData::InitAsDefaultInstance() {
}

FRechargeActiveDBData::FRechargeActiveDBData(const FRechargeActiveDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FRechargeActiveDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FRechargeActiveDBData::~FRechargeActiveDBData() {
  SharedDtor();
}

void FRechargeActiveDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FRechargeActiveDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FRechargeActiveDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRechargeActiveDBData_descriptor_;
}

const FRechargeActiveDBData& FRechargeActiveDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FRechargeActiveDBData* FRechargeActiveDBData::default_instance_ = NULL;

FRechargeActiveDBData* FRechargeActiveDBData::New() const {
  return new FRechargeActiveDBData;
}

void FRechargeActiveDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
  }
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FRechargeActiveDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataList;
        break;
      }

      // repeated .proto_ff.FRechargeDBData dataList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FRechargeActiveDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated .proto_ff.FRechargeDBData dataList = 2;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FRechargeActiveDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated .proto_ff.FRechargeDBData dataList = 2;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FRechargeActiveDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

  }
  // repeated .proto_ff.FRechargeDBData dataList = 2;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FRechargeActiveDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FRechargeActiveDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FRechargeActiveDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FRechargeActiveDBData::MergeFrom(const FRechargeActiveDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FRechargeActiveDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FRechargeActiveDBData::CopyFrom(const FRechargeActiveDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FRechargeActiveDBData::IsInitialized() const {

  return true;
}

void FRechargeActiveDBData::Swap(FRechargeActiveDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FRechargeActiveDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FRechargeActiveDBData_descriptor_;
  metadata.reflection = FRechargeActiveDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FSmashEggDBData::kItemIdFieldNumber;
const int FSmashEggDBData::kPositionFieldNumber;
const int FSmashEggDBData::kQualityFieldNumber;
const int FSmashEggDBData::kItemNumFieldNumber;
#endif  // !_MSC_VER

FSmashEggDBData::FSmashEggDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FSmashEggDBData::InitAsDefaultInstance() {
}

FSmashEggDBData::FSmashEggDBData(const FSmashEggDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FSmashEggDBData::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  position_ = 0u;
  quality_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FSmashEggDBData::~FSmashEggDBData() {
  SharedDtor();
}

void FSmashEggDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FSmashEggDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FSmashEggDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FSmashEggDBData_descriptor_;
}

const FSmashEggDBData& FSmashEggDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FSmashEggDBData* FSmashEggDBData::default_instance_ = NULL;

FSmashEggDBData* FSmashEggDBData::New() const {
  return new FSmashEggDBData;
}

void FSmashEggDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_ULONGLONG(0);
    position_ = 0u;
    quality_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FSmashEggDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemNum;
        break;
      }

      // optional uint32 itemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FSmashEggDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // optional uint32 itemNum = 4;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FSmashEggDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // optional uint32 itemNum = 4;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FSmashEggDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 itemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSmashEggDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FSmashEggDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FSmashEggDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FSmashEggDBData::MergeFrom(const FSmashEggDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FSmashEggDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSmashEggDBData::CopyFrom(const FSmashEggDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSmashEggDBData::IsInitialized() const {

  return true;
}

void FSmashEggDBData::Swap(FSmashEggDBData* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(position_, other->position_);
    std::swap(quality_, other->quality_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FSmashEggDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FSmashEggDBData_descriptor_;
  metadata.reflection = FSmashEggDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalSmashEggDBData::kActiveIdFieldNumber;
const int FestivalSmashEggDBData::kSmashCountFieldNumber;
const int FestivalSmashEggDBData::kSmashCountTodayFieldNumber;
const int FestivalSmashEggDBData::kFreeTimeDeadLineFieldNumber;
const int FestivalSmashEggDBData::kAddRateCountFieldNumber;
const int FestivalSmashEggDBData::kResetRewardTimeFieldNumber;
const int FestivalSmashEggDBData::kEggDataFieldNumber;
const int FestivalSmashEggDBData::kRewardGetStateFieldNumber;
const int FestivalSmashEggDBData::kDaynumFieldNumber;
const int FestivalSmashEggDBData::kLastTimeFieldNumber;
#endif  // !_MSC_VER

FestivalSmashEggDBData::FestivalSmashEggDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalSmashEggDBData::InitAsDefaultInstance() {
}

FestivalSmashEggDBData::FestivalSmashEggDBData(const FestivalSmashEggDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalSmashEggDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  smashcount_ = GOOGLE_ULONGLONG(0);
  smashcounttoday_ = GOOGLE_ULONGLONG(0);
  freetimedeadline_ = GOOGLE_ULONGLONG(0);
  addratecount_ = 0u;
  resetrewardtime_ = 0u;
  daynum_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalSmashEggDBData::~FestivalSmashEggDBData() {
  SharedDtor();
}

void FestivalSmashEggDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalSmashEggDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalSmashEggDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalSmashEggDBData_descriptor_;
}

const FestivalSmashEggDBData& FestivalSmashEggDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalSmashEggDBData* FestivalSmashEggDBData::default_instance_ = NULL;

FestivalSmashEggDBData* FestivalSmashEggDBData::New() const {
  return new FestivalSmashEggDBData;
}

void FestivalSmashEggDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    smashcount_ = GOOGLE_ULONGLONG(0);
    smashcounttoday_ = GOOGLE_ULONGLONG(0);
    freetimedeadline_ = GOOGLE_ULONGLONG(0);
    addratecount_ = 0u;
    resetrewardtime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    daynum_ = 0;
    lasttime_ = GOOGLE_LONGLONG(0);
  }
  eggdata_.Clear();
  rewardgetstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalSmashEggDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_smashCount;
        break;
      }

      // optional uint64 smashCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smashCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &smashcount_)));
          set_has_smashcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_smashCountToday;
        break;
      }

      // optional uint64 smashCountToday = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smashCountToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &smashcounttoday_)));
          set_has_smashcounttoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_freeTimeDeadLine;
        break;
      }

      // optional uint64 freeTimeDeadLine = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTimeDeadLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freetimedeadline_)));
          set_has_freetimedeadline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addRateCount;
        break;
      }

      // optional uint32 addRateCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addRateCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addratecount_)));
          set_has_addratecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resetRewardTime;
        break;
      }

      // optional uint32 resetRewardTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetrewardtime_)));
          set_has_resetrewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_eggData;
        break;
      }

      // repeated .proto_ff.FSmashEggDBData eggData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eggData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eggdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_eggData;
        if (input->ExpectTag(66)) goto parse_rewardGetState;
        break;
      }

      // repeated .proto_ff.ComPair rewardGetState = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardGetState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardgetstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rewardGetState;
        if (input->ExpectTag(72)) goto parse_daynum;
        break;
      }

      // optional int32 daynum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lastTime;
        break;
      }

      // optional int64 lastTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalSmashEggDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint64 smashCount = 2;
  if (has_smashcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->smashcount(), output);
  }

  // optional uint64 smashCountToday = 3;
  if (has_smashcounttoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->smashcounttoday(), output);
  }

  // optional uint64 freeTimeDeadLine = 4;
  if (has_freetimedeadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->freetimedeadline(), output);
  }

  // optional uint32 addRateCount = 5;
  if (has_addratecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addratecount(), output);
  }

  // optional uint32 resetRewardTime = 6;
  if (has_resetrewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->resetrewardtime(), output);
  }

  // repeated .proto_ff.FSmashEggDBData eggData = 7;
  for (int i = 0; i < this->eggdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->eggdata(i), output);
  }

  // repeated .proto_ff.ComPair rewardGetState = 8;
  for (int i = 0; i < this->rewardgetstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rewardgetstate(i), output);
  }

  // optional int32 daynum = 9;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->daynum(), output);
  }

  // optional int64 lastTime = 10;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalSmashEggDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint64 smashCount = 2;
  if (has_smashcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->smashcount(), target);
  }

  // optional uint64 smashCountToday = 3;
  if (has_smashcounttoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->smashcounttoday(), target);
  }

  // optional uint64 freeTimeDeadLine = 4;
  if (has_freetimedeadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->freetimedeadline(), target);
  }

  // optional uint32 addRateCount = 5;
  if (has_addratecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addratecount(), target);
  }

  // optional uint32 resetRewardTime = 6;
  if (has_resetrewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->resetrewardtime(), target);
  }

  // repeated .proto_ff.FSmashEggDBData eggData = 7;
  for (int i = 0; i < this->eggdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->eggdata(i), target);
  }

  // repeated .proto_ff.ComPair rewardGetState = 8;
  for (int i = 0; i < this->rewardgetstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rewardgetstate(i), target);
  }

  // optional int32 daynum = 9;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->daynum(), target);
  }

  // optional int64 lastTime = 10;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalSmashEggDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint64 smashCount = 2;
    if (has_smashcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->smashcount());
    }

    // optional uint64 smashCountToday = 3;
    if (has_smashcounttoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->smashcounttoday());
    }

    // optional uint64 freeTimeDeadLine = 4;
    if (has_freetimedeadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freetimedeadline());
    }

    // optional uint32 addRateCount = 5;
    if (has_addratecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addratecount());
    }

    // optional uint32 resetRewardTime = 6;
    if (has_resetrewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetrewardtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 daynum = 9;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

    // optional int64 lastTime = 10;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

  }
  // repeated .proto_ff.FSmashEggDBData eggData = 7;
  total_size += 1 * this->eggdata_size();
  for (int i = 0; i < this->eggdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eggdata(i));
  }

  // repeated .proto_ff.ComPair rewardGetState = 8;
  total_size += 1 * this->rewardgetstate_size();
  for (int i = 0; i < this->rewardgetstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardgetstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalSmashEggDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalSmashEggDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalSmashEggDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalSmashEggDBData::MergeFrom(const FestivalSmashEggDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  eggdata_.MergeFrom(from.eggdata_);
  rewardgetstate_.MergeFrom(from.rewardgetstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_smashcount()) {
      set_smashcount(from.smashcount());
    }
    if (from.has_smashcounttoday()) {
      set_smashcounttoday(from.smashcounttoday());
    }
    if (from.has_freetimedeadline()) {
      set_freetimedeadline(from.freetimedeadline());
    }
    if (from.has_addratecount()) {
      set_addratecount(from.addratecount());
    }
    if (from.has_resetrewardtime()) {
      set_resetrewardtime(from.resetrewardtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalSmashEggDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalSmashEggDBData::CopyFrom(const FestivalSmashEggDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalSmashEggDBData::IsInitialized() const {

  return true;
}

void FestivalSmashEggDBData::Swap(FestivalSmashEggDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(smashcount_, other->smashcount_);
    std::swap(smashcounttoday_, other->smashcounttoday_);
    std::swap(freetimedeadline_, other->freetimedeadline_);
    std::swap(addratecount_, other->addratecount_);
    std::swap(resetrewardtime_, other->resetrewardtime_);
    eggdata_.Swap(&other->eggdata_);
    rewardgetstate_.Swap(&other->rewardgetstate_);
    std::swap(daynum_, other->daynum_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalSmashEggDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalSmashEggDBData_descriptor_;
  metadata.reflection = FestivalSmashEggDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateReward::kKeyIdFieldNumber;
const int OperateReward::kIsFinishFieldNumber;
const int OperateReward::kIsReceiveRewardFieldNumber;
const int OperateReward::kRechargeDaysFieldNumber;
#endif  // !_MSC_VER

OperateReward::OperateReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateReward::InitAsDefaultInstance() {
  rechargedays_ = const_cast< ::proto_ff::ComPair*>(&::proto_ff::ComPair::default_instance());
}

OperateReward::OperateReward(const OperateReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateReward::SharedCtor() {
  _cached_size_ = 0;
  key_id_ = GOOGLE_ULONGLONG(0);
  isfinish_ = false;
  isreceivereward_ = false;
  rechargedays_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateReward::~OperateReward() {
  SharedDtor();
}

void OperateReward::SharedDtor() {
  if (this != default_instance_) {
    delete rechargedays_;
  }
}

void OperateReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateReward_descriptor_;
}

const OperateReward& OperateReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateReward* OperateReward::default_instance_ = NULL;

OperateReward* OperateReward::New() const {
  return new OperateReward;
}

void OperateReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_id_ = GOOGLE_ULONGLONG(0);
    isfinish_ = false;
    isreceivereward_ = false;
    if (has_rechargedays()) {
      if (rechargedays_ != NULL) rechargedays_->::proto_ff::ComPair::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_id_)));
          set_has_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isFinish;
        break;
      }

      // optional bool isFinish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinish_)));
          set_has_isfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isReceiveReward;
        break;
      }

      // optional bool isReceiveReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReceiveReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceivereward_)));
          set_has_isreceivereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rechargeDays;
        break;
      }

      // optional .proto_ff.ComPair rechargeDays = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeDays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rechargedays()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 key_id = 1;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key_id(), output);
  }

  // optional bool isFinish = 2;
  if (has_isfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfinish(), output);
  }

  // optional bool isReceiveReward = 3;
  if (has_isreceivereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isreceivereward(), output);
  }

  // optional .proto_ff.ComPair rechargeDays = 4;
  if (has_rechargedays()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rechargedays(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 key_id = 1;
  if (has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key_id(), target);
  }

  // optional bool isFinish = 2;
  if (has_isfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfinish(), target);
  }

  // optional bool isReceiveReward = 3;
  if (has_isreceivereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isreceivereward(), target);
  }

  // optional .proto_ff.ComPair rechargeDays = 4;
  if (has_rechargedays()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rechargedays(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 key_id = 1;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_id());
    }

    // optional bool isFinish = 2;
    if (has_isfinish()) {
      total_size += 1 + 1;
    }

    // optional bool isReceiveReward = 3;
    if (has_isreceivereward()) {
      total_size += 1 + 1;
    }

    // optional .proto_ff.ComPair rechargeDays = 4;
    if (has_rechargedays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rechargedays());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateReward::MergeFrom(const OperateReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
    if (from.has_isfinish()) {
      set_isfinish(from.isfinish());
    }
    if (from.has_isreceivereward()) {
      set_isreceivereward(from.isreceivereward());
    }
    if (from.has_rechargedays()) {
      mutable_rechargedays()->::proto_ff::ComPair::MergeFrom(from.rechargedays());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateReward::CopyFrom(const OperateReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateReward::IsInitialized() const {

  return true;
}

void OperateReward::Swap(OperateReward* other) {
  if (other != this) {
    std::swap(key_id_, other->key_id_);
    std::swap(isfinish_, other->isfinish_);
    std::swap(isreceivereward_, other->isreceivereward_);
    std::swap(rechargedays_, other->rechargedays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateReward_descriptor_;
  metadata.reflection = OperateReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateDailyRechargeData::kIdFieldNumber;
const int OperateDailyRechargeData::kRmbTodayFieldNumber;
const int OperateDailyRechargeData::kRmbTotalFieldNumber;
const int OperateDailyRechargeData::kLastRechargeDateFieldNumber;
const int OperateDailyRechargeData::kListFieldNumber;
#endif  // !_MSC_VER

OperateDailyRechargeData::OperateDailyRechargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateDailyRechargeData::InitAsDefaultInstance() {
}

OperateDailyRechargeData::OperateDailyRechargeData(const OperateDailyRechargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateDailyRechargeData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  rmbtoday_ = 0u;
  rmbtotal_ = 0u;
  lastrechargedate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateDailyRechargeData::~OperateDailyRechargeData() {
  SharedDtor();
}

void OperateDailyRechargeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateDailyRechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateDailyRechargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateDailyRechargeData_descriptor_;
}

const OperateDailyRechargeData& OperateDailyRechargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateDailyRechargeData* OperateDailyRechargeData::default_instance_ = NULL;

OperateDailyRechargeData* OperateDailyRechargeData::New() const {
  return new OperateDailyRechargeData;
}

void OperateDailyRechargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    rmbtoday_ = 0u;
    rmbtotal_ = 0u;
    lastrechargedate_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateDailyRechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rmbToday;
        break;
      }

      // optional uint32 rmbToday = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmbToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rmbtoday_)));
          set_has_rmbtoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rmbTotal;
        break;
      }

      // optional uint32 rmbTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmbTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rmbtotal_)));
          set_has_rmbtotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastRechargeDate;
        break;
      }

      // optional uint32 lastRechargeDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRechargeDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrechargedate_)));
          set_has_lastrechargedate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }

      // repeated .proto_ff.OperateReward list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateDailyRechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 rmbToday = 2;
  if (has_rmbtoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rmbtoday(), output);
  }

  // optional uint32 rmbTotal = 3;
  if (has_rmbtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rmbtotal(), output);
  }

  // optional uint32 lastRechargeDate = 4;
  if (has_lastrechargedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastrechargedate(), output);
  }

  // repeated .proto_ff.OperateReward list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateDailyRechargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 rmbToday = 2;
  if (has_rmbtoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rmbtoday(), target);
  }

  // optional uint32 rmbTotal = 3;
  if (has_rmbtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rmbtotal(), target);
  }

  // optional uint32 lastRechargeDate = 4;
  if (has_lastrechargedate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastrechargedate(), target);
  }

  // repeated .proto_ff.OperateReward list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateDailyRechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 rmbToday = 2;
    if (has_rmbtoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rmbtoday());
    }

    // optional uint32 rmbTotal = 3;
    if (has_rmbtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rmbtotal());
    }

    // optional uint32 lastRechargeDate = 4;
    if (has_lastrechargedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrechargedate());
    }

  }
  // repeated .proto_ff.OperateReward list = 5;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateDailyRechargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateDailyRechargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateDailyRechargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateDailyRechargeData::MergeFrom(const OperateDailyRechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rmbtoday()) {
      set_rmbtoday(from.rmbtoday());
    }
    if (from.has_rmbtotal()) {
      set_rmbtotal(from.rmbtotal());
    }
    if (from.has_lastrechargedate()) {
      set_lastrechargedate(from.lastrechargedate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateDailyRechargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateDailyRechargeData::CopyFrom(const OperateDailyRechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateDailyRechargeData::IsInitialized() const {

  return true;
}

void OperateDailyRechargeData::Swap(OperateDailyRechargeData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rmbtoday_, other->rmbtoday_);
    std::swap(rmbtotal_, other->rmbtotal_);
    std::swap(lastrechargedate_, other->lastrechargedate_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateDailyRechargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateDailyRechargeData_descriptor_;
  metadata.reflection = OperateDailyRechargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateMoonCardData::kIdFieldNumber;
const int OperateMoonCardData::kBuyDateFieldNumber;
const int OperateMoonCardData::kListFieldNumber;
#endif  // !_MSC_VER

OperateMoonCardData::OperateMoonCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateMoonCardData::InitAsDefaultInstance() {
}

OperateMoonCardData::OperateMoonCardData(const OperateMoonCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateMoonCardData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  buydate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateMoonCardData::~OperateMoonCardData() {
  SharedDtor();
}

void OperateMoonCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateMoonCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateMoonCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateMoonCardData_descriptor_;
}

const OperateMoonCardData& OperateMoonCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateMoonCardData* OperateMoonCardData::default_instance_ = NULL;

OperateMoonCardData* OperateMoonCardData::New() const {
  return new OperateMoonCardData;
}

void OperateMoonCardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    buydate_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateMoonCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyDate;
        break;
      }

      // optional uint32 buyDate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buydate_)));
          set_has_buydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .proto_ff.OperateReward list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateMoonCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 buyDate = 2;
  if (has_buydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buydate(), output);
  }

  // repeated .proto_ff.OperateReward list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateMoonCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 buyDate = 2;
  if (has_buydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buydate(), target);
  }

  // repeated .proto_ff.OperateReward list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateMoonCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 buyDate = 2;
    if (has_buydate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buydate());
    }

  }
  // repeated .proto_ff.OperateReward list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateMoonCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateMoonCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateMoonCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateMoonCardData::MergeFrom(const OperateMoonCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buydate()) {
      set_buydate(from.buydate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateMoonCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateMoonCardData::CopyFrom(const OperateMoonCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateMoonCardData::IsInitialized() const {

  return true;
}

void OperateMoonCardData::Swap(OperateMoonCardData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buydate_, other->buydate_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateMoonCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateMoonCardData_descriptor_;
  metadata.reflection = OperateMoonCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateFundData::kIdFieldNumber;
const int OperateFundData::kLevelFieldNumber;
const int OperateFundData::kBuyDateFieldNumber;
const int OperateFundData::kListFieldNumber;
#endif  // !_MSC_VER

OperateFundData::OperateFundData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateFundData::InitAsDefaultInstance() {
}

OperateFundData::OperateFundData(const OperateFundData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateFundData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  buydate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateFundData::~OperateFundData() {
  SharedDtor();
}

void OperateFundData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateFundData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateFundData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateFundData_descriptor_;
}

const OperateFundData& OperateFundData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateFundData* OperateFundData::default_instance_ = NULL;

OperateFundData* OperateFundData::New() const {
  return new OperateFundData;
}

void OperateFundData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    buydate_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateFundData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyDate;
        break;
      }

      // optional uint32 buyDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buydate_)));
          set_has_buydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list;
        break;
      }

      // repeated .proto_ff.OperateReward list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateFundData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 buyDate = 3;
  if (has_buydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buydate(), output);
  }

  // repeated .proto_ff.OperateReward list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateFundData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 buyDate = 3;
  if (has_buydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buydate(), target);
  }

  // repeated .proto_ff.OperateReward list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateFundData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 buyDate = 3;
    if (has_buydate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buydate());
    }

  }
  // repeated .proto_ff.OperateReward list = 4;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateFundData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateFundData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateFundData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateFundData::MergeFrom(const OperateFundData& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_buydate()) {
      set_buydate(from.buydate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateFundData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateFundData::CopyFrom(const OperateFundData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateFundData::IsInitialized() const {

  return true;
}

void OperateFundData::Swap(OperateFundData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(buydate_, other->buydate_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateFundData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateFundData_descriptor_;
  metadata.reflection = OperateFundData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateFirstRechargeType::kTypeFieldNumber;
const int OperateFirstRechargeType::kUpdateTimeFieldNumber;
const int OperateFirstRechargeType::kLoginDayFieldNumber;
#endif  // !_MSC_VER

OperateFirstRechargeType::OperateFirstRechargeType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateFirstRechargeType::InitAsDefaultInstance() {
}

OperateFirstRechargeType::OperateFirstRechargeType(const OperateFirstRechargeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateFirstRechargeType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  updatetime_ = GOOGLE_ULONGLONG(0);
  loginday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateFirstRechargeType::~OperateFirstRechargeType() {
  SharedDtor();
}

void OperateFirstRechargeType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateFirstRechargeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateFirstRechargeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateFirstRechargeType_descriptor_;
}

const OperateFirstRechargeType& OperateFirstRechargeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateFirstRechargeType* OperateFirstRechargeType::default_instance_ = NULL;

OperateFirstRechargeType* OperateFirstRechargeType::New() const {
  return new OperateFirstRechargeType;
}

void OperateFirstRechargeType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    updatetime_ = GOOGLE_ULONGLONG(0);
    loginday_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateFirstRechargeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_updateTime;
        break;
      }

      // optional uint64 updateTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loginDay;
        break;
      }

      // optional int32 loginDay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginday_)));
          set_has_loginday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateFirstRechargeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional uint64 updateTime = 2;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->updatetime(), output);
  }

  // optional int32 loginDay = 3;
  if (has_loginday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loginday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateFirstRechargeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional uint64 updateTime = 2;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->updatetime(), target);
  }

  // optional int32 loginDay = 3;
  if (has_loginday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loginday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateFirstRechargeType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 updateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

    // optional int32 loginDay = 3;
    if (has_loginday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateFirstRechargeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateFirstRechargeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateFirstRechargeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateFirstRechargeType::MergeFrom(const OperateFirstRechargeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_loginday()) {
      set_loginday(from.loginday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateFirstRechargeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateFirstRechargeType::CopyFrom(const OperateFirstRechargeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateFirstRechargeType::IsInitialized() const {

  return true;
}

void OperateFirstRechargeType::Swap(OperateFirstRechargeType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(loginday_, other->loginday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateFirstRechargeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateFirstRechargeType_descriptor_;
  metadata.reflection = OperateFirstRechargeType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateFirstRechargeData::kIdFieldNumber;
const int OperateFirstRechargeData::kListFieldNumber;
const int OperateFirstRechargeData::kFirstTypeFieldNumber;
const int OperateFirstRechargeData::kRmbFieldNumber;
#endif  // !_MSC_VER

OperateFirstRechargeData::OperateFirstRechargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateFirstRechargeData::InitAsDefaultInstance() {
}

OperateFirstRechargeData::OperateFirstRechargeData(const OperateFirstRechargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateFirstRechargeData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  rmb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateFirstRechargeData::~OperateFirstRechargeData() {
  SharedDtor();
}

void OperateFirstRechargeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateFirstRechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateFirstRechargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateFirstRechargeData_descriptor_;
}

const OperateFirstRechargeData& OperateFirstRechargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateFirstRechargeData* OperateFirstRechargeData::default_instance_ = NULL;

OperateFirstRechargeData* OperateFirstRechargeData::New() const {
  return new OperateFirstRechargeData;
}

void OperateFirstRechargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    rmb_ = 0;
  }
  list_.Clear();
  firsttype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateFirstRechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .proto_ff.OperateReward list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectTag(26)) goto parse_firstType;
        break;
      }

      // repeated .proto_ff.OperateFirstRechargeType firstType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firstType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firsttype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_firstType;
        if (input->ExpectTag(32)) goto parse_rmb;
        break;
      }

      // optional int32 rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateFirstRechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.OperateReward list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  // repeated .proto_ff.OperateFirstRechargeType firstType = 3;
  for (int i = 0; i < this->firsttype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->firsttype(i), output);
  }

  // optional int32 rmb = 4;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rmb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateFirstRechargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.OperateReward list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  // repeated .proto_ff.OperateFirstRechargeType firstType = 3;
  for (int i = 0; i < this->firsttype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->firsttype(i), target);
  }

  // optional int32 rmb = 4;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rmb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateFirstRechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 rmb = 4;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }

  }
  // repeated .proto_ff.OperateReward list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .proto_ff.OperateFirstRechargeType firstType = 3;
  total_size += 1 * this->firsttype_size();
  for (int i = 0; i < this->firsttype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firsttype(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateFirstRechargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateFirstRechargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateFirstRechargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateFirstRechargeData::MergeFrom(const OperateFirstRechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  firsttype_.MergeFrom(from.firsttype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateFirstRechargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateFirstRechargeData::CopyFrom(const OperateFirstRechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateFirstRechargeData::IsInitialized() const {

  return true;
}

void OperateFirstRechargeData::Swap(OperateFirstRechargeData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    list_.Swap(&other->list_);
    firsttype_.Swap(&other->firsttype_);
    std::swap(rmb_, other->rmb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateFirstRechargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateFirstRechargeData_descriptor_;
  metadata.reflection = OperateFirstRechargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareVipGiftDBData::kIdFieldNumber;
const int WelfareVipGiftDBData::kGetStateFieldNumber;
#endif  // !_MSC_VER

WelfareVipGiftDBData::WelfareVipGiftDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareVipGiftDBData::InitAsDefaultInstance() {
}

WelfareVipGiftDBData::WelfareVipGiftDBData(const WelfareVipGiftDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareVipGiftDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareVipGiftDBData::~WelfareVipGiftDBData() {
  SharedDtor();
}

void WelfareVipGiftDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareVipGiftDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareVipGiftDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareVipGiftDBData_descriptor_;
}

const WelfareVipGiftDBData& WelfareVipGiftDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WelfareVipGiftDBData* WelfareVipGiftDBData::default_instance_ = NULL;

WelfareVipGiftDBData* WelfareVipGiftDBData::New() const {
  return new WelfareVipGiftDBData;
}

void WelfareVipGiftDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareVipGiftDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareVipGiftDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareVipGiftDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareVipGiftDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.ComPair getState = 2;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareVipGiftDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareVipGiftDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareVipGiftDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareVipGiftDBData::MergeFrom(const WelfareVipGiftDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareVipGiftDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareVipGiftDBData::CopyFrom(const WelfareVipGiftDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareVipGiftDBData::IsInitialized() const {

  return true;
}

void WelfareVipGiftDBData::Swap(WelfareVipGiftDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    getstate_.Swap(&other->getstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareVipGiftDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareVipGiftDBData_descriptor_;
  metadata.reflection = WelfareVipGiftDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HoroscopeJackpotDBData::kIdFieldNumber;
const int HoroscopeJackpotDBData::kBOpenFieldNumber;
const int HoroscopeJackpotDBData::kNNeedLevelFieldNumber;
const int HoroscopeJackpotDBData::kLuckyValueFieldNumber;
const int HoroscopeJackpotDBData::kWelfareValueFieldNumber;
const int HoroscopeJackpotDBData::kGetLuckyCountFieldNumber;
const int HoroscopeJackpotDBData::kWelfareGetStateFieldNumber;
const int HoroscopeJackpotDBData::kLastTimeFieldNumber;
const int HoroscopeJackpotDBData::kCurNumFieldNumber;
#endif  // !_MSC_VER

HoroscopeJackpotDBData::HoroscopeJackpotDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HoroscopeJackpotDBData::InitAsDefaultInstance() {
}

HoroscopeJackpotDBData::HoroscopeJackpotDBData(const HoroscopeJackpotDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HoroscopeJackpotDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  bopen_ = false;
  nneedlevel_ = 0u;
  luckyvalue_ = 0u;
  welfarevalue_ = 0u;
  getluckycount_ = 0u;
  lasttime_ = GOOGLE_LONGLONG(0);
  curnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HoroscopeJackpotDBData::~HoroscopeJackpotDBData() {
  SharedDtor();
}

void HoroscopeJackpotDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HoroscopeJackpotDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HoroscopeJackpotDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HoroscopeJackpotDBData_descriptor_;
}

const HoroscopeJackpotDBData& HoroscopeJackpotDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

HoroscopeJackpotDBData* HoroscopeJackpotDBData::default_instance_ = NULL;

HoroscopeJackpotDBData* HoroscopeJackpotDBData::New() const {
  return new HoroscopeJackpotDBData;
}

void HoroscopeJackpotDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    bopen_ = false;
    nneedlevel_ = 0u;
    luckyvalue_ = 0u;
    welfarevalue_ = 0u;
    getluckycount_ = 0u;
    lasttime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    curnum_ = 0;
  }
  welfaregetstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HoroscopeJackpotDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bOpen;
        break;
      }

      // optional bool bOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bopen_)));
          set_has_bopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nNeedLevel;
        break;
      }

      // optional uint32 nNeedLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNeedLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nneedlevel_)));
          set_has_nneedlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_luckyValue;
        break;
      }

      // optional uint32 luckyValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyvalue_)));
          set_has_luckyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_welfareValue;
        break;
      }

      // optional uint32 welfareValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_welfareValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &welfarevalue_)));
          set_has_welfarevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_getLuckyCount;
        break;
      }

      // optional uint32 getLuckyCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getLuckyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getluckycount_)));
          set_has_getluckycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_welfareGetState;
        break;
      }

      // repeated .proto_ff.ComPair welfareGetState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_welfareGetState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_welfaregetstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_welfareGetState;
        if (input->ExpectTag(64)) goto parse_lastTime;
        break;
      }

      // optional int64 lastTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_curNum;
        break;
      }

      // optional int32 curNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curnum_)));
          set_has_curnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HoroscopeJackpotDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool bOpen = 2;
  if (has_bopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bopen(), output);
  }

  // optional uint32 nNeedLevel = 3;
  if (has_nneedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nneedlevel(), output);
  }

  // optional uint32 luckyValue = 4;
  if (has_luckyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->luckyvalue(), output);
  }

  // optional uint32 welfareValue = 5;
  if (has_welfarevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->welfarevalue(), output);
  }

  // optional uint32 getLuckyCount = 6;
  if (has_getluckycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->getluckycount(), output);
  }

  // repeated .proto_ff.ComPair welfareGetState = 7;
  for (int i = 0; i < this->welfaregetstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->welfaregetstate(i), output);
  }

  // optional int64 lastTime = 8;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lasttime(), output);
  }

  // optional int32 curNum = 9;
  if (has_curnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->curnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HoroscopeJackpotDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool bOpen = 2;
  if (has_bopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bopen(), target);
  }

  // optional uint32 nNeedLevel = 3;
  if (has_nneedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nneedlevel(), target);
  }

  // optional uint32 luckyValue = 4;
  if (has_luckyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->luckyvalue(), target);
  }

  // optional uint32 welfareValue = 5;
  if (has_welfarevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->welfarevalue(), target);
  }

  // optional uint32 getLuckyCount = 6;
  if (has_getluckycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->getluckycount(), target);
  }

  // repeated .proto_ff.ComPair welfareGetState = 7;
  for (int i = 0; i < this->welfaregetstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->welfaregetstate(i), target);
  }

  // optional int64 lastTime = 8;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lasttime(), target);
  }

  // optional int32 curNum = 9;
  if (has_curnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->curnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HoroscopeJackpotDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool bOpen = 2;
    if (has_bopen()) {
      total_size += 1 + 1;
    }

    // optional uint32 nNeedLevel = 3;
    if (has_nneedlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nneedlevel());
    }

    // optional uint32 luckyValue = 4;
    if (has_luckyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyvalue());
    }

    // optional uint32 welfareValue = 5;
    if (has_welfarevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->welfarevalue());
    }

    // optional uint32 getLuckyCount = 6;
    if (has_getluckycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getluckycount());
    }

    // optional int64 lastTime = 8;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 curNum = 9;
    if (has_curnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curnum());
    }

  }
  // repeated .proto_ff.ComPair welfareGetState = 7;
  total_size += 1 * this->welfaregetstate_size();
  for (int i = 0; i < this->welfaregetstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->welfaregetstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HoroscopeJackpotDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HoroscopeJackpotDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HoroscopeJackpotDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HoroscopeJackpotDBData::MergeFrom(const HoroscopeJackpotDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  welfaregetstate_.MergeFrom(from.welfaregetstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bopen()) {
      set_bopen(from.bopen());
    }
    if (from.has_nneedlevel()) {
      set_nneedlevel(from.nneedlevel());
    }
    if (from.has_luckyvalue()) {
      set_luckyvalue(from.luckyvalue());
    }
    if (from.has_welfarevalue()) {
      set_welfarevalue(from.welfarevalue());
    }
    if (from.has_getluckycount()) {
      set_getluckycount(from.getluckycount());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curnum()) {
      set_curnum(from.curnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HoroscopeJackpotDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoroscopeJackpotDBData::CopyFrom(const HoroscopeJackpotDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoroscopeJackpotDBData::IsInitialized() const {

  return true;
}

void HoroscopeJackpotDBData::Swap(HoroscopeJackpotDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bopen_, other->bopen_);
    std::swap(nneedlevel_, other->nneedlevel_);
    std::swap(luckyvalue_, other->luckyvalue_);
    std::swap(welfarevalue_, other->welfarevalue_);
    std::swap(getluckycount_, other->getluckycount_);
    welfaregetstate_.Swap(&other->welfaregetstate_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(curnum_, other->curnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HoroscopeJackpotDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HoroscopeJackpotDBData_descriptor_;
  metadata.reflection = HoroscopeJackpotDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HoroscopeActiveDBData::kActiveIdFieldNumber;
const int HoroscopeActiveDBData::kDrawCountFieldNumber;
const int HoroscopeActiveDBData::kFreeOpIdFieldNumber;
const int HoroscopeActiveDBData::kLastFreeGetTimeFieldNumber;
const int HoroscopeActiveDBData::kJackpotListFieldNumber;
#endif  // !_MSC_VER

HoroscopeActiveDBData::HoroscopeActiveDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HoroscopeActiveDBData::InitAsDefaultInstance() {
}

HoroscopeActiveDBData::HoroscopeActiveDBData(const HoroscopeActiveDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HoroscopeActiveDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  drawcount_ = GOOGLE_ULONGLONG(0);
  freeopid_ = 0u;
  lastfreegettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HoroscopeActiveDBData::~HoroscopeActiveDBData() {
  SharedDtor();
}

void HoroscopeActiveDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HoroscopeActiveDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HoroscopeActiveDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HoroscopeActiveDBData_descriptor_;
}

const HoroscopeActiveDBData& HoroscopeActiveDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

HoroscopeActiveDBData* HoroscopeActiveDBData::default_instance_ = NULL;

HoroscopeActiveDBData* HoroscopeActiveDBData::New() const {
  return new HoroscopeActiveDBData;
}

void HoroscopeActiveDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    drawcount_ = GOOGLE_ULONGLONG(0);
    freeopid_ = 0u;
    lastfreegettime_ = GOOGLE_ULONGLONG(0);
  }
  jackpotlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HoroscopeActiveDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drawCount;
        break;
      }

      // optional uint64 drawCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &drawcount_)));
          set_has_drawcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freeOpId;
        break;
      }

      // optional uint32 freeOpId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeOpId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freeopid_)));
          set_has_freeopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastFreeGetTime;
        break;
      }

      // optional uint64 lastFreeGetTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastFreeGetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastfreegettime_)));
          set_has_lastfreegettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_jackpotList;
        break;
      }

      // repeated .proto_ff.HoroscopeJackpotDBData jackpotList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jackpotList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jackpotlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_jackpotList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HoroscopeActiveDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint64 drawCount = 2;
  if (has_drawcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->drawcount(), output);
  }

  // optional uint32 freeOpId = 3;
  if (has_freeopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->freeopid(), output);
  }

  // optional uint64 lastFreeGetTime = 4;
  if (has_lastfreegettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastfreegettime(), output);
  }

  // repeated .proto_ff.HoroscopeJackpotDBData jackpotList = 5;
  for (int i = 0; i < this->jackpotlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->jackpotlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HoroscopeActiveDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint64 drawCount = 2;
  if (has_drawcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->drawcount(), target);
  }

  // optional uint32 freeOpId = 3;
  if (has_freeopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->freeopid(), target);
  }

  // optional uint64 lastFreeGetTime = 4;
  if (has_lastfreegettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastfreegettime(), target);
  }

  // repeated .proto_ff.HoroscopeJackpotDBData jackpotList = 5;
  for (int i = 0; i < this->jackpotlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->jackpotlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HoroscopeActiveDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint64 drawCount = 2;
    if (has_drawcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->drawcount());
    }

    // optional uint32 freeOpId = 3;
    if (has_freeopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freeopid());
    }

    // optional uint64 lastFreeGetTime = 4;
    if (has_lastfreegettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastfreegettime());
    }

  }
  // repeated .proto_ff.HoroscopeJackpotDBData jackpotList = 5;
  total_size += 1 * this->jackpotlist_size();
  for (int i = 0; i < this->jackpotlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jackpotlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HoroscopeActiveDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HoroscopeActiveDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HoroscopeActiveDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HoroscopeActiveDBData::MergeFrom(const HoroscopeActiveDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  jackpotlist_.MergeFrom(from.jackpotlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_drawcount()) {
      set_drawcount(from.drawcount());
    }
    if (from.has_freeopid()) {
      set_freeopid(from.freeopid());
    }
    if (from.has_lastfreegettime()) {
      set_lastfreegettime(from.lastfreegettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HoroscopeActiveDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoroscopeActiveDBData::CopyFrom(const HoroscopeActiveDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoroscopeActiveDBData::IsInitialized() const {

  return true;
}

void HoroscopeActiveDBData::Swap(HoroscopeActiveDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(drawcount_, other->drawcount_);
    std::swap(freeopid_, other->freeopid_);
    std::swap(lastfreegettime_, other->lastfreegettime_);
    jackpotlist_.Swap(&other->jackpotlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HoroscopeActiveDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HoroscopeActiveDBData_descriptor_;
  metadata.reflection = HoroscopeActiveDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WelfareOnlineGiftDBData::kIdFieldNumber;
const int WelfareOnlineGiftDBData::kLastRefreshTimeFieldNumber;
const int WelfareOnlineGiftDBData::kOnlineTimeFieldNumber;
const int WelfareOnlineGiftDBData::kGetStateFieldNumber;
#endif  // !_MSC_VER

WelfareOnlineGiftDBData::WelfareOnlineGiftDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WelfareOnlineGiftDBData::InitAsDefaultInstance() {
}

WelfareOnlineGiftDBData::WelfareOnlineGiftDBData(const WelfareOnlineGiftDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WelfareOnlineGiftDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  lastrefreshtime_ = GOOGLE_ULONGLONG(0);
  onlinetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WelfareOnlineGiftDBData::~WelfareOnlineGiftDBData() {
  SharedDtor();
}

void WelfareOnlineGiftDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WelfareOnlineGiftDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WelfareOnlineGiftDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WelfareOnlineGiftDBData_descriptor_;
}

const WelfareOnlineGiftDBData& WelfareOnlineGiftDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WelfareOnlineGiftDBData* WelfareOnlineGiftDBData::default_instance_ = NULL;

WelfareOnlineGiftDBData* WelfareOnlineGiftDBData::New() const {
  return new WelfareOnlineGiftDBData;
}

void WelfareOnlineGiftDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    lastrefreshtime_ = GOOGLE_ULONGLONG(0);
    onlinetime_ = GOOGLE_ULONGLONG(0);
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WelfareOnlineGiftDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastRefreshTime;
        break;
      }

      // optional uint64 lastRefreshTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastrefreshtime_)));
          set_has_lastrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OnlineTime;
        break;
      }

      // optional uint64 OnlineTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WelfareOnlineGiftDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 lastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastrefreshtime(), output);
  }

  // optional uint64 OnlineTime = 3;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->onlinetime(), output);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->getstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WelfareOnlineGiftDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 lastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastrefreshtime(), target);
  }

  // optional uint64 OnlineTime = 3;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->onlinetime(), target);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->getstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WelfareOnlineGiftDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 lastRefreshTime = 2;
    if (has_lastrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastrefreshtime());
    }

    // optional uint64 OnlineTime = 3;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->onlinetime());
    }

  }
  // repeated .proto_ff.ComPair getState = 4;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WelfareOnlineGiftDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WelfareOnlineGiftDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WelfareOnlineGiftDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WelfareOnlineGiftDBData::MergeFrom(const WelfareOnlineGiftDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lastrefreshtime()) {
      set_lastrefreshtime(from.lastrefreshtime());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WelfareOnlineGiftDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WelfareOnlineGiftDBData::CopyFrom(const WelfareOnlineGiftDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WelfareOnlineGiftDBData::IsInitialized() const {

  return true;
}

void WelfareOnlineGiftDBData::Swap(WelfareOnlineGiftDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lastrefreshtime_, other->lastrefreshtime_);
    std::swap(onlinetime_, other->onlinetime_);
    getstate_.Swap(&other->getstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WelfareOnlineGiftDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WelfareOnlineGiftDBData_descriptor_;
  metadata.reflection = WelfareOnlineGiftDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationTurntableTaskDBData::kTaskIdFieldNumber;
const int OperationTurntableTaskDBData::kProgressFieldNumber;
const int OperationTurntableTaskDBData::kStateFieldNumber;
#endif  // !_MSC_VER

OperationTurntableTaskDBData::OperationTurntableTaskDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationTurntableTaskDBData::InitAsDefaultInstance() {
}

OperationTurntableTaskDBData::OperationTurntableTaskDBData(const OperationTurntableTaskDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationTurntableTaskDBData::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_ULONGLONG(0);
  progress_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationTurntableTaskDBData::~OperationTurntableTaskDBData() {
  SharedDtor();
}

void OperationTurntableTaskDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperationTurntableTaskDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationTurntableTaskDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationTurntableTaskDBData_descriptor_;
}

const OperationTurntableTaskDBData& OperationTurntableTaskDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperationTurntableTaskDBData* OperationTurntableTaskDBData::default_instance_ = NULL;

OperationTurntableTaskDBData* OperationTurntableTaskDBData::New() const {
  return new OperationTurntableTaskDBData;
}

void OperationTurntableTaskDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_ULONGLONG(0);
    progress_ = GOOGLE_ULONGLONG(0);
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationTurntableTaskDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint64 progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationTurntableTaskDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->taskid(), output);
  }

  // optional uint64 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->progress(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationTurntableTaskDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->taskid(), target);
  }

  // optional uint64 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->progress(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationTurntableTaskDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taskid());
    }

    // optional uint64 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->progress());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationTurntableTaskDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationTurntableTaskDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationTurntableTaskDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationTurntableTaskDBData::MergeFrom(const OperationTurntableTaskDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationTurntableTaskDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationTurntableTaskDBData::CopyFrom(const OperationTurntableTaskDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationTurntableTaskDBData::IsInitialized() const {

  return true;
}

void OperationTurntableTaskDBData::Swap(OperationTurntableTaskDBData* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(progress_, other->progress_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationTurntableTaskDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationTurntableTaskDBData_descriptor_;
  metadata.reflection = OperationTurntableTaskDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationTurntableDBData::kActiveIdFieldNumber;
const int OperationTurntableDBData::kLastRefreshTimeFieldNumber;
const int OperationTurntableDBData::kTasklistFieldNumber;
#endif  // !_MSC_VER

OperationTurntableDBData::OperationTurntableDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationTurntableDBData::InitAsDefaultInstance() {
}

OperationTurntableDBData::OperationTurntableDBData(const OperationTurntableDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationTurntableDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  lastrefreshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationTurntableDBData::~OperationTurntableDBData() {
  SharedDtor();
}

void OperationTurntableDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperationTurntableDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationTurntableDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationTurntableDBData_descriptor_;
}

const OperationTurntableDBData& OperationTurntableDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperationTurntableDBData* OperationTurntableDBData::default_instance_ = NULL;

OperationTurntableDBData* OperationTurntableDBData::New() const {
  return new OperationTurntableDBData;
}

void OperationTurntableDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    lastrefreshtime_ = GOOGLE_ULONGLONG(0);
  }
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationTurntableDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastRefreshTime;
        break;
      }

      // optional uint64 lastRefreshTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastrefreshtime_)));
          set_has_lastrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tasklist;
        break;
      }

      // repeated .proto_ff.OperationTurntableTaskDBData tasklist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tasklist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationTurntableDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint64 lastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastrefreshtime(), output);
  }

  // repeated .proto_ff.OperationTurntableTaskDBData tasklist = 3;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tasklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationTurntableDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint64 lastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastrefreshtime(), target);
  }

  // repeated .proto_ff.OperationTurntableTaskDBData tasklist = 3;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tasklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationTurntableDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint64 lastRefreshTime = 2;
    if (has_lastrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastrefreshtime());
    }

  }
  // repeated .proto_ff.OperationTurntableTaskDBData tasklist = 3;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationTurntableDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationTurntableDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationTurntableDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationTurntableDBData::MergeFrom(const OperationTurntableDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_lastrefreshtime()) {
      set_lastrefreshtime(from.lastrefreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationTurntableDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationTurntableDBData::CopyFrom(const OperationTurntableDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationTurntableDBData::IsInitialized() const {

  return true;
}

void OperationTurntableDBData::Swap(OperationTurntableDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(lastrefreshtime_, other->lastrefreshtime_);
    tasklist_.Swap(&other->tasklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationTurntableDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationTurntableDBData_descriptor_;
  metadata.reflection = OperationTurntableDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationTutoraskDBData::kTaskIdFieldNumber;
const int OperationTutoraskDBData::kProgressFieldNumber;
const int OperationTutoraskDBData::kStateFieldNumber;
#endif  // !_MSC_VER

OperationTutoraskDBData::OperationTutoraskDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationTutoraskDBData::InitAsDefaultInstance() {
}

OperationTutoraskDBData::OperationTutoraskDBData(const OperationTutoraskDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationTutoraskDBData::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_ULONGLONG(0);
  progress_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationTutoraskDBData::~OperationTutoraskDBData() {
  SharedDtor();
}

void OperationTutoraskDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperationTutoraskDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationTutoraskDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationTutoraskDBData_descriptor_;
}

const OperationTutoraskDBData& OperationTutoraskDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperationTutoraskDBData* OperationTutoraskDBData::default_instance_ = NULL;

OperationTutoraskDBData* OperationTutoraskDBData::New() const {
  return new OperationTutoraskDBData;
}

void OperationTutoraskDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_ULONGLONG(0);
    progress_ = GOOGLE_ULONGLONG(0);
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationTutoraskDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint64 progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationTutoraskDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->taskid(), output);
  }

  // optional uint64 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->progress(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationTutoraskDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->taskid(), target);
  }

  // optional uint64 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->progress(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationTutoraskDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taskid());
    }

    // optional uint64 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->progress());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationTutoraskDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationTutoraskDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationTutoraskDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationTutoraskDBData::MergeFrom(const OperationTutoraskDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationTutoraskDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationTutoraskDBData::CopyFrom(const OperationTutoraskDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationTutoraskDBData::IsInitialized() const {

  return true;
}

void OperationTutoraskDBData::Swap(OperationTutoraskDBData* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(progress_, other->progress_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationTutoraskDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationTutoraskDBData_descriptor_;
  metadata.reflection = OperationTutoraskDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationTutorDBData::kActiveIdFieldNumber;
const int OperationTutorDBData::kLastRefreshTimeFieldNumber;
const int OperationTutorDBData::kDiligentValueFieldNumber;
const int OperationTutorDBData::kTasklistFieldNumber;
#endif  // !_MSC_VER

OperationTutorDBData::OperationTutorDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationTutorDBData::InitAsDefaultInstance() {
}

OperationTutorDBData::OperationTutorDBData(const OperationTutorDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationTutorDBData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  lastrefreshtime_ = GOOGLE_ULONGLONG(0);
  diligentvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationTutorDBData::~OperationTutorDBData() {
  SharedDtor();
}

void OperationTutorDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperationTutorDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationTutorDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationTutorDBData_descriptor_;
}

const OperationTutorDBData& OperationTutorDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperationTutorDBData* OperationTutorDBData::default_instance_ = NULL;

OperationTutorDBData* OperationTutorDBData::New() const {
  return new OperationTutorDBData;
}

void OperationTutorDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    lastrefreshtime_ = GOOGLE_ULONGLONG(0);
    diligentvalue_ = GOOGLE_ULONGLONG(0);
  }
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationTutorDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastRefreshTime;
        break;
      }

      // optional uint64 lastRefreshTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastrefreshtime_)));
          set_has_lastrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diligentValue;
        break;
      }

      // optional uint64 diligentValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diligentValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diligentvalue_)));
          set_has_diligentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tasklist;
        break;
      }

      // repeated .proto_ff.OperationTutoraskDBData tasklist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tasklist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationTutorDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint64 lastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastrefreshtime(), output);
  }

  // optional uint64 diligentValue = 3;
  if (has_diligentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->diligentvalue(), output);
  }

  // repeated .proto_ff.OperationTutoraskDBData tasklist = 4;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tasklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationTutorDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint64 lastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastrefreshtime(), target);
  }

  // optional uint64 diligentValue = 3;
  if (has_diligentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->diligentvalue(), target);
  }

  // repeated .proto_ff.OperationTutoraskDBData tasklist = 4;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tasklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationTutorDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint64 lastRefreshTime = 2;
    if (has_lastrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastrefreshtime());
    }

    // optional uint64 diligentValue = 3;
    if (has_diligentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->diligentvalue());
    }

  }
  // repeated .proto_ff.OperationTutoraskDBData tasklist = 4;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationTutorDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationTutorDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationTutorDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationTutorDBData::MergeFrom(const OperationTutorDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_lastrefreshtime()) {
      set_lastrefreshtime(from.lastrefreshtime());
    }
    if (from.has_diligentvalue()) {
      set_diligentvalue(from.diligentvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationTutorDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationTutorDBData::CopyFrom(const OperationTutorDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationTutorDBData::IsInitialized() const {

  return true;
}

void OperationTutorDBData::Swap(OperationTutorDBData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(lastrefreshtime_, other->lastrefreshtime_);
    std::swap(diligentvalue_, other->diligentvalue_);
    tasklist_.Swap(&other->tasklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationTutorDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationTutorDBData_descriptor_;
  metadata.reflection = OperationTutorDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int limitInfo::kIdFieldNumber;
const int limitInfo::kInfosFieldNumber;
#endif  // !_MSC_VER

limitInfo::limitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void limitInfo::InitAsDefaultInstance() {
}

limitInfo::limitInfo(const limitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void limitInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

limitInfo::~limitInfo() {
  SharedDtor();
}

void limitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void limitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* limitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return limitInfo_descriptor_;
}

const limitInfo& limitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

limitInfo* limitInfo::default_instance_ = NULL;

limitInfo* limitInfo::New() const {
  return new limitInfo;
}

void limitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool limitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.ComPair64 infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void limitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.ComPair64 infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* limitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.ComPair64 infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int limitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.ComPair64 infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void limitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const limitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const limitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void limitInfo::MergeFrom(const limitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void limitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void limitInfo::CopyFrom(const limitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool limitInfo::IsInitialized() const {

  return true;
}

void limitInfo::Swap(limitInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata limitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = limitInfo_descriptor_;
  metadata.reflection = limitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalWorldBossData::kActiveIdFieldNumber;
const int FestivalWorldBossData::kGetStateFieldNumber;
#endif  // !_MSC_VER

FestivalWorldBossData::FestivalWorldBossData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalWorldBossData::InitAsDefaultInstance() {
}

FestivalWorldBossData::FestivalWorldBossData(const FestivalWorldBossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalWorldBossData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalWorldBossData::~FestivalWorldBossData() {
  SharedDtor();
}

void FestivalWorldBossData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalWorldBossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalWorldBossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalWorldBossData_descriptor_;
}

const FestivalWorldBossData& FestivalWorldBossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FestivalWorldBossData* FestivalWorldBossData::default_instance_ = NULL;

FestivalWorldBossData* FestivalWorldBossData::New() const {
  return new FestivalWorldBossData;
}

void FestivalWorldBossData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalWorldBossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_getState;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalWorldBossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getstate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalWorldBossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated .proto_ff.ComPair getState = 2;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getstate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalWorldBossData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

  }
  // repeated .proto_ff.ComPair getState = 2;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalWorldBossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalWorldBossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalWorldBossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalWorldBossData::MergeFrom(const FestivalWorldBossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalWorldBossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalWorldBossData::CopyFrom(const FestivalWorldBossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalWorldBossData::IsInitialized() const {

  return true;
}

void FestivalWorldBossData::Swap(FestivalWorldBossData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    getstate_.Swap(&other->getstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalWorldBossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalWorldBossData_descriptor_;
  metadata.reflection = FestivalWorldBossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateCommonEntryData::kIdFieldNumber;
const int OperateCommonEntryData::kStateFieldNumber;
const int OperateCommonEntryData::kValueFieldNumber;
#endif  // !_MSC_VER

OperateCommonEntryData::OperateCommonEntryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateCommonEntryData::InitAsDefaultInstance() {
}

OperateCommonEntryData::OperateCommonEntryData(const OperateCommonEntryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateCommonEntryData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateCommonEntryData::~OperateCommonEntryData() {
  SharedDtor();
}

void OperateCommonEntryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateCommonEntryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateCommonEntryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateCommonEntryData_descriptor_;
}

const OperateCommonEntryData& OperateCommonEntryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateCommonEntryData* OperateCommonEntryData::default_instance_ = NULL;

OperateCommonEntryData* OperateCommonEntryData::New() const {
  return new OperateCommonEntryData;
}

void OperateCommonEntryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateCommonEntryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int64 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateCommonEntryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int64 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateCommonEntryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int64 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateCommonEntryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int64 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateCommonEntryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateCommonEntryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateCommonEntryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateCommonEntryData::MergeFrom(const OperateCommonEntryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateCommonEntryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateCommonEntryData::CopyFrom(const OperateCommonEntryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateCommonEntryData::IsInitialized() const {

  return true;
}

void OperateCommonEntryData::Swap(OperateCommonEntryData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateCommonEntryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateCommonEntryData_descriptor_;
  metadata.reflection = OperateCommonEntryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateWingGiftData::kActiveIdFieldNumber;
const int OperateWingGiftData::kEntrysFieldNumber;
const int OperateWingGiftData::kRefreshTimeFieldNumber;
const int OperateWingGiftData::kLoginDayFieldNumber;
#endif  // !_MSC_VER

OperateWingGiftData::OperateWingGiftData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateWingGiftData::InitAsDefaultInstance() {
}

OperateWingGiftData::OperateWingGiftData(const OperateWingGiftData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateWingGiftData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  refreshtime_ = GOOGLE_LONGLONG(0);
  loginday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateWingGiftData::~OperateWingGiftData() {
  SharedDtor();
}

void OperateWingGiftData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateWingGiftData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateWingGiftData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateWingGiftData_descriptor_;
}

const OperateWingGiftData& OperateWingGiftData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateWingGiftData* OperateWingGiftData::default_instance_ = NULL;

OperateWingGiftData* OperateWingGiftData::New() const {
  return new OperateWingGiftData;
}

void OperateWingGiftData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    refreshtime_ = GOOGLE_LONGLONG(0);
    loginday_ = 0;
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateWingGiftData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.OperateCommonEntryData entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(24)) goto parse_refreshTime;
        break;
      }

      // optional int64 refreshTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginDay;
        break;
      }

      // optional int32 loginDay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginday_)));
          set_has_loginday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateWingGiftData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated .proto_ff.OperateCommonEntryData entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional int64 refreshTime = 3;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->refreshtime(), output);
  }

  // optional int32 loginDay = 4;
  if (has_loginday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loginday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateWingGiftData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated .proto_ff.OperateCommonEntryData entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional int64 refreshTime = 3;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->refreshtime(), target);
  }

  // optional int32 loginDay = 4;
  if (has_loginday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loginday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateWingGiftData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional int64 refreshTime = 3;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refreshtime());
    }

    // optional int32 loginDay = 4;
    if (has_loginday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginday());
    }

  }
  // repeated .proto_ff.OperateCommonEntryData entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateWingGiftData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateWingGiftData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateWingGiftData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateWingGiftData::MergeFrom(const OperateWingGiftData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_loginday()) {
      set_loginday(from.loginday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateWingGiftData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateWingGiftData::CopyFrom(const OperateWingGiftData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateWingGiftData::IsInitialized() const {

  return true;
}

void OperateWingGiftData::Swap(OperateWingGiftData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    entrys_.Swap(&other->entrys_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(loginday_, other->loginday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateWingGiftData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateWingGiftData_descriptor_;
  metadata.reflection = OperateWingGiftData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateRechargeGiftData::kActiveIdFieldNumber;
const int OperateRechargeGiftData::kEntrysFieldNumber;
const int OperateRechargeGiftData::kRechargeRmbFieldNumber;
#endif  // !_MSC_VER

OperateRechargeGiftData::OperateRechargeGiftData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateRechargeGiftData::InitAsDefaultInstance() {
}

OperateRechargeGiftData::OperateRechargeGiftData(const OperateRechargeGiftData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateRechargeGiftData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  rechargermb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateRechargeGiftData::~OperateRechargeGiftData() {
  SharedDtor();
}

void OperateRechargeGiftData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateRechargeGiftData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateRechargeGiftData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateRechargeGiftData_descriptor_;
}

const OperateRechargeGiftData& OperateRechargeGiftData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OperateRechargeGiftData* OperateRechargeGiftData::default_instance_ = NULL;

OperateRechargeGiftData* OperateRechargeGiftData::New() const {
  return new OperateRechargeGiftData;
}

void OperateRechargeGiftData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    rechargermb_ = 0;
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateRechargeGiftData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.OperateCommonEntryData entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(24)) goto parse_rechargeRmb;
        break;
      }

      // optional int32 rechargeRmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeRmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargermb_)));
          set_has_rechargermb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateRechargeGiftData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // repeated .proto_ff.OperateCommonEntryData entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional int32 rechargeRmb = 3;
  if (has_rechargermb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rechargermb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateRechargeGiftData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // repeated .proto_ff.OperateCommonEntryData entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional int32 rechargeRmb = 3;
  if (has_rechargermb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rechargermb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateRechargeGiftData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional int32 rechargeRmb = 3;
    if (has_rechargermb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargermb());
    }

  }
  // repeated .proto_ff.OperateCommonEntryData entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateRechargeGiftData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateRechargeGiftData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateRechargeGiftData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateRechargeGiftData::MergeFrom(const OperateRechargeGiftData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_rechargermb()) {
      set_rechargermb(from.rechargermb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateRechargeGiftData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateRechargeGiftData::CopyFrom(const OperateRechargeGiftData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateRechargeGiftData::IsInitialized() const {

  return true;
}

void OperateRechargeGiftData::Swap(OperateRechargeGiftData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    entrys_.Swap(&other->entrys_);
    std::swap(rechargermb_, other->rechargermb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateRechargeGiftData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateRechargeGiftData_descriptor_;
  metadata.reflection = OperateRechargeGiftData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBOperateData::kSignInDataFieldNumber;
const int CharacterDBOperateData::kLoginGiftDataFieldNumber;
const int CharacterDBOperateData::kLevelGiftDataFieldNumber;
const int CharacterDBOperateData::kShopDataFieldNumber;
const int CharacterDBOperateData::kTaskDataFieldNumber;
const int CharacterDBOperateData::kWishDataFieldNumber;
const int CharacterDBOperateData::kDailyRechargeFieldNumber;
const int CharacterDBOperateData::kFirstRechargeFieldNumber;
const int CharacterDBOperateData::kMoonCardFieldNumber;
const int CharacterDBOperateData::kNoviceFundFieldNumber;
const int CharacterDBOperateData::kGrowthFundFieldNumber;
const int CharacterDBOperateData::kDreamFundFieldNumber;
const int CharacterDBOperateData::kNoviceFundHighFieldNumber;
const int CharacterDBOperateData::kGrowthFundHighFieldNumber;
const int CharacterDBOperateData::kDreamFundHighFieldNumber;
const int CharacterDBOperateData::kFInvestDBDataFieldNumber;
const int CharacterDBOperateData::kFExchangeDBDataFieldNumber;
const int CharacterDBOperateData::kFLoginDBDataFieldNumber;
const int CharacterDBOperateData::kFRechargeDBDataFieldNumber;
const int CharacterDBOperateData::kFConsumptionDBDataFieldNumber;
const int CharacterDBOperateData::kFFirstRechargeDBDataFieldNumber;
const int CharacterDBOperateData::kFYanHuaDBDataFieldNumber;
const int CharacterDBOperateData::kFShopDBDataFieldNumber;
const int CharacterDBOperateData::kLimitGiftDBDataFieldNumber;
const int CharacterDBOperateData::kHoroscopeDBDataFieldNumber;
const int CharacterDBOperateData::kFestivalRechargeDBDataFieldNumber;
const int CharacterDBOperateData::kFSmashEggDBDataFieldNumber;
const int CharacterDBOperateData::kRedPointClickDataFieldNumber;
const int CharacterDBOperateData::kWVipDBDataFieldNumber;
const int CharacterDBOperateData::kWOnlineDBDataFieldNumber;
const int CharacterDBOperateData::kFBossDBDataFieldNumber;
const int CharacterDBOperateData::kFHuoYueDuDBDataFieldNumber;
const int CharacterDBOperateData::kFTurntableDBDataFieldNumber;
const int CharacterDBOperateData::kTutorDBDataFieldNumber;
const int CharacterDBOperateData::kZhiChongDataFieldNumber;
const int CharacterDBOperateData::kLimitDataFieldNumber;
const int CharacterDBOperateData::kSuperDataFieldNumber;
const int CharacterDBOperateData::kFBigYanHuaDBDataFieldNumber;
const int CharacterDBOperateData::kWorldBossDataFieldNumber;
const int CharacterDBOperateData::kPrerechargedataFieldNumber;
const int CharacterDBOperateData::kWinggiftdataFieldNumber;
const int CharacterDBOperateData::kRechargegiftdataFieldNumber;
const int CharacterDBOperateData::kSuperDoubleDataFieldNumber;
const int CharacterDBOperateData::kIndultTaskDBDataFieldNumber;
const int CharacterDBOperateData::kColPointsTaskDataFieldNumber;
#endif  // !_MSC_VER

CharacterDBOperateData::CharacterDBOperateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBOperateData::InitAsDefaultInstance() {
  dailyrecharge_ = const_cast< ::proto_ff::OperateDailyRechargeData*>(&::proto_ff::OperateDailyRechargeData::default_instance());
  firstrecharge_ = const_cast< ::proto_ff::OperateFirstRechargeData*>(&::proto_ff::OperateFirstRechargeData::default_instance());
  mooncard_ = const_cast< ::proto_ff::OperateMoonCardData*>(&::proto_ff::OperateMoonCardData::default_instance());
  novicefund_ = const_cast< ::proto_ff::OperateFundData*>(&::proto_ff::OperateFundData::default_instance());
  growthfund_ = const_cast< ::proto_ff::OperateFundData*>(&::proto_ff::OperateFundData::default_instance());
  dreamfund_ = const_cast< ::proto_ff::OperateFundData*>(&::proto_ff::OperateFundData::default_instance());
  novicefundhigh_ = const_cast< ::proto_ff::OperateFundData*>(&::proto_ff::OperateFundData::default_instance());
  growthfundhigh_ = const_cast< ::proto_ff::OperateFundData*>(&::proto_ff::OperateFundData::default_instance());
  dreamfundhigh_ = const_cast< ::proto_ff::OperateFundData*>(&::proto_ff::OperateFundData::default_instance());
  winggiftdata_ = const_cast< ::proto_ff::OperateWingGiftData*>(&::proto_ff::OperateWingGiftData::default_instance());
  rechargegiftdata_ = const_cast< ::proto_ff::OperateRechargeGiftData*>(&::proto_ff::OperateRechargeGiftData::default_instance());
  colpointstaskdata_ = const_cast< ::proto_ff::ColPointsTaskData*>(&::proto_ff::ColPointsTaskData::default_instance());
}

CharacterDBOperateData::CharacterDBOperateData(const CharacterDBOperateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBOperateData::SharedCtor() {
  _cached_size_ = 0;
  dailyrecharge_ = NULL;
  firstrecharge_ = NULL;
  mooncard_ = NULL;
  novicefund_ = NULL;
  growthfund_ = NULL;
  dreamfund_ = NULL;
  novicefundhigh_ = NULL;
  growthfundhigh_ = NULL;
  dreamfundhigh_ = NULL;
  winggiftdata_ = NULL;
  rechargegiftdata_ = NULL;
  colpointstaskdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBOperateData::~CharacterDBOperateData() {
  SharedDtor();
}

void CharacterDBOperateData::SharedDtor() {
  if (this != default_instance_) {
    delete dailyrecharge_;
    delete firstrecharge_;
    delete mooncard_;
    delete novicefund_;
    delete growthfund_;
    delete dreamfund_;
    delete novicefundhigh_;
    delete growthfundhigh_;
    delete dreamfundhigh_;
    delete winggiftdata_;
    delete rechargegiftdata_;
    delete colpointstaskdata_;
  }
}

void CharacterDBOperateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBOperateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBOperateData_descriptor_;
}

const CharacterDBOperateData& CharacterDBOperateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBOperateData* CharacterDBOperateData::default_instance_ = NULL;

CharacterDBOperateData* CharacterDBOperateData::New() const {
  return new CharacterDBOperateData;
}

void CharacterDBOperateData::Clear() {
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (has_dailyrecharge()) {
      if (dailyrecharge_ != NULL) dailyrecharge_->::proto_ff::OperateDailyRechargeData::Clear();
    }
    if (has_firstrecharge()) {
      if (firstrecharge_ != NULL) firstrecharge_->::proto_ff::OperateFirstRechargeData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mooncard()) {
      if (mooncard_ != NULL) mooncard_->::proto_ff::OperateMoonCardData::Clear();
    }
    if (has_novicefund()) {
      if (novicefund_ != NULL) novicefund_->::proto_ff::OperateFundData::Clear();
    }
    if (has_growthfund()) {
      if (growthfund_ != NULL) growthfund_->::proto_ff::OperateFundData::Clear();
    }
    if (has_dreamfund()) {
      if (dreamfund_ != NULL) dreamfund_->::proto_ff::OperateFundData::Clear();
    }
    if (has_novicefundhigh()) {
      if (novicefundhigh_ != NULL) novicefundhigh_->::proto_ff::OperateFundData::Clear();
    }
    if (has_growthfundhigh()) {
      if (growthfundhigh_ != NULL) growthfundhigh_->::proto_ff::OperateFundData::Clear();
    }
    if (has_dreamfundhigh()) {
      if (dreamfundhigh_ != NULL) dreamfundhigh_->::proto_ff::OperateFundData::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_winggiftdata()) {
      if (winggiftdata_ != NULL) winggiftdata_->::proto_ff::OperateWingGiftData::Clear();
    }
    if (has_rechargegiftdata()) {
      if (rechargegiftdata_ != NULL) rechargegiftdata_->::proto_ff::OperateRechargeGiftData::Clear();
    }
    if (has_colpointstaskdata()) {
      if (colpointstaskdata_ != NULL) colpointstaskdata_->::proto_ff::ColPointsTaskData::Clear();
    }
  }
  signindata_.Clear();
  logingiftdata_.Clear();
  levelgiftdata_.Clear();
  shopdata_.Clear();
  taskdata_.Clear();
  wishdata_.Clear();
  finvestdbdata_.Clear();
  fexchangedbdata_.Clear();
  flogindbdata_.Clear();
  frechargedbdata_.Clear();
  fconsumptiondbdata_.Clear();
  ffirstrechargedbdata_.Clear();
  fyanhuadbdata_.Clear();
  fshopdbdata_.Clear();
  limitgiftdbdata_.Clear();
  horoscopedbdata_.Clear();
  festivalrechargedbdata_.Clear();
  fsmasheggdbdata_.Clear();
  redpointclickdata_.Clear();
  wvipdbdata_.Clear();
  wonlinedbdata_.Clear();
  fbossdbdata_.Clear();
  fhuoyuedudbdata_.Clear();
  fturntabledbdata_.Clear();
  tutordbdata_.Clear();
  zhichongdata_.Clear();
  limitdata_.Clear();
  superdata_.Clear();
  fbigyanhuadbdata_.Clear();
  worldbossdata_.Clear();
  prerechargedata_.Clear();
  superdoubledata_.Clear();
  indulttaskdbdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBOperateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.WelfareDailySignInDBData signInData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signInData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_signInData;
        if (input->ExpectTag(18)) goto parse_loginGiftData;
        break;
      }

      // repeated .proto_ff.WelfareLoginGiftDBData loginGiftData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginGiftData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logingiftdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginGiftData;
        if (input->ExpectTag(26)) goto parse_levelGiftData;
        break;
      }

      // repeated .proto_ff.WelfareLevelGiftDBData levelGiftData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelGiftData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelgiftdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_levelGiftData;
        if (input->ExpectTag(34)) goto parse_shopData;
        break;
      }

      // repeated .proto_ff.LimitShopData shopData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shopData;
        if (input->ExpectTag(42)) goto parse_taskData;
        break;
      }

      // repeated .proto_ff.LimitTaskData taskData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_taskData;
        if (input->ExpectTag(50)) goto parse_wishData;
        break;
      }

      // repeated .proto_ff.WishDBData wishData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wishData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wishdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_wishData;
        if (input->ExpectTag(58)) goto parse_dailyRecharge;
        break;
      }

      // optional .proto_ff.OperateDailyRechargeData dailyRecharge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailyRecharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyrecharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_firstRecharge;
        break;
      }

      // optional .proto_ff.OperateFirstRechargeData firstRecharge = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firstRecharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firstrecharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_moonCard;
        break;
      }

      // optional .proto_ff.OperateMoonCardData moonCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moonCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mooncard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_noviceFund;
        break;
      }

      // optional .proto_ff.OperateFundData noviceFund = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noviceFund:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_novicefund()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_growthFund;
        break;
      }

      // optional .proto_ff.OperateFundData growthFund = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growthFund:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_growthfund()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dreamFund;
        break;
      }

      // optional .proto_ff.OperateFundData dreamFund = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dreamFund:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dreamfund()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_noviceFundHigh;
        break;
      }

      // optional .proto_ff.OperateFundData noviceFundHigh = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noviceFundHigh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_novicefundhigh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_growthFundHigh;
        break;
      }

      // optional .proto_ff.OperateFundData growthFundHigh = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growthFundHigh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_growthfundhigh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_dreamFundHigh;
        break;
      }

      // optional .proto_ff.OperateFundData dreamFundHigh = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dreamFundHigh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dreamfundhigh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_fInvestDBData;
        break;
      }

      // repeated .proto_ff.FestivalInvestDBData fInvestDBData = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fInvestDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_finvestdbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_fInvestDBData;
        if (input->ExpectTag(138)) goto parse_fExchangeDBData;
        break;
      }

      // repeated .proto_ff.FestivalExchangeDBData fExchangeDBData = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fExchangeDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fexchangedbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_fExchangeDBData;
        if (input->ExpectTag(146)) goto parse_fLoginDBData;
        break;
      }

      // repeated .proto_ff.FestivalLoginDBData fLoginDBData = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fLoginDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flogindbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_fLoginDBData;
        if (input->ExpectTag(154)) goto parse_fRechargeDBData;
        break;
      }

      // repeated .proto_ff.FestivalTotalRechargeDBData fRechargeDBData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fRechargeDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frechargedbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_fRechargeDBData;
        if (input->ExpectTag(162)) goto parse_fConsumptionDBData;
        break;
      }

      // repeated .proto_ff.FestivalConsumptionDBData fConsumptionDBData = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fConsumptionDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fconsumptiondbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_fConsumptionDBData;
        if (input->ExpectTag(170)) goto parse_fFirstRechargeDBData;
        break;
      }

      // repeated .proto_ff.FestivalFirstRechargeDBData fFirstRechargeDBData = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fFirstRechargeDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ffirstrechargedbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_fFirstRechargeDBData;
        if (input->ExpectTag(178)) goto parse_fYanHuaDBData;
        break;
      }

      // repeated .proto_ff.FestivalYanHuaDBData fYanHuaDBData = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fYanHuaDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fyanhuadbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_fYanHuaDBData;
        if (input->ExpectTag(186)) goto parse_fShopDBData;
        break;
      }

      // repeated .proto_ff.FestivalShopDBData fShopDBData = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fShopDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fshopdbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_fShopDBData;
        if (input->ExpectTag(194)) goto parse_limitGiftDBData;
        break;
      }

      // repeated .proto_ff.LimitGiftActiveDBData limitGiftDBData = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limitGiftDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitgiftdbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_limitGiftDBData;
        if (input->ExpectTag(202)) goto parse_horoscopeDBData;
        break;
      }

      // repeated .proto_ff.HoroscopeActiveDBData horoscopeDBData = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horoscopeDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_horoscopedbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_horoscopeDBData;
        if (input->ExpectTag(210)) goto parse_festivalRechargeDBData;
        break;
      }

      // repeated .proto_ff.FRechargeActiveDBData festivalRechargeDBData = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalRechargeDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalrechargedbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_festivalRechargeDBData;
        if (input->ExpectTag(218)) goto parse_fSmashEggDBData;
        break;
      }

      // repeated .proto_ff.FestivalSmashEggDBData fSmashEggDBData = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fSmashEggDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fsmasheggdbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_fSmashEggDBData;
        if (input->ExpectTag(226)) goto parse_redPointClickData;
        break;
      }

      // repeated .proto_ff.ComPair64 redPointClickData = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redPointClickData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redpointclickdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_redPointClickData;
        if (input->ExpectTag(234)) goto parse_wVipDBData;
        break;
      }

      // repeated .proto_ff.WelfareVipGiftDBData wVipDBData = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wVipDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wvipdbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_wVipDBData;
        if (input->ExpectTag(242)) goto parse_wOnlineDBData;
        break;
      }

      // repeated .proto_ff.WelfareOnlineGiftDBData wOnlineDBData = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wOnlineDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wonlinedbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_wOnlineDBData;
        if (input->ExpectTag(250)) goto parse_fBossDBData;
        break;
      }

      // repeated .proto_ff.FestivalKillBossData fBossDBData = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fBossDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fbossdbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_fBossDBData;
        if (input->ExpectTag(258)) goto parse_fHuoYueDuDBData;
        break;
      }

      // repeated .proto_ff.FestivalHuoYueDuDBData fHuoYueDuDBData = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fHuoYueDuDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fhuoyuedudbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_fHuoYueDuDBData;
        if (input->ExpectTag(266)) goto parse_fTurntableDBData;
        break;
      }

      // repeated .proto_ff.OperationTurntableDBData fTurntableDBData = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fTurntableDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fturntabledbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_fTurntableDBData;
        if (input->ExpectTag(274)) goto parse_TutorDBData;
        break;
      }

      // repeated .proto_ff.OperationTutorDBData TutorDBData = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TutorDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tutordbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_TutorDBData;
        if (input->ExpectTag(282)) goto parse_zhiChongData;
        break;
      }

      // repeated .proto_ff.FestivalZhiChongData zhiChongData = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zhiChongData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zhichongdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_zhiChongData;
        if (input->ExpectTag(290)) goto parse_limitData;
        break;
      }

      // repeated .proto_ff.limitInfo limitData = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limitData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_limitData;
        if (input->ExpectTag(298)) goto parse_superData;
        break;
      }

      // repeated .proto_ff.FestivalSuperDBData superData = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_superData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_superdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_superData;
        if (input->ExpectTag(306)) goto parse_fBigYanHuaDBData;
        break;
      }

      // repeated .proto_ff.FestivalBigYanHuaDBData fBigYanHuaDBData = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fBigYanHuaDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fbigyanhuadbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_fBigYanHuaDBData;
        if (input->ExpectTag(314)) goto parse_worldBossData;
        break;
      }

      // repeated .proto_ff.FestivalWorldBossData worldBossData = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldBossData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldbossdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_worldBossData;
        if (input->ExpectTag(322)) goto parse_prerechargedata;
        break;
      }

      // repeated .proto_ff.FestivalPreRechargeData prerechargedata = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prerechargedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prerechargedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_prerechargedata;
        if (input->ExpectTag(330)) goto parse_winggiftdata;
        break;
      }

      // optional .proto_ff.OperateWingGiftData winggiftdata = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winggiftdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winggiftdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_rechargegiftdata;
        break;
      }

      // optional .proto_ff.OperateRechargeGiftData rechargegiftdata = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargegiftdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rechargegiftdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_superDoubleData;
        break;
      }

      // repeated .proto_ff.FestivalSuperDoubleDBData superDoubleData = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_superDoubleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_superdoubledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_superDoubleData;
        if (input->ExpectTag(354)) goto parse_IndultTaskDBData;
        break;
      }

      // repeated .proto_ff.IndultTaskGroupEntry IndultTaskDBData = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IndultTaskDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indulttaskdbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_IndultTaskDBData;
        if (input->ExpectTag(362)) goto parse_ColPointsTaskData;
        break;
      }

      // optional .proto_ff.ColPointsTaskData ColPointsTaskData = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ColPointsTaskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colpointstaskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBOperateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.WelfareDailySignInDBData signInData = 1;
  for (int i = 0; i < this->signindata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signindata(i), output);
  }

  // repeated .proto_ff.WelfareLoginGiftDBData loginGiftData = 2;
  for (int i = 0; i < this->logingiftdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logingiftdata(i), output);
  }

  // repeated .proto_ff.WelfareLevelGiftDBData levelGiftData = 3;
  for (int i = 0; i < this->levelgiftdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->levelgiftdata(i), output);
  }

  // repeated .proto_ff.LimitShopData shopData = 4;
  for (int i = 0; i < this->shopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shopdata(i), output);
  }

  // repeated .proto_ff.LimitTaskData taskData = 5;
  for (int i = 0; i < this->taskdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->taskdata(i), output);
  }

  // repeated .proto_ff.WishDBData wishData = 6;
  for (int i = 0; i < this->wishdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->wishdata(i), output);
  }

  // optional .proto_ff.OperateDailyRechargeData dailyRecharge = 7;
  if (has_dailyrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dailyrecharge(), output);
  }

  // optional .proto_ff.OperateFirstRechargeData firstRecharge = 8;
  if (has_firstrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->firstrecharge(), output);
  }

  // optional .proto_ff.OperateMoonCardData moonCard = 9;
  if (has_mooncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mooncard(), output);
  }

  // optional .proto_ff.OperateFundData noviceFund = 10;
  if (has_novicefund()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->novicefund(), output);
  }

  // optional .proto_ff.OperateFundData growthFund = 11;
  if (has_growthfund()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->growthfund(), output);
  }

  // optional .proto_ff.OperateFundData dreamFund = 12;
  if (has_dreamfund()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dreamfund(), output);
  }

  // optional .proto_ff.OperateFundData noviceFundHigh = 13;
  if (has_novicefundhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->novicefundhigh(), output);
  }

  // optional .proto_ff.OperateFundData growthFundHigh = 14;
  if (has_growthfundhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->growthfundhigh(), output);
  }

  // optional .proto_ff.OperateFundData dreamFundHigh = 15;
  if (has_dreamfundhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->dreamfundhigh(), output);
  }

  // repeated .proto_ff.FestivalInvestDBData fInvestDBData = 16;
  for (int i = 0; i < this->finvestdbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->finvestdbdata(i), output);
  }

  // repeated .proto_ff.FestivalExchangeDBData fExchangeDBData = 17;
  for (int i = 0; i < this->fexchangedbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->fexchangedbdata(i), output);
  }

  // repeated .proto_ff.FestivalLoginDBData fLoginDBData = 18;
  for (int i = 0; i < this->flogindbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->flogindbdata(i), output);
  }

  // repeated .proto_ff.FestivalTotalRechargeDBData fRechargeDBData = 19;
  for (int i = 0; i < this->frechargedbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->frechargedbdata(i), output);
  }

  // repeated .proto_ff.FestivalConsumptionDBData fConsumptionDBData = 20;
  for (int i = 0; i < this->fconsumptiondbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->fconsumptiondbdata(i), output);
  }

  // repeated .proto_ff.FestivalFirstRechargeDBData fFirstRechargeDBData = 21;
  for (int i = 0; i < this->ffirstrechargedbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->ffirstrechargedbdata(i), output);
  }

  // repeated .proto_ff.FestivalYanHuaDBData fYanHuaDBData = 22;
  for (int i = 0; i < this->fyanhuadbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->fyanhuadbdata(i), output);
  }

  // repeated .proto_ff.FestivalShopDBData fShopDBData = 23;
  for (int i = 0; i < this->fshopdbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->fshopdbdata(i), output);
  }

  // repeated .proto_ff.LimitGiftActiveDBData limitGiftDBData = 24;
  for (int i = 0; i < this->limitgiftdbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->limitgiftdbdata(i), output);
  }

  // repeated .proto_ff.HoroscopeActiveDBData horoscopeDBData = 25;
  for (int i = 0; i < this->horoscopedbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->horoscopedbdata(i), output);
  }

  // repeated .proto_ff.FRechargeActiveDBData festivalRechargeDBData = 26;
  for (int i = 0; i < this->festivalrechargedbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->festivalrechargedbdata(i), output);
  }

  // repeated .proto_ff.FestivalSmashEggDBData fSmashEggDBData = 27;
  for (int i = 0; i < this->fsmasheggdbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->fsmasheggdbdata(i), output);
  }

  // repeated .proto_ff.ComPair64 redPointClickData = 28;
  for (int i = 0; i < this->redpointclickdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->redpointclickdata(i), output);
  }

  // repeated .proto_ff.WelfareVipGiftDBData wVipDBData = 29;
  for (int i = 0; i < this->wvipdbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->wvipdbdata(i), output);
  }

  // repeated .proto_ff.WelfareOnlineGiftDBData wOnlineDBData = 30;
  for (int i = 0; i < this->wonlinedbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->wonlinedbdata(i), output);
  }

  // repeated .proto_ff.FestivalKillBossData fBossDBData = 31;
  for (int i = 0; i < this->fbossdbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->fbossdbdata(i), output);
  }

  // repeated .proto_ff.FestivalHuoYueDuDBData fHuoYueDuDBData = 32;
  for (int i = 0; i < this->fhuoyuedudbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->fhuoyuedudbdata(i), output);
  }

  // repeated .proto_ff.OperationTurntableDBData fTurntableDBData = 33;
  for (int i = 0; i < this->fturntabledbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->fturntabledbdata(i), output);
  }

  // repeated .proto_ff.OperationTutorDBData TutorDBData = 34;
  for (int i = 0; i < this->tutordbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->tutordbdata(i), output);
  }

  // repeated .proto_ff.FestivalZhiChongData zhiChongData = 35;
  for (int i = 0; i < this->zhichongdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->zhichongdata(i), output);
  }

  // repeated .proto_ff.limitInfo limitData = 36;
  for (int i = 0; i < this->limitdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->limitdata(i), output);
  }

  // repeated .proto_ff.FestivalSuperDBData superData = 37;
  for (int i = 0; i < this->superdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->superdata(i), output);
  }

  // repeated .proto_ff.FestivalBigYanHuaDBData fBigYanHuaDBData = 38;
  for (int i = 0; i < this->fbigyanhuadbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->fbigyanhuadbdata(i), output);
  }

  // repeated .proto_ff.FestivalWorldBossData worldBossData = 39;
  for (int i = 0; i < this->worldbossdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->worldbossdata(i), output);
  }

  // repeated .proto_ff.FestivalPreRechargeData prerechargedata = 40;
  for (int i = 0; i < this->prerechargedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->prerechargedata(i), output);
  }

  // optional .proto_ff.OperateWingGiftData winggiftdata = 41;
  if (has_winggiftdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->winggiftdata(), output);
  }

  // optional .proto_ff.OperateRechargeGiftData rechargegiftdata = 42;
  if (has_rechargegiftdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->rechargegiftdata(), output);
  }

  // repeated .proto_ff.FestivalSuperDoubleDBData superDoubleData = 43;
  for (int i = 0; i < this->superdoubledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->superdoubledata(i), output);
  }

  // repeated .proto_ff.IndultTaskGroupEntry IndultTaskDBData = 44;
  for (int i = 0; i < this->indulttaskdbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->indulttaskdbdata(i), output);
  }

  // optional .proto_ff.ColPointsTaskData ColPointsTaskData = 45;
  if (has_colpointstaskdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->colpointstaskdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBOperateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.WelfareDailySignInDBData signInData = 1;
  for (int i = 0; i < this->signindata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signindata(i), target);
  }

  // repeated .proto_ff.WelfareLoginGiftDBData loginGiftData = 2;
  for (int i = 0; i < this->logingiftdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logingiftdata(i), target);
  }

  // repeated .proto_ff.WelfareLevelGiftDBData levelGiftData = 3;
  for (int i = 0; i < this->levelgiftdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->levelgiftdata(i), target);
  }

  // repeated .proto_ff.LimitShopData shopData = 4;
  for (int i = 0; i < this->shopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shopdata(i), target);
  }

  // repeated .proto_ff.LimitTaskData taskData = 5;
  for (int i = 0; i < this->taskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->taskdata(i), target);
  }

  // repeated .proto_ff.WishDBData wishData = 6;
  for (int i = 0; i < this->wishdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->wishdata(i), target);
  }

  // optional .proto_ff.OperateDailyRechargeData dailyRecharge = 7;
  if (has_dailyrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dailyrecharge(), target);
  }

  // optional .proto_ff.OperateFirstRechargeData firstRecharge = 8;
  if (has_firstrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->firstrecharge(), target);
  }

  // optional .proto_ff.OperateMoonCardData moonCard = 9;
  if (has_mooncard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mooncard(), target);
  }

  // optional .proto_ff.OperateFundData noviceFund = 10;
  if (has_novicefund()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->novicefund(), target);
  }

  // optional .proto_ff.OperateFundData growthFund = 11;
  if (has_growthfund()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->growthfund(), target);
  }

  // optional .proto_ff.OperateFundData dreamFund = 12;
  if (has_dreamfund()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dreamfund(), target);
  }

  // optional .proto_ff.OperateFundData noviceFundHigh = 13;
  if (has_novicefundhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->novicefundhigh(), target);
  }

  // optional .proto_ff.OperateFundData growthFundHigh = 14;
  if (has_growthfundhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->growthfundhigh(), target);
  }

  // optional .proto_ff.OperateFundData dreamFundHigh = 15;
  if (has_dreamfundhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->dreamfundhigh(), target);
  }

  // repeated .proto_ff.FestivalInvestDBData fInvestDBData = 16;
  for (int i = 0; i < this->finvestdbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->finvestdbdata(i), target);
  }

  // repeated .proto_ff.FestivalExchangeDBData fExchangeDBData = 17;
  for (int i = 0; i < this->fexchangedbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->fexchangedbdata(i), target);
  }

  // repeated .proto_ff.FestivalLoginDBData fLoginDBData = 18;
  for (int i = 0; i < this->flogindbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->flogindbdata(i), target);
  }

  // repeated .proto_ff.FestivalTotalRechargeDBData fRechargeDBData = 19;
  for (int i = 0; i < this->frechargedbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->frechargedbdata(i), target);
  }

  // repeated .proto_ff.FestivalConsumptionDBData fConsumptionDBData = 20;
  for (int i = 0; i < this->fconsumptiondbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->fconsumptiondbdata(i), target);
  }

  // repeated .proto_ff.FestivalFirstRechargeDBData fFirstRechargeDBData = 21;
  for (int i = 0; i < this->ffirstrechargedbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->ffirstrechargedbdata(i), target);
  }

  // repeated .proto_ff.FestivalYanHuaDBData fYanHuaDBData = 22;
  for (int i = 0; i < this->fyanhuadbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->fyanhuadbdata(i), target);
  }

  // repeated .proto_ff.FestivalShopDBData fShopDBData = 23;
  for (int i = 0; i < this->fshopdbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->fshopdbdata(i), target);
  }

  // repeated .proto_ff.LimitGiftActiveDBData limitGiftDBData = 24;
  for (int i = 0; i < this->limitgiftdbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->limitgiftdbdata(i), target);
  }

  // repeated .proto_ff.HoroscopeActiveDBData horoscopeDBData = 25;
  for (int i = 0; i < this->horoscopedbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->horoscopedbdata(i), target);
  }

  // repeated .proto_ff.FRechargeActiveDBData festivalRechargeDBData = 26;
  for (int i = 0; i < this->festivalrechargedbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->festivalrechargedbdata(i), target);
  }

  // repeated .proto_ff.FestivalSmashEggDBData fSmashEggDBData = 27;
  for (int i = 0; i < this->fsmasheggdbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->fsmasheggdbdata(i), target);
  }

  // repeated .proto_ff.ComPair64 redPointClickData = 28;
  for (int i = 0; i < this->redpointclickdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->redpointclickdata(i), target);
  }

  // repeated .proto_ff.WelfareVipGiftDBData wVipDBData = 29;
  for (int i = 0; i < this->wvipdbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->wvipdbdata(i), target);
  }

  // repeated .proto_ff.WelfareOnlineGiftDBData wOnlineDBData = 30;
  for (int i = 0; i < this->wonlinedbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->wonlinedbdata(i), target);
  }

  // repeated .proto_ff.FestivalKillBossData fBossDBData = 31;
  for (int i = 0; i < this->fbossdbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->fbossdbdata(i), target);
  }

  // repeated .proto_ff.FestivalHuoYueDuDBData fHuoYueDuDBData = 32;
  for (int i = 0; i < this->fhuoyuedudbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->fhuoyuedudbdata(i), target);
  }

  // repeated .proto_ff.OperationTurntableDBData fTurntableDBData = 33;
  for (int i = 0; i < this->fturntabledbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->fturntabledbdata(i), target);
  }

  // repeated .proto_ff.OperationTutorDBData TutorDBData = 34;
  for (int i = 0; i < this->tutordbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->tutordbdata(i), target);
  }

  // repeated .proto_ff.FestivalZhiChongData zhiChongData = 35;
  for (int i = 0; i < this->zhichongdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->zhichongdata(i), target);
  }

  // repeated .proto_ff.limitInfo limitData = 36;
  for (int i = 0; i < this->limitdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->limitdata(i), target);
  }

  // repeated .proto_ff.FestivalSuperDBData superData = 37;
  for (int i = 0; i < this->superdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->superdata(i), target);
  }

  // repeated .proto_ff.FestivalBigYanHuaDBData fBigYanHuaDBData = 38;
  for (int i = 0; i < this->fbigyanhuadbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->fbigyanhuadbdata(i), target);
  }

  // repeated .proto_ff.FestivalWorldBossData worldBossData = 39;
  for (int i = 0; i < this->worldbossdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->worldbossdata(i), target);
  }

  // repeated .proto_ff.FestivalPreRechargeData prerechargedata = 40;
  for (int i = 0; i < this->prerechargedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->prerechargedata(i), target);
  }

  // optional .proto_ff.OperateWingGiftData winggiftdata = 41;
  if (has_winggiftdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->winggiftdata(), target);
  }

  // optional .proto_ff.OperateRechargeGiftData rechargegiftdata = 42;
  if (has_rechargegiftdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->rechargegiftdata(), target);
  }

  // repeated .proto_ff.FestivalSuperDoubleDBData superDoubleData = 43;
  for (int i = 0; i < this->superdoubledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->superdoubledata(i), target);
  }

  // repeated .proto_ff.IndultTaskGroupEntry IndultTaskDBData = 44;
  for (int i = 0; i < this->indulttaskdbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->indulttaskdbdata(i), target);
  }

  // optional .proto_ff.ColPointsTaskData ColPointsTaskData = 45;
  if (has_colpointstaskdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->colpointstaskdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBOperateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional .proto_ff.OperateDailyRechargeData dailyRecharge = 7;
    if (has_dailyrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyrecharge());
    }

    // optional .proto_ff.OperateFirstRechargeData firstRecharge = 8;
    if (has_firstrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firstrecharge());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.OperateMoonCardData moonCard = 9;
    if (has_mooncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mooncard());
    }

    // optional .proto_ff.OperateFundData noviceFund = 10;
    if (has_novicefund()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->novicefund());
    }

    // optional .proto_ff.OperateFundData growthFund = 11;
    if (has_growthfund()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->growthfund());
    }

    // optional .proto_ff.OperateFundData dreamFund = 12;
    if (has_dreamfund()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dreamfund());
    }

    // optional .proto_ff.OperateFundData noviceFundHigh = 13;
    if (has_novicefundhigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->novicefundhigh());
    }

    // optional .proto_ff.OperateFundData growthFundHigh = 14;
    if (has_growthfundhigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->growthfundhigh());
    }

    // optional .proto_ff.OperateFundData dreamFundHigh = 15;
    if (has_dreamfundhigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dreamfundhigh());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .proto_ff.OperateWingGiftData winggiftdata = 41;
    if (has_winggiftdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winggiftdata());
    }

    // optional .proto_ff.OperateRechargeGiftData rechargegiftdata = 42;
    if (has_rechargegiftdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rechargegiftdata());
    }

    // optional .proto_ff.ColPointsTaskData ColPointsTaskData = 45;
    if (has_colpointstaskdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colpointstaskdata());
    }

  }
  // repeated .proto_ff.WelfareDailySignInDBData signInData = 1;
  total_size += 1 * this->signindata_size();
  for (int i = 0; i < this->signindata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signindata(i));
  }

  // repeated .proto_ff.WelfareLoginGiftDBData loginGiftData = 2;
  total_size += 1 * this->logingiftdata_size();
  for (int i = 0; i < this->logingiftdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logingiftdata(i));
  }

  // repeated .proto_ff.WelfareLevelGiftDBData levelGiftData = 3;
  total_size += 1 * this->levelgiftdata_size();
  for (int i = 0; i < this->levelgiftdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelgiftdata(i));
  }

  // repeated .proto_ff.LimitShopData shopData = 4;
  total_size += 1 * this->shopdata_size();
  for (int i = 0; i < this->shopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopdata(i));
  }

  // repeated .proto_ff.LimitTaskData taskData = 5;
  total_size += 1 * this->taskdata_size();
  for (int i = 0; i < this->taskdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskdata(i));
  }

  // repeated .proto_ff.WishDBData wishData = 6;
  total_size += 1 * this->wishdata_size();
  for (int i = 0; i < this->wishdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wishdata(i));
  }

  // repeated .proto_ff.FestivalInvestDBData fInvestDBData = 16;
  total_size += 2 * this->finvestdbdata_size();
  for (int i = 0; i < this->finvestdbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->finvestdbdata(i));
  }

  // repeated .proto_ff.FestivalExchangeDBData fExchangeDBData = 17;
  total_size += 2 * this->fexchangedbdata_size();
  for (int i = 0; i < this->fexchangedbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fexchangedbdata(i));
  }

  // repeated .proto_ff.FestivalLoginDBData fLoginDBData = 18;
  total_size += 2 * this->flogindbdata_size();
  for (int i = 0; i < this->flogindbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flogindbdata(i));
  }

  // repeated .proto_ff.FestivalTotalRechargeDBData fRechargeDBData = 19;
  total_size += 2 * this->frechargedbdata_size();
  for (int i = 0; i < this->frechargedbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frechargedbdata(i));
  }

  // repeated .proto_ff.FestivalConsumptionDBData fConsumptionDBData = 20;
  total_size += 2 * this->fconsumptiondbdata_size();
  for (int i = 0; i < this->fconsumptiondbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fconsumptiondbdata(i));
  }

  // repeated .proto_ff.FestivalFirstRechargeDBData fFirstRechargeDBData = 21;
  total_size += 2 * this->ffirstrechargedbdata_size();
  for (int i = 0; i < this->ffirstrechargedbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ffirstrechargedbdata(i));
  }

  // repeated .proto_ff.FestivalYanHuaDBData fYanHuaDBData = 22;
  total_size += 2 * this->fyanhuadbdata_size();
  for (int i = 0; i < this->fyanhuadbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fyanhuadbdata(i));
  }

  // repeated .proto_ff.FestivalShopDBData fShopDBData = 23;
  total_size += 2 * this->fshopdbdata_size();
  for (int i = 0; i < this->fshopdbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fshopdbdata(i));
  }

  // repeated .proto_ff.LimitGiftActiveDBData limitGiftDBData = 24;
  total_size += 2 * this->limitgiftdbdata_size();
  for (int i = 0; i < this->limitgiftdbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitgiftdbdata(i));
  }

  // repeated .proto_ff.HoroscopeActiveDBData horoscopeDBData = 25;
  total_size += 2 * this->horoscopedbdata_size();
  for (int i = 0; i < this->horoscopedbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->horoscopedbdata(i));
  }

  // repeated .proto_ff.FRechargeActiveDBData festivalRechargeDBData = 26;
  total_size += 2 * this->festivalrechargedbdata_size();
  for (int i = 0; i < this->festivalrechargedbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalrechargedbdata(i));
  }

  // repeated .proto_ff.FestivalSmashEggDBData fSmashEggDBData = 27;
  total_size += 2 * this->fsmasheggdbdata_size();
  for (int i = 0; i < this->fsmasheggdbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fsmasheggdbdata(i));
  }

  // repeated .proto_ff.ComPair64 redPointClickData = 28;
  total_size += 2 * this->redpointclickdata_size();
  for (int i = 0; i < this->redpointclickdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redpointclickdata(i));
  }

  // repeated .proto_ff.WelfareVipGiftDBData wVipDBData = 29;
  total_size += 2 * this->wvipdbdata_size();
  for (int i = 0; i < this->wvipdbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wvipdbdata(i));
  }

  // repeated .proto_ff.WelfareOnlineGiftDBData wOnlineDBData = 30;
  total_size += 2 * this->wonlinedbdata_size();
  for (int i = 0; i < this->wonlinedbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wonlinedbdata(i));
  }

  // repeated .proto_ff.FestivalKillBossData fBossDBData = 31;
  total_size += 2 * this->fbossdbdata_size();
  for (int i = 0; i < this->fbossdbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fbossdbdata(i));
  }

  // repeated .proto_ff.FestivalHuoYueDuDBData fHuoYueDuDBData = 32;
  total_size += 2 * this->fhuoyuedudbdata_size();
  for (int i = 0; i < this->fhuoyuedudbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fhuoyuedudbdata(i));
  }

  // repeated .proto_ff.OperationTurntableDBData fTurntableDBData = 33;
  total_size += 2 * this->fturntabledbdata_size();
  for (int i = 0; i < this->fturntabledbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fturntabledbdata(i));
  }

  // repeated .proto_ff.OperationTutorDBData TutorDBData = 34;
  total_size += 2 * this->tutordbdata_size();
  for (int i = 0; i < this->tutordbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tutordbdata(i));
  }

  // repeated .proto_ff.FestivalZhiChongData zhiChongData = 35;
  total_size += 2 * this->zhichongdata_size();
  for (int i = 0; i < this->zhichongdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zhichongdata(i));
  }

  // repeated .proto_ff.limitInfo limitData = 36;
  total_size += 2 * this->limitdata_size();
  for (int i = 0; i < this->limitdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitdata(i));
  }

  // repeated .proto_ff.FestivalSuperDBData superData = 37;
  total_size += 2 * this->superdata_size();
  for (int i = 0; i < this->superdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->superdata(i));
  }

  // repeated .proto_ff.FestivalBigYanHuaDBData fBigYanHuaDBData = 38;
  total_size += 2 * this->fbigyanhuadbdata_size();
  for (int i = 0; i < this->fbigyanhuadbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fbigyanhuadbdata(i));
  }

  // repeated .proto_ff.FestivalWorldBossData worldBossData = 39;
  total_size += 2 * this->worldbossdata_size();
  for (int i = 0; i < this->worldbossdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldbossdata(i));
  }

  // repeated .proto_ff.FestivalPreRechargeData prerechargedata = 40;
  total_size += 2 * this->prerechargedata_size();
  for (int i = 0; i < this->prerechargedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prerechargedata(i));
  }

  // repeated .proto_ff.FestivalSuperDoubleDBData superDoubleData = 43;
  total_size += 2 * this->superdoubledata_size();
  for (int i = 0; i < this->superdoubledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->superdoubledata(i));
  }

  // repeated .proto_ff.IndultTaskGroupEntry IndultTaskDBData = 44;
  total_size += 2 * this->indulttaskdbdata_size();
  for (int i = 0; i < this->indulttaskdbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indulttaskdbdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBOperateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBOperateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBOperateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBOperateData::MergeFrom(const CharacterDBOperateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  signindata_.MergeFrom(from.signindata_);
  logingiftdata_.MergeFrom(from.logingiftdata_);
  levelgiftdata_.MergeFrom(from.levelgiftdata_);
  shopdata_.MergeFrom(from.shopdata_);
  taskdata_.MergeFrom(from.taskdata_);
  wishdata_.MergeFrom(from.wishdata_);
  finvestdbdata_.MergeFrom(from.finvestdbdata_);
  fexchangedbdata_.MergeFrom(from.fexchangedbdata_);
  flogindbdata_.MergeFrom(from.flogindbdata_);
  frechargedbdata_.MergeFrom(from.frechargedbdata_);
  fconsumptiondbdata_.MergeFrom(from.fconsumptiondbdata_);
  ffirstrechargedbdata_.MergeFrom(from.ffirstrechargedbdata_);
  fyanhuadbdata_.MergeFrom(from.fyanhuadbdata_);
  fshopdbdata_.MergeFrom(from.fshopdbdata_);
  limitgiftdbdata_.MergeFrom(from.limitgiftdbdata_);
  horoscopedbdata_.MergeFrom(from.horoscopedbdata_);
  festivalrechargedbdata_.MergeFrom(from.festivalrechargedbdata_);
  fsmasheggdbdata_.MergeFrom(from.fsmasheggdbdata_);
  redpointclickdata_.MergeFrom(from.redpointclickdata_);
  wvipdbdata_.MergeFrom(from.wvipdbdata_);
  wonlinedbdata_.MergeFrom(from.wonlinedbdata_);
  fbossdbdata_.MergeFrom(from.fbossdbdata_);
  fhuoyuedudbdata_.MergeFrom(from.fhuoyuedudbdata_);
  fturntabledbdata_.MergeFrom(from.fturntabledbdata_);
  tutordbdata_.MergeFrom(from.tutordbdata_);
  zhichongdata_.MergeFrom(from.zhichongdata_);
  limitdata_.MergeFrom(from.limitdata_);
  superdata_.MergeFrom(from.superdata_);
  fbigyanhuadbdata_.MergeFrom(from.fbigyanhuadbdata_);
  worldbossdata_.MergeFrom(from.worldbossdata_);
  prerechargedata_.MergeFrom(from.prerechargedata_);
  superdoubledata_.MergeFrom(from.superdoubledata_);
  indulttaskdbdata_.MergeFrom(from.indulttaskdbdata_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from.has_dailyrecharge()) {
      mutable_dailyrecharge()->::proto_ff::OperateDailyRechargeData::MergeFrom(from.dailyrecharge());
    }
    if (from.has_firstrecharge()) {
      mutable_firstrecharge()->::proto_ff::OperateFirstRechargeData::MergeFrom(from.firstrecharge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mooncard()) {
      mutable_mooncard()->::proto_ff::OperateMoonCardData::MergeFrom(from.mooncard());
    }
    if (from.has_novicefund()) {
      mutable_novicefund()->::proto_ff::OperateFundData::MergeFrom(from.novicefund());
    }
    if (from.has_growthfund()) {
      mutable_growthfund()->::proto_ff::OperateFundData::MergeFrom(from.growthfund());
    }
    if (from.has_dreamfund()) {
      mutable_dreamfund()->::proto_ff::OperateFundData::MergeFrom(from.dreamfund());
    }
    if (from.has_novicefundhigh()) {
      mutable_novicefundhigh()->::proto_ff::OperateFundData::MergeFrom(from.novicefundhigh());
    }
    if (from.has_growthfundhigh()) {
      mutable_growthfundhigh()->::proto_ff::OperateFundData::MergeFrom(from.growthfundhigh());
    }
    if (from.has_dreamfundhigh()) {
      mutable_dreamfundhigh()->::proto_ff::OperateFundData::MergeFrom(from.dreamfundhigh());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_winggiftdata()) {
      mutable_winggiftdata()->::proto_ff::OperateWingGiftData::MergeFrom(from.winggiftdata());
    }
    if (from.has_rechargegiftdata()) {
      mutable_rechargegiftdata()->::proto_ff::OperateRechargeGiftData::MergeFrom(from.rechargegiftdata());
    }
    if (from.has_colpointstaskdata()) {
      mutable_colpointstaskdata()->::proto_ff::ColPointsTaskData::MergeFrom(from.colpointstaskdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBOperateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBOperateData::CopyFrom(const CharacterDBOperateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBOperateData::IsInitialized() const {

  return true;
}

void CharacterDBOperateData::Swap(CharacterDBOperateData* other) {
  if (other != this) {
    signindata_.Swap(&other->signindata_);
    logingiftdata_.Swap(&other->logingiftdata_);
    levelgiftdata_.Swap(&other->levelgiftdata_);
    shopdata_.Swap(&other->shopdata_);
    taskdata_.Swap(&other->taskdata_);
    wishdata_.Swap(&other->wishdata_);
    std::swap(dailyrecharge_, other->dailyrecharge_);
    std::swap(firstrecharge_, other->firstrecharge_);
    std::swap(mooncard_, other->mooncard_);
    std::swap(novicefund_, other->novicefund_);
    std::swap(growthfund_, other->growthfund_);
    std::swap(dreamfund_, other->dreamfund_);
    std::swap(novicefundhigh_, other->novicefundhigh_);
    std::swap(growthfundhigh_, other->growthfundhigh_);
    std::swap(dreamfundhigh_, other->dreamfundhigh_);
    finvestdbdata_.Swap(&other->finvestdbdata_);
    fexchangedbdata_.Swap(&other->fexchangedbdata_);
    flogindbdata_.Swap(&other->flogindbdata_);
    frechargedbdata_.Swap(&other->frechargedbdata_);
    fconsumptiondbdata_.Swap(&other->fconsumptiondbdata_);
    ffirstrechargedbdata_.Swap(&other->ffirstrechargedbdata_);
    fyanhuadbdata_.Swap(&other->fyanhuadbdata_);
    fshopdbdata_.Swap(&other->fshopdbdata_);
    limitgiftdbdata_.Swap(&other->limitgiftdbdata_);
    horoscopedbdata_.Swap(&other->horoscopedbdata_);
    festivalrechargedbdata_.Swap(&other->festivalrechargedbdata_);
    fsmasheggdbdata_.Swap(&other->fsmasheggdbdata_);
    redpointclickdata_.Swap(&other->redpointclickdata_);
    wvipdbdata_.Swap(&other->wvipdbdata_);
    wonlinedbdata_.Swap(&other->wonlinedbdata_);
    fbossdbdata_.Swap(&other->fbossdbdata_);
    fhuoyuedudbdata_.Swap(&other->fhuoyuedudbdata_);
    fturntabledbdata_.Swap(&other->fturntabledbdata_);
    tutordbdata_.Swap(&other->tutordbdata_);
    zhichongdata_.Swap(&other->zhichongdata_);
    limitdata_.Swap(&other->limitdata_);
    superdata_.Swap(&other->superdata_);
    fbigyanhuadbdata_.Swap(&other->fbigyanhuadbdata_);
    worldbossdata_.Swap(&other->worldbossdata_);
    prerechargedata_.Swap(&other->prerechargedata_);
    std::swap(winggiftdata_, other->winggiftdata_);
    std::swap(rechargegiftdata_, other->rechargegiftdata_);
    superdoubledata_.Swap(&other->superdoubledata_);
    indulttaskdbdata_.Swap(&other->indulttaskdbdata_);
    std::swap(colpointstaskdata_, other->colpointstaskdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBOperateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBOperateData_descriptor_;
  metadata.reflection = CharacterDBOperateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerActiveAnswerData::kAnswerIndexFieldNumber;
const int PlayerActiveAnswerData::kAnswerListFieldNumber;
const int PlayerActiveAnswerData::kAllexpFieldNumber;
const int PlayerActiveAnswerData::kAllmoneyFieldNumber;
const int PlayerActiveAnswerData::kCorrectnumFieldNumber;
const int PlayerActiveAnswerData::kIsGetRewardFieldNumber;
const int PlayerActiveAnswerData::kLastAnswerTimeFieldNumber;
#endif  // !_MSC_VER

PlayerActiveAnswerData::PlayerActiveAnswerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerActiveAnswerData::InitAsDefaultInstance() {
}

PlayerActiveAnswerData::PlayerActiveAnswerData(const PlayerActiveAnswerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerActiveAnswerData::SharedCtor() {
  _cached_size_ = 0;
  answerindex_ = 0u;
  allexp_ = 0u;
  allmoney_ = 0u;
  correctnum_ = 0u;
  isgetreward_ = 0u;
  lastanswertime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerActiveAnswerData::~PlayerActiveAnswerData() {
  SharedDtor();
}

void PlayerActiveAnswerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerActiveAnswerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerActiveAnswerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerActiveAnswerData_descriptor_;
}

const PlayerActiveAnswerData& PlayerActiveAnswerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

PlayerActiveAnswerData* PlayerActiveAnswerData::default_instance_ = NULL;

PlayerActiveAnswerData* PlayerActiveAnswerData::New() const {
  return new PlayerActiveAnswerData;
}

void PlayerActiveAnswerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answerindex_ = 0u;
    allexp_ = 0u;
    allmoney_ = 0u;
    correctnum_ = 0u;
    isgetreward_ = 0u;
    lastanswertime_ = GOOGLE_ULONGLONG(0);
  }
  answerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerActiveAnswerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 answerIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answerindex_)));
          set_has_answerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answerList;
        break;
      }

      // repeated uint32 answerList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_answerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_answerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answerList;
        if (input->ExpectTag(24)) goto parse_allexp;
        break;
      }

      // optional uint32 allexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allexp_)));
          set_has_allexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_allmoney;
        break;
      }

      // optional uint32 allmoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allmoney_)));
          set_has_allmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_correctnum;
        break;
      }

      // optional uint32 correctnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_correctnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &correctnum_)));
          set_has_correctnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isGetReward;
        break;
      }

      // optional uint32 isGetReward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGetReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isgetreward_)));
          set_has_isgetreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastAnswerTime;
        break;
      }

      // optional uint64 lastAnswerTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastAnswerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastanswertime_)));
          set_has_lastanswertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerActiveAnswerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 answerIndex = 1;
  if (has_answerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->answerindex(), output);
  }

  // repeated uint32 answerList = 2;
  for (int i = 0; i < this->answerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->answerlist(i), output);
  }

  // optional uint32 allexp = 3;
  if (has_allexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allexp(), output);
  }

  // optional uint32 allmoney = 4;
  if (has_allmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->allmoney(), output);
  }

  // optional uint32 correctnum = 5;
  if (has_correctnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->correctnum(), output);
  }

  // optional uint32 isGetReward = 6;
  if (has_isgetreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isgetreward(), output);
  }

  // optional uint64 lastAnswerTime = 7;
  if (has_lastanswertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastanswertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerActiveAnswerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 answerIndex = 1;
  if (has_answerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->answerindex(), target);
  }

  // repeated uint32 answerList = 2;
  for (int i = 0; i < this->answerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->answerlist(i), target);
  }

  // optional uint32 allexp = 3;
  if (has_allexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allexp(), target);
  }

  // optional uint32 allmoney = 4;
  if (has_allmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->allmoney(), target);
  }

  // optional uint32 correctnum = 5;
  if (has_correctnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->correctnum(), target);
  }

  // optional uint32 isGetReward = 6;
  if (has_isgetreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isgetreward(), target);
  }

  // optional uint64 lastAnswerTime = 7;
  if (has_lastanswertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lastanswertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerActiveAnswerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 answerIndex = 1;
    if (has_answerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answerindex());
    }

    // optional uint32 allexp = 3;
    if (has_allexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allexp());
    }

    // optional uint32 allmoney = 4;
    if (has_allmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allmoney());
    }

    // optional uint32 correctnum = 5;
    if (has_correctnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->correctnum());
    }

    // optional uint32 isGetReward = 6;
    if (has_isgetreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isgetreward());
    }

    // optional uint64 lastAnswerTime = 7;
    if (has_lastanswertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastanswertime());
    }

  }
  // repeated uint32 answerList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->answerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->answerlist(i));
    }
    total_size += 1 * this->answerlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerActiveAnswerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerActiveAnswerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerActiveAnswerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerActiveAnswerData::MergeFrom(const PlayerActiveAnswerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  answerlist_.MergeFrom(from.answerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answerindex()) {
      set_answerindex(from.answerindex());
    }
    if (from.has_allexp()) {
      set_allexp(from.allexp());
    }
    if (from.has_allmoney()) {
      set_allmoney(from.allmoney());
    }
    if (from.has_correctnum()) {
      set_correctnum(from.correctnum());
    }
    if (from.has_isgetreward()) {
      set_isgetreward(from.isgetreward());
    }
    if (from.has_lastanswertime()) {
      set_lastanswertime(from.lastanswertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerActiveAnswerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerActiveAnswerData::CopyFrom(const PlayerActiveAnswerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerActiveAnswerData::IsInitialized() const {

  return true;
}

void PlayerActiveAnswerData::Swap(PlayerActiveAnswerData* other) {
  if (other != this) {
    std::swap(answerindex_, other->answerindex_);
    answerlist_.Swap(&other->answerlist_);
    std::swap(allexp_, other->allexp_);
    std::swap(allmoney_, other->allmoney_);
    std::swap(correctnum_, other->correctnum_);
    std::swap(isgetreward_, other->isgetreward_);
    std::swap(lastanswertime_, other->lastanswertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerActiveAnswerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerActiveAnswerData_descriptor_;
  metadata.reflection = PlayerActiveAnswerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBActiveInfo::kPlayerActiveAnswerInfoFieldNumber;
const int CharacterDBActiveInfo::kPlayerActiveDailyAnswerInfoFieldNumber;
#endif  // !_MSC_VER

CharacterDBActiveInfo::CharacterDBActiveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBActiveInfo::InitAsDefaultInstance() {
  playeractiveanswerinfo_ = const_cast< ::proto_ff::PlayerActiveAnswerData*>(&::proto_ff::PlayerActiveAnswerData::default_instance());
  playeractivedailyanswerinfo_ = const_cast< ::proto_ff::PlayerActiveAnswerData*>(&::proto_ff::PlayerActiveAnswerData::default_instance());
}

CharacterDBActiveInfo::CharacterDBActiveInfo(const CharacterDBActiveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBActiveInfo::SharedCtor() {
  _cached_size_ = 0;
  playeractiveanswerinfo_ = NULL;
  playeractivedailyanswerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBActiveInfo::~CharacterDBActiveInfo() {
  SharedDtor();
}

void CharacterDBActiveInfo::SharedDtor() {
  if (this != default_instance_) {
    delete playeractiveanswerinfo_;
    delete playeractivedailyanswerinfo_;
  }
}

void CharacterDBActiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBActiveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBActiveInfo_descriptor_;
}

const CharacterDBActiveInfo& CharacterDBActiveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBActiveInfo* CharacterDBActiveInfo::default_instance_ = NULL;

CharacterDBActiveInfo* CharacterDBActiveInfo::New() const {
  return new CharacterDBActiveInfo;
}

void CharacterDBActiveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playeractiveanswerinfo()) {
      if (playeractiveanswerinfo_ != NULL) playeractiveanswerinfo_->::proto_ff::PlayerActiveAnswerData::Clear();
    }
    if (has_playeractivedailyanswerinfo()) {
      if (playeractivedailyanswerinfo_ != NULL) playeractivedailyanswerinfo_->::proto_ff::PlayerActiveAnswerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBActiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.PlayerActiveAnswerData playerActiveAnswerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeractiveanswerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerActiveDailyAnswerInfo;
        break;
      }

      // optional .proto_ff.PlayerActiveAnswerData playerActiveDailyAnswerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerActiveDailyAnswerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeractivedailyanswerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBActiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.PlayerActiveAnswerData playerActiveAnswerInfo = 1;
  if (has_playeractiveanswerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playeractiveanswerinfo(), output);
  }

  // optional .proto_ff.PlayerActiveAnswerData playerActiveDailyAnswerInfo = 2;
  if (has_playeractivedailyanswerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playeractivedailyanswerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBActiveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.PlayerActiveAnswerData playerActiveAnswerInfo = 1;
  if (has_playeractiveanswerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playeractiveanswerinfo(), target);
  }

  // optional .proto_ff.PlayerActiveAnswerData playerActiveDailyAnswerInfo = 2;
  if (has_playeractivedailyanswerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playeractivedailyanswerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBActiveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.PlayerActiveAnswerData playerActiveAnswerInfo = 1;
    if (has_playeractiveanswerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playeractiveanswerinfo());
    }

    // optional .proto_ff.PlayerActiveAnswerData playerActiveDailyAnswerInfo = 2;
    if (has_playeractivedailyanswerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playeractivedailyanswerinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBActiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBActiveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBActiveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBActiveInfo::MergeFrom(const CharacterDBActiveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playeractiveanswerinfo()) {
      mutable_playeractiveanswerinfo()->::proto_ff::PlayerActiveAnswerData::MergeFrom(from.playeractiveanswerinfo());
    }
    if (from.has_playeractivedailyanswerinfo()) {
      mutable_playeractivedailyanswerinfo()->::proto_ff::PlayerActiveAnswerData::MergeFrom(from.playeractivedailyanswerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBActiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBActiveInfo::CopyFrom(const CharacterDBActiveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBActiveInfo::IsInitialized() const {

  return true;
}

void CharacterDBActiveInfo::Swap(CharacterDBActiveInfo* other) {
  if (other != this) {
    std::swap(playeractiveanswerinfo_, other->playeractiveanswerinfo_);
    std::swap(playeractivedailyanswerinfo_, other->playeractivedailyanswerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBActiveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBActiveInfo_descriptor_;
  metadata.reflection = CharacterDBActiveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayCountDBProto::kChargeIdFieldNumber;
const int PayCountDBProto::kCountFieldNumber;
#endif  // !_MSC_VER

PayCountDBProto::PayCountDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayCountDBProto::InitAsDefaultInstance() {
}

PayCountDBProto::PayCountDBProto(const PayCountDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayCountDBProto::SharedCtor() {
  _cached_size_ = 0;
  charge_id_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayCountDBProto::~PayCountDBProto() {
  SharedDtor();
}

void PayCountDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PayCountDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayCountDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayCountDBProto_descriptor_;
}

const PayCountDBProto& PayCountDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

PayCountDBProto* PayCountDBProto::default_instance_ = NULL;

PayCountDBProto* PayCountDBProto::New() const {
  return new PayCountDBProto;
}

void PayCountDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charge_id_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayCountDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charge_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charge_id_)));
          set_has_charge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayCountDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charge_id = 1;
  if (has_charge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charge_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayCountDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charge_id = 1;
  if (has_charge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charge_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayCountDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charge_id = 1;
    if (has_charge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charge_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayCountDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayCountDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayCountDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayCountDBProto::MergeFrom(const PayCountDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charge_id()) {
      set_charge_id(from.charge_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayCountDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayCountDBProto::CopyFrom(const PayCountDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayCountDBProto::IsInitialized() const {

  return true;
}

void PayCountDBProto::Swap(PayCountDBProto* other) {
  if (other != this) {
    std::swap(charge_id_, other->charge_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayCountDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayCountDBProto_descriptor_;
  metadata.reflection = PayCountDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineRetDBProto::kDiamondFieldNumber;
const int OfflineRetDBProto::kTimeFieldNumber;
const int OfflineRetDBProto::kFreshtimeFieldNumber;
#endif  // !_MSC_VER

OfflineRetDBProto::OfflineRetDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineRetDBProto::InitAsDefaultInstance() {
}

OfflineRetDBProto::OfflineRetDBProto(const OfflineRetDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineRetDBProto::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  freshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineRetDBProto::~OfflineRetDBProto() {
  SharedDtor();
}

void OfflineRetDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineRetDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineRetDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineRetDBProto_descriptor_;
}

const OfflineRetDBProto& OfflineRetDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OfflineRetDBProto* OfflineRetDBProto::default_instance_ = NULL;

OfflineRetDBProto* OfflineRetDBProto::New() const {
  return new OfflineRetDBProto;
}

void OfflineRetDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diamond_ = GOOGLE_LONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    freshtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineRetDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 diamond = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freshtime;
        break;
      }

      // optional uint64 freshtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freshtime_)));
          set_has_freshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineRetDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->diamond(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint64 freshtime = 3;
  if (has_freshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->freshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineRetDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->diamond(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint64 freshtime = 3;
  if (has_freshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->freshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineRetDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 freshtime = 3;
    if (has_freshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freshtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineRetDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineRetDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineRetDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineRetDBProto::MergeFrom(const OfflineRetDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_freshtime()) {
      set_freshtime(from.freshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineRetDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineRetDBProto::CopyFrom(const OfflineRetDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineRetDBProto::IsInitialized() const {

  return true;
}

void OfflineRetDBProto::Swap(OfflineRetDBProto* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(time_, other->time_);
    std::swap(freshtime_, other->freshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineRetDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineRetDBProto_descriptor_;
  metadata.reflection = OfflineRetDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterPayData::kRmbFieldNumber;
const int CharacterPayData::kMaxPayIdFieldNumber;
const int CharacterPayData::kPayedProductsFieldNumber;
const int CharacterPayData::kTodayRmbFieldNumber;
const int CharacterPayData::kLastTimeFieldNumber;
const int CharacterPayData::kPayCountFieldNumber;
const int CharacterPayData::kPayCountTimeFieldNumber;
const int CharacterPayData::kDiamondFieldNumber;
const int CharacterPayData::kRealRmbFieldNumber;
const int CharacterPayData::kFreshtimeFieldNumber;
const int CharacterPayData::kOpenwindowFieldNumber;
const int CharacterPayData::kOfflineRetFieldNumber;
#endif  // !_MSC_VER

CharacterPayData::CharacterPayData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterPayData::InitAsDefaultInstance() {
  offline_ret_ = const_cast< ::proto_ff::OfflineRetDBProto*>(&::proto_ff::OfflineRetDBProto::default_instance());
}

CharacterPayData::CharacterPayData(const CharacterPayData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterPayData::SharedCtor() {
  _cached_size_ = 0;
  rmb_ = 0u;
  maxpayid_ = 0u;
  today_rmb_ = 0u;
  last_time_ = GOOGLE_ULONGLONG(0);
  pay_count_time_ = GOOGLE_ULONGLONG(0);
  diamond_ = GOOGLE_LONGLONG(0);
  real_rmb_ = GOOGLE_ULONGLONG(0);
  freshtime_ = GOOGLE_LONGLONG(0);
  openwindow_ = 0;
  offline_ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterPayData::~CharacterPayData() {
  SharedDtor();
}

void CharacterPayData::SharedDtor() {
  if (this != default_instance_) {
    delete offline_ret_;
  }
}

void CharacterPayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterPayData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterPayData_descriptor_;
}

const CharacterPayData& CharacterPayData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterPayData* CharacterPayData::default_instance_ = NULL;

CharacterPayData* CharacterPayData::New() const {
  return new CharacterPayData;
}

void CharacterPayData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rmb_ = 0u;
    maxpayid_ = 0u;
    today_rmb_ = 0u;
    last_time_ = GOOGLE_ULONGLONG(0);
    pay_count_time_ = GOOGLE_ULONGLONG(0);
    diamond_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    real_rmb_ = GOOGLE_ULONGLONG(0);
    freshtime_ = GOOGLE_LONGLONG(0);
    openwindow_ = 0;
    if (has_offline_ret()) {
      if (offline_ret_ != NULL) offline_ret_->::proto_ff::OfflineRetDBProto::Clear();
    }
  }
  payedproducts_.Clear();
  pay_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterPayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rmb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxPayId;
        break;
      }

      // optional uint32 maxPayId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPayId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpayid_)));
          set_has_maxpayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payedProducts;
        break;
      }

      // repeated string payedProducts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payedProducts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_payedproducts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payedproducts(this->payedproducts_size() - 1).data(),
            this->payedproducts(this->payedproducts_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payedProducts;
        if (input->ExpectTag(32)) goto parse_today_rmb;
        break;
      }

      // optional uint32 today_rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_rmb_)));
          set_has_today_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pay_count;
        break;
      }

      // repeated .proto_ff.PayCountDBProto pay_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pay_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pay_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pay_count;
        if (input->ExpectTag(56)) goto parse_pay_count_time;
        break;
      }

      // optional uint64 pay_count_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_count_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pay_count_time_)));
          set_has_pay_count_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_real_rmb;
        break;
      }

      // optional uint64 real_rmb = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &real_rmb_)));
          set_has_real_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_freshtime;
        break;
      }

      // optional int64 freshtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freshtime_)));
          set_has_freshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_openwindow;
        break;
      }

      // optional int32 openwindow = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openwindow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openwindow_)));
          set_has_openwindow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_offline_ret;
        break;
      }

      // optional .proto_ff.OfflineRetDBProto offline_ret = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offline_ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offline_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterPayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rmb = 1;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rmb(), output);
  }

  // optional uint32 maxPayId = 2;
  if (has_maxpayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxpayid(), output);
  }

  // repeated string payedProducts = 3;
  for (int i = 0; i < this->payedproducts_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->payedproducts(i).data(), this->payedproducts(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->payedproducts(i), output);
  }

  // optional uint32 today_rmb = 4;
  if (has_today_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_rmb(), output);
  }

  // optional uint64 last_time = 5;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_time(), output);
  }

  // repeated .proto_ff.PayCountDBProto pay_count = 6;
  for (int i = 0; i < this->pay_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pay_count(i), output);
  }

  // optional uint64 pay_count_time = 7;
  if (has_pay_count_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pay_count_time(), output);
  }

  // optional int64 diamond = 8;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->diamond(), output);
  }

  // optional uint64 real_rmb = 9;
  if (has_real_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->real_rmb(), output);
  }

  // optional int64 freshtime = 10;
  if (has_freshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->freshtime(), output);
  }

  // optional int32 openwindow = 11;
  if (has_openwindow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->openwindow(), output);
  }

  // optional .proto_ff.OfflineRetDBProto offline_ret = 12;
  if (has_offline_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->offline_ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterPayData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rmb = 1;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rmb(), target);
  }

  // optional uint32 maxPayId = 2;
  if (has_maxpayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxpayid(), target);
  }

  // repeated string payedProducts = 3;
  for (int i = 0; i < this->payedproducts_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payedproducts(i).data(), this->payedproducts(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->payedproducts(i), target);
  }

  // optional uint32 today_rmb = 4;
  if (has_today_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_rmb(), target);
  }

  // optional uint64 last_time = 5;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_time(), target);
  }

  // repeated .proto_ff.PayCountDBProto pay_count = 6;
  for (int i = 0; i < this->pay_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pay_count(i), target);
  }

  // optional uint64 pay_count_time = 7;
  if (has_pay_count_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pay_count_time(), target);
  }

  // optional int64 diamond = 8;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->diamond(), target);
  }

  // optional uint64 real_rmb = 9;
  if (has_real_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->real_rmb(), target);
  }

  // optional int64 freshtime = 10;
  if (has_freshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->freshtime(), target);
  }

  // optional int32 openwindow = 11;
  if (has_openwindow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->openwindow(), target);
  }

  // optional .proto_ff.OfflineRetDBProto offline_ret = 12;
  if (has_offline_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->offline_ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterPayData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rmb = 1;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rmb());
    }

    // optional uint32 maxPayId = 2;
    if (has_maxpayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpayid());
    }

    // optional uint32 today_rmb = 4;
    if (has_today_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_rmb());
    }

    // optional uint64 last_time = 5;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional uint64 pay_count_time = 7;
    if (has_pay_count_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pay_count_time());
    }

    // optional int64 diamond = 8;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 real_rmb = 9;
    if (has_real_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->real_rmb());
    }

    // optional int64 freshtime = 10;
    if (has_freshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freshtime());
    }

    // optional int32 openwindow = 11;
    if (has_openwindow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openwindow());
    }

    // optional .proto_ff.OfflineRetDBProto offline_ret = 12;
    if (has_offline_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offline_ret());
    }

  }
  // repeated string payedProducts = 3;
  total_size += 1 * this->payedproducts_size();
  for (int i = 0; i < this->payedproducts_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->payedproducts(i));
  }

  // repeated .proto_ff.PayCountDBProto pay_count = 6;
  total_size += 1 * this->pay_count_size();
  for (int i = 0; i < this->pay_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pay_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterPayData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterPayData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterPayData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterPayData::MergeFrom(const CharacterPayData& from) {
  GOOGLE_CHECK_NE(&from, this);
  payedproducts_.MergeFrom(from.payedproducts_);
  pay_count_.MergeFrom(from.pay_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_maxpayid()) {
      set_maxpayid(from.maxpayid());
    }
    if (from.has_today_rmb()) {
      set_today_rmb(from.today_rmb());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_pay_count_time()) {
      set_pay_count_time(from.pay_count_time());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_real_rmb()) {
      set_real_rmb(from.real_rmb());
    }
    if (from.has_freshtime()) {
      set_freshtime(from.freshtime());
    }
    if (from.has_openwindow()) {
      set_openwindow(from.openwindow());
    }
    if (from.has_offline_ret()) {
      mutable_offline_ret()->::proto_ff::OfflineRetDBProto::MergeFrom(from.offline_ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterPayData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterPayData::CopyFrom(const CharacterPayData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterPayData::IsInitialized() const {

  return true;
}

void CharacterPayData::Swap(CharacterPayData* other) {
  if (other != this) {
    std::swap(rmb_, other->rmb_);
    std::swap(maxpayid_, other->maxpayid_);
    payedproducts_.Swap(&other->payedproducts_);
    std::swap(today_rmb_, other->today_rmb_);
    std::swap(last_time_, other->last_time_);
    pay_count_.Swap(&other->pay_count_);
    std::swap(pay_count_time_, other->pay_count_time_);
    std::swap(diamond_, other->diamond_);
    std::swap(real_rmb_, other->real_rmb_);
    std::swap(freshtime_, other->freshtime_);
    std::swap(openwindow_, other->openwindow_);
    std::swap(offline_ret_, other->offline_ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterPayData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterPayData_descriptor_;
  metadata.reflection = CharacterPayData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockInfo::kUnlockIdsFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockInfo::FunctionUnlockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockInfo::InitAsDefaultInstance() {
}

FunctionUnlockInfo::FunctionUnlockInfo(const FunctionUnlockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockInfo::~FunctionUnlockInfo() {
  SharedDtor();
}

void FunctionUnlockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockInfo_descriptor_;
}

const FunctionUnlockInfo& FunctionUnlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FunctionUnlockInfo* FunctionUnlockInfo::default_instance_ = NULL;

FunctionUnlockInfo* FunctionUnlockInfo::New() const {
  return new FunctionUnlockInfo;
}

void FunctionUnlockInfo::Clear() {
  unlockids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 unlockIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_unlockids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unlockids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_unlockIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 unlockIds = 1;
  for (int i = 0; i < this->unlockids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->unlockids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 unlockIds = 1;
  for (int i = 0; i < this->unlockids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->unlockids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint64 unlockIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->unlockids(i));
    }
    total_size += 1 * this->unlockids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockInfo::MergeFrom(const FunctionUnlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlockids_.MergeFrom(from.unlockids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockInfo::CopyFrom(const FunctionUnlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockInfo::IsInitialized() const {

  return true;
}

void FunctionUnlockInfo::Swap(FunctionUnlockInfo* other) {
  if (other != this) {
    unlockids_.Swap(&other->unlockids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockInfo_descriptor_;
  metadata.reflection = FunctionUnlockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmblemSlot::kSlotIdFieldNumber;
const int EmblemSlot::kGroupIdFieldNumber;
const int EmblemSlot::kPosIdFieldNumber;
const int EmblemSlot::kAttrTypeFieldNumber;
const int EmblemSlot::kOpenFieldNumber;
const int EmblemSlot::kItemIdFieldNumber;
const int EmblemSlot::kBindFieldNumber;
#endif  // !_MSC_VER

EmblemSlot::EmblemSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmblemSlot::InitAsDefaultInstance() {
}

EmblemSlot::EmblemSlot(const EmblemSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmblemSlot::SharedCtor() {
  _cached_size_ = 0;
  slotid_ = 0u;
  groupid_ = 0u;
  posid_ = 0u;
  attrtype_ = 0u;
  open_ = false;
  itemid_ = GOOGLE_ULONGLONG(0);
  bind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmblemSlot::~EmblemSlot() {
  SharedDtor();
}

void EmblemSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmblemSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmblemSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmblemSlot_descriptor_;
}

const EmblemSlot& EmblemSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

EmblemSlot* EmblemSlot::default_instance_ = NULL;

EmblemSlot* EmblemSlot::New() const {
  return new EmblemSlot;
}

void EmblemSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slotid_ = 0u;
    groupid_ = 0u;
    posid_ = 0u;
    attrtype_ = 0u;
    open_ = false;
    itemid_ = GOOGLE_ULONGLONG(0);
    bind_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmblemSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slotId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupId;
        break;
      }

      // optional uint32 groupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posId;
        break;
      }

      // optional uint32 posId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attrType;
        break;
      }

      // optional uint32 attrType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrtype_)));
          set_has_attrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_open;
        break;
      }

      // optional bool open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bind;
        break;
      }

      // optional uint32 bind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmblemSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slotId = 1;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slotid(), output);
  }

  // optional uint32 groupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // optional uint32 posId = 3;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->posid(), output);
  }

  // optional uint32 attrType = 4;
  if (has_attrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attrtype(), output);
  }

  // optional bool open = 5;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->open(), output);
  }

  // optional uint64 itemId = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->itemid(), output);
  }

  // optional uint32 bind = 7;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmblemSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slotId = 1;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slotid(), target);
  }

  // optional uint32 groupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // optional uint32 posId = 3;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->posid(), target);
  }

  // optional uint32 attrType = 4;
  if (has_attrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attrtype(), target);
  }

  // optional bool open = 5;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->open(), target);
  }

  // optional uint64 itemId = 6;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->itemid(), target);
  }

  // optional uint32 bind = 7;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmblemSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slotId = 1;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotid());
    }

    // optional uint32 groupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 posId = 3;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

    // optional uint32 attrType = 4;
    if (has_attrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrtype());
    }

    // optional bool open = 5;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional uint64 itemId = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 bind = 7;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmblemSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmblemSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmblemSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmblemSlot::MergeFrom(const EmblemSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_attrtype()) {
      set_attrtype(from.attrtype());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmblemSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmblemSlot::CopyFrom(const EmblemSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmblemSlot::IsInitialized() const {

  return true;
}

void EmblemSlot::Swap(EmblemSlot* other) {
  if (other != this) {
    std::swap(slotid_, other->slotid_);
    std::swap(groupid_, other->groupid_);
    std::swap(posid_, other->posid_);
    std::swap(attrtype_, other->attrtype_);
    std::swap(open_, other->open_);
    std::swap(itemid_, other->itemid_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmblemSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmblemSlot_descriptor_;
  metadata.reflection = EmblemSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBEmblemData::kSlotsFieldNumber;
const int CharacterDBEmblemData::kGroupSuitIdsFieldNumber;
const int CharacterDBEmblemData::kSuitSkillIdFieldNumber;
#endif  // !_MSC_VER

CharacterDBEmblemData::CharacterDBEmblemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBEmblemData::InitAsDefaultInstance() {
}

CharacterDBEmblemData::CharacterDBEmblemData(const CharacterDBEmblemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBEmblemData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBEmblemData::~CharacterDBEmblemData() {
  SharedDtor();
}

void CharacterDBEmblemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBEmblemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBEmblemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBEmblemData_descriptor_;
}

const CharacterDBEmblemData& CharacterDBEmblemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBEmblemData* CharacterDBEmblemData::default_instance_ = NULL;

CharacterDBEmblemData* CharacterDBEmblemData::New() const {
  return new CharacterDBEmblemData;
}

void CharacterDBEmblemData::Clear() {
  slots_.Clear();
  groupsuitids_.Clear();
  suitskillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBEmblemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.EmblemSlot slots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slots;
        if (input->ExpectTag(18)) goto parse_groupSuitIds;
        break;
      }

      // repeated .proto_ff.ComPair groupSuitIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupSuitIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupsuitids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupSuitIds;
        if (input->ExpectTag(26)) goto parse_suitSkillId;
        break;
      }

      // repeated .proto_ff.ComPair suitSkillId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suitSkillId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suitskillid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suitSkillId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBEmblemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.EmblemSlot slots = 1;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slots(i), output);
  }

  // repeated .proto_ff.ComPair groupSuitIds = 2;
  for (int i = 0; i < this->groupsuitids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupsuitids(i), output);
  }

  // repeated .proto_ff.ComPair suitSkillId = 3;
  for (int i = 0; i < this->suitskillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suitskillid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBEmblemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.EmblemSlot slots = 1;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slots(i), target);
  }

  // repeated .proto_ff.ComPair groupSuitIds = 2;
  for (int i = 0; i < this->groupsuitids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupsuitids(i), target);
  }

  // repeated .proto_ff.ComPair suitSkillId = 3;
  for (int i = 0; i < this->suitskillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suitskillid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBEmblemData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.EmblemSlot slots = 1;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  // repeated .proto_ff.ComPair groupSuitIds = 2;
  total_size += 1 * this->groupsuitids_size();
  for (int i = 0; i < this->groupsuitids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupsuitids(i));
  }

  // repeated .proto_ff.ComPair suitSkillId = 3;
  total_size += 1 * this->suitskillid_size();
  for (int i = 0; i < this->suitskillid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suitskillid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBEmblemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBEmblemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBEmblemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBEmblemData::MergeFrom(const CharacterDBEmblemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  groupsuitids_.MergeFrom(from.groupsuitids_);
  suitskillid_.MergeFrom(from.suitskillid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBEmblemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBEmblemData::CopyFrom(const CharacterDBEmblemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBEmblemData::IsInitialized() const {

  return true;
}

void CharacterDBEmblemData::Swap(CharacterDBEmblemData* other) {
  if (other != this) {
    slots_.Swap(&other->slots_);
    groupsuitids_.Swap(&other->groupsuitids_);
    suitskillid_.Swap(&other->suitskillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBEmblemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBEmblemData_descriptor_;
  metadata.reflection = CharacterDBEmblemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBIdentifyData::kIdentifysFieldNumber;
const int CharacterDBIdentifyData::kIdentifyfatesFieldNumber;
#endif  // !_MSC_VER

CharacterDBIdentifyData::CharacterDBIdentifyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBIdentifyData::InitAsDefaultInstance() {
}

CharacterDBIdentifyData::CharacterDBIdentifyData(const CharacterDBIdentifyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBIdentifyData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBIdentifyData::~CharacterDBIdentifyData() {
  SharedDtor();
}

void CharacterDBIdentifyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBIdentifyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBIdentifyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBIdentifyData_descriptor_;
}

const CharacterDBIdentifyData& CharacterDBIdentifyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBIdentifyData* CharacterDBIdentifyData::default_instance_ = NULL;

CharacterDBIdentifyData* CharacterDBIdentifyData::New() const {
  return new CharacterDBIdentifyData;
}

void CharacterDBIdentifyData::Clear() {
  identifys_.Clear();
  identifyfates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBIdentifyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair64 identifys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_identifys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_identifys;
        if (input->ExpectTag(18)) goto parse_identifyfates;
        break;
      }

      // repeated .proto_ff.ComPair64 identifyfates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifyfates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_identifyfates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifyfates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBIdentifyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair64 identifys = 1;
  for (int i = 0; i < this->identifys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->identifys(i), output);
  }

  // repeated .proto_ff.ComPair64 identifyfates = 2;
  for (int i = 0; i < this->identifyfates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->identifyfates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBIdentifyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair64 identifys = 1;
  for (int i = 0; i < this->identifys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->identifys(i), target);
  }

  // repeated .proto_ff.ComPair64 identifyfates = 2;
  for (int i = 0; i < this->identifyfates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->identifyfates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBIdentifyData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair64 identifys = 1;
  total_size += 1 * this->identifys_size();
  for (int i = 0; i < this->identifys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->identifys(i));
  }

  // repeated .proto_ff.ComPair64 identifyfates = 2;
  total_size += 1 * this->identifyfates_size();
  for (int i = 0; i < this->identifyfates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->identifyfates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBIdentifyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBIdentifyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBIdentifyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBIdentifyData::MergeFrom(const CharacterDBIdentifyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  identifys_.MergeFrom(from.identifys_);
  identifyfates_.MergeFrom(from.identifyfates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBIdentifyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBIdentifyData::CopyFrom(const CharacterDBIdentifyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBIdentifyData::IsInitialized() const {

  return true;
}

void CharacterDBIdentifyData::Swap(CharacterDBIdentifyData* other) {
  if (other != this) {
    identifys_.Swap(&other->identifys_);
    identifyfates_.Swap(&other->identifyfates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBIdentifyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBIdentifyData_descriptor_;
  metadata.reflection = CharacterDBIdentifyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElementInfoData::kTypeFieldNumber;
const int ElementInfoData::kLevelFieldNumber;
const int ElementInfoData::kExpFieldNumber;
#endif  // !_MSC_VER

ElementInfoData::ElementInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElementInfoData::InitAsDefaultInstance() {
}

ElementInfoData::ElementInfoData(const ElementInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElementInfoData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElementInfoData::~ElementInfoData() {
  SharedDtor();
}

void ElementInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ElementInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementInfoData_descriptor_;
}

const ElementInfoData& ElementInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ElementInfoData* ElementInfoData::default_instance_ = NULL;

ElementInfoData* ElementInfoData::New() const {
  return new ElementInfoData;
}

void ElementInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElementInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElementInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint64 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElementInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint64 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElementInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElementInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElementInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElementInfoData::MergeFrom(const ElementInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElementInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementInfoData::CopyFrom(const ElementInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementInfoData::IsInitialized() const {

  return true;
}

void ElementInfoData::Swap(ElementInfoData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElementInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElementInfoData_descriptor_;
  metadata.reflection = ElementInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBElementData::kElementsFieldNumber;
const int CharacterDBElementData::kFragmentsFieldNumber;
#endif  // !_MSC_VER

CharacterDBElementData::CharacterDBElementData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBElementData::InitAsDefaultInstance() {
}

CharacterDBElementData::CharacterDBElementData(const CharacterDBElementData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBElementData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBElementData::~CharacterDBElementData() {
  SharedDtor();
}

void CharacterDBElementData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBElementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBElementData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBElementData_descriptor_;
}

const CharacterDBElementData& CharacterDBElementData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBElementData* CharacterDBElementData::default_instance_ = NULL;

CharacterDBElementData* CharacterDBElementData::New() const {
  return new CharacterDBElementData;
}

void CharacterDBElementData::Clear() {
  elements_.Clear();
  fragments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBElementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ElementInfoData elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elements;
        if (input->ExpectTag(18)) goto parse_fragments;
        break;
      }

      // repeated .proto_ff.ComPair64 fragments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fragments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBElementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ElementInfoData elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  // repeated .proto_ff.ComPair64 fragments = 2;
  for (int i = 0; i < this->fragments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fragments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBElementData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ElementInfoData elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elements(i), target);
  }

  // repeated .proto_ff.ComPair64 fragments = 2;
  for (int i = 0; i < this->fragments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fragments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBElementData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ElementInfoData elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  // repeated .proto_ff.ComPair64 fragments = 2;
  total_size += 1 * this->fragments_size();
  for (int i = 0; i < this->fragments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBElementData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBElementData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBElementData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBElementData::MergeFrom(const CharacterDBElementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  fragments_.MergeFrom(from.fragments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBElementData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBElementData::CopyFrom(const CharacterDBElementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBElementData::IsInitialized() const {

  return true;
}

void CharacterDBElementData::Swap(CharacterDBElementData* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    fragments_.Swap(&other->fragments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBElementData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBElementData_descriptor_;
  metadata.reflection = CharacterDBElementData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBFashionData::kFashionsFieldNumber;
const int CharacterDBFashionData::kDressClothesFashionIDFieldNumber;
const int CharacterDBFashionData::kDressWeaponFashionIDFieldNumber;
#endif  // !_MSC_VER

CharacterDBFashionData::CharacterDBFashionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBFashionData::InitAsDefaultInstance() {
}

CharacterDBFashionData::CharacterDBFashionData(const CharacterDBFashionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBFashionData::SharedCtor() {
  _cached_size_ = 0;
  dressclothesfashionid_ = GOOGLE_ULONGLONG(0);
  dressweaponfashionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBFashionData::~CharacterDBFashionData() {
  SharedDtor();
}

void CharacterDBFashionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBFashionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBFashionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBFashionData_descriptor_;
}

const CharacterDBFashionData& CharacterDBFashionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBFashionData* CharacterDBFashionData::default_instance_ = NULL;

CharacterDBFashionData* CharacterDBFashionData::New() const {
  return new CharacterDBFashionData;
}

void CharacterDBFashionData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dressclothesfashionid_ = GOOGLE_ULONGLONG(0);
    dressweaponfashionid_ = GOOGLE_ULONGLONG(0);
  }
  fashions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBFashionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair64 fashions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fashions;
        if (input->ExpectTag(16)) goto parse_dressClothesFashionID;
        break;
      }

      // optional uint64 dressClothesFashionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dressClothesFashionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dressclothesfashionid_)));
          set_has_dressclothesfashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dressWeaponFashionID;
        break;
      }

      // optional uint64 dressWeaponFashionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dressWeaponFashionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dressweaponfashionid_)));
          set_has_dressweaponfashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBFashionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair64 fashions = 1;
  for (int i = 0; i < this->fashions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fashions(i), output);
  }

  // optional uint64 dressClothesFashionID = 2;
  if (has_dressclothesfashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dressclothesfashionid(), output);
  }

  // optional uint64 dressWeaponFashionID = 3;
  if (has_dressweaponfashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dressweaponfashionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBFashionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair64 fashions = 1;
  for (int i = 0; i < this->fashions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fashions(i), target);
  }

  // optional uint64 dressClothesFashionID = 2;
  if (has_dressclothesfashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dressclothesfashionid(), target);
  }

  // optional uint64 dressWeaponFashionID = 3;
  if (has_dressweaponfashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dressweaponfashionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBFashionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 dressClothesFashionID = 2;
    if (has_dressclothesfashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dressclothesfashionid());
    }

    // optional uint64 dressWeaponFashionID = 3;
    if (has_dressweaponfashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dressweaponfashionid());
    }

  }
  // repeated .proto_ff.ComPair64 fashions = 1;
  total_size += 1 * this->fashions_size();
  for (int i = 0; i < this->fashions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBFashionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBFashionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBFashionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBFashionData::MergeFrom(const CharacterDBFashionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashions_.MergeFrom(from.fashions_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dressclothesfashionid()) {
      set_dressclothesfashionid(from.dressclothesfashionid());
    }
    if (from.has_dressweaponfashionid()) {
      set_dressweaponfashionid(from.dressweaponfashionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBFashionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBFashionData::CopyFrom(const CharacterDBFashionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBFashionData::IsInitialized() const {

  return true;
}

void CharacterDBFashionData::Swap(CharacterDBFashionData* other) {
  if (other != this) {
    fashions_.Swap(&other->fashions_);
    std::swap(dressclothesfashionid_, other->dressclothesfashionid_);
    std::swap(dressweaponfashionid_, other->dressweaponfashionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBFashionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBFashionData_descriptor_;
  metadata.reflection = CharacterDBFashionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBWingData::kAdvanceWingExpFieldNumber;
const int CharacterDBWingData::kAdvanceWingLevFieldNumber;
const int CharacterDBWingData::kEquipWingIDFieldNumber;
const int CharacterDBWingData::kFantasyWingsFieldNumber;
const int CharacterDBWingData::kFragmentsFieldNumber;
const int CharacterDBWingData::kIsbreakFieldNumber;
#endif  // !_MSC_VER

CharacterDBWingData::CharacterDBWingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBWingData::InitAsDefaultInstance() {
}

CharacterDBWingData::CharacterDBWingData(const CharacterDBWingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBWingData::SharedCtor() {
  _cached_size_ = 0;
  advancewingexp_ = GOOGLE_ULONGLONG(0);
  advancewinglev_ = 0u;
  equipwingid_ = GOOGLE_ULONGLONG(0);
  isbreak_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBWingData::~CharacterDBWingData() {
  SharedDtor();
}

void CharacterDBWingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBWingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBWingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBWingData_descriptor_;
}

const CharacterDBWingData& CharacterDBWingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBWingData* CharacterDBWingData::default_instance_ = NULL;

CharacterDBWingData* CharacterDBWingData::New() const {
  return new CharacterDBWingData;
}

void CharacterDBWingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    advancewingexp_ = GOOGLE_ULONGLONG(0);
    advancewinglev_ = 0u;
    equipwingid_ = GOOGLE_ULONGLONG(0);
    isbreak_ = 0;
  }
  fantasywings_.Clear();
  fragments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBWingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 advanceWingExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &advancewingexp_)));
          set_has_advancewingexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advanceWingLev;
        break;
      }

      // optional uint32 advanceWingLev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanceWingLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancewinglev_)));
          set_has_advancewinglev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipWingID;
        break;
      }

      // optional uint64 equipWingID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipWingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipwingid_)));
          set_has_equipwingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasyWings;
        break;
      }

      // repeated .proto_ff.ComPair64 fantasyWings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasyWings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasywings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasyWings;
        if (input->ExpectTag(42)) goto parse_fragments;
        break;
      }

      // repeated .proto_ff.ComPair64 fragments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fragments;
        if (input->ExpectTag(48)) goto parse_isbreak;
        break;
      }

      // optional int32 isbreak = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbreak_)));
          set_has_isbreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBWingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 advanceWingExp = 1;
  if (has_advancewingexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->advancewingexp(), output);
  }

  // optional uint32 advanceWingLev = 2;
  if (has_advancewinglev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->advancewinglev(), output);
  }

  // optional uint64 equipWingID = 3;
  if (has_equipwingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->equipwingid(), output);
  }

  // repeated .proto_ff.ComPair64 fantasyWings = 4;
  for (int i = 0; i < this->fantasywings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fantasywings(i), output);
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  for (int i = 0; i < this->fragments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fragments(i), output);
  }

  // optional int32 isbreak = 6;
  if (has_isbreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isbreak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBWingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 advanceWingExp = 1;
  if (has_advancewingexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->advancewingexp(), target);
  }

  // optional uint32 advanceWingLev = 2;
  if (has_advancewinglev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->advancewinglev(), target);
  }

  // optional uint64 equipWingID = 3;
  if (has_equipwingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->equipwingid(), target);
  }

  // repeated .proto_ff.ComPair64 fantasyWings = 4;
  for (int i = 0; i < this->fantasywings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fantasywings(i), target);
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  for (int i = 0; i < this->fragments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fragments(i), target);
  }

  // optional int32 isbreak = 6;
  if (has_isbreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->isbreak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBWingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 advanceWingExp = 1;
    if (has_advancewingexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->advancewingexp());
    }

    // optional uint32 advanceWingLev = 2;
    if (has_advancewinglev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancewinglev());
    }

    // optional uint64 equipWingID = 3;
    if (has_equipwingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipwingid());
    }

    // optional int32 isbreak = 6;
    if (has_isbreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbreak());
    }

  }
  // repeated .proto_ff.ComPair64 fantasyWings = 4;
  total_size += 1 * this->fantasywings_size();
  for (int i = 0; i < this->fantasywings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasywings(i));
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  total_size += 1 * this->fragments_size();
  for (int i = 0; i < this->fragments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBWingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBWingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBWingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBWingData::MergeFrom(const CharacterDBWingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasywings_.MergeFrom(from.fantasywings_);
  fragments_.MergeFrom(from.fragments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advancewingexp()) {
      set_advancewingexp(from.advancewingexp());
    }
    if (from.has_advancewinglev()) {
      set_advancewinglev(from.advancewinglev());
    }
    if (from.has_equipwingid()) {
      set_equipwingid(from.equipwingid());
    }
    if (from.has_isbreak()) {
      set_isbreak(from.isbreak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBWingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBWingData::CopyFrom(const CharacterDBWingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBWingData::IsInitialized() const {

  return true;
}

void CharacterDBWingData::Swap(CharacterDBWingData* other) {
  if (other != this) {
    std::swap(advancewingexp_, other->advancewingexp_);
    std::swap(advancewinglev_, other->advancewinglev_);
    std::swap(equipwingid_, other->equipwingid_);
    fantasywings_.Swap(&other->fantasywings_);
    fragments_.Swap(&other->fragments_);
    std::swap(isbreak_, other->isbreak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBWingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBWingData_descriptor_;
  metadata.reflection = CharacterDBWingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBPartnerData::kAdvancePartnerExpFieldNumber;
const int CharacterDBPartnerData::kAdvancePartnerLevFieldNumber;
const int CharacterDBPartnerData::kEquipPartnerIDFieldNumber;
const int CharacterDBPartnerData::kFantasyPartnersFieldNumber;
const int CharacterDBPartnerData::kFragmentsFieldNumber;
const int CharacterDBPartnerData::kCommonPartnerExpFieldNumber;
const int CharacterDBPartnerData::kAutoSwallowFlagFieldNumber;
const int CharacterDBPartnerData::kAutoSwallowClassFieldNumber;
const int CharacterDBPartnerData::kIsbreakFieldNumber;
#endif  // !_MSC_VER

CharacterDBPartnerData::CharacterDBPartnerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBPartnerData::InitAsDefaultInstance() {
}

CharacterDBPartnerData::CharacterDBPartnerData(const CharacterDBPartnerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBPartnerData::SharedCtor() {
  _cached_size_ = 0;
  advancepartnerexp_ = GOOGLE_ULONGLONG(0);
  advancepartnerlev_ = 0u;
  equippartnerid_ = GOOGLE_ULONGLONG(0);
  commonpartnerexp_ = GOOGLE_ULONGLONG(0);
  autoswallowflag_ = 0u;
  autoswallowclass_ = GOOGLE_ULONGLONG(0);
  isbreak_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBPartnerData::~CharacterDBPartnerData() {
  SharedDtor();
}

void CharacterDBPartnerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBPartnerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBPartnerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBPartnerData_descriptor_;
}

const CharacterDBPartnerData& CharacterDBPartnerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBPartnerData* CharacterDBPartnerData::default_instance_ = NULL;

CharacterDBPartnerData* CharacterDBPartnerData::New() const {
  return new CharacterDBPartnerData;
}

void CharacterDBPartnerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    advancepartnerexp_ = GOOGLE_ULONGLONG(0);
    advancepartnerlev_ = 0u;
    equippartnerid_ = GOOGLE_ULONGLONG(0);
    commonpartnerexp_ = GOOGLE_ULONGLONG(0);
    autoswallowflag_ = 0u;
    autoswallowclass_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isbreak_ = 0;
  }
  fantasypartners_.Clear();
  fragments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBPartnerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 advancePartnerExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &advancepartnerexp_)));
          set_has_advancepartnerexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advancePartnerLev;
        break;
      }

      // optional uint32 advancePartnerLev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advancePartnerLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancepartnerlev_)));
          set_has_advancepartnerlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipPartnerID;
        break;
      }

      // optional uint64 equipPartnerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipPartnerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equippartnerid_)));
          set_has_equippartnerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasyPartners;
        break;
      }

      // repeated .proto_ff.ComPair64 fantasyPartners = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasyPartners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasypartners()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasyPartners;
        if (input->ExpectTag(42)) goto parse_fragments;
        break;
      }

      // repeated .proto_ff.ComPair64 fragments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fragments;
        if (input->ExpectTag(48)) goto parse_commonPartnerExp;
        break;
      }

      // optional uint64 commonPartnerExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonPartnerExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commonpartnerexp_)));
          set_has_commonpartnerexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_autoSwallowFlag;
        break;
      }

      // optional uint32 autoSwallowFlag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoSwallowFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autoswallowflag_)));
          set_has_autoswallowflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_autoSwallowClass;
        break;
      }

      // optional uint64 autoSwallowClass = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoSwallowClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &autoswallowclass_)));
          set_has_autoswallowclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isbreak;
        break;
      }

      // optional int32 isbreak = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbreak_)));
          set_has_isbreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBPartnerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 advancePartnerExp = 1;
  if (has_advancepartnerexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->advancepartnerexp(), output);
  }

  // optional uint32 advancePartnerLev = 2;
  if (has_advancepartnerlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->advancepartnerlev(), output);
  }

  // optional uint64 equipPartnerID = 3;
  if (has_equippartnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->equippartnerid(), output);
  }

  // repeated .proto_ff.ComPair64 fantasyPartners = 4;
  for (int i = 0; i < this->fantasypartners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fantasypartners(i), output);
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  for (int i = 0; i < this->fragments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fragments(i), output);
  }

  // optional uint64 commonPartnerExp = 6;
  if (has_commonpartnerexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->commonpartnerexp(), output);
  }

  // optional uint32 autoSwallowFlag = 7;
  if (has_autoswallowflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->autoswallowflag(), output);
  }

  // optional uint64 autoSwallowClass = 8;
  if (has_autoswallowclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->autoswallowclass(), output);
  }

  // optional int32 isbreak = 9;
  if (has_isbreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isbreak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBPartnerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 advancePartnerExp = 1;
  if (has_advancepartnerexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->advancepartnerexp(), target);
  }

  // optional uint32 advancePartnerLev = 2;
  if (has_advancepartnerlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->advancepartnerlev(), target);
  }

  // optional uint64 equipPartnerID = 3;
  if (has_equippartnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->equippartnerid(), target);
  }

  // repeated .proto_ff.ComPair64 fantasyPartners = 4;
  for (int i = 0; i < this->fantasypartners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fantasypartners(i), target);
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  for (int i = 0; i < this->fragments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fragments(i), target);
  }

  // optional uint64 commonPartnerExp = 6;
  if (has_commonpartnerexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->commonpartnerexp(), target);
  }

  // optional uint32 autoSwallowFlag = 7;
  if (has_autoswallowflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->autoswallowflag(), target);
  }

  // optional uint64 autoSwallowClass = 8;
  if (has_autoswallowclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->autoswallowclass(), target);
  }

  // optional int32 isbreak = 9;
  if (has_isbreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->isbreak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBPartnerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 advancePartnerExp = 1;
    if (has_advancepartnerexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->advancepartnerexp());
    }

    // optional uint32 advancePartnerLev = 2;
    if (has_advancepartnerlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancepartnerlev());
    }

    // optional uint64 equipPartnerID = 3;
    if (has_equippartnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equippartnerid());
    }

    // optional uint64 commonPartnerExp = 6;
    if (has_commonpartnerexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commonpartnerexp());
    }

    // optional uint32 autoSwallowFlag = 7;
    if (has_autoswallowflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autoswallowflag());
    }

    // optional uint64 autoSwallowClass = 8;
    if (has_autoswallowclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->autoswallowclass());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isbreak = 9;
    if (has_isbreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbreak());
    }

  }
  // repeated .proto_ff.ComPair64 fantasyPartners = 4;
  total_size += 1 * this->fantasypartners_size();
  for (int i = 0; i < this->fantasypartners_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasypartners(i));
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  total_size += 1 * this->fragments_size();
  for (int i = 0; i < this->fragments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBPartnerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBPartnerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBPartnerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBPartnerData::MergeFrom(const CharacterDBPartnerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasypartners_.MergeFrom(from.fantasypartners_);
  fragments_.MergeFrom(from.fragments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advancepartnerexp()) {
      set_advancepartnerexp(from.advancepartnerexp());
    }
    if (from.has_advancepartnerlev()) {
      set_advancepartnerlev(from.advancepartnerlev());
    }
    if (from.has_equippartnerid()) {
      set_equippartnerid(from.equippartnerid());
    }
    if (from.has_commonpartnerexp()) {
      set_commonpartnerexp(from.commonpartnerexp());
    }
    if (from.has_autoswallowflag()) {
      set_autoswallowflag(from.autoswallowflag());
    }
    if (from.has_autoswallowclass()) {
      set_autoswallowclass(from.autoswallowclass());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isbreak()) {
      set_isbreak(from.isbreak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBPartnerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBPartnerData::CopyFrom(const CharacterDBPartnerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBPartnerData::IsInitialized() const {

  return true;
}

void CharacterDBPartnerData::Swap(CharacterDBPartnerData* other) {
  if (other != this) {
    std::swap(advancepartnerexp_, other->advancepartnerexp_);
    std::swap(advancepartnerlev_, other->advancepartnerlev_);
    std::swap(equippartnerid_, other->equippartnerid_);
    fantasypartners_.Swap(&other->fantasypartners_);
    fragments_.Swap(&other->fragments_);
    std::swap(commonpartnerexp_, other->commonpartnerexp_);
    std::swap(autoswallowflag_, other->autoswallowflag_);
    std::swap(autoswallowclass_, other->autoswallowclass_);
    std::swap(isbreak_, other->isbreak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBPartnerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBPartnerData_descriptor_;
  metadata.reflection = CharacterDBPartnerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMountData::kMountsFieldNumber;
const int CharacterDBMountData::kMountIDFieldNumber;
const int CharacterDBMountData::kRideStateFieldNumber;
#endif  // !_MSC_VER

CharacterDBMountData::CharacterDBMountData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMountData::InitAsDefaultInstance() {
}

CharacterDBMountData::CharacterDBMountData(const CharacterDBMountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMountData::SharedCtor() {
  _cached_size_ = 0;
  mountid_ = GOOGLE_ULONGLONG(0);
  ridestate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMountData::~CharacterDBMountData() {
  SharedDtor();
}

void CharacterDBMountData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMountData_descriptor_;
}

const CharacterDBMountData& CharacterDBMountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBMountData* CharacterDBMountData::default_instance_ = NULL;

CharacterDBMountData* CharacterDBMountData::New() const {
  return new CharacterDBMountData;
}

void CharacterDBMountData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mountid_ = GOOGLE_ULONGLONG(0);
    ridestate_ = 0u;
  }
  mounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair64 mounts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mounts;
        if (input->ExpectTag(16)) goto parse_mountID;
        break;
      }

      // optional uint64 mountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rideState;
        break;
      }

      // optional uint32 rideState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rideState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ridestate_)));
          set_has_ridestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair64 mounts = 1;
  for (int i = 0; i < this->mounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mounts(i), output);
  }

  // optional uint64 mountID = 2;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mountid(), output);
  }

  // optional uint32 rideState = 3;
  if (has_ridestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ridestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair64 mounts = 1;
  for (int i = 0; i < this->mounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mounts(i), target);
  }

  // optional uint64 mountID = 2;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mountid(), target);
  }

  // optional uint32 rideState = 3;
  if (has_ridestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ridestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 mountID = 2;
    if (has_mountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mountid());
    }

    // optional uint32 rideState = 3;
    if (has_ridestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ridestate());
    }

  }
  // repeated .proto_ff.ComPair64 mounts = 1;
  total_size += 1 * this->mounts_size();
  for (int i = 0; i < this->mounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mounts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMountData::MergeFrom(const CharacterDBMountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mounts_.MergeFrom(from.mounts_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
    if (from.has_ridestate()) {
      set_ridestate(from.ridestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMountData::CopyFrom(const CharacterDBMountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMountData::IsInitialized() const {

  return true;
}

void CharacterDBMountData::Swap(CharacterDBMountData* other) {
  if (other != this) {
    mounts_.Swap(&other->mounts_);
    std::swap(mountid_, other->mountid_);
    std::swap(ridestate_, other->ridestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMountData_descriptor_;
  metadata.reflection = CharacterDBMountData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBossDataInfo::kGroupTypeFieldNumber;
const int PlayerBossDataInfo::kCurNumFieldNumber;
const int PlayerBossDataInfo::kMaxNumFieldNumber;
const int PlayerBossDataInfo::kVipBuyNumFieldNumber;
const int PlayerBossDataInfo::kBossTypeFieldNumber;
#endif  // !_MSC_VER

PlayerBossDataInfo::PlayerBossDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBossDataInfo::InitAsDefaultInstance() {
}

PlayerBossDataInfo::PlayerBossDataInfo(const PlayerBossDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBossDataInfo::SharedCtor() {
  _cached_size_ = 0;
  group_type_ = 0;
  cur_num_ = 0;
  max_num_ = 0;
  vip_buy_num_ = 0;
  boss_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBossDataInfo::~PlayerBossDataInfo() {
  SharedDtor();
}

void PlayerBossDataInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerBossDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBossDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBossDataInfo_descriptor_;
}

const PlayerBossDataInfo& PlayerBossDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

PlayerBossDataInfo* PlayerBossDataInfo::default_instance_ = NULL;

PlayerBossDataInfo* PlayerBossDataInfo::New() const {
  return new PlayerBossDataInfo;
}

void PlayerBossDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_type_ = 0;
    cur_num_ = 0;
    max_num_ = 0;
    vip_buy_num_ = 0;
    boss_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBossDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_num;
        break;
      }

      // optional int32 max_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_)));
          set_has_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_buy_num;
        break;
      }

      // optional int32 vip_buy_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_buy_num_)));
          set_has_vip_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boss_type;
        break;
      }

      // optional int32 boss_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_type_)));
          set_has_boss_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBossDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group_type = 1;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_type(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 max_num = 3;
  if (has_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_num(), output);
  }

  // optional int32 vip_buy_num = 4;
  if (has_vip_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_buy_num(), output);
  }

  // optional int32 boss_type = 5;
  if (has_boss_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->boss_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBossDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group_type = 1;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_type(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 max_num = 3;
  if (has_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_num(), target);
  }

  // optional int32 vip_buy_num = 4;
  if (has_vip_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_buy_num(), target);
  }

  // optional int32 boss_type = 5;
  if (has_boss_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->boss_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBossDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group_type = 1;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_type());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 max_num = 3;
    if (has_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num());
    }

    // optional int32 vip_buy_num = 4;
    if (has_vip_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_buy_num());
    }

    // optional int32 boss_type = 5;
    if (has_boss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBossDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBossDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBossDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBossDataInfo::MergeFrom(const PlayerBossDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_max_num()) {
      set_max_num(from.max_num());
    }
    if (from.has_vip_buy_num()) {
      set_vip_buy_num(from.vip_buy_num());
    }
    if (from.has_boss_type()) {
      set_boss_type(from.boss_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBossDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBossDataInfo::CopyFrom(const PlayerBossDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBossDataInfo::IsInitialized() const {

  return true;
}

void PlayerBossDataInfo::Swap(PlayerBossDataInfo* other) {
  if (other != this) {
    std::swap(group_type_, other->group_type_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(max_num_, other->max_num_);
    std::swap(vip_buy_num_, other->vip_buy_num_);
    std::swap(boss_type_, other->boss_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBossDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBossDataInfo_descriptor_;
  metadata.reflection = PlayerBossDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBBossAttentInfo::kIdFieldNumber;
const int CharacterDBBossAttentInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

CharacterDBBossAttentInfo::CharacterDBBossAttentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBBossAttentInfo::InitAsDefaultInstance() {
}

CharacterDBBossAttentInfo::CharacterDBBossAttentInfo(const CharacterDBBossAttentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBBossAttentInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBBossAttentInfo::~CharacterDBBossAttentInfo() {
  SharedDtor();
}

void CharacterDBBossAttentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBBossAttentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBBossAttentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBBossAttentInfo_descriptor_;
}

const CharacterDBBossAttentInfo& CharacterDBBossAttentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBBossAttentInfo* CharacterDBBossAttentInfo::default_instance_ = NULL;

CharacterDBBossAttentInfo* CharacterDBBossAttentInfo::New() const {
  return new CharacterDBBossAttentInfo;
}

void CharacterDBBossAttentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBBossAttentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBBossAttentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBBossAttentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBBossAttentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBBossAttentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBBossAttentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBBossAttentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBBossAttentInfo::MergeFrom(const CharacterDBBossAttentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBBossAttentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBBossAttentInfo::CopyFrom(const CharacterDBBossAttentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBBossAttentInfo::IsInitialized() const {

  return true;
}

void CharacterDBBossAttentInfo::Swap(CharacterDBBossAttentInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBBossAttentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBBossAttentInfo_descriptor_;
  metadata.reflection = CharacterDBBossAttentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBBossData::kInfosFieldNumber;
const int CharacterDBBossData::kLastTimeFieldNumber;
const int CharacterDBBossData::kAttentListFieldNumber;
#endif  // !_MSC_VER

CharacterDBBossData::CharacterDBBossData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBBossData::InitAsDefaultInstance() {
}

CharacterDBBossData::CharacterDBBossData(const CharacterDBBossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBBossData::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBBossData::~CharacterDBBossData() {
  SharedDtor();
}

void CharacterDBBossData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBBossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBBossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBBossData_descriptor_;
}

const CharacterDBBossData& CharacterDBBossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBBossData* CharacterDBBossData::default_instance_ = NULL;

CharacterDBBossData* CharacterDBBossData::New() const {
  return new CharacterDBBossData;
}

void CharacterDBBossData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    lasttime_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  attent_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBBossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.PlayerBossDataInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional uint64 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attent_list;
        break;
      }

      // repeated int64 attent_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attent_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_attent_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_attent_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attent_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBBossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.PlayerBossDataInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional uint64 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lasttime(), output);
  }

  // repeated int64 attent_list = 3;
  for (int i = 0; i < this->attent_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->attent_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBBossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.PlayerBossDataInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional uint64 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lasttime(), target);
  }

  // repeated int64 attent_list = 3;
  for (int i = 0; i < this->attent_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->attent_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBBossData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

  }
  // repeated .proto_ff.PlayerBossDataInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated int64 attent_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attent_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->attent_list(i));
    }
    total_size += 1 * this->attent_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBBossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBBossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBBossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBBossData::MergeFrom(const CharacterDBBossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  attent_list_.MergeFrom(from.attent_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBBossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBBossData::CopyFrom(const CharacterDBBossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBBossData::IsInitialized() const {

  return true;
}

void CharacterDBBossData::Swap(CharacterDBBossData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(lasttime_, other->lasttime_);
    attent_list_.Swap(&other->attent_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBBossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBBossData_descriptor_;
  metadata.reflection = CharacterDBBossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedPlayerInfo::kCidFieldNumber;
const int RedPlayerInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

RedPlayerInfo::RedPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedPlayerInfo::InitAsDefaultInstance() {
}

RedPlayerInfo::RedPlayerInfo(const RedPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedPlayerInfo::~RedPlayerInfo() {
  SharedDtor();
}

void RedPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedPlayerInfo_descriptor_;
}

const RedPlayerInfo& RedPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

RedPlayerInfo* RedPlayerInfo::default_instance_ = NULL;

RedPlayerInfo* RedPlayerInfo::New() const {
  return new RedPlayerInfo;
}

void RedPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedPlayerInfo::MergeFrom(const RedPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedPlayerInfo::CopyFrom(const RedPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedPlayerInfo::IsInitialized() const {

  return true;
}

void RedPlayerInfo::Swap(RedPlayerInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedPlayerInfo_descriptor_;
  metadata.reflection = RedPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBPvpData::kPkModeFieldNumber;
const int CharacterDBPvpData::kPkKillingValueFieldNumber;
const int CharacterDBPvpData::kRedPlayerFieldNumber;
const int CharacterDBPvpData::kOnlineTimeFieldNumber;
const int CharacterDBPvpData::kKillNumFieldNumber;
const int CharacterDBPvpData::kBeKillNumFieldNumber;
const int CharacterDBPvpData::kLastTimeFieldNumber;
const int CharacterDBPvpData::kBeKillNameFieldNumber;
#endif  // !_MSC_VER

CharacterDBPvpData::CharacterDBPvpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBPvpData::InitAsDefaultInstance() {
}

CharacterDBPvpData::CharacterDBPvpData(const CharacterDBPvpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBPvpData::SharedCtor() {
  _cached_size_ = 0;
  pk_mode_ = 0u;
  pk_killing_value_ = 0u;
  online_time_ = GOOGLE_ULONGLONG(0);
  kill_num_ = 0;
  be_kill_num_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  be_kill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBPvpData::~CharacterDBPvpData() {
  SharedDtor();
}

void CharacterDBPvpData::SharedDtor() {
  if (be_kill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete be_kill_name_;
  }
  if (this != default_instance_) {
  }
}

void CharacterDBPvpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBPvpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBPvpData_descriptor_;
}

const CharacterDBPvpData& CharacterDBPvpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBPvpData* CharacterDBPvpData::default_instance_ = NULL;

CharacterDBPvpData* CharacterDBPvpData::New() const {
  return new CharacterDBPvpData;
}

void CharacterDBPvpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pk_mode_ = 0u;
    pk_killing_value_ = 0u;
    online_time_ = GOOGLE_ULONGLONG(0);
    kill_num_ = 0;
    be_kill_num_ = 0;
    lasttime_ = GOOGLE_LONGLONG(0);
    if (has_be_kill_name()) {
      if (be_kill_name_ != &::google::protobuf::internal::kEmptyString) {
        be_kill_name_->clear();
      }
    }
  }
  red_player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBPvpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pk_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_mode_)));
          set_has_pk_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pk_killing_value;
        break;
      }

      // optional uint32 pk_killing_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_killing_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_killing_value_)));
          set_has_pk_killing_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_red_player;
        break;
      }

      // repeated .proto_ff.RedPlayerInfo red_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_red_player;
        if (input->ExpectTag(32)) goto parse_online_time;
        break;
      }

      // optional uint64 online_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kill_num;
        break;
      }

      // optional int32 kill_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_num_)));
          set_has_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_be_kill_num;
        break;
      }

      // optional int32 be_kill_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_be_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &be_kill_num_)));
          set_has_be_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastTime;
        break;
      }

      // optional int64 lastTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_be_kill_name;
        break;
      }

      // optional string be_kill_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_be_kill_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_be_kill_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->be_kill_name().data(), this->be_kill_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBPvpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pk_mode = 1;
  if (has_pk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pk_mode(), output);
  }

  // optional uint32 pk_killing_value = 2;
  if (has_pk_killing_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pk_killing_value(), output);
  }

  // repeated .proto_ff.RedPlayerInfo red_player = 3;
  for (int i = 0; i < this->red_player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->red_player(i), output);
  }

  // optional uint64 online_time = 4;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->online_time(), output);
  }

  // optional int32 kill_num = 5;
  if (has_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->kill_num(), output);
  }

  // optional int32 be_kill_num = 6;
  if (has_be_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->be_kill_num(), output);
  }

  // optional int64 lastTime = 7;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lasttime(), output);
  }

  // optional string be_kill_name = 8;
  if (has_be_kill_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->be_kill_name().data(), this->be_kill_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->be_kill_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBPvpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pk_mode = 1;
  if (has_pk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pk_mode(), target);
  }

  // optional uint32 pk_killing_value = 2;
  if (has_pk_killing_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pk_killing_value(), target);
  }

  // repeated .proto_ff.RedPlayerInfo red_player = 3;
  for (int i = 0; i < this->red_player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->red_player(i), target);
  }

  // optional uint64 online_time = 4;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->online_time(), target);
  }

  // optional int32 kill_num = 5;
  if (has_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->kill_num(), target);
  }

  // optional int32 be_kill_num = 6;
  if (has_be_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->be_kill_num(), target);
  }

  // optional int64 lastTime = 7;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lasttime(), target);
  }

  // optional string be_kill_name = 8;
  if (has_be_kill_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->be_kill_name().data(), this->be_kill_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->be_kill_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBPvpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pk_mode = 1;
    if (has_pk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_mode());
    }

    // optional uint32 pk_killing_value = 2;
    if (has_pk_killing_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_killing_value());
    }

    // optional uint64 online_time = 4;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->online_time());
    }

    // optional int32 kill_num = 5;
    if (has_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_num());
    }

    // optional int32 be_kill_num = 6;
    if (has_be_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->be_kill_num());
    }

    // optional int64 lastTime = 7;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional string be_kill_name = 8;
    if (has_be_kill_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->be_kill_name());
    }

  }
  // repeated .proto_ff.RedPlayerInfo red_player = 3;
  total_size += 1 * this->red_player_size();
  for (int i = 0; i < this->red_player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red_player(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBPvpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBPvpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBPvpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBPvpData::MergeFrom(const CharacterDBPvpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_player_.MergeFrom(from.red_player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pk_mode()) {
      set_pk_mode(from.pk_mode());
    }
    if (from.has_pk_killing_value()) {
      set_pk_killing_value(from.pk_killing_value());
    }
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
    if (from.has_kill_num()) {
      set_kill_num(from.kill_num());
    }
    if (from.has_be_kill_num()) {
      set_be_kill_num(from.be_kill_num());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_be_kill_name()) {
      set_be_kill_name(from.be_kill_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBPvpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBPvpData::CopyFrom(const CharacterDBPvpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBPvpData::IsInitialized() const {

  return true;
}

void CharacterDBPvpData::Swap(CharacterDBPvpData* other) {
  if (other != this) {
    std::swap(pk_mode_, other->pk_mode_);
    std::swap(pk_killing_value_, other->pk_killing_value_);
    red_player_.Swap(&other->red_player_);
    std::swap(online_time_, other->online_time_);
    std::swap(kill_num_, other->kill_num_);
    std::swap(be_kill_num_, other->be_kill_num_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(be_kill_name_, other->be_kill_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBPvpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBPvpData_descriptor_;
  metadata.reflection = CharacterDBPvpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBTreasureData::kAdvanceTreasureExpFieldNumber;
const int CharacterDBTreasureData::kAdvanceTreasureLevFieldNumber;
const int CharacterDBTreasureData::kEquipTreasureIDFieldNumber;
const int CharacterDBTreasureData::kFantasyTreasuresFieldNumber;
const int CharacterDBTreasureData::kFragmentsFieldNumber;
const int CharacterDBTreasureData::kSkillTreasureIDFieldNumber;
const int CharacterDBTreasureData::kIsbreakFieldNumber;
#endif  // !_MSC_VER

CharacterDBTreasureData::CharacterDBTreasureData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBTreasureData::InitAsDefaultInstance() {
}

CharacterDBTreasureData::CharacterDBTreasureData(const CharacterDBTreasureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBTreasureData::SharedCtor() {
  _cached_size_ = 0;
  advancetreasureexp_ = GOOGLE_ULONGLONG(0);
  advancetreasurelev_ = 0u;
  equiptreasureid_ = GOOGLE_ULONGLONG(0);
  skilltreasureid_ = GOOGLE_ULONGLONG(0);
  isbreak_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBTreasureData::~CharacterDBTreasureData() {
  SharedDtor();
}

void CharacterDBTreasureData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBTreasureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBTreasureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBTreasureData_descriptor_;
}

const CharacterDBTreasureData& CharacterDBTreasureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBTreasureData* CharacterDBTreasureData::default_instance_ = NULL;

CharacterDBTreasureData* CharacterDBTreasureData::New() const {
  return new CharacterDBTreasureData;
}

void CharacterDBTreasureData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    advancetreasureexp_ = GOOGLE_ULONGLONG(0);
    advancetreasurelev_ = 0u;
    equiptreasureid_ = GOOGLE_ULONGLONG(0);
    skilltreasureid_ = GOOGLE_ULONGLONG(0);
    isbreak_ = 0;
  }
  fantasytreasures_.Clear();
  fragments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBTreasureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 advanceTreasureExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &advancetreasureexp_)));
          set_has_advancetreasureexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advanceTreasureLev;
        break;
      }

      // optional uint32 advanceTreasureLev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanceTreasureLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancetreasurelev_)));
          set_has_advancetreasurelev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipTreasureID;
        break;
      }

      // optional uint64 equipTreasureID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipTreasureID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equiptreasureid_)));
          set_has_equiptreasureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasyTreasures;
        break;
      }

      // repeated .proto_ff.ComPair64 fantasyTreasures = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasyTreasures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasytreasures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasyTreasures;
        if (input->ExpectTag(42)) goto parse_fragments;
        break;
      }

      // repeated .proto_ff.ComPair64 fragments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fragments;
        if (input->ExpectTag(48)) goto parse_skillTreasureID;
        break;
      }

      // optional uint64 skillTreasureID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillTreasureID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skilltreasureid_)));
          set_has_skilltreasureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isbreak;
        break;
      }

      // optional int32 isbreak = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbreak_)));
          set_has_isbreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBTreasureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 advanceTreasureExp = 1;
  if (has_advancetreasureexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->advancetreasureexp(), output);
  }

  // optional uint32 advanceTreasureLev = 2;
  if (has_advancetreasurelev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->advancetreasurelev(), output);
  }

  // optional uint64 equipTreasureID = 3;
  if (has_equiptreasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->equiptreasureid(), output);
  }

  // repeated .proto_ff.ComPair64 fantasyTreasures = 4;
  for (int i = 0; i < this->fantasytreasures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fantasytreasures(i), output);
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  for (int i = 0; i < this->fragments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fragments(i), output);
  }

  // optional uint64 skillTreasureID = 6;
  if (has_skilltreasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->skilltreasureid(), output);
  }

  // optional int32 isbreak = 7;
  if (has_isbreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isbreak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBTreasureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 advanceTreasureExp = 1;
  if (has_advancetreasureexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->advancetreasureexp(), target);
  }

  // optional uint32 advanceTreasureLev = 2;
  if (has_advancetreasurelev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->advancetreasurelev(), target);
  }

  // optional uint64 equipTreasureID = 3;
  if (has_equiptreasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->equiptreasureid(), target);
  }

  // repeated .proto_ff.ComPair64 fantasyTreasures = 4;
  for (int i = 0; i < this->fantasytreasures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fantasytreasures(i), target);
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  for (int i = 0; i < this->fragments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fragments(i), target);
  }

  // optional uint64 skillTreasureID = 6;
  if (has_skilltreasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->skilltreasureid(), target);
  }

  // optional int32 isbreak = 7;
  if (has_isbreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isbreak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBTreasureData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 advanceTreasureExp = 1;
    if (has_advancetreasureexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->advancetreasureexp());
    }

    // optional uint32 advanceTreasureLev = 2;
    if (has_advancetreasurelev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancetreasurelev());
    }

    // optional uint64 equipTreasureID = 3;
    if (has_equiptreasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equiptreasureid());
    }

    // optional uint64 skillTreasureID = 6;
    if (has_skilltreasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skilltreasureid());
    }

    // optional int32 isbreak = 7;
    if (has_isbreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbreak());
    }

  }
  // repeated .proto_ff.ComPair64 fantasyTreasures = 4;
  total_size += 1 * this->fantasytreasures_size();
  for (int i = 0; i < this->fantasytreasures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasytreasures(i));
  }

  // repeated .proto_ff.ComPair64 fragments = 5;
  total_size += 1 * this->fragments_size();
  for (int i = 0; i < this->fragments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBTreasureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBTreasureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBTreasureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBTreasureData::MergeFrom(const CharacterDBTreasureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasytreasures_.MergeFrom(from.fantasytreasures_);
  fragments_.MergeFrom(from.fragments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advancetreasureexp()) {
      set_advancetreasureexp(from.advancetreasureexp());
    }
    if (from.has_advancetreasurelev()) {
      set_advancetreasurelev(from.advancetreasurelev());
    }
    if (from.has_equiptreasureid()) {
      set_equiptreasureid(from.equiptreasureid());
    }
    if (from.has_skilltreasureid()) {
      set_skilltreasureid(from.skilltreasureid());
    }
    if (from.has_isbreak()) {
      set_isbreak(from.isbreak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBTreasureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBTreasureData::CopyFrom(const CharacterDBTreasureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBTreasureData::IsInitialized() const {

  return true;
}

void CharacterDBTreasureData::Swap(CharacterDBTreasureData* other) {
  if (other != this) {
    std::swap(advancetreasureexp_, other->advancetreasureexp_);
    std::swap(advancetreasurelev_, other->advancetreasurelev_);
    std::swap(equiptreasureid_, other->equiptreasureid_);
    fantasytreasures_.Swap(&other->fantasytreasures_);
    fragments_.Swap(&other->fragments_);
    std::swap(skilltreasureid_, other->skilltreasureid_);
    std::swap(isbreak_, other->isbreak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBTreasureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBTreasureData_descriptor_;
  metadata.reflection = CharacterDBTreasureData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactInfo::kIdFieldNumber;
const int ArtifactInfo::kStarLvFieldNumber;
#endif  // !_MSC_VER

ArtifactInfo::ArtifactInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtifactInfo::InitAsDefaultInstance() {
}

ArtifactInfo::ArtifactInfo(const ArtifactInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtifactInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  star_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactInfo::~ArtifactInfo() {
  SharedDtor();
}

void ArtifactInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactInfo_descriptor_;
}

const ArtifactInfo& ArtifactInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ArtifactInfo* ArtifactInfo::default_instance_ = NULL;

ArtifactInfo* ArtifactInfo::New() const {
  return new ArtifactInfo;
}

void ArtifactInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    star_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_lv;
        break;
      }

      // optional int32 star_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_lv_)));
          set_has_star_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtifactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 star_lv = 2;
  if (has_star_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtifactInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 star_lv = 2;
  if (has_star_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtifactInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 star_lv = 2;
    if (has_star_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactInfo::MergeFrom(const ArtifactInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star_lv()) {
      set_star_lv(from.star_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactInfo::CopyFrom(const ArtifactInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactInfo::IsInitialized() const {

  return true;
}

void ArtifactInfo::Swap(ArtifactInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_lv_, other->star_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactInfo_descriptor_;
  metadata.reflection = ArtifactInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBArtifactData::kInfosFieldNumber;
const int CharacterDBArtifactData::kDressIdFieldNumber;
#endif  // !_MSC_VER

CharacterDBArtifactData::CharacterDBArtifactData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBArtifactData::InitAsDefaultInstance() {
}

CharacterDBArtifactData::CharacterDBArtifactData(const CharacterDBArtifactData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBArtifactData::SharedCtor() {
  _cached_size_ = 0;
  dress_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBArtifactData::~CharacterDBArtifactData() {
  SharedDtor();
}

void CharacterDBArtifactData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBArtifactData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBArtifactData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBArtifactData_descriptor_;
}

const CharacterDBArtifactData& CharacterDBArtifactData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBArtifactData* CharacterDBArtifactData::default_instance_ = NULL;

CharacterDBArtifactData* CharacterDBArtifactData::New() const {
  return new CharacterDBArtifactData;
}

void CharacterDBArtifactData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dress_id_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBArtifactData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ArtifactInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_dress_id;
        break;
      }

      // optional uint64 dress_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dress_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dress_id_)));
          set_has_dress_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBArtifactData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ArtifactInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional uint64 dress_id = 2;
  if (has_dress_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dress_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBArtifactData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ArtifactInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional uint64 dress_id = 2;
  if (has_dress_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dress_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBArtifactData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 dress_id = 2;
    if (has_dress_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dress_id());
    }

  }
  // repeated .proto_ff.ArtifactInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBArtifactData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBArtifactData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBArtifactData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBArtifactData::MergeFrom(const CharacterDBArtifactData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dress_id()) {
      set_dress_id(from.dress_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBArtifactData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBArtifactData::CopyFrom(const CharacterDBArtifactData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBArtifactData::IsInitialized() const {

  return true;
}

void CharacterDBArtifactData::Swap(CharacterDBArtifactData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(dress_id_, other->dress_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBArtifactData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBArtifactData_descriptor_;
  metadata.reflection = CharacterDBArtifactData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBFateStarData::kFreeTimeFieldNumber;
const int CharacterDBFateStarData::kTowerLevelFieldNumber;
const int CharacterDBFateStarData::kNblessFieldNumber;
const int CharacterDBFateStarData::kSoltDataFieldNumber;
const int CharacterDBFateStarData::kEquipStarsFieldNumber;
const int CharacterDBFateStarData::kCurnumFieldNumber;
const int CharacterDBFateStarData::kLasttimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBFateStarData::CharacterDBFateStarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBFateStarData::InitAsDefaultInstance() {
}

CharacterDBFateStarData::CharacterDBFateStarData(const CharacterDBFateStarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBFateStarData::SharedCtor() {
  _cached_size_ = 0;
  freetime_ = GOOGLE_ULONGLONG(0);
  towerlevel_ = 0u;
  nbless_ = 0u;
  curnum_ = 0u;
  lasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBFateStarData::~CharacterDBFateStarData() {
  SharedDtor();
}

void CharacterDBFateStarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBFateStarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBFateStarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBFateStarData_descriptor_;
}

const CharacterDBFateStarData& CharacterDBFateStarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBFateStarData* CharacterDBFateStarData::default_instance_ = NULL;

CharacterDBFateStarData* CharacterDBFateStarData::New() const {
  return new CharacterDBFateStarData;
}

void CharacterDBFateStarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freetime_ = GOOGLE_ULONGLONG(0);
    towerlevel_ = 0u;
    nbless_ = 0u;
    curnum_ = 0u;
    lasttime_ = GOOGLE_ULONGLONG(0);
  }
  soltdata_.Clear();
  equipstars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBFateStarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 freeTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freetime_)));
          set_has_freetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_towerLevel;
        break;
      }

      // optional uint32 towerLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_towerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerlevel_)));
          set_has_towerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nbless;
        break;
      }

      // optional uint32 nbless = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nbless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbless_)));
          set_has_nbless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_soltData;
        break;
      }

      // repeated .proto_ff.ComPair soltData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soltData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soltdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_soltData;
        if (input->ExpectTag(42)) goto parse_equipStars;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo equipStars = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipStars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipstars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equipStars;
        if (input->ExpectTag(48)) goto parse_curnum;
        break;
      }

      // optional uint32 curnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));
          set_has_curnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lasttime;
        break;
      }

      // optional uint64 lasttime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBFateStarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 freeTime = 1;
  if (has_freetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->freetime(), output);
  }

  // optional uint32 towerLevel = 2;
  if (has_towerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->towerlevel(), output);
  }

  // optional uint32 nbless = 3;
  if (has_nbless()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nbless(), output);
  }

  // repeated .proto_ff.ComPair soltData = 4;
  for (int i = 0; i < this->soltdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->soltdata(i), output);
  }

  // repeated .proto_ff.ItemProtoInfo equipStars = 5;
  for (int i = 0; i < this->equipstars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipstars(i), output);
  }

  // optional uint32 curnum = 6;
  if (has_curnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->curnum(), output);
  }

  // optional uint64 lasttime = 7;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBFateStarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 freeTime = 1;
  if (has_freetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->freetime(), target);
  }

  // optional uint32 towerLevel = 2;
  if (has_towerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->towerlevel(), target);
  }

  // optional uint32 nbless = 3;
  if (has_nbless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nbless(), target);
  }

  // repeated .proto_ff.ComPair soltData = 4;
  for (int i = 0; i < this->soltdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->soltdata(i), target);
  }

  // repeated .proto_ff.ItemProtoInfo equipStars = 5;
  for (int i = 0; i < this->equipstars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipstars(i), target);
  }

  // optional uint32 curnum = 6;
  if (has_curnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->curnum(), target);
  }

  // optional uint64 lasttime = 7;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBFateStarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 freeTime = 1;
    if (has_freetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freetime());
    }

    // optional uint32 towerLevel = 2;
    if (has_towerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerlevel());
    }

    // optional uint32 nbless = 3;
    if (has_nbless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nbless());
    }

    // optional uint32 curnum = 6;
    if (has_curnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curnum());
    }

    // optional uint64 lasttime = 7;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

  }
  // repeated .proto_ff.ComPair soltData = 4;
  total_size += 1 * this->soltdata_size();
  for (int i = 0; i < this->soltdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soltdata(i));
  }

  // repeated .proto_ff.ItemProtoInfo equipStars = 5;
  total_size += 1 * this->equipstars_size();
  for (int i = 0; i < this->equipstars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipstars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBFateStarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBFateStarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBFateStarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBFateStarData::MergeFrom(const CharacterDBFateStarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  soltdata_.MergeFrom(from.soltdata_);
  equipstars_.MergeFrom(from.equipstars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freetime()) {
      set_freetime(from.freetime());
    }
    if (from.has_towerlevel()) {
      set_towerlevel(from.towerlevel());
    }
    if (from.has_nbless()) {
      set_nbless(from.nbless());
    }
    if (from.has_curnum()) {
      set_curnum(from.curnum());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBFateStarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBFateStarData::CopyFrom(const CharacterDBFateStarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBFateStarData::IsInitialized() const {

  return true;
}

void CharacterDBFateStarData::Swap(CharacterDBFateStarData* other) {
  if (other != this) {
    std::swap(freetime_, other->freetime_);
    std::swap(towerlevel_, other->towerlevel_);
    std::swap(nbless_, other->nbless_);
    soltdata_.Swap(&other->soltdata_);
    equipstars_.Swap(&other->equipstars_);
    std::swap(curnum_, other->curnum_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBFateStarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBFateStarData_descriptor_;
  metadata.reflection = CharacterDBFateStarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBConvoyData::kDoTimesFieldNumber;
const int CharacterDBConvoyData::kConvoyDateFieldNumber;
const int CharacterDBConvoyData::kEscortidFieldNumber;
const int CharacterDBConvoyData::kAcceptTimeFieldNumber;
const int CharacterDBConvoyData::kRefreshTimesFieldNumber;
const int CharacterDBConvoyData::kSelectEscortIdFieldNumber;
const int CharacterDBConvoyData::kRefreshTimeStampFieldNumber;
const int CharacterDBConvoyData::kLastResetTimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBConvoyData::CharacterDBConvoyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBConvoyData::InitAsDefaultInstance() {
}

CharacterDBConvoyData::CharacterDBConvoyData(const CharacterDBConvoyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBConvoyData::SharedCtor() {
  _cached_size_ = 0;
  dotimes_ = 0u;
  convoydate_ = 0u;
  escortid_ = GOOGLE_ULONGLONG(0);
  accepttime_ = GOOGLE_ULONGLONG(0);
  refreshtimes_ = 0u;
  selectescortid_ = GOOGLE_ULONGLONG(0);
  refreshtimestamp_ = GOOGLE_ULONGLONG(0);
  lastresettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBConvoyData::~CharacterDBConvoyData() {
  SharedDtor();
}

void CharacterDBConvoyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBConvoyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBConvoyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBConvoyData_descriptor_;
}

const CharacterDBConvoyData& CharacterDBConvoyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBConvoyData* CharacterDBConvoyData::default_instance_ = NULL;

CharacterDBConvoyData* CharacterDBConvoyData::New() const {
  return new CharacterDBConvoyData;
}

void CharacterDBConvoyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dotimes_ = 0u;
    convoydate_ = 0u;
    escortid_ = GOOGLE_ULONGLONG(0);
    accepttime_ = GOOGLE_ULONGLONG(0);
    refreshtimes_ = 0u;
    selectescortid_ = GOOGLE_ULONGLONG(0);
    refreshtimestamp_ = GOOGLE_ULONGLONG(0);
    lastresettime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBConvoyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 doTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dotimes_)));
          set_has_dotimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_convoyDate;
        break;
      }

      // optional uint32 convoyDate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_convoyDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &convoydate_)));
          set_has_convoydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_escortid;
        break;
      }

      // optional uint64 escortid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_escortid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &escortid_)));
          set_has_escortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_acceptTime;
        break;
      }

      // optional uint64 acceptTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepttime_)));
          set_has_accepttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refreshTimes;
        break;
      }

      // optional uint32 refreshTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtimes_)));
          set_has_refreshtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selectEscortId;
        break;
      }

      // optional uint64 selectEscortId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectEscortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &selectescortid_)));
          set_has_selectescortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_refreshTimeStamp;
        break;
      }

      // optional uint64 refreshTimeStamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtimestamp_)));
          set_has_refreshtimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LastResetTime;
        break;
      }

      // optional uint64 LastResetTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastresettime_)));
          set_has_lastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBConvoyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 doTimes = 1;
  if (has_dotimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dotimes(), output);
  }

  // optional uint32 convoyDate = 2;
  if (has_convoydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->convoydate(), output);
  }

  // optional uint64 escortid = 3;
  if (has_escortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->escortid(), output);
  }

  // optional uint64 acceptTime = 4;
  if (has_accepttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accepttime(), output);
  }

  // optional uint32 refreshTimes = 5;
  if (has_refreshtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refreshtimes(), output);
  }

  // optional uint64 selectEscortId = 6;
  if (has_selectescortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->selectescortid(), output);
  }

  // optional uint64 refreshTimeStamp = 7;
  if (has_refreshtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->refreshtimestamp(), output);
  }

  // optional uint64 LastResetTime = 8;
  if (has_lastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->lastresettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBConvoyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 doTimes = 1;
  if (has_dotimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dotimes(), target);
  }

  // optional uint32 convoyDate = 2;
  if (has_convoydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->convoydate(), target);
  }

  // optional uint64 escortid = 3;
  if (has_escortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->escortid(), target);
  }

  // optional uint64 acceptTime = 4;
  if (has_accepttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accepttime(), target);
  }

  // optional uint32 refreshTimes = 5;
  if (has_refreshtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refreshtimes(), target);
  }

  // optional uint64 selectEscortId = 6;
  if (has_selectescortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->selectescortid(), target);
  }

  // optional uint64 refreshTimeStamp = 7;
  if (has_refreshtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->refreshtimestamp(), target);
  }

  // optional uint64 LastResetTime = 8;
  if (has_lastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->lastresettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBConvoyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 doTimes = 1;
    if (has_dotimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dotimes());
    }

    // optional uint32 convoyDate = 2;
    if (has_convoydate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->convoydate());
    }

    // optional uint64 escortid = 3;
    if (has_escortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->escortid());
    }

    // optional uint64 acceptTime = 4;
    if (has_accepttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accepttime());
    }

    // optional uint32 refreshTimes = 5;
    if (has_refreshtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshtimes());
    }

    // optional uint64 selectEscortId = 6;
    if (has_selectescortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->selectescortid());
    }

    // optional uint64 refreshTimeStamp = 7;
    if (has_refreshtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtimestamp());
    }

    // optional uint64 LastResetTime = 8;
    if (has_lastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastresettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBConvoyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBConvoyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBConvoyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBConvoyData::MergeFrom(const CharacterDBConvoyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dotimes()) {
      set_dotimes(from.dotimes());
    }
    if (from.has_convoydate()) {
      set_convoydate(from.convoydate());
    }
    if (from.has_escortid()) {
      set_escortid(from.escortid());
    }
    if (from.has_accepttime()) {
      set_accepttime(from.accepttime());
    }
    if (from.has_refreshtimes()) {
      set_refreshtimes(from.refreshtimes());
    }
    if (from.has_selectescortid()) {
      set_selectescortid(from.selectescortid());
    }
    if (from.has_refreshtimestamp()) {
      set_refreshtimestamp(from.refreshtimestamp());
    }
    if (from.has_lastresettime()) {
      set_lastresettime(from.lastresettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBConvoyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBConvoyData::CopyFrom(const CharacterDBConvoyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBConvoyData::IsInitialized() const {

  return true;
}

void CharacterDBConvoyData::Swap(CharacterDBConvoyData* other) {
  if (other != this) {
    std::swap(dotimes_, other->dotimes_);
    std::swap(convoydate_, other->convoydate_);
    std::swap(escortid_, other->escortid_);
    std::swap(accepttime_, other->accepttime_);
    std::swap(refreshtimes_, other->refreshtimes_);
    std::swap(selectescortid_, other->selectescortid_);
    std::swap(refreshtimestamp_, other->refreshtimestamp_);
    std::swap(lastresettime_, other->lastresettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBConvoyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBConvoyData_descriptor_;
  metadata.reflection = CharacterDBConvoyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDailyEntry::kCfgIdFieldNumber;
const int CharacterDBDailyEntry::kCurNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBDailyEntry::CharacterDBDailyEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDailyEntry::InitAsDefaultInstance() {
}

CharacterDBDailyEntry::CharacterDBDailyEntry(const CharacterDBDailyEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDailyEntry::SharedCtor() {
  _cached_size_ = 0;
  cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDailyEntry::~CharacterDBDailyEntry() {
  SharedDtor();
}

void CharacterDBDailyEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBDailyEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDailyEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDailyEntry_descriptor_;
}

const CharacterDBDailyEntry& CharacterDBDailyEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBDailyEntry* CharacterDBDailyEntry::default_instance_ = NULL;

CharacterDBDailyEntry* CharacterDBDailyEntry::New() const {
  return new CharacterDBDailyEntry;
}

void CharacterDBDailyEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDailyEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfg_id_)));
          set_has_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDailyEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cfg_id = 1;
  if (has_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDailyEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cfg_id = 1;
  if (has_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDailyEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cfg_id = 1;
    if (has_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDailyEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDailyEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDailyEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDailyEntry::MergeFrom(const CharacterDBDailyEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfg_id()) {
      set_cfg_id(from.cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDailyEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDailyEntry::CopyFrom(const CharacterDBDailyEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDailyEntry::IsInitialized() const {

  return true;
}

void CharacterDBDailyEntry::Swap(CharacterDBDailyEntry* other) {
  if (other != this) {
    std::swap(cfg_id_, other->cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDailyEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDailyEntry_descriptor_;
  metadata.reflection = CharacterDBDailyEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDailyData::kDailyEntryFieldNumber;
const int CharacterDBDailyData::kRewardsFieldNumber;
const int CharacterDBDailyData::kLasttimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBDailyData::CharacterDBDailyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDailyData::InitAsDefaultInstance() {
}

CharacterDBDailyData::CharacterDBDailyData(const CharacterDBDailyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDailyData::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDailyData::~CharacterDBDailyData() {
  SharedDtor();
}

void CharacterDBDailyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBDailyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDailyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDailyData_descriptor_;
}

const CharacterDBDailyData& CharacterDBDailyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBDailyData* CharacterDBDailyData::default_instance_ = NULL;

CharacterDBDailyData* CharacterDBDailyData::New() const {
  return new CharacterDBDailyData;
}

void CharacterDBDailyData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    lasttime_ = GOOGLE_ULONGLONG(0);
  }
  daily_entry_.Clear();
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDailyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBDailyEntry daily_entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daily_entry;
        if (input->ExpectTag(16)) goto parse_rewards;
        break;
      }

      // repeated uint64 rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_rewards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_rewards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewards;
        if (input->ExpectTag(24)) goto parse_lasttime;
        break;
      }

      // optional uint64 lasttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDailyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBDailyEntry daily_entry = 1;
  for (int i = 0; i < this->daily_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_entry(i), output);
  }

  // repeated uint64 rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->rewards(i), output);
  }

  // optional uint64 lasttime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDailyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBDailyEntry daily_entry = 1;
  for (int i = 0; i < this->daily_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_entry(i), target);
  }

  // repeated uint64 rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->rewards(i), target);
  }

  // optional uint64 lasttime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDailyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 lasttime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

  }
  // repeated .proto_ff.CharacterDBDailyEntry daily_entry = 1;
  total_size += 1 * this->daily_entry_size();
  for (int i = 0; i < this->daily_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_entry(i));
  }

  // repeated uint64 rewards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->rewards(i));
    }
    total_size += 1 * this->rewards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDailyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDailyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDailyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDailyData::MergeFrom(const CharacterDBDailyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_entry_.MergeFrom(from.daily_entry_);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDailyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDailyData::CopyFrom(const CharacterDBDailyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDailyData::IsInitialized() const {

  return true;
}

void CharacterDBDailyData::Swap(CharacterDBDailyData* other) {
  if (other != this) {
    daily_entry_.Swap(&other->daily_entry_);
    rewards_.Swap(&other->rewards_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDailyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDailyData_descriptor_;
  metadata.reflection = CharacterDBDailyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldCylstalInfo::kSlotIndexFieldNumber;
const int FieldCylstalInfo::kItemidFieldNumber;
#endif  // !_MSC_VER

FieldCylstalInfo::FieldCylstalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldCylstalInfo::InitAsDefaultInstance() {
}

FieldCylstalInfo::FieldCylstalInfo(const FieldCylstalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldCylstalInfo::SharedCtor() {
  _cached_size_ = 0;
  slotindex_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldCylstalInfo::~FieldCylstalInfo() {
  SharedDtor();
}

void FieldCylstalInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldCylstalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldCylstalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldCylstalInfo_descriptor_;
}

const FieldCylstalInfo& FieldCylstalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FieldCylstalInfo* FieldCylstalInfo::default_instance_ = NULL;

FieldCylstalInfo* FieldCylstalInfo::New() const {
  return new FieldCylstalInfo;
}

void FieldCylstalInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slotindex_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldCylstalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slotIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotindex_)));
          set_has_slotindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldCylstalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slotIndex = 1;
  if (has_slotindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slotindex(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldCylstalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slotIndex = 1;
  if (has_slotindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slotindex(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldCylstalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slotIndex = 1;
    if (has_slotindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slotindex());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldCylstalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldCylstalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldCylstalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldCylstalInfo::MergeFrom(const FieldCylstalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slotindex()) {
      set_slotindex(from.slotindex());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldCylstalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldCylstalInfo::CopyFrom(const FieldCylstalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldCylstalInfo::IsInitialized() const {

  return true;
}

void FieldCylstalInfo::Swap(FieldCylstalInfo* other) {
  if (other != this) {
    std::swap(slotindex_, other->slotindex_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldCylstalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldCylstalInfo_descriptor_;
  metadata.reflection = FieldCylstalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldExInfo::kActivedFieldNumber;
const int FieldExInfo::kSlotInfosFieldNumber;
const int FieldExInfo::kFieldIdFieldNumber;
const int FieldExInfo::kFightNumFieldNumber;
const int FieldExInfo::kCylstalInfosFieldNumber;
const int FieldExInfo::kFirstActiveFieldNumber;
#endif  // !_MSC_VER

FieldExInfo::FieldExInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldExInfo::InitAsDefaultInstance() {
}

FieldExInfo::FieldExInfo(const FieldExInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldExInfo::SharedCtor() {
  _cached_size_ = 0;
  actived_ = 0;
  fieldid_ = GOOGLE_ULONGLONG(0);
  fightnum_ = GOOGLE_ULONGLONG(0);
  first_active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldExInfo::~FieldExInfo() {
  SharedDtor();
}

void FieldExInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldExInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldExInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldExInfo_descriptor_;
}

const FieldExInfo& FieldExInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FieldExInfo* FieldExInfo::default_instance_ = NULL;

FieldExInfo* FieldExInfo::New() const {
  return new FieldExInfo;
}

void FieldExInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actived_ = 0;
    fieldid_ = GOOGLE_ULONGLONG(0);
    fightnum_ = GOOGLE_ULONGLONG(0);
    first_active_ = false;
  }
  slotinfos_.Clear();
  cylstalinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldExInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actived = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actived_)));
          set_has_actived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slotInfos;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo slotInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slotInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slotinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slotInfos;
        if (input->ExpectTag(24)) goto parse_fieldId;
        break;
      }

      // optional uint64 fieldId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fightNum;
        break;
      }

      // optional uint64 fightNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightnum_)));
          set_has_fightnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cylstalInfos;
        break;
      }

      // repeated .proto_ff.FieldCylstalInfo cylstalInfos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cylstalInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cylstalinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cylstalInfos;
        if (input->ExpectTag(48)) goto parse_first_active;
        break;
      }

      // optional bool first_active = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_active_)));
          set_has_first_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldExInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 actived = 1;
  if (has_actived()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actived(), output);
  }

  // repeated .proto_ff.ItemProtoInfo slotInfos = 2;
  for (int i = 0; i < this->slotinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slotinfos(i), output);
  }

  // optional uint64 fieldId = 3;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fieldid(), output);
  }

  // optional uint64 fightNum = 4;
  if (has_fightnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fightnum(), output);
  }

  // repeated .proto_ff.FieldCylstalInfo cylstalInfos = 5;
  for (int i = 0; i < this->cylstalinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cylstalinfos(i), output);
  }

  // optional bool first_active = 6;
  if (has_first_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->first_active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldExInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 actived = 1;
  if (has_actived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actived(), target);
  }

  // repeated .proto_ff.ItemProtoInfo slotInfos = 2;
  for (int i = 0; i < this->slotinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slotinfos(i), target);
  }

  // optional uint64 fieldId = 3;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fieldid(), target);
  }

  // optional uint64 fightNum = 4;
  if (has_fightnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fightnum(), target);
  }

  // repeated .proto_ff.FieldCylstalInfo cylstalInfos = 5;
  for (int i = 0; i < this->cylstalinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cylstalinfos(i), target);
  }

  // optional bool first_active = 6;
  if (has_first_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->first_active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldExInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actived = 1;
    if (has_actived()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actived());
    }

    // optional uint64 fieldId = 3;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fieldid());
    }

    // optional uint64 fightNum = 4;
    if (has_fightnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightnum());
    }

    // optional bool first_active = 6;
    if (has_first_active()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto_ff.ItemProtoInfo slotInfos = 2;
  total_size += 1 * this->slotinfos_size();
  for (int i = 0; i < this->slotinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slotinfos(i));
  }

  // repeated .proto_ff.FieldCylstalInfo cylstalInfos = 5;
  total_size += 1 * this->cylstalinfos_size();
  for (int i = 0; i < this->cylstalinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cylstalinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldExInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldExInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldExInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldExInfo::MergeFrom(const FieldExInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotinfos_.MergeFrom(from.slotinfos_);
  cylstalinfos_.MergeFrom(from.cylstalinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actived()) {
      set_actived(from.actived());
    }
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
    if (from.has_fightnum()) {
      set_fightnum(from.fightnum());
    }
    if (from.has_first_active()) {
      set_first_active(from.first_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldExInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldExInfo::CopyFrom(const FieldExInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldExInfo::IsInitialized() const {

  return true;
}

void FieldExInfo::Swap(FieldExInfo* other) {
  if (other != this) {
    std::swap(actived_, other->actived_);
    slotinfos_.Swap(&other->slotinfos_);
    std::swap(fieldid_, other->fieldid_);
    std::swap(fightnum_, other->fightnum_);
    cylstalinfos_.Swap(&other->cylstalinfos_);
    std::swap(first_active_, other->first_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldExInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldExInfo_descriptor_;
  metadata.reflection = FieldExInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBFieldData::kFieldInfosFieldNumber;
const int CharacterDBFieldData::kCurExpFieldNumber;
const int CharacterDBFieldData::kMaxNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBFieldData::CharacterDBFieldData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBFieldData::InitAsDefaultInstance() {
}

CharacterDBFieldData::CharacterDBFieldData(const CharacterDBFieldData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBFieldData::SharedCtor() {
  _cached_size_ = 0;
  curexp_ = GOOGLE_ULONGLONG(0);
  maxnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBFieldData::~CharacterDBFieldData() {
  SharedDtor();
}

void CharacterDBFieldData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBFieldData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBFieldData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBFieldData_descriptor_;
}

const CharacterDBFieldData& CharacterDBFieldData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBFieldData* CharacterDBFieldData::default_instance_ = NULL;

CharacterDBFieldData* CharacterDBFieldData::New() const {
  return new CharacterDBFieldData;
}

void CharacterDBFieldData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    curexp_ = GOOGLE_ULONGLONG(0);
    maxnum_ = 0;
  }
  fieldinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBFieldData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FieldExInfo fieldInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fieldInfos;
        if (input->ExpectTag(16)) goto parse_curExp;
        break;
      }

      // optional uint64 curExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxNum;
        break;
      }

      // optional int32 maxNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBFieldData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FieldExInfo fieldInfos = 1;
  for (int i = 0; i < this->fieldinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldinfos(i), output);
  }

  // optional uint64 curExp = 2;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->curexp(), output);
  }

  // optional int32 maxNum = 3;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBFieldData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FieldExInfo fieldInfos = 1;
  for (int i = 0; i < this->fieldinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldinfos(i), target);
  }

  // optional uint64 curExp = 2;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->curexp(), target);
  }

  // optional int32 maxNum = 3;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBFieldData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 curExp = 2;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curexp());
    }

    // optional int32 maxNum = 3;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

  }
  // repeated .proto_ff.FieldExInfo fieldInfos = 1;
  total_size += 1 * this->fieldinfos_size();
  for (int i = 0; i < this->fieldinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBFieldData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBFieldData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBFieldData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBFieldData::MergeFrom(const CharacterDBFieldData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldinfos_.MergeFrom(from.fieldinfos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBFieldData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBFieldData::CopyFrom(const CharacterDBFieldData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBFieldData::IsInitialized() const {

  return true;
}

void CharacterDBFieldData::Swap(CharacterDBFieldData* other) {
  if (other != this) {
    fieldinfos_.Swap(&other->fieldinfos_);
    std::swap(curexp_, other->curexp_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBFieldData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBFieldData_descriptor_;
  metadata.reflection = CharacterDBFieldData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vipGiftDBData::kGiftIdFieldNumber;
const int vipGiftDBData::kActiveTimeFieldNumber;
const int vipGiftDBData::kLastGetTimeFieldNumber;
#endif  // !_MSC_VER

vipGiftDBData::vipGiftDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vipGiftDBData::InitAsDefaultInstance() {
}

vipGiftDBData::vipGiftDBData(const vipGiftDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vipGiftDBData::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = GOOGLE_ULONGLONG(0);
  activetime_ = GOOGLE_ULONGLONG(0);
  lastgettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vipGiftDBData::~vipGiftDBData() {
  SharedDtor();
}

void vipGiftDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vipGiftDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vipGiftDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vipGiftDBData_descriptor_;
}

const vipGiftDBData& vipGiftDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

vipGiftDBData* vipGiftDBData::default_instance_ = NULL;

vipGiftDBData* vipGiftDBData::New() const {
  return new vipGiftDBData;
}

void vipGiftDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giftid_ = GOOGLE_ULONGLONG(0);
    activetime_ = GOOGLE_ULONGLONG(0);
    lastgettime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vipGiftDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 giftId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activeTime;
        break;
      }

      // optional uint64 activeTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activetime_)));
          set_has_activetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastGetTime;
        break;
      }

      // optional uint64 lastGetTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastGetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastgettime_)));
          set_has_lastgettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vipGiftDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 giftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->giftid(), output);
  }

  // optional uint64 activeTime = 2;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->activetime(), output);
  }

  // optional uint64 lastGetTime = 3;
  if (has_lastgettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastgettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vipGiftDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 giftId = 1;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->giftid(), target);
  }

  // optional uint64 activeTime = 2;
  if (has_activetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->activetime(), target);
  }

  // optional uint64 lastGetTime = 3;
  if (has_lastgettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastgettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vipGiftDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 giftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->giftid());
    }

    // optional uint64 activeTime = 2;
    if (has_activetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activetime());
    }

    // optional uint64 lastGetTime = 3;
    if (has_lastgettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastgettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vipGiftDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vipGiftDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vipGiftDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vipGiftDBData::MergeFrom(const vipGiftDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_activetime()) {
      set_activetime(from.activetime());
    }
    if (from.has_lastgettime()) {
      set_lastgettime(from.lastgettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vipGiftDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vipGiftDBData::CopyFrom(const vipGiftDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vipGiftDBData::IsInitialized() const {

  return true;
}

void vipGiftDBData::Swap(vipGiftDBData* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(activetime_, other->activetime_);
    std::swap(lastgettime_, other->lastgettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vipGiftDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vipGiftDBData_descriptor_;
  metadata.reflection = vipGiftDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipTCardInfo::kIdFieldNumber;
const int VipTCardInfo::kEndTimeFieldNumber;
const int VipTCardInfo::kStateFieldNumber;
const int VipTCardInfo::kRewardStateFieldNumber;
#endif  // !_MSC_VER

VipTCardInfo::VipTCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipTCardInfo::InitAsDefaultInstance() {
}

VipTCardInfo::VipTCardInfo(const VipTCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipTCardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  rewardstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipTCardInfo::~VipTCardInfo() {
  SharedDtor();
}

void VipTCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipTCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipTCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipTCardInfo_descriptor_;
}

const VipTCardInfo& VipTCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

VipTCardInfo* VipTCardInfo::default_instance_ = NULL;

VipTCardInfo* VipTCardInfo::New() const {
  return new VipTCardInfo;
}

void VipTCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    endtime_ = GOOGLE_LONGLONG(0);
    state_ = 0;
    rewardstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipTCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardState;
        break;
      }

      // optional int32 rewardState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardstate_)));
          set_has_rewardstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipTCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 rewardState = 4;
  if (has_rewardstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rewardstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipTCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 rewardState = 4;
  if (has_rewardstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rewardstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipTCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 rewardState = 4;
    if (has_rewardstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipTCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipTCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipTCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipTCardInfo::MergeFrom(const VipTCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_rewardstate()) {
      set_rewardstate(from.rewardstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipTCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipTCardInfo::CopyFrom(const VipTCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipTCardInfo::IsInitialized() const {

  return true;
}

void VipTCardInfo::Swap(VipTCardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(endtime_, other->endtime_);
    std::swap(state_, other->state_);
    std::swap(rewardstate_, other->rewardstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipTCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipTCardInfo_descriptor_;
  metadata.reflection = VipTCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipTCardData::kCardInfoFieldNumber;
const int VipTCardData::kGiftStateFieldNumber;
const int VipTCardData::kPointFieldNumber;
#endif  // !_MSC_VER

VipTCardData::VipTCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipTCardData::InitAsDefaultInstance() {
}

VipTCardData::VipTCardData(const VipTCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipTCardData::SharedCtor() {
  _cached_size_ = 0;
  giftstate_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipTCardData::~VipTCardData() {
  SharedDtor();
}

void VipTCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipTCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipTCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipTCardData_descriptor_;
}

const VipTCardData& VipTCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

VipTCardData* VipTCardData::default_instance_ = NULL;

VipTCardData* VipTCardData::New() const {
  return new VipTCardData;
}

void VipTCardData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    giftstate_ = 0;
    point_ = 0;
  }
  cardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipTCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.VipTCardInfo cardInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cardInfo;
        if (input->ExpectTag(16)) goto parse_giftState;
        break;
      }

      // optional int32 giftState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftstate_)));
          set_has_giftstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional int32 point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipTCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.VipTCardInfo cardInfo = 1;
  for (int i = 0; i < this->cardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardinfo(i), output);
  }

  // optional int32 giftState = 2;
  if (has_giftstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giftstate(), output);
  }

  // optional int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipTCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.VipTCardInfo cardInfo = 1;
  for (int i = 0; i < this->cardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardinfo(i), target);
  }

  // optional int32 giftState = 2;
  if (has_giftstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->giftstate(), target);
  }

  // optional int32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipTCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 giftState = 2;
    if (has_giftstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftstate());
    }

    // optional int32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  // repeated .proto_ff.VipTCardInfo cardInfo = 1;
  total_size += 1 * this->cardinfo_size();
  for (int i = 0; i < this->cardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipTCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipTCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipTCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipTCardData::MergeFrom(const VipTCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardinfo_.MergeFrom(from.cardinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_giftstate()) {
      set_giftstate(from.giftstate());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipTCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipTCardData::CopyFrom(const VipTCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipTCardData::IsInitialized() const {

  return true;
}

void VipTCardData::Swap(VipTCardData* other) {
  if (other != this) {
    cardinfo_.Swap(&other->cardinfo_);
    std::swap(giftstate_, other->giftstate_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipTCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipTCardData_descriptor_;
  metadata.reflection = VipTCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBVipData::kVipStateFieldNumber;
const int CharacterDBVipData::kVipExpFieldNumber;
const int CharacterDBVipData::kGetRewardTimeFieldNumber;
const int CharacterDBVipData::kExpDiamondFieldNumber;
const int CharacterDBVipData::kTimeLimitExpFieldNumber;
const int CharacterDBVipData::kVipGiftFieldNumber;
const int CharacterDBVipData::kCardDataFieldNumber;
const int CharacterDBVipData::kCardLastTimeFieldNumber;
const int CharacterDBVipData::kCurAddVipExpFieldNumber;
const int CharacterDBVipData::kPointFieldNumber;
#endif  // !_MSC_VER

CharacterDBVipData::CharacterDBVipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBVipData::InitAsDefaultInstance() {
  carddata_ = const_cast< ::proto_ff::VipTCardData*>(&::proto_ff::VipTCardData::default_instance());
}

CharacterDBVipData::CharacterDBVipData(const CharacterDBVipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBVipData::SharedCtor() {
  _cached_size_ = 0;
  vipstate_ = 0u;
  vipexp_ = GOOGLE_ULONGLONG(0);
  getrewardtime_ = GOOGLE_ULONGLONG(0);
  expdiamond_ = GOOGLE_ULONGLONG(0);
  carddata_ = NULL;
  cardlasttime_ = GOOGLE_LONGLONG(0);
  curaddvipexp_ = GOOGLE_LONGLONG(0);
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBVipData::~CharacterDBVipData() {
  SharedDtor();
}

void CharacterDBVipData::SharedDtor() {
  if (this != default_instance_) {
    delete carddata_;
  }
}

void CharacterDBVipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBVipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBVipData_descriptor_;
}

const CharacterDBVipData& CharacterDBVipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBVipData* CharacterDBVipData::default_instance_ = NULL;

CharacterDBVipData* CharacterDBVipData::New() const {
  return new CharacterDBVipData;
}

void CharacterDBVipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vipstate_ = 0u;
    vipexp_ = GOOGLE_ULONGLONG(0);
    getrewardtime_ = GOOGLE_ULONGLONG(0);
    expdiamond_ = GOOGLE_ULONGLONG(0);
    if (has_carddata()) {
      if (carddata_ != NULL) carddata_->::proto_ff::VipTCardData::Clear();
    }
    cardlasttime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    curaddvipexp_ = GOOGLE_LONGLONG(0);
    point_ = 0;
  }
  timelimitexp_.Clear();
  vipgift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBVipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vipState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipstate_)));
          set_has_vipstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vipExp;
        break;
      }

      // optional uint64 vipExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getRewardTime;
        break;
      }

      // optional uint64 getRewardTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &getrewardtime_)));
          set_has_getrewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expDiamond;
        break;
      }

      // optional uint64 expDiamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expdiamond_)));
          set_has_expdiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timeLimitExp;
        break;
      }

      // repeated .proto_ff.ComPair64 timeLimitExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeLimitExp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timelimitexp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timeLimitExp;
        if (input->ExpectTag(50)) goto parse_vipGift;
        break;
      }

      // repeated .proto_ff.vipGiftDBData vipGift = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipGift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipgift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vipGift;
        if (input->ExpectTag(58)) goto parse_cardData;
        break;
      }

      // optional .proto_ff.VipTCardData cardData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cardLastTime;
        break;
      }

      // optional int64 cardLastTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cardlasttime_)));
          set_has_cardlasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_curAddVipExp;
        break;
      }

      // optional int64 curAddVipExp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curAddVipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curaddvipexp_)));
          set_has_curaddvipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_point;
        break;
      }

      // optional int32 point = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBVipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 vipState = 1;
  if (has_vipstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vipstate(), output);
  }

  // optional uint64 vipExp = 2;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->vipexp(), output);
  }

  // optional uint64 getRewardTime = 3;
  if (has_getrewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->getrewardtime(), output);
  }

  // optional uint64 expDiamond = 4;
  if (has_expdiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expdiamond(), output);
  }

  // repeated .proto_ff.ComPair64 timeLimitExp = 5;
  for (int i = 0; i < this->timelimitexp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->timelimitexp(i), output);
  }

  // repeated .proto_ff.vipGiftDBData vipGift = 6;
  for (int i = 0; i < this->vipgift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vipgift(i), output);
  }

  // optional .proto_ff.VipTCardData cardData = 7;
  if (has_carddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->carddata(), output);
  }

  // optional int64 cardLastTime = 8;
  if (has_cardlasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->cardlasttime(), output);
  }

  // optional int64 curAddVipExp = 9;
  if (has_curaddvipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->curaddvipexp(), output);
  }

  // optional int32 point = 10;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBVipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 vipState = 1;
  if (has_vipstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vipstate(), target);
  }

  // optional uint64 vipExp = 2;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->vipexp(), target);
  }

  // optional uint64 getRewardTime = 3;
  if (has_getrewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->getrewardtime(), target);
  }

  // optional uint64 expDiamond = 4;
  if (has_expdiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expdiamond(), target);
  }

  // repeated .proto_ff.ComPair64 timeLimitExp = 5;
  for (int i = 0; i < this->timelimitexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->timelimitexp(i), target);
  }

  // repeated .proto_ff.vipGiftDBData vipGift = 6;
  for (int i = 0; i < this->vipgift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vipgift(i), target);
  }

  // optional .proto_ff.VipTCardData cardData = 7;
  if (has_carddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->carddata(), target);
  }

  // optional int64 cardLastTime = 8;
  if (has_cardlasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->cardlasttime(), target);
  }

  // optional int64 curAddVipExp = 9;
  if (has_curaddvipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->curaddvipexp(), target);
  }

  // optional int32 point = 10;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBVipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vipState = 1;
    if (has_vipstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipstate());
    }

    // optional uint64 vipExp = 2;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vipexp());
    }

    // optional uint64 getRewardTime = 3;
    if (has_getrewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->getrewardtime());
    }

    // optional uint64 expDiamond = 4;
    if (has_expdiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expdiamond());
    }

    // optional .proto_ff.VipTCardData cardData = 7;
    if (has_carddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carddata());
    }

    // optional int64 cardLastTime = 8;
    if (has_cardlasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cardlasttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 curAddVipExp = 9;
    if (has_curaddvipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curaddvipexp());
    }

    // optional int32 point = 10;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  // repeated .proto_ff.ComPair64 timeLimitExp = 5;
  total_size += 1 * this->timelimitexp_size();
  for (int i = 0; i < this->timelimitexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timelimitexp(i));
  }

  // repeated .proto_ff.vipGiftDBData vipGift = 6;
  total_size += 1 * this->vipgift_size();
  for (int i = 0; i < this->vipgift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipgift(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBVipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBVipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBVipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBVipData::MergeFrom(const CharacterDBVipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  timelimitexp_.MergeFrom(from.timelimitexp_);
  vipgift_.MergeFrom(from.vipgift_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipstate()) {
      set_vipstate(from.vipstate());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_getrewardtime()) {
      set_getrewardtime(from.getrewardtime());
    }
    if (from.has_expdiamond()) {
      set_expdiamond(from.expdiamond());
    }
    if (from.has_carddata()) {
      mutable_carddata()->::proto_ff::VipTCardData::MergeFrom(from.carddata());
    }
    if (from.has_cardlasttime()) {
      set_cardlasttime(from.cardlasttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curaddvipexp()) {
      set_curaddvipexp(from.curaddvipexp());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBVipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBVipData::CopyFrom(const CharacterDBVipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBVipData::IsInitialized() const {

  return true;
}

void CharacterDBVipData::Swap(CharacterDBVipData* other) {
  if (other != this) {
    std::swap(vipstate_, other->vipstate_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(getrewardtime_, other->getrewardtime_);
    std::swap(expdiamond_, other->expdiamond_);
    timelimitexp_.Swap(&other->timelimitexp_);
    vipgift_.Swap(&other->vipgift_);
    std::swap(carddata_, other->carddata_);
    std::swap(cardlasttime_, other->cardlasttime_);
    std::swap(curaddvipexp_, other->curaddvipexp_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBVipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBVipData_descriptor_;
  metadata.reflection = CharacterDBVipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMallData::kRefreshTimeFieldNumber;
const int CharacterDBMallData::kGoodsInfoFieldNumber;
const int CharacterDBMallData::kDailyRefreshTimeFieldNumber;
const int CharacterDBMallData::kRefreshNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBMallData::CharacterDBMallData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMallData::InitAsDefaultInstance() {
}

CharacterDBMallData::CharacterDBMallData(const CharacterDBMallData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMallData::SharedCtor() {
  _cached_size_ = 0;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  dailyrefreshtime_ = GOOGLE_ULONGLONG(0);
  refreshnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMallData::~CharacterDBMallData() {
  SharedDtor();
}

void CharacterDBMallData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMallData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMallData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMallData_descriptor_;
}

const CharacterDBMallData& CharacterDBMallData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBMallData* CharacterDBMallData::default_instance_ = NULL;

CharacterDBMallData* CharacterDBMallData::New() const {
  return new CharacterDBMallData;
}

void CharacterDBMallData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refreshtime_ = GOOGLE_ULONGLONG(0);
    dailyrefreshtime_ = GOOGLE_ULONGLONG(0);
    refreshnum_ = 0;
  }
  goodsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMallData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 refreshTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goodsInfo;
        break;
      }

      // repeated .proto_ff.ComPair64 goodsInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goodsInfo;
        if (input->ExpectTag(24)) goto parse_dailyRefreshTime;
        break;
      }

      // optional uint64 dailyRefreshTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dailyrefreshtime_)));
          set_has_dailyrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refreshNum;
        break;
      }

      // optional int32 refreshNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshnum_)));
          set_has_refreshnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMallData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 refreshTime = 1;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->refreshtime(), output);
  }

  // repeated .proto_ff.ComPair64 goodsInfo = 2;
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goodsinfo(i), output);
  }

  // optional uint64 dailyRefreshTime = 3;
  if (has_dailyrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dailyrefreshtime(), output);
  }

  // optional int32 refreshNum = 4;
  if (has_refreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refreshnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMallData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 refreshTime = 1;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->refreshtime(), target);
  }

  // repeated .proto_ff.ComPair64 goodsInfo = 2;
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goodsinfo(i), target);
  }

  // optional uint64 dailyRefreshTime = 3;
  if (has_dailyrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dailyrefreshtime(), target);
  }

  // optional int32 refreshNum = 4;
  if (has_refreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refreshnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMallData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 refreshTime = 1;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

    // optional uint64 dailyRefreshTime = 3;
    if (has_dailyrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dailyrefreshtime());
    }

    // optional int32 refreshNum = 4;
    if (has_refreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshnum());
    }

  }
  // repeated .proto_ff.ComPair64 goodsInfo = 2;
  total_size += 1 * this->goodsinfo_size();
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMallData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMallData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMallData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMallData::MergeFrom(const CharacterDBMallData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodsinfo_.MergeFrom(from.goodsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_dailyrefreshtime()) {
      set_dailyrefreshtime(from.dailyrefreshtime());
    }
    if (from.has_refreshnum()) {
      set_refreshnum(from.refreshnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMallData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMallData::CopyFrom(const CharacterDBMallData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMallData::IsInitialized() const {

  return true;
}

void CharacterDBMallData::Swap(CharacterDBMallData* other) {
  if (other != this) {
    std::swap(refreshtime_, other->refreshtime_);
    goodsinfo_.Swap(&other->goodsinfo_);
    std::swap(dailyrefreshtime_, other->dailyrefreshtime_);
    std::swap(refreshnum_, other->refreshnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMallData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMallData_descriptor_;
  metadata.reflection = CharacterDBMallData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodhoodSlot::kIdxFieldNumber;
const int GodhoodSlot::kOpenFieldNumber;
const int GodhoodSlot::kItemFieldNumber;
#endif  // !_MSC_VER

GodhoodSlot::GodhoodSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodhoodSlot::InitAsDefaultInstance() {
  item_ = const_cast< ::proto_ff::ItemProtoInfo*>(&::proto_ff::ItemProtoInfo::default_instance());
}

GodhoodSlot::GodhoodSlot(const GodhoodSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodhoodSlot::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  open_ = false;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodhoodSlot::~GodhoodSlot() {
  SharedDtor();
}

void GodhoodSlot::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void GodhoodSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodhoodSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodhoodSlot_descriptor_;
}

const GodhoodSlot& GodhoodSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

GodhoodSlot* GodhoodSlot::default_instance_ = NULL;

GodhoodSlot* GodhoodSlot::New() const {
  return new GodhoodSlot;
}

void GodhoodSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    open_ = false;
    if (has_item()) {
      if (item_ != NULL) item_->::proto_ff::ItemProtoInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodhoodSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }

      // optional bool open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .proto_ff.ItemProtoInfo item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodhoodSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional bool open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->open(), output);
  }

  // optional .proto_ff.ItemProtoInfo item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodhoodSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional bool open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->open(), target);
  }

  // optional .proto_ff.ItemProtoInfo item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodhoodSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional bool open = 2;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional .proto_ff.ItemProtoInfo item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodhoodSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodhoodSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodhoodSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodhoodSlot::MergeFrom(const GodhoodSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_item()) {
      mutable_item()->::proto_ff::ItemProtoInfo::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodhoodSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodhoodSlot::CopyFrom(const GodhoodSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodhoodSlot::IsInitialized() const {

  return true;
}

void GodhoodSlot::Swap(GodhoodSlot* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(open_, other->open_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodhoodSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodhoodSlot_descriptor_;
  metadata.reflection = GodhoodSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBGodhoodData::kGodhoodSlotFieldNumber;
#endif  // !_MSC_VER

CharacterDBGodhoodData::CharacterDBGodhoodData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBGodhoodData::InitAsDefaultInstance() {
}

CharacterDBGodhoodData::CharacterDBGodhoodData(const CharacterDBGodhoodData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBGodhoodData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBGodhoodData::~CharacterDBGodhoodData() {
  SharedDtor();
}

void CharacterDBGodhoodData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBGodhoodData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBGodhoodData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBGodhoodData_descriptor_;
}

const CharacterDBGodhoodData& CharacterDBGodhoodData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBGodhoodData* CharacterDBGodhoodData::default_instance_ = NULL;

CharacterDBGodhoodData* CharacterDBGodhoodData::New() const {
  return new CharacterDBGodhoodData;
}

void CharacterDBGodhoodData::Clear() {
  godhoodslot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBGodhoodData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GodhoodSlot godhoodSlot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godhoodSlot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godhoodslot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_godhoodSlot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBGodhoodData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GodhoodSlot godhoodSlot = 1;
  for (int i = 0; i < this->godhoodslot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->godhoodslot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBGodhoodData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GodhoodSlot godhoodSlot = 1;
  for (int i = 0; i < this->godhoodslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->godhoodslot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBGodhoodData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GodhoodSlot godhoodSlot = 1;
  total_size += 1 * this->godhoodslot_size();
  for (int i = 0; i < this->godhoodslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godhoodslot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBGodhoodData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBGodhoodData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBGodhoodData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBGodhoodData::MergeFrom(const CharacterDBGodhoodData& from) {
  GOOGLE_CHECK_NE(&from, this);
  godhoodslot_.MergeFrom(from.godhoodslot_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBGodhoodData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBGodhoodData::CopyFrom(const CharacterDBGodhoodData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBGodhoodData::IsInitialized() const {

  return true;
}

void CharacterDBGodhoodData::Swap(CharacterDBGodhoodData* other) {
  if (other != this) {
    godhoodslot_.Swap(&other->godhoodslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBGodhoodData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBGodhoodData_descriptor_;
  metadata.reflection = CharacterDBGodhoodData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoveryCompleteDBData::kLevelFieldNumber;
const int RecoveryCompleteDBData::kVipLevelFieldNumber;
const int RecoveryCompleteDBData::kTimeFieldNumber;
const int RecoveryCompleteDBData::kCompleteListFieldNumber;
const int RecoveryCompleteDBData::kFunUnlockFieldNumber;
#endif  // !_MSC_VER

RecoveryCompleteDBData::RecoveryCompleteDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoveryCompleteDBData::InitAsDefaultInstance() {
}

RecoveryCompleteDBData::RecoveryCompleteDBData(const RecoveryCompleteDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoveryCompleteDBData::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  viplevel_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoveryCompleteDBData::~RecoveryCompleteDBData() {
  SharedDtor();
}

void RecoveryCompleteDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoveryCompleteDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoveryCompleteDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoveryCompleteDBData_descriptor_;
}

const RecoveryCompleteDBData& RecoveryCompleteDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

RecoveryCompleteDBData* RecoveryCompleteDBData::default_instance_ = NULL;

RecoveryCompleteDBData* RecoveryCompleteDBData::New() const {
  return new RecoveryCompleteDBData;
}

void RecoveryCompleteDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    viplevel_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
  }
  completelist_.Clear();
  fununlock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoveryCompleteDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_completeList;
        break;
      }

      // repeated .proto_ff.ComPair completeList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_completeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_completeList;
        if (input->ExpectTag(42)) goto parse_funUnlock;
        break;
      }

      // repeated .proto_ff.ComPairBool funUnlock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_funUnlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fununlock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_funUnlock;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoveryCompleteDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 vipLevel = 2;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->viplevel(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // repeated .proto_ff.ComPair completeList = 4;
  for (int i = 0; i < this->completelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->completelist(i), output);
  }

  // repeated .proto_ff.ComPairBool funUnlock = 5;
  for (int i = 0; i < this->fununlock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fununlock(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoveryCompleteDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 vipLevel = 2;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->viplevel(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // repeated .proto_ff.ComPair completeList = 4;
  for (int i = 0; i < this->completelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->completelist(i), target);
  }

  // repeated .proto_ff.ComPairBool funUnlock = 5;
  for (int i = 0; i < this->fununlock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fununlock(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoveryCompleteDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated .proto_ff.ComPair completeList = 4;
  total_size += 1 * this->completelist_size();
  for (int i = 0; i < this->completelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completelist(i));
  }

  // repeated .proto_ff.ComPairBool funUnlock = 5;
  total_size += 1 * this->fununlock_size();
  for (int i = 0; i < this->fununlock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fununlock(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoveryCompleteDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoveryCompleteDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoveryCompleteDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoveryCompleteDBData::MergeFrom(const RecoveryCompleteDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  completelist_.MergeFrom(from.completelist_);
  fununlock_.MergeFrom(from.fununlock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoveryCompleteDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryCompleteDBData::CopyFrom(const RecoveryCompleteDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryCompleteDBData::IsInitialized() const {

  return true;
}

void RecoveryCompleteDBData::Swap(RecoveryCompleteDBData* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(time_, other->time_);
    completelist_.Swap(&other->completelist_);
    fununlock_.Swap(&other->fununlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoveryCompleteDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoveryCompleteDBData_descriptor_;
  metadata.reflection = RecoveryCompleteDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoveryDBReward::kGroupidFieldNumber;
const int RecoveryDBReward::kDay1CountMaxFieldNumber;
const int RecoveryDBReward::kDay2CountMaxFieldNumber;
const int RecoveryDBReward::kDay1VipCountMaxFieldNumber;
const int RecoveryDBReward::kDay2VipCountMaxFieldNumber;
const int RecoveryDBReward::kCommonCountFieldNumber;
const int RecoveryDBReward::kVipCountFieldNumber;
const int RecoveryDBReward::kGoldExpFieldNumber;
const int RecoveryDBReward::kDiamondsExpFieldNumber;
const int RecoveryDBReward::kGoldItemCountFieldNumber;
const int RecoveryDBReward::kDiamondsItemCountFieldNumber;
const int RecoveryDBReward::kNeedGoldFieldNumber;
const int RecoveryDBReward::kNeedDiamondsFieldNumber;
const int RecoveryDBReward::kItemIdFieldNumber;
const int RecoveryDBReward::kConfidFieldNumber;
#endif  // !_MSC_VER

RecoveryDBReward::RecoveryDBReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoveryDBReward::InitAsDefaultInstance() {
}

RecoveryDBReward::RecoveryDBReward(const RecoveryDBReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoveryDBReward::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  day1countmax_ = 0u;
  day2countmax_ = 0u;
  day1vipcountmax_ = 0u;
  day2vipcountmax_ = 0u;
  commoncount_ = 0u;
  vipcount_ = 0u;
  goldexp_ = 0u;
  diamondsexp_ = 0u;
  golditemcount_ = 0u;
  diamondsitemcount_ = 0u;
  needgold_ = 0u;
  needdiamonds_ = 0u;
  itemid_ = GOOGLE_ULONGLONG(0);
  confid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoveryDBReward::~RecoveryDBReward() {
  SharedDtor();
}

void RecoveryDBReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoveryDBReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoveryDBReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoveryDBReward_descriptor_;
}

const RecoveryDBReward& RecoveryDBReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

RecoveryDBReward* RecoveryDBReward::default_instance_ = NULL;

RecoveryDBReward* RecoveryDBReward::New() const {
  return new RecoveryDBReward;
}

void RecoveryDBReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    day1countmax_ = 0u;
    day2countmax_ = 0u;
    day1vipcountmax_ = 0u;
    day2vipcountmax_ = 0u;
    commoncount_ = 0u;
    vipcount_ = 0u;
    goldexp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    diamondsexp_ = 0u;
    golditemcount_ = 0u;
    diamondsitemcount_ = 0u;
    needgold_ = 0u;
    needdiamonds_ = 0u;
    itemid_ = GOOGLE_ULONGLONG(0);
    confid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoveryDBReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day1CountMax;
        break;
      }

      // optional uint32 day1CountMax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day1CountMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day1countmax_)));
          set_has_day1countmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day2CountMax;
        break;
      }

      // optional uint32 day2CountMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day2CountMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day2countmax_)));
          set_has_day2countmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_day1VipCountMax;
        break;
      }

      // optional uint32 day1VipCountMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day1VipCountMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day1vipcountmax_)));
          set_has_day1vipcountmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_day2VipCountMax;
        break;
      }

      // optional uint32 day2VipCountMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day2VipCountMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day2vipcountmax_)));
          set_has_day2vipcountmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_commonCount;
        break;
      }

      // optional uint32 commonCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commoncount_)));
          set_has_commoncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipCount;
        break;
      }

      // optional uint32 vipCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipcount_)));
          set_has_vipcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_goldExp;
        break;
      }

      // optional uint32 goldExp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldexp_)));
          set_has_goldexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_diamondsExp;
        break;
      }

      // optional uint32 diamondsExp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondsExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondsexp_)));
          set_has_diamondsexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_goldItemCount;
        break;
      }

      // optional uint32 goldItemCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &golditemcount_)));
          set_has_golditemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_diamondsItemCount;
        break;
      }

      // optional uint32 diamondsItemCount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondsItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondsitemcount_)));
          set_has_diamondsitemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_needGold;
        break;
      }

      // optional uint32 needGold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_needDiamonds;
        break;
      }

      // optional uint32 needDiamonds = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needDiamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needdiamonds_)));
          set_has_needdiamonds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ItemId;
        break;
      }

      // optional uint64 ItemId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_confid;
        break;
      }

      // optional uint32 confid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoveryDBReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional uint32 day1CountMax = 2;
  if (has_day1countmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day1countmax(), output);
  }

  // optional uint32 day2CountMax = 3;
  if (has_day2countmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day2countmax(), output);
  }

  // optional uint32 day1VipCountMax = 4;
  if (has_day1vipcountmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->day1vipcountmax(), output);
  }

  // optional uint32 day2VipCountMax = 5;
  if (has_day2vipcountmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->day2vipcountmax(), output);
  }

  // optional uint32 commonCount = 6;
  if (has_commoncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->commoncount(), output);
  }

  // optional uint32 vipCount = 7;
  if (has_vipcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vipcount(), output);
  }

  // optional uint32 goldExp = 8;
  if (has_goldexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->goldexp(), output);
  }

  // optional uint32 diamondsExp = 9;
  if (has_diamondsexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->diamondsexp(), output);
  }

  // optional uint32 goldItemCount = 10;
  if (has_golditemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->golditemcount(), output);
  }

  // optional uint32 diamondsItemCount = 11;
  if (has_diamondsitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->diamondsitemcount(), output);
  }

  // optional uint32 needGold = 12;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->needgold(), output);
  }

  // optional uint32 needDiamonds = 13;
  if (has_needdiamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->needdiamonds(), output);
  }

  // optional uint64 ItemId = 14;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->itemid(), output);
  }

  // optional uint32 confid = 15;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->confid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoveryDBReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional uint32 day1CountMax = 2;
  if (has_day1countmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->day1countmax(), target);
  }

  // optional uint32 day2CountMax = 3;
  if (has_day2countmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day2countmax(), target);
  }

  // optional uint32 day1VipCountMax = 4;
  if (has_day1vipcountmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->day1vipcountmax(), target);
  }

  // optional uint32 day2VipCountMax = 5;
  if (has_day2vipcountmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->day2vipcountmax(), target);
  }

  // optional uint32 commonCount = 6;
  if (has_commoncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->commoncount(), target);
  }

  // optional uint32 vipCount = 7;
  if (has_vipcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->vipcount(), target);
  }

  // optional uint32 goldExp = 8;
  if (has_goldexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->goldexp(), target);
  }

  // optional uint32 diamondsExp = 9;
  if (has_diamondsexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->diamondsexp(), target);
  }

  // optional uint32 goldItemCount = 10;
  if (has_golditemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->golditemcount(), target);
  }

  // optional uint32 diamondsItemCount = 11;
  if (has_diamondsitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->diamondsitemcount(), target);
  }

  // optional uint32 needGold = 12;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->needgold(), target);
  }

  // optional uint32 needDiamonds = 13;
  if (has_needdiamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->needdiamonds(), target);
  }

  // optional uint64 ItemId = 14;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->itemid(), target);
  }

  // optional uint32 confid = 15;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->confid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoveryDBReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 day1CountMax = 2;
    if (has_day1countmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day1countmax());
    }

    // optional uint32 day2CountMax = 3;
    if (has_day2countmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day2countmax());
    }

    // optional uint32 day1VipCountMax = 4;
    if (has_day1vipcountmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day1vipcountmax());
    }

    // optional uint32 day2VipCountMax = 5;
    if (has_day2vipcountmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day2vipcountmax());
    }

    // optional uint32 commonCount = 6;
    if (has_commoncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commoncount());
    }

    // optional uint32 vipCount = 7;
    if (has_vipcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipcount());
    }

    // optional uint32 goldExp = 8;
    if (has_goldexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldexp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 diamondsExp = 9;
    if (has_diamondsexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondsexp());
    }

    // optional uint32 goldItemCount = 10;
    if (has_golditemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->golditemcount());
    }

    // optional uint32 diamondsItemCount = 11;
    if (has_diamondsitemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondsitemcount());
    }

    // optional uint32 needGold = 12;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needgold());
    }

    // optional uint32 needDiamonds = 13;
    if (has_needdiamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needdiamonds());
    }

    // optional uint64 ItemId = 14;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 confid = 15;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoveryDBReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoveryDBReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoveryDBReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoveryDBReward::MergeFrom(const RecoveryDBReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_day1countmax()) {
      set_day1countmax(from.day1countmax());
    }
    if (from.has_day2countmax()) {
      set_day2countmax(from.day2countmax());
    }
    if (from.has_day1vipcountmax()) {
      set_day1vipcountmax(from.day1vipcountmax());
    }
    if (from.has_day2vipcountmax()) {
      set_day2vipcountmax(from.day2vipcountmax());
    }
    if (from.has_commoncount()) {
      set_commoncount(from.commoncount());
    }
    if (from.has_vipcount()) {
      set_vipcount(from.vipcount());
    }
    if (from.has_goldexp()) {
      set_goldexp(from.goldexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diamondsexp()) {
      set_diamondsexp(from.diamondsexp());
    }
    if (from.has_golditemcount()) {
      set_golditemcount(from.golditemcount());
    }
    if (from.has_diamondsitemcount()) {
      set_diamondsitemcount(from.diamondsitemcount());
    }
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_needdiamonds()) {
      set_needdiamonds(from.needdiamonds());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoveryDBReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryDBReward::CopyFrom(const RecoveryDBReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryDBReward::IsInitialized() const {

  return true;
}

void RecoveryDBReward::Swap(RecoveryDBReward* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(day1countmax_, other->day1countmax_);
    std::swap(day2countmax_, other->day2countmax_);
    std::swap(day1vipcountmax_, other->day1vipcountmax_);
    std::swap(day2vipcountmax_, other->day2vipcountmax_);
    std::swap(commoncount_, other->commoncount_);
    std::swap(vipcount_, other->vipcount_);
    std::swap(goldexp_, other->goldexp_);
    std::swap(diamondsexp_, other->diamondsexp_);
    std::swap(golditemcount_, other->golditemcount_);
    std::swap(diamondsitemcount_, other->diamondsitemcount_);
    std::swap(needgold_, other->needgold_);
    std::swap(needdiamonds_, other->needdiamonds_);
    std::swap(itemid_, other->itemid_);
    std::swap(confid_, other->confid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoveryDBReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoveryDBReward_descriptor_;
  metadata.reflection = RecoveryDBReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoveryDBData::kTimeFieldNumber;
const int RecoveryDBData::kListFieldNumber;
#endif  // !_MSC_VER

RecoveryDBData::RecoveryDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoveryDBData::InitAsDefaultInstance() {
}

RecoveryDBData::RecoveryDBData(const RecoveryDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoveryDBData::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoveryDBData::~RecoveryDBData() {
  SharedDtor();
}

void RecoveryDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoveryDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoveryDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoveryDBData_descriptor_;
}

const RecoveryDBData& RecoveryDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

RecoveryDBData* RecoveryDBData::default_instance_ = NULL;

RecoveryDBData* RecoveryDBData::New() const {
  return new RecoveryDBData;
}

void RecoveryDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoveryDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .proto_ff.RecoveryDBReward list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoveryDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // repeated .proto_ff.RecoveryDBReward list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoveryDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // repeated .proto_ff.RecoveryDBReward list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoveryDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated .proto_ff.RecoveryDBReward list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoveryDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoveryDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoveryDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoveryDBData::MergeFrom(const RecoveryDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoveryDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryDBData::CopyFrom(const RecoveryDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryDBData::IsInitialized() const {

  return true;
}

void RecoveryDBData::Swap(RecoveryDBData* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoveryDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoveryDBData_descriptor_;
  metadata.reflection = RecoveryDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBRecoveryData::kCompleteDBDataFieldNumber;
const int CharacterDBRecoveryData::kRecoveryDBDataFieldNumber;
#endif  // !_MSC_VER

CharacterDBRecoveryData::CharacterDBRecoveryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBRecoveryData::InitAsDefaultInstance() {
  recoverydbdata_ = const_cast< ::proto_ff::RecoveryDBData*>(&::proto_ff::RecoveryDBData::default_instance());
}

CharacterDBRecoveryData::CharacterDBRecoveryData(const CharacterDBRecoveryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBRecoveryData::SharedCtor() {
  _cached_size_ = 0;
  recoverydbdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBRecoveryData::~CharacterDBRecoveryData() {
  SharedDtor();
}

void CharacterDBRecoveryData::SharedDtor() {
  if (this != default_instance_) {
    delete recoverydbdata_;
  }
}

void CharacterDBRecoveryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBRecoveryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBRecoveryData_descriptor_;
}

const CharacterDBRecoveryData& CharacterDBRecoveryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBRecoveryData* CharacterDBRecoveryData::default_instance_ = NULL;

CharacterDBRecoveryData* CharacterDBRecoveryData::New() const {
  return new CharacterDBRecoveryData;
}

void CharacterDBRecoveryData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_recoverydbdata()) {
      if (recoverydbdata_ != NULL) recoverydbdata_->::proto_ff::RecoveryDBData::Clear();
    }
  }
  completedbdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBRecoveryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RecoveryCompleteDBData completeDBData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_completeDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completedbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_completeDBData;
        if (input->ExpectTag(18)) goto parse_recoveryDBData;
        break;
      }

      // optional .proto_ff.RecoveryDBData recoveryDBData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recoveryDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recoverydbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBRecoveryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RecoveryCompleteDBData completeDBData = 1;
  for (int i = 0; i < this->completedbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->completedbdata(i), output);
  }

  // optional .proto_ff.RecoveryDBData recoveryDBData = 2;
  if (has_recoverydbdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recoverydbdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBRecoveryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RecoveryCompleteDBData completeDBData = 1;
  for (int i = 0; i < this->completedbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->completedbdata(i), target);
  }

  // optional .proto_ff.RecoveryDBData recoveryDBData = 2;
  if (has_recoverydbdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recoverydbdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBRecoveryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto_ff.RecoveryDBData recoveryDBData = 2;
    if (has_recoverydbdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recoverydbdata());
    }

  }
  // repeated .proto_ff.RecoveryCompleteDBData completeDBData = 1;
  total_size += 1 * this->completedbdata_size();
  for (int i = 0; i < this->completedbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completedbdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBRecoveryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBRecoveryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBRecoveryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBRecoveryData::MergeFrom(const CharacterDBRecoveryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  completedbdata_.MergeFrom(from.completedbdata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_recoverydbdata()) {
      mutable_recoverydbdata()->::proto_ff::RecoveryDBData::MergeFrom(from.recoverydbdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBRecoveryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBRecoveryData::CopyFrom(const CharacterDBRecoveryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBRecoveryData::IsInitialized() const {

  return true;
}

void CharacterDBRecoveryData::Swap(CharacterDBRecoveryData* other) {
  if (other != this) {
    completedbdata_.Swap(&other->completedbdata_);
    std::swap(recoverydbdata_, other->recoverydbdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBRecoveryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBRecoveryData_descriptor_;
  metadata.reflection = CharacterDBRecoveryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBActivityScuffleData::kCurCfgIdFieldNumber;
const int CharacterDBActivityScuffleData::kCurPointsFieldNumber;
const int CharacterDBActivityScuffleData::kActivityIdFieldNumber;
const int CharacterDBActivityScuffleData::kBeforeMapIdFieldNumber;
const int CharacterDBActivityScuffleData::kBeforeMapPointFieldNumber;
const int CharacterDBActivityScuffleData::kLastTimeFieldNumber;
const int CharacterDBActivityScuffleData::kEndTimeFieldNumber;
const int CharacterDBActivityScuffleData::kKillNumFieldNumber;
const int CharacterDBActivityScuffleData::kLastKillNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBActivityScuffleData::CharacterDBActivityScuffleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBActivityScuffleData::InitAsDefaultInstance() {
  before_map_point_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

CharacterDBActivityScuffleData::CharacterDBActivityScuffleData(const CharacterDBActivityScuffleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBActivityScuffleData::SharedCtor() {
  _cached_size_ = 0;
  cur_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_points_ = 0;
  activity_id_ = GOOGLE_ULONGLONG(0);
  before_map_id_ = GOOGLE_ULONGLONG(0);
  before_map_point_ = NULL;
  last_time_ = 0;
  end_time_ = 0;
  kill_num_ = 0;
  last_kill_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBActivityScuffleData::~CharacterDBActivityScuffleData() {
  SharedDtor();
}

void CharacterDBActivityScuffleData::SharedDtor() {
  if (this != default_instance_) {
    delete before_map_point_;
  }
}

void CharacterDBActivityScuffleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBActivityScuffleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBActivityScuffleData_descriptor_;
}

const CharacterDBActivityScuffleData& CharacterDBActivityScuffleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBActivityScuffleData* CharacterDBActivityScuffleData::default_instance_ = NULL;

CharacterDBActivityScuffleData* CharacterDBActivityScuffleData::New() const {
  return new CharacterDBActivityScuffleData;
}

void CharacterDBActivityScuffleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_points_ = 0;
    activity_id_ = GOOGLE_ULONGLONG(0);
    before_map_id_ = GOOGLE_ULONGLONG(0);
    if (has_before_map_point()) {
      if (before_map_point_ != NULL) before_map_point_->::proto_ff::Vector3PB::Clear();
    }
    last_time_ = 0;
    end_time_ = 0;
    kill_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_kill_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBActivityScuffleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cur_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_cfg_id_)));
          set_has_cur_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_points;
        break;
      }

      // optional int32 cur_points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_points_)));
          set_has_cur_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activity_id;
        break;
      }

      // optional uint64 activity_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_before_map_id;
        break;
      }

      // optional uint64 before_map_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_before_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &before_map_id_)));
          set_has_before_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_before_map_point;
        break;
      }

      // optional .proto_ff.Vector3PB before_map_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_before_map_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_before_map_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_time;
        break;
      }

      // optional int32 last_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_kill_num;
        break;
      }

      // optional int32 kill_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_num_)));
          set_has_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_kill_num;
        break;
      }

      // optional int32 last_kill_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_kill_num_)));
          set_has_last_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBActivityScuffleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cur_cfg_id = 1;
  if (has_cur_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cur_cfg_id(), output);
  }

  // optional int32 cur_points = 2;
  if (has_cur_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_points(), output);
  }

  // optional uint64 activity_id = 3;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->activity_id(), output);
  }

  // optional uint64 before_map_id = 4;
  if (has_before_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->before_map_id(), output);
  }

  // optional .proto_ff.Vector3PB before_map_point = 5;
  if (has_before_map_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->before_map_point(), output);
  }

  // optional int32 last_time = 6;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->last_time(), output);
  }

  // optional int32 end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->end_time(), output);
  }

  // optional int32 kill_num = 8;
  if (has_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->kill_num(), output);
  }

  // optional int32 last_kill_num = 9;
  if (has_last_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->last_kill_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBActivityScuffleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cur_cfg_id = 1;
  if (has_cur_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cur_cfg_id(), target);
  }

  // optional int32 cur_points = 2;
  if (has_cur_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_points(), target);
  }

  // optional uint64 activity_id = 3;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->activity_id(), target);
  }

  // optional uint64 before_map_id = 4;
  if (has_before_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->before_map_id(), target);
  }

  // optional .proto_ff.Vector3PB before_map_point = 5;
  if (has_before_map_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->before_map_point(), target);
  }

  // optional int32 last_time = 6;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->last_time(), target);
  }

  // optional int32 end_time = 7;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->end_time(), target);
  }

  // optional int32 kill_num = 8;
  if (has_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->kill_num(), target);
  }

  // optional int32 last_kill_num = 9;
  if (has_last_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->last_kill_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBActivityScuffleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cur_cfg_id = 1;
    if (has_cur_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_cfg_id());
    }

    // optional int32 cur_points = 2;
    if (has_cur_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_points());
    }

    // optional uint64 activity_id = 3;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activity_id());
    }

    // optional uint64 before_map_id = 4;
    if (has_before_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->before_map_id());
    }

    // optional .proto_ff.Vector3PB before_map_point = 5;
    if (has_before_map_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->before_map_point());
    }

    // optional int32 last_time = 6;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_time());
    }

    // optional int32 end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

    // optional int32 kill_num = 8;
    if (has_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 last_kill_num = 9;
    if (has_last_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_kill_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBActivityScuffleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBActivityScuffleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBActivityScuffleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBActivityScuffleData::MergeFrom(const CharacterDBActivityScuffleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_cfg_id()) {
      set_cur_cfg_id(from.cur_cfg_id());
    }
    if (from.has_cur_points()) {
      set_cur_points(from.cur_points());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_before_map_id()) {
      set_before_map_id(from.before_map_id());
    }
    if (from.has_before_map_point()) {
      mutable_before_map_point()->::proto_ff::Vector3PB::MergeFrom(from.before_map_point());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_kill_num()) {
      set_kill_num(from.kill_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_kill_num()) {
      set_last_kill_num(from.last_kill_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBActivityScuffleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBActivityScuffleData::CopyFrom(const CharacterDBActivityScuffleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBActivityScuffleData::IsInitialized() const {

  return true;
}

void CharacterDBActivityScuffleData::Swap(CharacterDBActivityScuffleData* other) {
  if (other != this) {
    std::swap(cur_cfg_id_, other->cur_cfg_id_);
    std::swap(cur_points_, other->cur_points_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(before_map_id_, other->before_map_id_);
    std::swap(before_map_point_, other->before_map_point_);
    std::swap(last_time_, other->last_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(kill_num_, other->kill_num_);
    std::swap(last_kill_num_, other->last_kill_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBActivityScuffleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBActivityScuffleData_descriptor_;
  metadata.reflection = CharacterDBActivityScuffleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBActivityChaosDragonsData::kBeforeMapIdFieldNumber;
const int CharacterDBActivityChaosDragonsData::kBeforeMapPointFieldNumber;
#endif  // !_MSC_VER

CharacterDBActivityChaosDragonsData::CharacterDBActivityChaosDragonsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBActivityChaosDragonsData::InitAsDefaultInstance() {
  before_map_point_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

CharacterDBActivityChaosDragonsData::CharacterDBActivityChaosDragonsData(const CharacterDBActivityChaosDragonsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBActivityChaosDragonsData::SharedCtor() {
  _cached_size_ = 0;
  before_map_id_ = GOOGLE_ULONGLONG(0);
  before_map_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBActivityChaosDragonsData::~CharacterDBActivityChaosDragonsData() {
  SharedDtor();
}

void CharacterDBActivityChaosDragonsData::SharedDtor() {
  if (this != default_instance_) {
    delete before_map_point_;
  }
}

void CharacterDBActivityChaosDragonsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBActivityChaosDragonsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBActivityChaosDragonsData_descriptor_;
}

const CharacterDBActivityChaosDragonsData& CharacterDBActivityChaosDragonsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBActivityChaosDragonsData* CharacterDBActivityChaosDragonsData::default_instance_ = NULL;

CharacterDBActivityChaosDragonsData* CharacterDBActivityChaosDragonsData::New() const {
  return new CharacterDBActivityChaosDragonsData;
}

void CharacterDBActivityChaosDragonsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    before_map_id_ = GOOGLE_ULONGLONG(0);
    if (has_before_map_point()) {
      if (before_map_point_ != NULL) before_map_point_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBActivityChaosDragonsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 before_map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &before_map_id_)));
          set_has_before_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_before_map_point;
        break;
      }

      // optional .proto_ff.Vector3PB before_map_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_before_map_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_before_map_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBActivityChaosDragonsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 before_map_id = 1;
  if (has_before_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->before_map_id(), output);
  }

  // optional .proto_ff.Vector3PB before_map_point = 2;
  if (has_before_map_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->before_map_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBActivityChaosDragonsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 before_map_id = 1;
  if (has_before_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->before_map_id(), target);
  }

  // optional .proto_ff.Vector3PB before_map_point = 2;
  if (has_before_map_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->before_map_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBActivityChaosDragonsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 before_map_id = 1;
    if (has_before_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->before_map_id());
    }

    // optional .proto_ff.Vector3PB before_map_point = 2;
    if (has_before_map_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->before_map_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBActivityChaosDragonsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBActivityChaosDragonsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBActivityChaosDragonsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBActivityChaosDragonsData::MergeFrom(const CharacterDBActivityChaosDragonsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_before_map_id()) {
      set_before_map_id(from.before_map_id());
    }
    if (from.has_before_map_point()) {
      mutable_before_map_point()->::proto_ff::Vector3PB::MergeFrom(from.before_map_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBActivityChaosDragonsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBActivityChaosDragonsData::CopyFrom(const CharacterDBActivityChaosDragonsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBActivityChaosDragonsData::IsInitialized() const {

  return true;
}

void CharacterDBActivityChaosDragonsData::Swap(CharacterDBActivityChaosDragonsData* other) {
  if (other != this) {
    std::swap(before_map_id_, other->before_map_id_);
    std::swap(before_map_point_, other->before_map_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBActivityChaosDragonsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBActivityChaosDragonsData_descriptor_;
  metadata.reflection = CharacterDBActivityChaosDragonsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBActivityAsharmData::kStepFieldNumber;
const int CharacterDBActivityAsharmData::kEndTimeFieldNumber;
const int CharacterDBActivityAsharmData::kLastTimeFieldNumber;
const int CharacterDBActivityAsharmData::kCurNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBActivityAsharmData::CharacterDBActivityAsharmData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBActivityAsharmData::InitAsDefaultInstance() {
}

CharacterDBActivityAsharmData::CharacterDBActivityAsharmData(const CharacterDBActivityAsharmData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBActivityAsharmData::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0;
  end_time_ = GOOGLE_ULONGLONG(0);
  last_time_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBActivityAsharmData::~CharacterDBActivityAsharmData() {
  SharedDtor();
}

void CharacterDBActivityAsharmData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBActivityAsharmData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBActivityAsharmData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBActivityAsharmData_descriptor_;
}

const CharacterDBActivityAsharmData& CharacterDBActivityAsharmData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBActivityAsharmData* CharacterDBActivityAsharmData::default_instance_ = NULL;

CharacterDBActivityAsharmData* CharacterDBActivityAsharmData::New() const {
  return new CharacterDBActivityAsharmData;
}

void CharacterDBActivityAsharmData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_ = 0;
    end_time_ = GOOGLE_ULONGLONG(0);
    last_time_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBActivityAsharmData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBActivityAsharmData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step(), output);
  }

  // optional uint64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }

  // optional uint64 last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_time(), output);
  }

  // optional int32 cur_num = 4;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBActivityAsharmData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step(), target);
  }

  // optional uint64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }

  // optional uint64 last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_time(), target);
  }

  // optional int32 cur_num = 4;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBActivityAsharmData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 last_time = 3;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional int32 cur_num = 4;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBActivityAsharmData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBActivityAsharmData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBActivityAsharmData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBActivityAsharmData::MergeFrom(const CharacterDBActivityAsharmData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBActivityAsharmData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBActivityAsharmData::CopyFrom(const CharacterDBActivityAsharmData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBActivityAsharmData::IsInitialized() const {

  return true;
}

void CharacterDBActivityAsharmData::Swap(CharacterDBActivityAsharmData* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(end_time_, other->end_time_);
    std::swap(last_time_, other->last_time_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBActivityAsharmData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBActivityAsharmData_descriptor_;
  metadata.reflection = CharacterDBActivityAsharmData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBCombatTeamData::kTeamIdFieldNumber;
const int CharacterDBCombatTeamData::kTeamEndTimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBCombatTeamData::CharacterDBCombatTeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBCombatTeamData::InitAsDefaultInstance() {
}

CharacterDBCombatTeamData::CharacterDBCombatTeamData(const CharacterDBCombatTeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBCombatTeamData::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  team_end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBCombatTeamData::~CharacterDBCombatTeamData() {
  SharedDtor();
}

void CharacterDBCombatTeamData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBCombatTeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBCombatTeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBCombatTeamData_descriptor_;
}

const CharacterDBCombatTeamData& CharacterDBCombatTeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBCombatTeamData* CharacterDBCombatTeamData::default_instance_ = NULL;

CharacterDBCombatTeamData* CharacterDBCombatTeamData::New() const {
  return new CharacterDBCombatTeamData;
}

void CharacterDBCombatTeamData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
    team_end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBCombatTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_end_time;
        break;
      }

      // optional uint64 team_end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_end_time_)));
          set_has_team_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBCombatTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // optional uint64 team_end_time = 2;
  if (has_team_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBCombatTeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // optional uint64 team_end_time = 2;
  if (has_team_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBCombatTeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }

    // optional uint64 team_end_time = 2;
    if (has_team_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBCombatTeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBCombatTeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBCombatTeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBCombatTeamData::MergeFrom(const CharacterDBCombatTeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_end_time()) {
      set_team_end_time(from.team_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBCombatTeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBCombatTeamData::CopyFrom(const CharacterDBCombatTeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBCombatTeamData::IsInitialized() const {

  return true;
}

void CharacterDBCombatTeamData::Swap(CharacterDBCombatTeamData* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_end_time_, other->team_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBCombatTeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBCombatTeamData_descriptor_;
  metadata.reflection = CharacterDBCombatTeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSoloData::kRewardedJoinIndexFieldNumber;
const int CharacterDBSoloData::kMySoloNumFieldNumber;
const int CharacterDBSoloData::kRewardedStageIndexFieldNumber;
const int CharacterDBSoloData::kRewardedDayStageIndexFieldNumber;
const int CharacterDBSoloData::kSoloTimeEndFieldNumber;
const int CharacterDBSoloData::kSoloSeasonFieldNumber;
const int CharacterDBSoloData::kCurBuyNumFieldNumber;
const int CharacterDBSoloData::kLastTimeFieldNumber;
const int CharacterDBSoloData::kLoseNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBSoloData::CharacterDBSoloData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSoloData::InitAsDefaultInstance() {
}

CharacterDBSoloData::CharacterDBSoloData(const CharacterDBSoloData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSoloData::SharedCtor() {
  _cached_size_ = 0;
  my_solo_num_ = 0;
  solo_time_end_ = GOOGLE_ULONGLONG(0);
  solo_season_ = 0;
  cur_buy_num_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  lose_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSoloData::~CharacterDBSoloData() {
  SharedDtor();
}

void CharacterDBSoloData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSoloData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSoloData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSoloData_descriptor_;
}

const CharacterDBSoloData& CharacterDBSoloData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBSoloData* CharacterDBSoloData::default_instance_ = NULL;

CharacterDBSoloData* CharacterDBSoloData::New() const {
  return new CharacterDBSoloData;
}

void CharacterDBSoloData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    my_solo_num_ = 0;
    solo_time_end_ = GOOGLE_ULONGLONG(0);
    solo_season_ = 0;
    cur_buy_num_ = 0;
    last_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lose_num_ = 0;
  }
  rewarded_join_index_.Clear();
  rewarded_stage_index_.Clear();
  rewarded_day_stage_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSoloData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 rewarded_join_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewarded_join_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_rewarded_join_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewarded_join_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rewarded_join_index;
        if (input->ExpectTag(16)) goto parse_my_solo_num;
        break;
      }

      // optional int32 my_solo_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_solo_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_solo_num_)));
          set_has_my_solo_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewarded_stage_index;
        break;
      }

      // repeated int32 rewarded_stage_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewarded_stage_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_rewarded_stage_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewarded_stage_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewarded_stage_index;
        if (input->ExpectTag(32)) goto parse_rewarded_day_stage_index;
        break;
      }

      // repeated int32 rewarded_day_stage_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewarded_day_stage_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_rewarded_day_stage_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewarded_day_stage_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewarded_day_stage_index;
        if (input->ExpectTag(40)) goto parse_solo_time_end;
        break;
      }

      // optional uint64 solo_time_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo_time_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &solo_time_end_)));
          set_has_solo_time_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_solo_season;
        break;
      }

      // optional int32 solo_season = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solo_season_)));
          set_has_solo_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_buy_num;
        break;
      }

      // optional int32 cur_buy_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_buy_num_)));
          set_has_cur_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lose_num;
        break;
      }

      // optional int32 lose_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_num_)));
          set_has_lose_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSoloData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 rewarded_join_index = 1;
  for (int i = 0; i < this->rewarded_join_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->rewarded_join_index(i), output);
  }

  // optional int32 my_solo_num = 2;
  if (has_my_solo_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->my_solo_num(), output);
  }

  // repeated int32 rewarded_stage_index = 3;
  for (int i = 0; i < this->rewarded_stage_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->rewarded_stage_index(i), output);
  }

  // repeated int32 rewarded_day_stage_index = 4;
  for (int i = 0; i < this->rewarded_day_stage_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->rewarded_day_stage_index(i), output);
  }

  // optional uint64 solo_time_end = 5;
  if (has_solo_time_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->solo_time_end(), output);
  }

  // optional int32 solo_season = 6;
  if (has_solo_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->solo_season(), output);
  }

  // optional int32 cur_buy_num = 7;
  if (has_cur_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_buy_num(), output);
  }

  // optional uint64 last_time = 8;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_time(), output);
  }

  // optional int32 lose_num = 9;
  if (has_lose_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lose_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSoloData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 rewarded_join_index = 1;
  for (int i = 0; i < this->rewarded_join_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->rewarded_join_index(i), target);
  }

  // optional int32 my_solo_num = 2;
  if (has_my_solo_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->my_solo_num(), target);
  }

  // repeated int32 rewarded_stage_index = 3;
  for (int i = 0; i < this->rewarded_stage_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->rewarded_stage_index(i), target);
  }

  // repeated int32 rewarded_day_stage_index = 4;
  for (int i = 0; i < this->rewarded_day_stage_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->rewarded_day_stage_index(i), target);
  }

  // optional uint64 solo_time_end = 5;
  if (has_solo_time_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->solo_time_end(), target);
  }

  // optional int32 solo_season = 6;
  if (has_solo_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->solo_season(), target);
  }

  // optional int32 cur_buy_num = 7;
  if (has_cur_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_buy_num(), target);
  }

  // optional uint64 last_time = 8;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_time(), target);
  }

  // optional int32 lose_num = 9;
  if (has_lose_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lose_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSoloData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 my_solo_num = 2;
    if (has_my_solo_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_solo_num());
    }

    // optional uint64 solo_time_end = 5;
    if (has_solo_time_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->solo_time_end());
    }

    // optional int32 solo_season = 6;
    if (has_solo_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solo_season());
    }

    // optional int32 cur_buy_num = 7;
    if (has_cur_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_buy_num());
    }

    // optional uint64 last_time = 8;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lose_num = 9;
    if (has_lose_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_num());
    }

  }
  // repeated int32 rewarded_join_index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewarded_join_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewarded_join_index(i));
    }
    total_size += 1 * this->rewarded_join_index_size() + data_size;
  }

  // repeated int32 rewarded_stage_index = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewarded_stage_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewarded_stage_index(i));
    }
    total_size += 1 * this->rewarded_stage_index_size() + data_size;
  }

  // repeated int32 rewarded_day_stage_index = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewarded_day_stage_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewarded_day_stage_index(i));
    }
    total_size += 1 * this->rewarded_day_stage_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSoloData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSoloData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSoloData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSoloData::MergeFrom(const CharacterDBSoloData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarded_join_index_.MergeFrom(from.rewarded_join_index_);
  rewarded_stage_index_.MergeFrom(from.rewarded_stage_index_);
  rewarded_day_stage_index_.MergeFrom(from.rewarded_day_stage_index_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_my_solo_num()) {
      set_my_solo_num(from.my_solo_num());
    }
    if (from.has_solo_time_end()) {
      set_solo_time_end(from.solo_time_end());
    }
    if (from.has_solo_season()) {
      set_solo_season(from.solo_season());
    }
    if (from.has_cur_buy_num()) {
      set_cur_buy_num(from.cur_buy_num());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lose_num()) {
      set_lose_num(from.lose_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSoloData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSoloData::CopyFrom(const CharacterDBSoloData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSoloData::IsInitialized() const {

  return true;
}

void CharacterDBSoloData::Swap(CharacterDBSoloData* other) {
  if (other != this) {
    rewarded_join_index_.Swap(&other->rewarded_join_index_);
    std::swap(my_solo_num_, other->my_solo_num_);
    rewarded_stage_index_.Swap(&other->rewarded_stage_index_);
    rewarded_day_stage_index_.Swap(&other->rewarded_day_stage_index_);
    std::swap(solo_time_end_, other->solo_time_end_);
    std::swap(solo_season_, other->solo_season_);
    std::swap(cur_buy_num_, other->cur_buy_num_);
    std::swap(last_time_, other->last_time_);
    std::swap(lose_num_, other->lose_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSoloData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSoloData_descriptor_;
  metadata.reflection = CharacterDBSoloData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBAtBoxData::kUseCountFieldNumber;
const int CharacterDBAtBoxData::kTimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBAtBoxData::CharacterDBAtBoxData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBAtBoxData::InitAsDefaultInstance() {
}

CharacterDBAtBoxData::CharacterDBAtBoxData(const CharacterDBAtBoxData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBAtBoxData::SharedCtor() {
  _cached_size_ = 0;
  use_count_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBAtBoxData::~CharacterDBAtBoxData() {
  SharedDtor();
}

void CharacterDBAtBoxData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBAtBoxData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBAtBoxData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBAtBoxData_descriptor_;
}

const CharacterDBAtBoxData& CharacterDBAtBoxData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBAtBoxData* CharacterDBAtBoxData::default_instance_ = NULL;

CharacterDBAtBoxData* CharacterDBAtBoxData::New() const {
  return new CharacterDBAtBoxData;
}

void CharacterDBAtBoxData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    use_count_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBAtBoxData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 use_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_count_)));
          set_has_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBAtBoxData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 use_count = 1;
  if (has_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->use_count(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBAtBoxData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 use_count = 1;
  if (has_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->use_count(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBAtBoxData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 use_count = 1;
    if (has_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_count());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBAtBoxData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBAtBoxData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBAtBoxData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBAtBoxData::MergeFrom(const CharacterDBAtBoxData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_count()) {
      set_use_count(from.use_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBAtBoxData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBAtBoxData::CopyFrom(const CharacterDBAtBoxData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBAtBoxData::IsInitialized() const {

  return true;
}

void CharacterDBAtBoxData::Swap(CharacterDBAtBoxData* other) {
  if (other != this) {
    std::swap(use_count_, other->use_count_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBAtBoxData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBAtBoxData_descriptor_;
  metadata.reflection = CharacterDBAtBoxData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharDBAncientShopProto::kIdxFieldNumber;
const int CharDBAncientShopProto::kExchgeFieldNumber;
#endif  // !_MSC_VER

CharDBAncientShopProto::CharDBAncientShopProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharDBAncientShopProto::InitAsDefaultInstance() {
}

CharDBAncientShopProto::CharDBAncientShopProto(const CharDBAncientShopProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharDBAncientShopProto::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  exchge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharDBAncientShopProto::~CharDBAncientShopProto() {
  SharedDtor();
}

void CharDBAncientShopProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharDBAncientShopProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharDBAncientShopProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharDBAncientShopProto_descriptor_;
}

const CharDBAncientShopProto& CharDBAncientShopProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharDBAncientShopProto* CharDBAncientShopProto::default_instance_ = NULL;

CharDBAncientShopProto* CharDBAncientShopProto::New() const {
  return new CharDBAncientShopProto;
}

void CharDBAncientShopProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    exchge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharDBAncientShopProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exchge;
        break;
      }

      // optional int32 exchge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchge_)));
          set_has_exchge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharDBAncientShopProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // optional int32 exchge = 4;
  if (has_exchge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exchge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharDBAncientShopProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // optional int32 exchge = 4;
  if (has_exchge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exchge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharDBAncientShopProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 exchge = 4;
    if (has_exchge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharDBAncientShopProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharDBAncientShopProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharDBAncientShopProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharDBAncientShopProto::MergeFrom(const CharDBAncientShopProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_exchge()) {
      set_exchge(from.exchge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharDBAncientShopProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharDBAncientShopProto::CopyFrom(const CharDBAncientShopProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharDBAncientShopProto::IsInitialized() const {

  return true;
}

void CharDBAncientShopProto::Swap(CharDBAncientShopProto* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(exchge_, other->exchge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharDBAncientShopProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharDBAncientShopProto_descriptor_;
  metadata.reflection = CharDBAncientShopProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharDBAncientShopData::kInfoFieldNumber;
const int CharDBAncientShopData::kScoreFieldNumber;
const int CharDBAncientShopData::kScoreCntFieldNumber;
const int CharDBAncientShopData::kDiaCntFieldNumber;
const int CharDBAncientShopData::kFreeCntFieldNumber;
const int CharDBAncientShopData::kFreshTimeFieldNumber;
const int CharDBAncientShopData::kResetTimeFieldNumber;
#endif  // !_MSC_VER

CharDBAncientShopData::CharDBAncientShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharDBAncientShopData::InitAsDefaultInstance() {
}

CharDBAncientShopData::CharDBAncientShopData(const CharDBAncientShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharDBAncientShopData::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  score_cnt_ = 0;
  dia_cnt_ = 0;
  free_cnt_ = 0;
  fresh_time_ = GOOGLE_ULONGLONG(0);
  reset_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharDBAncientShopData::~CharDBAncientShopData() {
  SharedDtor();
}

void CharDBAncientShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharDBAncientShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharDBAncientShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharDBAncientShopData_descriptor_;
}

const CharDBAncientShopData& CharDBAncientShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharDBAncientShopData* CharDBAncientShopData::default_instance_ = NULL;

CharDBAncientShopData* CharDBAncientShopData::New() const {
  return new CharDBAncientShopData;
}

void CharDBAncientShopData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
    score_cnt_ = 0;
    dia_cnt_ = 0;
    free_cnt_ = 0;
    fresh_time_ = GOOGLE_ULONGLONG(0);
    reset_time_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharDBAncientShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharDBAncientShopProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score_cnt;
        break;
      }

      // optional int32 score_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_cnt_)));
          set_has_score_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dia_cnt;
        break;
      }

      // optional int32 dia_cnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dia_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dia_cnt_)));
          set_has_dia_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_free_cnt;
        break;
      }

      // optional int32 free_cnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_cnt_)));
          set_has_free_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fresh_time;
        break;
      }

      // optional uint64 fresh_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fresh_time_)));
          set_has_fresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reset_time;
        break;
      }

      // optional uint64 reset_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reset_time_)));
          set_has_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharDBAncientShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharDBAncientShopProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  // optional int32 score_cnt = 3;
  if (has_score_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score_cnt(), output);
  }

  // optional int32 dia_cnt = 4;
  if (has_dia_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dia_cnt(), output);
  }

  // optional int32 free_cnt = 5;
  if (has_free_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->free_cnt(), output);
  }

  // optional uint64 fresh_time = 6;
  if (has_fresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fresh_time(), output);
  }

  // optional uint64 reset_time = 7;
  if (has_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->reset_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharDBAncientShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharDBAncientShopProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  // optional int32 score_cnt = 3;
  if (has_score_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score_cnt(), target);
  }

  // optional int32 dia_cnt = 4;
  if (has_dia_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dia_cnt(), target);
  }

  // optional int32 free_cnt = 5;
  if (has_free_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->free_cnt(), target);
  }

  // optional uint64 fresh_time = 6;
  if (has_fresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fresh_time(), target);
  }

  // optional uint64 reset_time = 7;
  if (has_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->reset_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharDBAncientShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int32 score_cnt = 3;
    if (has_score_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_cnt());
    }

    // optional int32 dia_cnt = 4;
    if (has_dia_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dia_cnt());
    }

    // optional int32 free_cnt = 5;
    if (has_free_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_cnt());
    }

    // optional uint64 fresh_time = 6;
    if (has_fresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fresh_time());
    }

    // optional uint64 reset_time = 7;
    if (has_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reset_time());
    }

  }
  // repeated .proto_ff.CharDBAncientShopProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharDBAncientShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharDBAncientShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharDBAncientShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharDBAncientShopData::MergeFrom(const CharDBAncientShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_score_cnt()) {
      set_score_cnt(from.score_cnt());
    }
    if (from.has_dia_cnt()) {
      set_dia_cnt(from.dia_cnt());
    }
    if (from.has_free_cnt()) {
      set_free_cnt(from.free_cnt());
    }
    if (from.has_fresh_time()) {
      set_fresh_time(from.fresh_time());
    }
    if (from.has_reset_time()) {
      set_reset_time(from.reset_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharDBAncientShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharDBAncientShopData::CopyFrom(const CharDBAncientShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharDBAncientShopData::IsInitialized() const {

  return true;
}

void CharDBAncientShopData::Swap(CharDBAncientShopData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(score_, other->score_);
    std::swap(score_cnt_, other->score_cnt_);
    std::swap(dia_cnt_, other->dia_cnt_);
    std::swap(free_cnt_, other->free_cnt_);
    std::swap(fresh_time_, other->fresh_time_);
    std::swap(reset_time_, other->reset_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharDBAncientShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharDBAncientShopData_descriptor_;
  metadata.reflection = CharDBAncientShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBAncientData::kBlessValueFieldNumber;
const int CharacterDBAncientData::kScoreIncrFieldNumber;
const int CharacterDBAncientData::kShopFieldNumber;
const int CharacterDBAncientData::kBlessResetTimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBAncientData::CharacterDBAncientData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBAncientData::InitAsDefaultInstance() {
  shop_ = const_cast< ::proto_ff::CharDBAncientShopData*>(&::proto_ff::CharDBAncientShopData::default_instance());
}

CharacterDBAncientData::CharacterDBAncientData(const CharacterDBAncientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBAncientData::SharedCtor() {
  _cached_size_ = 0;
  bless_value_ = GOOGLE_LONGLONG(0);
  score_incr_ = GOOGLE_LONGLONG(0);
  shop_ = NULL;
  bless_reset_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBAncientData::~CharacterDBAncientData() {
  SharedDtor();
}

void CharacterDBAncientData::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
  }
}

void CharacterDBAncientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBAncientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBAncientData_descriptor_;
}

const CharacterDBAncientData& CharacterDBAncientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBAncientData* CharacterDBAncientData::default_instance_ = NULL;

CharacterDBAncientData* CharacterDBAncientData::New() const {
  return new CharacterDBAncientData;
}

void CharacterDBAncientData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bless_value_ = GOOGLE_LONGLONG(0);
    score_incr_ = GOOGLE_LONGLONG(0);
    if (has_shop()) {
      if (shop_ != NULL) shop_->::proto_ff::CharDBAncientShopData::Clear();
    }
    bless_reset_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBAncientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bless_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bless_value_)));
          set_has_bless_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score_incr;
        break;
      }

      // optional int64 score_incr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_incr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_incr_)));
          set_has_score_incr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shop;
        break;
      }

      // optional .proto_ff.CharDBAncientShopData shop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bless_reset_time;
        break;
      }

      // optional uint64 bless_reset_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bless_reset_time_)));
          set_has_bless_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBAncientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 bless_value = 1;
  if (has_bless_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bless_value(), output);
  }

  // optional int64 score_incr = 2;
  if (has_score_incr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score_incr(), output);
  }

  // optional .proto_ff.CharDBAncientShopData shop = 3;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shop(), output);
  }

  // optional uint64 bless_reset_time = 4;
  if (has_bless_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bless_reset_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBAncientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 bless_value = 1;
  if (has_bless_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bless_value(), target);
  }

  // optional int64 score_incr = 2;
  if (has_score_incr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score_incr(), target);
  }

  // optional .proto_ff.CharDBAncientShopData shop = 3;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shop(), target);
  }

  // optional uint64 bless_reset_time = 4;
  if (has_bless_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bless_reset_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBAncientData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 bless_value = 1;
    if (has_bless_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bless_value());
    }

    // optional int64 score_incr = 2;
    if (has_score_incr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score_incr());
    }

    // optional .proto_ff.CharDBAncientShopData shop = 3;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

    // optional uint64 bless_reset_time = 4;
    if (has_bless_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bless_reset_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBAncientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBAncientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBAncientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBAncientData::MergeFrom(const CharacterDBAncientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bless_value()) {
      set_bless_value(from.bless_value());
    }
    if (from.has_score_incr()) {
      set_score_incr(from.score_incr());
    }
    if (from.has_shop()) {
      mutable_shop()->::proto_ff::CharDBAncientShopData::MergeFrom(from.shop());
    }
    if (from.has_bless_reset_time()) {
      set_bless_reset_time(from.bless_reset_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBAncientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBAncientData::CopyFrom(const CharacterDBAncientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBAncientData::IsInitialized() const {

  return true;
}

void CharacterDBAncientData::Swap(CharacterDBAncientData* other) {
  if (other != this) {
    std::swap(bless_value_, other->bless_value_);
    std::swap(score_incr_, other->score_incr_);
    std::swap(shop_, other->shop_);
    std::swap(bless_reset_time_, other->bless_reset_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBAncientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBAncientData_descriptor_;
  metadata.reflection = CharacterDBAncientData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChooseGiftData::kActiveTimeFieldNumber;
const int ChooseGiftData::kHeadStateFieldNumber;
const int ChooseGiftData::kRechargeIndexFieldNumber;
const int ChooseGiftData::kRechargeIndexStateFieldNumber;
#endif  // !_MSC_VER

ChooseGiftData::ChooseGiftData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChooseGiftData::InitAsDefaultInstance() {
}

ChooseGiftData::ChooseGiftData(const ChooseGiftData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChooseGiftData::SharedCtor() {
  _cached_size_ = 0;
  activetime_ = GOOGLE_ULONGLONG(0);
  headstate_ = 0;
  rechargeindex_ = 0;
  rechargeindexstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChooseGiftData::~ChooseGiftData() {
  SharedDtor();
}

void ChooseGiftData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChooseGiftData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChooseGiftData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChooseGiftData_descriptor_;
}

const ChooseGiftData& ChooseGiftData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ChooseGiftData* ChooseGiftData::default_instance_ = NULL;

ChooseGiftData* ChooseGiftData::New() const {
  return new ChooseGiftData;
}

void ChooseGiftData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activetime_ = GOOGLE_ULONGLONG(0);
    headstate_ = 0;
    rechargeindex_ = 0;
    rechargeindexstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChooseGiftData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activetime_)));
          set_has_activetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_headState;
        break;
      }

      // optional int32 headState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headstate_)));
          set_has_headstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rechargeIndex;
        break;
      }

      // optional int32 rechargeIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargeindex_)));
          set_has_rechargeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rechargeIndexState;
        break;
      }

      // optional int32 rechargeIndexState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeIndexState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargeindexstate_)));
          set_has_rechargeindexstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChooseGiftData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeTime = 1;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activetime(), output);
  }

  // optional int32 headState = 2;
  if (has_headstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->headstate(), output);
  }

  // optional int32 rechargeIndex = 3;
  if (has_rechargeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rechargeindex(), output);
  }

  // optional int32 rechargeIndexState = 4;
  if (has_rechargeindexstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rechargeindexstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChooseGiftData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeTime = 1;
  if (has_activetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activetime(), target);
  }

  // optional int32 headState = 2;
  if (has_headstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->headstate(), target);
  }

  // optional int32 rechargeIndex = 3;
  if (has_rechargeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rechargeindex(), target);
  }

  // optional int32 rechargeIndexState = 4;
  if (has_rechargeindexstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rechargeindexstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChooseGiftData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeTime = 1;
    if (has_activetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activetime());
    }

    // optional int32 headState = 2;
    if (has_headstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headstate());
    }

    // optional int32 rechargeIndex = 3;
    if (has_rechargeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargeindex());
    }

    // optional int32 rechargeIndexState = 4;
    if (has_rechargeindexstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargeindexstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChooseGiftData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChooseGiftData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChooseGiftData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChooseGiftData::MergeFrom(const ChooseGiftData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activetime()) {
      set_activetime(from.activetime());
    }
    if (from.has_headstate()) {
      set_headstate(from.headstate());
    }
    if (from.has_rechargeindex()) {
      set_rechargeindex(from.rechargeindex());
    }
    if (from.has_rechargeindexstate()) {
      set_rechargeindexstate(from.rechargeindexstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChooseGiftData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseGiftData::CopyFrom(const ChooseGiftData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseGiftData::IsInitialized() const {

  return true;
}

void ChooseGiftData::Swap(ChooseGiftData* other) {
  if (other != this) {
    std::swap(activetime_, other->activetime_);
    std::swap(headstate_, other->headstate_);
    std::swap(rechargeindex_, other->rechargeindex_);
    std::swap(rechargeindexstate_, other->rechargeindexstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChooseGiftData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChooseGiftData_descriptor_;
  metadata.reflection = ChooseGiftData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBActivityData::kScuffleCrossDataFieldNumber;
const int CharacterDBActivityData::kScuffleLocalDataFieldNumber;
const int CharacterDBActivityData::kChaosDragonsDataFieldNumber;
const int CharacterDBActivityData::kAsharmDataFieldNumber;
const int CharacterDBActivityData::kSoloDataFieldNumber;
const int CharacterDBActivityData::kBoxDataFieldNumber;
const int CharacterDBActivityData::kAncientDataFieldNumber;
const int CharacterDBActivityData::kChoosegiftDataFieldNumber;
#endif  // !_MSC_VER

CharacterDBActivityData::CharacterDBActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBActivityData::InitAsDefaultInstance() {
  scuffle_cross_data_ = const_cast< ::proto_ff::CharacterDBActivityScuffleData*>(&::proto_ff::CharacterDBActivityScuffleData::default_instance());
  scuffle_local_data_ = const_cast< ::proto_ff::CharacterDBActivityScuffleData*>(&::proto_ff::CharacterDBActivityScuffleData::default_instance());
  chaos_dragons_data_ = const_cast< ::proto_ff::CharacterDBActivityChaosDragonsData*>(&::proto_ff::CharacterDBActivityChaosDragonsData::default_instance());
  asharm_data_ = const_cast< ::proto_ff::CharacterDBActivityAsharmData*>(&::proto_ff::CharacterDBActivityAsharmData::default_instance());
  solo_data_ = const_cast< ::proto_ff::CharacterDBSoloData*>(&::proto_ff::CharacterDBSoloData::default_instance());
  box_data_ = const_cast< ::proto_ff::CharacterDBAtBoxData*>(&::proto_ff::CharacterDBAtBoxData::default_instance());
  ancient_data_ = const_cast< ::proto_ff::CharacterDBAncientData*>(&::proto_ff::CharacterDBAncientData::default_instance());
  choosegift_data_ = const_cast< ::proto_ff::ChooseGiftData*>(&::proto_ff::ChooseGiftData::default_instance());
}

CharacterDBActivityData::CharacterDBActivityData(const CharacterDBActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBActivityData::SharedCtor() {
  _cached_size_ = 0;
  scuffle_cross_data_ = NULL;
  scuffle_local_data_ = NULL;
  chaos_dragons_data_ = NULL;
  asharm_data_ = NULL;
  solo_data_ = NULL;
  box_data_ = NULL;
  ancient_data_ = NULL;
  choosegift_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBActivityData::~CharacterDBActivityData() {
  SharedDtor();
}

void CharacterDBActivityData::SharedDtor() {
  if (this != default_instance_) {
    delete scuffle_cross_data_;
    delete scuffle_local_data_;
    delete chaos_dragons_data_;
    delete asharm_data_;
    delete solo_data_;
    delete box_data_;
    delete ancient_data_;
    delete choosegift_data_;
  }
}

void CharacterDBActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBActivityData_descriptor_;
}

const CharacterDBActivityData& CharacterDBActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBActivityData* CharacterDBActivityData::default_instance_ = NULL;

CharacterDBActivityData* CharacterDBActivityData::New() const {
  return new CharacterDBActivityData;
}

void CharacterDBActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scuffle_cross_data()) {
      if (scuffle_cross_data_ != NULL) scuffle_cross_data_->::proto_ff::CharacterDBActivityScuffleData::Clear();
    }
    if (has_scuffle_local_data()) {
      if (scuffle_local_data_ != NULL) scuffle_local_data_->::proto_ff::CharacterDBActivityScuffleData::Clear();
    }
    if (has_chaos_dragons_data()) {
      if (chaos_dragons_data_ != NULL) chaos_dragons_data_->::proto_ff::CharacterDBActivityChaosDragonsData::Clear();
    }
    if (has_asharm_data()) {
      if (asharm_data_ != NULL) asharm_data_->::proto_ff::CharacterDBActivityAsharmData::Clear();
    }
    if (has_solo_data()) {
      if (solo_data_ != NULL) solo_data_->::proto_ff::CharacterDBSoloData::Clear();
    }
    if (has_box_data()) {
      if (box_data_ != NULL) box_data_->::proto_ff::CharacterDBAtBoxData::Clear();
    }
    if (has_ancient_data()) {
      if (ancient_data_ != NULL) ancient_data_->::proto_ff::CharacterDBAncientData::Clear();
    }
    if (has_choosegift_data()) {
      if (choosegift_data_ != NULL) choosegift_data_->::proto_ff::ChooseGiftData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CharacterDBActivityScuffleData scuffle_cross_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scuffle_cross_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scuffle_local_data;
        break;
      }

      // optional .proto_ff.CharacterDBActivityScuffleData scuffle_local_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scuffle_local_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scuffle_local_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chaos_dragons_data;
        break;
      }

      // optional .proto_ff.CharacterDBActivityChaosDragonsData chaos_dragons_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chaos_dragons_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chaos_dragons_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_asharm_data;
        break;
      }

      // optional .proto_ff.CharacterDBActivityAsharmData asharm_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_asharm_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asharm_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_solo_data;
        break;
      }

      // optional .proto_ff.CharacterDBSoloData solo_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solo_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solo_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_box_data;
        break;
      }

      // optional .proto_ff.CharacterDBAtBoxData box_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_box_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ancient_data;
        break;
      }

      // optional .proto_ff.CharacterDBAncientData ancient_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ancient_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ancient_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_choosegift_data;
        break;
      }

      // optional .proto_ff.ChooseGiftData choosegift_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_choosegift_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_choosegift_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CharacterDBActivityScuffleData scuffle_cross_data = 1;
  if (has_scuffle_cross_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scuffle_cross_data(), output);
  }

  // optional .proto_ff.CharacterDBActivityScuffleData scuffle_local_data = 2;
  if (has_scuffle_local_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scuffle_local_data(), output);
  }

  // optional .proto_ff.CharacterDBActivityChaosDragonsData chaos_dragons_data = 3;
  if (has_chaos_dragons_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chaos_dragons_data(), output);
  }

  // optional .proto_ff.CharacterDBActivityAsharmData asharm_data = 4;
  if (has_asharm_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->asharm_data(), output);
  }

  // optional .proto_ff.CharacterDBSoloData solo_data = 5;
  if (has_solo_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->solo_data(), output);
  }

  // optional .proto_ff.CharacterDBAtBoxData box_data = 6;
  if (has_box_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->box_data(), output);
  }

  // optional .proto_ff.CharacterDBAncientData ancient_data = 7;
  if (has_ancient_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ancient_data(), output);
  }

  // optional .proto_ff.ChooseGiftData choosegift_data = 8;
  if (has_choosegift_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->choosegift_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CharacterDBActivityScuffleData scuffle_cross_data = 1;
  if (has_scuffle_cross_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scuffle_cross_data(), target);
  }

  // optional .proto_ff.CharacterDBActivityScuffleData scuffle_local_data = 2;
  if (has_scuffle_local_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scuffle_local_data(), target);
  }

  // optional .proto_ff.CharacterDBActivityChaosDragonsData chaos_dragons_data = 3;
  if (has_chaos_dragons_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chaos_dragons_data(), target);
  }

  // optional .proto_ff.CharacterDBActivityAsharmData asharm_data = 4;
  if (has_asharm_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->asharm_data(), target);
  }

  // optional .proto_ff.CharacterDBSoloData solo_data = 5;
  if (has_solo_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->solo_data(), target);
  }

  // optional .proto_ff.CharacterDBAtBoxData box_data = 6;
  if (has_box_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->box_data(), target);
  }

  // optional .proto_ff.CharacterDBAncientData ancient_data = 7;
  if (has_ancient_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ancient_data(), target);
  }

  // optional .proto_ff.ChooseGiftData choosegift_data = 8;
  if (has_choosegift_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->choosegift_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CharacterDBActivityScuffleData scuffle_cross_data = 1;
    if (has_scuffle_cross_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scuffle_cross_data());
    }

    // optional .proto_ff.CharacterDBActivityScuffleData scuffle_local_data = 2;
    if (has_scuffle_local_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scuffle_local_data());
    }

    // optional .proto_ff.CharacterDBActivityChaosDragonsData chaos_dragons_data = 3;
    if (has_chaos_dragons_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chaos_dragons_data());
    }

    // optional .proto_ff.CharacterDBActivityAsharmData asharm_data = 4;
    if (has_asharm_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asharm_data());
    }

    // optional .proto_ff.CharacterDBSoloData solo_data = 5;
    if (has_solo_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solo_data());
    }

    // optional .proto_ff.CharacterDBAtBoxData box_data = 6;
    if (has_box_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_data());
    }

    // optional .proto_ff.CharacterDBAncientData ancient_data = 7;
    if (has_ancient_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ancient_data());
    }

    // optional .proto_ff.ChooseGiftData choosegift_data = 8;
    if (has_choosegift_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->choosegift_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBActivityData::MergeFrom(const CharacterDBActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scuffle_cross_data()) {
      mutable_scuffle_cross_data()->::proto_ff::CharacterDBActivityScuffleData::MergeFrom(from.scuffle_cross_data());
    }
    if (from.has_scuffle_local_data()) {
      mutable_scuffle_local_data()->::proto_ff::CharacterDBActivityScuffleData::MergeFrom(from.scuffle_local_data());
    }
    if (from.has_chaos_dragons_data()) {
      mutable_chaos_dragons_data()->::proto_ff::CharacterDBActivityChaosDragonsData::MergeFrom(from.chaos_dragons_data());
    }
    if (from.has_asharm_data()) {
      mutable_asharm_data()->::proto_ff::CharacterDBActivityAsharmData::MergeFrom(from.asharm_data());
    }
    if (from.has_solo_data()) {
      mutable_solo_data()->::proto_ff::CharacterDBSoloData::MergeFrom(from.solo_data());
    }
    if (from.has_box_data()) {
      mutable_box_data()->::proto_ff::CharacterDBAtBoxData::MergeFrom(from.box_data());
    }
    if (from.has_ancient_data()) {
      mutable_ancient_data()->::proto_ff::CharacterDBAncientData::MergeFrom(from.ancient_data());
    }
    if (from.has_choosegift_data()) {
      mutable_choosegift_data()->::proto_ff::ChooseGiftData::MergeFrom(from.choosegift_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBActivityData::CopyFrom(const CharacterDBActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBActivityData::IsInitialized() const {

  return true;
}

void CharacterDBActivityData::Swap(CharacterDBActivityData* other) {
  if (other != this) {
    std::swap(scuffle_cross_data_, other->scuffle_cross_data_);
    std::swap(scuffle_local_data_, other->scuffle_local_data_);
    std::swap(chaos_dragons_data_, other->chaos_dragons_data_);
    std::swap(asharm_data_, other->asharm_data_);
    std::swap(solo_data_, other->solo_data_);
    std::swap(box_data_, other->box_data_);
    std::swap(ancient_data_, other->ancient_data_);
    std::swap(choosegift_data_, other->choosegift_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBActivityData_descriptor_;
  metadata.reflection = CharacterDBActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SOAcitveTotalRechargeData::kActiveIdFieldNumber;
const int SOAcitveTotalRechargeData::kPageIdFieldNumber;
const int SOAcitveTotalRechargeData::kRechargeValueFieldNumber;
const int SOAcitveTotalRechargeData::kGetStateFieldNumber;
const int SOAcitveTotalRechargeData::kRechargeholyFieldNumber;
#endif  // !_MSC_VER

SOAcitveTotalRechargeData::SOAcitveTotalRechargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SOAcitveTotalRechargeData::InitAsDefaultInstance() {
}

SOAcitveTotalRechargeData::SOAcitveTotalRechargeData(const SOAcitveTotalRechargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SOAcitveTotalRechargeData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  pageid_ = 0u;
  rechargevalue_ = GOOGLE_ULONGLONG(0);
  rechargeholy_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SOAcitveTotalRechargeData::~SOAcitveTotalRechargeData() {
  SharedDtor();
}

void SOAcitveTotalRechargeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SOAcitveTotalRechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SOAcitveTotalRechargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SOAcitveTotalRechargeData_descriptor_;
}

const SOAcitveTotalRechargeData& SOAcitveTotalRechargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

SOAcitveTotalRechargeData* SOAcitveTotalRechargeData::default_instance_ = NULL;

SOAcitveTotalRechargeData* SOAcitveTotalRechargeData::New() const {
  return new SOAcitveTotalRechargeData;
}

void SOAcitveTotalRechargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    pageid_ = 0u;
    rechargevalue_ = GOOGLE_ULONGLONG(0);
    rechargeholy_ = GOOGLE_ULONGLONG(0);
  }
  getstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SOAcitveTotalRechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pageId;
        break;
      }

      // optional uint32 pageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageid_)));
          set_has_pageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rechargeValue;
        break;
      }

      // optional uint64 rechargeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rechargevalue_)));
          set_has_rechargevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        if (input->ExpectTag(40)) goto parse_rechargeholy;
        break;
      }

      // optional uint64 rechargeholy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeholy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rechargeholy_)));
          set_has_rechargeholy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SOAcitveTotalRechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint32 pageId = 2;
  if (has_pageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pageid(), output);
  }

  // optional uint64 rechargeValue = 3;
  if (has_rechargevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rechargevalue(), output);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->getstate(i), output);
  }

  // optional uint64 rechargeholy = 5;
  if (has_rechargeholy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rechargeholy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SOAcitveTotalRechargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint32 pageId = 2;
  if (has_pageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pageid(), target);
  }

  // optional uint64 rechargeValue = 3;
  if (has_rechargevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rechargevalue(), target);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->getstate(i), target);
  }

  // optional uint64 rechargeholy = 5;
  if (has_rechargeholy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rechargeholy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SOAcitveTotalRechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint32 pageId = 2;
    if (has_pageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageid());
    }

    // optional uint64 rechargeValue = 3;
    if (has_rechargevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rechargevalue());
    }

    // optional uint64 rechargeholy = 5;
    if (has_rechargeholy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rechargeholy());
    }

  }
  // repeated .proto_ff.ComPair getState = 4;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SOAcitveTotalRechargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SOAcitveTotalRechargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SOAcitveTotalRechargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SOAcitveTotalRechargeData::MergeFrom(const SOAcitveTotalRechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_pageid()) {
      set_pageid(from.pageid());
    }
    if (from.has_rechargevalue()) {
      set_rechargevalue(from.rechargevalue());
    }
    if (from.has_rechargeholy()) {
      set_rechargeholy(from.rechargeholy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SOAcitveTotalRechargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOAcitveTotalRechargeData::CopyFrom(const SOAcitveTotalRechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOAcitveTotalRechargeData::IsInitialized() const {

  return true;
}

void SOAcitveTotalRechargeData::Swap(SOAcitveTotalRechargeData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(pageid_, other->pageid_);
    std::swap(rechargevalue_, other->rechargevalue_);
    getstate_.Swap(&other->getstate_);
    std::swap(rechargeholy_, other->rechargeholy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SOAcitveTotalRechargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SOAcitveTotalRechargeData_descriptor_;
  metadata.reflection = SOAcitveTotalRechargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SOAcitveAdvanceData::kActiveIdFieldNumber;
const int SOAcitveAdvanceData::kPageIdFieldNumber;
const int SOAcitveAdvanceData::kAdvanceValueFieldNumber;
const int SOAcitveAdvanceData::kGetStateFieldNumber;
const int SOAcitveAdvanceData::kAdvanceValueMapFieldNumber;
#endif  // !_MSC_VER

SOAcitveAdvanceData::SOAcitveAdvanceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SOAcitveAdvanceData::InitAsDefaultInstance() {
}

SOAcitveAdvanceData::SOAcitveAdvanceData(const SOAcitveAdvanceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SOAcitveAdvanceData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  pageid_ = 0u;
  advancevalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SOAcitveAdvanceData::~SOAcitveAdvanceData() {
  SharedDtor();
}

void SOAcitveAdvanceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SOAcitveAdvanceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SOAcitveAdvanceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SOAcitveAdvanceData_descriptor_;
}

const SOAcitveAdvanceData& SOAcitveAdvanceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

SOAcitveAdvanceData* SOAcitveAdvanceData::default_instance_ = NULL;

SOAcitveAdvanceData* SOAcitveAdvanceData::New() const {
  return new SOAcitveAdvanceData;
}

void SOAcitveAdvanceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    pageid_ = 0u;
    advancevalue_ = GOOGLE_ULONGLONG(0);
  }
  getstate_.Clear();
  advancevaluemap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SOAcitveAdvanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pageId;
        break;
      }

      // optional uint32 pageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageid_)));
          set_has_pageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_advanceValue;
        break;
      }

      // optional uint64 advanceValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &advancevalue_)));
          set_has_advancevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        break;
      }

      // repeated .proto_ff.ComPair getState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_getState;
        if (input->ExpectTag(42)) goto parse_advanceValueMap;
        break;
      }

      // repeated .proto_ff.ComPair64 advanceValueMap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advanceValueMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_advancevaluemap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_advanceValueMap;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SOAcitveAdvanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint32 pageId = 2;
  if (has_pageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pageid(), output);
  }

  // optional uint64 advanceValue = 3;
  if (has_advancevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->advancevalue(), output);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->getstate(i), output);
  }

  // repeated .proto_ff.ComPair64 advanceValueMap = 5;
  for (int i = 0; i < this->advancevaluemap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->advancevaluemap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SOAcitveAdvanceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint32 pageId = 2;
  if (has_pageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pageid(), target);
  }

  // optional uint64 advanceValue = 3;
  if (has_advancevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->advancevalue(), target);
  }

  // repeated .proto_ff.ComPair getState = 4;
  for (int i = 0; i < this->getstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->getstate(i), target);
  }

  // repeated .proto_ff.ComPair64 advanceValueMap = 5;
  for (int i = 0; i < this->advancevaluemap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->advancevaluemap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SOAcitveAdvanceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint32 pageId = 2;
    if (has_pageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageid());
    }

    // optional uint64 advanceValue = 3;
    if (has_advancevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->advancevalue());
    }

  }
  // repeated .proto_ff.ComPair getState = 4;
  total_size += 1 * this->getstate_size();
  for (int i = 0; i < this->getstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getstate(i));
  }

  // repeated .proto_ff.ComPair64 advanceValueMap = 5;
  total_size += 1 * this->advancevaluemap_size();
  for (int i = 0; i < this->advancevaluemap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->advancevaluemap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SOAcitveAdvanceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SOAcitveAdvanceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SOAcitveAdvanceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SOAcitveAdvanceData::MergeFrom(const SOAcitveAdvanceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getstate_.MergeFrom(from.getstate_);
  advancevaluemap_.MergeFrom(from.advancevaluemap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_pageid()) {
      set_pageid(from.pageid());
    }
    if (from.has_advancevalue()) {
      set_advancevalue(from.advancevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SOAcitveAdvanceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOAcitveAdvanceData::CopyFrom(const SOAcitveAdvanceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOAcitveAdvanceData::IsInitialized() const {

  return true;
}

void SOAcitveAdvanceData::Swap(SOAcitveAdvanceData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(pageid_, other->pageid_);
    std::swap(advancevalue_, other->advancevalue_);
    getstate_.Swap(&other->getstate_);
    advancevaluemap_.Swap(&other->advancevaluemap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SOAcitveAdvanceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SOAcitveAdvanceData_descriptor_;
  metadata.reflection = SOAcitveAdvanceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SOAcitveGoodsData::kActiveIdFieldNumber;
const int SOAcitveGoodsData::kPageIdFieldNumber;
const int SOAcitveGoodsData::kBuyCountFieldNumber;
#endif  // !_MSC_VER

SOAcitveGoodsData::SOAcitveGoodsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SOAcitveGoodsData::InitAsDefaultInstance() {
}

SOAcitveGoodsData::SOAcitveGoodsData(const SOAcitveGoodsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SOAcitveGoodsData::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_ULONGLONG(0);
  pageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SOAcitveGoodsData::~SOAcitveGoodsData() {
  SharedDtor();
}

void SOAcitveGoodsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SOAcitveGoodsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SOAcitveGoodsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SOAcitveGoodsData_descriptor_;
}

const SOAcitveGoodsData& SOAcitveGoodsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

SOAcitveGoodsData* SOAcitveGoodsData::default_instance_ = NULL;

SOAcitveGoodsData* SOAcitveGoodsData::New() const {
  return new SOAcitveGoodsData;
}

void SOAcitveGoodsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_ULONGLONG(0);
    pageid_ = 0u;
  }
  buycount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SOAcitveGoodsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pageId;
        break;
      }

      // optional uint32 pageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageid_)));
          set_has_pageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buyCount;
        break;
      }

      // repeated .proto_ff.ComPair64 buyCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buycount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buyCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SOAcitveGoodsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->activeid(), output);
  }

  // optional uint32 pageId = 2;
  if (has_pageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pageid(), output);
  }

  // repeated .proto_ff.ComPair64 buyCount = 3;
  for (int i = 0; i < this->buycount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buycount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SOAcitveGoodsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->activeid(), target);
  }

  // optional uint32 pageId = 2;
  if (has_pageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pageid(), target);
  }

  // repeated .proto_ff.ComPair64 buyCount = 3;
  for (int i = 0; i < this->buycount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buycount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SOAcitveGoodsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeid());
    }

    // optional uint32 pageId = 2;
    if (has_pageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageid());
    }

  }
  // repeated .proto_ff.ComPair64 buyCount = 3;
  total_size += 1 * this->buycount_size();
  for (int i = 0; i < this->buycount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buycount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SOAcitveGoodsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SOAcitveGoodsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SOAcitveGoodsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SOAcitveGoodsData::MergeFrom(const SOAcitveGoodsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buycount_.MergeFrom(from.buycount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_pageid()) {
      set_pageid(from.pageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SOAcitveGoodsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOAcitveGoodsData::CopyFrom(const SOAcitveGoodsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOAcitveGoodsData::IsInitialized() const {

  return true;
}

void SOAcitveGoodsData::Swap(SOAcitveGoodsData* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(pageid_, other->pageid_);
    buycount_.Swap(&other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SOAcitveGoodsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SOAcitveGoodsData_descriptor_;
  metadata.reflection = SOAcitveGoodsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSOAcitveData::kTotalRechargeFieldNumber;
const int CharacterDBSOAcitveData::kAdvanceFieldNumber;
const int CharacterDBSOAcitveData::kGoodsFieldNumber;
const int CharacterDBSOAcitveData::kRedPointClickDataFieldNumber;
#endif  // !_MSC_VER

CharacterDBSOAcitveData::CharacterDBSOAcitveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSOAcitveData::InitAsDefaultInstance() {
}

CharacterDBSOAcitveData::CharacterDBSOAcitveData(const CharacterDBSOAcitveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSOAcitveData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSOAcitveData::~CharacterDBSOAcitveData() {
  SharedDtor();
}

void CharacterDBSOAcitveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSOAcitveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSOAcitveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSOAcitveData_descriptor_;
}

const CharacterDBSOAcitveData& CharacterDBSOAcitveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBSOAcitveData* CharacterDBSOAcitveData::default_instance_ = NULL;

CharacterDBSOAcitveData* CharacterDBSOAcitveData::New() const {
  return new CharacterDBSOAcitveData;
}

void CharacterDBSOAcitveData::Clear() {
  totalrecharge_.Clear();
  advance_.Clear();
  goods_.Clear();
  redpointclickdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSOAcitveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SOAcitveTotalRechargeData totalRecharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totalRecharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totalrecharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_totalRecharge;
        if (input->ExpectTag(18)) goto parse_advance;
        break;
      }

      // repeated .proto_ff.SOAcitveAdvanceData advance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_advance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_advance;
        if (input->ExpectTag(26)) goto parse_goods;
        break;
      }

      // repeated .proto_ff.SOAcitveGoodsData goods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        if (input->ExpectTag(34)) goto parse_redPointClickData;
        break;
      }

      // repeated .proto_ff.ComPair64 redPointClickData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redPointClickData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redpointclickdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redPointClickData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSOAcitveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SOAcitveTotalRechargeData totalRecharge = 1;
  for (int i = 0; i < this->totalrecharge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->totalrecharge(i), output);
  }

  // repeated .proto_ff.SOAcitveAdvanceData advance = 2;
  for (int i = 0; i < this->advance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->advance(i), output);
  }

  // repeated .proto_ff.SOAcitveGoodsData goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->goods(i), output);
  }

  // repeated .proto_ff.ComPair64 redPointClickData = 4;
  for (int i = 0; i < this->redpointclickdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redpointclickdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSOAcitveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SOAcitveTotalRechargeData totalRecharge = 1;
  for (int i = 0; i < this->totalrecharge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->totalrecharge(i), target);
  }

  // repeated .proto_ff.SOAcitveAdvanceData advance = 2;
  for (int i = 0; i < this->advance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->advance(i), target);
  }

  // repeated .proto_ff.SOAcitveGoodsData goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->goods(i), target);
  }

  // repeated .proto_ff.ComPair64 redPointClickData = 4;
  for (int i = 0; i < this->redpointclickdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redpointclickdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSOAcitveData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.SOAcitveTotalRechargeData totalRecharge = 1;
  total_size += 1 * this->totalrecharge_size();
  for (int i = 0; i < this->totalrecharge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totalrecharge(i));
  }

  // repeated .proto_ff.SOAcitveAdvanceData advance = 2;
  total_size += 1 * this->advance_size();
  for (int i = 0; i < this->advance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->advance(i));
  }

  // repeated .proto_ff.SOAcitveGoodsData goods = 3;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  // repeated .proto_ff.ComPair64 redPointClickData = 4;
  total_size += 1 * this->redpointclickdata_size();
  for (int i = 0; i < this->redpointclickdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redpointclickdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSOAcitveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSOAcitveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSOAcitveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSOAcitveData::MergeFrom(const CharacterDBSOAcitveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  totalrecharge_.MergeFrom(from.totalrecharge_);
  advance_.MergeFrom(from.advance_);
  goods_.MergeFrom(from.goods_);
  redpointclickdata_.MergeFrom(from.redpointclickdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSOAcitveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSOAcitveData::CopyFrom(const CharacterDBSOAcitveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSOAcitveData::IsInitialized() const {

  return true;
}

void CharacterDBSOAcitveData::Swap(CharacterDBSOAcitveData* other) {
  if (other != this) {
    totalrecharge_.Swap(&other->totalrecharge_);
    advance_.Swap(&other->advance_);
    goods_.Swap(&other->goods_);
    redpointclickdata_.Swap(&other->redpointclickdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSOAcitveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSOAcitveData_descriptor_;
  metadata.reflection = CharacterDBSOAcitveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBUseItemData::kItemUseTimesFieldNumber;
#endif  // !_MSC_VER

CharacterDBUseItemData::CharacterDBUseItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBUseItemData::InitAsDefaultInstance() {
}

CharacterDBUseItemData::CharacterDBUseItemData(const CharacterDBUseItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBUseItemData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBUseItemData::~CharacterDBUseItemData() {
  SharedDtor();
}

void CharacterDBUseItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBUseItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBUseItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBUseItemData_descriptor_;
}

const CharacterDBUseItemData& CharacterDBUseItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBUseItemData* CharacterDBUseItemData::default_instance_ = NULL;

CharacterDBUseItemData* CharacterDBUseItemData::New() const {
  return new CharacterDBUseItemData;
}

void CharacterDBUseItemData::Clear() {
  itemusetimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBUseItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair64 itemUseTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemUseTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemusetimes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemUseTimes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBUseItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair64 itemUseTimes = 1;
  for (int i = 0; i < this->itemusetimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemusetimes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBUseItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair64 itemUseTimes = 1;
  for (int i = 0; i < this->itemusetimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemusetimes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBUseItemData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair64 itemUseTimes = 1;
  total_size += 1 * this->itemusetimes_size();
  for (int i = 0; i < this->itemusetimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemusetimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBUseItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBUseItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBUseItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBUseItemData::MergeFrom(const CharacterDBUseItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemusetimes_.MergeFrom(from.itemusetimes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBUseItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBUseItemData::CopyFrom(const CharacterDBUseItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBUseItemData::IsInitialized() const {

  return true;
}

void CharacterDBUseItemData::Swap(CharacterDBUseItemData* other) {
  if (other != this) {
    itemusetimes_.Swap(&other->itemusetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBUseItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBUseItemData_descriptor_;
  metadata.reflection = CharacterDBUseItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDayUseItemData::kDayFieldNumber;
const int CharacterDBDayUseItemData::kItemUseTimesFieldNumber;
#endif  // !_MSC_VER

CharacterDBDayUseItemData::CharacterDBDayUseItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDayUseItemData::InitAsDefaultInstance() {
}

CharacterDBDayUseItemData::CharacterDBDayUseItemData(const CharacterDBDayUseItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDayUseItemData::SharedCtor() {
  _cached_size_ = 0;
  day_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDayUseItemData::~CharacterDBDayUseItemData() {
  SharedDtor();
}

void CharacterDBDayUseItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBDayUseItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDayUseItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDayUseItemData_descriptor_;
}

const CharacterDBDayUseItemData& CharacterDBDayUseItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBDayUseItemData* CharacterDBDayUseItemData::default_instance_ = NULL;

CharacterDBDayUseItemData* CharacterDBDayUseItemData::New() const {
  return new CharacterDBDayUseItemData;
}

void CharacterDBDayUseItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = GOOGLE_ULONGLONG(0);
  }
  itemusetimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDayUseItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemUseTimes;
        break;
      }

      // repeated .proto_ff.ComPair64 itemUseTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemUseTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemusetimes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemUseTimes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDayUseItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->day(), output);
  }

  // repeated .proto_ff.ComPair64 itemUseTimes = 2;
  for (int i = 0; i < this->itemusetimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemusetimes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDayUseItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->day(), target);
  }

  // repeated .proto_ff.ComPair64 itemUseTimes = 2;
  for (int i = 0; i < this->itemusetimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemusetimes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDayUseItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->day());
    }

  }
  // repeated .proto_ff.ComPair64 itemUseTimes = 2;
  total_size += 1 * this->itemusetimes_size();
  for (int i = 0; i < this->itemusetimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemusetimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDayUseItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDayUseItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDayUseItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDayUseItemData::MergeFrom(const CharacterDBDayUseItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemusetimes_.MergeFrom(from.itemusetimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDayUseItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDayUseItemData::CopyFrom(const CharacterDBDayUseItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDayUseItemData::IsInitialized() const {

  return true;
}

void CharacterDBDayUseItemData::Swap(CharacterDBDayUseItemData* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    itemusetimes_.Swap(&other->itemusetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDayUseItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDayUseItemData_descriptor_;
  metadata.reflection = CharacterDBDayUseItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysteryShopDBData::kNIdFieldNumber;
const int MysteryShopDBData::kNStartTimeFieldNumber;
const int MysteryShopDBData::kNFinishTimeFieldNumber;
const int MysteryShopDBData::kNStateFieldNumber;
#endif  // !_MSC_VER

MysteryShopDBData::MysteryShopDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysteryShopDBData::InitAsDefaultInstance() {
}

MysteryShopDBData::MysteryShopDBData(const MysteryShopDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysteryShopDBData::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  nstarttime_ = GOOGLE_ULONGLONG(0);
  nfinishtime_ = GOOGLE_ULONGLONG(0);
  nstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysteryShopDBData::~MysteryShopDBData() {
  SharedDtor();
}

void MysteryShopDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MysteryShopDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysteryShopDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysteryShopDBData_descriptor_;
}

const MysteryShopDBData& MysteryShopDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MysteryShopDBData* MysteryShopDBData::default_instance_ = NULL;

MysteryShopDBData* MysteryShopDBData::New() const {
  return new MysteryShopDBData;
}

void MysteryShopDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    nstarttime_ = GOOGLE_ULONGLONG(0);
    nfinishtime_ = GOOGLE_ULONGLONG(0);
    nstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysteryShopDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nStartTime;
        break;
      }

      // optional uint64 nStartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nstarttime_)));
          set_has_nstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nFinishTime;
        break;
      }

      // optional uint64 nFinishTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFinishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nfinishtime_)));
          set_has_nfinishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nState;
        break;
      }

      // optional uint32 nState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstate_)));
          set_has_nstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysteryShopDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint64 nStartTime = 2;
  if (has_nstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nstarttime(), output);
  }

  // optional uint64 nFinishTime = 3;
  if (has_nfinishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nfinishtime(), output);
  }

  // optional uint32 nState = 4;
  if (has_nstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysteryShopDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // optional uint64 nStartTime = 2;
  if (has_nstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nstarttime(), target);
  }

  // optional uint64 nFinishTime = 3;
  if (has_nfinishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nfinishtime(), target);
  }

  // optional uint32 nState = 4;
  if (has_nstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysteryShopDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // optional uint64 nStartTime = 2;
    if (has_nstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nstarttime());
    }

    // optional uint64 nFinishTime = 3;
    if (has_nfinishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nfinishtime());
    }

    // optional uint32 nState = 4;
    if (has_nstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysteryShopDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysteryShopDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysteryShopDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysteryShopDBData::MergeFrom(const MysteryShopDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nstarttime()) {
      set_nstarttime(from.nstarttime());
    }
    if (from.has_nfinishtime()) {
      set_nfinishtime(from.nfinishtime());
    }
    if (from.has_nstate()) {
      set_nstate(from.nstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysteryShopDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysteryShopDBData::CopyFrom(const MysteryShopDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysteryShopDBData::IsInitialized() const {

  return true;
}

void MysteryShopDBData::Swap(MysteryShopDBData* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nstarttime_, other->nstarttime_);
    std::swap(nfinishtime_, other->nfinishtime_);
    std::swap(nstate_, other->nstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysteryShopDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysteryShopDBData_descriptor_;
  metadata.reflection = MysteryShopDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMysteryShopData::kDataListFieldNumber;
#endif  // !_MSC_VER

CharacterDBMysteryShopData::CharacterDBMysteryShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMysteryShopData::InitAsDefaultInstance() {
}

CharacterDBMysteryShopData::CharacterDBMysteryShopData(const CharacterDBMysteryShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMysteryShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMysteryShopData::~CharacterDBMysteryShopData() {
  SharedDtor();
}

void CharacterDBMysteryShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMysteryShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMysteryShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMysteryShopData_descriptor_;
}

const CharacterDBMysteryShopData& CharacterDBMysteryShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBMysteryShopData* CharacterDBMysteryShopData::default_instance_ = NULL;

CharacterDBMysteryShopData* CharacterDBMysteryShopData::New() const {
  return new CharacterDBMysteryShopData;
}

void CharacterDBMysteryShopData::Clear() {
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMysteryShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MysteryShopDBData dataList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMysteryShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MysteryShopDBData dataList = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMysteryShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MysteryShopDBData dataList = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMysteryShopData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MysteryShopDBData dataList = 1;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMysteryShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMysteryShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMysteryShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMysteryShopData::MergeFrom(const CharacterDBMysteryShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMysteryShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMysteryShopData::CopyFrom(const CharacterDBMysteryShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMysteryShopData::IsInitialized() const {

  return true;
}

void CharacterDBMysteryShopData::Swap(CharacterDBMysteryShopData* other) {
  if (other != this) {
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMysteryShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMysteryShopData_descriptor_;
  metadata.reflection = CharacterDBMysteryShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBPackageTestRebateData::kBCheckedFieldNumber;
const int CharacterDBPackageTestRebateData::kStateFieldNumber;
const int CharacterDBPackageTestRebateData::kRechargeValueFieldNumber;
const int CharacterDBPackageTestRebateData::kPowerRankFieldNumber;
const int CharacterDBPackageTestRebateData::kDeadlineFieldNumber;
const int CharacterDBPackageTestRebateData::kRewardStateMapFieldNumber;
const int CharacterDBPackageTestRebateData::kBackStateMapFieldNumber;
#endif  // !_MSC_VER

CharacterDBPackageTestRebateData::CharacterDBPackageTestRebateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBPackageTestRebateData::InitAsDefaultInstance() {
}

CharacterDBPackageTestRebateData::CharacterDBPackageTestRebateData(const CharacterDBPackageTestRebateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBPackageTestRebateData::SharedCtor() {
  _cached_size_ = 0;
  bchecked_ = false;
  state_ = 0u;
  rechargevalue_ = 0u;
  powerrank_ = 0u;
  deadline_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBPackageTestRebateData::~CharacterDBPackageTestRebateData() {
  SharedDtor();
}

void CharacterDBPackageTestRebateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBPackageTestRebateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBPackageTestRebateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBPackageTestRebateData_descriptor_;
}

const CharacterDBPackageTestRebateData& CharacterDBPackageTestRebateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBPackageTestRebateData* CharacterDBPackageTestRebateData::default_instance_ = NULL;

CharacterDBPackageTestRebateData* CharacterDBPackageTestRebateData::New() const {
  return new CharacterDBPackageTestRebateData;
}

void CharacterDBPackageTestRebateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bchecked_ = false;
    state_ = 0u;
    rechargevalue_ = 0u;
    powerrank_ = 0u;
    deadline_ = GOOGLE_ULONGLONG(0);
  }
  rewardstatemap_.Clear();
  backstatemap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBPackageTestRebateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bChecked = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bchecked_)));
          set_has_bchecked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rechargeValue;
        break;
      }

      // optional uint32 rechargeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargevalue_)));
          set_has_rechargevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_powerRank;
        break;
      }

      // optional uint32 powerRank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &powerrank_)));
          set_has_powerrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deadline;
        break;
      }

      // optional uint64 deadline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewardStateMap;
        break;
      }

      // repeated .proto_ff.ComPair64 rewardStateMap = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardStateMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardstatemap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewardStateMap;
        if (input->ExpectTag(58)) goto parse_backStateMap;
        break;
      }

      // repeated .proto_ff.ComPair64 backStateMap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backStateMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backstatemap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_backStateMap;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBPackageTestRebateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bChecked = 1;
  if (has_bchecked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bchecked(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 rechargeValue = 3;
  if (has_rechargevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rechargevalue(), output);
  }

  // optional uint32 powerRank = 4;
  if (has_powerrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->powerrank(), output);
  }

  // optional uint64 deadline = 5;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->deadline(), output);
  }

  // repeated .proto_ff.ComPair64 rewardStateMap = 6;
  for (int i = 0; i < this->rewardstatemap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewardstatemap(i), output);
  }

  // repeated .proto_ff.ComPair64 backStateMap = 7;
  for (int i = 0; i < this->backstatemap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->backstatemap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBPackageTestRebateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bChecked = 1;
  if (has_bchecked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bchecked(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 rechargeValue = 3;
  if (has_rechargevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rechargevalue(), target);
  }

  // optional uint32 powerRank = 4;
  if (has_powerrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->powerrank(), target);
  }

  // optional uint64 deadline = 5;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->deadline(), target);
  }

  // repeated .proto_ff.ComPair64 rewardStateMap = 6;
  for (int i = 0; i < this->rewardstatemap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewardstatemap(i), target);
  }

  // repeated .proto_ff.ComPair64 backStateMap = 7;
  for (int i = 0; i < this->backstatemap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->backstatemap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBPackageTestRebateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bChecked = 1;
    if (has_bchecked()) {
      total_size += 1 + 1;
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 rechargeValue = 3;
    if (has_rechargevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargevalue());
    }

    // optional uint32 powerRank = 4;
    if (has_powerrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->powerrank());
    }

    // optional uint64 deadline = 5;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deadline());
    }

  }
  // repeated .proto_ff.ComPair64 rewardStateMap = 6;
  total_size += 1 * this->rewardstatemap_size();
  for (int i = 0; i < this->rewardstatemap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardstatemap(i));
  }

  // repeated .proto_ff.ComPair64 backStateMap = 7;
  total_size += 1 * this->backstatemap_size();
  for (int i = 0; i < this->backstatemap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backstatemap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBPackageTestRebateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBPackageTestRebateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBPackageTestRebateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBPackageTestRebateData::MergeFrom(const CharacterDBPackageTestRebateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardstatemap_.MergeFrom(from.rewardstatemap_);
  backstatemap_.MergeFrom(from.backstatemap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bchecked()) {
      set_bchecked(from.bchecked());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_rechargevalue()) {
      set_rechargevalue(from.rechargevalue());
    }
    if (from.has_powerrank()) {
      set_powerrank(from.powerrank());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBPackageTestRebateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBPackageTestRebateData::CopyFrom(const CharacterDBPackageTestRebateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBPackageTestRebateData::IsInitialized() const {

  return true;
}

void CharacterDBPackageTestRebateData::Swap(CharacterDBPackageTestRebateData* other) {
  if (other != this) {
    std::swap(bchecked_, other->bchecked_);
    std::swap(state_, other->state_);
    std::swap(rechargevalue_, other->rechargevalue_);
    std::swap(powerrank_, other->powerrank_);
    std::swap(deadline_, other->deadline_);
    rewardstatemap_.Swap(&other->rewardstatemap_);
    backstatemap_.Swap(&other->backstatemap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBPackageTestRebateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBPackageTestRebateData_descriptor_;
  metadata.reflection = CharacterDBPackageTestRebateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuncFightDBData::kEquipTotalFieldNumber;
const int FuncFightDBData::kEquipBaseFieldNumber;
const int FuncFightDBData::kEquipStrongFieldNumber;
const int FuncFightDBData::kStoneFieldNumber;
const int FuncFightDBData::kEquipScrutinyFieldNumber;
const int FuncFightDBData::kEquipSuitFieldNumber;
const int FuncFightDBData::kEquipAwakeFieldNumber;
const int FuncFightDBData::kEquipEnchantFieldNumber;
const int FuncFightDBData::kFatestarFieldNumber;
const int FuncFightDBData::kGodhoodFieldNumber;
const int FuncFightDBData::kIdentifyFieldNumber;
const int FuncFightDBData::kPartnerFieldNumber;
const int FuncFightDBData::kFieldFieldNumber;
const int FuncFightDBData::kElementFieldNumber;
const int FuncFightDBData::kWingFieldNumber;
const int FuncFightDBData::kTreasureFieldNumber;
const int FuncFightDBData::kFantastyTotalFieldNumber;
const int FuncFightDBData::kArtifactFantastyFieldNumber;
const int FuncFightDBData::kHorseFantastyFieldNumber;
const int FuncFightDBData::kWingFantastyFieldNumber;
const int FuncFightDBData::kFashionFantastyFieldNumber;
const int FuncFightDBData::kPartnerFantastyFieldNumber;
const int FuncFightDBData::kTreasureFantastyFieldNumber;
#endif  // !_MSC_VER

FuncFightDBData::FuncFightDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FuncFightDBData::InitAsDefaultInstance() {
}

FuncFightDBData::FuncFightDBData(const FuncFightDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FuncFightDBData::SharedCtor() {
  _cached_size_ = 0;
  equip_total_ = GOOGLE_LONGLONG(0);
  equip_base_ = GOOGLE_LONGLONG(0);
  equip_strong_ = GOOGLE_LONGLONG(0);
  stone_ = GOOGLE_LONGLONG(0);
  equip_scrutiny_ = GOOGLE_LONGLONG(0);
  equip_suit_ = GOOGLE_LONGLONG(0);
  equip_awake_ = GOOGLE_LONGLONG(0);
  equip_enchant_ = GOOGLE_LONGLONG(0);
  fatestar_ = GOOGLE_LONGLONG(0);
  godhood_ = GOOGLE_LONGLONG(0);
  identify_ = GOOGLE_LONGLONG(0);
  partner_ = GOOGLE_LONGLONG(0);
  field_ = GOOGLE_LONGLONG(0);
  element_ = GOOGLE_LONGLONG(0);
  wing_ = GOOGLE_LONGLONG(0);
  treasure_ = GOOGLE_LONGLONG(0);
  fantasty_total_ = GOOGLE_LONGLONG(0);
  artifact_fantasty_ = GOOGLE_LONGLONG(0);
  horse_fantasty_ = GOOGLE_LONGLONG(0);
  wing_fantasty_ = GOOGLE_LONGLONG(0);
  fashion_fantasty_ = GOOGLE_LONGLONG(0);
  partner_fantasty_ = GOOGLE_LONGLONG(0);
  treasure_fantasty_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuncFightDBData::~FuncFightDBData() {
  SharedDtor();
}

void FuncFightDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuncFightDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuncFightDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuncFightDBData_descriptor_;
}

const FuncFightDBData& FuncFightDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

FuncFightDBData* FuncFightDBData::default_instance_ = NULL;

FuncFightDBData* FuncFightDBData::New() const {
  return new FuncFightDBData;
}

void FuncFightDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_total_ = GOOGLE_LONGLONG(0);
    equip_base_ = GOOGLE_LONGLONG(0);
    equip_strong_ = GOOGLE_LONGLONG(0);
    stone_ = GOOGLE_LONGLONG(0);
    equip_scrutiny_ = GOOGLE_LONGLONG(0);
    equip_suit_ = GOOGLE_LONGLONG(0);
    equip_awake_ = GOOGLE_LONGLONG(0);
    equip_enchant_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fatestar_ = GOOGLE_LONGLONG(0);
    godhood_ = GOOGLE_LONGLONG(0);
    identify_ = GOOGLE_LONGLONG(0);
    partner_ = GOOGLE_LONGLONG(0);
    field_ = GOOGLE_LONGLONG(0);
    element_ = GOOGLE_LONGLONG(0);
    wing_ = GOOGLE_LONGLONG(0);
    treasure_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fantasty_total_ = GOOGLE_LONGLONG(0);
    artifact_fantasty_ = GOOGLE_LONGLONG(0);
    horse_fantasty_ = GOOGLE_LONGLONG(0);
    wing_fantasty_ = GOOGLE_LONGLONG(0);
    fashion_fantasty_ = GOOGLE_LONGLONG(0);
    partner_fantasty_ = GOOGLE_LONGLONG(0);
    treasure_fantasty_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuncFightDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 equip_total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_total_)));
          set_has_equip_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_base;
        break;
      }

      // optional int64 equip_base = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_base_)));
          set_has_equip_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_strong;
        break;
      }

      // optional int64 equip_strong = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_strong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_strong_)));
          set_has_equip_strong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stone;
        break;
      }

      // optional int64 stone = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stone_)));
          set_has_stone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip_scrutiny;
        break;
      }

      // optional int64 equip_scrutiny = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_scrutiny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_scrutiny_)));
          set_has_equip_scrutiny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equip_suit;
        break;
      }

      // optional int64 equip_suit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_suit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_suit_)));
          set_has_equip_suit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_equip_awake;
        break;
      }

      // optional int64 equip_awake = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_awake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_awake_)));
          set_has_equip_awake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_equip_enchant;
        break;
      }

      // optional int64 equip_enchant = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_enchant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_enchant_)));
          set_has_equip_enchant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fatestar;
        break;
      }

      // optional int64 fatestar = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fatestar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fatestar_)));
          set_has_fatestar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_godhood;
        break;
      }

      // optional int64 godhood = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godhood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &godhood_)));
          set_has_godhood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_identify;
        break;
      }

      // optional int64 identify = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &identify_)));
          set_has_identify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_partner;
        break;
      }

      // optional int64 partner = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partner_)));
          set_has_partner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_field;
        break;
      }

      // optional int64 field = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_)));
          set_has_field();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_element;
        break;
      }

      // optional int64 element = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &element_)));
          set_has_element();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_wing;
        break;
      }

      // optional int64 wing = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_treasure;
        break;
      }

      // optional int64 treasure = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &treasure_)));
          set_has_treasure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fantasty_total;
        break;
      }

      // optional int64 fantasty_total = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasty_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fantasty_total_)));
          set_has_fantasty_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_artifact_fantasty;
        break;
      }

      // optional int64 artifact_fantasty = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_artifact_fantasty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &artifact_fantasty_)));
          set_has_artifact_fantasty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_horse_fantasty;
        break;
      }

      // optional int64 horse_fantasty = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horse_fantasty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &horse_fantasty_)));
          set_has_horse_fantasty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_wing_fantasty;
        break;
      }

      // optional int64 wing_fantasty = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_fantasty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wing_fantasty_)));
          set_has_wing_fantasty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fashion_fantasty;
        break;
      }

      // optional int64 fashion_fantasty = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_fantasty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fashion_fantasty_)));
          set_has_fashion_fantasty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_partner_fantasty;
        break;
      }

      // optional int64 partner_fantasty = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_fantasty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partner_fantasty_)));
          set_has_partner_fantasty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_treasure_fantasty;
        break;
      }

      // optional int64 treasure_fantasty = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_fantasty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &treasure_fantasty_)));
          set_has_treasure_fantasty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FuncFightDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 equip_total = 1;
  if (has_equip_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equip_total(), output);
  }

  // optional int64 equip_base = 2;
  if (has_equip_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equip_base(), output);
  }

  // optional int64 equip_strong = 3;
  if (has_equip_strong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->equip_strong(), output);
  }

  // optional int64 stone = 4;
  if (has_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->stone(), output);
  }

  // optional int64 equip_scrutiny = 5;
  if (has_equip_scrutiny()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->equip_scrutiny(), output);
  }

  // optional int64 equip_suit = 6;
  if (has_equip_suit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->equip_suit(), output);
  }

  // optional int64 equip_awake = 7;
  if (has_equip_awake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->equip_awake(), output);
  }

  // optional int64 equip_enchant = 8;
  if (has_equip_enchant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->equip_enchant(), output);
  }

  // optional int64 fatestar = 9;
  if (has_fatestar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->fatestar(), output);
  }

  // optional int64 godhood = 10;
  if (has_godhood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->godhood(), output);
  }

  // optional int64 identify = 11;
  if (has_identify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->identify(), output);
  }

  // optional int64 partner = 12;
  if (has_partner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->partner(), output);
  }

  // optional int64 field = 13;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->field(), output);
  }

  // optional int64 element = 14;
  if (has_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->element(), output);
  }

  // optional int64 wing = 15;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->wing(), output);
  }

  // optional int64 treasure = 16;
  if (has_treasure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->treasure(), output);
  }

  // optional int64 fantasty_total = 17;
  if (has_fantasty_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->fantasty_total(), output);
  }

  // optional int64 artifact_fantasty = 18;
  if (has_artifact_fantasty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->artifact_fantasty(), output);
  }

  // optional int64 horse_fantasty = 19;
  if (has_horse_fantasty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->horse_fantasty(), output);
  }

  // optional int64 wing_fantasty = 20;
  if (has_wing_fantasty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->wing_fantasty(), output);
  }

  // optional int64 fashion_fantasty = 21;
  if (has_fashion_fantasty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->fashion_fantasty(), output);
  }

  // optional int64 partner_fantasty = 22;
  if (has_partner_fantasty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->partner_fantasty(), output);
  }

  // optional int64 treasure_fantasty = 23;
  if (has_treasure_fantasty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->treasure_fantasty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FuncFightDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 equip_total = 1;
  if (has_equip_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equip_total(), target);
  }

  // optional int64 equip_base = 2;
  if (has_equip_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equip_base(), target);
  }

  // optional int64 equip_strong = 3;
  if (has_equip_strong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->equip_strong(), target);
  }

  // optional int64 stone = 4;
  if (has_stone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->stone(), target);
  }

  // optional int64 equip_scrutiny = 5;
  if (has_equip_scrutiny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->equip_scrutiny(), target);
  }

  // optional int64 equip_suit = 6;
  if (has_equip_suit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->equip_suit(), target);
  }

  // optional int64 equip_awake = 7;
  if (has_equip_awake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->equip_awake(), target);
  }

  // optional int64 equip_enchant = 8;
  if (has_equip_enchant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->equip_enchant(), target);
  }

  // optional int64 fatestar = 9;
  if (has_fatestar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->fatestar(), target);
  }

  // optional int64 godhood = 10;
  if (has_godhood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->godhood(), target);
  }

  // optional int64 identify = 11;
  if (has_identify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->identify(), target);
  }

  // optional int64 partner = 12;
  if (has_partner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->partner(), target);
  }

  // optional int64 field = 13;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->field(), target);
  }

  // optional int64 element = 14;
  if (has_element()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->element(), target);
  }

  // optional int64 wing = 15;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->wing(), target);
  }

  // optional int64 treasure = 16;
  if (has_treasure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->treasure(), target);
  }

  // optional int64 fantasty_total = 17;
  if (has_fantasty_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->fantasty_total(), target);
  }

  // optional int64 artifact_fantasty = 18;
  if (has_artifact_fantasty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->artifact_fantasty(), target);
  }

  // optional int64 horse_fantasty = 19;
  if (has_horse_fantasty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->horse_fantasty(), target);
  }

  // optional int64 wing_fantasty = 20;
  if (has_wing_fantasty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->wing_fantasty(), target);
  }

  // optional int64 fashion_fantasty = 21;
  if (has_fashion_fantasty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->fashion_fantasty(), target);
  }

  // optional int64 partner_fantasty = 22;
  if (has_partner_fantasty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->partner_fantasty(), target);
  }

  // optional int64 treasure_fantasty = 23;
  if (has_treasure_fantasty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->treasure_fantasty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FuncFightDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 equip_total = 1;
    if (has_equip_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_total());
    }

    // optional int64 equip_base = 2;
    if (has_equip_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_base());
    }

    // optional int64 equip_strong = 3;
    if (has_equip_strong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_strong());
    }

    // optional int64 stone = 4;
    if (has_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stone());
    }

    // optional int64 equip_scrutiny = 5;
    if (has_equip_scrutiny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_scrutiny());
    }

    // optional int64 equip_suit = 6;
    if (has_equip_suit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_suit());
    }

    // optional int64 equip_awake = 7;
    if (has_equip_awake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_awake());
    }

    // optional int64 equip_enchant = 8;
    if (has_equip_enchant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_enchant());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 fatestar = 9;
    if (has_fatestar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fatestar());
    }

    // optional int64 godhood = 10;
    if (has_godhood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->godhood());
    }

    // optional int64 identify = 11;
    if (has_identify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->identify());
    }

    // optional int64 partner = 12;
    if (has_partner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partner());
    }

    // optional int64 field = 13;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field());
    }

    // optional int64 element = 14;
    if (has_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->element());
    }

    // optional int64 wing = 15;
    if (has_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wing());
    }

    // optional int64 treasure = 16;
    if (has_treasure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->treasure());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 fantasty_total = 17;
    if (has_fantasty_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fantasty_total());
    }

    // optional int64 artifact_fantasty = 18;
    if (has_artifact_fantasty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->artifact_fantasty());
    }

    // optional int64 horse_fantasty = 19;
    if (has_horse_fantasty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->horse_fantasty());
    }

    // optional int64 wing_fantasty = 20;
    if (has_wing_fantasty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wing_fantasty());
    }

    // optional int64 fashion_fantasty = 21;
    if (has_fashion_fantasty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fashion_fantasty());
    }

    // optional int64 partner_fantasty = 22;
    if (has_partner_fantasty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partner_fantasty());
    }

    // optional int64 treasure_fantasty = 23;
    if (has_treasure_fantasty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->treasure_fantasty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuncFightDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuncFightDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuncFightDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuncFightDBData::MergeFrom(const FuncFightDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_total()) {
      set_equip_total(from.equip_total());
    }
    if (from.has_equip_base()) {
      set_equip_base(from.equip_base());
    }
    if (from.has_equip_strong()) {
      set_equip_strong(from.equip_strong());
    }
    if (from.has_stone()) {
      set_stone(from.stone());
    }
    if (from.has_equip_scrutiny()) {
      set_equip_scrutiny(from.equip_scrutiny());
    }
    if (from.has_equip_suit()) {
      set_equip_suit(from.equip_suit());
    }
    if (from.has_equip_awake()) {
      set_equip_awake(from.equip_awake());
    }
    if (from.has_equip_enchant()) {
      set_equip_enchant(from.equip_enchant());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fatestar()) {
      set_fatestar(from.fatestar());
    }
    if (from.has_godhood()) {
      set_godhood(from.godhood());
    }
    if (from.has_identify()) {
      set_identify(from.identify());
    }
    if (from.has_partner()) {
      set_partner(from.partner());
    }
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_element()) {
      set_element(from.element());
    }
    if (from.has_wing()) {
      set_wing(from.wing());
    }
    if (from.has_treasure()) {
      set_treasure(from.treasure());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fantasty_total()) {
      set_fantasty_total(from.fantasty_total());
    }
    if (from.has_artifact_fantasty()) {
      set_artifact_fantasty(from.artifact_fantasty());
    }
    if (from.has_horse_fantasty()) {
      set_horse_fantasty(from.horse_fantasty());
    }
    if (from.has_wing_fantasty()) {
      set_wing_fantasty(from.wing_fantasty());
    }
    if (from.has_fashion_fantasty()) {
      set_fashion_fantasty(from.fashion_fantasty());
    }
    if (from.has_partner_fantasty()) {
      set_partner_fantasty(from.partner_fantasty());
    }
    if (from.has_treasure_fantasty()) {
      set_treasure_fantasty(from.treasure_fantasty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuncFightDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuncFightDBData::CopyFrom(const FuncFightDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuncFightDBData::IsInitialized() const {

  return true;
}

void FuncFightDBData::Swap(FuncFightDBData* other) {
  if (other != this) {
    std::swap(equip_total_, other->equip_total_);
    std::swap(equip_base_, other->equip_base_);
    std::swap(equip_strong_, other->equip_strong_);
    std::swap(stone_, other->stone_);
    std::swap(equip_scrutiny_, other->equip_scrutiny_);
    std::swap(equip_suit_, other->equip_suit_);
    std::swap(equip_awake_, other->equip_awake_);
    std::swap(equip_enchant_, other->equip_enchant_);
    std::swap(fatestar_, other->fatestar_);
    std::swap(godhood_, other->godhood_);
    std::swap(identify_, other->identify_);
    std::swap(partner_, other->partner_);
    std::swap(field_, other->field_);
    std::swap(element_, other->element_);
    std::swap(wing_, other->wing_);
    std::swap(treasure_, other->treasure_);
    std::swap(fantasty_total_, other->fantasty_total_);
    std::swap(artifact_fantasty_, other->artifact_fantasty_);
    std::swap(horse_fantasty_, other->horse_fantasty_);
    std::swap(wing_fantasty_, other->wing_fantasty_);
    std::swap(fashion_fantasty_, other->fashion_fantasty_);
    std::swap(partner_fantasty_, other->partner_fantasty_);
    std::swap(treasure_fantasty_, other->treasure_fantasty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuncFightDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuncFightDBData_descriptor_;
  metadata.reflection = FuncFightDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerInfo::kTitleIdFieldNumber;
const int PowerInfo::kCurBuyNumFieldNumber;
const int PowerInfo::kSkillUpdateIdFieldNumber;
#endif  // !_MSC_VER

PowerInfo::PowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerInfo::InitAsDefaultInstance() {
}

PowerInfo::PowerInfo(const PowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerInfo::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  curbuynum_ = 0;
  skillupdateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerInfo::~PowerInfo() {
  SharedDtor();
}

void PowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerInfo_descriptor_;
}

const PowerInfo& PowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

PowerInfo* PowerInfo::default_instance_ = NULL;

PowerInfo* PowerInfo::New() const {
  return new PowerInfo;
}

void PowerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
    curbuynum_ = 0;
    skillupdateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 titleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curBuyNum;
        break;
      }

      // optional int32 curBuyNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curbuynum_)));
          set_has_curbuynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillUpdateId;
        break;
      }

      // optional int32 skillUpdateId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillUpdateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillupdateid_)));
          set_has_skillupdateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  // optional int32 curBuyNum = 2;
  if (has_curbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curbuynum(), output);
  }

  // optional int32 skillUpdateId = 3;
  if (has_skillupdateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillupdateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 titleId = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  // optional int32 curBuyNum = 2;
  if (has_curbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curbuynum(), target);
  }

  // optional int32 skillUpdateId = 3;
  if (has_skillupdateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillupdateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 titleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 curBuyNum = 2;
    if (has_curbuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curbuynum());
    }

    // optional int32 skillUpdateId = 3;
    if (has_skillupdateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillupdateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerInfo::MergeFrom(const PowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_curbuynum()) {
      set_curbuynum(from.curbuynum());
    }
    if (from.has_skillupdateid()) {
      set_skillupdateid(from.skillupdateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerInfo::CopyFrom(const PowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerInfo::IsInitialized() const {

  return true;
}

void PowerInfo::Swap(PowerInfo* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(curbuynum_, other->curbuynum_);
    std::swap(skillupdateid_, other->skillupdateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerInfo_descriptor_;
  metadata.reflection = PowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerInfoDBList::kInfosFieldNumber;
#endif  // !_MSC_VER

PowerInfoDBList::PowerInfoDBList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerInfoDBList::InitAsDefaultInstance() {
}

PowerInfoDBList::PowerInfoDBList(const PowerInfoDBList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerInfoDBList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerInfoDBList::~PowerInfoDBList() {
  SharedDtor();
}

void PowerInfoDBList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerInfoDBList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerInfoDBList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerInfoDBList_descriptor_;
}

const PowerInfoDBList& PowerInfoDBList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

PowerInfoDBList* PowerInfoDBList::default_instance_ = NULL;

PowerInfoDBList* PowerInfoDBList::New() const {
  return new PowerInfoDBList;
}

void PowerInfoDBList::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerInfoDBList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.PowerInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerInfoDBList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.PowerInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerInfoDBList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.PowerInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerInfoDBList::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.PowerInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerInfoDBList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerInfoDBList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerInfoDBList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerInfoDBList::MergeFrom(const PowerInfoDBList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerInfoDBList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerInfoDBList::CopyFrom(const PowerInfoDBList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerInfoDBList::IsInitialized() const {

  return true;
}

void PowerInfoDBList::Swap(PowerInfoDBList* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerInfoDBList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerInfoDBList_descriptor_;
  metadata.reflection = PowerInfoDBList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupationTaskInfo::kTaskIDFieldNumber;
const int OccupationTaskInfo::kCurValueFieldNumber;
const int OccupationTaskInfo::kTaskStateFieldNumber;
#endif  // !_MSC_VER

OccupationTaskInfo::OccupationTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupationTaskInfo::InitAsDefaultInstance() {
}

OccupationTaskInfo::OccupationTaskInfo(const OccupationTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupationTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  curvalue_ = 0;
  taskstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupationTaskInfo::~OccupationTaskInfo() {
  SharedDtor();
}

void OccupationTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupationTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupationTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupationTaskInfo_descriptor_;
}

const OccupationTaskInfo& OccupationTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OccupationTaskInfo* OccupationTaskInfo::default_instance_ = NULL;

OccupationTaskInfo* OccupationTaskInfo::New() const {
  return new OccupationTaskInfo;
}

void OccupationTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0;
    curvalue_ = 0;
    taskstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupationTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curValue;
        break;
      }

      // optional int32 curValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvalue_)));
          set_has_curvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskState;
        break;
      }

      // optional int32 taskState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskstate_)));
          set_has_taskstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupationTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 curValue = 2;
  if (has_curvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curvalue(), output);
  }

  // optional int32 taskState = 3;
  if (has_taskstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->taskstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupationTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 curValue = 2;
  if (has_curvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curvalue(), target);
  }

  // optional int32 taskState = 3;
  if (has_taskstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->taskstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupationTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 curValue = 2;
    if (has_curvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curvalue());
    }

    // optional int32 taskState = 3;
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupationTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupationTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupationTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupationTaskInfo::MergeFrom(const OccupationTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_curvalue()) {
      set_curvalue(from.curvalue());
    }
    if (from.has_taskstate()) {
      set_taskstate(from.taskstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupationTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupationTaskInfo::CopyFrom(const OccupationTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupationTaskInfo::IsInitialized() const {

  return true;
}

void OccupationTaskInfo::Swap(OccupationTaskInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(curvalue_, other->curvalue_);
    std::swap(taskstate_, other->taskstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupationTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupationTaskInfo_descriptor_;
  metadata.reflection = OccupationTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupationTakeList::kTasksFieldNumber;
#endif  // !_MSC_VER

OccupationTakeList::OccupationTakeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupationTakeList::InitAsDefaultInstance() {
}

OccupationTakeList::OccupationTakeList(const OccupationTakeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupationTakeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupationTakeList::~OccupationTakeList() {
  SharedDtor();
}

void OccupationTakeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupationTakeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupationTakeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupationTakeList_descriptor_;
}

const OccupationTakeList& OccupationTakeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

OccupationTakeList* OccupationTakeList::default_instance_ = NULL;

OccupationTakeList* OccupationTakeList::New() const {
  return new OccupationTakeList;
}

void OccupationTakeList::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupationTakeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.OccupationTaskInfo tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupationTakeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.OccupationTaskInfo tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupationTakeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.OccupationTaskInfo tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupationTakeList::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.OccupationTaskInfo tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupationTakeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupationTakeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupationTakeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupationTakeList::MergeFrom(const OccupationTakeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupationTakeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupationTakeList::CopyFrom(const OccupationTakeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupationTakeList::IsInitialized() const {

  return true;
}

void OccupationTakeList::Swap(OccupationTakeList* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupationTakeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupationTakeList_descriptor_;
  metadata.reflection = OccupationTakeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComStarInfo::kIdFieldNumber;
const int ComStarInfo::kStarLvFieldNumber;
#endif  // !_MSC_VER

ComStarInfo::ComStarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComStarInfo::InitAsDefaultInstance() {
}

ComStarInfo::ComStarInfo(const ComStarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComStarInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  star_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComStarInfo::~ComStarInfo() {
  SharedDtor();
}

void ComStarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComStarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComStarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComStarInfo_descriptor_;
}

const ComStarInfo& ComStarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ComStarInfo* ComStarInfo::default_instance_ = NULL;

ComStarInfo* ComStarInfo::New() const {
  return new ComStarInfo;
}

void ComStarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    star_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComStarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_lv;
        break;
      }

      // optional int32 star_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_lv_)));
          set_has_star_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComStarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 star_lv = 2;
  if (has_star_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComStarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 star_lv = 2;
  if (has_star_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComStarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 star_lv = 2;
    if (has_star_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComStarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComStarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComStarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComStarInfo::MergeFrom(const ComStarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star_lv()) {
      set_star_lv(from.star_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComStarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComStarInfo::CopyFrom(const ComStarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComStarInfo::IsInitialized() const {

  return true;
}

void ComStarInfo::Swap(ComStarInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_lv_, other->star_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComStarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComStarInfo_descriptor_;
  metadata.reflection = ComStarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBHeadSetData::kHeadListFieldNumber;
const int CharacterDBHeadSetData::kCurHeadIdFieldNumber;
const int CharacterDBHeadSetData::kFrameListFieldNumber;
const int CharacterDBHeadSetData::kCurFrameIdFieldNumber;
const int CharacterDBHeadSetData::kBubbleListFieldNumber;
const int CharacterDBHeadSetData::kCurBubbleIdFieldNumber;
#endif  // !_MSC_VER

CharacterDBHeadSetData::CharacterDBHeadSetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBHeadSetData::InitAsDefaultInstance() {
}

CharacterDBHeadSetData::CharacterDBHeadSetData(const CharacterDBHeadSetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBHeadSetData::SharedCtor() {
  _cached_size_ = 0;
  cur_head_id_ = GOOGLE_ULONGLONG(0);
  cur_frame_id_ = GOOGLE_ULONGLONG(0);
  cur_bubble_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBHeadSetData::~CharacterDBHeadSetData() {
  SharedDtor();
}

void CharacterDBHeadSetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBHeadSetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBHeadSetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBHeadSetData_descriptor_;
}

const CharacterDBHeadSetData& CharacterDBHeadSetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBHeadSetData* CharacterDBHeadSetData::default_instance_ = NULL;

CharacterDBHeadSetData* CharacterDBHeadSetData::New() const {
  return new CharacterDBHeadSetData;
}

void CharacterDBHeadSetData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_head_id_ = GOOGLE_ULONGLONG(0);
    cur_frame_id_ = GOOGLE_ULONGLONG(0);
    cur_bubble_id_ = GOOGLE_ULONGLONG(0);
  }
  headlist_.Clear();
  framelist_.Clear();
  bubblelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBHeadSetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComStarInfo headList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_headList;
        if (input->ExpectTag(16)) goto parse_cur_head_id;
        break;
      }

      // optional uint64 cur_head_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_head_id_)));
          set_has_cur_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_frameList;
        break;
      }

      // repeated .proto_ff.ComStarInfo frameList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_framelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_frameList;
        if (input->ExpectTag(32)) goto parse_cur_frame_id;
        break;
      }

      // optional uint64 cur_frame_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_frame_id_)));
          set_has_cur_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bubbleList;
        break;
      }

      // repeated .proto_ff.ComStarInfo bubbleList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bubbleList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bubblelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bubbleList;
        if (input->ExpectTag(48)) goto parse_cur_bubble_id;
        break;
      }

      // optional uint64 cur_bubble_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_bubble_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_bubble_id_)));
          set_has_cur_bubble_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBHeadSetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComStarInfo headList = 1;
  for (int i = 0; i < this->headlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->headlist(i), output);
  }

  // optional uint64 cur_head_id = 2;
  if (has_cur_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_head_id(), output);
  }

  // repeated .proto_ff.ComStarInfo frameList = 3;
  for (int i = 0; i < this->framelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->framelist(i), output);
  }

  // optional uint64 cur_frame_id = 4;
  if (has_cur_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cur_frame_id(), output);
  }

  // repeated .proto_ff.ComStarInfo bubbleList = 5;
  for (int i = 0; i < this->bubblelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bubblelist(i), output);
  }

  // optional uint64 cur_bubble_id = 6;
  if (has_cur_bubble_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cur_bubble_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBHeadSetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComStarInfo headList = 1;
  for (int i = 0; i < this->headlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->headlist(i), target);
  }

  // optional uint64 cur_head_id = 2;
  if (has_cur_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_head_id(), target);
  }

  // repeated .proto_ff.ComStarInfo frameList = 3;
  for (int i = 0; i < this->framelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->framelist(i), target);
  }

  // optional uint64 cur_frame_id = 4;
  if (has_cur_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cur_frame_id(), target);
  }

  // repeated .proto_ff.ComStarInfo bubbleList = 5;
  for (int i = 0; i < this->bubblelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bubblelist(i), target);
  }

  // optional uint64 cur_bubble_id = 6;
  if (has_cur_bubble_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cur_bubble_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBHeadSetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 cur_head_id = 2;
    if (has_cur_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_head_id());
    }

    // optional uint64 cur_frame_id = 4;
    if (has_cur_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_frame_id());
    }

    // optional uint64 cur_bubble_id = 6;
    if (has_cur_bubble_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_bubble_id());
    }

  }
  // repeated .proto_ff.ComStarInfo headList = 1;
  total_size += 1 * this->headlist_size();
  for (int i = 0; i < this->headlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headlist(i));
  }

  // repeated .proto_ff.ComStarInfo frameList = 3;
  total_size += 1 * this->framelist_size();
  for (int i = 0; i < this->framelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->framelist(i));
  }

  // repeated .proto_ff.ComStarInfo bubbleList = 5;
  total_size += 1 * this->bubblelist_size();
  for (int i = 0; i < this->bubblelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bubblelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBHeadSetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBHeadSetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBHeadSetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBHeadSetData::MergeFrom(const CharacterDBHeadSetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  headlist_.MergeFrom(from.headlist_);
  framelist_.MergeFrom(from.framelist_);
  bubblelist_.MergeFrom(from.bubblelist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_head_id()) {
      set_cur_head_id(from.cur_head_id());
    }
    if (from.has_cur_frame_id()) {
      set_cur_frame_id(from.cur_frame_id());
    }
    if (from.has_cur_bubble_id()) {
      set_cur_bubble_id(from.cur_bubble_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBHeadSetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBHeadSetData::CopyFrom(const CharacterDBHeadSetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBHeadSetData::IsInitialized() const {

  return true;
}

void CharacterDBHeadSetData::Swap(CharacterDBHeadSetData* other) {
  if (other != this) {
    headlist_.Swap(&other->headlist_);
    std::swap(cur_head_id_, other->cur_head_id_);
    framelist_.Swap(&other->framelist_);
    std::swap(cur_frame_id_, other->cur_frame_id_);
    bubblelist_.Swap(&other->bubblelist_);
    std::swap(cur_bubble_id_, other->cur_bubble_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBHeadSetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBHeadSetData_descriptor_;
  metadata.reflection = CharacterDBHeadSetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBOnlineGiftInfo::kIdFieldNumber;
const int CharacterDBOnlineGiftInfo::kStateFieldNumber;
#endif  // !_MSC_VER

CharacterDBOnlineGiftInfo::CharacterDBOnlineGiftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBOnlineGiftInfo::InitAsDefaultInstance() {
}

CharacterDBOnlineGiftInfo::CharacterDBOnlineGiftInfo(const CharacterDBOnlineGiftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBOnlineGiftInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBOnlineGiftInfo::~CharacterDBOnlineGiftInfo() {
  SharedDtor();
}

void CharacterDBOnlineGiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBOnlineGiftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBOnlineGiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBOnlineGiftInfo_descriptor_;
}

const CharacterDBOnlineGiftInfo& CharacterDBOnlineGiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBOnlineGiftInfo* CharacterDBOnlineGiftInfo::default_instance_ = NULL;

CharacterDBOnlineGiftInfo* CharacterDBOnlineGiftInfo::New() const {
  return new CharacterDBOnlineGiftInfo;
}

void CharacterDBOnlineGiftInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBOnlineGiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBOnlineGiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBOnlineGiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBOnlineGiftInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBOnlineGiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBOnlineGiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBOnlineGiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBOnlineGiftInfo::MergeFrom(const CharacterDBOnlineGiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBOnlineGiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBOnlineGiftInfo::CopyFrom(const CharacterDBOnlineGiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBOnlineGiftInfo::IsInitialized() const {

  return true;
}

void CharacterDBOnlineGiftInfo::Swap(CharacterDBOnlineGiftInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBOnlineGiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBOnlineGiftInfo_descriptor_;
  metadata.reflection = CharacterDBOnlineGiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBOnlineGiftData::kOnlineTimeFieldNumber;
const int CharacterDBOnlineGiftData::kInfosFieldNumber;
const int CharacterDBOnlineGiftData::kResetDayFieldNumber;
const int CharacterDBOnlineGiftData::kLasttimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBOnlineGiftData::CharacterDBOnlineGiftData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBOnlineGiftData::InitAsDefaultInstance() {
}

CharacterDBOnlineGiftData::CharacterDBOnlineGiftData(const CharacterDBOnlineGiftData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBOnlineGiftData::SharedCtor() {
  _cached_size_ = 0;
  online_time_ = 0;
  reset_day_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBOnlineGiftData::~CharacterDBOnlineGiftData() {
  SharedDtor();
}

void CharacterDBOnlineGiftData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBOnlineGiftData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBOnlineGiftData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBOnlineGiftData_descriptor_;
}

const CharacterDBOnlineGiftData& CharacterDBOnlineGiftData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBOnlineGiftData* CharacterDBOnlineGiftData::default_instance_ = NULL;

CharacterDBOnlineGiftData* CharacterDBOnlineGiftData::New() const {
  return new CharacterDBOnlineGiftData;
}

void CharacterDBOnlineGiftData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_time_ = 0;
    reset_day_ = 0;
    lasttime_ = GOOGLE_LONGLONG(0);
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBOnlineGiftData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 online_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.CharacterDBOnlineGiftInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_reset_day;
        break;
      }

      // optional int32 reset_day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_day_)));
          set_has_reset_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lasttime;
        break;
      }

      // optional int64 lasttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBOnlineGiftData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 online_time = 1;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->online_time(), output);
  }

  // repeated .proto_ff.CharacterDBOnlineGiftInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int32 reset_day = 3;
  if (has_reset_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reset_day(), output);
  }

  // optional int64 lasttime = 4;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBOnlineGiftData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 online_time = 1;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->online_time(), target);
  }

  // repeated .proto_ff.CharacterDBOnlineGiftInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional int32 reset_day = 3;
  if (has_reset_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reset_day(), target);
  }

  // optional int64 lasttime = 4;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBOnlineGiftData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 online_time = 1;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_time());
    }

    // optional int32 reset_day = 3;
    if (has_reset_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_day());
    }

    // optional int64 lasttime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

  }
  // repeated .proto_ff.CharacterDBOnlineGiftInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBOnlineGiftData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBOnlineGiftData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBOnlineGiftData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBOnlineGiftData::MergeFrom(const CharacterDBOnlineGiftData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
    if (from.has_reset_day()) {
      set_reset_day(from.reset_day());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBOnlineGiftData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBOnlineGiftData::CopyFrom(const CharacterDBOnlineGiftData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBOnlineGiftData::IsInitialized() const {

  return true;
}

void CharacterDBOnlineGiftData::Swap(CharacterDBOnlineGiftData* other) {
  if (other != this) {
    std::swap(online_time_, other->online_time_);
    infos_.Swap(&other->infos_);
    std::swap(reset_day_, other->reset_day_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBOnlineGiftData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBOnlineGiftData_descriptor_;
  metadata.reflection = CharacterDBOnlineGiftData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharDropItemDBProto::kItemidFieldNumber;
const int CharDropItemDBProto::kNumFieldNumber;
#endif  // !_MSC_VER

CharDropItemDBProto::CharDropItemDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharDropItemDBProto::InitAsDefaultInstance() {
}

CharDropItemDBProto::CharDropItemDBProto(const CharDropItemDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharDropItemDBProto::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharDropItemDBProto::~CharDropItemDBProto() {
  SharedDtor();
}

void CharDropItemDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharDropItemDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharDropItemDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharDropItemDBProto_descriptor_;
}

const CharDropItemDBProto& CharDropItemDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharDropItemDBProto* CharDropItemDBProto::default_instance_ = NULL;

CharDropItemDBProto* CharDropItemDBProto::New() const {
  return new CharDropItemDBProto;
}

void CharDropItemDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_ULONGLONG(0);
    num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharDropItemDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharDropItemDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharDropItemDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharDropItemDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharDropItemDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharDropItemDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharDropItemDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharDropItemDBProto::MergeFrom(const CharDropItemDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharDropItemDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharDropItemDBProto::CopyFrom(const CharDropItemDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharDropItemDBProto::IsInitialized() const {

  return true;
}

void CharDropItemDBProto::Swap(CharDropItemDBProto* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharDropItemDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharDropItemDBProto_descriptor_;
  metadata.reflection = CharDropItemDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharDropMultItemDBProto::kInfoFieldNumber;
#endif  // !_MSC_VER

CharDropMultItemDBProto::CharDropMultItemDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharDropMultItemDBProto::InitAsDefaultInstance() {
}

CharDropMultItemDBProto::CharDropMultItemDBProto(const CharDropMultItemDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharDropMultItemDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharDropMultItemDBProto::~CharDropMultItemDBProto() {
  SharedDtor();
}

void CharDropMultItemDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharDropMultItemDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharDropMultItemDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharDropMultItemDBProto_descriptor_;
}

const CharDropMultItemDBProto& CharDropMultItemDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharDropMultItemDBProto* CharDropMultItemDBProto::default_instance_ = NULL;

CharDropMultItemDBProto* CharDropMultItemDBProto::New() const {
  return new CharDropMultItemDBProto;
}

void CharDropMultItemDBProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharDropMultItemDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharDropItemDBProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharDropMultItemDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharDropItemDBProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharDropMultItemDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharDropItemDBProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharDropMultItemDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharDropItemDBProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharDropMultItemDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharDropMultItemDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharDropMultItemDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharDropMultItemDBProto::MergeFrom(const CharDropMultItemDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharDropMultItemDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharDropMultItemDBProto::CopyFrom(const CharDropMultItemDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharDropMultItemDBProto::IsInitialized() const {

  return true;
}

void CharDropMultItemDBProto::Swap(CharDropMultItemDBProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharDropMultItemDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharDropMultItemDBProto_descriptor_;
  metadata.reflection = CharDropMultItemDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharDropLimitDBData::kLimitFieldNumber;
const int CharDropLimitDBData::kFreshTimeFieldNumber;
#endif  // !_MSC_VER

CharDropLimitDBData::CharDropLimitDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharDropLimitDBData::InitAsDefaultInstance() {
  limit_ = const_cast< ::proto_ff::CharDropMultItemDBProto*>(&::proto_ff::CharDropMultItemDBProto::default_instance());
}

CharDropLimitDBData::CharDropLimitDBData(const CharDropLimitDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharDropLimitDBData::SharedCtor() {
  _cached_size_ = 0;
  limit_ = NULL;
  fresh_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharDropLimitDBData::~CharDropLimitDBData() {
  SharedDtor();
}

void CharDropLimitDBData::SharedDtor() {
  if (this != default_instance_) {
    delete limit_;
  }
}

void CharDropLimitDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharDropLimitDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharDropLimitDBData_descriptor_;
}

const CharDropLimitDBData& CharDropLimitDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharDropLimitDBData* CharDropLimitDBData::default_instance_ = NULL;

CharDropLimitDBData* CharDropLimitDBData::New() const {
  return new CharDropLimitDBData;
}

void CharDropLimitDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_limit()) {
      if (limit_ != NULL) limit_->::proto_ff::CharDropMultItemDBProto::Clear();
    }
    fresh_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharDropLimitDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CharDropMultItemDBProto limit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fresh_time;
        break;
      }

      // optional uint64 fresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fresh_time_)));
          set_has_fresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharDropLimitDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CharDropMultItemDBProto limit = 1;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->limit(), output);
  }

  // optional uint64 fresh_time = 2;
  if (has_fresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharDropLimitDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CharDropMultItemDBProto limit = 1;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->limit(), target);
  }

  // optional uint64 fresh_time = 2;
  if (has_fresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharDropLimitDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CharDropMultItemDBProto limit = 1;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit());
    }

    // optional uint64 fresh_time = 2;
    if (has_fresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fresh_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharDropLimitDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharDropLimitDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharDropLimitDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharDropLimitDBData::MergeFrom(const CharDropLimitDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit()) {
      mutable_limit()->::proto_ff::CharDropMultItemDBProto::MergeFrom(from.limit());
    }
    if (from.has_fresh_time()) {
      set_fresh_time(from.fresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharDropLimitDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharDropLimitDBData::CopyFrom(const CharDropLimitDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharDropLimitDBData::IsInitialized() const {

  return true;
}

void CharDropLimitDBData::Swap(CharDropLimitDBData* other) {
  if (other != this) {
    std::swap(limit_, other->limit_);
    std::swap(fresh_time_, other->fresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharDropLimitDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharDropLimitDBData_descriptor_;
  metadata.reflection = CharDropLimitDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBGmHelpData::kTimeEndFieldNumber;
const int CharacterDBGmHelpData::kHelpTimeFieldNumber;
const int CharacterDBGmHelpData::kHelpDayFieldNumber;
const int CharacterDBGmHelpData::kApplyTimeFieldNumber;
const int CharacterDBGmHelpData::kApplyDayFieldNumber;
const int CharacterDBGmHelpData::kHelpcidFieldNumber;
const int CharacterDBGmHelpData::kHelpStateFieldNumber;
const int CharacterDBGmHelpData::kApplyResultFieldNumber;
#endif  // !_MSC_VER

CharacterDBGmHelpData::CharacterDBGmHelpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBGmHelpData::InitAsDefaultInstance() {
}

CharacterDBGmHelpData::CharacterDBGmHelpData(const CharacterDBGmHelpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBGmHelpData::SharedCtor() {
  _cached_size_ = 0;
  timeend_ = GOOGLE_LONGLONG(0);
  helptime_ = GOOGLE_LONGLONG(0);
  helpday_ = 0;
  applytime_ = GOOGLE_LONGLONG(0);
  applyday_ = 0;
  helpcid_ = GOOGLE_LONGLONG(0);
  applyresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBGmHelpData::~CharacterDBGmHelpData() {
  SharedDtor();
}

void CharacterDBGmHelpData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBGmHelpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBGmHelpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBGmHelpData_descriptor_;
}

const CharacterDBGmHelpData& CharacterDBGmHelpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBGmHelpData* CharacterDBGmHelpData::default_instance_ = NULL;

CharacterDBGmHelpData* CharacterDBGmHelpData::New() const {
  return new CharacterDBGmHelpData;
}

void CharacterDBGmHelpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeend_ = GOOGLE_LONGLONG(0);
    helptime_ = GOOGLE_LONGLONG(0);
    helpday_ = 0;
    applytime_ = GOOGLE_LONGLONG(0);
    applyday_ = 0;
    helpcid_ = GOOGLE_LONGLONG(0);
    applyresult_ = 0;
  }
  helpstate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBGmHelpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timeEnd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_helpTime;
        break;
      }

      // optional int64 helpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &helptime_)));
          set_has_helptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_helpDay;
        break;
      }

      // optional int32 helpDay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpday_)));
          set_has_helpday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_applyTime;
        break;
      }

      // optional int64 applyTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &applytime_)));
          set_has_applytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_applyDay;
        break;
      }

      // optional int32 applyDay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applyday_)));
          set_has_applyday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_helpcid;
        break;
      }

      // optional int64 helpcid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &helpcid_)));
          set_has_helpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_helpState;
        break;
      }

      // repeated .proto_ff.ComPair helpState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helpState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helpstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_helpState;
        if (input->ExpectTag(64)) goto parse_applyResult;
        break;
      }

      // optional int32 applyResult = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applyresult_)));
          set_has_applyresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBGmHelpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timeEnd = 1;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timeend(), output);
  }

  // optional int64 helpTime = 2;
  if (has_helptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->helptime(), output);
  }

  // optional int32 helpDay = 3;
  if (has_helpday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->helpday(), output);
  }

  // optional int64 applyTime = 4;
  if (has_applytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->applytime(), output);
  }

  // optional int32 applyDay = 5;
  if (has_applyday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->applyday(), output);
  }

  // optional int64 helpcid = 6;
  if (has_helpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->helpcid(), output);
  }

  // repeated .proto_ff.ComPair helpState = 7;
  for (int i = 0; i < this->helpstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->helpstate(i), output);
  }

  // optional int32 applyResult = 8;
  if (has_applyresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->applyresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBGmHelpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timeEnd = 1;
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timeend(), target);
  }

  // optional int64 helpTime = 2;
  if (has_helptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->helptime(), target);
  }

  // optional int32 helpDay = 3;
  if (has_helpday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->helpday(), target);
  }

  // optional int64 applyTime = 4;
  if (has_applytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->applytime(), target);
  }

  // optional int32 applyDay = 5;
  if (has_applyday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->applyday(), target);
  }

  // optional int64 helpcid = 6;
  if (has_helpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->helpcid(), target);
  }

  // repeated .proto_ff.ComPair helpState = 7;
  for (int i = 0; i < this->helpstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->helpstate(i), target);
  }

  // optional int32 applyResult = 8;
  if (has_applyresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->applyresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBGmHelpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timeEnd = 1;
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeend());
    }

    // optional int64 helpTime = 2;
    if (has_helptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->helptime());
    }

    // optional int32 helpDay = 3;
    if (has_helpday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpday());
    }

    // optional int64 applyTime = 4;
    if (has_applytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->applytime());
    }

    // optional int32 applyDay = 5;
    if (has_applyday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applyday());
    }

    // optional int64 helpcid = 6;
    if (has_helpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->helpcid());
    }

    // optional int32 applyResult = 8;
    if (has_applyresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applyresult());
    }

  }
  // repeated .proto_ff.ComPair helpState = 7;
  total_size += 1 * this->helpstate_size();
  for (int i = 0; i < this->helpstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helpstate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBGmHelpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBGmHelpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBGmHelpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBGmHelpData::MergeFrom(const CharacterDBGmHelpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  helpstate_.MergeFrom(from.helpstate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_helptime()) {
      set_helptime(from.helptime());
    }
    if (from.has_helpday()) {
      set_helpday(from.helpday());
    }
    if (from.has_applytime()) {
      set_applytime(from.applytime());
    }
    if (from.has_applyday()) {
      set_applyday(from.applyday());
    }
    if (from.has_helpcid()) {
      set_helpcid(from.helpcid());
    }
    if (from.has_applyresult()) {
      set_applyresult(from.applyresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBGmHelpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBGmHelpData::CopyFrom(const CharacterDBGmHelpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBGmHelpData::IsInitialized() const {

  return true;
}

void CharacterDBGmHelpData::Swap(CharacterDBGmHelpData* other) {
  if (other != this) {
    std::swap(timeend_, other->timeend_);
    std::swap(helptime_, other->helptime_);
    std::swap(helpday_, other->helpday_);
    std::swap(applytime_, other->applytime_);
    std::swap(applyday_, other->applyday_);
    std::swap(helpcid_, other->helpcid_);
    helpstate_.Swap(&other->helpstate_);
    std::swap(applyresult_, other->applyresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBGmHelpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBGmHelpData_descriptor_;
  metadata.reflection = CharacterDBGmHelpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToolsDB::kGiftsFieldNumber;
const int GMToolsDB::kUnlimitsFieldNumber;
const int GMToolsDB::kRefreshTimeFieldNumber;
const int GMToolsDB::kCurUseFieldNumber;
#endif  // !_MSC_VER

GMToolsDB::GMToolsDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToolsDB::InitAsDefaultInstance() {
}

GMToolsDB::GMToolsDB(const GMToolsDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToolsDB::SharedCtor() {
  _cached_size_ = 0;
  refresh_time_ = GOOGLE_ULONGLONG(0);
  cur_use_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToolsDB::~GMToolsDB() {
  SharedDtor();
}

void GMToolsDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToolsDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToolsDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToolsDB_descriptor_;
}

const GMToolsDB& GMToolsDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

GMToolsDB* GMToolsDB::default_instance_ = NULL;

GMToolsDB* GMToolsDB::New() const {
  return new GMToolsDB;
}

void GMToolsDB::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    refresh_time_ = GOOGLE_ULONGLONG(0);
    cur_use_ = GOOGLE_ULONGLONG(0);
  }
  gifts_.Clear();
  unlimits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToolsDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 gifts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gifts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_gifts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gifts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_gifts;
        if (input->ExpectTag(18)) goto parse_unlimits;
        break;
      }

      // repeated .proto_ff.ComPair unlimits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlimits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unlimits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unlimits;
        if (input->ExpectTag(24)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_use;
        break;
      }

      // optional uint64 cur_use = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_use_)));
          set_has_cur_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToolsDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 gifts = 1;
  for (int i = 0; i < this->gifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->gifts(i), output);
  }

  // repeated .proto_ff.ComPair unlimits = 2;
  for (int i = 0; i < this->unlimits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unlimits(i), output);
  }

  // optional uint64 refresh_time = 3;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->refresh_time(), output);
  }

  // optional uint64 cur_use = 4;
  if (has_cur_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cur_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToolsDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 gifts = 1;
  for (int i = 0; i < this->gifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->gifts(i), target);
  }

  // repeated .proto_ff.ComPair unlimits = 2;
  for (int i = 0; i < this->unlimits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unlimits(i), target);
  }

  // optional uint64 refresh_time = 3;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->refresh_time(), target);
  }

  // optional uint64 cur_use = 4;
  if (has_cur_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cur_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToolsDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 refresh_time = 3;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

    // optional uint64 cur_use = 4;
    if (has_cur_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_use());
    }

  }
  // repeated int32 gifts = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->gifts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gifts(i));
    }
    total_size += 1 * this->gifts_size() + data_size;
  }

  // repeated .proto_ff.ComPair unlimits = 2;
  total_size += 1 * this->unlimits_size();
  for (int i = 0; i < this->unlimits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unlimits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToolsDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToolsDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToolsDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToolsDB::MergeFrom(const GMToolsDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  gifts_.MergeFrom(from.gifts_);
  unlimits_.MergeFrom(from.unlimits_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_cur_use()) {
      set_cur_use(from.cur_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToolsDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToolsDB::CopyFrom(const GMToolsDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToolsDB::IsInitialized() const {

  return true;
}

void GMToolsDB::Swap(GMToolsDB* other) {
  if (other != this) {
    gifts_.Swap(&other->gifts_);
    unlimits_.Swap(&other->unlimits_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(cur_use_, other->cur_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToolsDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToolsDB_descriptor_;
  metadata.reflection = GMToolsDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBGodGMData::kCurTypeFieldNumber;
const int CharacterDBGodGMData::kTimeEndFieldNumber;
const int CharacterDBGodGMData::kCurExchangeNumFieldNumber;
const int CharacterDBGodGMData::kNormalGiftStateFieldNumber;
const int CharacterDBGodGMData::kSeniorGiftStateFieldNumber;
const int CharacterDBGodGMData::kLastTimeFieldNumber;
const int CharacterDBGodGMData::kUnlockFieldNumber;
const int CharacterDBGodGMData::kGmtoolFieldNumber;
#endif  // !_MSC_VER

CharacterDBGodGMData::CharacterDBGodGMData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBGodGMData::InitAsDefaultInstance() {
  gmtool_ = const_cast< ::proto_ff::GMToolsDB*>(&::proto_ff::GMToolsDB::default_instance());
}

CharacterDBGodGMData::CharacterDBGodGMData(const CharacterDBGodGMData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBGodGMData::SharedCtor() {
  _cached_size_ = 0;
  curtype_ = 0;
  timeend_ = GOOGLE_LONGLONG(0);
  curexchangenum_ = 0;
  normalgiftstate_ = 0;
  seniorgiftstate_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  unlock_ = 0;
  gmtool_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBGodGMData::~CharacterDBGodGMData() {
  SharedDtor();
}

void CharacterDBGodGMData::SharedDtor() {
  if (this != default_instance_) {
    delete gmtool_;
  }
}

void CharacterDBGodGMData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBGodGMData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBGodGMData_descriptor_;
}

const CharacterDBGodGMData& CharacterDBGodGMData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBGodGMData* CharacterDBGodGMData::default_instance_ = NULL;

CharacterDBGodGMData* CharacterDBGodGMData::New() const {
  return new CharacterDBGodGMData;
}

void CharacterDBGodGMData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curtype_ = 0;
    timeend_ = GOOGLE_LONGLONG(0);
    curexchangenum_ = 0;
    normalgiftstate_ = 0;
    seniorgiftstate_ = 0;
    lasttime_ = GOOGLE_LONGLONG(0);
    unlock_ = 0;
    if (has_gmtool()) {
      if (gmtool_ != NULL) gmtool_->::proto_ff::GMToolsDB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBGodGMData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtype_)));
          set_has_curtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeEnd;
        break;
      }

      // optional int64 timeEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curExchangeNum;
        break;
      }

      // optional int32 curExchangeNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExchangeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curexchangenum_)));
          set_has_curexchangenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_normalGiftState;
        break;
      }

      // optional int32 normalGiftState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalGiftState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normalgiftstate_)));
          set_has_normalgiftstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seniorGiftState;
        break;
      }

      // optional int32 seniorGiftState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seniorGiftState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seniorgiftstate_)));
          set_has_seniorgiftstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastTime;
        break;
      }

      // optional int64 lastTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_gmtool;
        break;
      }

      // optional .proto_ff.GMToolsDB gmtool = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmtool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gmtool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBGodGMData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 curType = 1;
  if (has_curtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curtype(), output);
  }

  // optional int64 timeEnd = 2;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timeend(), output);
  }

  // optional int32 curExchangeNum = 3;
  if (has_curexchangenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curexchangenum(), output);
  }

  // optional int32 normalGiftState = 4;
  if (has_normalgiftstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->normalgiftstate(), output);
  }

  // optional int32 seniorGiftState = 5;
  if (has_seniorgiftstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seniorgiftstate(), output);
  }

  // optional int64 lastTime = 6;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lasttime(), output);
  }

  // optional int32 unlock = 7;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unlock(), output);
  }

  // optional .proto_ff.GMToolsDB gmtool = 8;
  if (has_gmtool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gmtool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBGodGMData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 curType = 1;
  if (has_curtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curtype(), target);
  }

  // optional int64 timeEnd = 2;
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timeend(), target);
  }

  // optional int32 curExchangeNum = 3;
  if (has_curexchangenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curexchangenum(), target);
  }

  // optional int32 normalGiftState = 4;
  if (has_normalgiftstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->normalgiftstate(), target);
  }

  // optional int32 seniorGiftState = 5;
  if (has_seniorgiftstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seniorgiftstate(), target);
  }

  // optional int64 lastTime = 6;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lasttime(), target);
  }

  // optional int32 unlock = 7;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unlock(), target);
  }

  // optional .proto_ff.GMToolsDB gmtool = 8;
  if (has_gmtool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gmtool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBGodGMData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curType = 1;
    if (has_curtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtype());
    }

    // optional int64 timeEnd = 2;
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeend());
    }

    // optional int32 curExchangeNum = 3;
    if (has_curexchangenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curexchangenum());
    }

    // optional int32 normalGiftState = 4;
    if (has_normalgiftstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normalgiftstate());
    }

    // optional int32 seniorGiftState = 5;
    if (has_seniorgiftstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seniorgiftstate());
    }

    // optional int64 lastTime = 6;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional int32 unlock = 7;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

    // optional .proto_ff.GMToolsDB gmtool = 8;
    if (has_gmtool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gmtool());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBGodGMData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBGodGMData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBGodGMData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBGodGMData::MergeFrom(const CharacterDBGodGMData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curtype()) {
      set_curtype(from.curtype());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_curexchangenum()) {
      set_curexchangenum(from.curexchangenum());
    }
    if (from.has_normalgiftstate()) {
      set_normalgiftstate(from.normalgiftstate());
    }
    if (from.has_seniorgiftstate()) {
      set_seniorgiftstate(from.seniorgiftstate());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_gmtool()) {
      mutable_gmtool()->::proto_ff::GMToolsDB::MergeFrom(from.gmtool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBGodGMData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBGodGMData::CopyFrom(const CharacterDBGodGMData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBGodGMData::IsInitialized() const {

  return true;
}

void CharacterDBGodGMData::Swap(CharacterDBGodGMData* other) {
  if (other != this) {
    std::swap(curtype_, other->curtype_);
    std::swap(timeend_, other->timeend_);
    std::swap(curexchangenum_, other->curexchangenum_);
    std::swap(normalgiftstate_, other->normalgiftstate_);
    std::swap(seniorgiftstate_, other->seniorgiftstate_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(unlock_, other->unlock_);
    std::swap(gmtool_, other->gmtool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBGodGMData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBGodGMData_descriptor_;
  metadata.reflection = CharacterDBGodGMData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BowlDBRewardProto::kRechargeIdFieldNumber;
const int BowlDBRewardProto::kCountFieldNumber;
#endif  // !_MSC_VER

BowlDBRewardProto::BowlDBRewardProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BowlDBRewardProto::InitAsDefaultInstance() {
}

BowlDBRewardProto::BowlDBRewardProto(const BowlDBRewardProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BowlDBRewardProto::SharedCtor() {
  _cached_size_ = 0;
  recharge_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BowlDBRewardProto::~BowlDBRewardProto() {
  SharedDtor();
}

void BowlDBRewardProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BowlDBRewardProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BowlDBRewardProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BowlDBRewardProto_descriptor_;
}

const BowlDBRewardProto& BowlDBRewardProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

BowlDBRewardProto* BowlDBRewardProto::default_instance_ = NULL;

BowlDBRewardProto* BowlDBRewardProto::New() const {
  return new BowlDBRewardProto;
}

void BowlDBRewardProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recharge_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BowlDBRewardProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recharge_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_id_)));
          set_has_recharge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BowlDBRewardProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 recharge_id = 1;
  if (has_recharge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recharge_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BowlDBRewardProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 recharge_id = 1;
  if (has_recharge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recharge_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BowlDBRewardProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 recharge_id = 1;
    if (has_recharge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BowlDBRewardProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BowlDBRewardProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BowlDBRewardProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BowlDBRewardProto::MergeFrom(const BowlDBRewardProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recharge_id()) {
      set_recharge_id(from.recharge_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BowlDBRewardProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BowlDBRewardProto::CopyFrom(const BowlDBRewardProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BowlDBRewardProto::IsInitialized() const {

  return true;
}

void BowlDBRewardProto::Swap(BowlDBRewardProto* other) {
  if (other != this) {
    std::swap(recharge_id_, other->recharge_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BowlDBRewardProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BowlDBRewardProto_descriptor_;
  metadata.reflection = BowlDBRewardProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BowlDBData::kLevelFieldNumber;
const int BowlDBData::kActiveFieldNumber;
const int BowlDBData::kInfoFieldNumber;
#endif  // !_MSC_VER

BowlDBData::BowlDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BowlDBData::InitAsDefaultInstance() {
}

BowlDBData::BowlDBData(const BowlDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BowlDBData::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  active_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BowlDBData::~BowlDBData() {
  SharedDtor();
}

void BowlDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BowlDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BowlDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BowlDBData_descriptor_;
}

const BowlDBData& BowlDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

BowlDBData* BowlDBData::default_instance_ = NULL;

BowlDBData* BowlDBData::New() const {
  return new BowlDBData;
}

void BowlDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    active_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BowlDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // optional int32 active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .proto_ff.BowlDBRewardProto info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BowlDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional int32 active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active(), output);
  }

  // repeated .proto_ff.BowlDBRewardProto info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BowlDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional int32 active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->active(), target);
  }

  // repeated .proto_ff.BowlDBRewardProto info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BowlDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int32 active = 2;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active());
    }

  }
  // repeated .proto_ff.BowlDBRewardProto info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BowlDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BowlDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BowlDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BowlDBData::MergeFrom(const BowlDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BowlDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BowlDBData::CopyFrom(const BowlDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BowlDBData::IsInitialized() const {

  return true;
}

void BowlDBData::Swap(BowlDBData* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(active_, other->active_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BowlDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BowlDBData_descriptor_;
  metadata.reflection = BowlDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HidePeriodDBProto::kIdFieldNumber;
const int HidePeriodDBProto::kTotalFieldNumber;
const int HidePeriodDBProto::kRewardFieldNumber;
const int HidePeriodDBProto::kLasttimeFieldNumber;
#endif  // !_MSC_VER

HidePeriodDBProto::HidePeriodDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HidePeriodDBProto::InitAsDefaultInstance() {
}

HidePeriodDBProto::HidePeriodDBProto(const HidePeriodDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HidePeriodDBProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  total_ = GOOGLE_ULONGLONG(0);
  reward_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HidePeriodDBProto::~HidePeriodDBProto() {
  SharedDtor();
}

void HidePeriodDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HidePeriodDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HidePeriodDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HidePeriodDBProto_descriptor_;
}

const HidePeriodDBProto& HidePeriodDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

HidePeriodDBProto* HidePeriodDBProto::default_instance_ = NULL;

HidePeriodDBProto* HidePeriodDBProto::New() const {
  return new HidePeriodDBProto;
}

void HidePeriodDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    total_ = GOOGLE_ULONGLONG(0);
    reward_ = 0;
    lasttime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HidePeriodDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional uint64 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional int32 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lasttime;
        break;
      }

      // optional uint64 lasttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HidePeriodDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint64 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total(), output);
  }

  // optional int32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward(), output);
  }

  // optional uint64 lasttime = 4;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HidePeriodDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint64 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total(), target);
  }

  // optional int32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward(), target);
  }

  // optional uint64 lasttime = 4;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HidePeriodDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total());
    }

    // optional int32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional uint64 lasttime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HidePeriodDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HidePeriodDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HidePeriodDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HidePeriodDBProto::MergeFrom(const HidePeriodDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HidePeriodDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HidePeriodDBProto::CopyFrom(const HidePeriodDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HidePeriodDBProto::IsInitialized() const {

  return true;
}

void HidePeriodDBProto::Swap(HidePeriodDBProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(total_, other->total_);
    std::swap(reward_, other->reward_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HidePeriodDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HidePeriodDBProto_descriptor_;
  metadata.reflection = HidePeriodDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBHideData::kForeverQuotaFieldNumber;
const int CharacterDBHideData::kLastTimeFieldNumber;
const int CharacterDBHideData::kUnitQuotaFieldNumber;
const int CharacterDBHideData::kUnitIdsFieldNumber;
const int CharacterDBHideData::kUnitOnceIdsFieldNumber;
const int CharacterDBHideData::kFIdsFieldNumber;
const int CharacterDBHideData::kCtimeFieldNumber;
const int CharacterDBHideData::kDaysFieldNumber;
const int CharacterDBHideData::kPeriodFieldNumber;
#endif  // !_MSC_VER

CharacterDBHideData::CharacterDBHideData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBHideData::InitAsDefaultInstance() {
}

CharacterDBHideData::CharacterDBHideData(const CharacterDBHideData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBHideData::SharedCtor() {
  _cached_size_ = 0;
  forever_quota_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  unit_quota_ = 0;
  ctime_ = GOOGLE_LONGLONG(0);
  days_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBHideData::~CharacterDBHideData() {
  SharedDtor();
}

void CharacterDBHideData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBHideData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBHideData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBHideData_descriptor_;
}

const CharacterDBHideData& CharacterDBHideData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBHideData* CharacterDBHideData::default_instance_ = NULL;

CharacterDBHideData* CharacterDBHideData::New() const {
  return new CharacterDBHideData;
}

void CharacterDBHideData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    forever_quota_ = 0;
    lasttime_ = GOOGLE_LONGLONG(0);
    unit_quota_ = 0;
    ctime_ = GOOGLE_LONGLONG(0);
    days_ = 0;
  }
  unit_ids_.Clear();
  unit_once_ids_.Clear();
  f_ids_.Clear();
  period_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBHideData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 forever_quota = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forever_quota_)));
          set_has_forever_quota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int64 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unit_quota;
        break;
      }

      // optional int32 unit_quota = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_quota_)));
          set_has_unit_quota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unit_ids;
        break;
      }

      // repeated int32 unit_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_unit_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unit_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unit_ids;
        if (input->ExpectTag(40)) goto parse_unit_once_ids;
        break;
      }

      // repeated int32 unit_once_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_once_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_unit_once_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unit_once_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unit_once_ids;
        if (input->ExpectTag(48)) goto parse_f_ids;
        break;
      }

      // repeated int32 f_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_f_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_f_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_f_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_f_ids;
        if (input->ExpectTag(56)) goto parse_ctime;
        break;
      }

      // optional int64 ctime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_days;
        break;
      }

      // optional int32 days = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_period;
        break;
      }

      // repeated .proto_ff.HidePeriodDBProto period = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_period()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_period;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBHideData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 forever_quota = 1;
  if (has_forever_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->forever_quota(), output);
  }

  // optional int64 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lasttime(), output);
  }

  // optional int32 unit_quota = 3;
  if (has_unit_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unit_quota(), output);
  }

  // repeated int32 unit_ids = 4;
  for (int i = 0; i < this->unit_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->unit_ids(i), output);
  }

  // repeated int32 unit_once_ids = 5;
  for (int i = 0; i < this->unit_once_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->unit_once_ids(i), output);
  }

  // repeated int32 f_ids = 6;
  for (int i = 0; i < this->f_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->f_ids(i), output);
  }

  // optional int64 ctime = 7;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ctime(), output);
  }

  // optional int32 days = 8;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->days(), output);
  }

  // repeated .proto_ff.HidePeriodDBProto period = 9;
  for (int i = 0; i < this->period_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->period(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBHideData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 forever_quota = 1;
  if (has_forever_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->forever_quota(), target);
  }

  // optional int64 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lasttime(), target);
  }

  // optional int32 unit_quota = 3;
  if (has_unit_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unit_quota(), target);
  }

  // repeated int32 unit_ids = 4;
  for (int i = 0; i < this->unit_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->unit_ids(i), target);
  }

  // repeated int32 unit_once_ids = 5;
  for (int i = 0; i < this->unit_once_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->unit_once_ids(i), target);
  }

  // repeated int32 f_ids = 6;
  for (int i = 0; i < this->f_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->f_ids(i), target);
  }

  // optional int64 ctime = 7;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ctime(), target);
  }

  // optional int32 days = 8;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->days(), target);
  }

  // repeated .proto_ff.HidePeriodDBProto period = 9;
  for (int i = 0; i < this->period_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->period(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBHideData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 forever_quota = 1;
    if (has_forever_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forever_quota());
    }

    // optional int64 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional int32 unit_quota = 3;
    if (has_unit_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_quota());
    }

    // optional int64 ctime = 7;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime());
    }

    // optional int32 days = 8;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days());
    }

  }
  // repeated int32 unit_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->unit_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unit_ids(i));
    }
    total_size += 1 * this->unit_ids_size() + data_size;
  }

  // repeated int32 unit_once_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->unit_once_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unit_once_ids(i));
    }
    total_size += 1 * this->unit_once_ids_size() + data_size;
  }

  // repeated int32 f_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->f_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->f_ids(i));
    }
    total_size += 1 * this->f_ids_size() + data_size;
  }

  // repeated .proto_ff.HidePeriodDBProto period = 9;
  total_size += 1 * this->period_size();
  for (int i = 0; i < this->period_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->period(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBHideData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBHideData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBHideData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBHideData::MergeFrom(const CharacterDBHideData& from) {
  GOOGLE_CHECK_NE(&from, this);
  unit_ids_.MergeFrom(from.unit_ids_);
  unit_once_ids_.MergeFrom(from.unit_once_ids_);
  f_ids_.MergeFrom(from.f_ids_);
  period_.MergeFrom(from.period_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_forever_quota()) {
      set_forever_quota(from.forever_quota());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_unit_quota()) {
      set_unit_quota(from.unit_quota());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBHideData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBHideData::CopyFrom(const CharacterDBHideData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBHideData::IsInitialized() const {

  return true;
}

void CharacterDBHideData::Swap(CharacterDBHideData* other) {
  if (other != this) {
    std::swap(forever_quota_, other->forever_quota_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(unit_quota_, other->unit_quota_);
    unit_ids_.Swap(&other->unit_ids_);
    unit_once_ids_.Swap(&other->unit_once_ids_);
    f_ids_.Swap(&other->f_ids_);
    std::swap(ctime_, other->ctime_);
    std::swap(days_, other->days_);
    period_.Swap(&other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBHideData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBHideData_descriptor_;
  metadata.reflection = CharacterDBHideData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbRoleInfo::kCharIdFieldNumber;
const int tbRoleInfo::kPlayerIdFieldNumber;
const int tbRoleInfo::kBornZoneIdFieldNumber;
const int tbRoleInfo::kCharNameFieldNumber;
const int tbRoleInfo::kPlatIdFieldNumber;
const int tbRoleInfo::kDeletechartimeFieldNumber;
const int tbRoleInfo::kDirtyFieldNumber;
const int tbRoleInfo::kBaseDataFieldNumber;
const int tbRoleInfo::kItemDataFieldNumber;
const int tbRoleInfo::kTaskDataFieldNumber;
const int tbRoleInfo::kSkillDataFieldNumber;
const int tbRoleInfo::kExtendDataFieldNumber;
const int tbRoleInfo::kEquipDataFieldNumber;
const int tbRoleInfo::kDuplicateDataFieldNumber;
const int tbRoleInfo::kAchievementDataFieldNumber;
const int tbRoleInfo::kBuffDataFieldNumber;
const int tbRoleInfo::kArenaDataFieldNumber;
const int tbRoleInfo::kTitleDataFieldNumber;
const int tbRoleInfo::kOperateLimitDataFieldNumber;
const int tbRoleInfo::kHuoYueDuDataFieldNumber;
const int tbRoleInfo::kOperateDataFieldNumber;
const int tbRoleInfo::kPlayerActiveInfoFieldNumber;
const int tbRoleInfo::kCPayDataFieldNumber;
const int tbRoleInfo::kUnlockInfoFieldNumber;
const int tbRoleInfo::kEmblemDataFieldNumber;
const int tbRoleInfo::kIdentifyDataFieldNumber;
const int tbRoleInfo::kElementDataFieldNumber;
const int tbRoleInfo::kFashionDataFieldNumber;
const int tbRoleInfo::kWingDataFieldNumber;
const int tbRoleInfo::kMountDataFieldNumber;
const int tbRoleInfo::kBossDataFieldNumber;
const int tbRoleInfo::kPvpDataFieldNumber;
const int tbRoleInfo::kTreasureDataFieldNumber;
const int tbRoleInfo::kArtifactDataFieldNumber;
const int tbRoleInfo::kFateStarDataFieldNumber;
const int tbRoleInfo::kConvoyDataFieldNumber;
const int tbRoleInfo::kDailyDataFieldNumber;
const int tbRoleInfo::kFieldDataFieldNumber;
const int tbRoleInfo::kVipDataFieldNumber;
const int tbRoleInfo::kPartnerDataFieldNumber;
const int tbRoleInfo::kMallDataFieldNumber;
const int tbRoleInfo::kGodhoodDataFieldNumber;
const int tbRoleInfo::kRecoveryDataFieldNumber;
const int tbRoleInfo::kActivityDataFieldNumber;
const int tbRoleInfo::kSoActivityDataFieldNumber;
const int tbRoleInfo::kUseitemDataFieldNumber;
const int tbRoleInfo::kDayUseItemDataFieldNumber;
const int tbRoleInfo::kMysteryshopDataFieldNumber;
const int tbRoleInfo::kPackagetestrebateDataFieldNumber;
const int tbRoleInfo::kFightDataFieldNumber;
const int tbRoleInfo::kPowerDataFieldNumber;
const int tbRoleInfo::kOccupationDataFieldNumber;
const int tbRoleInfo::kHeadsetDataFieldNumber;
const int tbRoleInfo::kOnlineGiftDataFieldNumber;
const int tbRoleInfo::kDroplimitDataFieldNumber;
const int tbRoleInfo::kGmhelpDataFieldNumber;
const int tbRoleInfo::kGodgmDataFieldNumber;
const int tbRoleInfo::kBowlDataFieldNumber;
const int tbRoleInfo::kBagitemDataFieldNumber;
const int tbRoleInfo::kHideDataFieldNumber;
#endif  // !_MSC_VER

tbRoleInfo::tbRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbRoleInfo::InitAsDefaultInstance() {
  basedata_ = const_cast< ::proto_ff::CharacterDBBaseInfo*>(&::proto_ff::CharacterDBBaseInfo::default_instance());
  itemdata_ = const_cast< ::proto_ff::CharacterDBPackageData*>(&::proto_ff::CharacterDBPackageData::default_instance());
  taskdata_ = const_cast< ::proto_ff::CharacterDBTaskData*>(&::proto_ff::CharacterDBTaskData::default_instance());
  skilldata_ = const_cast< ::proto_ff::CharacterDBSkillData*>(&::proto_ff::CharacterDBSkillData::default_instance());
  extenddata_ = const_cast< ::proto_ff::CharacterDBExtendData*>(&::proto_ff::CharacterDBExtendData::default_instance());
  equipdata_ = const_cast< ::proto_ff::CharacterDBEquipData*>(&::proto_ff::CharacterDBEquipData::default_instance());
  duplicatedata_ = const_cast< ::proto_ff::CharacterDBDuplicateData*>(&::proto_ff::CharacterDBDuplicateData::default_instance());
  achievementdata_ = const_cast< ::proto_ff::CharacterAchievementDBData*>(&::proto_ff::CharacterAchievementDBData::default_instance());
  buffdata_ = const_cast< ::proto_ff::CharacterBuffData*>(&::proto_ff::CharacterBuffData::default_instance());
  arenadata_ = const_cast< ::proto_ff::CharacterArenaData*>(&::proto_ff::CharacterArenaData::default_instance());
  titledata_ = const_cast< ::proto_ff::CharacterTitleSaveData*>(&::proto_ff::CharacterTitleSaveData::default_instance());
  operatelimitdata_ = const_cast< ::proto_ff::CharacterDBOperateLimitInfo*>(&::proto_ff::CharacterDBOperateLimitInfo::default_instance());
  huoyuedudata_ = const_cast< ::proto_ff::CharacterDBHuoYueDuInfo*>(&::proto_ff::CharacterDBHuoYueDuInfo::default_instance());
  operatedata_ = const_cast< ::proto_ff::CharacterDBOperateData*>(&::proto_ff::CharacterDBOperateData::default_instance());
  playeractiveinfo_ = const_cast< ::proto_ff::CharacterDBActiveInfo*>(&::proto_ff::CharacterDBActiveInfo::default_instance());
  cpaydata_ = const_cast< ::proto_ff::CharacterPayData*>(&::proto_ff::CharacterPayData::default_instance());
  unlockinfo_ = const_cast< ::proto_ff::FunctionUnlockInfo*>(&::proto_ff::FunctionUnlockInfo::default_instance());
  emblemdata_ = const_cast< ::proto_ff::CharacterDBEmblemData*>(&::proto_ff::CharacterDBEmblemData::default_instance());
  identifydata_ = const_cast< ::proto_ff::CharacterDBIdentifyData*>(&::proto_ff::CharacterDBIdentifyData::default_instance());
  elementdata_ = const_cast< ::proto_ff::CharacterDBElementData*>(&::proto_ff::CharacterDBElementData::default_instance());
  fashiondata_ = const_cast< ::proto_ff::CharacterDBFashionData*>(&::proto_ff::CharacterDBFashionData::default_instance());
  wingdata_ = const_cast< ::proto_ff::CharacterDBWingData*>(&::proto_ff::CharacterDBWingData::default_instance());
  mountdata_ = const_cast< ::proto_ff::CharacterDBMountData*>(&::proto_ff::CharacterDBMountData::default_instance());
  bossdata_ = const_cast< ::proto_ff::CharacterDBBossData*>(&::proto_ff::CharacterDBBossData::default_instance());
  pvpdata_ = const_cast< ::proto_ff::CharacterDBPvpData*>(&::proto_ff::CharacterDBPvpData::default_instance());
  treasure_data_ = const_cast< ::proto_ff::CharacterDBTreasureData*>(&::proto_ff::CharacterDBTreasureData::default_instance());
  artifact_data_ = const_cast< ::proto_ff::CharacterDBArtifactData*>(&::proto_ff::CharacterDBArtifactData::default_instance());
  fatestardata_ = const_cast< ::proto_ff::CharacterDBFateStarData*>(&::proto_ff::CharacterDBFateStarData::default_instance());
  convoydata_ = const_cast< ::proto_ff::CharacterDBConvoyData*>(&::proto_ff::CharacterDBConvoyData::default_instance());
  daily_data_ = const_cast< ::proto_ff::CharacterDBDailyData*>(&::proto_ff::CharacterDBDailyData::default_instance());
  field_data_ = const_cast< ::proto_ff::CharacterDBFieldData*>(&::proto_ff::CharacterDBFieldData::default_instance());
  vipdata_ = const_cast< ::proto_ff::CharacterDBVipData*>(&::proto_ff::CharacterDBVipData::default_instance());
  partnerdata_ = const_cast< ::proto_ff::CharacterDBPartnerData*>(&::proto_ff::CharacterDBPartnerData::default_instance());
  malldata_ = const_cast< ::proto_ff::CharacterDBMallData*>(&::proto_ff::CharacterDBMallData::default_instance());
  godhooddata_ = const_cast< ::proto_ff::CharacterDBGodhoodData*>(&::proto_ff::CharacterDBGodhoodData::default_instance());
  recoverydata_ = const_cast< ::proto_ff::CharacterDBRecoveryData*>(&::proto_ff::CharacterDBRecoveryData::default_instance());
  activitydata_ = const_cast< ::proto_ff::CharacterDBActivityData*>(&::proto_ff::CharacterDBActivityData::default_instance());
  soactivitydata_ = const_cast< ::proto_ff::CharacterDBSOAcitveData*>(&::proto_ff::CharacterDBSOAcitveData::default_instance());
  useitemdata_ = const_cast< ::proto_ff::CharacterDBUseItemData*>(&::proto_ff::CharacterDBUseItemData::default_instance());
  dayuseitemdata_ = const_cast< ::proto_ff::CharacterDBDayUseItemData*>(&::proto_ff::CharacterDBDayUseItemData::default_instance());
  mysteryshop_data_ = const_cast< ::proto_ff::CharacterDBMysteryShopData*>(&::proto_ff::CharacterDBMysteryShopData::default_instance());
  packagetestrebate_data_ = const_cast< ::proto_ff::CharacterDBPackageTestRebateData*>(&::proto_ff::CharacterDBPackageTestRebateData::default_instance());
  fight_data_ = const_cast< ::proto_ff::FuncFightDBData*>(&::proto_ff::FuncFightDBData::default_instance());
  power_data_ = const_cast< ::proto_ff::PowerInfoDBList*>(&::proto_ff::PowerInfoDBList::default_instance());
  occupation_data_ = const_cast< ::proto_ff::OccupationTakeList*>(&::proto_ff::OccupationTakeList::default_instance());
  headset_data_ = const_cast< ::proto_ff::CharacterDBHeadSetData*>(&::proto_ff::CharacterDBHeadSetData::default_instance());
  online_gift_data_ = const_cast< ::proto_ff::CharacterDBOnlineGiftData*>(&::proto_ff::CharacterDBOnlineGiftData::default_instance());
  droplimit_data_ = const_cast< ::proto_ff::CharDropLimitDBData*>(&::proto_ff::CharDropLimitDBData::default_instance());
  gmhelp_data_ = const_cast< ::proto_ff::CharacterDBGmHelpData*>(&::proto_ff::CharacterDBGmHelpData::default_instance());
  godgm_data_ = const_cast< ::proto_ff::CharacterDBGodGMData*>(&::proto_ff::CharacterDBGodGMData::default_instance());
  bowl_data_ = const_cast< ::proto_ff::BowlDBData*>(&::proto_ff::BowlDBData::default_instance());
  bagitemdata_ = const_cast< ::proto_ff::CharacterDBPackageData*>(&::proto_ff::CharacterDBPackageData::default_instance());
  hide_data_ = const_cast< ::proto_ff::CharacterDBHideData*>(&::proto_ff::CharacterDBHideData::default_instance());
}

tbRoleInfo::tbRoleInfo(const tbRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  bornzoneid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deletechartime_ = GOOGLE_ULONGLONG(0);
  dirty_ = 0;
  basedata_ = NULL;
  itemdata_ = NULL;
  taskdata_ = NULL;
  skilldata_ = NULL;
  extenddata_ = NULL;
  equipdata_ = NULL;
  duplicatedata_ = NULL;
  achievementdata_ = NULL;
  buffdata_ = NULL;
  arenadata_ = NULL;
  titledata_ = NULL;
  operatelimitdata_ = NULL;
  huoyuedudata_ = NULL;
  operatedata_ = NULL;
  playeractiveinfo_ = NULL;
  cpaydata_ = NULL;
  unlockinfo_ = NULL;
  emblemdata_ = NULL;
  identifydata_ = NULL;
  elementdata_ = NULL;
  fashiondata_ = NULL;
  wingdata_ = NULL;
  mountdata_ = NULL;
  bossdata_ = NULL;
  pvpdata_ = NULL;
  treasure_data_ = NULL;
  artifact_data_ = NULL;
  fatestardata_ = NULL;
  convoydata_ = NULL;
  daily_data_ = NULL;
  field_data_ = NULL;
  vipdata_ = NULL;
  partnerdata_ = NULL;
  malldata_ = NULL;
  godhooddata_ = NULL;
  recoverydata_ = NULL;
  activitydata_ = NULL;
  soactivitydata_ = NULL;
  useitemdata_ = NULL;
  dayuseitemdata_ = NULL;
  mysteryshop_data_ = NULL;
  packagetestrebate_data_ = NULL;
  fight_data_ = NULL;
  power_data_ = NULL;
  occupation_data_ = NULL;
  headset_data_ = NULL;
  online_gift_data_ = NULL;
  droplimit_data_ = NULL;
  gmhelp_data_ = NULL;
  godgm_data_ = NULL;
  bowl_data_ = NULL;
  bagitemdata_ = NULL;
  hide_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbRoleInfo::~tbRoleInfo() {
  SharedDtor();
}

void tbRoleInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (platid_ != &::google::protobuf::internal::kEmptyString) {
    delete platid_;
  }
  if (this != default_instance_) {
    delete basedata_;
    delete itemdata_;
    delete taskdata_;
    delete skilldata_;
    delete extenddata_;
    delete equipdata_;
    delete duplicatedata_;
    delete achievementdata_;
    delete buffdata_;
    delete arenadata_;
    delete titledata_;
    delete operatelimitdata_;
    delete huoyuedudata_;
    delete operatedata_;
    delete playeractiveinfo_;
    delete cpaydata_;
    delete unlockinfo_;
    delete emblemdata_;
    delete identifydata_;
    delete elementdata_;
    delete fashiondata_;
    delete wingdata_;
    delete mountdata_;
    delete bossdata_;
    delete pvpdata_;
    delete treasure_data_;
    delete artifact_data_;
    delete fatestardata_;
    delete convoydata_;
    delete daily_data_;
    delete field_data_;
    delete vipdata_;
    delete partnerdata_;
    delete malldata_;
    delete godhooddata_;
    delete recoverydata_;
    delete activitydata_;
    delete soactivitydata_;
    delete useitemdata_;
    delete dayuseitemdata_;
    delete mysteryshop_data_;
    delete packagetestrebate_data_;
    delete fight_data_;
    delete power_data_;
    delete occupation_data_;
    delete headset_data_;
    delete online_gift_data_;
    delete droplimit_data_;
    delete gmhelp_data_;
    delete godgm_data_;
    delete bowl_data_;
    delete bagitemdata_;
    delete hide_data_;
  }
}

void tbRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbRoleInfo_descriptor_;
}

const tbRoleInfo& tbRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

tbRoleInfo* tbRoleInfo::default_instance_ = NULL;

tbRoleInfo* tbRoleInfo::New() const {
  return new tbRoleInfo;
}

void tbRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
    bornzoneid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    if (has_platid()) {
      if (platid_ != &::google::protobuf::internal::kEmptyString) {
        platid_->clear();
      }
    }
    deletechartime_ = GOOGLE_ULONGLONG(0);
    dirty_ = 0;
    if (has_basedata()) {
      if (basedata_ != NULL) basedata_->::proto_ff::CharacterDBBaseInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::proto_ff::CharacterDBPackageData::Clear();
    }
    if (has_taskdata()) {
      if (taskdata_ != NULL) taskdata_->::proto_ff::CharacterDBTaskData::Clear();
    }
    if (has_skilldata()) {
      if (skilldata_ != NULL) skilldata_->::proto_ff::CharacterDBSkillData::Clear();
    }
    if (has_extenddata()) {
      if (extenddata_ != NULL) extenddata_->::proto_ff::CharacterDBExtendData::Clear();
    }
    if (has_equipdata()) {
      if (equipdata_ != NULL) equipdata_->::proto_ff::CharacterDBEquipData::Clear();
    }
    if (has_duplicatedata()) {
      if (duplicatedata_ != NULL) duplicatedata_->::proto_ff::CharacterDBDuplicateData::Clear();
    }
    if (has_achievementdata()) {
      if (achievementdata_ != NULL) achievementdata_->::proto_ff::CharacterAchievementDBData::Clear();
    }
    if (has_buffdata()) {
      if (buffdata_ != NULL) buffdata_->::proto_ff::CharacterBuffData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_arenadata()) {
      if (arenadata_ != NULL) arenadata_->::proto_ff::CharacterArenaData::Clear();
    }
    if (has_titledata()) {
      if (titledata_ != NULL) titledata_->::proto_ff::CharacterTitleSaveData::Clear();
    }
    if (has_operatelimitdata()) {
      if (operatelimitdata_ != NULL) operatelimitdata_->::proto_ff::CharacterDBOperateLimitInfo::Clear();
    }
    if (has_huoyuedudata()) {
      if (huoyuedudata_ != NULL) huoyuedudata_->::proto_ff::CharacterDBHuoYueDuInfo::Clear();
    }
    if (has_operatedata()) {
      if (operatedata_ != NULL) operatedata_->::proto_ff::CharacterDBOperateData::Clear();
    }
    if (has_playeractiveinfo()) {
      if (playeractiveinfo_ != NULL) playeractiveinfo_->::proto_ff::CharacterDBActiveInfo::Clear();
    }
    if (has_cpaydata()) {
      if (cpaydata_ != NULL) cpaydata_->::proto_ff::CharacterPayData::Clear();
    }
    if (has_unlockinfo()) {
      if (unlockinfo_ != NULL) unlockinfo_->::proto_ff::FunctionUnlockInfo::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_emblemdata()) {
      if (emblemdata_ != NULL) emblemdata_->::proto_ff::CharacterDBEmblemData::Clear();
    }
    if (has_identifydata()) {
      if (identifydata_ != NULL) identifydata_->::proto_ff::CharacterDBIdentifyData::Clear();
    }
    if (has_elementdata()) {
      if (elementdata_ != NULL) elementdata_->::proto_ff::CharacterDBElementData::Clear();
    }
    if (has_fashiondata()) {
      if (fashiondata_ != NULL) fashiondata_->::proto_ff::CharacterDBFashionData::Clear();
    }
    if (has_wingdata()) {
      if (wingdata_ != NULL) wingdata_->::proto_ff::CharacterDBWingData::Clear();
    }
    if (has_mountdata()) {
      if (mountdata_ != NULL) mountdata_->::proto_ff::CharacterDBMountData::Clear();
    }
    if (has_bossdata()) {
      if (bossdata_ != NULL) bossdata_->::proto_ff::CharacterDBBossData::Clear();
    }
    if (has_pvpdata()) {
      if (pvpdata_ != NULL) pvpdata_->::proto_ff::CharacterDBPvpData::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_treasure_data()) {
      if (treasure_data_ != NULL) treasure_data_->::proto_ff::CharacterDBTreasureData::Clear();
    }
    if (has_artifact_data()) {
      if (artifact_data_ != NULL) artifact_data_->::proto_ff::CharacterDBArtifactData::Clear();
    }
    if (has_fatestardata()) {
      if (fatestardata_ != NULL) fatestardata_->::proto_ff::CharacterDBFateStarData::Clear();
    }
    if (has_convoydata()) {
      if (convoydata_ != NULL) convoydata_->::proto_ff::CharacterDBConvoyData::Clear();
    }
    if (has_daily_data()) {
      if (daily_data_ != NULL) daily_data_->::proto_ff::CharacterDBDailyData::Clear();
    }
    if (has_field_data()) {
      if (field_data_ != NULL) field_data_->::proto_ff::CharacterDBFieldData::Clear();
    }
    if (has_vipdata()) {
      if (vipdata_ != NULL) vipdata_->::proto_ff::CharacterDBVipData::Clear();
    }
    if (has_partnerdata()) {
      if (partnerdata_ != NULL) partnerdata_->::proto_ff::CharacterDBPartnerData::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_malldata()) {
      if (malldata_ != NULL) malldata_->::proto_ff::CharacterDBMallData::Clear();
    }
    if (has_godhooddata()) {
      if (godhooddata_ != NULL) godhooddata_->::proto_ff::CharacterDBGodhoodData::Clear();
    }
    if (has_recoverydata()) {
      if (recoverydata_ != NULL) recoverydata_->::proto_ff::CharacterDBRecoveryData::Clear();
    }
    if (has_activitydata()) {
      if (activitydata_ != NULL) activitydata_->::proto_ff::CharacterDBActivityData::Clear();
    }
    if (has_soactivitydata()) {
      if (soactivitydata_ != NULL) soactivitydata_->::proto_ff::CharacterDBSOAcitveData::Clear();
    }
    if (has_useitemdata()) {
      if (useitemdata_ != NULL) useitemdata_->::proto_ff::CharacterDBUseItemData::Clear();
    }
    if (has_dayuseitemdata()) {
      if (dayuseitemdata_ != NULL) dayuseitemdata_->::proto_ff::CharacterDBDayUseItemData::Clear();
    }
    if (has_mysteryshop_data()) {
      if (mysteryshop_data_ != NULL) mysteryshop_data_->::proto_ff::CharacterDBMysteryShopData::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_packagetestrebate_data()) {
      if (packagetestrebate_data_ != NULL) packagetestrebate_data_->::proto_ff::CharacterDBPackageTestRebateData::Clear();
    }
    if (has_fight_data()) {
      if (fight_data_ != NULL) fight_data_->::proto_ff::FuncFightDBData::Clear();
    }
    if (has_power_data()) {
      if (power_data_ != NULL) power_data_->::proto_ff::PowerInfoDBList::Clear();
    }
    if (has_occupation_data()) {
      if (occupation_data_ != NULL) occupation_data_->::proto_ff::OccupationTakeList::Clear();
    }
    if (has_headset_data()) {
      if (headset_data_ != NULL) headset_data_->::proto_ff::CharacterDBHeadSetData::Clear();
    }
    if (has_online_gift_data()) {
      if (online_gift_data_ != NULL) online_gift_data_->::proto_ff::CharacterDBOnlineGiftData::Clear();
    }
    if (has_droplimit_data()) {
      if (droplimit_data_ != NULL) droplimit_data_->::proto_ff::CharDropLimitDBData::Clear();
    }
    if (has_gmhelp_data()) {
      if (gmhelp_data_ != NULL) gmhelp_data_->::proto_ff::CharacterDBGmHelpData::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_godgm_data()) {
      if (godgm_data_ != NULL) godgm_data_->::proto_ff::CharacterDBGodGMData::Clear();
    }
    if (has_bowl_data()) {
      if (bowl_data_ != NULL) bowl_data_->::proto_ff::BowlDBData::Clear();
    }
    if (has_bagitemdata()) {
      if (bagitemdata_ != NULL) bagitemdata_->::proto_ff::CharacterDBPackageData::Clear();
    }
    if (has_hide_data()) {
      if (hide_data_ != NULL) hide_data_->::proto_ff::CharacterDBHideData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bornZoneId;
        break;
      }

      // optional uint64 bornZoneId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornZoneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bornzoneid_)));
          set_has_bornzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charName;
        break;
      }

      // optional string charName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platId;
        break;
      }

      // optional string platId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platid().data(), this->platid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deletechartime;
        break;
      }

      // optional uint64 deletechartime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletechartime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deletechartime_)));
          set_has_deletechartime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dirty;
        break;
      }

      // optional int32 dirty = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_baseData;
        break;
      }

      // optional .proto_ff.CharacterDBBaseInfo baseData = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_itemData;
        break;
      }

      // optional .proto_ff.CharacterDBPackageData itemData = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_taskData;
        break;
      }

      // optional .proto_ff.CharacterDBTaskData taskData = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_skillData;
        break;
      }

      // optional .proto_ff.CharacterDBSkillData skillData = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_extendData;
        break;
      }

      // optional .proto_ff.CharacterDBExtendData extendData = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extenddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_equipData;
        break;
      }

      // optional .proto_ff.CharacterDBEquipData equipData = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_duplicateData;
        break;
      }

      // optional .proto_ff.CharacterDBDuplicateData duplicateData = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duplicatedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_achievementData;
        break;
      }

      // optional .proto_ff.CharacterAchievementDBData achievementData = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievementdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_buffData;
        break;
      }

      // optional .proto_ff.CharacterBuffData buffData = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_arenaData;
        break;
      }

      // optional .proto_ff.CharacterArenaData arenaData = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_titleData;
        break;
      }

      // optional .proto_ff.CharacterTitleSaveData titleData = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_titledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_operateLimitData;
        break;
      }

      // optional .proto_ff.CharacterDBOperateLimitInfo operateLimitData = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateLimitData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operatelimitdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_huoYueDuData;
        break;
      }

      // optional .proto_ff.CharacterDBHuoYueDuInfo huoYueDuData = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_huoYueDuData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_huoyuedudata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_operateData;
        break;
      }

      // optional .proto_ff.CharacterDBOperateData operateData = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operatedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_playerActiveInfo;
        break;
      }

      // optional .proto_ff.CharacterDBActiveInfo playerActiveInfo = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerActiveInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeractiveinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_cPayData;
        break;
      }

      // optional .proto_ff.CharacterPayData cPayData = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cPayData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpaydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_unlockInfo;
        break;
      }

      // optional .proto_ff.FunctionUnlockInfo unlockInfo = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlockinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_emblemData;
        break;
      }

      // optional .proto_ff.CharacterDBEmblemData emblemData = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emblemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emblemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_identifyData;
        break;
      }

      // optional .proto_ff.CharacterDBIdentifyData identifyData = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identifydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_elementData;
        break;
      }

      // optional .proto_ff.CharacterDBElementData elementData = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elementData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elementdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_fashionData;
        break;
      }

      // optional .proto_ff.CharacterDBFashionData fashionData = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashionData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashiondata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_wingData;
        break;
      }

      // optional .proto_ff.CharacterDBWingData wingData = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wingdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_mountData;
        break;
      }

      // optional .proto_ff.CharacterDBMountData mountData = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mountData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mountdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_bossData;
        break;
      }

      // optional .proto_ff.CharacterDBBossData bossData = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bossdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_pvpData;
        break;
      }

      // optional .proto_ff.CharacterDBPvpData pvpData = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvpData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_treasure_data;
        break;
      }

      // optional .proto_ff.CharacterDBTreasureData treasure_data = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasure_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasure_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_artifact_data;
        break;
      }

      // optional .proto_ff.CharacterDBArtifactData artifact_data = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artifact_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artifact_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_fateStarData;
        break;
      }

      // optional .proto_ff.CharacterDBFateStarData fateStarData = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fateStarData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fatestardata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_convoyData;
        break;
      }

      // optional .proto_ff.CharacterDBConvoyData convoyData = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convoyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convoydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_daily_data;
        break;
      }

      // optional .proto_ff.CharacterDBDailyData daily_data = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_field_data;
        break;
      }

      // optional .proto_ff.CharacterDBFieldData field_data = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_vipData;
        break;
      }

      // optional .proto_ff.CharacterDBVipData vipData = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_partnerData;
        break;
      }

      // optional .proto_ff.CharacterDBPartnerData partnerData = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partnerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_mallData;
        break;
      }

      // optional .proto_ff.CharacterDBMallData mallData = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mallData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_malldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_godhoodData;
        break;
      }

      // optional .proto_ff.CharacterDBGodhoodData godhoodData = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godhoodData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_godhooddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_recoveryData;
        break;
      }

      // optional .proto_ff.CharacterDBRecoveryData recoveryData = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recoveryData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recoverydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_activityData;
        break;
      }

      // optional .proto_ff.CharacterDBActivityData activityData = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_soActivityData;
        break;
      }

      // optional .proto_ff.CharacterDBSOAcitveData soActivityData = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soActivityData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soactivitydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_useitemData;
        break;
      }

      // optional .proto_ff.CharacterDBUseItemData useitemData = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useitemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_useitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_dayUseItemData;
        break;
      }

      // optional .proto_ff.CharacterDBDayUseItemData dayUseItemData = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayUseItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dayuseitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_mysteryshop_data;
        break;
      }

      // optional .proto_ff.CharacterDBMysteryShopData mysteryshop_data = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mysteryshop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysteryshop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_packagetestrebate_data;
        break;
      }

      // optional .proto_ff.CharacterDBPackageTestRebateData packagetestrebate_data = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packagetestrebate_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packagetestrebate_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_fight_data;
        break;
      }

      // optional .proto_ff.FuncFightDBData fight_data = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_power_data;
        break;
      }

      // optional .proto_ff.PowerInfoDBList power_data = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_power_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_occupation_data;
        break;
      }

      // optional .proto_ff.OccupationTakeList occupation_data = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupation_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_occupation_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_headset_data;
        break;
      }

      // optional .proto_ff.CharacterDBHeadSetData headset_data = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headset_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_headset_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_online_gift_data;
        break;
      }

      // optional .proto_ff.CharacterDBOnlineGiftData online_gift_data = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online_gift_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_gift_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse_droplimit_data;
        break;
      }

      // optional .proto_ff.CharDropLimitDBData droplimit_data = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_droplimit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_droplimit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(546)) goto parse_gmhelp_data;
        break;
      }

      // optional .proto_ff.CharacterDBGmHelpData gmhelp_data = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmhelp_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gmhelp_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_godgm_data;
        break;
      }

      // optional .proto_ff.CharacterDBGodGMData godgm_data = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godgm_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_godgm_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_bowl_data;
        break;
      }

      // optional .proto_ff.BowlDBData bowl_data = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bowl_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bowl_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_bagitemData;
        break;
      }

      // optional .proto_ff.CharacterDBPackageData bagitemData = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagitemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_hide_data;
        break;
      }

      // optional .proto_ff.CharacterDBHideData hide_data = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hide_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hide_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint64 bornZoneId = 3;
  if (has_bornzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bornzoneid(), output);
  }

  // optional string charName = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->charname(), output);
  }

  // optional string platId = 5;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platid(), output);
  }

  // optional uint64 deletechartime = 6;
  if (has_deletechartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->deletechartime(), output);
  }

  // optional int32 dirty = 7;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dirty(), output);
  }

  // optional .proto_ff.CharacterDBBaseInfo baseData = 20;
  if (has_basedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->basedata(), output);
  }

  // optional .proto_ff.CharacterDBPackageData itemData = 21;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->itemdata(), output);
  }

  // optional .proto_ff.CharacterDBTaskData taskData = 22;
  if (has_taskdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->taskdata(), output);
  }

  // optional .proto_ff.CharacterDBSkillData skillData = 23;
  if (has_skilldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->skilldata(), output);
  }

  // optional .proto_ff.CharacterDBExtendData extendData = 24;
  if (has_extenddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->extenddata(), output);
  }

  // optional .proto_ff.CharacterDBEquipData equipData = 25;
  if (has_equipdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->equipdata(), output);
  }

  // optional .proto_ff.CharacterDBDuplicateData duplicateData = 26;
  if (has_duplicatedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->duplicatedata(), output);
  }

  // optional .proto_ff.CharacterAchievementDBData achievementData = 27;
  if (has_achievementdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->achievementdata(), output);
  }

  // optional .proto_ff.CharacterBuffData buffData = 28;
  if (has_buffdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->buffdata(), output);
  }

  // optional .proto_ff.CharacterArenaData arenaData = 29;
  if (has_arenadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->arenadata(), output);
  }

  // optional .proto_ff.CharacterTitleSaveData titleData = 30;
  if (has_titledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->titledata(), output);
  }

  // optional .proto_ff.CharacterDBOperateLimitInfo operateLimitData = 31;
  if (has_operatelimitdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->operatelimitdata(), output);
  }

  // optional .proto_ff.CharacterDBHuoYueDuInfo huoYueDuData = 32;
  if (has_huoyuedudata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->huoyuedudata(), output);
  }

  // optional .proto_ff.CharacterDBOperateData operateData = 33;
  if (has_operatedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->operatedata(), output);
  }

  // optional .proto_ff.CharacterDBActiveInfo playerActiveInfo = 34;
  if (has_playeractiveinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->playeractiveinfo(), output);
  }

  // optional .proto_ff.CharacterPayData cPayData = 35;
  if (has_cpaydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->cpaydata(), output);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockInfo = 36;
  if (has_unlockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->unlockinfo(), output);
  }

  // optional .proto_ff.CharacterDBEmblemData emblemData = 37;
  if (has_emblemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->emblemdata(), output);
  }

  // optional .proto_ff.CharacterDBIdentifyData identifyData = 38;
  if (has_identifydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->identifydata(), output);
  }

  // optional .proto_ff.CharacterDBElementData elementData = 39;
  if (has_elementdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->elementdata(), output);
  }

  // optional .proto_ff.CharacterDBFashionData fashionData = 40;
  if (has_fashiondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->fashiondata(), output);
  }

  // optional .proto_ff.CharacterDBWingData wingData = 41;
  if (has_wingdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->wingdata(), output);
  }

  // optional .proto_ff.CharacterDBMountData mountData = 42;
  if (has_mountdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->mountdata(), output);
  }

  // optional .proto_ff.CharacterDBBossData bossData = 43;
  if (has_bossdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->bossdata(), output);
  }

  // optional .proto_ff.CharacterDBPvpData pvpData = 44;
  if (has_pvpdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->pvpdata(), output);
  }

  // optional .proto_ff.CharacterDBTreasureData treasure_data = 45;
  if (has_treasure_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->treasure_data(), output);
  }

  // optional .proto_ff.CharacterDBArtifactData artifact_data = 46;
  if (has_artifact_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->artifact_data(), output);
  }

  // optional .proto_ff.CharacterDBFateStarData fateStarData = 47;
  if (has_fatestardata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->fatestardata(), output);
  }

  // optional .proto_ff.CharacterDBConvoyData convoyData = 48;
  if (has_convoydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->convoydata(), output);
  }

  // optional .proto_ff.CharacterDBDailyData daily_data = 49;
  if (has_daily_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->daily_data(), output);
  }

  // optional .proto_ff.CharacterDBFieldData field_data = 50;
  if (has_field_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->field_data(), output);
  }

  // optional .proto_ff.CharacterDBVipData vipData = 51;
  if (has_vipdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->vipdata(), output);
  }

  // optional .proto_ff.CharacterDBPartnerData partnerData = 52;
  if (has_partnerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->partnerdata(), output);
  }

  // optional .proto_ff.CharacterDBMallData mallData = 53;
  if (has_malldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->malldata(), output);
  }

  // optional .proto_ff.CharacterDBGodhoodData godhoodData = 54;
  if (has_godhooddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->godhooddata(), output);
  }

  // optional .proto_ff.CharacterDBRecoveryData recoveryData = 55;
  if (has_recoverydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->recoverydata(), output);
  }

  // optional .proto_ff.CharacterDBActivityData activityData = 56;
  if (has_activitydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->activitydata(), output);
  }

  // optional .proto_ff.CharacterDBSOAcitveData soActivityData = 57;
  if (has_soactivitydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->soactivitydata(), output);
  }

  // optional .proto_ff.CharacterDBUseItemData useitemData = 58;
  if (has_useitemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->useitemdata(), output);
  }

  // optional .proto_ff.CharacterDBDayUseItemData dayUseItemData = 59;
  if (has_dayuseitemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->dayuseitemdata(), output);
  }

  // optional .proto_ff.CharacterDBMysteryShopData mysteryshop_data = 60;
  if (has_mysteryshop_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->mysteryshop_data(), output);
  }

  // optional .proto_ff.CharacterDBPackageTestRebateData packagetestrebate_data = 61;
  if (has_packagetestrebate_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->packagetestrebate_data(), output);
  }

  // optional .proto_ff.FuncFightDBData fight_data = 62;
  if (has_fight_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->fight_data(), output);
  }

  // optional .proto_ff.PowerInfoDBList power_data = 63;
  if (has_power_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->power_data(), output);
  }

  // optional .proto_ff.OccupationTakeList occupation_data = 64;
  if (has_occupation_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->occupation_data(), output);
  }

  // optional .proto_ff.CharacterDBHeadSetData headset_data = 65;
  if (has_headset_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->headset_data(), output);
  }

  // optional .proto_ff.CharacterDBOnlineGiftData online_gift_data = 66;
  if (has_online_gift_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->online_gift_data(), output);
  }

  // optional .proto_ff.CharDropLimitDBData droplimit_data = 67;
  if (has_droplimit_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->droplimit_data(), output);
  }

  // optional .proto_ff.CharacterDBGmHelpData gmhelp_data = 68;
  if (has_gmhelp_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->gmhelp_data(), output);
  }

  // optional .proto_ff.CharacterDBGodGMData godgm_data = 69;
  if (has_godgm_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->godgm_data(), output);
  }

  // optional .proto_ff.BowlDBData bowl_data = 70;
  if (has_bowl_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->bowl_data(), output);
  }

  // optional .proto_ff.CharacterDBPackageData bagitemData = 71;
  if (has_bagitemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->bagitemdata(), output);
  }

  // optional .proto_ff.CharacterDBHideData hide_data = 72;
  if (has_hide_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->hide_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint64 bornZoneId = 3;
  if (has_bornzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bornzoneid(), target);
  }

  // optional string charName = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional string platId = 5;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platid(), target);
  }

  // optional uint64 deletechartime = 6;
  if (has_deletechartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->deletechartime(), target);
  }

  // optional int32 dirty = 7;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dirty(), target);
  }

  // optional .proto_ff.CharacterDBBaseInfo baseData = 20;
  if (has_basedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->basedata(), target);
  }

  // optional .proto_ff.CharacterDBPackageData itemData = 21;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->itemdata(), target);
  }

  // optional .proto_ff.CharacterDBTaskData taskData = 22;
  if (has_taskdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->taskdata(), target);
  }

  // optional .proto_ff.CharacterDBSkillData skillData = 23;
  if (has_skilldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->skilldata(), target);
  }

  // optional .proto_ff.CharacterDBExtendData extendData = 24;
  if (has_extenddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->extenddata(), target);
  }

  // optional .proto_ff.CharacterDBEquipData equipData = 25;
  if (has_equipdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->equipdata(), target);
  }

  // optional .proto_ff.CharacterDBDuplicateData duplicateData = 26;
  if (has_duplicatedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->duplicatedata(), target);
  }

  // optional .proto_ff.CharacterAchievementDBData achievementData = 27;
  if (has_achievementdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->achievementdata(), target);
  }

  // optional .proto_ff.CharacterBuffData buffData = 28;
  if (has_buffdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->buffdata(), target);
  }

  // optional .proto_ff.CharacterArenaData arenaData = 29;
  if (has_arenadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->arenadata(), target);
  }

  // optional .proto_ff.CharacterTitleSaveData titleData = 30;
  if (has_titledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->titledata(), target);
  }

  // optional .proto_ff.CharacterDBOperateLimitInfo operateLimitData = 31;
  if (has_operatelimitdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->operatelimitdata(), target);
  }

  // optional .proto_ff.CharacterDBHuoYueDuInfo huoYueDuData = 32;
  if (has_huoyuedudata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->huoyuedudata(), target);
  }

  // optional .proto_ff.CharacterDBOperateData operateData = 33;
  if (has_operatedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->operatedata(), target);
  }

  // optional .proto_ff.CharacterDBActiveInfo playerActiveInfo = 34;
  if (has_playeractiveinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->playeractiveinfo(), target);
  }

  // optional .proto_ff.CharacterPayData cPayData = 35;
  if (has_cpaydata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->cpaydata(), target);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockInfo = 36;
  if (has_unlockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->unlockinfo(), target);
  }

  // optional .proto_ff.CharacterDBEmblemData emblemData = 37;
  if (has_emblemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->emblemdata(), target);
  }

  // optional .proto_ff.CharacterDBIdentifyData identifyData = 38;
  if (has_identifydata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->identifydata(), target);
  }

  // optional .proto_ff.CharacterDBElementData elementData = 39;
  if (has_elementdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->elementdata(), target);
  }

  // optional .proto_ff.CharacterDBFashionData fashionData = 40;
  if (has_fashiondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->fashiondata(), target);
  }

  // optional .proto_ff.CharacterDBWingData wingData = 41;
  if (has_wingdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->wingdata(), target);
  }

  // optional .proto_ff.CharacterDBMountData mountData = 42;
  if (has_mountdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->mountdata(), target);
  }

  // optional .proto_ff.CharacterDBBossData bossData = 43;
  if (has_bossdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->bossdata(), target);
  }

  // optional .proto_ff.CharacterDBPvpData pvpData = 44;
  if (has_pvpdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->pvpdata(), target);
  }

  // optional .proto_ff.CharacterDBTreasureData treasure_data = 45;
  if (has_treasure_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->treasure_data(), target);
  }

  // optional .proto_ff.CharacterDBArtifactData artifact_data = 46;
  if (has_artifact_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->artifact_data(), target);
  }

  // optional .proto_ff.CharacterDBFateStarData fateStarData = 47;
  if (has_fatestardata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->fatestardata(), target);
  }

  // optional .proto_ff.CharacterDBConvoyData convoyData = 48;
  if (has_convoydata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->convoydata(), target);
  }

  // optional .proto_ff.CharacterDBDailyData daily_data = 49;
  if (has_daily_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->daily_data(), target);
  }

  // optional .proto_ff.CharacterDBFieldData field_data = 50;
  if (has_field_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->field_data(), target);
  }

  // optional .proto_ff.CharacterDBVipData vipData = 51;
  if (has_vipdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->vipdata(), target);
  }

  // optional .proto_ff.CharacterDBPartnerData partnerData = 52;
  if (has_partnerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->partnerdata(), target);
  }

  // optional .proto_ff.CharacterDBMallData mallData = 53;
  if (has_malldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->malldata(), target);
  }

  // optional .proto_ff.CharacterDBGodhoodData godhoodData = 54;
  if (has_godhooddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->godhooddata(), target);
  }

  // optional .proto_ff.CharacterDBRecoveryData recoveryData = 55;
  if (has_recoverydata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->recoverydata(), target);
  }

  // optional .proto_ff.CharacterDBActivityData activityData = 56;
  if (has_activitydata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->activitydata(), target);
  }

  // optional .proto_ff.CharacterDBSOAcitveData soActivityData = 57;
  if (has_soactivitydata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->soactivitydata(), target);
  }

  // optional .proto_ff.CharacterDBUseItemData useitemData = 58;
  if (has_useitemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->useitemdata(), target);
  }

  // optional .proto_ff.CharacterDBDayUseItemData dayUseItemData = 59;
  if (has_dayuseitemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->dayuseitemdata(), target);
  }

  // optional .proto_ff.CharacterDBMysteryShopData mysteryshop_data = 60;
  if (has_mysteryshop_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->mysteryshop_data(), target);
  }

  // optional .proto_ff.CharacterDBPackageTestRebateData packagetestrebate_data = 61;
  if (has_packagetestrebate_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->packagetestrebate_data(), target);
  }

  // optional .proto_ff.FuncFightDBData fight_data = 62;
  if (has_fight_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->fight_data(), target);
  }

  // optional .proto_ff.PowerInfoDBList power_data = 63;
  if (has_power_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->power_data(), target);
  }

  // optional .proto_ff.OccupationTakeList occupation_data = 64;
  if (has_occupation_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->occupation_data(), target);
  }

  // optional .proto_ff.CharacterDBHeadSetData headset_data = 65;
  if (has_headset_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->headset_data(), target);
  }

  // optional .proto_ff.CharacterDBOnlineGiftData online_gift_data = 66;
  if (has_online_gift_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->online_gift_data(), target);
  }

  // optional .proto_ff.CharDropLimitDBData droplimit_data = 67;
  if (has_droplimit_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->droplimit_data(), target);
  }

  // optional .proto_ff.CharacterDBGmHelpData gmhelp_data = 68;
  if (has_gmhelp_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->gmhelp_data(), target);
  }

  // optional .proto_ff.CharacterDBGodGMData godgm_data = 69;
  if (has_godgm_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->godgm_data(), target);
  }

  // optional .proto_ff.BowlDBData bowl_data = 70;
  if (has_bowl_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->bowl_data(), target);
  }

  // optional .proto_ff.CharacterDBPackageData bagitemData = 71;
  if (has_bagitemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->bagitemdata(), target);
  }

  // optional .proto_ff.CharacterDBHideData hide_data = 72;
  if (has_hide_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->hide_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint64 bornZoneId = 3;
    if (has_bornzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bornzoneid());
    }

    // optional string charName = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional string platId = 5;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }

    // optional uint64 deletechartime = 6;
    if (has_deletechartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deletechartime());
    }

    // optional int32 dirty = 7;
    if (has_dirty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dirty());
    }

    // optional .proto_ff.CharacterDBBaseInfo baseData = 20;
    if (has_basedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basedata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.CharacterDBPackageData itemData = 21;
    if (has_itemdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

    // optional .proto_ff.CharacterDBTaskData taskData = 22;
    if (has_taskdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskdata());
    }

    // optional .proto_ff.CharacterDBSkillData skillData = 23;
    if (has_skilldata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skilldata());
    }

    // optional .proto_ff.CharacterDBExtendData extendData = 24;
    if (has_extenddata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extenddata());
    }

    // optional .proto_ff.CharacterDBEquipData equipData = 25;
    if (has_equipdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipdata());
    }

    // optional .proto_ff.CharacterDBDuplicateData duplicateData = 26;
    if (has_duplicatedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duplicatedata());
    }

    // optional .proto_ff.CharacterAchievementDBData achievementData = 27;
    if (has_achievementdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievementdata());
    }

    // optional .proto_ff.CharacterBuffData buffData = 28;
    if (has_buffdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffdata());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto_ff.CharacterArenaData arenaData = 29;
    if (has_arenadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenadata());
    }

    // optional .proto_ff.CharacterTitleSaveData titleData = 30;
    if (has_titledata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->titledata());
    }

    // optional .proto_ff.CharacterDBOperateLimitInfo operateLimitData = 31;
    if (has_operatelimitdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operatelimitdata());
    }

    // optional .proto_ff.CharacterDBHuoYueDuInfo huoYueDuData = 32;
    if (has_huoyuedudata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->huoyuedudata());
    }

    // optional .proto_ff.CharacterDBOperateData operateData = 33;
    if (has_operatedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operatedata());
    }

    // optional .proto_ff.CharacterDBActiveInfo playerActiveInfo = 34;
    if (has_playeractiveinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playeractiveinfo());
    }

    // optional .proto_ff.CharacterPayData cPayData = 35;
    if (has_cpaydata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cpaydata());
    }

    // optional .proto_ff.FunctionUnlockInfo unlockInfo = 36;
    if (has_unlockinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockinfo());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .proto_ff.CharacterDBEmblemData emblemData = 37;
    if (has_emblemdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emblemdata());
    }

    // optional .proto_ff.CharacterDBIdentifyData identifyData = 38;
    if (has_identifydata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identifydata());
    }

    // optional .proto_ff.CharacterDBElementData elementData = 39;
    if (has_elementdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elementdata());
    }

    // optional .proto_ff.CharacterDBFashionData fashionData = 40;
    if (has_fashiondata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashiondata());
    }

    // optional .proto_ff.CharacterDBWingData wingData = 41;
    if (has_wingdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wingdata());
    }

    // optional .proto_ff.CharacterDBMountData mountData = 42;
    if (has_mountdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mountdata());
    }

    // optional .proto_ff.CharacterDBBossData bossData = 43;
    if (has_bossdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bossdata());
    }

    // optional .proto_ff.CharacterDBPvpData pvpData = 44;
    if (has_pvpdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpdata());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .proto_ff.CharacterDBTreasureData treasure_data = 45;
    if (has_treasure_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasure_data());
    }

    // optional .proto_ff.CharacterDBArtifactData artifact_data = 46;
    if (has_artifact_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artifact_data());
    }

    // optional .proto_ff.CharacterDBFateStarData fateStarData = 47;
    if (has_fatestardata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fatestardata());
    }

    // optional .proto_ff.CharacterDBConvoyData convoyData = 48;
    if (has_convoydata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convoydata());
    }

    // optional .proto_ff.CharacterDBDailyData daily_data = 49;
    if (has_daily_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_data());
    }

    // optional .proto_ff.CharacterDBFieldData field_data = 50;
    if (has_field_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_data());
    }

    // optional .proto_ff.CharacterDBVipData vipData = 51;
    if (has_vipdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipdata());
    }

    // optional .proto_ff.CharacterDBPartnerData partnerData = 52;
    if (has_partnerdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partnerdata());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .proto_ff.CharacterDBMallData mallData = 53;
    if (has_malldata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->malldata());
    }

    // optional .proto_ff.CharacterDBGodhoodData godhoodData = 54;
    if (has_godhooddata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->godhooddata());
    }

    // optional .proto_ff.CharacterDBRecoveryData recoveryData = 55;
    if (has_recoverydata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recoverydata());
    }

    // optional .proto_ff.CharacterDBActivityData activityData = 56;
    if (has_activitydata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitydata());
    }

    // optional .proto_ff.CharacterDBSOAcitveData soActivityData = 57;
    if (has_soactivitydata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soactivitydata());
    }

    // optional .proto_ff.CharacterDBUseItemData useitemData = 58;
    if (has_useitemdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->useitemdata());
    }

    // optional .proto_ff.CharacterDBDayUseItemData dayUseItemData = 59;
    if (has_dayuseitemdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dayuseitemdata());
    }

    // optional .proto_ff.CharacterDBMysteryShopData mysteryshop_data = 60;
    if (has_mysteryshop_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysteryshop_data());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .proto_ff.CharacterDBPackageTestRebateData packagetestrebate_data = 61;
    if (has_packagetestrebate_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packagetestrebate_data());
    }

    // optional .proto_ff.FuncFightDBData fight_data = 62;
    if (has_fight_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_data());
    }

    // optional .proto_ff.PowerInfoDBList power_data = 63;
    if (has_power_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_data());
    }

    // optional .proto_ff.OccupationTakeList occupation_data = 64;
    if (has_occupation_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->occupation_data());
    }

    // optional .proto_ff.CharacterDBHeadSetData headset_data = 65;
    if (has_headset_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headset_data());
    }

    // optional .proto_ff.CharacterDBOnlineGiftData online_gift_data = 66;
    if (has_online_gift_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_gift_data());
    }

    // optional .proto_ff.CharDropLimitDBData droplimit_data = 67;
    if (has_droplimit_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->droplimit_data());
    }

    // optional .proto_ff.CharacterDBGmHelpData gmhelp_data = 68;
    if (has_gmhelp_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gmhelp_data());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .proto_ff.CharacterDBGodGMData godgm_data = 69;
    if (has_godgm_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->godgm_data());
    }

    // optional .proto_ff.BowlDBData bowl_data = 70;
    if (has_bowl_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bowl_data());
    }

    // optional .proto_ff.CharacterDBPackageData bagitemData = 71;
    if (has_bagitemdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagitemdata());
    }

    // optional .proto_ff.CharacterDBHideData hide_data = 72;
    if (has_hide_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hide_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbRoleInfo::MergeFrom(const tbRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_bornzoneid()) {
      set_bornzoneid(from.bornzoneid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_deletechartime()) {
      set_deletechartime(from.deletechartime());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
    if (from.has_basedata()) {
      mutable_basedata()->::proto_ff::CharacterDBBaseInfo::MergeFrom(from.basedata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_itemdata()) {
      mutable_itemdata()->::proto_ff::CharacterDBPackageData::MergeFrom(from.itemdata());
    }
    if (from.has_taskdata()) {
      mutable_taskdata()->::proto_ff::CharacterDBTaskData::MergeFrom(from.taskdata());
    }
    if (from.has_skilldata()) {
      mutable_skilldata()->::proto_ff::CharacterDBSkillData::MergeFrom(from.skilldata());
    }
    if (from.has_extenddata()) {
      mutable_extenddata()->::proto_ff::CharacterDBExtendData::MergeFrom(from.extenddata());
    }
    if (from.has_equipdata()) {
      mutable_equipdata()->::proto_ff::CharacterDBEquipData::MergeFrom(from.equipdata());
    }
    if (from.has_duplicatedata()) {
      mutable_duplicatedata()->::proto_ff::CharacterDBDuplicateData::MergeFrom(from.duplicatedata());
    }
    if (from.has_achievementdata()) {
      mutable_achievementdata()->::proto_ff::CharacterAchievementDBData::MergeFrom(from.achievementdata());
    }
    if (from.has_buffdata()) {
      mutable_buffdata()->::proto_ff::CharacterBuffData::MergeFrom(from.buffdata());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_arenadata()) {
      mutable_arenadata()->::proto_ff::CharacterArenaData::MergeFrom(from.arenadata());
    }
    if (from.has_titledata()) {
      mutable_titledata()->::proto_ff::CharacterTitleSaveData::MergeFrom(from.titledata());
    }
    if (from.has_operatelimitdata()) {
      mutable_operatelimitdata()->::proto_ff::CharacterDBOperateLimitInfo::MergeFrom(from.operatelimitdata());
    }
    if (from.has_huoyuedudata()) {
      mutable_huoyuedudata()->::proto_ff::CharacterDBHuoYueDuInfo::MergeFrom(from.huoyuedudata());
    }
    if (from.has_operatedata()) {
      mutable_operatedata()->::proto_ff::CharacterDBOperateData::MergeFrom(from.operatedata());
    }
    if (from.has_playeractiveinfo()) {
      mutable_playeractiveinfo()->::proto_ff::CharacterDBActiveInfo::MergeFrom(from.playeractiveinfo());
    }
    if (from.has_cpaydata()) {
      mutable_cpaydata()->::proto_ff::CharacterPayData::MergeFrom(from.cpaydata());
    }
    if (from.has_unlockinfo()) {
      mutable_unlockinfo()->::proto_ff::FunctionUnlockInfo::MergeFrom(from.unlockinfo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_emblemdata()) {
      mutable_emblemdata()->::proto_ff::CharacterDBEmblemData::MergeFrom(from.emblemdata());
    }
    if (from.has_identifydata()) {
      mutable_identifydata()->::proto_ff::CharacterDBIdentifyData::MergeFrom(from.identifydata());
    }
    if (from.has_elementdata()) {
      mutable_elementdata()->::proto_ff::CharacterDBElementData::MergeFrom(from.elementdata());
    }
    if (from.has_fashiondata()) {
      mutable_fashiondata()->::proto_ff::CharacterDBFashionData::MergeFrom(from.fashiondata());
    }
    if (from.has_wingdata()) {
      mutable_wingdata()->::proto_ff::CharacterDBWingData::MergeFrom(from.wingdata());
    }
    if (from.has_mountdata()) {
      mutable_mountdata()->::proto_ff::CharacterDBMountData::MergeFrom(from.mountdata());
    }
    if (from.has_bossdata()) {
      mutable_bossdata()->::proto_ff::CharacterDBBossData::MergeFrom(from.bossdata());
    }
    if (from.has_pvpdata()) {
      mutable_pvpdata()->::proto_ff::CharacterDBPvpData::MergeFrom(from.pvpdata());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_treasure_data()) {
      mutable_treasure_data()->::proto_ff::CharacterDBTreasureData::MergeFrom(from.treasure_data());
    }
    if (from.has_artifact_data()) {
      mutable_artifact_data()->::proto_ff::CharacterDBArtifactData::MergeFrom(from.artifact_data());
    }
    if (from.has_fatestardata()) {
      mutable_fatestardata()->::proto_ff::CharacterDBFateStarData::MergeFrom(from.fatestardata());
    }
    if (from.has_convoydata()) {
      mutable_convoydata()->::proto_ff::CharacterDBConvoyData::MergeFrom(from.convoydata());
    }
    if (from.has_daily_data()) {
      mutable_daily_data()->::proto_ff::CharacterDBDailyData::MergeFrom(from.daily_data());
    }
    if (from.has_field_data()) {
      mutable_field_data()->::proto_ff::CharacterDBFieldData::MergeFrom(from.field_data());
    }
    if (from.has_vipdata()) {
      mutable_vipdata()->::proto_ff::CharacterDBVipData::MergeFrom(from.vipdata());
    }
    if (from.has_partnerdata()) {
      mutable_partnerdata()->::proto_ff::CharacterDBPartnerData::MergeFrom(from.partnerdata());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_malldata()) {
      mutable_malldata()->::proto_ff::CharacterDBMallData::MergeFrom(from.malldata());
    }
    if (from.has_godhooddata()) {
      mutable_godhooddata()->::proto_ff::CharacterDBGodhoodData::MergeFrom(from.godhooddata());
    }
    if (from.has_recoverydata()) {
      mutable_recoverydata()->::proto_ff::CharacterDBRecoveryData::MergeFrom(from.recoverydata());
    }
    if (from.has_activitydata()) {
      mutable_activitydata()->::proto_ff::CharacterDBActivityData::MergeFrom(from.activitydata());
    }
    if (from.has_soactivitydata()) {
      mutable_soactivitydata()->::proto_ff::CharacterDBSOAcitveData::MergeFrom(from.soactivitydata());
    }
    if (from.has_useitemdata()) {
      mutable_useitemdata()->::proto_ff::CharacterDBUseItemData::MergeFrom(from.useitemdata());
    }
    if (from.has_dayuseitemdata()) {
      mutable_dayuseitemdata()->::proto_ff::CharacterDBDayUseItemData::MergeFrom(from.dayuseitemdata());
    }
    if (from.has_mysteryshop_data()) {
      mutable_mysteryshop_data()->::proto_ff::CharacterDBMysteryShopData::MergeFrom(from.mysteryshop_data());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_packagetestrebate_data()) {
      mutable_packagetestrebate_data()->::proto_ff::CharacterDBPackageTestRebateData::MergeFrom(from.packagetestrebate_data());
    }
    if (from.has_fight_data()) {
      mutable_fight_data()->::proto_ff::FuncFightDBData::MergeFrom(from.fight_data());
    }
    if (from.has_power_data()) {
      mutable_power_data()->::proto_ff::PowerInfoDBList::MergeFrom(from.power_data());
    }
    if (from.has_occupation_data()) {
      mutable_occupation_data()->::proto_ff::OccupationTakeList::MergeFrom(from.occupation_data());
    }
    if (from.has_headset_data()) {
      mutable_headset_data()->::proto_ff::CharacterDBHeadSetData::MergeFrom(from.headset_data());
    }
    if (from.has_online_gift_data()) {
      mutable_online_gift_data()->::proto_ff::CharacterDBOnlineGiftData::MergeFrom(from.online_gift_data());
    }
    if (from.has_droplimit_data()) {
      mutable_droplimit_data()->::proto_ff::CharDropLimitDBData::MergeFrom(from.droplimit_data());
    }
    if (from.has_gmhelp_data()) {
      mutable_gmhelp_data()->::proto_ff::CharacterDBGmHelpData::MergeFrom(from.gmhelp_data());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_godgm_data()) {
      mutable_godgm_data()->::proto_ff::CharacterDBGodGMData::MergeFrom(from.godgm_data());
    }
    if (from.has_bowl_data()) {
      mutable_bowl_data()->::proto_ff::BowlDBData::MergeFrom(from.bowl_data());
    }
    if (from.has_bagitemdata()) {
      mutable_bagitemdata()->::proto_ff::CharacterDBPackageData::MergeFrom(from.bagitemdata());
    }
    if (from.has_hide_data()) {
      mutable_hide_data()->::proto_ff::CharacterDBHideData::MergeFrom(from.hide_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbRoleInfo::CopyFrom(const tbRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbRoleInfo::IsInitialized() const {

  return true;
}

void tbRoleInfo::Swap(tbRoleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(playerid_, other->playerid_);
    std::swap(bornzoneid_, other->bornzoneid_);
    std::swap(charname_, other->charname_);
    std::swap(platid_, other->platid_);
    std::swap(deletechartime_, other->deletechartime_);
    std::swap(dirty_, other->dirty_);
    std::swap(basedata_, other->basedata_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(taskdata_, other->taskdata_);
    std::swap(skilldata_, other->skilldata_);
    std::swap(extenddata_, other->extenddata_);
    std::swap(equipdata_, other->equipdata_);
    std::swap(duplicatedata_, other->duplicatedata_);
    std::swap(achievementdata_, other->achievementdata_);
    std::swap(buffdata_, other->buffdata_);
    std::swap(arenadata_, other->arenadata_);
    std::swap(titledata_, other->titledata_);
    std::swap(operatelimitdata_, other->operatelimitdata_);
    std::swap(huoyuedudata_, other->huoyuedudata_);
    std::swap(operatedata_, other->operatedata_);
    std::swap(playeractiveinfo_, other->playeractiveinfo_);
    std::swap(cpaydata_, other->cpaydata_);
    std::swap(unlockinfo_, other->unlockinfo_);
    std::swap(emblemdata_, other->emblemdata_);
    std::swap(identifydata_, other->identifydata_);
    std::swap(elementdata_, other->elementdata_);
    std::swap(fashiondata_, other->fashiondata_);
    std::swap(wingdata_, other->wingdata_);
    std::swap(mountdata_, other->mountdata_);
    std::swap(bossdata_, other->bossdata_);
    std::swap(pvpdata_, other->pvpdata_);
    std::swap(treasure_data_, other->treasure_data_);
    std::swap(artifact_data_, other->artifact_data_);
    std::swap(fatestardata_, other->fatestardata_);
    std::swap(convoydata_, other->convoydata_);
    std::swap(daily_data_, other->daily_data_);
    std::swap(field_data_, other->field_data_);
    std::swap(vipdata_, other->vipdata_);
    std::swap(partnerdata_, other->partnerdata_);
    std::swap(malldata_, other->malldata_);
    std::swap(godhooddata_, other->godhooddata_);
    std::swap(recoverydata_, other->recoverydata_);
    std::swap(activitydata_, other->activitydata_);
    std::swap(soactivitydata_, other->soactivitydata_);
    std::swap(useitemdata_, other->useitemdata_);
    std::swap(dayuseitemdata_, other->dayuseitemdata_);
    std::swap(mysteryshop_data_, other->mysteryshop_data_);
    std::swap(packagetestrebate_data_, other->packagetestrebate_data_);
    std::swap(fight_data_, other->fight_data_);
    std::swap(power_data_, other->power_data_);
    std::swap(occupation_data_, other->occupation_data_);
    std::swap(headset_data_, other->headset_data_);
    std::swap(online_gift_data_, other->online_gift_data_);
    std::swap(droplimit_data_, other->droplimit_data_);
    std::swap(gmhelp_data_, other->gmhelp_data_);
    std::swap(godgm_data_, other->godgm_data_);
    std::swap(bowl_data_, other->bowl_data_);
    std::swap(bagitemdata_, other->bagitemdata_);
    std::swap(hide_data_, other->hide_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbRoleInfo_descriptor_;
  metadata.reflection = tbRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSimpleInfo::kCharIdFieldNumber;
const int CharacterDBSimpleInfo::kNameFieldNumber;
const int CharacterDBSimpleInfo::kSexFieldNumber;
const int CharacterDBSimpleInfo::kProfFieldNumber;
const int CharacterDBSimpleInfo::kLevelFieldNumber;
const int CharacterDBSimpleInfo::kExpFieldNumber;
const int CharacterDBSimpleInfo::kHpFieldNumber;
const int CharacterDBSimpleInfo::kFightPowerFieldNumber;
const int CharacterDBSimpleInfo::kEnterSceneIdFieldNumber;
const int CharacterDBSimpleInfo::kEnterMapIdFieldNumber;
const int CharacterDBSimpleInfo::kEnterPosXFieldNumber;
const int CharacterDBSimpleInfo::kEnterPosYFieldNumber;
const int CharacterDBSimpleInfo::kEnterPosZFieldNumber;
const int CharacterDBSimpleInfo::kLastSceneIdFieldNumber;
const int CharacterDBSimpleInfo::kLastMapIdFieldNumber;
const int CharacterDBSimpleInfo::kLastPosXFieldNumber;
const int CharacterDBSimpleInfo::kLastPosYFieldNumber;
const int CharacterDBSimpleInfo::kLastPosZFieldNumber;
const int CharacterDBSimpleInfo::kFacadeFieldNumber;
const int CharacterDBSimpleInfo::kCurstateFieldNumber;
const int CharacterDBSimpleInfo::kDeletechartimeFieldNumber;
const int CharacterDBSimpleInfo::kCreateTimeFieldNumber;
const int CharacterDBSimpleInfo::kTotalpayFieldNumber;
const int CharacterDBSimpleInfo::kClxFieldNumber;
const int CharacterDBSimpleInfo::kClyFieldNumber;
const int CharacterDBSimpleInfo::kClzFieldNumber;
const int CharacterDBSimpleInfo::kOccupationFieldNumber;
const int CharacterDBSimpleInfo::kAptitudeFieldNumber;
const int CharacterDBSimpleInfo::kFinishFlagFieldNumber;
const int CharacterDBSimpleInfo::kPlatidFieldNumber;
const int CharacterDBSimpleInfo::kPalaceLayerFieldNumber;
const int CharacterDBSimpleInfo::kPalaceBreakCountFieldNumber;
const int CharacterDBSimpleInfo::kDirtyFieldNumber;
#endif  // !_MSC_VER

CharacterDBSimpleInfo::CharacterDBSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSimpleInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::CharFacadeProto*>(&::proto_ff::CharFacadeProto::default_instance());
}

CharacterDBSimpleInfo::CharacterDBSimpleInfo(const CharacterDBSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  prof_ = 0u;
  level_ = 0u;
  exp_ = GOOGLE_LONGLONG(0);
  hp_ = GOOGLE_ULONGLONG(0);
  fightpower_ = GOOGLE_ULONGLONG(0);
  enter_scene_id_ = GOOGLE_ULONGLONG(0);
  enter_map_id_ = GOOGLE_ULONGLONG(0);
  enterposx_ = 0;
  enterposy_ = 0;
  enterposz_ = 0;
  lastsceneid_ = GOOGLE_ULONGLONG(0);
  lastmapid_ = GOOGLE_ULONGLONG(0);
  lastposx_ = 0;
  lastposy_ = 0;
  lastposz_ = 0;
  facade_ = NULL;
  curstate_ = 0;
  deletechartime_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  totalpay_ = 0u;
  clx_ = 0;
  cly_ = 0;
  clz_ = 0;
  occupation_ = GOOGLE_ULONGLONG(0);
  aptitude_ = GOOGLE_ULONGLONG(0);
  finish_flag_ = 0;
  platid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  palace_layer_ = 0;
  palace_break_count_ = 0;
  dirty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSimpleInfo::~CharacterDBSimpleInfo() {
  SharedDtor();
}

void CharacterDBSimpleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (platid_ != &::google::protobuf::internal::kEmptyString) {
    delete platid_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void CharacterDBSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSimpleInfo_descriptor_;
}

const CharacterDBSimpleInfo& CharacterDBSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

CharacterDBSimpleInfo* CharacterDBSimpleInfo::default_instance_ = NULL;

CharacterDBSimpleInfo* CharacterDBSimpleInfo::New() const {
  return new CharacterDBSimpleInfo;
}

void CharacterDBSimpleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    prof_ = 0u;
    level_ = 0u;
    exp_ = GOOGLE_LONGLONG(0);
    hp_ = GOOGLE_ULONGLONG(0);
    fightpower_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enter_scene_id_ = GOOGLE_ULONGLONG(0);
    enter_map_id_ = GOOGLE_ULONGLONG(0);
    enterposx_ = 0;
    enterposy_ = 0;
    enterposz_ = 0;
    lastsceneid_ = GOOGLE_ULONGLONG(0);
    lastmapid_ = GOOGLE_ULONGLONG(0);
    lastposx_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lastposy_ = 0;
    lastposz_ = 0;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::CharFacadeProto::Clear();
    }
    curstate_ = 0;
    deletechartime_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    totalpay_ = 0u;
    clx_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    cly_ = 0;
    clz_ = 0;
    occupation_ = GOOGLE_ULONGLONG(0);
    aptitude_ = GOOGLE_ULONGLONG(0);
    finish_flag_ = 0;
    if (has_platid()) {
      if (platid_ != &::google::protobuf::internal::kEmptyString) {
        platid_->clear();
      }
    }
    palace_layer_ = 0;
    palace_break_count_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    dirty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int64 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }

      // optional uint64 hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fightPower;
        break;
      }

      // optional uint64 fightPower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_enter_scene_id;
        break;
      }

      // optional uint64 enter_scene_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_scene_id_)));
          set_has_enter_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_enter_map_id;
        break;
      }

      // optional uint64 enter_map_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_map_id_)));
          set_has_enter_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_enterPosX;
        break;
      }

      // optional float enterPosX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposx_)));
          set_has_enterposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_enterPosY;
        break;
      }

      // optional float enterPosY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposy_)));
          set_has_enterposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_enterPosZ;
        break;
      }

      // optional float enterPosZ = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposz_)));
          set_has_enterposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lastSceneId;
        break;
      }

      // optional uint64 lastSceneId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsceneid_)));
          set_has_lastsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lastMapId;
        break;
      }

      // optional uint64 lastMapId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_lastPosX;
        break;
      }

      // optional float lastPosX = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposx_)));
          set_has_lastposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_lastPosY;
        break;
      }

      // optional float lastPosY = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposy_)));
          set_has_lastposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_lastPosZ;
        break;
      }

      // optional float lastPosZ = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposz_)));
          set_has_lastposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_facade;
        break;
      }

      // optional .proto_ff.CharFacadeProto facade = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_curstate;
        break;
      }

      // optional int32 curstate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_deletechartime;
        break;
      }

      // optional uint64 deletechartime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletechartime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deletechartime_)));
          set_has_deletechartime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_createTime;
        break;
      }

      // optional uint64 createTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_totalpay;
        break;
      }

      // optional uint32 totalpay = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalpay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalpay_)));
          set_has_totalpay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_clx;
        break;
      }

      // optional float clx = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clx_)));
          set_has_clx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_cly;
        break;
      }

      // optional float cly = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cly_)));
          set_has_cly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_clz;
        break;
      }

      // optional float clz = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clz_)));
          set_has_clz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_occupation;
        break;
      }

      // optional uint64 occupation = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_aptitude;
        break;
      }

      // optional uint64 aptitude = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aptitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aptitude_)));
          set_has_aptitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_finish_flag;
        break;
      }

      // optional int32 finish_flag = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_flag_)));
          set_has_finish_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_platid;
        break;
      }

      // optional string platid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platid().data(), this->platid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_palace_layer;
        break;
      }

      // optional int32 palace_layer = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palace_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &palace_layer_)));
          set_has_palace_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_palace_break_count;
        break;
      }

      // optional int32 palace_break_count = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palace_break_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &palace_break_count_)));
          set_has_palace_break_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_dirty;
        break;
      }

      // optional int32 dirty = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prof(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->exp(), output);
  }

  // optional uint64 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->hp(), output);
  }

  // optional uint64 fightPower = 8;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fightpower(), output);
  }

  // optional uint64 enter_scene_id = 9;
  if (has_enter_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->enter_scene_id(), output);
  }

  // optional uint64 enter_map_id = 10;
  if (has_enter_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->enter_map_id(), output);
  }

  // optional float enterPosX = 11;
  if (has_enterposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->enterposx(), output);
  }

  // optional float enterPosY = 12;
  if (has_enterposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->enterposy(), output);
  }

  // optional float enterPosZ = 13;
  if (has_enterposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->enterposz(), output);
  }

  // optional uint64 lastSceneId = 14;
  if (has_lastsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->lastsceneid(), output);
  }

  // optional uint64 lastMapId = 15;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->lastmapid(), output);
  }

  // optional float lastPosX = 16;
  if (has_lastposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->lastposx(), output);
  }

  // optional float lastPosY = 17;
  if (has_lastposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->lastposy(), output);
  }

  // optional float lastPosZ = 18;
  if (has_lastposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->lastposz(), output);
  }

  // optional .proto_ff.CharFacadeProto facade = 19;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->facade(), output);
  }

  // optional int32 curstate = 20;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->curstate(), output);
  }

  // optional uint64 deletechartime = 21;
  if (has_deletechartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->deletechartime(), output);
  }

  // optional uint64 createTime = 22;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->createtime(), output);
  }

  // optional uint32 totalpay = 23;
  if (has_totalpay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->totalpay(), output);
  }

  // optional float clx = 24;
  if (has_clx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->clx(), output);
  }

  // optional float cly = 25;
  if (has_cly()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->cly(), output);
  }

  // optional float clz = 26;
  if (has_clz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->clz(), output);
  }

  // optional uint64 occupation = 27;
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->occupation(), output);
  }

  // optional uint64 aptitude = 28;
  if (has_aptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->aptitude(), output);
  }

  // optional int32 finish_flag = 29;
  if (has_finish_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->finish_flag(), output);
  }

  // optional string platid = 30;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->platid(), output);
  }

  // optional int32 palace_layer = 31;
  if (has_palace_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->palace_layer(), output);
  }

  // optional int32 palace_break_count = 32;
  if (has_palace_break_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->palace_break_count(), output);
  }

  // optional int32 dirty = 33;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->dirty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prof(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->exp(), target);
  }

  // optional uint64 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->hp(), target);
  }

  // optional uint64 fightPower = 8;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fightpower(), target);
  }

  // optional uint64 enter_scene_id = 9;
  if (has_enter_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->enter_scene_id(), target);
  }

  // optional uint64 enter_map_id = 10;
  if (has_enter_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->enter_map_id(), target);
  }

  // optional float enterPosX = 11;
  if (has_enterposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->enterposx(), target);
  }

  // optional float enterPosY = 12;
  if (has_enterposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->enterposy(), target);
  }

  // optional float enterPosZ = 13;
  if (has_enterposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->enterposz(), target);
  }

  // optional uint64 lastSceneId = 14;
  if (has_lastsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->lastsceneid(), target);
  }

  // optional uint64 lastMapId = 15;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->lastmapid(), target);
  }

  // optional float lastPosX = 16;
  if (has_lastposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->lastposx(), target);
  }

  // optional float lastPosY = 17;
  if (has_lastposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->lastposy(), target);
  }

  // optional float lastPosZ = 18;
  if (has_lastposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->lastposz(), target);
  }

  // optional .proto_ff.CharFacadeProto facade = 19;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->facade(), target);
  }

  // optional int32 curstate = 20;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->curstate(), target);
  }

  // optional uint64 deletechartime = 21;
  if (has_deletechartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->deletechartime(), target);
  }

  // optional uint64 createTime = 22;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->createtime(), target);
  }

  // optional uint32 totalpay = 23;
  if (has_totalpay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->totalpay(), target);
  }

  // optional float clx = 24;
  if (has_clx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->clx(), target);
  }

  // optional float cly = 25;
  if (has_cly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->cly(), target);
  }

  // optional float clz = 26;
  if (has_clz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->clz(), target);
  }

  // optional uint64 occupation = 27;
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->occupation(), target);
  }

  // optional uint64 aptitude = 28;
  if (has_aptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->aptitude(), target);
  }

  // optional int32 finish_flag = 29;
  if (has_finish_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->finish_flag(), target);
  }

  // optional string platid = 30;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platid().data(), this->platid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->platid(), target);
  }

  // optional int32 palace_layer = 31;
  if (has_palace_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->palace_layer(), target);
  }

  // optional int32 palace_break_count = 32;
  if (has_palace_break_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->palace_break_count(), target);
  }

  // optional int32 dirty = 33;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->dirty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int64 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional uint64 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // optional uint64 fightPower = 8;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightpower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 enter_scene_id = 9;
    if (has_enter_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_scene_id());
    }

    // optional uint64 enter_map_id = 10;
    if (has_enter_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_map_id());
    }

    // optional float enterPosX = 11;
    if (has_enterposx()) {
      total_size += 1 + 4;
    }

    // optional float enterPosY = 12;
    if (has_enterposy()) {
      total_size += 1 + 4;
    }

    // optional float enterPosZ = 13;
    if (has_enterposz()) {
      total_size += 1 + 4;
    }

    // optional uint64 lastSceneId = 14;
    if (has_lastsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsceneid());
    }

    // optional uint64 lastMapId = 15;
    if (has_lastmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmapid());
    }

    // optional float lastPosX = 16;
    if (has_lastposx()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float lastPosY = 17;
    if (has_lastposy()) {
      total_size += 2 + 4;
    }

    // optional float lastPosZ = 18;
    if (has_lastposz()) {
      total_size += 2 + 4;
    }

    // optional .proto_ff.CharFacadeProto facade = 19;
    if (has_facade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional int32 curstate = 20;
    if (has_curstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curstate());
    }

    // optional uint64 deletechartime = 21;
    if (has_deletechartime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deletechartime());
    }

    // optional uint64 createTime = 22;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint32 totalpay = 23;
    if (has_totalpay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalpay());
    }

    // optional float clx = 24;
    if (has_clx()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float cly = 25;
    if (has_cly()) {
      total_size += 2 + 4;
    }

    // optional float clz = 26;
    if (has_clz()) {
      total_size += 2 + 4;
    }

    // optional uint64 occupation = 27;
    if (has_occupation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->occupation());
    }

    // optional uint64 aptitude = 28;
    if (has_aptitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aptitude());
    }

    // optional int32 finish_flag = 29;
    if (has_finish_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_flag());
    }

    // optional string platid = 30;
    if (has_platid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platid());
    }

    // optional int32 palace_layer = 31;
    if (has_palace_layer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->palace_layer());
    }

    // optional int32 palace_break_count = 32;
    if (has_palace_break_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->palace_break_count());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 dirty = 33;
    if (has_dirty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dirty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSimpleInfo::MergeFrom(const CharacterDBSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enter_scene_id()) {
      set_enter_scene_id(from.enter_scene_id());
    }
    if (from.has_enter_map_id()) {
      set_enter_map_id(from.enter_map_id());
    }
    if (from.has_enterposx()) {
      set_enterposx(from.enterposx());
    }
    if (from.has_enterposy()) {
      set_enterposy(from.enterposy());
    }
    if (from.has_enterposz()) {
      set_enterposz(from.enterposz());
    }
    if (from.has_lastsceneid()) {
      set_lastsceneid(from.lastsceneid());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
    if (from.has_lastposx()) {
      set_lastposx(from.lastposx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastposy()) {
      set_lastposy(from.lastposy());
    }
    if (from.has_lastposz()) {
      set_lastposz(from.lastposz());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::CharFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_deletechartime()) {
      set_deletechartime(from.deletechartime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_totalpay()) {
      set_totalpay(from.totalpay());
    }
    if (from.has_clx()) {
      set_clx(from.clx());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cly()) {
      set_cly(from.cly());
    }
    if (from.has_clz()) {
      set_clz(from.clz());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_aptitude()) {
      set_aptitude(from.aptitude());
    }
    if (from.has_finish_flag()) {
      set_finish_flag(from.finish_flag());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_palace_layer()) {
      set_palace_layer(from.palace_layer());
    }
    if (from.has_palace_break_count()) {
      set_palace_break_count(from.palace_break_count());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSimpleInfo::CopyFrom(const CharacterDBSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSimpleInfo::IsInitialized() const {

  return true;
}

void CharacterDBSimpleInfo::Swap(CharacterDBSimpleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(enter_scene_id_, other->enter_scene_id_);
    std::swap(enter_map_id_, other->enter_map_id_);
    std::swap(enterposx_, other->enterposx_);
    std::swap(enterposy_, other->enterposy_);
    std::swap(enterposz_, other->enterposz_);
    std::swap(lastsceneid_, other->lastsceneid_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastposx_, other->lastposx_);
    std::swap(lastposy_, other->lastposy_);
    std::swap(lastposz_, other->lastposz_);
    std::swap(facade_, other->facade_);
    std::swap(curstate_, other->curstate_);
    std::swap(deletechartime_, other->deletechartime_);
    std::swap(createtime_, other->createtime_);
    std::swap(totalpay_, other->totalpay_);
    std::swap(clx_, other->clx_);
    std::swap(cly_, other->cly_);
    std::swap(clz_, other->clz_);
    std::swap(occupation_, other->occupation_);
    std::swap(aptitude_, other->aptitude_);
    std::swap(finish_flag_, other->finish_flag_);
    std::swap(platid_, other->platid_);
    std::swap(palace_layer_, other->palace_layer_);
    std::swap(palace_break_count_, other->palace_break_count_);
    std::swap(dirty_, other->dirty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSimpleInfo_descriptor_;
  metadata.reflection = CharacterDBSimpleInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
