// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "marry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* marryconst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marryconst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_marryconst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_marryconst_reflection_ = NULL;
const ::google::protobuf::Descriptor* marrybanquetfireworkDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marrybanquetfireworkDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* marrybanquet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marrybanquet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_marrybanquet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_marrybanquet_reflection_ = NULL;
const ::google::protobuf::Descriptor* marrygear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marrygear_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_marrygear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_marrygear_reflection_ = NULL;
const ::google::protobuf::Descriptor* marrytimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marrytimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_marrytimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_marrytimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* marrywarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marrywarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_marrywarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_marrywarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* marrylevelexpwarmDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marrylevelexpwarmDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* marrylevelexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marrylevelexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_marrylevelexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_marrylevelexp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_marry_2eproto() {
  protobuf_AddDesc_marry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "marry.proto");
  GOOGLE_CHECK(file != NULL);
  marryconst_descriptor_ = file->message_type(0);
  static const int marryconst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marryconst, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marryconst, constantdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marryconst, stringdata_),
  };
  marryconst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marryconst_descriptor_,
      marryconst::default_instance_,
      marryconst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marryconst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marryconst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marryconst));
  Sheet_marryconst_descriptor_ = file->message_type(1);
  static const int Sheet_marryconst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marryconst, marryconst_list_),
  };
  Sheet_marryconst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_marryconst_descriptor_,
      Sheet_marryconst::default_instance_,
      Sheet_marryconst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marryconst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marryconst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_marryconst));
  marrybanquetfireworkDesc_descriptor_ = file->message_type(2);
  static const int marrybanquetfireworkDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquetfireworkDesc, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquetfireworkDesc, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquetfireworkDesc, efc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquetfireworkDesc, warm_),
  };
  marrybanquetfireworkDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marrybanquetfireworkDesc_descriptor_,
      marrybanquetfireworkDesc::default_instance_,
      marrybanquetfireworkDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquetfireworkDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquetfireworkDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marrybanquetfireworkDesc));
  marrybanquet_descriptor_ = file->message_type(3);
  static const int marrybanquet_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, orderitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, ordernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, banquetreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, rewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, makelovewarmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, invitenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, strangernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, preludetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, banquettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, makeloveefc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, warmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, warmcycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, duplcateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, firework_),
  };
  marrybanquet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marrybanquet_descriptor_,
      marrybanquet::default_instance_,
      marrybanquet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrybanquet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marrybanquet));
  Sheet_marrybanquet_descriptor_ = file->message_type(4);
  static const int Sheet_marrybanquet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrybanquet, marrybanquet_list_),
  };
  Sheet_marrybanquet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_marrybanquet_descriptor_,
      Sheet_marrybanquet::default_instance_,
      Sheet_marrybanquet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrybanquet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrybanquet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_marrybanquet));
  marrygear_descriptor_ = file->message_type(5);
  static const int marrygear_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, initiate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, usetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, useprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, aaprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, weddingeffect_),
  };
  marrygear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marrygear_descriptor_,
      marrygear::default_instance_,
      marrygear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrygear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marrygear));
  Sheet_marrygear_descriptor_ = file->message_type(6);
  static const int Sheet_marrygear_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrygear, marrygear_list_),
  };
  Sheet_marrygear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_marrygear_descriptor_,
      Sheet_marrygear::default_instance_,
      Sheet_marrygear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrygear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrygear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_marrygear));
  marrytimes_descriptor_ = file->message_type(7);
  static const int marrytimes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrytimes, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrytimes, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrytimes, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrytimes, limit_),
  };
  marrytimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marrytimes_descriptor_,
      marrytimes::default_instance_,
      marrytimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrytimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrytimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marrytimes));
  Sheet_marrytimes_descriptor_ = file->message_type(8);
  static const int Sheet_marrytimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrytimes, marrytimes_list_),
  };
  Sheet_marrytimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_marrytimes_descriptor_,
      Sheet_marrytimes::default_instance_,
      Sheet_marrytimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrytimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrytimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_marrytimes));
  marrywarm_descriptor_ = file->message_type(9);
  static const int marrywarm_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, warmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, monsterflashcycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, warmexpvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, warmexpcycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, warmgetnum_),
  };
  marrywarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marrywarm_descriptor_,
      marrywarm::default_instance_,
      marrywarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrywarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marrywarm));
  Sheet_marrywarm_descriptor_ = file->message_type(10);
  static const int Sheet_marrywarm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrywarm, marrywarm_list_),
  };
  Sheet_marrywarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_marrywarm_descriptor_,
      Sheet_marrywarm::default_instance_,
      Sheet_marrywarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrywarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrywarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_marrywarm));
  marrylevelexpwarmDesc_descriptor_ = file->message_type(11);
  static const int marrylevelexpwarmDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrylevelexpwarmDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrylevelexpwarmDesc, exp_),
  };
  marrylevelexpwarmDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marrylevelexpwarmDesc_descriptor_,
      marrylevelexpwarmDesc::default_instance_,
      marrylevelexpwarmDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrylevelexpwarmDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrylevelexpwarmDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marrylevelexpwarmDesc));
  marrylevelexp_descriptor_ = file->message_type(12);
  static const int marrylevelexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrylevelexp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrylevelexp, warm_),
  };
  marrylevelexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marrylevelexp_descriptor_,
      marrylevelexp::default_instance_,
      marrylevelexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrylevelexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marrylevelexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marrylevelexp));
  Sheet_marrylevelexp_descriptor_ = file->message_type(13);
  static const int Sheet_marrylevelexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrylevelexp, marrylevelexp_list_),
  };
  Sheet_marrylevelexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_marrylevelexp_descriptor_,
      Sheet_marrylevelexp::default_instance_,
      Sheet_marrylevelexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrylevelexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_marrylevelexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_marrylevelexp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_marry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marryconst_descriptor_, &marryconst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_marryconst_descriptor_, &Sheet_marryconst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marrybanquetfireworkDesc_descriptor_, &marrybanquetfireworkDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marrybanquet_descriptor_, &marrybanquet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_marrybanquet_descriptor_, &Sheet_marrybanquet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marrygear_descriptor_, &marrygear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_marrygear_descriptor_, &Sheet_marrygear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marrytimes_descriptor_, &marrytimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_marrytimes_descriptor_, &Sheet_marrytimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marrywarm_descriptor_, &marrywarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_marrywarm_descriptor_, &Sheet_marrywarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marrylevelexpwarmDesc_descriptor_, &marrylevelexpwarmDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marrylevelexp_descriptor_, &marrylevelexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_marrylevelexp_descriptor_, &Sheet_marrylevelexp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_marry_2eproto() {
  delete marryconst::default_instance_;
  delete marryconst_reflection_;
  delete Sheet_marryconst::default_instance_;
  delete Sheet_marryconst_reflection_;
  delete marrybanquetfireworkDesc::default_instance_;
  delete marrybanquetfireworkDesc_reflection_;
  delete marrybanquet::default_instance_;
  delete marrybanquet_reflection_;
  delete Sheet_marrybanquet::default_instance_;
  delete Sheet_marrybanquet_reflection_;
  delete marrygear::default_instance_;
  delete marrygear_reflection_;
  delete Sheet_marrygear::default_instance_;
  delete Sheet_marrygear_reflection_;
  delete marrytimes::default_instance_;
  delete marrytimes_reflection_;
  delete Sheet_marrytimes::default_instance_;
  delete Sheet_marrytimes_reflection_;
  delete marrywarm::default_instance_;
  delete marrywarm_reflection_;
  delete Sheet_marrywarm::default_instance_;
  delete Sheet_marrywarm_reflection_;
  delete marrylevelexpwarmDesc::default_instance_;
  delete marrylevelexpwarmDesc_reflection_;
  delete marrylevelexp::default_instance_;
  delete marrylevelexp_reflection_;
  delete Sheet_marrylevelexp::default_instance_;
  delete Sheet_marrylevelexp_reflection_;
}

void protobuf_AddDesc_marry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013marry.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"o\n\nmarryconst\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id"
    "\022 \n\014constantdata\030\002 \001(\003B\n\302\377\024\006\346\225\260\346\215\256\022+\n\nst"
    "ringdata\030\003 \001(\tB\027\302\377\024\017\345\255\227\347\254\246\344\270\262\346\225\260\346\215\256\220\301\024<\""
    "G\n\020Sheet_marryconst\0223\n\017marryconst_List\030\001"
    " \003(\0132\024.proto_ff.marryconstB\004\210\301\024\024\"\207\001\n\030mar"
    "rybanquetfireworkDesc\022\024\n\004Item\030\001 \001(\003B\006\302\377\024"
    "\002ID\022\031\n\005Price\030\002 \001(\005B\n\302\377\024\006\344\273\267\346\240\274\022\027\n\003Efc\030\003 "
    "\001(\003B\n\302\377\024\006\347\211\271\346\225\210\022!\n\004Warm\030\004 \001(\005B\023\302\377\024\017\345\242\236\345\212"
    "\240\346\270\251\351\246\250\345\200\274\"\271\005\n\014marrybanquet\022\022\n\002id\030\001 \001(\005B"
    "\006\302\377\024\002ID\022)\n\torderItem\030\002 \001(\003B\026\302\377\024\022\351\242\204\347\272\246\346\266"
    "\210\350\200\227\351\201\223\345\205\267\022(\n\010orderNum\030\003 \001(\005B\026\302\377\024\022\351\242\204\347\272\246"
    "\346\266\210\350\200\227\346\225\260\351\207\217\022-\n\rbanquetReward\030\004 \001(\003B\026\302\377\024"
    "\022\345\251\232\345\256\264\345\245\226\345\212\261\351\201\223\345\205\267\022)\n\trewardNum\030\005 \001(\005B\026"
    "\302\377\024\022\345\245\226\345\212\261\351\201\223\345\205\267\346\225\260\351\207\217\0224\n\021makeLoveWarmVa"
    "lue\030\006 \001(\005B\031\302\377\024\025\344\272\262\347\203\255\345\242\236\345\212\240\346\270\251\351\246\250\345\200\274\022,\n\t"
    "inviteNum\030\007 \001(\005B\031\302\377\024\025\345\217\257\351\202\200\350\257\267\345\271\266\345\217\257\344\270\212\351"
    "\231\220\022+\n\013strangerNum\030\010 \001(\005B\026\302\377\024\022\350\267\257\344\272\272\344\271\261\345\205"
    "\245\345\220\215\351\242\235\0221\n\013preludeTime\030\t \001(\005B\034\302\377\024\030\345\251\232\345\256\264"
    "\351\242\204\345\244\207\351\230\266\346\256\265\346\227\266\351\225\277\022+\n\013banquetTime\030\n \001(\005B"
    "\026\302\377\024\022\345\251\232\345\256\264\351\230\266\346\256\265\346\227\266\351\225\277\022+\n\013makeLoveEfc\030\013"
    " \001(\003B\026\302\377\024\022\345\251\232\345\256\264\344\272\262\347\203\255\347\211\271\346\225\210\022/\n\twarmValu"
    "e\030\014 \001(\005B\034\302\377\024\030\346\257\217\344\270\252\344\272\272\345\242\236\345\212\240\346\270\251\351\246\250\345\200\274\022)\n"
    "\twarmCycle\030\r \001(\005B\026\302\377\024\022\350\207\252\345\212\250\345\242\236\345\212\240\345\221\250\346\234\237"
    "\022&\n\nduplcateId\030\016 \001(\003B\022\302\377\024\016\345\251\232\345\256\264\345\211\257\346\234\254ID"
    "\022D\n\010firework\030\017 \003(\0132\".proto_ff.marrybanqu"
    "etfireworkDescB\016\302\377\024\006\347\203\237\350\212\261\210\301\024\002\"M\n\022Sheet_"
    "marrybanquet\0227\n\021marrybanquet_List\030\001 \003(\0132"
    "\026.proto_ff.marrybanquetB\004\210\301\024\024\"\371\002\n\tmarryg"
    "ear\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\0224\n\005title\030\002 \001(\003B%"
    "\302\377\024!\347\247\260\345\217\267\345\245\226\345\212\261\357\274\210\347\254\254\344\270\200\344\270\252\347\211\251\345\223\201\357\274\211\0223\n"
    "\004item\030\003 \001(\003B%\302\377\024!\347\211\251\345\223\201\345\245\226\345\212\261\357\274\210\347\254\254\344\272\214\344\270"
    "\252\347\211\251\345\223\201\357\274\211\022 \n\010nickName\030\004 \001(\tB\016\302\377\024\006\346\230\265\347\247\260"
    "\220\301\024<\022\"\n\010initiate\030\005 \001(\003B\020\302\377\024\014\345\217\221\350\265\267\345\245\226\345\212\261"
    "\022\033\n\007usetype\030\006 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\"\n\010usepric"
    "e\030\007 \001(\005B\020\302\377\024\014\345\217\221\350\265\267\344\273\267\346\240\274\022\035\n\007AAPrice\030\010 \001"
    "(\005B\014\302\377\024\010AA\344\273\267\346\240\274\022\036\n\006preset\030\t \001(\tB\016\302\377\024\006\345\221"
    "\212\347\231\275\220\301\024<\022\'\n\rweddingEffect\030\n \001(\003B\020\302\377\024\014\347\273\223"
    "\345\251\232\347\211\271\346\225\210\"D\n\017Sheet_marrygear\0221\n\016marrygea"
    "r_List\030\001 \003(\0132\023.proto_ff.marrygearB\004\210\301\024\024\""
    "\233\001\n\nmarrytimes\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\'\n\tst"
    "artTime\030\002 \001(\tB\024\302\377\024\014\345\274\200\345\247\213\346\227\266\351\227\264\220\301\024<\022%\n\007e"
    "ndTime\030\003 \001(\tB\024\302\377\024\014\347\273\223\346\235\237\346\227\266\351\227\264\220\301\024<\022)\n\005li"
    "mit\030\004 \001(\tB\032\302\377\024\022\351\242\204\347\272\246\347\261\273\345\236\213\351\231\220\345\210\266\220\301\024<\"G\n"
    "\020Sheet_marrytimes\0223\n\017marrytimes_List\030\001 \003"
    "(\0132\024.proto_ff.marrytimesB\004\210\301\024\024\"\356\002\n\tmarry"
    "warm\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002ID\022,\n\twarmValue\030\002 "
    "\001(\005B\031\302\377\024\025\346\270\251\351\246\250\345\200\274\346\241\243\344\275\215\346\225\260\345\200\274\022.\n\tmonste"
    "rId\030\003 \001(\003B\033\302\377\024\027\346\270\251\351\246\250\345\200\274\346\241\243\344\275\215\345\256\235\347\256\261ID\022C"
    "\n\021monsterFlashCycle\030\004 \001(\005B(\302\377\024$\346\270\251\351\246\250\345\200\274"
    "\346\241\243\344\275\215\345\256\235\347\256\261\345\221\250\346\234\237\357\274\210\347\247\222\357\274\211\022/\n\014warmExpVa"
    "lue\030\005 \001(\005B\031\302\377\024\025\346\270\251\351\246\250\345\200\274\346\241\243\344\275\215\347\273\217\351\252\214\022>\n\014"
    "warmExpCycle\030\006 \001(\005B(\302\377\024$\346\270\251\351\246\250\345\200\274\346\241\243\344\275\215\347"
    "\273\217\351\252\214\345\221\250\346\234\237\357\274\210\347\247\222\357\274\211\0229\n\nwarmGetNum\030\007 \001(\005"
    "B%\302\377\024!\346\270\251\351\246\250\345\200\274\346\241\243\344\275\215\345\242\236\345\212\240\351\207\207\351\233\206\346\254\241\346\225\260\""
    "D\n\017Sheet_marrywarm\0221\n\016marrywarm_List\030\001 \003"
    "(\0132\023.proto_ff.marrywarmB\004\210\301\024\024\"S\n\025marryle"
    "velexpwarmDesc\022\033\n\002Id\030\001 \001(\005B\017\302\377\024\013\346\270\251\351\246\250\345\200"
    "\274ID\022\035\n\003Exp\030\002 \001(\003B\020\302\377\024\014\345\242\236\345\212\240\347\273\217\351\252\214\"o\n\rma"
    "rrylevelexp\022\037\n\005level\030\001 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255"
    "\211\347\272\247\022=\n\004warm\030\002 \003(\0132\037.proto_ff.marrylevel"
    "expwarmDescB\016\302\377\024\006\346\241\243\344\275\215\210\301\024\004\"Q\n\023Sheet_mar"
    "rylevelexp\022:\n\022marrylevelexp_List\030\001 \003(\0132\027"
    ".proto_ff.marrylevelexpB\005\210\301\024\320\017", 2550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marry.proto", &protobuf_RegisterTypes);
  marryconst::default_instance_ = new marryconst();
  Sheet_marryconst::default_instance_ = new Sheet_marryconst();
  marrybanquetfireworkDesc::default_instance_ = new marrybanquetfireworkDesc();
  marrybanquet::default_instance_ = new marrybanquet();
  Sheet_marrybanquet::default_instance_ = new Sheet_marrybanquet();
  marrygear::default_instance_ = new marrygear();
  Sheet_marrygear::default_instance_ = new Sheet_marrygear();
  marrytimes::default_instance_ = new marrytimes();
  Sheet_marrytimes::default_instance_ = new Sheet_marrytimes();
  marrywarm::default_instance_ = new marrywarm();
  Sheet_marrywarm::default_instance_ = new Sheet_marrywarm();
  marrylevelexpwarmDesc::default_instance_ = new marrylevelexpwarmDesc();
  marrylevelexp::default_instance_ = new marrylevelexp();
  Sheet_marrylevelexp::default_instance_ = new Sheet_marrylevelexp();
  marryconst::default_instance_->InitAsDefaultInstance();
  Sheet_marryconst::default_instance_->InitAsDefaultInstance();
  marrybanquetfireworkDesc::default_instance_->InitAsDefaultInstance();
  marrybanquet::default_instance_->InitAsDefaultInstance();
  Sheet_marrybanquet::default_instance_->InitAsDefaultInstance();
  marrygear::default_instance_->InitAsDefaultInstance();
  Sheet_marrygear::default_instance_->InitAsDefaultInstance();
  marrytimes::default_instance_->InitAsDefaultInstance();
  Sheet_marrytimes::default_instance_->InitAsDefaultInstance();
  marrywarm::default_instance_->InitAsDefaultInstance();
  Sheet_marrywarm::default_instance_->InitAsDefaultInstance();
  marrylevelexpwarmDesc::default_instance_->InitAsDefaultInstance();
  marrylevelexp::default_instance_->InitAsDefaultInstance();
  Sheet_marrylevelexp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_marry_2eproto {
  StaticDescriptorInitializer_marry_2eproto() {
    protobuf_AddDesc_marry_2eproto();
  }
} static_descriptor_initializer_marry_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int marryconst::kIdFieldNumber;
const int marryconst::kConstantdataFieldNumber;
const int marryconst::kStringdataFieldNumber;
#endif  // !_MSC_VER

marryconst::marryconst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marryconst::InitAsDefaultInstance() {
}

marryconst::marryconst(const marryconst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marryconst::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  constantdata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marryconst::~marryconst() {
  SharedDtor();
}

void marryconst::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void marryconst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marryconst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marryconst_descriptor_;
}

const marryconst& marryconst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

marryconst* marryconst::default_instance_ = NULL;

marryconst* marryconst::New() const {
  return new marryconst;
}

void marryconst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    constantdata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marryconst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_constantdata;
        break;
      }

      // optional int64 constantdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constantdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantdata_)));
          set_has_constantdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marryconst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->constantdata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marryconst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->constantdata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marryconst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 constantdata = 2;
    if (has_constantdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantdata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marryconst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marryconst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marryconst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marryconst::MergeFrom(const marryconst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_constantdata()) {
      set_constantdata(from.constantdata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marryconst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marryconst::CopyFrom(const marryconst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marryconst::IsInitialized() const {

  return true;
}

void marryconst::Swap(marryconst* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(constantdata_, other->constantdata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marryconst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marryconst_descriptor_;
  metadata.reflection = marryconst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_marryconst::kMarryconstListFieldNumber;
#endif  // !_MSC_VER

Sheet_marryconst::Sheet_marryconst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_marryconst::InitAsDefaultInstance() {
}

Sheet_marryconst::Sheet_marryconst(const Sheet_marryconst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_marryconst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_marryconst::~Sheet_marryconst() {
  SharedDtor();
}

void Sheet_marryconst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_marryconst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_marryconst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_marryconst_descriptor_;
}

const Sheet_marryconst& Sheet_marryconst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

Sheet_marryconst* Sheet_marryconst::default_instance_ = NULL;

Sheet_marryconst* Sheet_marryconst::New() const {
  return new Sheet_marryconst;
}

void Sheet_marryconst::Clear() {
  marryconst_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_marryconst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.marryconst marryconst_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marryconst_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marryconst_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_marryconst_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_marryconst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.marryconst marryconst_List = 1;
  for (int i = 0; i < this->marryconst_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marryconst_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_marryconst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.marryconst marryconst_List = 1;
  for (int i = 0; i < this->marryconst_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marryconst_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_marryconst::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.marryconst marryconst_List = 1;
  total_size += 1 * this->marryconst_list_size();
  for (int i = 0; i < this->marryconst_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marryconst_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_marryconst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_marryconst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_marryconst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_marryconst::MergeFrom(const Sheet_marryconst& from) {
  GOOGLE_CHECK_NE(&from, this);
  marryconst_list_.MergeFrom(from.marryconst_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_marryconst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_marryconst::CopyFrom(const Sheet_marryconst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_marryconst::IsInitialized() const {

  return true;
}

void Sheet_marryconst::Swap(Sheet_marryconst* other) {
  if (other != this) {
    marryconst_list_.Swap(&other->marryconst_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_marryconst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_marryconst_descriptor_;
  metadata.reflection = Sheet_marryconst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marrybanquetfireworkDesc::kItemFieldNumber;
const int marrybanquetfireworkDesc::kPriceFieldNumber;
const int marrybanquetfireworkDesc::kEfcFieldNumber;
const int marrybanquetfireworkDesc::kWarmFieldNumber;
#endif  // !_MSC_VER

marrybanquetfireworkDesc::marrybanquetfireworkDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marrybanquetfireworkDesc::InitAsDefaultInstance() {
}

marrybanquetfireworkDesc::marrybanquetfireworkDesc(const marrybanquetfireworkDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marrybanquetfireworkDesc::SharedCtor() {
  _cached_size_ = 0;
  item_ = GOOGLE_LONGLONG(0);
  price_ = 0;
  efc_ = GOOGLE_LONGLONG(0);
  warm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marrybanquetfireworkDesc::~marrybanquetfireworkDesc() {
  SharedDtor();
}

void marrybanquetfireworkDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void marrybanquetfireworkDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marrybanquetfireworkDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marrybanquetfireworkDesc_descriptor_;
}

const marrybanquetfireworkDesc& marrybanquetfireworkDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

marrybanquetfireworkDesc* marrybanquetfireworkDesc::default_instance_ = NULL;

marrybanquetfireworkDesc* marrybanquetfireworkDesc::New() const {
  return new marrybanquetfireworkDesc;
}

void marrybanquetfireworkDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_ = GOOGLE_LONGLONG(0);
    price_ = 0;
    efc_ = GOOGLE_LONGLONG(0);
    warm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marrybanquetfireworkDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Price;
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Efc;
        break;
      }

      // optional int64 Efc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Efc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &efc_)));
          set_has_efc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Warm;
        break;
      }

      // optional int32 Warm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Warm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warm_)));
          set_has_warm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marrybanquetfireworkDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item(), output);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional int64 Efc = 3;
  if (has_efc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->efc(), output);
  }

  // optional int32 Warm = 4;
  if (has_warm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->warm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marrybanquetfireworkDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item(), target);
  }

  // optional int32 Price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional int64 Efc = 3;
  if (has_efc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->efc(), target);
  }

  // optional int32 Warm = 4;
  if (has_warm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->warm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marrybanquetfireworkDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int64 Efc = 3;
    if (has_efc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->efc());
    }

    // optional int32 Warm = 4;
    if (has_warm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marrybanquetfireworkDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marrybanquetfireworkDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marrybanquetfireworkDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marrybanquetfireworkDesc::MergeFrom(const marrybanquetfireworkDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_efc()) {
      set_efc(from.efc());
    }
    if (from.has_warm()) {
      set_warm(from.warm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marrybanquetfireworkDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marrybanquetfireworkDesc::CopyFrom(const marrybanquetfireworkDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marrybanquetfireworkDesc::IsInitialized() const {

  return true;
}

void marrybanquetfireworkDesc::Swap(marrybanquetfireworkDesc* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(price_, other->price_);
    std::swap(efc_, other->efc_);
    std::swap(warm_, other->warm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marrybanquetfireworkDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marrybanquetfireworkDesc_descriptor_;
  metadata.reflection = marrybanquetfireworkDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marrybanquet::kIdFieldNumber;
const int marrybanquet::kOrderItemFieldNumber;
const int marrybanquet::kOrderNumFieldNumber;
const int marrybanquet::kBanquetRewardFieldNumber;
const int marrybanquet::kRewardNumFieldNumber;
const int marrybanquet::kMakeLoveWarmValueFieldNumber;
const int marrybanquet::kInviteNumFieldNumber;
const int marrybanquet::kStrangerNumFieldNumber;
const int marrybanquet::kPreludeTimeFieldNumber;
const int marrybanquet::kBanquetTimeFieldNumber;
const int marrybanquet::kMakeLoveEfcFieldNumber;
const int marrybanquet::kWarmValueFieldNumber;
const int marrybanquet::kWarmCycleFieldNumber;
const int marrybanquet::kDuplcateIdFieldNumber;
const int marrybanquet::kFireworkFieldNumber;
#endif  // !_MSC_VER

marrybanquet::marrybanquet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marrybanquet::InitAsDefaultInstance() {
}

marrybanquet::marrybanquet(const marrybanquet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marrybanquet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  orderitem_ = GOOGLE_LONGLONG(0);
  ordernum_ = 0;
  banquetreward_ = GOOGLE_LONGLONG(0);
  rewardnum_ = 0;
  makelovewarmvalue_ = 0;
  invitenum_ = 0;
  strangernum_ = 0;
  preludetime_ = 0;
  banquettime_ = 0;
  makeloveefc_ = GOOGLE_LONGLONG(0);
  warmvalue_ = 0;
  warmcycle_ = 0;
  duplcateid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marrybanquet::~marrybanquet() {
  SharedDtor();
}

void marrybanquet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void marrybanquet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marrybanquet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marrybanquet_descriptor_;
}

const marrybanquet& marrybanquet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

marrybanquet* marrybanquet::default_instance_ = NULL;

marrybanquet* marrybanquet::New() const {
  return new marrybanquet;
}

void marrybanquet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    orderitem_ = GOOGLE_LONGLONG(0);
    ordernum_ = 0;
    banquetreward_ = GOOGLE_LONGLONG(0);
    rewardnum_ = 0;
    makelovewarmvalue_ = 0;
    invitenum_ = 0;
    strangernum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    preludetime_ = 0;
    banquettime_ = 0;
    makeloveefc_ = GOOGLE_LONGLONG(0);
    warmvalue_ = 0;
    warmcycle_ = 0;
    duplcateid_ = GOOGLE_LONGLONG(0);
  }
  firework_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marrybanquet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_orderItem;
        break;
      }

      // optional int64 orderItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderitem_)));
          set_has_orderitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_orderNum;
        break;
      }

      // optional int32 orderNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordernum_)));
          set_has_ordernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banquetReward;
        break;
      }

      // optional int64 banquetReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banquetReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banquetreward_)));
          set_has_banquetreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rewardNum;
        break;
      }

      // optional int32 rewardNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_makeLoveWarmValue;
        break;
      }

      // optional int32 makeLoveWarmValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_makeLoveWarmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &makelovewarmvalue_)));
          set_has_makelovewarmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inviteNum;
        break;
      }

      // optional int32 inviteNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invitenum_)));
          set_has_invitenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_strangerNum;
        break;
      }

      // optional int32 strangerNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strangerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strangernum_)));
          set_has_strangernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_preludeTime;
        break;
      }

      // optional int32 preludeTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preludeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preludetime_)));
          set_has_preludetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_banquetTime;
        break;
      }

      // optional int32 banquetTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banquetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banquettime_)));
          set_has_banquettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_makeLoveEfc;
        break;
      }

      // optional int64 makeLoveEfc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_makeLoveEfc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &makeloveefc_)));
          set_has_makeloveefc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_warmValue;
        break;
      }

      // optional int32 warmValue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warmvalue_)));
          set_has_warmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_warmCycle;
        break;
      }

      // optional int32 warmCycle = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warmCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warmcycle_)));
          set_has_warmcycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_duplcateId;
        break;
      }

      // optional int64 duplcateId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplcateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duplcateid_)));
          set_has_duplcateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_firework;
        break;
      }

      // repeated .proto_ff.marrybanquetfireworkDesc firework = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firework:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firework()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_firework;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marrybanquet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 orderItem = 2;
  if (has_orderitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->orderitem(), output);
  }

  // optional int32 orderNum = 3;
  if (has_ordernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ordernum(), output);
  }

  // optional int64 banquetReward = 4;
  if (has_banquetreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->banquetreward(), output);
  }

  // optional int32 rewardNum = 5;
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rewardnum(), output);
  }

  // optional int32 makeLoveWarmValue = 6;
  if (has_makelovewarmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->makelovewarmvalue(), output);
  }

  // optional int32 inviteNum = 7;
  if (has_invitenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->invitenum(), output);
  }

  // optional int32 strangerNum = 8;
  if (has_strangernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->strangernum(), output);
  }

  // optional int32 preludeTime = 9;
  if (has_preludetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->preludetime(), output);
  }

  // optional int32 banquetTime = 10;
  if (has_banquettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->banquettime(), output);
  }

  // optional int64 makeLoveEfc = 11;
  if (has_makeloveefc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->makeloveefc(), output);
  }

  // optional int32 warmValue = 12;
  if (has_warmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->warmvalue(), output);
  }

  // optional int32 warmCycle = 13;
  if (has_warmcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->warmcycle(), output);
  }

  // optional int64 duplcateId = 14;
  if (has_duplcateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->duplcateid(), output);
  }

  // repeated .proto_ff.marrybanquetfireworkDesc firework = 15;
  for (int i = 0; i < this->firework_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->firework(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marrybanquet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 orderItem = 2;
  if (has_orderitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->orderitem(), target);
  }

  // optional int32 orderNum = 3;
  if (has_ordernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ordernum(), target);
  }

  // optional int64 banquetReward = 4;
  if (has_banquetreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->banquetreward(), target);
  }

  // optional int32 rewardNum = 5;
  if (has_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rewardnum(), target);
  }

  // optional int32 makeLoveWarmValue = 6;
  if (has_makelovewarmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->makelovewarmvalue(), target);
  }

  // optional int32 inviteNum = 7;
  if (has_invitenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->invitenum(), target);
  }

  // optional int32 strangerNum = 8;
  if (has_strangernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->strangernum(), target);
  }

  // optional int32 preludeTime = 9;
  if (has_preludetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->preludetime(), target);
  }

  // optional int32 banquetTime = 10;
  if (has_banquettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->banquettime(), target);
  }

  // optional int64 makeLoveEfc = 11;
  if (has_makeloveefc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->makeloveefc(), target);
  }

  // optional int32 warmValue = 12;
  if (has_warmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->warmvalue(), target);
  }

  // optional int32 warmCycle = 13;
  if (has_warmcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->warmcycle(), target);
  }

  // optional int64 duplcateId = 14;
  if (has_duplcateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->duplcateid(), target);
  }

  // repeated .proto_ff.marrybanquetfireworkDesc firework = 15;
  for (int i = 0; i < this->firework_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->firework(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marrybanquet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 orderItem = 2;
    if (has_orderitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderitem());
    }

    // optional int32 orderNum = 3;
    if (has_ordernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordernum());
    }

    // optional int64 banquetReward = 4;
    if (has_banquetreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banquetreward());
    }

    // optional int32 rewardNum = 5;
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardnum());
    }

    // optional int32 makeLoveWarmValue = 6;
    if (has_makelovewarmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->makelovewarmvalue());
    }

    // optional int32 inviteNum = 7;
    if (has_invitenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invitenum());
    }

    // optional int32 strangerNum = 8;
    if (has_strangernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strangernum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 preludeTime = 9;
    if (has_preludetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preludetime());
    }

    // optional int32 banquetTime = 10;
    if (has_banquettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banquettime());
    }

    // optional int64 makeLoveEfc = 11;
    if (has_makeloveefc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->makeloveefc());
    }

    // optional int32 warmValue = 12;
    if (has_warmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warmvalue());
    }

    // optional int32 warmCycle = 13;
    if (has_warmcycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warmcycle());
    }

    // optional int64 duplcateId = 14;
    if (has_duplcateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duplcateid());
    }

  }
  // repeated .proto_ff.marrybanquetfireworkDesc firework = 15;
  total_size += 1 * this->firework_size();
  for (int i = 0; i < this->firework_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firework(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marrybanquet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marrybanquet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marrybanquet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marrybanquet::MergeFrom(const marrybanquet& from) {
  GOOGLE_CHECK_NE(&from, this);
  firework_.MergeFrom(from.firework_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_orderitem()) {
      set_orderitem(from.orderitem());
    }
    if (from.has_ordernum()) {
      set_ordernum(from.ordernum());
    }
    if (from.has_banquetreward()) {
      set_banquetreward(from.banquetreward());
    }
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
    if (from.has_makelovewarmvalue()) {
      set_makelovewarmvalue(from.makelovewarmvalue());
    }
    if (from.has_invitenum()) {
      set_invitenum(from.invitenum());
    }
    if (from.has_strangernum()) {
      set_strangernum(from.strangernum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_preludetime()) {
      set_preludetime(from.preludetime());
    }
    if (from.has_banquettime()) {
      set_banquettime(from.banquettime());
    }
    if (from.has_makeloveefc()) {
      set_makeloveefc(from.makeloveefc());
    }
    if (from.has_warmvalue()) {
      set_warmvalue(from.warmvalue());
    }
    if (from.has_warmcycle()) {
      set_warmcycle(from.warmcycle());
    }
    if (from.has_duplcateid()) {
      set_duplcateid(from.duplcateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marrybanquet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marrybanquet::CopyFrom(const marrybanquet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marrybanquet::IsInitialized() const {

  return true;
}

void marrybanquet::Swap(marrybanquet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(orderitem_, other->orderitem_);
    std::swap(ordernum_, other->ordernum_);
    std::swap(banquetreward_, other->banquetreward_);
    std::swap(rewardnum_, other->rewardnum_);
    std::swap(makelovewarmvalue_, other->makelovewarmvalue_);
    std::swap(invitenum_, other->invitenum_);
    std::swap(strangernum_, other->strangernum_);
    std::swap(preludetime_, other->preludetime_);
    std::swap(banquettime_, other->banquettime_);
    std::swap(makeloveefc_, other->makeloveefc_);
    std::swap(warmvalue_, other->warmvalue_);
    std::swap(warmcycle_, other->warmcycle_);
    std::swap(duplcateid_, other->duplcateid_);
    firework_.Swap(&other->firework_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marrybanquet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marrybanquet_descriptor_;
  metadata.reflection = marrybanquet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_marrybanquet::kMarrybanquetListFieldNumber;
#endif  // !_MSC_VER

Sheet_marrybanquet::Sheet_marrybanquet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_marrybanquet::InitAsDefaultInstance() {
}

Sheet_marrybanquet::Sheet_marrybanquet(const Sheet_marrybanquet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_marrybanquet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_marrybanquet::~Sheet_marrybanquet() {
  SharedDtor();
}

void Sheet_marrybanquet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_marrybanquet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_marrybanquet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_marrybanquet_descriptor_;
}

const Sheet_marrybanquet& Sheet_marrybanquet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

Sheet_marrybanquet* Sheet_marrybanquet::default_instance_ = NULL;

Sheet_marrybanquet* Sheet_marrybanquet::New() const {
  return new Sheet_marrybanquet;
}

void Sheet_marrybanquet::Clear() {
  marrybanquet_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_marrybanquet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.marrybanquet marrybanquet_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marrybanquet_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marrybanquet_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_marrybanquet_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_marrybanquet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.marrybanquet marrybanquet_List = 1;
  for (int i = 0; i < this->marrybanquet_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marrybanquet_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_marrybanquet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.marrybanquet marrybanquet_List = 1;
  for (int i = 0; i < this->marrybanquet_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marrybanquet_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_marrybanquet::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.marrybanquet marrybanquet_List = 1;
  total_size += 1 * this->marrybanquet_list_size();
  for (int i = 0; i < this->marrybanquet_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marrybanquet_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_marrybanquet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_marrybanquet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_marrybanquet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_marrybanquet::MergeFrom(const Sheet_marrybanquet& from) {
  GOOGLE_CHECK_NE(&from, this);
  marrybanquet_list_.MergeFrom(from.marrybanquet_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_marrybanquet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_marrybanquet::CopyFrom(const Sheet_marrybanquet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_marrybanquet::IsInitialized() const {

  return true;
}

void Sheet_marrybanquet::Swap(Sheet_marrybanquet* other) {
  if (other != this) {
    marrybanquet_list_.Swap(&other->marrybanquet_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_marrybanquet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_marrybanquet_descriptor_;
  metadata.reflection = Sheet_marrybanquet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marrygear::kIdFieldNumber;
const int marrygear::kTitleFieldNumber;
const int marrygear::kItemFieldNumber;
const int marrygear::kNickNameFieldNumber;
const int marrygear::kInitiateFieldNumber;
const int marrygear::kUsetypeFieldNumber;
const int marrygear::kUsepriceFieldNumber;
const int marrygear::kAAPriceFieldNumber;
const int marrygear::kPresetFieldNumber;
const int marrygear::kWeddingEffectFieldNumber;
#endif  // !_MSC_VER

marrygear::marrygear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marrygear::InitAsDefaultInstance() {
}

marrygear::marrygear(const marrygear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marrygear::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  title_ = GOOGLE_LONGLONG(0);
  item_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  initiate_ = GOOGLE_LONGLONG(0);
  usetype_ = 0;
  useprice_ = 0;
  aaprice_ = 0;
  preset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weddingeffect_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marrygear::~marrygear() {
  SharedDtor();
}

void marrygear::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (preset_ != &::google::protobuf::internal::kEmptyString) {
    delete preset_;
  }
  if (this != default_instance_) {
  }
}

void marrygear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marrygear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marrygear_descriptor_;
}

const marrygear& marrygear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

marrygear* marrygear::default_instance_ = NULL;

marrygear* marrygear::New() const {
  return new marrygear;
}

void marrygear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    title_ = GOOGLE_LONGLONG(0);
    item_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    initiate_ = GOOGLE_LONGLONG(0);
    usetype_ = 0;
    useprice_ = 0;
    aaprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_preset()) {
      if (preset_ != &::google::protobuf::internal::kEmptyString) {
        preset_->clear();
      }
    }
    weddingeffect_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marrygear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }

      // optional int64 title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }

      // optional int64 item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickName;
        break;
      }

      // optional string nickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initiate;
        break;
      }

      // optional int64 initiate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initiate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &initiate_)));
          set_has_initiate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_usetype;
        break;
      }

      // optional int32 usetype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usetype_)));
          set_has_usetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_useprice;
        break;
      }

      // optional int32 useprice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useprice_)));
          set_has_useprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_AAPrice;
        break;
      }

      // optional int32 AAPrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AAPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aaprice_)));
          set_has_aaprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_preset;
        break;
      }

      // optional string preset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preset().data(), this->preset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weddingEffect;
        break;
      }

      // optional int64 weddingEffect = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weddingEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weddingeffect_)));
          set_has_weddingeffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marrygear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->title(), output);
  }

  // optional int64 item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->item(), output);
  }

  // optional string nickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  // optional int64 initiate = 5;
  if (has_initiate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->initiate(), output);
  }

  // optional int32 usetype = 6;
  if (has_usetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usetype(), output);
  }

  // optional int32 useprice = 7;
  if (has_useprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->useprice(), output);
  }

  // optional int32 AAPrice = 8;
  if (has_aaprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->aaprice(), output);
  }

  // optional string preset = 9;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preset().data(), this->preset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->preset(), output);
  }

  // optional int64 weddingEffect = 10;
  if (has_weddingeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->weddingeffect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marrygear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->title(), target);
  }

  // optional int64 item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->item(), target);
  }

  // optional string nickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int64 initiate = 5;
  if (has_initiate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->initiate(), target);
  }

  // optional int32 usetype = 6;
  if (has_usetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usetype(), target);
  }

  // optional int32 useprice = 7;
  if (has_useprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->useprice(), target);
  }

  // optional int32 AAPrice = 8;
  if (has_aaprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->aaprice(), target);
  }

  // optional string preset = 9;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preset().data(), this->preset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->preset(), target);
  }

  // optional int64 weddingEffect = 10;
  if (has_weddingeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->weddingeffect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marrygear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->title());
    }

    // optional int64 item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional string nickName = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 initiate = 5;
    if (has_initiate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->initiate());
    }

    // optional int32 usetype = 6;
    if (has_usetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetype());
    }

    // optional int32 useprice = 7;
    if (has_useprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useprice());
    }

    // optional int32 AAPrice = 8;
    if (has_aaprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aaprice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string preset = 9;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preset());
    }

    // optional int64 weddingEffect = 10;
    if (has_weddingeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weddingeffect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marrygear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marrygear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marrygear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marrygear::MergeFrom(const marrygear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_initiate()) {
      set_initiate(from.initiate());
    }
    if (from.has_usetype()) {
      set_usetype(from.usetype());
    }
    if (from.has_useprice()) {
      set_useprice(from.useprice());
    }
    if (from.has_aaprice()) {
      set_aaprice(from.aaprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_preset()) {
      set_preset(from.preset());
    }
    if (from.has_weddingeffect()) {
      set_weddingeffect(from.weddingeffect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marrygear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marrygear::CopyFrom(const marrygear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marrygear::IsInitialized() const {

  return true;
}

void marrygear::Swap(marrygear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(item_, other->item_);
    std::swap(nickname_, other->nickname_);
    std::swap(initiate_, other->initiate_);
    std::swap(usetype_, other->usetype_);
    std::swap(useprice_, other->useprice_);
    std::swap(aaprice_, other->aaprice_);
    std::swap(preset_, other->preset_);
    std::swap(weddingeffect_, other->weddingeffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marrygear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marrygear_descriptor_;
  metadata.reflection = marrygear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_marrygear::kMarrygearListFieldNumber;
#endif  // !_MSC_VER

Sheet_marrygear::Sheet_marrygear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_marrygear::InitAsDefaultInstance() {
}

Sheet_marrygear::Sheet_marrygear(const Sheet_marrygear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_marrygear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_marrygear::~Sheet_marrygear() {
  SharedDtor();
}

void Sheet_marrygear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_marrygear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_marrygear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_marrygear_descriptor_;
}

const Sheet_marrygear& Sheet_marrygear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

Sheet_marrygear* Sheet_marrygear::default_instance_ = NULL;

Sheet_marrygear* Sheet_marrygear::New() const {
  return new Sheet_marrygear;
}

void Sheet_marrygear::Clear() {
  marrygear_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_marrygear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.marrygear marrygear_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marrygear_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marrygear_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_marrygear_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_marrygear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.marrygear marrygear_List = 1;
  for (int i = 0; i < this->marrygear_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marrygear_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_marrygear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.marrygear marrygear_List = 1;
  for (int i = 0; i < this->marrygear_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marrygear_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_marrygear::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.marrygear marrygear_List = 1;
  total_size += 1 * this->marrygear_list_size();
  for (int i = 0; i < this->marrygear_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marrygear_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_marrygear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_marrygear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_marrygear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_marrygear::MergeFrom(const Sheet_marrygear& from) {
  GOOGLE_CHECK_NE(&from, this);
  marrygear_list_.MergeFrom(from.marrygear_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_marrygear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_marrygear::CopyFrom(const Sheet_marrygear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_marrygear::IsInitialized() const {

  return true;
}

void Sheet_marrygear::Swap(Sheet_marrygear* other) {
  if (other != this) {
    marrygear_list_.Swap(&other->marrygear_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_marrygear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_marrygear_descriptor_;
  metadata.reflection = Sheet_marrygear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marrytimes::kIdFieldNumber;
const int marrytimes::kStartTimeFieldNumber;
const int marrytimes::kEndTimeFieldNumber;
const int marrytimes::kLimitFieldNumber;
#endif  // !_MSC_VER

marrytimes::marrytimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marrytimes::InitAsDefaultInstance() {
}

marrytimes::marrytimes(const marrytimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marrytimes::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marrytimes::~marrytimes() {
  SharedDtor();
}

void marrytimes::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (limit_ != &::google::protobuf::internal::kEmptyString) {
    delete limit_;
  }
  if (this != default_instance_) {
  }
}

void marrytimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marrytimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marrytimes_descriptor_;
}

const marrytimes& marrytimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

marrytimes* marrytimes::default_instance_ = NULL;

marrytimes* marrytimes::New() const {
  return new marrytimes;
}

void marrytimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::kEmptyString) {
        endtime_->clear();
      }
    }
    if (has_limit()) {
      if (limit_ != &::google::protobuf::internal::kEmptyString) {
        limit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marrytimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startTime;
        break;
      }

      // optional string startTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_endTime;
        break;
      }

      // optional string endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_limit;
        break;
      }

      // optional string limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->limit().data(), this->limit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marrytimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->starttime(), output);
  }

  // optional string endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->endtime(), output);
  }

  // optional string limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit().data(), this->limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marrytimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->starttime(), target);
  }

  // optional string endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->endtime(), target);
  }

  // optional string limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limit().data(), this->limit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marrytimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional string limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marrytimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marrytimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marrytimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marrytimes::MergeFrom(const marrytimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marrytimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marrytimes::CopyFrom(const marrytimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marrytimes::IsInitialized() const {

  return true;
}

void marrytimes::Swap(marrytimes* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marrytimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marrytimes_descriptor_;
  metadata.reflection = marrytimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_marrytimes::kMarrytimesListFieldNumber;
#endif  // !_MSC_VER

Sheet_marrytimes::Sheet_marrytimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_marrytimes::InitAsDefaultInstance() {
}

Sheet_marrytimes::Sheet_marrytimes(const Sheet_marrytimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_marrytimes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_marrytimes::~Sheet_marrytimes() {
  SharedDtor();
}

void Sheet_marrytimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_marrytimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_marrytimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_marrytimes_descriptor_;
}

const Sheet_marrytimes& Sheet_marrytimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

Sheet_marrytimes* Sheet_marrytimes::default_instance_ = NULL;

Sheet_marrytimes* Sheet_marrytimes::New() const {
  return new Sheet_marrytimes;
}

void Sheet_marrytimes::Clear() {
  marrytimes_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_marrytimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.marrytimes marrytimes_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marrytimes_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marrytimes_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_marrytimes_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_marrytimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.marrytimes marrytimes_List = 1;
  for (int i = 0; i < this->marrytimes_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marrytimes_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_marrytimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.marrytimes marrytimes_List = 1;
  for (int i = 0; i < this->marrytimes_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marrytimes_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_marrytimes::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.marrytimes marrytimes_List = 1;
  total_size += 1 * this->marrytimes_list_size();
  for (int i = 0; i < this->marrytimes_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marrytimes_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_marrytimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_marrytimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_marrytimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_marrytimes::MergeFrom(const Sheet_marrytimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  marrytimes_list_.MergeFrom(from.marrytimes_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_marrytimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_marrytimes::CopyFrom(const Sheet_marrytimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_marrytimes::IsInitialized() const {

  return true;
}

void Sheet_marrytimes::Swap(Sheet_marrytimes* other) {
  if (other != this) {
    marrytimes_list_.Swap(&other->marrytimes_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_marrytimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_marrytimes_descriptor_;
  metadata.reflection = Sheet_marrytimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marrywarm::kIdFieldNumber;
const int marrywarm::kWarmValueFieldNumber;
const int marrywarm::kMonsterIdFieldNumber;
const int marrywarm::kMonsterFlashCycleFieldNumber;
const int marrywarm::kWarmExpValueFieldNumber;
const int marrywarm::kWarmExpCycleFieldNumber;
const int marrywarm::kWarmGetNumFieldNumber;
#endif  // !_MSC_VER

marrywarm::marrywarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marrywarm::InitAsDefaultInstance() {
}

marrywarm::marrywarm(const marrywarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marrywarm::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  warmvalue_ = 0;
  monsterid_ = GOOGLE_LONGLONG(0);
  monsterflashcycle_ = 0;
  warmexpvalue_ = 0;
  warmexpcycle_ = 0;
  warmgetnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marrywarm::~marrywarm() {
  SharedDtor();
}

void marrywarm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void marrywarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marrywarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marrywarm_descriptor_;
}

const marrywarm& marrywarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

marrywarm* marrywarm::default_instance_ = NULL;

marrywarm* marrywarm::New() const {
  return new marrywarm;
}

void marrywarm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    warmvalue_ = 0;
    monsterid_ = GOOGLE_LONGLONG(0);
    monsterflashcycle_ = 0;
    warmexpvalue_ = 0;
    warmexpcycle_ = 0;
    warmgetnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marrywarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_warmValue;
        break;
      }

      // optional int32 warmValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warmvalue_)));
          set_has_warmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monsterId;
        break;
      }

      // optional int64 monsterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monsterFlashCycle;
        break;
      }

      // optional int32 monsterFlashCycle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterFlashCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterflashcycle_)));
          set_has_monsterflashcycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_warmExpValue;
        break;
      }

      // optional int32 warmExpValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warmExpValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warmexpvalue_)));
          set_has_warmexpvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_warmExpCycle;
        break;
      }

      // optional int32 warmExpCycle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warmExpCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warmexpcycle_)));
          set_has_warmexpcycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_warmGetNum;
        break;
      }

      // optional int32 warmGetNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warmGetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warmgetnum_)));
          set_has_warmgetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marrywarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 warmValue = 2;
  if (has_warmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->warmvalue(), output);
  }

  // optional int64 monsterId = 3;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->monsterid(), output);
  }

  // optional int32 monsterFlashCycle = 4;
  if (has_monsterflashcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->monsterflashcycle(), output);
  }

  // optional int32 warmExpValue = 5;
  if (has_warmexpvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->warmexpvalue(), output);
  }

  // optional int32 warmExpCycle = 6;
  if (has_warmexpcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->warmexpcycle(), output);
  }

  // optional int32 warmGetNum = 7;
  if (has_warmgetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->warmgetnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marrywarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 warmValue = 2;
  if (has_warmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->warmvalue(), target);
  }

  // optional int64 monsterId = 3;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->monsterid(), target);
  }

  // optional int32 monsterFlashCycle = 4;
  if (has_monsterflashcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->monsterflashcycle(), target);
  }

  // optional int32 warmExpValue = 5;
  if (has_warmexpvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->warmexpvalue(), target);
  }

  // optional int32 warmExpCycle = 6;
  if (has_warmexpcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->warmexpcycle(), target);
  }

  // optional int32 warmGetNum = 7;
  if (has_warmgetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->warmgetnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marrywarm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 warmValue = 2;
    if (has_warmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warmvalue());
    }

    // optional int64 monsterId = 3;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

    // optional int32 monsterFlashCycle = 4;
    if (has_monsterflashcycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterflashcycle());
    }

    // optional int32 warmExpValue = 5;
    if (has_warmexpvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warmexpvalue());
    }

    // optional int32 warmExpCycle = 6;
    if (has_warmexpcycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warmexpcycle());
    }

    // optional int32 warmGetNum = 7;
    if (has_warmgetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warmgetnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marrywarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marrywarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marrywarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marrywarm::MergeFrom(const marrywarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_warmvalue()) {
      set_warmvalue(from.warmvalue());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monsterflashcycle()) {
      set_monsterflashcycle(from.monsterflashcycle());
    }
    if (from.has_warmexpvalue()) {
      set_warmexpvalue(from.warmexpvalue());
    }
    if (from.has_warmexpcycle()) {
      set_warmexpcycle(from.warmexpcycle());
    }
    if (from.has_warmgetnum()) {
      set_warmgetnum(from.warmgetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marrywarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marrywarm::CopyFrom(const marrywarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marrywarm::IsInitialized() const {

  return true;
}

void marrywarm::Swap(marrywarm* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(warmvalue_, other->warmvalue_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(monsterflashcycle_, other->monsterflashcycle_);
    std::swap(warmexpvalue_, other->warmexpvalue_);
    std::swap(warmexpcycle_, other->warmexpcycle_);
    std::swap(warmgetnum_, other->warmgetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marrywarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marrywarm_descriptor_;
  metadata.reflection = marrywarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_marrywarm::kMarrywarmListFieldNumber;
#endif  // !_MSC_VER

Sheet_marrywarm::Sheet_marrywarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_marrywarm::InitAsDefaultInstance() {
}

Sheet_marrywarm::Sheet_marrywarm(const Sheet_marrywarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_marrywarm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_marrywarm::~Sheet_marrywarm() {
  SharedDtor();
}

void Sheet_marrywarm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_marrywarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_marrywarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_marrywarm_descriptor_;
}

const Sheet_marrywarm& Sheet_marrywarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

Sheet_marrywarm* Sheet_marrywarm::default_instance_ = NULL;

Sheet_marrywarm* Sheet_marrywarm::New() const {
  return new Sheet_marrywarm;
}

void Sheet_marrywarm::Clear() {
  marrywarm_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_marrywarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.marrywarm marrywarm_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marrywarm_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marrywarm_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_marrywarm_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_marrywarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.marrywarm marrywarm_List = 1;
  for (int i = 0; i < this->marrywarm_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marrywarm_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_marrywarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.marrywarm marrywarm_List = 1;
  for (int i = 0; i < this->marrywarm_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marrywarm_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_marrywarm::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.marrywarm marrywarm_List = 1;
  total_size += 1 * this->marrywarm_list_size();
  for (int i = 0; i < this->marrywarm_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marrywarm_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_marrywarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_marrywarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_marrywarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_marrywarm::MergeFrom(const Sheet_marrywarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  marrywarm_list_.MergeFrom(from.marrywarm_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_marrywarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_marrywarm::CopyFrom(const Sheet_marrywarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_marrywarm::IsInitialized() const {

  return true;
}

void Sheet_marrywarm::Swap(Sheet_marrywarm* other) {
  if (other != this) {
    marrywarm_list_.Swap(&other->marrywarm_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_marrywarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_marrywarm_descriptor_;
  metadata.reflection = Sheet_marrywarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marrylevelexpwarmDesc::kIdFieldNumber;
const int marrylevelexpwarmDesc::kExpFieldNumber;
#endif  // !_MSC_VER

marrylevelexpwarmDesc::marrylevelexpwarmDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marrylevelexpwarmDesc::InitAsDefaultInstance() {
}

marrylevelexpwarmDesc::marrylevelexpwarmDesc(const marrylevelexpwarmDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marrylevelexpwarmDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marrylevelexpwarmDesc::~marrylevelexpwarmDesc() {
  SharedDtor();
}

void marrylevelexpwarmDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void marrylevelexpwarmDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marrylevelexpwarmDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marrylevelexpwarmDesc_descriptor_;
}

const marrylevelexpwarmDesc& marrylevelexpwarmDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

marrylevelexpwarmDesc* marrylevelexpwarmDesc::default_instance_ = NULL;

marrylevelexpwarmDesc* marrylevelexpwarmDesc::New() const {
  return new marrylevelexpwarmDesc;
}

void marrylevelexpwarmDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marrylevelexpwarmDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // optional int64 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marrylevelexpwarmDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marrylevelexpwarmDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 Exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marrylevelexpwarmDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marrylevelexpwarmDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marrylevelexpwarmDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marrylevelexpwarmDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marrylevelexpwarmDesc::MergeFrom(const marrylevelexpwarmDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marrylevelexpwarmDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marrylevelexpwarmDesc::CopyFrom(const marrylevelexpwarmDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marrylevelexpwarmDesc::IsInitialized() const {

  return true;
}

void marrylevelexpwarmDesc::Swap(marrylevelexpwarmDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marrylevelexpwarmDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marrylevelexpwarmDesc_descriptor_;
  metadata.reflection = marrylevelexpwarmDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marrylevelexp::kLevelFieldNumber;
const int marrylevelexp::kWarmFieldNumber;
#endif  // !_MSC_VER

marrylevelexp::marrylevelexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marrylevelexp::InitAsDefaultInstance() {
}

marrylevelexp::marrylevelexp(const marrylevelexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marrylevelexp::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marrylevelexp::~marrylevelexp() {
  SharedDtor();
}

void marrylevelexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void marrylevelexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marrylevelexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marrylevelexp_descriptor_;
}

const marrylevelexp& marrylevelexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

marrylevelexp* marrylevelexp::default_instance_ = NULL;

marrylevelexp* marrylevelexp::New() const {
  return new marrylevelexp;
}

void marrylevelexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  warm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marrylevelexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_warm;
        break;
      }

      // repeated .proto_ff.marrylevelexpwarmDesc warm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_warm;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marrylevelexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // repeated .proto_ff.marrylevelexpwarmDesc warm = 2;
  for (int i = 0; i < this->warm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->warm(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marrylevelexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // repeated .proto_ff.marrylevelexpwarmDesc warm = 2;
  for (int i = 0; i < this->warm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->warm(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marrylevelexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated .proto_ff.marrylevelexpwarmDesc warm = 2;
  total_size += 1 * this->warm_size();
  for (int i = 0; i < this->warm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marrylevelexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marrylevelexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marrylevelexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marrylevelexp::MergeFrom(const marrylevelexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  warm_.MergeFrom(from.warm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marrylevelexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marrylevelexp::CopyFrom(const marrylevelexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marrylevelexp::IsInitialized() const {

  return true;
}

void marrylevelexp::Swap(marrylevelexp* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    warm_.Swap(&other->warm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marrylevelexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marrylevelexp_descriptor_;
  metadata.reflection = marrylevelexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_marrylevelexp::kMarrylevelexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_marrylevelexp::Sheet_marrylevelexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_marrylevelexp::InitAsDefaultInstance() {
}

Sheet_marrylevelexp::Sheet_marrylevelexp(const Sheet_marrylevelexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_marrylevelexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_marrylevelexp::~Sheet_marrylevelexp() {
  SharedDtor();
}

void Sheet_marrylevelexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_marrylevelexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_marrylevelexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_marrylevelexp_descriptor_;
}

const Sheet_marrylevelexp& Sheet_marrylevelexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

Sheet_marrylevelexp* Sheet_marrylevelexp::default_instance_ = NULL;

Sheet_marrylevelexp* Sheet_marrylevelexp::New() const {
  return new Sheet_marrylevelexp;
}

void Sheet_marrylevelexp::Clear() {
  marrylevelexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_marrylevelexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.marrylevelexp marrylevelexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marrylevelexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marrylevelexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_marrylevelexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_marrylevelexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.marrylevelexp marrylevelexp_List = 1;
  for (int i = 0; i < this->marrylevelexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marrylevelexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_marrylevelexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.marrylevelexp marrylevelexp_List = 1;
  for (int i = 0; i < this->marrylevelexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marrylevelexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_marrylevelexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.marrylevelexp marrylevelexp_List = 1;
  total_size += 1 * this->marrylevelexp_list_size();
  for (int i = 0; i < this->marrylevelexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marrylevelexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_marrylevelexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_marrylevelexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_marrylevelexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_marrylevelexp::MergeFrom(const Sheet_marrylevelexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  marrylevelexp_list_.MergeFrom(from.marrylevelexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_marrylevelexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_marrylevelexp::CopyFrom(const Sheet_marrylevelexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_marrylevelexp::IsInitialized() const {

  return true;
}

void Sheet_marrylevelexp::Swap(Sheet_marrylevelexp* other) {
  if (other != this) {
    marrylevelexp_list_.Swap(&other->marrylevelexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_marrylevelexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_marrylevelexp_descriptor_;
  metadata.reflection = Sheet_marrylevelexp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
