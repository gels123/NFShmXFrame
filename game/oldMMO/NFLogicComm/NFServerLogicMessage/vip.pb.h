// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vip.proto

#ifndef PROTOBUF_vip_2eproto__INCLUDED
#define PROTOBUF_vip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vip_2eproto();
void protobuf_AssignDesc_vip_2eproto();
void protobuf_ShutdownFile_vip_2eproto();

class E_VipVip;
class Sheet_VipVip;
class E_VipPrivilege;
class Sheet_VipPrivilege;

// ===================================================================

class E_VipVip : public ::google::protobuf::Message {
 public:
  E_VipVip();
  virtual ~E_VipVip();

  E_VipVip(const E_VipVip& from);

  inline E_VipVip& operator=(const E_VipVip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_VipVip& default_instance();

  void Swap(E_VipVip* other);

  // implements Message ----------------------------------------------

  E_VipVip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_VipVip& from);
  void MergeFrom(const E_VipVip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_level = 2;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 2;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // optional int32 m_exp = 3;
  inline bool has_m_exp() const;
  inline void clear_m_exp();
  static const int kMExpFieldNumber = 3;
  inline ::google::protobuf::int32 m_exp() const;
  inline void set_m_exp(::google::protobuf::int32 value);

  // optional int32 m_privilege_group = 4;
  inline bool has_m_privilege_group() const;
  inline void clear_m_privilege_group();
  static const int kMPrivilegeGroupFieldNumber = 4;
  inline ::google::protobuf::int32 m_privilege_group() const;
  inline void set_m_privilege_group(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_VipVip)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_level();
  inline void clear_has_m_level();
  inline void set_has_m_exp();
  inline void clear_has_m_exp();
  inline void set_has_m_privilege_group();
  inline void clear_has_m_privilege_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_level_;
  ::google::protobuf::int32 m_exp_;
  ::google::protobuf::int32 m_privilege_group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_vip_2eproto();
  friend void protobuf_AssignDesc_vip_2eproto();
  friend void protobuf_ShutdownFile_vip_2eproto();

  void InitAsDefaultInstance();
  static E_VipVip* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_VipVip : public ::google::protobuf::Message {
 public:
  Sheet_VipVip();
  virtual ~Sheet_VipVip();

  Sheet_VipVip(const Sheet_VipVip& from);

  inline Sheet_VipVip& operator=(const Sheet_VipVip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_VipVip& default_instance();

  void Swap(Sheet_VipVip* other);

  // implements Message ----------------------------------------------

  Sheet_VipVip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_VipVip& from);
  void MergeFrom(const Sheet_VipVip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
  inline int e_vipvip_list_size() const;
  inline void clear_e_vipvip_list();
  static const int kEVipVipListFieldNumber = 1;
  inline const ::proto_ff::E_VipVip& e_vipvip_list(int index) const;
  inline ::proto_ff::E_VipVip* mutable_e_vipvip_list(int index);
  inline ::proto_ff::E_VipVip* add_e_vipvip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipVip >&
      e_vipvip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipVip >*
      mutable_e_vipvip_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_VipVip)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipVip > e_vipvip_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_vip_2eproto();
  friend void protobuf_AssignDesc_vip_2eproto();
  friend void protobuf_ShutdownFile_vip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_VipVip* default_instance_;
};
// -------------------------------------------------------------------

class E_VipPrivilege : public ::google::protobuf::Message {
 public:
  E_VipPrivilege();
  virtual ~E_VipPrivilege();

  E_VipPrivilege(const E_VipPrivilege& from);

  inline E_VipPrivilege& operator=(const E_VipPrivilege& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_VipPrivilege& default_instance();

  void Swap(E_VipPrivilege* other);

  // implements Message ----------------------------------------------

  E_VipPrivilege* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_VipPrivilege& from);
  void MergeFrom(const E_VipPrivilege& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_group = 2;
  inline bool has_m_group() const;
  inline void clear_m_group();
  static const int kMGroupFieldNumber = 2;
  inline ::google::protobuf::int32 m_group() const;
  inline void set_m_group(::google::protobuf::int32 value);

  // optional int32 m_type = 3;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_arg = 4;
  inline bool has_m_arg() const;
  inline void clear_m_arg();
  static const int kMArgFieldNumber = 4;
  inline ::google::protobuf::int32 m_arg() const;
  inline void set_m_arg(::google::protobuf::int32 value);

  // optional string m_args = 5;
  inline bool has_m_args() const;
  inline void clear_m_args();
  static const int kMArgsFieldNumber = 5;
  inline const ::std::string& m_args() const;
  inline void set_m_args(const ::std::string& value);
  inline void set_m_args(const char* value);
  inline void set_m_args(const char* value, size_t size);
  inline ::std::string* mutable_m_args();
  inline ::std::string* release_m_args();
  inline void set_allocated_m_args(::std::string* m_args);

  // @@protoc_insertion_point(class_scope:proto_ff.E_VipPrivilege)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_group();
  inline void clear_has_m_group();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_arg();
  inline void clear_has_m_arg();
  inline void set_has_m_args();
  inline void clear_has_m_args();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_group_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_arg_;
  ::std::string* m_args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_vip_2eproto();
  friend void protobuf_AssignDesc_vip_2eproto();
  friend void protobuf_ShutdownFile_vip_2eproto();

  void InitAsDefaultInstance();
  static E_VipPrivilege* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_VipPrivilege : public ::google::protobuf::Message {
 public:
  Sheet_VipPrivilege();
  virtual ~Sheet_VipPrivilege();

  Sheet_VipPrivilege(const Sheet_VipPrivilege& from);

  inline Sheet_VipPrivilege& operator=(const Sheet_VipPrivilege& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_VipPrivilege& default_instance();

  void Swap(Sheet_VipPrivilege* other);

  // implements Message ----------------------------------------------

  Sheet_VipPrivilege* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_VipPrivilege& from);
  void MergeFrom(const Sheet_VipPrivilege& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
  inline int e_vipprivilege_list_size() const;
  inline void clear_e_vipprivilege_list();
  static const int kEVipPrivilegeListFieldNumber = 1;
  inline const ::proto_ff::E_VipPrivilege& e_vipprivilege_list(int index) const;
  inline ::proto_ff::E_VipPrivilege* mutable_e_vipprivilege_list(int index);
  inline ::proto_ff::E_VipPrivilege* add_e_vipprivilege_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipPrivilege >&
      e_vipprivilege_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipPrivilege >*
      mutable_e_vipprivilege_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_VipPrivilege)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipPrivilege > e_vipprivilege_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_vip_2eproto();
  friend void protobuf_AssignDesc_vip_2eproto();
  friend void protobuf_ShutdownFile_vip_2eproto();

  void InitAsDefaultInstance();
  static Sheet_VipPrivilege* default_instance_;
};
// ===================================================================


// ===================================================================

// E_VipVip

// optional int32 m_id = 1;
inline bool E_VipVip::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_VipVip::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_VipVip::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_VipVip::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_VipVip::m_id() const {
  return m_id_;
}
inline void E_VipVip::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_level = 2;
inline bool E_VipVip::has_m_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_VipVip::set_has_m_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_VipVip::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_VipVip::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 E_VipVip::m_level() const {
  return m_level_;
}
inline void E_VipVip::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// optional int32 m_exp = 3;
inline bool E_VipVip::has_m_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_VipVip::set_has_m_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_VipVip::clear_has_m_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_VipVip::clear_m_exp() {
  m_exp_ = 0;
  clear_has_m_exp();
}
inline ::google::protobuf::int32 E_VipVip::m_exp() const {
  return m_exp_;
}
inline void E_VipVip::set_m_exp(::google::protobuf::int32 value) {
  set_has_m_exp();
  m_exp_ = value;
}

// optional int32 m_privilege_group = 4;
inline bool E_VipVip::has_m_privilege_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_VipVip::set_has_m_privilege_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_VipVip::clear_has_m_privilege_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_VipVip::clear_m_privilege_group() {
  m_privilege_group_ = 0;
  clear_has_m_privilege_group();
}
inline ::google::protobuf::int32 E_VipVip::m_privilege_group() const {
  return m_privilege_group_;
}
inline void E_VipVip::set_m_privilege_group(::google::protobuf::int32 value) {
  set_has_m_privilege_group();
  m_privilege_group_ = value;
}

// -------------------------------------------------------------------

// Sheet_VipVip

// repeated .proto_ff.E_VipVip E_VipVip_List = 1;
inline int Sheet_VipVip::e_vipvip_list_size() const {
  return e_vipvip_list_.size();
}
inline void Sheet_VipVip::clear_e_vipvip_list() {
  e_vipvip_list_.Clear();
}
inline const ::proto_ff::E_VipVip& Sheet_VipVip::e_vipvip_list(int index) const {
  return e_vipvip_list_.Get(index);
}
inline ::proto_ff::E_VipVip* Sheet_VipVip::mutable_e_vipvip_list(int index) {
  return e_vipvip_list_.Mutable(index);
}
inline ::proto_ff::E_VipVip* Sheet_VipVip::add_e_vipvip_list() {
  return e_vipvip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipVip >&
Sheet_VipVip::e_vipvip_list() const {
  return e_vipvip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipVip >*
Sheet_VipVip::mutable_e_vipvip_list() {
  return &e_vipvip_list_;
}

// -------------------------------------------------------------------

// E_VipPrivilege

// optional int32 m_id = 1;
inline bool E_VipPrivilege::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_VipPrivilege::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_VipPrivilege::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_VipPrivilege::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_VipPrivilege::m_id() const {
  return m_id_;
}
inline void E_VipPrivilege::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_group = 2;
inline bool E_VipPrivilege::has_m_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_VipPrivilege::set_has_m_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_VipPrivilege::clear_has_m_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_VipPrivilege::clear_m_group() {
  m_group_ = 0;
  clear_has_m_group();
}
inline ::google::protobuf::int32 E_VipPrivilege::m_group() const {
  return m_group_;
}
inline void E_VipPrivilege::set_m_group(::google::protobuf::int32 value) {
  set_has_m_group();
  m_group_ = value;
}

// optional int32 m_type = 3;
inline bool E_VipPrivilege::has_m_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_VipPrivilege::set_has_m_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_VipPrivilege::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_VipPrivilege::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_VipPrivilege::m_type() const {
  return m_type_;
}
inline void E_VipPrivilege::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_arg = 4;
inline bool E_VipPrivilege::has_m_arg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_VipPrivilege::set_has_m_arg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_VipPrivilege::clear_has_m_arg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_VipPrivilege::clear_m_arg() {
  m_arg_ = 0;
  clear_has_m_arg();
}
inline ::google::protobuf::int32 E_VipPrivilege::m_arg() const {
  return m_arg_;
}
inline void E_VipPrivilege::set_m_arg(::google::protobuf::int32 value) {
  set_has_m_arg();
  m_arg_ = value;
}

// optional string m_args = 5;
inline bool E_VipPrivilege::has_m_args() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_VipPrivilege::set_has_m_args() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_VipPrivilege::clear_has_m_args() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_VipPrivilege::clear_m_args() {
  if (m_args_ != &::google::protobuf::internal::kEmptyString) {
    m_args_->clear();
  }
  clear_has_m_args();
}
inline const ::std::string& E_VipPrivilege::m_args() const {
  return *m_args_;
}
inline void E_VipPrivilege::set_m_args(const ::std::string& value) {
  set_has_m_args();
  if (m_args_ == &::google::protobuf::internal::kEmptyString) {
    m_args_ = new ::std::string;
  }
  m_args_->assign(value);
}
inline void E_VipPrivilege::set_m_args(const char* value) {
  set_has_m_args();
  if (m_args_ == &::google::protobuf::internal::kEmptyString) {
    m_args_ = new ::std::string;
  }
  m_args_->assign(value);
}
inline void E_VipPrivilege::set_m_args(const char* value, size_t size) {
  set_has_m_args();
  if (m_args_ == &::google::protobuf::internal::kEmptyString) {
    m_args_ = new ::std::string;
  }
  m_args_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_VipPrivilege::mutable_m_args() {
  set_has_m_args();
  if (m_args_ == &::google::protobuf::internal::kEmptyString) {
    m_args_ = new ::std::string;
  }
  return m_args_;
}
inline ::std::string* E_VipPrivilege::release_m_args() {
  clear_has_m_args();
  if (m_args_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_args_;
    m_args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_VipPrivilege::set_allocated_m_args(::std::string* m_args) {
  if (m_args_ != &::google::protobuf::internal::kEmptyString) {
    delete m_args_;
  }
  if (m_args) {
    set_has_m_args();
    m_args_ = m_args;
  } else {
    clear_has_m_args();
    m_args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_VipPrivilege

// repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
inline int Sheet_VipPrivilege::e_vipprivilege_list_size() const {
  return e_vipprivilege_list_.size();
}
inline void Sheet_VipPrivilege::clear_e_vipprivilege_list() {
  e_vipprivilege_list_.Clear();
}
inline const ::proto_ff::E_VipPrivilege& Sheet_VipPrivilege::e_vipprivilege_list(int index) const {
  return e_vipprivilege_list_.Get(index);
}
inline ::proto_ff::E_VipPrivilege* Sheet_VipPrivilege::mutable_e_vipprivilege_list(int index) {
  return e_vipprivilege_list_.Mutable(index);
}
inline ::proto_ff::E_VipPrivilege* Sheet_VipPrivilege::add_e_vipprivilege_list() {
  return e_vipprivilege_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipPrivilege >&
Sheet_VipPrivilege::e_vipprivilege_list() const {
  return e_vipprivilege_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_VipPrivilege >*
Sheet_VipPrivilege::mutable_e_vipprivilege_list() {
  return &e_vipprivilege_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vip_2eproto__INCLUDED
