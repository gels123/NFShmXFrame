// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: festival.proto

#ifndef PROTOBUF_festival_2eproto__INCLUDED
#define PROTOBUF_festival_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_festival_2eproto();
void protobuf_AssignDesc_festival_2eproto();
void protobuf_ShutdownFile_festival_2eproto();

class festivalmuban_JFduihuan;
class Sheet_festivalmuban_JFduihuan;
class festivalmuban_dingzhi;
class Sheet_festivalmuban_dingzhi;
class festivalmuban_CZfanzuan;
class Sheet_festivalmuban_CZfanzuan;
class festivalmuban_lianxuCZ;
class Sheet_festivalmuban_lianxuCZ;
class festivalmuban_prerecharge;
class Sheet_festivalmuban_prerecharge;
class festivalmuban_doubleGift;
class Sheet_festivalmuban_doubleGift;
class festivalbigyanhuarecharge;
class Sheet_festivalbigyanhuarecharge;
class festivalbigyanhuacost;
class Sheet_festivalbigyanhuacost;
class festivalmuban_bigyanhua;
class Sheet_festivalmuban_bigyanhua;
class festivalfestival;
class Sheet_festivalfestival;
class festivaltemplate;
class Sheet_festivaltemplate;
class festivalmuban_worldboss;
class Sheet_festivalmuban_worldboss;
class festivalmuban_libao;
class Sheet_festivalmuban_libao;
class festivalmuban_double;
class Sheet_festivalmuban_double;
class festivalmiaoshu;
class Sheet_festivalmiaoshu;
class festivalmuban_denglu;
class Sheet_festivalmuban_denglu;
class festivalmuban_touzi;
class Sheet_festivalmuban_touzi;
class festivalmuban_zhichong;
class Sheet_festivalmuban_zhichong;
class festivalmuban_leichong;
class Sheet_festivalmuban_leichong;
class festivalmuban_duihuan;
class Sheet_festivalmuban_duihuan;
class festivald_diaoluo;
class Sheet_festivald_diaoluo;
class festivalmuban_leixiao;
class Sheet_festivalmuban_leixiao;
class festivalmuban_shouchong;
class Sheet_festivalmuban_shouchong;
class festivalmuban_yanhua;
class Sheet_festivalmuban_yanhua;
class festivalyanhuaConstant;
class Sheet_festivalyanhuaConstant;
class festivalmuban_shop;
class Sheet_festivalmuban_shop;
class festivalmuban_czjb;
class Sheet_festivalmuban_czjb;
class festivalmuban_scsb;
class Sheet_festivalmuban_scsb;
class festivalmuban_eggs;
class Sheet_festivalmuban_eggs;
class festivaleggConstant;
class Sheet_festivaleggConstant;
class festivalconstant;
class Sheet_festivalconstant;
class festivalmuban_shousha;
class Sheet_festivalmuban_shousha;
class festivalmuban_huoyue;
class Sheet_festivalmuban_huoyue;

// ===================================================================

class festivalmuban_JFduihuan : public ::google::protobuf::Message {
 public:
  festivalmuban_JFduihuan();
  virtual ~festivalmuban_JFduihuan();

  festivalmuban_JFduihuan(const festivalmuban_JFduihuan& from);

  inline festivalmuban_JFduihuan& operator=(const festivalmuban_JFduihuan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_JFduihuan& default_instance();

  void Swap(festivalmuban_JFduihuan* other);

  // implements Message ----------------------------------------------

  festivalmuban_JFduihuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_JFduihuan& from);
  void MergeFrom(const festivalmuban_JFduihuan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tiaoJianId = 1;
  inline bool has_tiaojianid() const;
  inline void clear_tiaojianid();
  static const int kTiaoJianIdFieldNumber = 1;
  inline ::google::protobuf::int32 tiaojianid() const;
  inline void set_tiaojianid(::google::protobuf::int32 value);

  // optional int64 prizeId = 2;
  inline bool has_prizeid() const;
  inline void clear_prizeid();
  static const int kPrizeIdFieldNumber = 2;
  inline ::google::protobuf::int64 prizeid() const;
  inline void set_prizeid(::google::protobuf::int64 value);

  // optional int32 prof = 3;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 3;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 prizeNum = 4;
  inline bool has_prizenum() const;
  inline void clear_prizenum();
  static const int kPrizeNumFieldNumber = 4;
  inline ::google::protobuf::int32 prizenum() const;
  inline void set_prizenum(::google::protobuf::int32 value);

  // optional int64 propId = 5;
  inline bool has_propid() const;
  inline void clear_propid();
  static const int kPropIdFieldNumber = 5;
  inline ::google::protobuf::int64 propid() const;
  inline void set_propid(::google::protobuf::int64 value);

  // optional int32 propNum = 6;
  inline bool has_propnum() const;
  inline void clear_propnum();
  static const int kPropNumFieldNumber = 6;
  inline ::google::protobuf::int32 propnum() const;
  inline void set_propnum(::google::protobuf::int32 value);

  // optional int32 times = 7;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 7;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_JFduihuan)
 private:
  inline void set_has_tiaojianid();
  inline void clear_has_tiaojianid();
  inline void set_has_prizeid();
  inline void clear_has_prizeid();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_prizenum();
  inline void clear_has_prizenum();
  inline void set_has_propid();
  inline void clear_has_propid();
  inline void set_has_propnum();
  inline void clear_has_propnum();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 prizeid_;
  ::google::protobuf::int32 tiaojianid_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int64 propid_;
  ::google::protobuf::int32 prizenum_;
  ::google::protobuf::int32 propnum_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_JFduihuan* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_JFduihuan : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_JFduihuan();
  virtual ~Sheet_festivalmuban_JFduihuan();

  Sheet_festivalmuban_JFduihuan(const Sheet_festivalmuban_JFduihuan& from);

  inline Sheet_festivalmuban_JFduihuan& operator=(const Sheet_festivalmuban_JFduihuan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_JFduihuan& default_instance();

  void Swap(Sheet_festivalmuban_JFduihuan* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_JFduihuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_JFduihuan& from);
  void MergeFrom(const Sheet_festivalmuban_JFduihuan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_JFduihuan festivalmuban_JFduihuan_List = 1;
  inline int festivalmuban_jfduihuan_list_size() const;
  inline void clear_festivalmuban_jfduihuan_list();
  static const int kFestivalmubanJFduihuanListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_JFduihuan& festivalmuban_jfduihuan_list(int index) const;
  inline ::proto_ff::festivalmuban_JFduihuan* mutable_festivalmuban_jfduihuan_list(int index);
  inline ::proto_ff::festivalmuban_JFduihuan* add_festivalmuban_jfduihuan_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_JFduihuan >&
      festivalmuban_jfduihuan_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_JFduihuan >*
      mutable_festivalmuban_jfduihuan_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_JFduihuan)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_JFduihuan > festivalmuban_jfduihuan_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_JFduihuan* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_dingzhi : public ::google::protobuf::Message {
 public:
  festivalmuban_dingzhi();
  virtual ~festivalmuban_dingzhi();

  festivalmuban_dingzhi(const festivalmuban_dingzhi& from);

  inline festivalmuban_dingzhi& operator=(const festivalmuban_dingzhi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_dingzhi& default_instance();

  void Swap(festivalmuban_dingzhi* other);

  // implements Message ----------------------------------------------

  festivalmuban_dingzhi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_dingzhi& from);
  void MergeFrom(const festivalmuban_dingzhi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string des = 2;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 2;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional int64 mustBoxId = 3;
  inline bool has_mustboxid() const;
  inline void clear_mustboxid();
  static const int kMustBoxIdFieldNumber = 3;
  inline ::google::protobuf::int64 mustboxid() const;
  inline void set_mustboxid(::google::protobuf::int64 value);

  // optional int32 currencyType = 4;
  inline bool has_currencytype() const;
  inline void clear_currencytype();
  static const int kCurrencyTypeFieldNumber = 4;
  inline ::google::protobuf::int32 currencytype() const;
  inline void set_currencytype(::google::protobuf::int32 value);

  // optional int32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 times = 6;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 6;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // repeated int64 freeBoxId = 7;
  inline int freeboxid_size() const;
  inline void clear_freeboxid();
  static const int kFreeBoxIdFieldNumber = 7;
  inline ::google::protobuf::int64 freeboxid(int index) const;
  inline void set_freeboxid(int index, ::google::protobuf::int64 value);
  inline void add_freeboxid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      freeboxid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_freeboxid();

  // repeated int32 freeNum = 8;
  inline int freenum_size() const;
  inline void clear_freenum();
  static const int kFreeNumFieldNumber = 8;
  inline ::google::protobuf::int32 freenum(int index) const;
  inline void set_freenum(int index, ::google::protobuf::int32 value);
  inline void add_freenum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      freenum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_freenum();

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_dingzhi)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_mustboxid();
  inline void clear_has_mustboxid();
  inline void set_has_currencytype();
  inline void clear_has_currencytype();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* des_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 currencytype_;
  ::google::protobuf::int64 mustboxid_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > freeboxid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > freenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_dingzhi* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_dingzhi : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_dingzhi();
  virtual ~Sheet_festivalmuban_dingzhi();

  Sheet_festivalmuban_dingzhi(const Sheet_festivalmuban_dingzhi& from);

  inline Sheet_festivalmuban_dingzhi& operator=(const Sheet_festivalmuban_dingzhi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_dingzhi& default_instance();

  void Swap(Sheet_festivalmuban_dingzhi* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_dingzhi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_dingzhi& from);
  void MergeFrom(const Sheet_festivalmuban_dingzhi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_dingzhi festivalmuban_dingzhi_List = 1;
  inline int festivalmuban_dingzhi_list_size() const;
  inline void clear_festivalmuban_dingzhi_list();
  static const int kFestivalmubanDingzhiListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_dingzhi& festivalmuban_dingzhi_list(int index) const;
  inline ::proto_ff::festivalmuban_dingzhi* mutable_festivalmuban_dingzhi_list(int index);
  inline ::proto_ff::festivalmuban_dingzhi* add_festivalmuban_dingzhi_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_dingzhi >&
      festivalmuban_dingzhi_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_dingzhi >*
      mutable_festivalmuban_dingzhi_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_dingzhi)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_dingzhi > festivalmuban_dingzhi_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_dingzhi* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_CZfanzuan : public ::google::protobuf::Message {
 public:
  festivalmuban_CZfanzuan();
  virtual ~festivalmuban_CZfanzuan();

  festivalmuban_CZfanzuan(const festivalmuban_CZfanzuan& from);

  inline festivalmuban_CZfanzuan& operator=(const festivalmuban_CZfanzuan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_CZfanzuan& default_instance();

  void Swap(festivalmuban_CZfanzuan* other);

  // implements Message ----------------------------------------------

  festivalmuban_CZfanzuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_CZfanzuan& from);
  void MergeFrom(const festivalmuban_CZfanzuan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 rechargeId = 2;
  inline bool has_rechargeid() const;
  inline void clear_rechargeid();
  static const int kRechargeIdFieldNumber = 2;
  inline ::google::protobuf::int32 rechargeid() const;
  inline void set_rechargeid(::google::protobuf::int32 value);

  // optional int32 repayType = 3;
  inline bool has_repaytype() const;
  inline void clear_repaytype();
  static const int kRepayTypeFieldNumber = 3;
  inline ::google::protobuf::int32 repaytype() const;
  inline void set_repaytype(::google::protobuf::int32 value);

  // optional int32 repayNum = 4;
  inline bool has_repaynum() const;
  inline void clear_repaynum();
  static const int kRepayNumFieldNumber = 4;
  inline ::google::protobuf::int32 repaynum() const;
  inline void set_repaynum(::google::protobuf::int32 value);

  // optional int32 timesLimit = 5;
  inline bool has_timeslimit() const;
  inline void clear_timeslimit();
  static const int kTimesLimitFieldNumber = 5;
  inline ::google::protobuf::int32 timeslimit() const;
  inline void set_timeslimit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_CZfanzuan)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rechargeid();
  inline void clear_has_rechargeid();
  inline void set_has_repaytype();
  inline void clear_has_repaytype();
  inline void set_has_repaynum();
  inline void clear_has_repaynum();
  inline void set_has_timeslimit();
  inline void clear_has_timeslimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 rechargeid_;
  ::google::protobuf::int32 repaytype_;
  ::google::protobuf::int32 repaynum_;
  ::google::protobuf::int32 timeslimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_CZfanzuan* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_CZfanzuan : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_CZfanzuan();
  virtual ~Sheet_festivalmuban_CZfanzuan();

  Sheet_festivalmuban_CZfanzuan(const Sheet_festivalmuban_CZfanzuan& from);

  inline Sheet_festivalmuban_CZfanzuan& operator=(const Sheet_festivalmuban_CZfanzuan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_CZfanzuan& default_instance();

  void Swap(Sheet_festivalmuban_CZfanzuan* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_CZfanzuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_CZfanzuan& from);
  void MergeFrom(const Sheet_festivalmuban_CZfanzuan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_CZfanzuan festivalmuban_CZfanzuan_List = 1;
  inline int festivalmuban_czfanzuan_list_size() const;
  inline void clear_festivalmuban_czfanzuan_list();
  static const int kFestivalmubanCZfanzuanListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_CZfanzuan& festivalmuban_czfanzuan_list(int index) const;
  inline ::proto_ff::festivalmuban_CZfanzuan* mutable_festivalmuban_czfanzuan_list(int index);
  inline ::proto_ff::festivalmuban_CZfanzuan* add_festivalmuban_czfanzuan_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_CZfanzuan >&
      festivalmuban_czfanzuan_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_CZfanzuan >*
      mutable_festivalmuban_czfanzuan_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_CZfanzuan)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_CZfanzuan > festivalmuban_czfanzuan_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_CZfanzuan* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_lianxuCZ : public ::google::protobuf::Message {
 public:
  festivalmuban_lianxuCZ();
  virtual ~festivalmuban_lianxuCZ();

  festivalmuban_lianxuCZ(const festivalmuban_lianxuCZ& from);

  inline festivalmuban_lianxuCZ& operator=(const festivalmuban_lianxuCZ& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_lianxuCZ& default_instance();

  void Swap(festivalmuban_lianxuCZ* other);

  // implements Message ----------------------------------------------

  festivalmuban_lianxuCZ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_lianxuCZ& from);
  void MergeFrom(const festivalmuban_lianxuCZ& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 remarkId = 3;
  inline bool has_remarkid() const;
  inline void clear_remarkid();
  static const int kRemarkIdFieldNumber = 3;
  inline ::google::protobuf::int32 remarkid() const;
  inline void set_remarkid(::google::protobuf::int32 value);

  // optional string miaoshu = 4;
  inline bool has_miaoshu() const;
  inline void clear_miaoshu();
  static const int kMiaoshuFieldNumber = 4;
  inline const ::std::string& miaoshu() const;
  inline void set_miaoshu(const ::std::string& value);
  inline void set_miaoshu(const char* value);
  inline void set_miaoshu(const char* value, size_t size);
  inline ::std::string* mutable_miaoshu();
  inline ::std::string* release_miaoshu();
  inline void set_allocated_miaoshu(::std::string* miaoshu);

  // optional int64 jiangLi = 5;
  inline bool has_jiangli() const;
  inline void clear_jiangli();
  static const int kJiangLiFieldNumber = 5;
  inline ::google::protobuf::int64 jiangli() const;
  inline void set_jiangli(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_lianxuCZ)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_remarkid();
  inline void clear_has_remarkid();
  inline void set_has_miaoshu();
  inline void clear_has_miaoshu();
  inline void set_has_jiangli();
  inline void clear_has_jiangli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::std::string* miaoshu_;
  ::google::protobuf::int64 jiangli_;
  ::google::protobuf::int32 remarkid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_lianxuCZ* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_lianxuCZ : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_lianxuCZ();
  virtual ~Sheet_festivalmuban_lianxuCZ();

  Sheet_festivalmuban_lianxuCZ(const Sheet_festivalmuban_lianxuCZ& from);

  inline Sheet_festivalmuban_lianxuCZ& operator=(const Sheet_festivalmuban_lianxuCZ& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_lianxuCZ& default_instance();

  void Swap(Sheet_festivalmuban_lianxuCZ* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_lianxuCZ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_lianxuCZ& from);
  void MergeFrom(const Sheet_festivalmuban_lianxuCZ& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_lianxuCZ festivalmuban_lianxuCZ_List = 1;
  inline int festivalmuban_lianxucz_list_size() const;
  inline void clear_festivalmuban_lianxucz_list();
  static const int kFestivalmubanLianxuCZListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_lianxuCZ& festivalmuban_lianxucz_list(int index) const;
  inline ::proto_ff::festivalmuban_lianxuCZ* mutable_festivalmuban_lianxucz_list(int index);
  inline ::proto_ff::festivalmuban_lianxuCZ* add_festivalmuban_lianxucz_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_lianxuCZ >&
      festivalmuban_lianxucz_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_lianxuCZ >*
      mutable_festivalmuban_lianxucz_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_lianxuCZ)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_lianxuCZ > festivalmuban_lianxucz_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_lianxuCZ* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_prerecharge : public ::google::protobuf::Message {
 public:
  festivalmuban_prerecharge();
  virtual ~festivalmuban_prerecharge();

  festivalmuban_prerecharge(const festivalmuban_prerecharge& from);

  inline festivalmuban_prerecharge& operator=(const festivalmuban_prerecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_prerecharge& default_instance();

  void Swap(festivalmuban_prerecharge* other);

  // implements Message ----------------------------------------------

  festivalmuban_prerecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_prerecharge& from);
  void MergeFrom(const festivalmuban_prerecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 order = 2;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 2;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional string des = 3;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 3;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional int64 boxid = 4;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxidFieldNumber = 4;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // optional int32 rechargeId = 5;
  inline bool has_rechargeid() const;
  inline void clear_rechargeid();
  static const int kRechargeIdFieldNumber = 5;
  inline ::google::protobuf::int32 rechargeid() const;
  inline void set_rechargeid(::google::protobuf::int32 value);

  // optional int32 times = 6;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 6;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_prerecharge)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_rechargeid();
  inline void clear_has_rechargeid();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 order_;
  ::std::string* des_;
  ::google::protobuf::int64 boxid_;
  ::google::protobuf::int32 rechargeid_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_prerecharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_prerecharge : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_prerecharge();
  virtual ~Sheet_festivalmuban_prerecharge();

  Sheet_festivalmuban_prerecharge(const Sheet_festivalmuban_prerecharge& from);

  inline Sheet_festivalmuban_prerecharge& operator=(const Sheet_festivalmuban_prerecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_prerecharge& default_instance();

  void Swap(Sheet_festivalmuban_prerecharge* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_prerecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_prerecharge& from);
  void MergeFrom(const Sheet_festivalmuban_prerecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_prerecharge festivalmuban_prerecharge_List = 1;
  inline int festivalmuban_prerecharge_list_size() const;
  inline void clear_festivalmuban_prerecharge_list();
  static const int kFestivalmubanPrerechargeListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_prerecharge& festivalmuban_prerecharge_list(int index) const;
  inline ::proto_ff::festivalmuban_prerecharge* mutable_festivalmuban_prerecharge_list(int index);
  inline ::proto_ff::festivalmuban_prerecharge* add_festivalmuban_prerecharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_prerecharge >&
      festivalmuban_prerecharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_prerecharge >*
      mutable_festivalmuban_prerecharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_prerecharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_prerecharge > festivalmuban_prerecharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_prerecharge* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_doubleGift : public ::google::protobuf::Message {
 public:
  festivalmuban_doubleGift();
  virtual ~festivalmuban_doubleGift();

  festivalmuban_doubleGift(const festivalmuban_doubleGift& from);

  inline festivalmuban_doubleGift& operator=(const festivalmuban_doubleGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_doubleGift& default_instance();

  void Swap(festivalmuban_doubleGift* other);

  // implements Message ----------------------------------------------

  festivalmuban_doubleGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_doubleGift& from);
  void MergeFrom(const festivalmuban_doubleGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 gear = 2;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 2;
  inline ::google::protobuf::int32 gear() const;
  inline void set_gear(::google::protobuf::int32 value);

  // optional int64 boxId = 3;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 3;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // optional int64 freeBox = 4;
  inline bool has_freebox() const;
  inline void clear_freebox();
  static const int kFreeBoxFieldNumber = 4;
  inline ::google::protobuf::int64 freebox() const;
  inline void set_freebox(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_doubleGift)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gear();
  inline void clear_has_gear();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_freebox();
  inline void clear_has_freebox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 gear_;
  ::google::protobuf::int64 boxid_;
  ::google::protobuf::int64 freebox_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_doubleGift* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_doubleGift : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_doubleGift();
  virtual ~Sheet_festivalmuban_doubleGift();

  Sheet_festivalmuban_doubleGift(const Sheet_festivalmuban_doubleGift& from);

  inline Sheet_festivalmuban_doubleGift& operator=(const Sheet_festivalmuban_doubleGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_doubleGift& default_instance();

  void Swap(Sheet_festivalmuban_doubleGift* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_doubleGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_doubleGift& from);
  void MergeFrom(const Sheet_festivalmuban_doubleGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_doubleGift festivalmuban_doubleGift_List = 1;
  inline int festivalmuban_doublegift_list_size() const;
  inline void clear_festivalmuban_doublegift_list();
  static const int kFestivalmubanDoubleGiftListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_doubleGift& festivalmuban_doublegift_list(int index) const;
  inline ::proto_ff::festivalmuban_doubleGift* mutable_festivalmuban_doublegift_list(int index);
  inline ::proto_ff::festivalmuban_doubleGift* add_festivalmuban_doublegift_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_doubleGift >&
      festivalmuban_doublegift_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_doubleGift >*
      mutable_festivalmuban_doublegift_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_doubleGift)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_doubleGift > festivalmuban_doublegift_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_doubleGift* default_instance_;
};
// -------------------------------------------------------------------

class festivalbigyanhuarecharge : public ::google::protobuf::Message {
 public:
  festivalbigyanhuarecharge();
  virtual ~festivalbigyanhuarecharge();

  festivalbigyanhuarecharge(const festivalbigyanhuarecharge& from);

  inline festivalbigyanhuarecharge& operator=(const festivalbigyanhuarecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalbigyanhuarecharge& default_instance();

  void Swap(festivalbigyanhuarecharge* other);

  // implements Message ----------------------------------------------

  festivalbigyanhuarecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalbigyanhuarecharge& from);
  void MergeFrom(const festivalbigyanhuarecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 recharge = 2;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 2;
  inline ::google::protobuf::int32 recharge() const;
  inline void set_recharge(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalbigyanhuarecharge)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_recharge();
  inline void clear_has_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalbigyanhuarecharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalbigyanhuarecharge : public ::google::protobuf::Message {
 public:
  Sheet_festivalbigyanhuarecharge();
  virtual ~Sheet_festivalbigyanhuarecharge();

  Sheet_festivalbigyanhuarecharge(const Sheet_festivalbigyanhuarecharge& from);

  inline Sheet_festivalbigyanhuarecharge& operator=(const Sheet_festivalbigyanhuarecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalbigyanhuarecharge& default_instance();

  void Swap(Sheet_festivalbigyanhuarecharge* other);

  // implements Message ----------------------------------------------

  Sheet_festivalbigyanhuarecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalbigyanhuarecharge& from);
  void MergeFrom(const Sheet_festivalbigyanhuarecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalbigyanhuarecharge festivalbigyanhuarecharge_List = 1;
  inline int festivalbigyanhuarecharge_list_size() const;
  inline void clear_festivalbigyanhuarecharge_list();
  static const int kFestivalbigyanhuarechargeListFieldNumber = 1;
  inline const ::proto_ff::festivalbigyanhuarecharge& festivalbigyanhuarecharge_list(int index) const;
  inline ::proto_ff::festivalbigyanhuarecharge* mutable_festivalbigyanhuarecharge_list(int index);
  inline ::proto_ff::festivalbigyanhuarecharge* add_festivalbigyanhuarecharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuarecharge >&
      festivalbigyanhuarecharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuarecharge >*
      mutable_festivalbigyanhuarecharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalbigyanhuarecharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuarecharge > festivalbigyanhuarecharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalbigyanhuarecharge* default_instance_;
};
// -------------------------------------------------------------------

class festivalbigyanhuacost : public ::google::protobuf::Message {
 public:
  festivalbigyanhuacost();
  virtual ~festivalbigyanhuacost();

  festivalbigyanhuacost(const festivalbigyanhuacost& from);

  inline festivalbigyanhuacost& operator=(const festivalbigyanhuacost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalbigyanhuacost& default_instance();

  void Swap(festivalbigyanhuacost* other);

  // implements Message ----------------------------------------------

  festivalbigyanhuacost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalbigyanhuacost& from);
  void MergeFrom(const festivalbigyanhuacost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 times = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 1;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // optional int32 singleCost = 2;
  inline bool has_singlecost() const;
  inline void clear_singlecost();
  static const int kSingleCostFieldNumber = 2;
  inline ::google::protobuf::int32 singlecost() const;
  inline void set_singlecost(::google::protobuf::int32 value);

  // optional int32 allCost = 3;
  inline bool has_allcost() const;
  inline void clear_allcost();
  static const int kAllCostFieldNumber = 3;
  inline ::google::protobuf::int32 allcost() const;
  inline void set_allcost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalbigyanhuacost)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_singlecost();
  inline void clear_has_singlecost();
  inline void set_has_allcost();
  inline void clear_has_allcost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 singlecost_;
  ::google::protobuf::int32 allcost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalbigyanhuacost* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalbigyanhuacost : public ::google::protobuf::Message {
 public:
  Sheet_festivalbigyanhuacost();
  virtual ~Sheet_festivalbigyanhuacost();

  Sheet_festivalbigyanhuacost(const Sheet_festivalbigyanhuacost& from);

  inline Sheet_festivalbigyanhuacost& operator=(const Sheet_festivalbigyanhuacost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalbigyanhuacost& default_instance();

  void Swap(Sheet_festivalbigyanhuacost* other);

  // implements Message ----------------------------------------------

  Sheet_festivalbigyanhuacost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalbigyanhuacost& from);
  void MergeFrom(const Sheet_festivalbigyanhuacost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalbigyanhuacost festivalbigyanhuacost_List = 1;
  inline int festivalbigyanhuacost_list_size() const;
  inline void clear_festivalbigyanhuacost_list();
  static const int kFestivalbigyanhuacostListFieldNumber = 1;
  inline const ::proto_ff::festivalbigyanhuacost& festivalbigyanhuacost_list(int index) const;
  inline ::proto_ff::festivalbigyanhuacost* mutable_festivalbigyanhuacost_list(int index);
  inline ::proto_ff::festivalbigyanhuacost* add_festivalbigyanhuacost_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuacost >&
      festivalbigyanhuacost_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuacost >*
      mutable_festivalbigyanhuacost_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalbigyanhuacost)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuacost > festivalbigyanhuacost_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalbigyanhuacost* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_bigyanhua : public ::google::protobuf::Message {
 public:
  festivalmuban_bigyanhua();
  virtual ~festivalmuban_bigyanhua();

  festivalmuban_bigyanhua(const festivalmuban_bigyanhua& from);

  inline festivalmuban_bigyanhua& operator=(const festivalmuban_bigyanhua& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_bigyanhua& default_instance();

  void Swap(festivalmuban_bigyanhua* other);

  // implements Message ----------------------------------------------

  festivalmuban_bigyanhua* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_bigyanhua& from);
  void MergeFrom(const festivalmuban_bigyanhua& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 order = 6;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 6;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional int32 probability = 7;
  inline bool has_probability() const;
  inline void clear_probability();
  static const int kProbabilityFieldNumber = 7;
  inline ::google::protobuf::int32 probability() const;
  inline void set_probability(::google::protobuf::int32 value);

  // optional int64 relation = 8;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 8;
  inline ::google::protobuf::int64 relation() const;
  inline void set_relation(::google::protobuf::int64 value);

  // optional int64 modelid = 9;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelidFieldNumber = 9;
  inline ::google::protobuf::int64 modelid() const;
  inline void set_modelid(::google::protobuf::int64 value);

  // optional int32 modeltype = 10;
  inline bool has_modeltype() const;
  inline void clear_modeltype();
  static const int kModeltypeFieldNumber = 10;
  inline ::google::protobuf::int32 modeltype() const;
  inline void set_modeltype(::google::protobuf::int32 value);

  // optional string scale = 11;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 11;
  inline const ::std::string& scale() const;
  inline void set_scale(const ::std::string& value);
  inline void set_scale(const char* value);
  inline void set_scale(const char* value, size_t size);
  inline ::std::string* mutable_scale();
  inline ::std::string* release_scale();
  inline void set_allocated_scale(::std::string* scale);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_bigyanhua)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_probability();
  inline void clear_has_probability();
  inline void set_has_relation();
  inline void clear_has_relation();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_modeltype();
  inline void clear_has_modeltype();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 probability_;
  ::google::protobuf::int64 relation_;
  ::google::protobuf::int64 modelid_;
  ::std::string* scale_;
  ::google::protobuf::int32 modeltype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_bigyanhua* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_bigyanhua : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_bigyanhua();
  virtual ~Sheet_festivalmuban_bigyanhua();

  Sheet_festivalmuban_bigyanhua(const Sheet_festivalmuban_bigyanhua& from);

  inline Sheet_festivalmuban_bigyanhua& operator=(const Sheet_festivalmuban_bigyanhua& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_bigyanhua& default_instance();

  void Swap(Sheet_festivalmuban_bigyanhua* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_bigyanhua* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_bigyanhua& from);
  void MergeFrom(const Sheet_festivalmuban_bigyanhua& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_bigyanhua festivalmuban_bigyanhua_List = 1;
  inline int festivalmuban_bigyanhua_list_size() const;
  inline void clear_festivalmuban_bigyanhua_list();
  static const int kFestivalmubanBigyanhuaListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_bigyanhua& festivalmuban_bigyanhua_list(int index) const;
  inline ::proto_ff::festivalmuban_bigyanhua* mutable_festivalmuban_bigyanhua_list(int index);
  inline ::proto_ff::festivalmuban_bigyanhua* add_festivalmuban_bigyanhua_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_bigyanhua >&
      festivalmuban_bigyanhua_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_bigyanhua >*
      mutable_festivalmuban_bigyanhua_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_bigyanhua)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_bigyanhua > festivalmuban_bigyanhua_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_bigyanhua* default_instance_;
};
// -------------------------------------------------------------------

class festivalfestival : public ::google::protobuf::Message {
 public:
  festivalfestival();
  virtual ~festivalfestival();

  festivalfestival(const festivalfestival& from);

  inline festivalfestival& operator=(const festivalfestival& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalfestival& default_instance();

  void Swap(festivalfestival* other);

  // implements Message ----------------------------------------------

  festivalfestival* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalfestival& from);
  void MergeFrom(const festivalfestival& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 huoDongType = 2;
  inline bool has_huodongtype() const;
  inline void clear_huodongtype();
  static const int kHuoDongTypeFieldNumber = 2;
  inline ::google::protobuf::int32 huodongtype() const;
  inline void set_huodongtype(::google::protobuf::int32 value);

  // optional int32 nameId = 3;
  inline bool has_nameid() const;
  inline void clear_nameid();
  static const int kNameIdFieldNumber = 3;
  inline ::google::protobuf::int32 nameid() const;
  inline void set_nameid(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 servertype = 5;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServertypeFieldNumber = 5;
  inline ::google::protobuf::int32 servertype() const;
  inline void set_servertype(::google::protobuf::int32 value);

  // optional string timeA = 6;
  inline bool has_timea() const;
  inline void clear_timea();
  static const int kTimeAFieldNumber = 6;
  inline const ::std::string& timea() const;
  inline void set_timea(const ::std::string& value);
  inline void set_timea(const char* value);
  inline void set_timea(const char* value, size_t size);
  inline ::std::string* mutable_timea();
  inline ::std::string* release_timea();
  inline void set_allocated_timea(::std::string* timea);

  // optional string timeB = 7;
  inline bool has_timeb() const;
  inline void clear_timeb();
  static const int kTimeBFieldNumber = 7;
  inline const ::std::string& timeb() const;
  inline void set_timeb(const ::std::string& value);
  inline void set_timeb(const char* value);
  inline void set_timeb(const char* value, size_t size);
  inline ::std::string* mutable_timeb();
  inline ::std::string* release_timeb();
  inline void set_allocated_timeb(::std::string* timeb);

  // optional int32 timeType = 8;
  inline bool has_timetype() const;
  inline void clear_timetype();
  static const int kTimeTypeFieldNumber = 8;
  inline ::google::protobuf::int32 timetype() const;
  inline void set_timetype(::google::protobuf::int32 value);

  // optional int32 Level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 vipLevel = 10;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 10;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 rechange = 11;
  inline bool has_rechange() const;
  inline void clear_rechange();
  static const int kRechangeFieldNumber = 11;
  inline ::google::protobuf::int32 rechange() const;
  inline void set_rechange(::google::protobuf::int32 value);

  // optional int32 ifOpen = 12;
  inline bool has_ifopen() const;
  inline void clear_ifopen();
  static const int kIfOpenFieldNumber = 12;
  inline ::google::protobuf::int32 ifopen() const;
  inline void set_ifopen(::google::protobuf::int32 value);

  // optional string list = 13;
  inline bool has_list() const;
  inline void clear_list();
  static const int kListFieldNumber = 13;
  inline const ::std::string& list() const;
  inline void set_list(const ::std::string& value);
  inline void set_list(const char* value);
  inline void set_list(const char* value, size_t size);
  inline ::std::string* mutable_list();
  inline ::std::string* release_list();
  inline void set_allocated_list(::std::string* list);

  // optional string icon = 14;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 14;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional int32 loginPopPriority = 15;
  inline bool has_loginpoppriority() const;
  inline void clear_loginpoppriority();
  static const int kLoginPopPriorityFieldNumber = 15;
  inline ::google::protobuf::int32 loginpoppriority() const;
  inline void set_loginpoppriority(::google::protobuf::int32 value);

  // optional int32 belong = 16;
  inline bool has_belong() const;
  inline void clear_belong();
  static const int kBelongFieldNumber = 16;
  inline ::google::protobuf::int32 belong() const;
  inline void set_belong(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalfestival)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_huodongtype();
  inline void clear_has_huodongtype();
  inline void set_has_nameid();
  inline void clear_has_nameid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_timea();
  inline void clear_has_timea();
  inline void set_has_timeb();
  inline void clear_has_timeb();
  inline void set_has_timetype();
  inline void clear_has_timetype();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_rechange();
  inline void clear_has_rechange();
  inline void set_has_ifopen();
  inline void clear_has_ifopen();
  inline void set_has_list();
  inline void clear_has_list();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_loginpoppriority();
  inline void clear_has_loginpoppriority();
  inline void set_has_belong();
  inline void clear_has_belong();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 huodongtype_;
  ::google::protobuf::int32 nameid_;
  ::std::string* name_;
  ::std::string* timea_;
  ::google::protobuf::int32 servertype_;
  ::google::protobuf::int32 timetype_;
  ::std::string* timeb_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 rechange_;
  ::google::protobuf::int32 ifopen_;
  ::std::string* list_;
  ::std::string* icon_;
  ::google::protobuf::int32 loginpoppriority_;
  ::google::protobuf::int32 belong_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalfestival* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalfestival : public ::google::protobuf::Message {
 public:
  Sheet_festivalfestival();
  virtual ~Sheet_festivalfestival();

  Sheet_festivalfestival(const Sheet_festivalfestival& from);

  inline Sheet_festivalfestival& operator=(const Sheet_festivalfestival& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalfestival& default_instance();

  void Swap(Sheet_festivalfestival* other);

  // implements Message ----------------------------------------------

  Sheet_festivalfestival* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalfestival& from);
  void MergeFrom(const Sheet_festivalfestival& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalfestival festivalfestival_List = 1;
  inline int festivalfestival_list_size() const;
  inline void clear_festivalfestival_list();
  static const int kFestivalfestivalListFieldNumber = 1;
  inline const ::proto_ff::festivalfestival& festivalfestival_list(int index) const;
  inline ::proto_ff::festivalfestival* mutable_festivalfestival_list(int index);
  inline ::proto_ff::festivalfestival* add_festivalfestival_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalfestival >&
      festivalfestival_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalfestival >*
      mutable_festivalfestival_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalfestival)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalfestival > festivalfestival_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalfestival* default_instance_;
};
// -------------------------------------------------------------------

class festivaltemplate : public ::google::protobuf::Message {
 public:
  festivaltemplate();
  virtual ~festivaltemplate();

  festivaltemplate(const festivaltemplate& from);

  inline festivaltemplate& operator=(const festivaltemplate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivaltemplate& default_instance();

  void Swap(festivaltemplate* other);

  // implements Message ----------------------------------------------

  festivaltemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivaltemplate& from);
  void MergeFrom(const festivaltemplate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 muBan = 2;
  inline bool has_muban() const;
  inline void clear_muban();
  static const int kMuBanFieldNumber = 2;
  inline ::google::protobuf::int32 muban() const;
  inline void set_muban(::google::protobuf::int32 value);

  // optional int32 order = 3;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 3;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional string list = 4;
  inline bool has_list() const;
  inline void clear_list();
  static const int kListFieldNumber = 4;
  inline const ::std::string& list() const;
  inline void set_list(const ::std::string& value);
  inline void set_list(const char* value);
  inline void set_list(const char* value, size_t size);
  inline ::std::string* mutable_list();
  inline ::std::string* release_list();
  inline void set_allocated_list(::std::string* list);

  // optional int32 nameId = 5;
  inline bool has_nameid() const;
  inline void clear_nameid();
  static const int kNameIdFieldNumber = 5;
  inline ::google::protobuf::int32 nameid() const;
  inline void set_nameid(::google::protobuf::int32 value);

  // optional string Name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string timeA = 8;
  inline bool has_timea() const;
  inline void clear_timea();
  static const int kTimeAFieldNumber = 8;
  inline const ::std::string& timea() const;
  inline void set_timea(const ::std::string& value);
  inline void set_timea(const char* value);
  inline void set_timea(const char* value, size_t size);
  inline ::std::string* mutable_timea();
  inline ::std::string* release_timea();
  inline void set_allocated_timea(::std::string* timea);

  // optional string timeB = 9;
  inline bool has_timeb() const;
  inline void clear_timeb();
  static const int kTimeBFieldNumber = 9;
  inline const ::std::string& timeb() const;
  inline void set_timeb(const ::std::string& value);
  inline void set_timeb(const char* value);
  inline void set_timeb(const char* value, size_t size);
  inline ::std::string* mutable_timeb();
  inline ::std::string* release_timeb();
  inline void set_allocated_timeb(::std::string* timeb);

  // optional int32 timeType = 10;
  inline bool has_timetype() const;
  inline void clear_timetype();
  static const int kTimeTypeFieldNumber = 10;
  inline ::google::protobuf::int32 timetype() const;
  inline void set_timetype(::google::protobuf::int32 value);

  // optional int32 level = 11;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 11;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 vipLevel = 12;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 12;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 rechange = 13;
  inline bool has_rechange() const;
  inline void clear_rechange();
  static const int kRechangeFieldNumber = 13;
  inline ::google::protobuf::int32 rechange() const;
  inline void set_rechange(::google::protobuf::int32 value);

  // optional int32 remarkId = 14;
  inline bool has_remarkid() const;
  inline void clear_remarkid();
  static const int kRemarkIdFieldNumber = 14;
  inline ::google::protobuf::int32 remarkid() const;
  inline void set_remarkid(::google::protobuf::int32 value);

  // optional string MiaoShu = 15;
  inline bool has_miaoshu() const;
  inline void clear_miaoshu();
  static const int kMiaoShuFieldNumber = 15;
  inline const ::std::string& miaoshu() const;
  inline void set_miaoshu(const ::std::string& value);
  inline void set_miaoshu(const char* value);
  inline void set_miaoshu(const char* value, size_t size);
  inline ::std::string* mutable_miaoshu();
  inline ::std::string* release_miaoshu();
  inline void set_allocated_miaoshu(::std::string* miaoshu);

  // optional int64 jiangLi = 16;
  inline bool has_jiangli() const;
  inline void clear_jiangli();
  static const int kJiangLiFieldNumber = 16;
  inline ::google::protobuf::int64 jiangli() const;
  inline void set_jiangli(::google::protobuf::int64 value);

  // optional string beiJing = 17;
  inline bool has_beijing() const;
  inline void clear_beijing();
  static const int kBeiJingFieldNumber = 17;
  inline const ::std::string& beijing() const;
  inline void set_beijing(const ::std::string& value);
  inline void set_beijing(const char* value);
  inline void set_beijing(const char* value, size_t size);
  inline ::std::string* mutable_beijing();
  inline ::std::string* release_beijing();
  inline void set_allocated_beijing(::std::string* beijing);

  // optional string title = 18;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 18;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string desc = 19;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 19;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:proto_ff.festivaltemplate)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_muban();
  inline void clear_has_muban();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_list();
  inline void clear_has_list();
  inline void set_has_nameid();
  inline void clear_has_nameid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timea();
  inline void clear_has_timea();
  inline void set_has_timeb();
  inline void clear_has_timeb();
  inline void set_has_timetype();
  inline void clear_has_timetype();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_rechange();
  inline void clear_has_rechange();
  inline void set_has_remarkid();
  inline void clear_has_remarkid();
  inline void set_has_miaoshu();
  inline void clear_has_miaoshu();
  inline void set_has_jiangli();
  inline void clear_has_jiangli();
  inline void set_has_beijing();
  inline void clear_has_beijing();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 muban_;
  ::std::string* list_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 nameid_;
  ::std::string* name_;
  ::std::string* type_;
  ::std::string* timea_;
  ::std::string* timeb_;
  ::google::protobuf::int32 timetype_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 rechange_;
  ::std::string* miaoshu_;
  ::google::protobuf::int64 jiangli_;
  ::std::string* beijing_;
  ::std::string* title_;
  ::std::string* desc_;
  ::google::protobuf::int32 remarkid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivaltemplate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivaltemplate : public ::google::protobuf::Message {
 public:
  Sheet_festivaltemplate();
  virtual ~Sheet_festivaltemplate();

  Sheet_festivaltemplate(const Sheet_festivaltemplate& from);

  inline Sheet_festivaltemplate& operator=(const Sheet_festivaltemplate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivaltemplate& default_instance();

  void Swap(Sheet_festivaltemplate* other);

  // implements Message ----------------------------------------------

  Sheet_festivaltemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivaltemplate& from);
  void MergeFrom(const Sheet_festivaltemplate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivaltemplate festivaltemplate_List = 1;
  inline int festivaltemplate_list_size() const;
  inline void clear_festivaltemplate_list();
  static const int kFestivaltemplateListFieldNumber = 1;
  inline const ::proto_ff::festivaltemplate& festivaltemplate_list(int index) const;
  inline ::proto_ff::festivaltemplate* mutable_festivaltemplate_list(int index);
  inline ::proto_ff::festivaltemplate* add_festivaltemplate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaltemplate >&
      festivaltemplate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaltemplate >*
      mutable_festivaltemplate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivaltemplate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaltemplate > festivaltemplate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivaltemplate* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_worldboss : public ::google::protobuf::Message {
 public:
  festivalmuban_worldboss();
  virtual ~festivalmuban_worldboss();

  festivalmuban_worldboss(const festivalmuban_worldboss& from);

  inline festivalmuban_worldboss& operator=(const festivalmuban_worldboss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_worldboss& default_instance();

  void Swap(festivalmuban_worldboss* other);

  // implements Message ----------------------------------------------

  festivalmuban_worldboss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_worldboss& from);
  void MergeFrom(const festivalmuban_worldboss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 bossid = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossidFieldNumber = 2;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);

  // optional int32 sort = 3;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 3;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);

  // optional int32 conditionType = 4;
  inline bool has_conditiontype() const;
  inline void clear_conditiontype();
  static const int kConditionTypeFieldNumber = 4;
  inline ::google::protobuf::int32 conditiontype() const;
  inline void set_conditiontype(::google::protobuf::int32 value);

  // optional int32 condition = 5;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 5;
  inline ::google::protobuf::int32 condition() const;
  inline void set_condition(::google::protobuf::int32 value);

  // optional string des = 6;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 6;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional int64 boxId = 7;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 7;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_worldboss)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_conditiontype();
  inline void clear_has_conditiontype();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 bossid_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int32 conditiontype_;
  ::std::string* des_;
  ::google::protobuf::int64 boxid_;
  ::google::protobuf::int32 condition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_worldboss* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_worldboss : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_worldboss();
  virtual ~Sheet_festivalmuban_worldboss();

  Sheet_festivalmuban_worldboss(const Sheet_festivalmuban_worldboss& from);

  inline Sheet_festivalmuban_worldboss& operator=(const Sheet_festivalmuban_worldboss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_worldboss& default_instance();

  void Swap(Sheet_festivalmuban_worldboss* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_worldboss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_worldboss& from);
  void MergeFrom(const Sheet_festivalmuban_worldboss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_worldboss festivalmuban_worldboss_List = 1;
  inline int festivalmuban_worldboss_list_size() const;
  inline void clear_festivalmuban_worldboss_list();
  static const int kFestivalmubanWorldbossListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_worldboss& festivalmuban_worldboss_list(int index) const;
  inline ::proto_ff::festivalmuban_worldboss* mutable_festivalmuban_worldboss_list(int index);
  inline ::proto_ff::festivalmuban_worldboss* add_festivalmuban_worldboss_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_worldboss >&
      festivalmuban_worldboss_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_worldboss >*
      mutable_festivalmuban_worldboss_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_worldboss)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_worldboss > festivalmuban_worldboss_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_worldboss* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_libao : public ::google::protobuf::Message {
 public:
  festivalmuban_libao();
  virtual ~festivalmuban_libao();

  festivalmuban_libao(const festivalmuban_libao& from);

  inline festivalmuban_libao& operator=(const festivalmuban_libao& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_libao& default_instance();

  void Swap(festivalmuban_libao* other);

  // implements Message ----------------------------------------------

  festivalmuban_libao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_libao& from);
  void MergeFrom(const festivalmuban_libao& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 boxid = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxidFieldNumber = 2;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // optional int32 term = 3;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 3;
  inline ::google::protobuf::int32 term() const;
  inline void set_term(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 currencyType = 5;
  inline bool has_currencytype() const;
  inline void clear_currencytype();
  static const int kCurrencyTypeFieldNumber = 5;
  inline ::google::protobuf::int32 currencytype() const;
  inline void set_currencytype(::google::protobuf::int32 value);

  // optional int32 price = 6;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 6;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 backType = 7;
  inline bool has_backtype() const;
  inline void clear_backtype();
  static const int kBackTypeFieldNumber = 7;
  inline ::google::protobuf::int32 backtype() const;
  inline void set_backtype(::google::protobuf::int32 value);

  // optional int32 dayBack = 8;
  inline bool has_dayback() const;
  inline void clear_dayback();
  static const int kDayBackFieldNumber = 8;
  inline ::google::protobuf::int32 dayback() const;
  inline void set_dayback(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_libao)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_currencytype();
  inline void clear_has_currencytype();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_backtype();
  inline void clear_has_backtype();
  inline void set_has_dayback();
  inline void clear_has_dayback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 boxid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 currencytype_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 backtype_;
  ::google::protobuf::int32 dayback_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_libao* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_libao : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_libao();
  virtual ~Sheet_festivalmuban_libao();

  Sheet_festivalmuban_libao(const Sheet_festivalmuban_libao& from);

  inline Sheet_festivalmuban_libao& operator=(const Sheet_festivalmuban_libao& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_libao& default_instance();

  void Swap(Sheet_festivalmuban_libao* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_libao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_libao& from);
  void MergeFrom(const Sheet_festivalmuban_libao& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_libao festivalmuban_libao_List = 1;
  inline int festivalmuban_libao_list_size() const;
  inline void clear_festivalmuban_libao_list();
  static const int kFestivalmubanLibaoListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_libao& festivalmuban_libao_list(int index) const;
  inline ::proto_ff::festivalmuban_libao* mutable_festivalmuban_libao_list(int index);
  inline ::proto_ff::festivalmuban_libao* add_festivalmuban_libao_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_libao >&
      festivalmuban_libao_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_libao >*
      mutable_festivalmuban_libao_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_libao)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_libao > festivalmuban_libao_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_libao* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_double : public ::google::protobuf::Message {
 public:
  festivalmuban_double();
  virtual ~festivalmuban_double();

  festivalmuban_double(const festivalmuban_double& from);

  inline festivalmuban_double& operator=(const festivalmuban_double& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_double& default_instance();

  void Swap(festivalmuban_double* other);

  // implements Message ----------------------------------------------

  festivalmuban_double* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_double& from);
  void MergeFrom(const festivalmuban_double& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 gear = 2;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 2;
  inline ::google::protobuf::int32 gear() const;
  inline void set_gear(::google::protobuf::int32 value);

  // optional int64 boxId = 3;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 3;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_double)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gear();
  inline void clear_has_gear();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 gear_;
  ::google::protobuf::int64 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_double* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_double : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_double();
  virtual ~Sheet_festivalmuban_double();

  Sheet_festivalmuban_double(const Sheet_festivalmuban_double& from);

  inline Sheet_festivalmuban_double& operator=(const Sheet_festivalmuban_double& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_double& default_instance();

  void Swap(Sheet_festivalmuban_double* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_double* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_double& from);
  void MergeFrom(const Sheet_festivalmuban_double& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_double festivalmuban_double_List = 1;
  inline int festivalmuban_double_list_size() const;
  inline void clear_festivalmuban_double_list();
  static const int kFestivalmubanDoubleListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_double& festivalmuban_double_list(int index) const;
  inline ::proto_ff::festivalmuban_double* mutable_festivalmuban_double_list(int index);
  inline ::proto_ff::festivalmuban_double* add_festivalmuban_double_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_double >&
      festivalmuban_double_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_double >*
      mutable_festivalmuban_double_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_double)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_double > festivalmuban_double_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_double* default_instance_;
};
// -------------------------------------------------------------------

class festivalmiaoshu : public ::google::protobuf::Message {
 public:
  festivalmiaoshu();
  virtual ~festivalmiaoshu();

  festivalmiaoshu(const festivalmiaoshu& from);

  inline festivalmiaoshu& operator=(const festivalmiaoshu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmiaoshu& default_instance();

  void Swap(festivalmiaoshu* other);

  // implements Message ----------------------------------------------

  festivalmiaoshu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmiaoshu& from);
  void MergeFrom(const festivalmiaoshu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string wenzi = 2;
  inline bool has_wenzi() const;
  inline void clear_wenzi();
  static const int kWenziFieldNumber = 2;
  inline const ::std::string& wenzi() const;
  inline void set_wenzi(const ::std::string& value);
  inline void set_wenzi(const char* value);
  inline void set_wenzi(const char* value, size_t size);
  inline ::std::string* mutable_wenzi();
  inline ::std::string* release_wenzi();
  inline void set_allocated_wenzi(::std::string* wenzi);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmiaoshu)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_wenzi();
  inline void clear_has_wenzi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* wenzi_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmiaoshu* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmiaoshu : public ::google::protobuf::Message {
 public:
  Sheet_festivalmiaoshu();
  virtual ~Sheet_festivalmiaoshu();

  Sheet_festivalmiaoshu(const Sheet_festivalmiaoshu& from);

  inline Sheet_festivalmiaoshu& operator=(const Sheet_festivalmiaoshu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmiaoshu& default_instance();

  void Swap(Sheet_festivalmiaoshu* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmiaoshu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmiaoshu& from);
  void MergeFrom(const Sheet_festivalmiaoshu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmiaoshu festivalmiaoshu_List = 1;
  inline int festivalmiaoshu_list_size() const;
  inline void clear_festivalmiaoshu_list();
  static const int kFestivalmiaoshuListFieldNumber = 1;
  inline const ::proto_ff::festivalmiaoshu& festivalmiaoshu_list(int index) const;
  inline ::proto_ff::festivalmiaoshu* mutable_festivalmiaoshu_list(int index);
  inline ::proto_ff::festivalmiaoshu* add_festivalmiaoshu_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmiaoshu >&
      festivalmiaoshu_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmiaoshu >*
      mutable_festivalmiaoshu_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmiaoshu)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmiaoshu > festivalmiaoshu_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmiaoshu* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_denglu : public ::google::protobuf::Message {
 public:
  festivalmuban_denglu();
  virtual ~festivalmuban_denglu();

  festivalmuban_denglu(const festivalmuban_denglu& from);

  inline festivalmuban_denglu& operator=(const festivalmuban_denglu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_denglu& default_instance();

  void Swap(festivalmuban_denglu* other);

  // implements Message ----------------------------------------------

  festivalmuban_denglu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_denglu& from);
  void MergeFrom(const festivalmuban_denglu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 remarkId = 3;
  inline bool has_remarkid() const;
  inline void clear_remarkid();
  static const int kRemarkIdFieldNumber = 3;
  inline ::google::protobuf::int32 remarkid() const;
  inline void set_remarkid(::google::protobuf::int32 value);

  // optional string miaoshu = 4;
  inline bool has_miaoshu() const;
  inline void clear_miaoshu();
  static const int kMiaoshuFieldNumber = 4;
  inline const ::std::string& miaoshu() const;
  inline void set_miaoshu(const ::std::string& value);
  inline void set_miaoshu(const char* value);
  inline void set_miaoshu(const char* value, size_t size);
  inline ::std::string* mutable_miaoshu();
  inline ::std::string* release_miaoshu();
  inline void set_allocated_miaoshu(::std::string* miaoshu);

  // optional int64 jiangLi = 5;
  inline bool has_jiangli() const;
  inline void clear_jiangli();
  static const int kJiangLiFieldNumber = 5;
  inline ::google::protobuf::int64 jiangli() const;
  inline void set_jiangli(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_denglu)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_remarkid();
  inline void clear_has_remarkid();
  inline void set_has_miaoshu();
  inline void clear_has_miaoshu();
  inline void set_has_jiangli();
  inline void clear_has_jiangli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::std::string* miaoshu_;
  ::google::protobuf::int64 jiangli_;
  ::google::protobuf::int32 remarkid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_denglu* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_denglu : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_denglu();
  virtual ~Sheet_festivalmuban_denglu();

  Sheet_festivalmuban_denglu(const Sheet_festivalmuban_denglu& from);

  inline Sheet_festivalmuban_denglu& operator=(const Sheet_festivalmuban_denglu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_denglu& default_instance();

  void Swap(Sheet_festivalmuban_denglu* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_denglu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_denglu& from);
  void MergeFrom(const Sheet_festivalmuban_denglu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_denglu festivalmuban_denglu_List = 1;
  inline int festivalmuban_denglu_list_size() const;
  inline void clear_festivalmuban_denglu_list();
  static const int kFestivalmubanDengluListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_denglu& festivalmuban_denglu_list(int index) const;
  inline ::proto_ff::festivalmuban_denglu* mutable_festivalmuban_denglu_list(int index);
  inline ::proto_ff::festivalmuban_denglu* add_festivalmuban_denglu_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_denglu >&
      festivalmuban_denglu_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_denglu >*
      mutable_festivalmuban_denglu_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_denglu)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_denglu > festivalmuban_denglu_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_denglu* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_touzi : public ::google::protobuf::Message {
 public:
  festivalmuban_touzi();
  virtual ~festivalmuban_touzi();

  festivalmuban_touzi(const festivalmuban_touzi& from);

  inline festivalmuban_touzi& operator=(const festivalmuban_touzi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_touzi& default_instance();

  void Swap(festivalmuban_touzi* other);

  // implements Message ----------------------------------------------

  festivalmuban_touzi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_touzi& from);
  void MergeFrom(const festivalmuban_touzi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int64 addNum = 4;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 4;
  inline ::google::protobuf::int64 addnum() const;
  inline void set_addnum(::google::protobuf::int64 value);

  // optional int32 remarkId = 5;
  inline bool has_remarkid() const;
  inline void clear_remarkid();
  static const int kRemarkIdFieldNumber = 5;
  inline ::google::protobuf::int32 remarkid() const;
  inline void set_remarkid(::google::protobuf::int32 value);

  // optional string miaoshu = 6;
  inline bool has_miaoshu() const;
  inline void clear_miaoshu();
  static const int kMiaoshuFieldNumber = 6;
  inline const ::std::string& miaoshu() const;
  inline void set_miaoshu(const ::std::string& value);
  inline void set_miaoshu(const char* value);
  inline void set_miaoshu(const char* value, size_t size);
  inline ::std::string* mutable_miaoshu();
  inline ::std::string* release_miaoshu();
  inline void set_allocated_miaoshu(::std::string* miaoshu);

  // optional int64 jiangLi = 7;
  inline bool has_jiangli() const;
  inline void clear_jiangli();
  static const int kJiangLiFieldNumber = 7;
  inline ::google::protobuf::int64 jiangli() const;
  inline void set_jiangli(::google::protobuf::int64 value);

  // optional int64 linkId = 8;
  inline bool has_linkid() const;
  inline void clear_linkid();
  static const int kLinkIdFieldNumber = 8;
  inline ::google::protobuf::int64 linkid() const;
  inline void set_linkid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_touzi)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_addnum();
  inline void clear_has_addnum();
  inline void set_has_remarkid();
  inline void clear_has_remarkid();
  inline void set_has_miaoshu();
  inline void clear_has_miaoshu();
  inline void set_has_jiangli();
  inline void clear_has_jiangli();
  inline void set_has_linkid();
  inline void clear_has_linkid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 addnum_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 remarkid_;
  ::std::string* miaoshu_;
  ::google::protobuf::int64 jiangli_;
  ::google::protobuf::int64 linkid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_touzi* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_touzi : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_touzi();
  virtual ~Sheet_festivalmuban_touzi();

  Sheet_festivalmuban_touzi(const Sheet_festivalmuban_touzi& from);

  inline Sheet_festivalmuban_touzi& operator=(const Sheet_festivalmuban_touzi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_touzi& default_instance();

  void Swap(Sheet_festivalmuban_touzi* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_touzi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_touzi& from);
  void MergeFrom(const Sheet_festivalmuban_touzi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_touzi festivalmuban_touzi_List = 1;
  inline int festivalmuban_touzi_list_size() const;
  inline void clear_festivalmuban_touzi_list();
  static const int kFestivalmubanTouziListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_touzi& festivalmuban_touzi_list(int index) const;
  inline ::proto_ff::festivalmuban_touzi* mutable_festivalmuban_touzi_list(int index);
  inline ::proto_ff::festivalmuban_touzi* add_festivalmuban_touzi_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_touzi >&
      festivalmuban_touzi_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_touzi >*
      mutable_festivalmuban_touzi_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_touzi)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_touzi > festivalmuban_touzi_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_touzi* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_zhichong : public ::google::protobuf::Message {
 public:
  festivalmuban_zhichong();
  virtual ~festivalmuban_zhichong();

  festivalmuban_zhichong(const festivalmuban_zhichong& from);

  inline festivalmuban_zhichong& operator=(const festivalmuban_zhichong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_zhichong& default_instance();

  void Swap(festivalmuban_zhichong* other);

  // implements Message ----------------------------------------------

  festivalmuban_zhichong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_zhichong& from);
  void MergeFrom(const festivalmuban_zhichong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional string severNum = 3;
  inline bool has_severnum() const;
  inline void clear_severnum();
  static const int kSeverNumFieldNumber = 3;
  inline const ::std::string& severnum() const;
  inline void set_severnum(const ::std::string& value);
  inline void set_severnum(const char* value);
  inline void set_severnum(const char* value, size_t size);
  inline ::std::string* mutable_severnum();
  inline ::std::string* release_severnum();
  inline void set_allocated_severnum(::std::string* severnum);

  // optional int32 remarkId = 4;
  inline bool has_remarkid() const;
  inline void clear_remarkid();
  static const int kRemarkIdFieldNumber = 4;
  inline ::google::protobuf::int32 remarkid() const;
  inline void set_remarkid(::google::protobuf::int32 value);

  // optional string miaoshu = 5;
  inline bool has_miaoshu() const;
  inline void clear_miaoshu();
  static const int kMiaoshuFieldNumber = 5;
  inline const ::std::string& miaoshu() const;
  inline void set_miaoshu(const ::std::string& value);
  inline void set_miaoshu(const char* value);
  inline void set_miaoshu(const char* value, size_t size);
  inline ::std::string* mutable_miaoshu();
  inline ::std::string* release_miaoshu();
  inline void set_allocated_miaoshu(::std::string* miaoshu);

  // optional int64 jiangLi = 6;
  inline bool has_jiangli() const;
  inline void clear_jiangli();
  static const int kJiangLiFieldNumber = 6;
  inline ::google::protobuf::int64 jiangli() const;
  inline void set_jiangli(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_zhichong)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_severnum();
  inline void clear_has_severnum();
  inline void set_has_remarkid();
  inline void clear_has_remarkid();
  inline void set_has_miaoshu();
  inline void clear_has_miaoshu();
  inline void set_has_jiangli();
  inline void clear_has_jiangli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::std::string* severnum_;
  ::std::string* miaoshu_;
  ::google::protobuf::int64 jiangli_;
  ::google::protobuf::int32 remarkid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_zhichong* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_zhichong : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_zhichong();
  virtual ~Sheet_festivalmuban_zhichong();

  Sheet_festivalmuban_zhichong(const Sheet_festivalmuban_zhichong& from);

  inline Sheet_festivalmuban_zhichong& operator=(const Sheet_festivalmuban_zhichong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_zhichong& default_instance();

  void Swap(Sheet_festivalmuban_zhichong* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_zhichong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_zhichong& from);
  void MergeFrom(const Sheet_festivalmuban_zhichong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_zhichong festivalmuban_zhichong_List = 1;
  inline int festivalmuban_zhichong_list_size() const;
  inline void clear_festivalmuban_zhichong_list();
  static const int kFestivalmubanZhichongListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_zhichong& festivalmuban_zhichong_list(int index) const;
  inline ::proto_ff::festivalmuban_zhichong* mutable_festivalmuban_zhichong_list(int index);
  inline ::proto_ff::festivalmuban_zhichong* add_festivalmuban_zhichong_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_zhichong >&
      festivalmuban_zhichong_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_zhichong >*
      mutable_festivalmuban_zhichong_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_zhichong)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_zhichong > festivalmuban_zhichong_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_zhichong* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_leichong : public ::google::protobuf::Message {
 public:
  festivalmuban_leichong();
  virtual ~festivalmuban_leichong();

  festivalmuban_leichong(const festivalmuban_leichong& from);

  inline festivalmuban_leichong& operator=(const festivalmuban_leichong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_leichong& default_instance();

  void Swap(festivalmuban_leichong* other);

  // implements Message ----------------------------------------------

  festivalmuban_leichong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_leichong& from);
  void MergeFrom(const festivalmuban_leichong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 remarkId = 4;
  inline bool has_remarkid() const;
  inline void clear_remarkid();
  static const int kRemarkIdFieldNumber = 4;
  inline ::google::protobuf::int32 remarkid() const;
  inline void set_remarkid(::google::protobuf::int32 value);

  // optional string miaoshu = 5;
  inline bool has_miaoshu() const;
  inline void clear_miaoshu();
  static const int kMiaoshuFieldNumber = 5;
  inline const ::std::string& miaoshu() const;
  inline void set_miaoshu(const ::std::string& value);
  inline void set_miaoshu(const char* value);
  inline void set_miaoshu(const char* value, size_t size);
  inline ::std::string* mutable_miaoshu();
  inline ::std::string* release_miaoshu();
  inline void set_allocated_miaoshu(::std::string* miaoshu);

  // optional int64 jiangLi = 6;
  inline bool has_jiangli() const;
  inline void clear_jiangli();
  static const int kJiangLiFieldNumber = 6;
  inline ::google::protobuf::int64 jiangli() const;
  inline void set_jiangli(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_leichong)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_remarkid();
  inline void clear_has_remarkid();
  inline void set_has_miaoshu();
  inline void clear_has_miaoshu();
  inline void set_has_jiangli();
  inline void clear_has_jiangli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 remarkid_;
  ::std::string* miaoshu_;
  ::google::protobuf::int64 jiangli_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_leichong* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_leichong : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_leichong();
  virtual ~Sheet_festivalmuban_leichong();

  Sheet_festivalmuban_leichong(const Sheet_festivalmuban_leichong& from);

  inline Sheet_festivalmuban_leichong& operator=(const Sheet_festivalmuban_leichong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_leichong& default_instance();

  void Swap(Sheet_festivalmuban_leichong* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_leichong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_leichong& from);
  void MergeFrom(const Sheet_festivalmuban_leichong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_leichong festivalmuban_leichong_List = 1;
  inline int festivalmuban_leichong_list_size() const;
  inline void clear_festivalmuban_leichong_list();
  static const int kFestivalmubanLeichongListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_leichong& festivalmuban_leichong_list(int index) const;
  inline ::proto_ff::festivalmuban_leichong* mutable_festivalmuban_leichong_list(int index);
  inline ::proto_ff::festivalmuban_leichong* add_festivalmuban_leichong_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leichong >&
      festivalmuban_leichong_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leichong >*
      mutable_festivalmuban_leichong_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_leichong)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leichong > festivalmuban_leichong_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_leichong* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_duihuan : public ::google::protobuf::Message {
 public:
  festivalmuban_duihuan();
  virtual ~festivalmuban_duihuan();

  festivalmuban_duihuan(const festivalmuban_duihuan& from);

  inline festivalmuban_duihuan& operator=(const festivalmuban_duihuan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_duihuan& default_instance();

  void Swap(festivalmuban_duihuan* other);

  // implements Message ----------------------------------------------

  festivalmuban_duihuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_duihuan& from);
  void MergeFrom(const festivalmuban_duihuan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tiaoJianId = 1;
  inline bool has_tiaojianid() const;
  inline void clear_tiaojianid();
  static const int kTiaoJianIdFieldNumber = 1;
  inline ::google::protobuf::int32 tiaojianid() const;
  inline void set_tiaojianid(::google::protobuf::int32 value);

  // optional int64 prizeId = 2;
  inline bool has_prizeid() const;
  inline void clear_prizeid();
  static const int kPrizeIdFieldNumber = 2;
  inline ::google::protobuf::int64 prizeid() const;
  inline void set_prizeid(::google::protobuf::int64 value);

  // optional int32 prof = 3;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 3;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 prizeNum = 4;
  inline bool has_prizenum() const;
  inline void clear_prizenum();
  static const int kPrizeNumFieldNumber = 4;
  inline ::google::protobuf::int32 prizenum() const;
  inline void set_prizenum(::google::protobuf::int32 value);

  // optional int64 propId = 5;
  inline bool has_propid() const;
  inline void clear_propid();
  static const int kPropIdFieldNumber = 5;
  inline ::google::protobuf::int64 propid() const;
  inline void set_propid(::google::protobuf::int64 value);

  // optional int32 propNum = 6;
  inline bool has_propnum() const;
  inline void clear_propnum();
  static const int kPropNumFieldNumber = 6;
  inline ::google::protobuf::int32 propnum() const;
  inline void set_propnum(::google::protobuf::int32 value);

  // optional int32 times = 7;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 7;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_duihuan)
 private:
  inline void set_has_tiaojianid();
  inline void clear_has_tiaojianid();
  inline void set_has_prizeid();
  inline void clear_has_prizeid();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_prizenum();
  inline void clear_has_prizenum();
  inline void set_has_propid();
  inline void clear_has_propid();
  inline void set_has_propnum();
  inline void clear_has_propnum();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 prizeid_;
  ::google::protobuf::int32 tiaojianid_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int64 propid_;
  ::google::protobuf::int32 prizenum_;
  ::google::protobuf::int32 propnum_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_duihuan* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_duihuan : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_duihuan();
  virtual ~Sheet_festivalmuban_duihuan();

  Sheet_festivalmuban_duihuan(const Sheet_festivalmuban_duihuan& from);

  inline Sheet_festivalmuban_duihuan& operator=(const Sheet_festivalmuban_duihuan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_duihuan& default_instance();

  void Swap(Sheet_festivalmuban_duihuan* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_duihuan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_duihuan& from);
  void MergeFrom(const Sheet_festivalmuban_duihuan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_duihuan festivalmuban_duihuan_List = 1;
  inline int festivalmuban_duihuan_list_size() const;
  inline void clear_festivalmuban_duihuan_list();
  static const int kFestivalmubanDuihuanListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_duihuan& festivalmuban_duihuan_list(int index) const;
  inline ::proto_ff::festivalmuban_duihuan* mutable_festivalmuban_duihuan_list(int index);
  inline ::proto_ff::festivalmuban_duihuan* add_festivalmuban_duihuan_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_duihuan >&
      festivalmuban_duihuan_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_duihuan >*
      mutable_festivalmuban_duihuan_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_duihuan)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_duihuan > festivalmuban_duihuan_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_duihuan* default_instance_;
};
// -------------------------------------------------------------------

class festivald_diaoluo : public ::google::protobuf::Message {
 public:
  festivald_diaoluo();
  virtual ~festivald_diaoluo();

  festivald_diaoluo(const festivald_diaoluo& from);

  inline festivald_diaoluo& operator=(const festivald_diaoluo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivald_diaoluo& default_instance();

  void Swap(festivald_diaoluo* other);

  // implements Message ----------------------------------------------

  festivald_diaoluo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivald_diaoluo& from);
  void MergeFrom(const festivald_diaoluo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 mixLevel = 2;
  inline bool has_mixlevel() const;
  inline void clear_mixlevel();
  static const int kMixLevelFieldNumber = 2;
  inline ::google::protobuf::int32 mixlevel() const;
  inline void set_mixlevel(::google::protobuf::int32 value);

  // optional int32 bossType = 3;
  inline bool has_bosstype() const;
  inline void clear_bosstype();
  static const int kBossTypeFieldNumber = 3;
  inline ::google::protobuf::int32 bosstype() const;
  inline void set_bosstype(::google::protobuf::int32 value);

  // optional string dropNum = 4;
  inline bool has_dropnum() const;
  inline void clear_dropnum();
  static const int kDropNumFieldNumber = 4;
  inline const ::std::string& dropnum() const;
  inline void set_dropnum(const ::std::string& value);
  inline void set_dropnum(const char* value);
  inline void set_dropnum(const char* value, size_t size);
  inline ::std::string* mutable_dropnum();
  inline ::std::string* release_dropnum();
  inline void set_allocated_dropnum(::std::string* dropnum);

  // optional string dropRand = 5;
  inline bool has_droprand() const;
  inline void clear_droprand();
  static const int kDropRandFieldNumber = 5;
  inline const ::std::string& droprand() const;
  inline void set_droprand(const ::std::string& value);
  inline void set_droprand(const char* value);
  inline void set_droprand(const char* value, size_t size);
  inline ::std::string* mutable_droprand();
  inline ::std::string* release_droprand();
  inline void set_allocated_droprand(::std::string* droprand);

  // @@protoc_insertion_point(class_scope:proto_ff.festivald_diaoluo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mixlevel();
  inline void clear_has_mixlevel();
  inline void set_has_bosstype();
  inline void clear_has_bosstype();
  inline void set_has_dropnum();
  inline void clear_has_dropnum();
  inline void set_has_droprand();
  inline void clear_has_droprand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mixlevel_;
  ::std::string* dropnum_;
  ::std::string* droprand_;
  ::google::protobuf::int32 bosstype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivald_diaoluo* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivald_diaoluo : public ::google::protobuf::Message {
 public:
  Sheet_festivald_diaoluo();
  virtual ~Sheet_festivald_diaoluo();

  Sheet_festivald_diaoluo(const Sheet_festivald_diaoluo& from);

  inline Sheet_festivald_diaoluo& operator=(const Sheet_festivald_diaoluo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivald_diaoluo& default_instance();

  void Swap(Sheet_festivald_diaoluo* other);

  // implements Message ----------------------------------------------

  Sheet_festivald_diaoluo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivald_diaoluo& from);
  void MergeFrom(const Sheet_festivald_diaoluo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivald_diaoluo festivald_diaoluo_List = 1;
  inline int festivald_diaoluo_list_size() const;
  inline void clear_festivald_diaoluo_list();
  static const int kFestivaldDiaoluoListFieldNumber = 1;
  inline const ::proto_ff::festivald_diaoluo& festivald_diaoluo_list(int index) const;
  inline ::proto_ff::festivald_diaoluo* mutable_festivald_diaoluo_list(int index);
  inline ::proto_ff::festivald_diaoluo* add_festivald_diaoluo_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivald_diaoluo >&
      festivald_diaoluo_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivald_diaoluo >*
      mutable_festivald_diaoluo_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivald_diaoluo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivald_diaoluo > festivald_diaoluo_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivald_diaoluo* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_leixiao : public ::google::protobuf::Message {
 public:
  festivalmuban_leixiao();
  virtual ~festivalmuban_leixiao();

  festivalmuban_leixiao(const festivalmuban_leixiao& from);

  inline festivalmuban_leixiao& operator=(const festivalmuban_leixiao& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_leixiao& default_instance();

  void Swap(festivalmuban_leixiao* other);

  // implements Message ----------------------------------------------

  festivalmuban_leixiao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_leixiao& from);
  void MergeFrom(const festivalmuban_leixiao& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 xiaoFei = 3;
  inline bool has_xiaofei() const;
  inline void clear_xiaofei();
  static const int kXiaoFeiFieldNumber = 3;
  inline ::google::protobuf::int32 xiaofei() const;
  inline void set_xiaofei(::google::protobuf::int32 value);

  // optional int32 remarkId = 4;
  inline bool has_remarkid() const;
  inline void clear_remarkid();
  static const int kRemarkIdFieldNumber = 4;
  inline ::google::protobuf::int32 remarkid() const;
  inline void set_remarkid(::google::protobuf::int32 value);

  // optional string miaoshu = 5;
  inline bool has_miaoshu() const;
  inline void clear_miaoshu();
  static const int kMiaoshuFieldNumber = 5;
  inline const ::std::string& miaoshu() const;
  inline void set_miaoshu(const ::std::string& value);
  inline void set_miaoshu(const char* value);
  inline void set_miaoshu(const char* value, size_t size);
  inline ::std::string* mutable_miaoshu();
  inline ::std::string* release_miaoshu();
  inline void set_allocated_miaoshu(::std::string* miaoshu);

  // optional int64 jiangLi = 6;
  inline bool has_jiangli() const;
  inline void clear_jiangli();
  static const int kJiangLiFieldNumber = 6;
  inline ::google::protobuf::int64 jiangli() const;
  inline void set_jiangli(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_leixiao)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_xiaofei();
  inline void clear_has_xiaofei();
  inline void set_has_remarkid();
  inline void clear_has_remarkid();
  inline void set_has_miaoshu();
  inline void clear_has_miaoshu();
  inline void set_has_jiangli();
  inline void clear_has_jiangli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 xiaofei_;
  ::google::protobuf::int32 remarkid_;
  ::std::string* miaoshu_;
  ::google::protobuf::int64 jiangli_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_leixiao* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_leixiao : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_leixiao();
  virtual ~Sheet_festivalmuban_leixiao();

  Sheet_festivalmuban_leixiao(const Sheet_festivalmuban_leixiao& from);

  inline Sheet_festivalmuban_leixiao& operator=(const Sheet_festivalmuban_leixiao& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_leixiao& default_instance();

  void Swap(Sheet_festivalmuban_leixiao* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_leixiao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_leixiao& from);
  void MergeFrom(const Sheet_festivalmuban_leixiao& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_leixiao festivalmuban_leixiao_List = 1;
  inline int festivalmuban_leixiao_list_size() const;
  inline void clear_festivalmuban_leixiao_list();
  static const int kFestivalmubanLeixiaoListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_leixiao& festivalmuban_leixiao_list(int index) const;
  inline ::proto_ff::festivalmuban_leixiao* mutable_festivalmuban_leixiao_list(int index);
  inline ::proto_ff::festivalmuban_leixiao* add_festivalmuban_leixiao_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leixiao >&
      festivalmuban_leixiao_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leixiao >*
      mutable_festivalmuban_leixiao_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_leixiao)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leixiao > festivalmuban_leixiao_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_leixiao* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_shouchong : public ::google::protobuf::Message {
 public:
  festivalmuban_shouchong();
  virtual ~festivalmuban_shouchong();

  festivalmuban_shouchong(const festivalmuban_shouchong& from);

  inline festivalmuban_shouchong& operator=(const festivalmuban_shouchong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_shouchong& default_instance();

  void Swap(festivalmuban_shouchong* other);

  // implements Message ----------------------------------------------

  festivalmuban_shouchong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_shouchong& from);
  void MergeFrom(const festivalmuban_shouchong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 jiangLi = 2;
  inline bool has_jiangli() const;
  inline void clear_jiangli();
  static const int kJiangLiFieldNumber = 2;
  inline ::google::protobuf::int64 jiangli() const;
  inline void set_jiangli(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_shouchong)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_jiangli();
  inline void clear_has_jiangli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jiangli_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_shouchong* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_shouchong : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_shouchong();
  virtual ~Sheet_festivalmuban_shouchong();

  Sheet_festivalmuban_shouchong(const Sheet_festivalmuban_shouchong& from);

  inline Sheet_festivalmuban_shouchong& operator=(const Sheet_festivalmuban_shouchong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_shouchong& default_instance();

  void Swap(Sheet_festivalmuban_shouchong* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_shouchong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_shouchong& from);
  void MergeFrom(const Sheet_festivalmuban_shouchong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_shouchong festivalmuban_shouchong_List = 1;
  inline int festivalmuban_shouchong_list_size() const;
  inline void clear_festivalmuban_shouchong_list();
  static const int kFestivalmubanShouchongListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_shouchong& festivalmuban_shouchong_list(int index) const;
  inline ::proto_ff::festivalmuban_shouchong* mutable_festivalmuban_shouchong_list(int index);
  inline ::proto_ff::festivalmuban_shouchong* add_festivalmuban_shouchong_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shouchong >&
      festivalmuban_shouchong_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shouchong >*
      mutable_festivalmuban_shouchong_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_shouchong)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shouchong > festivalmuban_shouchong_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_shouchong* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_yanhua : public ::google::protobuf::Message {
 public:
  festivalmuban_yanhua();
  virtual ~festivalmuban_yanhua();

  festivalmuban_yanhua(const festivalmuban_yanhua& from);

  inline festivalmuban_yanhua& operator=(const festivalmuban_yanhua& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_yanhua& default_instance();

  void Swap(festivalmuban_yanhua* other);

  // implements Message ----------------------------------------------

  festivalmuban_yanhua* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_yanhua& from);
  void MergeFrom(const festivalmuban_yanhua& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 order = 6;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 6;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional int32 probability = 7;
  inline bool has_probability() const;
  inline void clear_probability();
  static const int kProbabilityFieldNumber = 7;
  inline ::google::protobuf::int32 probability() const;
  inline void set_probability(::google::protobuf::int32 value);

  // optional int64 relation = 8;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 8;
  inline ::google::protobuf::int64 relation() const;
  inline void set_relation(::google::protobuf::int64 value);

  // optional int64 modelid = 9;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelidFieldNumber = 9;
  inline ::google::protobuf::int64 modelid() const;
  inline void set_modelid(::google::protobuf::int64 value);

  // optional int32 modeltype = 10;
  inline bool has_modeltype() const;
  inline void clear_modeltype();
  static const int kModeltypeFieldNumber = 10;
  inline ::google::protobuf::int32 modeltype() const;
  inline void set_modeltype(::google::protobuf::int32 value);

  // optional string scale = 11;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 11;
  inline const ::std::string& scale() const;
  inline void set_scale(const ::std::string& value);
  inline void set_scale(const char* value);
  inline void set_scale(const char* value, size_t size);
  inline ::std::string* mutable_scale();
  inline ::std::string* release_scale();
  inline void set_allocated_scale(::std::string* scale);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_yanhua)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_probability();
  inline void clear_has_probability();
  inline void set_has_relation();
  inline void clear_has_relation();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_modeltype();
  inline void clear_has_modeltype();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 probability_;
  ::google::protobuf::int64 relation_;
  ::google::protobuf::int64 modelid_;
  ::std::string* scale_;
  ::google::protobuf::int32 modeltype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_yanhua* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_yanhua : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_yanhua();
  virtual ~Sheet_festivalmuban_yanhua();

  Sheet_festivalmuban_yanhua(const Sheet_festivalmuban_yanhua& from);

  inline Sheet_festivalmuban_yanhua& operator=(const Sheet_festivalmuban_yanhua& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_yanhua& default_instance();

  void Swap(Sheet_festivalmuban_yanhua* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_yanhua* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_yanhua& from);
  void MergeFrom(const Sheet_festivalmuban_yanhua& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_yanhua festivalmuban_yanhua_List = 1;
  inline int festivalmuban_yanhua_list_size() const;
  inline void clear_festivalmuban_yanhua_list();
  static const int kFestivalmubanYanhuaListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_yanhua& festivalmuban_yanhua_list(int index) const;
  inline ::proto_ff::festivalmuban_yanhua* mutable_festivalmuban_yanhua_list(int index);
  inline ::proto_ff::festivalmuban_yanhua* add_festivalmuban_yanhua_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_yanhua >&
      festivalmuban_yanhua_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_yanhua >*
      mutable_festivalmuban_yanhua_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_yanhua)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_yanhua > festivalmuban_yanhua_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_yanhua* default_instance_;
};
// -------------------------------------------------------------------

class festivalyanhuaConstant : public ::google::protobuf::Message {
 public:
  festivalyanhuaConstant();
  virtual ~festivalyanhuaConstant();

  festivalyanhuaConstant(const festivalyanhuaConstant& from);

  inline festivalyanhuaConstant& operator=(const festivalyanhuaConstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalyanhuaConstant& default_instance();

  void Swap(festivalyanhuaConstant* other);

  // implements Message ----------------------------------------------

  festivalyanhuaConstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalyanhuaConstant& from);
  void MergeFrom(const festivalyanhuaConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 costItem = 2;
  inline bool has_costitem() const;
  inline void clear_costitem();
  static const int kCostItemFieldNumber = 2;
  inline ::google::protobuf::int64 costitem() const;
  inline void set_costitem(::google::protobuf::int64 value);

  // optional int32 rewardPool = 3;
  inline bool has_rewardpool() const;
  inline void clear_rewardpool();
  static const int kRewardPoolFieldNumber = 3;
  inline ::google::protobuf::int32 rewardpool() const;
  inline void set_rewardpool(::google::protobuf::int32 value);

  // optional int32 coinTye = 4;
  inline bool has_cointye() const;
  inline void clear_cointye();
  static const int kCoinTyeFieldNumber = 4;
  inline ::google::protobuf::int32 cointye() const;
  inline void set_cointye(::google::protobuf::int32 value);

  // optional int32 number = 5;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 5;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalyanhuaConstant)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_costitem();
  inline void clear_has_costitem();
  inline void set_has_rewardpool();
  inline void clear_has_rewardpool();
  inline void set_has_cointye();
  inline void clear_has_cointye();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 costitem_;
  ::google::protobuf::int32 rewardpool_;
  ::google::protobuf::int32 cointye_;
  ::google::protobuf::int32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalyanhuaConstant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalyanhuaConstant : public ::google::protobuf::Message {
 public:
  Sheet_festivalyanhuaConstant();
  virtual ~Sheet_festivalyanhuaConstant();

  Sheet_festivalyanhuaConstant(const Sheet_festivalyanhuaConstant& from);

  inline Sheet_festivalyanhuaConstant& operator=(const Sheet_festivalyanhuaConstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalyanhuaConstant& default_instance();

  void Swap(Sheet_festivalyanhuaConstant* other);

  // implements Message ----------------------------------------------

  Sheet_festivalyanhuaConstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalyanhuaConstant& from);
  void MergeFrom(const Sheet_festivalyanhuaConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalyanhuaConstant festivalyanhuaConstant_List = 1;
  inline int festivalyanhuaconstant_list_size() const;
  inline void clear_festivalyanhuaconstant_list();
  static const int kFestivalyanhuaConstantListFieldNumber = 1;
  inline const ::proto_ff::festivalyanhuaConstant& festivalyanhuaconstant_list(int index) const;
  inline ::proto_ff::festivalyanhuaConstant* mutable_festivalyanhuaconstant_list(int index);
  inline ::proto_ff::festivalyanhuaConstant* add_festivalyanhuaconstant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalyanhuaConstant >&
      festivalyanhuaconstant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalyanhuaConstant >*
      mutable_festivalyanhuaconstant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalyanhuaConstant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalyanhuaConstant > festivalyanhuaconstant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalyanhuaConstant* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_shop : public ::google::protobuf::Message {
 public:
  festivalmuban_shop();
  virtual ~festivalmuban_shop();

  festivalmuban_shop(const festivalmuban_shop& from);

  inline festivalmuban_shop& operator=(const festivalmuban_shop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_shop& default_instance();

  void Swap(festivalmuban_shop* other);

  // implements Message ----------------------------------------------

  festivalmuban_shop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_shop& from);
  void MergeFrom(const festivalmuban_shop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 prof = 3;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 3;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 priceA = 4;
  inline bool has_pricea() const;
  inline void clear_pricea();
  static const int kPriceAFieldNumber = 4;
  inline ::google::protobuf::int32 pricea() const;
  inline void set_pricea(::google::protobuf::int32 value);

  // optional int32 priceB = 5;
  inline bool has_priceb() const;
  inline void clear_priceb();
  static const int kPriceBFieldNumber = 5;
  inline ::google::protobuf::int32 priceb() const;
  inline void set_priceb(::google::protobuf::int32 value);

  // optional int32 currency = 6;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 6;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // optional int32 discount = 7;
  inline bool has_discount() const;
  inline void clear_discount();
  static const int kDiscountFieldNumber = 7;
  inline ::google::protobuf::int32 discount() const;
  inline void set_discount(::google::protobuf::int32 value);

  // optional int32 quantity = 8;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 8;
  inline ::google::protobuf::int32 quantity() const;
  inline void set_quantity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_shop)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_pricea();
  inline void clear_has_pricea();
  inline void set_has_priceb();
  inline void clear_has_priceb();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_discount();
  inline void clear_has_discount();
  inline void set_has_quantity();
  inline void clear_has_quantity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 pricea_;
  ::google::protobuf::int32 priceb_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int32 discount_;
  ::google::protobuf::int32 quantity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_shop* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_shop : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_shop();
  virtual ~Sheet_festivalmuban_shop();

  Sheet_festivalmuban_shop(const Sheet_festivalmuban_shop& from);

  inline Sheet_festivalmuban_shop& operator=(const Sheet_festivalmuban_shop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_shop& default_instance();

  void Swap(Sheet_festivalmuban_shop* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_shop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_shop& from);
  void MergeFrom(const Sheet_festivalmuban_shop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_shop festivalmuban_shop_List = 1;
  inline int festivalmuban_shop_list_size() const;
  inline void clear_festivalmuban_shop_list();
  static const int kFestivalmubanShopListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_shop& festivalmuban_shop_list(int index) const;
  inline ::proto_ff::festivalmuban_shop* mutable_festivalmuban_shop_list(int index);
  inline ::proto_ff::festivalmuban_shop* add_festivalmuban_shop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shop >&
      festivalmuban_shop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shop >*
      mutable_festivalmuban_shop_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_shop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shop > festivalmuban_shop_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_shop* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_czjb : public ::google::protobuf::Message {
 public:
  festivalmuban_czjb();
  virtual ~festivalmuban_czjb();

  festivalmuban_czjb(const festivalmuban_czjb& from);

  inline festivalmuban_czjb& operator=(const festivalmuban_czjb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_czjb& default_instance();

  void Swap(festivalmuban_czjb* other);

  // implements Message ----------------------------------------------

  festivalmuban_czjb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_czjb& from);
  void MergeFrom(const festivalmuban_czjb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string RechargePoint = 2;
  inline bool has_rechargepoint() const;
  inline void clear_rechargepoint();
  static const int kRechargePointFieldNumber = 2;
  inline const ::std::string& rechargepoint() const;
  inline void set_rechargepoint(const ::std::string& value);
  inline void set_rechargepoint(const char* value);
  inline void set_rechargepoint(const char* value, size_t size);
  inline ::std::string* mutable_rechargepoint();
  inline ::std::string* release_rechargepoint();
  inline void set_allocated_rechargepoint(::std::string* rechargepoint);

  // optional int32 Perc = 3;
  inline bool has_perc() const;
  inline void clear_perc();
  static const int kPercFieldNumber = 3;
  inline ::google::protobuf::int32 perc() const;
  inline void set_perc(::google::protobuf::int32 value);

  // optional int32 fristpresent = 4;
  inline bool has_fristpresent() const;
  inline void clear_fristpresent();
  static const int kFristpresentFieldNumber = 4;
  inline ::google::protobuf::int32 fristpresent() const;
  inline void set_fristpresent(::google::protobuf::int32 value);

  // optional int32 presenttype = 5;
  inline bool has_presenttype() const;
  inline void clear_presenttype();
  static const int kPresenttypeFieldNumber = 5;
  inline ::google::protobuf::int32 presenttype() const;
  inline void set_presenttype(::google::protobuf::int32 value);

  // optional int32 Point = 6;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 6;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_czjb)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rechargepoint();
  inline void clear_has_rechargepoint();
  inline void set_has_perc();
  inline void clear_has_perc();
  inline void set_has_fristpresent();
  inline void clear_has_fristpresent();
  inline void set_has_presenttype();
  inline void clear_has_presenttype();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rechargepoint_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 perc_;
  ::google::protobuf::int32 fristpresent_;
  ::google::protobuf::int32 presenttype_;
  ::google::protobuf::int32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_czjb* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_czjb : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_czjb();
  virtual ~Sheet_festivalmuban_czjb();

  Sheet_festivalmuban_czjb(const Sheet_festivalmuban_czjb& from);

  inline Sheet_festivalmuban_czjb& operator=(const Sheet_festivalmuban_czjb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_czjb& default_instance();

  void Swap(Sheet_festivalmuban_czjb* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_czjb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_czjb& from);
  void MergeFrom(const Sheet_festivalmuban_czjb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_czjb festivalmuban_czjb_List = 1;
  inline int festivalmuban_czjb_list_size() const;
  inline void clear_festivalmuban_czjb_list();
  static const int kFestivalmubanCzjbListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_czjb& festivalmuban_czjb_list(int index) const;
  inline ::proto_ff::festivalmuban_czjb* mutable_festivalmuban_czjb_list(int index);
  inline ::proto_ff::festivalmuban_czjb* add_festivalmuban_czjb_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_czjb >&
      festivalmuban_czjb_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_czjb >*
      mutable_festivalmuban_czjb_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_czjb)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_czjb > festivalmuban_czjb_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_czjb* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_scsb : public ::google::protobuf::Message {
 public:
  festivalmuban_scsb();
  virtual ~festivalmuban_scsb();

  festivalmuban_scsb(const festivalmuban_scsb& from);

  inline festivalmuban_scsb& operator=(const festivalmuban_scsb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_scsb& default_instance();

  void Swap(festivalmuban_scsb* other);

  // implements Message ----------------------------------------------

  festivalmuban_scsb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_scsb& from);
  void MergeFrom(const festivalmuban_scsb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string RechargePoint = 2;
  inline bool has_rechargepoint() const;
  inline void clear_rechargepoint();
  static const int kRechargePointFieldNumber = 2;
  inline const ::std::string& rechargepoint() const;
  inline void set_rechargepoint(const ::std::string& value);
  inline void set_rechargepoint(const char* value);
  inline void set_rechargepoint(const char* value, size_t size);
  inline ::std::string* mutable_rechargepoint();
  inline ::std::string* release_rechargepoint();
  inline void set_allocated_rechargepoint(::std::string* rechargepoint);

  // optional int32 fristpresent = 3;
  inline bool has_fristpresent() const;
  inline void clear_fristpresent();
  static const int kFristpresentFieldNumber = 3;
  inline ::google::protobuf::int32 fristpresent() const;
  inline void set_fristpresent(::google::protobuf::int32 value);

  // optional int32 presenttype = 4;
  inline bool has_presenttype() const;
  inline void clear_presenttype();
  static const int kPresenttypeFieldNumber = 4;
  inline ::google::protobuf::int32 presenttype() const;
  inline void set_presenttype(::google::protobuf::int32 value);

  // optional int32 Point = 5;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 5;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_scsb)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rechargepoint();
  inline void clear_has_rechargepoint();
  inline void set_has_fristpresent();
  inline void clear_has_fristpresent();
  inline void set_has_presenttype();
  inline void clear_has_presenttype();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rechargepoint_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fristpresent_;
  ::google::protobuf::int32 presenttype_;
  ::google::protobuf::int32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_scsb* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_scsb : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_scsb();
  virtual ~Sheet_festivalmuban_scsb();

  Sheet_festivalmuban_scsb(const Sheet_festivalmuban_scsb& from);

  inline Sheet_festivalmuban_scsb& operator=(const Sheet_festivalmuban_scsb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_scsb& default_instance();

  void Swap(Sheet_festivalmuban_scsb* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_scsb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_scsb& from);
  void MergeFrom(const Sheet_festivalmuban_scsb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_scsb festivalmuban_scsb_List = 1;
  inline int festivalmuban_scsb_list_size() const;
  inline void clear_festivalmuban_scsb_list();
  static const int kFestivalmubanScsbListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_scsb& festivalmuban_scsb_list(int index) const;
  inline ::proto_ff::festivalmuban_scsb* mutable_festivalmuban_scsb_list(int index);
  inline ::proto_ff::festivalmuban_scsb* add_festivalmuban_scsb_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_scsb >&
      festivalmuban_scsb_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_scsb >*
      mutable_festivalmuban_scsb_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_scsb)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_scsb > festivalmuban_scsb_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_scsb* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_eggs : public ::google::protobuf::Message {
 public:
  festivalmuban_eggs();
  virtual ~festivalmuban_eggs();

  festivalmuban_eggs(const festivalmuban_eggs& from);

  inline festivalmuban_eggs& operator=(const festivalmuban_eggs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_eggs& default_instance();

  void Swap(festivalmuban_eggs* other);

  // implements Message ----------------------------------------------

  festivalmuban_eggs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_eggs& from);
  void MergeFrom(const festivalmuban_eggs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 order = 6;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 6;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // optional int32 isnote = 7;
  inline bool has_isnote() const;
  inline void clear_isnote();
  static const int kIsnoteFieldNumber = 7;
  inline ::google::protobuf::int32 isnote() const;
  inline void set_isnote(::google::protobuf::int32 value);

  // optional int32 probability = 8;
  inline bool has_probability() const;
  inline void clear_probability();
  static const int kProbabilityFieldNumber = 8;
  inline ::google::protobuf::int32 probability() const;
  inline void set_probability(::google::protobuf::int32 value);

  // optional int64 relation = 9;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 9;
  inline ::google::protobuf::int64 relation() const;
  inline void set_relation(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_eggs)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_isnote();
  inline void clear_has_isnote();
  inline void set_has_probability();
  inline void clear_has_probability();
  inline void set_has_relation();
  inline void clear_has_relation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 isnote_;
  ::google::protobuf::int64 relation_;
  ::google::protobuf::int32 probability_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_eggs* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_eggs : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_eggs();
  virtual ~Sheet_festivalmuban_eggs();

  Sheet_festivalmuban_eggs(const Sheet_festivalmuban_eggs& from);

  inline Sheet_festivalmuban_eggs& operator=(const Sheet_festivalmuban_eggs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_eggs& default_instance();

  void Swap(Sheet_festivalmuban_eggs* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_eggs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_eggs& from);
  void MergeFrom(const Sheet_festivalmuban_eggs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_eggs festivalmuban_eggs_List = 1;
  inline int festivalmuban_eggs_list_size() const;
  inline void clear_festivalmuban_eggs_list();
  static const int kFestivalmubanEggsListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_eggs& festivalmuban_eggs_list(int index) const;
  inline ::proto_ff::festivalmuban_eggs* mutable_festivalmuban_eggs_list(int index);
  inline ::proto_ff::festivalmuban_eggs* add_festivalmuban_eggs_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_eggs >&
      festivalmuban_eggs_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_eggs >*
      mutable_festivalmuban_eggs_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_eggs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_eggs > festivalmuban_eggs_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_eggs* default_instance_;
};
// -------------------------------------------------------------------

class festivaleggConstant : public ::google::protobuf::Message {
 public:
  festivaleggConstant();
  virtual ~festivaleggConstant();

  festivaleggConstant(const festivaleggConstant& from);

  inline festivaleggConstant& operator=(const festivaleggConstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivaleggConstant& default_instance();

  void Swap(festivaleggConstant* other);

  // implements Message ----------------------------------------------

  festivaleggConstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivaleggConstant& from);
  void MergeFrom(const festivaleggConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string exReward = 2;
  inline bool has_exreward() const;
  inline void clear_exreward();
  static const int kExRewardFieldNumber = 2;
  inline const ::std::string& exreward() const;
  inline void set_exreward(const ::std::string& value);
  inline void set_exreward(const char* value);
  inline void set_exreward(const char* value, size_t size);
  inline ::std::string* mutable_exreward();
  inline ::std::string* release_exreward();
  inline void set_allocated_exreward(::std::string* exreward);

  // optional int64 costItem = 3;
  inline bool has_costitem() const;
  inline void clear_costitem();
  static const int kCostItemFieldNumber = 3;
  inline ::google::protobuf::int64 costitem() const;
  inline void set_costitem(::google::protobuf::int64 value);

  // optional int32 freeTime = 4;
  inline bool has_freetime() const;
  inline void clear_freetime();
  static const int kFreeTimeFieldNumber = 4;
  inline ::google::protobuf::int32 freetime() const;
  inline void set_freetime(::google::protobuf::int32 value);

  // optional string poolChange = 5;
  inline bool has_poolchange() const;
  inline void clear_poolchange();
  static const int kPoolChangeFieldNumber = 5;
  inline const ::std::string& poolchange() const;
  inline void set_poolchange(const ::std::string& value);
  inline void set_poolchange(const char* value);
  inline void set_poolchange(const char* value, size_t size);
  inline ::std::string* mutable_poolchange();
  inline ::std::string* release_poolchange();
  inline void set_allocated_poolchange(::std::string* poolchange);

  // optional int32 specialRate = 6;
  inline bool has_specialrate() const;
  inline void clear_specialrate();
  static const int kSpecialRateFieldNumber = 6;
  inline ::google::protobuf::int32 specialrate() const;
  inline void set_specialrate(::google::protobuf::int32 value);

  // optional int32 specialAddRate = 7;
  inline bool has_specialaddrate() const;
  inline void clear_specialaddrate();
  static const int kSpecialAddRateFieldNumber = 7;
  inline ::google::protobuf::int32 specialaddrate() const;
  inline void set_specialaddrate(::google::protobuf::int32 value);

  // optional string flashCost = 8;
  inline bool has_flashcost() const;
  inline void clear_flashcost();
  static const int kFlashCostFieldNumber = 8;
  inline const ::std::string& flashcost() const;
  inline void set_flashcost(const ::std::string& value);
  inline void set_flashcost(const char* value);
  inline void set_flashcost(const char* value, size_t size);
  inline ::std::string* mutable_flashcost();
  inline ::std::string* release_flashcost();
  inline void set_allocated_flashcost(::std::string* flashcost);

  // optional int32 limit = 9;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 9;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // optional int32 rewardPool = 10;
  inline bool has_rewardpool() const;
  inline void clear_rewardpool();
  static const int kRewardPoolFieldNumber = 10;
  inline ::google::protobuf::int32 rewardpool() const;
  inline void set_rewardpool(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivaleggConstant)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exreward();
  inline void clear_has_exreward();
  inline void set_has_costitem();
  inline void clear_has_costitem();
  inline void set_has_freetime();
  inline void clear_has_freetime();
  inline void set_has_poolchange();
  inline void clear_has_poolchange();
  inline void set_has_specialrate();
  inline void clear_has_specialrate();
  inline void set_has_specialaddrate();
  inline void clear_has_specialaddrate();
  inline void set_has_flashcost();
  inline void clear_has_flashcost();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_rewardpool();
  inline void clear_has_rewardpool();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* exreward_;
  ::google::protobuf::int64 costitem_;
  ::std::string* poolchange_;
  ::google::protobuf::int32 freetime_;
  ::google::protobuf::int32 specialrate_;
  ::std::string* flashcost_;
  ::google::protobuf::int32 specialaddrate_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 rewardpool_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivaleggConstant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivaleggConstant : public ::google::protobuf::Message {
 public:
  Sheet_festivaleggConstant();
  virtual ~Sheet_festivaleggConstant();

  Sheet_festivaleggConstant(const Sheet_festivaleggConstant& from);

  inline Sheet_festivaleggConstant& operator=(const Sheet_festivaleggConstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivaleggConstant& default_instance();

  void Swap(Sheet_festivaleggConstant* other);

  // implements Message ----------------------------------------------

  Sheet_festivaleggConstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivaleggConstant& from);
  void MergeFrom(const Sheet_festivaleggConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivaleggConstant festivaleggConstant_List = 1;
  inline int festivaleggconstant_list_size() const;
  inline void clear_festivaleggconstant_list();
  static const int kFestivaleggConstantListFieldNumber = 1;
  inline const ::proto_ff::festivaleggConstant& festivaleggconstant_list(int index) const;
  inline ::proto_ff::festivaleggConstant* mutable_festivaleggconstant_list(int index);
  inline ::proto_ff::festivaleggConstant* add_festivaleggconstant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaleggConstant >&
      festivaleggconstant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaleggConstant >*
      mutable_festivaleggconstant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivaleggConstant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaleggConstant > festivaleggconstant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivaleggConstant* default_instance_;
};
// -------------------------------------------------------------------

class festivalconstant : public ::google::protobuf::Message {
 public:
  festivalconstant();
  virtual ~festivalconstant();

  festivalconstant(const festivalconstant& from);

  inline festivalconstant& operator=(const festivalconstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalconstant& default_instance();

  void Swap(festivalconstant* other);

  // implements Message ----------------------------------------------

  festivalconstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalconstant& from);
  void MergeFrom(const festivalconstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 constantid = 1;
  inline bool has_constantid() const;
  inline void clear_constantid();
  static const int kConstantidFieldNumber = 1;
  inline ::google::protobuf::int64 constantid() const;
  inline void set_constantid(::google::protobuf::int64 value);

  // optional int64 constantdata = 2;
  inline bool has_constantdata() const;
  inline void clear_constantdata();
  static const int kConstantdataFieldNumber = 2;
  inline ::google::protobuf::int64 constantdata() const;
  inline void set_constantdata(::google::protobuf::int64 value);

  // optional string stringdata = 3;
  inline bool has_stringdata() const;
  inline void clear_stringdata();
  static const int kStringdataFieldNumber = 3;
  inline const ::std::string& stringdata() const;
  inline void set_stringdata(const ::std::string& value);
  inline void set_stringdata(const char* value);
  inline void set_stringdata(const char* value, size_t size);
  inline ::std::string* mutable_stringdata();
  inline ::std::string* release_stringdata();
  inline void set_allocated_stringdata(::std::string* stringdata);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalconstant)
 private:
  inline void set_has_constantid();
  inline void clear_has_constantid();
  inline void set_has_constantdata();
  inline void clear_has_constantdata();
  inline void set_has_stringdata();
  inline void clear_has_stringdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 constantid_;
  ::google::protobuf::int64 constantdata_;
  ::std::string* stringdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalconstant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalconstant : public ::google::protobuf::Message {
 public:
  Sheet_festivalconstant();
  virtual ~Sheet_festivalconstant();

  Sheet_festivalconstant(const Sheet_festivalconstant& from);

  inline Sheet_festivalconstant& operator=(const Sheet_festivalconstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalconstant& default_instance();

  void Swap(Sheet_festivalconstant* other);

  // implements Message ----------------------------------------------

  Sheet_festivalconstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalconstant& from);
  void MergeFrom(const Sheet_festivalconstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalconstant festivalconstant_List = 1;
  inline int festivalconstant_list_size() const;
  inline void clear_festivalconstant_list();
  static const int kFestivalconstantListFieldNumber = 1;
  inline const ::proto_ff::festivalconstant& festivalconstant_list(int index) const;
  inline ::proto_ff::festivalconstant* mutable_festivalconstant_list(int index);
  inline ::proto_ff::festivalconstant* add_festivalconstant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalconstant >&
      festivalconstant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalconstant >*
      mutable_festivalconstant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalconstant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalconstant > festivalconstant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalconstant* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_shousha : public ::google::protobuf::Message {
 public:
  festivalmuban_shousha();
  virtual ~festivalmuban_shousha();

  festivalmuban_shousha(const festivalmuban_shousha& from);

  inline festivalmuban_shousha& operator=(const festivalmuban_shousha& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_shousha& default_instance();

  void Swap(festivalmuban_shousha* other);

  // implements Message ----------------------------------------------

  festivalmuban_shousha* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_shousha& from);
  void MergeFrom(const festivalmuban_shousha& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 bossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  inline ::google::protobuf::int64 bossid() const;
  inline void set_bossid(::google::protobuf::int64 value);

  // optional int64 boxId = 3;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 3;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // optional int64 linkid = 4;
  inline bool has_linkid() const;
  inline void clear_linkid();
  static const int kLinkidFieldNumber = 4;
  inline ::google::protobuf::int64 linkid() const;
  inline void set_linkid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_shousha)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_linkid();
  inline void clear_has_linkid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bossid_;
  ::google::protobuf::int64 boxid_;
  ::google::protobuf::int64 linkid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_shousha* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_shousha : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_shousha();
  virtual ~Sheet_festivalmuban_shousha();

  Sheet_festivalmuban_shousha(const Sheet_festivalmuban_shousha& from);

  inline Sheet_festivalmuban_shousha& operator=(const Sheet_festivalmuban_shousha& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_shousha& default_instance();

  void Swap(Sheet_festivalmuban_shousha* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_shousha* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_shousha& from);
  void MergeFrom(const Sheet_festivalmuban_shousha& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_shousha festivalmuban_shousha_List = 1;
  inline int festivalmuban_shousha_list_size() const;
  inline void clear_festivalmuban_shousha_list();
  static const int kFestivalmubanShoushaListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_shousha& festivalmuban_shousha_list(int index) const;
  inline ::proto_ff::festivalmuban_shousha* mutable_festivalmuban_shousha_list(int index);
  inline ::proto_ff::festivalmuban_shousha* add_festivalmuban_shousha_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shousha >&
      festivalmuban_shousha_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shousha >*
      mutable_festivalmuban_shousha_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_shousha)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shousha > festivalmuban_shousha_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_shousha* default_instance_;
};
// -------------------------------------------------------------------

class festivalmuban_huoyue : public ::google::protobuf::Message {
 public:
  festivalmuban_huoyue();
  virtual ~festivalmuban_huoyue();

  festivalmuban_huoyue(const festivalmuban_huoyue& from);

  inline festivalmuban_huoyue& operator=(const festivalmuban_huoyue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const festivalmuban_huoyue& default_instance();

  void Swap(festivalmuban_huoyue* other);

  // implements Message ----------------------------------------------

  festivalmuban_huoyue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const festivalmuban_huoyue& from);
  void MergeFrom(const festivalmuban_huoyue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 activity = 2;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 2;
  inline ::google::protobuf::int32 activity() const;
  inline void set_activity(::google::protobuf::int32 value);

  // optional string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional int64 boxId = 4;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 4;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.festivalmuban_huoyue)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 activity_;
  ::std::string* desc_;
  ::google::protobuf::int64 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static festivalmuban_huoyue* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_festivalmuban_huoyue : public ::google::protobuf::Message {
 public:
  Sheet_festivalmuban_huoyue();
  virtual ~Sheet_festivalmuban_huoyue();

  Sheet_festivalmuban_huoyue(const Sheet_festivalmuban_huoyue& from);

  inline Sheet_festivalmuban_huoyue& operator=(const Sheet_festivalmuban_huoyue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_festivalmuban_huoyue& default_instance();

  void Swap(Sheet_festivalmuban_huoyue* other);

  // implements Message ----------------------------------------------

  Sheet_festivalmuban_huoyue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_festivalmuban_huoyue& from);
  void MergeFrom(const Sheet_festivalmuban_huoyue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.festivalmuban_huoyue festivalmuban_huoyue_List = 1;
  inline int festivalmuban_huoyue_list_size() const;
  inline void clear_festivalmuban_huoyue_list();
  static const int kFestivalmubanHuoyueListFieldNumber = 1;
  inline const ::proto_ff::festivalmuban_huoyue& festivalmuban_huoyue_list(int index) const;
  inline ::proto_ff::festivalmuban_huoyue* mutable_festivalmuban_huoyue_list(int index);
  inline ::proto_ff::festivalmuban_huoyue* add_festivalmuban_huoyue_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_huoyue >&
      festivalmuban_huoyue_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_huoyue >*
      mutable_festivalmuban_huoyue_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_festivalmuban_huoyue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_huoyue > festivalmuban_huoyue_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_festival_2eproto();
  friend void protobuf_AssignDesc_festival_2eproto();
  friend void protobuf_ShutdownFile_festival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_festivalmuban_huoyue* default_instance_;
};
// ===================================================================


// ===================================================================

// festivalmuban_JFduihuan

// optional int32 tiaoJianId = 1;
inline bool festivalmuban_JFduihuan::has_tiaojianid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_JFduihuan::set_has_tiaojianid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_JFduihuan::clear_has_tiaojianid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_JFduihuan::clear_tiaojianid() {
  tiaojianid_ = 0;
  clear_has_tiaojianid();
}
inline ::google::protobuf::int32 festivalmuban_JFduihuan::tiaojianid() const {
  return tiaojianid_;
}
inline void festivalmuban_JFduihuan::set_tiaojianid(::google::protobuf::int32 value) {
  set_has_tiaojianid();
  tiaojianid_ = value;
}

// optional int64 prizeId = 2;
inline bool festivalmuban_JFduihuan::has_prizeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_JFduihuan::set_has_prizeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_JFduihuan::clear_has_prizeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_JFduihuan::clear_prizeid() {
  prizeid_ = GOOGLE_LONGLONG(0);
  clear_has_prizeid();
}
inline ::google::protobuf::int64 festivalmuban_JFduihuan::prizeid() const {
  return prizeid_;
}
inline void festivalmuban_JFduihuan::set_prizeid(::google::protobuf::int64 value) {
  set_has_prizeid();
  prizeid_ = value;
}

// optional int32 prof = 3;
inline bool festivalmuban_JFduihuan::has_prof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_JFduihuan::set_has_prof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_JFduihuan::clear_has_prof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_JFduihuan::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 festivalmuban_JFduihuan::prof() const {
  return prof_;
}
inline void festivalmuban_JFduihuan::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 prizeNum = 4;
inline bool festivalmuban_JFduihuan::has_prizenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_JFduihuan::set_has_prizenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_JFduihuan::clear_has_prizenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_JFduihuan::clear_prizenum() {
  prizenum_ = 0;
  clear_has_prizenum();
}
inline ::google::protobuf::int32 festivalmuban_JFduihuan::prizenum() const {
  return prizenum_;
}
inline void festivalmuban_JFduihuan::set_prizenum(::google::protobuf::int32 value) {
  set_has_prizenum();
  prizenum_ = value;
}

// optional int64 propId = 5;
inline bool festivalmuban_JFduihuan::has_propid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_JFduihuan::set_has_propid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_JFduihuan::clear_has_propid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_JFduihuan::clear_propid() {
  propid_ = GOOGLE_LONGLONG(0);
  clear_has_propid();
}
inline ::google::protobuf::int64 festivalmuban_JFduihuan::propid() const {
  return propid_;
}
inline void festivalmuban_JFduihuan::set_propid(::google::protobuf::int64 value) {
  set_has_propid();
  propid_ = value;
}

// optional int32 propNum = 6;
inline bool festivalmuban_JFduihuan::has_propnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_JFduihuan::set_has_propnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_JFduihuan::clear_has_propnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_JFduihuan::clear_propnum() {
  propnum_ = 0;
  clear_has_propnum();
}
inline ::google::protobuf::int32 festivalmuban_JFduihuan::propnum() const {
  return propnum_;
}
inline void festivalmuban_JFduihuan::set_propnum(::google::protobuf::int32 value) {
  set_has_propnum();
  propnum_ = value;
}

// optional int32 times = 7;
inline bool festivalmuban_JFduihuan::has_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_JFduihuan::set_has_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_JFduihuan::clear_has_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_JFduihuan::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 festivalmuban_JFduihuan::times() const {
  return times_;
}
inline void festivalmuban_JFduihuan::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_JFduihuan

// repeated .proto_ff.festivalmuban_JFduihuan festivalmuban_JFduihuan_List = 1;
inline int Sheet_festivalmuban_JFduihuan::festivalmuban_jfduihuan_list_size() const {
  return festivalmuban_jfduihuan_list_.size();
}
inline void Sheet_festivalmuban_JFduihuan::clear_festivalmuban_jfduihuan_list() {
  festivalmuban_jfduihuan_list_.Clear();
}
inline const ::proto_ff::festivalmuban_JFduihuan& Sheet_festivalmuban_JFduihuan::festivalmuban_jfduihuan_list(int index) const {
  return festivalmuban_jfduihuan_list_.Get(index);
}
inline ::proto_ff::festivalmuban_JFduihuan* Sheet_festivalmuban_JFduihuan::mutable_festivalmuban_jfduihuan_list(int index) {
  return festivalmuban_jfduihuan_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_JFduihuan* Sheet_festivalmuban_JFduihuan::add_festivalmuban_jfduihuan_list() {
  return festivalmuban_jfduihuan_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_JFduihuan >&
Sheet_festivalmuban_JFduihuan::festivalmuban_jfduihuan_list() const {
  return festivalmuban_jfduihuan_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_JFduihuan >*
Sheet_festivalmuban_JFduihuan::mutable_festivalmuban_jfduihuan_list() {
  return &festivalmuban_jfduihuan_list_;
}

// -------------------------------------------------------------------

// festivalmuban_dingzhi

// optional int32 id = 1;
inline bool festivalmuban_dingzhi::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_dingzhi::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_dingzhi::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_dingzhi::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_dingzhi::id() const {
  return id_;
}
inline void festivalmuban_dingzhi::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string des = 2;
inline bool festivalmuban_dingzhi::has_des() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_dingzhi::set_has_des() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_dingzhi::clear_has_des() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_dingzhi::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& festivalmuban_dingzhi::des() const {
  return *des_;
}
inline void festivalmuban_dingzhi::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void festivalmuban_dingzhi::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void festivalmuban_dingzhi::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_dingzhi::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* festivalmuban_dingzhi::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_dingzhi::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 mustBoxId = 3;
inline bool festivalmuban_dingzhi::has_mustboxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_dingzhi::set_has_mustboxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_dingzhi::clear_has_mustboxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_dingzhi::clear_mustboxid() {
  mustboxid_ = GOOGLE_LONGLONG(0);
  clear_has_mustboxid();
}
inline ::google::protobuf::int64 festivalmuban_dingzhi::mustboxid() const {
  return mustboxid_;
}
inline void festivalmuban_dingzhi::set_mustboxid(::google::protobuf::int64 value) {
  set_has_mustboxid();
  mustboxid_ = value;
}

// optional int32 currencyType = 4;
inline bool festivalmuban_dingzhi::has_currencytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_dingzhi::set_has_currencytype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_dingzhi::clear_has_currencytype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_dingzhi::clear_currencytype() {
  currencytype_ = 0;
  clear_has_currencytype();
}
inline ::google::protobuf::int32 festivalmuban_dingzhi::currencytype() const {
  return currencytype_;
}
inline void festivalmuban_dingzhi::set_currencytype(::google::protobuf::int32 value) {
  set_has_currencytype();
  currencytype_ = value;
}

// optional int32 price = 5;
inline bool festivalmuban_dingzhi::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_dingzhi::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_dingzhi::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_dingzhi::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 festivalmuban_dingzhi::price() const {
  return price_;
}
inline void festivalmuban_dingzhi::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 times = 6;
inline bool festivalmuban_dingzhi::has_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_dingzhi::set_has_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_dingzhi::clear_has_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_dingzhi::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 festivalmuban_dingzhi::times() const {
  return times_;
}
inline void festivalmuban_dingzhi::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// repeated int64 freeBoxId = 7;
inline int festivalmuban_dingzhi::freeboxid_size() const {
  return freeboxid_.size();
}
inline void festivalmuban_dingzhi::clear_freeboxid() {
  freeboxid_.Clear();
}
inline ::google::protobuf::int64 festivalmuban_dingzhi::freeboxid(int index) const {
  return freeboxid_.Get(index);
}
inline void festivalmuban_dingzhi::set_freeboxid(int index, ::google::protobuf::int64 value) {
  freeboxid_.Set(index, value);
}
inline void festivalmuban_dingzhi::add_freeboxid(::google::protobuf::int64 value) {
  freeboxid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
festivalmuban_dingzhi::freeboxid() const {
  return freeboxid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
festivalmuban_dingzhi::mutable_freeboxid() {
  return &freeboxid_;
}

// repeated int32 freeNum = 8;
inline int festivalmuban_dingzhi::freenum_size() const {
  return freenum_.size();
}
inline void festivalmuban_dingzhi::clear_freenum() {
  freenum_.Clear();
}
inline ::google::protobuf::int32 festivalmuban_dingzhi::freenum(int index) const {
  return freenum_.Get(index);
}
inline void festivalmuban_dingzhi::set_freenum(int index, ::google::protobuf::int32 value) {
  freenum_.Set(index, value);
}
inline void festivalmuban_dingzhi::add_freenum(::google::protobuf::int32 value) {
  freenum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
festivalmuban_dingzhi::freenum() const {
  return freenum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
festivalmuban_dingzhi::mutable_freenum() {
  return &freenum_;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_dingzhi

// repeated .proto_ff.festivalmuban_dingzhi festivalmuban_dingzhi_List = 1;
inline int Sheet_festivalmuban_dingzhi::festivalmuban_dingzhi_list_size() const {
  return festivalmuban_dingzhi_list_.size();
}
inline void Sheet_festivalmuban_dingzhi::clear_festivalmuban_dingzhi_list() {
  festivalmuban_dingzhi_list_.Clear();
}
inline const ::proto_ff::festivalmuban_dingzhi& Sheet_festivalmuban_dingzhi::festivalmuban_dingzhi_list(int index) const {
  return festivalmuban_dingzhi_list_.Get(index);
}
inline ::proto_ff::festivalmuban_dingzhi* Sheet_festivalmuban_dingzhi::mutable_festivalmuban_dingzhi_list(int index) {
  return festivalmuban_dingzhi_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_dingzhi* Sheet_festivalmuban_dingzhi::add_festivalmuban_dingzhi_list() {
  return festivalmuban_dingzhi_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_dingzhi >&
Sheet_festivalmuban_dingzhi::festivalmuban_dingzhi_list() const {
  return festivalmuban_dingzhi_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_dingzhi >*
Sheet_festivalmuban_dingzhi::mutable_festivalmuban_dingzhi_list() {
  return &festivalmuban_dingzhi_list_;
}

// -------------------------------------------------------------------

// festivalmuban_CZfanzuan

// optional int32 id = 1;
inline bool festivalmuban_CZfanzuan::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_CZfanzuan::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_CZfanzuan::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_CZfanzuan::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_CZfanzuan::id() const {
  return id_;
}
inline void festivalmuban_CZfanzuan::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 rechargeId = 2;
inline bool festivalmuban_CZfanzuan::has_rechargeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_CZfanzuan::set_has_rechargeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_CZfanzuan::clear_has_rechargeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_CZfanzuan::clear_rechargeid() {
  rechargeid_ = 0;
  clear_has_rechargeid();
}
inline ::google::protobuf::int32 festivalmuban_CZfanzuan::rechargeid() const {
  return rechargeid_;
}
inline void festivalmuban_CZfanzuan::set_rechargeid(::google::protobuf::int32 value) {
  set_has_rechargeid();
  rechargeid_ = value;
}

// optional int32 repayType = 3;
inline bool festivalmuban_CZfanzuan::has_repaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_CZfanzuan::set_has_repaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_CZfanzuan::clear_has_repaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_CZfanzuan::clear_repaytype() {
  repaytype_ = 0;
  clear_has_repaytype();
}
inline ::google::protobuf::int32 festivalmuban_CZfanzuan::repaytype() const {
  return repaytype_;
}
inline void festivalmuban_CZfanzuan::set_repaytype(::google::protobuf::int32 value) {
  set_has_repaytype();
  repaytype_ = value;
}

// optional int32 repayNum = 4;
inline bool festivalmuban_CZfanzuan::has_repaynum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_CZfanzuan::set_has_repaynum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_CZfanzuan::clear_has_repaynum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_CZfanzuan::clear_repaynum() {
  repaynum_ = 0;
  clear_has_repaynum();
}
inline ::google::protobuf::int32 festivalmuban_CZfanzuan::repaynum() const {
  return repaynum_;
}
inline void festivalmuban_CZfanzuan::set_repaynum(::google::protobuf::int32 value) {
  set_has_repaynum();
  repaynum_ = value;
}

// optional int32 timesLimit = 5;
inline bool festivalmuban_CZfanzuan::has_timeslimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_CZfanzuan::set_has_timeslimit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_CZfanzuan::clear_has_timeslimit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_CZfanzuan::clear_timeslimit() {
  timeslimit_ = 0;
  clear_has_timeslimit();
}
inline ::google::protobuf::int32 festivalmuban_CZfanzuan::timeslimit() const {
  return timeslimit_;
}
inline void festivalmuban_CZfanzuan::set_timeslimit(::google::protobuf::int32 value) {
  set_has_timeslimit();
  timeslimit_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_CZfanzuan

// repeated .proto_ff.festivalmuban_CZfanzuan festivalmuban_CZfanzuan_List = 1;
inline int Sheet_festivalmuban_CZfanzuan::festivalmuban_czfanzuan_list_size() const {
  return festivalmuban_czfanzuan_list_.size();
}
inline void Sheet_festivalmuban_CZfanzuan::clear_festivalmuban_czfanzuan_list() {
  festivalmuban_czfanzuan_list_.Clear();
}
inline const ::proto_ff::festivalmuban_CZfanzuan& Sheet_festivalmuban_CZfanzuan::festivalmuban_czfanzuan_list(int index) const {
  return festivalmuban_czfanzuan_list_.Get(index);
}
inline ::proto_ff::festivalmuban_CZfanzuan* Sheet_festivalmuban_CZfanzuan::mutable_festivalmuban_czfanzuan_list(int index) {
  return festivalmuban_czfanzuan_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_CZfanzuan* Sheet_festivalmuban_CZfanzuan::add_festivalmuban_czfanzuan_list() {
  return festivalmuban_czfanzuan_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_CZfanzuan >&
Sheet_festivalmuban_CZfanzuan::festivalmuban_czfanzuan_list() const {
  return festivalmuban_czfanzuan_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_CZfanzuan >*
Sheet_festivalmuban_CZfanzuan::mutable_festivalmuban_czfanzuan_list() {
  return &festivalmuban_czfanzuan_list_;
}

// -------------------------------------------------------------------

// festivalmuban_lianxuCZ

// optional int32 id = 1;
inline bool festivalmuban_lianxuCZ::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_lianxuCZ::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_lianxuCZ::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_lianxuCZ::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_lianxuCZ::id() const {
  return id_;
}
inline void festivalmuban_lianxuCZ::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Num = 2;
inline bool festivalmuban_lianxuCZ::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_lianxuCZ::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_lianxuCZ::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_lianxuCZ::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalmuban_lianxuCZ::num() const {
  return num_;
}
inline void festivalmuban_lianxuCZ::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 remarkId = 3;
inline bool festivalmuban_lianxuCZ::has_remarkid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_lianxuCZ::set_has_remarkid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_lianxuCZ::clear_has_remarkid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_lianxuCZ::clear_remarkid() {
  remarkid_ = 0;
  clear_has_remarkid();
}
inline ::google::protobuf::int32 festivalmuban_lianxuCZ::remarkid() const {
  return remarkid_;
}
inline void festivalmuban_lianxuCZ::set_remarkid(::google::protobuf::int32 value) {
  set_has_remarkid();
  remarkid_ = value;
}

// optional string miaoshu = 4;
inline bool festivalmuban_lianxuCZ::has_miaoshu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_lianxuCZ::set_has_miaoshu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_lianxuCZ::clear_has_miaoshu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_lianxuCZ::clear_miaoshu() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    miaoshu_->clear();
  }
  clear_has_miaoshu();
}
inline const ::std::string& festivalmuban_lianxuCZ::miaoshu() const {
  return *miaoshu_;
}
inline void festivalmuban_lianxuCZ::set_miaoshu(const ::std::string& value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_lianxuCZ::set_miaoshu(const char* value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_lianxuCZ::set_miaoshu(const char* value, size_t size) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_lianxuCZ::mutable_miaoshu() {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  return miaoshu_;
}
inline ::std::string* festivalmuban_lianxuCZ::release_miaoshu() {
  clear_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshu_;
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_lianxuCZ::set_allocated_miaoshu(::std::string* miaoshu) {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshu) {
    set_has_miaoshu();
    miaoshu_ = miaoshu;
  } else {
    clear_has_miaoshu();
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 jiangLi = 5;
inline bool festivalmuban_lianxuCZ::has_jiangli() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_lianxuCZ::set_has_jiangli() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_lianxuCZ::clear_has_jiangli() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_lianxuCZ::clear_jiangli() {
  jiangli_ = GOOGLE_LONGLONG(0);
  clear_has_jiangli();
}
inline ::google::protobuf::int64 festivalmuban_lianxuCZ::jiangli() const {
  return jiangli_;
}
inline void festivalmuban_lianxuCZ::set_jiangli(::google::protobuf::int64 value) {
  set_has_jiangli();
  jiangli_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_lianxuCZ

// repeated .proto_ff.festivalmuban_lianxuCZ festivalmuban_lianxuCZ_List = 1;
inline int Sheet_festivalmuban_lianxuCZ::festivalmuban_lianxucz_list_size() const {
  return festivalmuban_lianxucz_list_.size();
}
inline void Sheet_festivalmuban_lianxuCZ::clear_festivalmuban_lianxucz_list() {
  festivalmuban_lianxucz_list_.Clear();
}
inline const ::proto_ff::festivalmuban_lianxuCZ& Sheet_festivalmuban_lianxuCZ::festivalmuban_lianxucz_list(int index) const {
  return festivalmuban_lianxucz_list_.Get(index);
}
inline ::proto_ff::festivalmuban_lianxuCZ* Sheet_festivalmuban_lianxuCZ::mutable_festivalmuban_lianxucz_list(int index) {
  return festivalmuban_lianxucz_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_lianxuCZ* Sheet_festivalmuban_lianxuCZ::add_festivalmuban_lianxucz_list() {
  return festivalmuban_lianxucz_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_lianxuCZ >&
Sheet_festivalmuban_lianxuCZ::festivalmuban_lianxucz_list() const {
  return festivalmuban_lianxucz_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_lianxuCZ >*
Sheet_festivalmuban_lianxuCZ::mutable_festivalmuban_lianxucz_list() {
  return &festivalmuban_lianxucz_list_;
}

// -------------------------------------------------------------------

// festivalmuban_prerecharge

// optional int32 id = 1;
inline bool festivalmuban_prerecharge::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_prerecharge::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_prerecharge::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_prerecharge::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_prerecharge::id() const {
  return id_;
}
inline void festivalmuban_prerecharge::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 order = 2;
inline bool festivalmuban_prerecharge::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_prerecharge::set_has_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_prerecharge::clear_has_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_prerecharge::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 festivalmuban_prerecharge::order() const {
  return order_;
}
inline void festivalmuban_prerecharge::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional string des = 3;
inline bool festivalmuban_prerecharge::has_des() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_prerecharge::set_has_des() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_prerecharge::clear_has_des() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_prerecharge::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& festivalmuban_prerecharge::des() const {
  return *des_;
}
inline void festivalmuban_prerecharge::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void festivalmuban_prerecharge::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void festivalmuban_prerecharge::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_prerecharge::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* festivalmuban_prerecharge::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_prerecharge::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 boxid = 4;
inline bool festivalmuban_prerecharge::has_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_prerecharge::set_has_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_prerecharge::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_prerecharge::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 festivalmuban_prerecharge::boxid() const {
  return boxid_;
}
inline void festivalmuban_prerecharge::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int32 rechargeId = 5;
inline bool festivalmuban_prerecharge::has_rechargeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_prerecharge::set_has_rechargeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_prerecharge::clear_has_rechargeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_prerecharge::clear_rechargeid() {
  rechargeid_ = 0;
  clear_has_rechargeid();
}
inline ::google::protobuf::int32 festivalmuban_prerecharge::rechargeid() const {
  return rechargeid_;
}
inline void festivalmuban_prerecharge::set_rechargeid(::google::protobuf::int32 value) {
  set_has_rechargeid();
  rechargeid_ = value;
}

// optional int32 times = 6;
inline bool festivalmuban_prerecharge::has_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_prerecharge::set_has_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_prerecharge::clear_has_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_prerecharge::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 festivalmuban_prerecharge::times() const {
  return times_;
}
inline void festivalmuban_prerecharge::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_prerecharge

// repeated .proto_ff.festivalmuban_prerecharge festivalmuban_prerecharge_List = 1;
inline int Sheet_festivalmuban_prerecharge::festivalmuban_prerecharge_list_size() const {
  return festivalmuban_prerecharge_list_.size();
}
inline void Sheet_festivalmuban_prerecharge::clear_festivalmuban_prerecharge_list() {
  festivalmuban_prerecharge_list_.Clear();
}
inline const ::proto_ff::festivalmuban_prerecharge& Sheet_festivalmuban_prerecharge::festivalmuban_prerecharge_list(int index) const {
  return festivalmuban_prerecharge_list_.Get(index);
}
inline ::proto_ff::festivalmuban_prerecharge* Sheet_festivalmuban_prerecharge::mutable_festivalmuban_prerecharge_list(int index) {
  return festivalmuban_prerecharge_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_prerecharge* Sheet_festivalmuban_prerecharge::add_festivalmuban_prerecharge_list() {
  return festivalmuban_prerecharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_prerecharge >&
Sheet_festivalmuban_prerecharge::festivalmuban_prerecharge_list() const {
  return festivalmuban_prerecharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_prerecharge >*
Sheet_festivalmuban_prerecharge::mutable_festivalmuban_prerecharge_list() {
  return &festivalmuban_prerecharge_list_;
}

// -------------------------------------------------------------------

// festivalmuban_doubleGift

// optional int32 id = 1;
inline bool festivalmuban_doubleGift::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_doubleGift::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_doubleGift::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_doubleGift::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_doubleGift::id() const {
  return id_;
}
inline void festivalmuban_doubleGift::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 gear = 2;
inline bool festivalmuban_doubleGift::has_gear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_doubleGift::set_has_gear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_doubleGift::clear_has_gear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_doubleGift::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 festivalmuban_doubleGift::gear() const {
  return gear_;
}
inline void festivalmuban_doubleGift::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
}

// optional int64 boxId = 3;
inline bool festivalmuban_doubleGift::has_boxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_doubleGift::set_has_boxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_doubleGift::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_doubleGift::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 festivalmuban_doubleGift::boxid() const {
  return boxid_;
}
inline void festivalmuban_doubleGift::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int64 freeBox = 4;
inline bool festivalmuban_doubleGift::has_freebox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_doubleGift::set_has_freebox() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_doubleGift::clear_has_freebox() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_doubleGift::clear_freebox() {
  freebox_ = GOOGLE_LONGLONG(0);
  clear_has_freebox();
}
inline ::google::protobuf::int64 festivalmuban_doubleGift::freebox() const {
  return freebox_;
}
inline void festivalmuban_doubleGift::set_freebox(::google::protobuf::int64 value) {
  set_has_freebox();
  freebox_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_doubleGift

// repeated .proto_ff.festivalmuban_doubleGift festivalmuban_doubleGift_List = 1;
inline int Sheet_festivalmuban_doubleGift::festivalmuban_doublegift_list_size() const {
  return festivalmuban_doublegift_list_.size();
}
inline void Sheet_festivalmuban_doubleGift::clear_festivalmuban_doublegift_list() {
  festivalmuban_doublegift_list_.Clear();
}
inline const ::proto_ff::festivalmuban_doubleGift& Sheet_festivalmuban_doubleGift::festivalmuban_doublegift_list(int index) const {
  return festivalmuban_doublegift_list_.Get(index);
}
inline ::proto_ff::festivalmuban_doubleGift* Sheet_festivalmuban_doubleGift::mutable_festivalmuban_doublegift_list(int index) {
  return festivalmuban_doublegift_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_doubleGift* Sheet_festivalmuban_doubleGift::add_festivalmuban_doublegift_list() {
  return festivalmuban_doublegift_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_doubleGift >&
Sheet_festivalmuban_doubleGift::festivalmuban_doublegift_list() const {
  return festivalmuban_doublegift_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_doubleGift >*
Sheet_festivalmuban_doubleGift::mutable_festivalmuban_doublegift_list() {
  return &festivalmuban_doublegift_list_;
}

// -------------------------------------------------------------------

// festivalbigyanhuarecharge

// optional int32 num = 1;
inline bool festivalbigyanhuarecharge::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalbigyanhuarecharge::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalbigyanhuarecharge::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalbigyanhuarecharge::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalbigyanhuarecharge::num() const {
  return num_;
}
inline void festivalbigyanhuarecharge::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 recharge = 2;
inline bool festivalbigyanhuarecharge::has_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalbigyanhuarecharge::set_has_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalbigyanhuarecharge::clear_has_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalbigyanhuarecharge::clear_recharge() {
  recharge_ = 0;
  clear_has_recharge();
}
inline ::google::protobuf::int32 festivalbigyanhuarecharge::recharge() const {
  return recharge_;
}
inline void festivalbigyanhuarecharge::set_recharge(::google::protobuf::int32 value) {
  set_has_recharge();
  recharge_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalbigyanhuarecharge

// repeated .proto_ff.festivalbigyanhuarecharge festivalbigyanhuarecharge_List = 1;
inline int Sheet_festivalbigyanhuarecharge::festivalbigyanhuarecharge_list_size() const {
  return festivalbigyanhuarecharge_list_.size();
}
inline void Sheet_festivalbigyanhuarecharge::clear_festivalbigyanhuarecharge_list() {
  festivalbigyanhuarecharge_list_.Clear();
}
inline const ::proto_ff::festivalbigyanhuarecharge& Sheet_festivalbigyanhuarecharge::festivalbigyanhuarecharge_list(int index) const {
  return festivalbigyanhuarecharge_list_.Get(index);
}
inline ::proto_ff::festivalbigyanhuarecharge* Sheet_festivalbigyanhuarecharge::mutable_festivalbigyanhuarecharge_list(int index) {
  return festivalbigyanhuarecharge_list_.Mutable(index);
}
inline ::proto_ff::festivalbigyanhuarecharge* Sheet_festivalbigyanhuarecharge::add_festivalbigyanhuarecharge_list() {
  return festivalbigyanhuarecharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuarecharge >&
Sheet_festivalbigyanhuarecharge::festivalbigyanhuarecharge_list() const {
  return festivalbigyanhuarecharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuarecharge >*
Sheet_festivalbigyanhuarecharge::mutable_festivalbigyanhuarecharge_list() {
  return &festivalbigyanhuarecharge_list_;
}

// -------------------------------------------------------------------

// festivalbigyanhuacost

// optional int32 times = 1;
inline bool festivalbigyanhuacost::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalbigyanhuacost::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalbigyanhuacost::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalbigyanhuacost::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 festivalbigyanhuacost::times() const {
  return times_;
}
inline void festivalbigyanhuacost::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 singleCost = 2;
inline bool festivalbigyanhuacost::has_singlecost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalbigyanhuacost::set_has_singlecost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalbigyanhuacost::clear_has_singlecost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalbigyanhuacost::clear_singlecost() {
  singlecost_ = 0;
  clear_has_singlecost();
}
inline ::google::protobuf::int32 festivalbigyanhuacost::singlecost() const {
  return singlecost_;
}
inline void festivalbigyanhuacost::set_singlecost(::google::protobuf::int32 value) {
  set_has_singlecost();
  singlecost_ = value;
}

// optional int32 allCost = 3;
inline bool festivalbigyanhuacost::has_allcost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalbigyanhuacost::set_has_allcost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalbigyanhuacost::clear_has_allcost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalbigyanhuacost::clear_allcost() {
  allcost_ = 0;
  clear_has_allcost();
}
inline ::google::protobuf::int32 festivalbigyanhuacost::allcost() const {
  return allcost_;
}
inline void festivalbigyanhuacost::set_allcost(::google::protobuf::int32 value) {
  set_has_allcost();
  allcost_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalbigyanhuacost

// repeated .proto_ff.festivalbigyanhuacost festivalbigyanhuacost_List = 1;
inline int Sheet_festivalbigyanhuacost::festivalbigyanhuacost_list_size() const {
  return festivalbigyanhuacost_list_.size();
}
inline void Sheet_festivalbigyanhuacost::clear_festivalbigyanhuacost_list() {
  festivalbigyanhuacost_list_.Clear();
}
inline const ::proto_ff::festivalbigyanhuacost& Sheet_festivalbigyanhuacost::festivalbigyanhuacost_list(int index) const {
  return festivalbigyanhuacost_list_.Get(index);
}
inline ::proto_ff::festivalbigyanhuacost* Sheet_festivalbigyanhuacost::mutable_festivalbigyanhuacost_list(int index) {
  return festivalbigyanhuacost_list_.Mutable(index);
}
inline ::proto_ff::festivalbigyanhuacost* Sheet_festivalbigyanhuacost::add_festivalbigyanhuacost_list() {
  return festivalbigyanhuacost_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuacost >&
Sheet_festivalbigyanhuacost::festivalbigyanhuacost_list() const {
  return festivalbigyanhuacost_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalbigyanhuacost >*
Sheet_festivalbigyanhuacost::mutable_festivalbigyanhuacost_list() {
  return &festivalbigyanhuacost_list_;
}

// -------------------------------------------------------------------

// festivalmuban_bigyanhua

// optional int32 id = 1;
inline bool festivalmuban_bigyanhua::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_bigyanhua::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_bigyanhua::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_bigyanhua::id() const {
  return id_;
}
inline void festivalmuban_bigyanhua::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 itemid = 2;
inline bool festivalmuban_bigyanhua::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_bigyanhua::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_bigyanhua::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 festivalmuban_bigyanhua::itemid() const {
  return itemid_;
}
inline void festivalmuban_bigyanhua::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 num = 3;
inline bool festivalmuban_bigyanhua::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_bigyanhua::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_bigyanhua::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalmuban_bigyanhua::num() const {
  return num_;
}
inline void festivalmuban_bigyanhua::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 prof = 4;
inline bool festivalmuban_bigyanhua::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_bigyanhua::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_bigyanhua::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 festivalmuban_bigyanhua::prof() const {
  return prof_;
}
inline void festivalmuban_bigyanhua::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 type = 5;
inline bool festivalmuban_bigyanhua::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_bigyanhua::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_bigyanhua::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 festivalmuban_bigyanhua::type() const {
  return type_;
}
inline void festivalmuban_bigyanhua::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 order = 6;
inline bool festivalmuban_bigyanhua::has_order() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_order() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_bigyanhua::clear_has_order() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_bigyanhua::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 festivalmuban_bigyanhua::order() const {
  return order_;
}
inline void festivalmuban_bigyanhua::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional int32 probability = 7;
inline bool festivalmuban_bigyanhua::has_probability() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_probability() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_bigyanhua::clear_has_probability() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_bigyanhua::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline ::google::protobuf::int32 festivalmuban_bigyanhua::probability() const {
  return probability_;
}
inline void festivalmuban_bigyanhua::set_probability(::google::protobuf::int32 value) {
  set_has_probability();
  probability_ = value;
}

// optional int64 relation = 8;
inline bool festivalmuban_bigyanhua::has_relation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_relation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivalmuban_bigyanhua::clear_has_relation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivalmuban_bigyanhua::clear_relation() {
  relation_ = GOOGLE_LONGLONG(0);
  clear_has_relation();
}
inline ::google::protobuf::int64 festivalmuban_bigyanhua::relation() const {
  return relation_;
}
inline void festivalmuban_bigyanhua::set_relation(::google::protobuf::int64 value) {
  set_has_relation();
  relation_ = value;
}

// optional int64 modelid = 9;
inline bool festivalmuban_bigyanhua::has_modelid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_modelid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void festivalmuban_bigyanhua::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void festivalmuban_bigyanhua::clear_modelid() {
  modelid_ = GOOGLE_LONGLONG(0);
  clear_has_modelid();
}
inline ::google::protobuf::int64 festivalmuban_bigyanhua::modelid() const {
  return modelid_;
}
inline void festivalmuban_bigyanhua::set_modelid(::google::protobuf::int64 value) {
  set_has_modelid();
  modelid_ = value;
}

// optional int32 modeltype = 10;
inline bool festivalmuban_bigyanhua::has_modeltype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_modeltype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void festivalmuban_bigyanhua::clear_has_modeltype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void festivalmuban_bigyanhua::clear_modeltype() {
  modeltype_ = 0;
  clear_has_modeltype();
}
inline ::google::protobuf::int32 festivalmuban_bigyanhua::modeltype() const {
  return modeltype_;
}
inline void festivalmuban_bigyanhua::set_modeltype(::google::protobuf::int32 value) {
  set_has_modeltype();
  modeltype_ = value;
}

// optional string scale = 11;
inline bool festivalmuban_bigyanhua::has_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void festivalmuban_bigyanhua::set_has_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void festivalmuban_bigyanhua::clear_has_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void festivalmuban_bigyanhua::clear_scale() {
  if (scale_ != &::google::protobuf::internal::kEmptyString) {
    scale_->clear();
  }
  clear_has_scale();
}
inline const ::std::string& festivalmuban_bigyanhua::scale() const {
  return *scale_;
}
inline void festivalmuban_bigyanhua::set_scale(const ::std::string& value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
}
inline void festivalmuban_bigyanhua::set_scale(const char* value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
}
inline void festivalmuban_bigyanhua::set_scale(const char* value, size_t size) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_bigyanhua::mutable_scale() {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  return scale_;
}
inline ::std::string* festivalmuban_bigyanhua::release_scale() {
  clear_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scale_;
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_bigyanhua::set_allocated_scale(::std::string* scale) {
  if (scale_ != &::google::protobuf::internal::kEmptyString) {
    delete scale_;
  }
  if (scale) {
    set_has_scale();
    scale_ = scale;
  } else {
    clear_has_scale();
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_bigyanhua

// repeated .proto_ff.festivalmuban_bigyanhua festivalmuban_bigyanhua_List = 1;
inline int Sheet_festivalmuban_bigyanhua::festivalmuban_bigyanhua_list_size() const {
  return festivalmuban_bigyanhua_list_.size();
}
inline void Sheet_festivalmuban_bigyanhua::clear_festivalmuban_bigyanhua_list() {
  festivalmuban_bigyanhua_list_.Clear();
}
inline const ::proto_ff::festivalmuban_bigyanhua& Sheet_festivalmuban_bigyanhua::festivalmuban_bigyanhua_list(int index) const {
  return festivalmuban_bigyanhua_list_.Get(index);
}
inline ::proto_ff::festivalmuban_bigyanhua* Sheet_festivalmuban_bigyanhua::mutable_festivalmuban_bigyanhua_list(int index) {
  return festivalmuban_bigyanhua_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_bigyanhua* Sheet_festivalmuban_bigyanhua::add_festivalmuban_bigyanhua_list() {
  return festivalmuban_bigyanhua_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_bigyanhua >&
Sheet_festivalmuban_bigyanhua::festivalmuban_bigyanhua_list() const {
  return festivalmuban_bigyanhua_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_bigyanhua >*
Sheet_festivalmuban_bigyanhua::mutable_festivalmuban_bigyanhua_list() {
  return &festivalmuban_bigyanhua_list_;
}

// -------------------------------------------------------------------

// festivalfestival

// optional int64 id = 1;
inline bool festivalfestival::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalfestival::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalfestival::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalfestival::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 festivalfestival::id() const {
  return id_;
}
inline void festivalfestival::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 huoDongType = 2;
inline bool festivalfestival::has_huodongtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalfestival::set_has_huodongtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalfestival::clear_has_huodongtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalfestival::clear_huodongtype() {
  huodongtype_ = 0;
  clear_has_huodongtype();
}
inline ::google::protobuf::int32 festivalfestival::huodongtype() const {
  return huodongtype_;
}
inline void festivalfestival::set_huodongtype(::google::protobuf::int32 value) {
  set_has_huodongtype();
  huodongtype_ = value;
}

// optional int32 nameId = 3;
inline bool festivalfestival::has_nameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalfestival::set_has_nameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalfestival::clear_has_nameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalfestival::clear_nameid() {
  nameid_ = 0;
  clear_has_nameid();
}
inline ::google::protobuf::int32 festivalfestival::nameid() const {
  return nameid_;
}
inline void festivalfestival::set_nameid(::google::protobuf::int32 value) {
  set_has_nameid();
  nameid_ = value;
}

// optional string name = 4;
inline bool festivalfestival::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalfestival::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalfestival::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalfestival::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& festivalfestival::name() const {
  return *name_;
}
inline void festivalfestival::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void festivalfestival::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void festivalfestival::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalfestival::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* festivalfestival::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalfestival::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 servertype = 5;
inline bool festivalfestival::has_servertype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalfestival::set_has_servertype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalfestival::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalfestival::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::google::protobuf::int32 festivalfestival::servertype() const {
  return servertype_;
}
inline void festivalfestival::set_servertype(::google::protobuf::int32 value) {
  set_has_servertype();
  servertype_ = value;
}

// optional string timeA = 6;
inline bool festivalfestival::has_timea() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalfestival::set_has_timea() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalfestival::clear_has_timea() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalfestival::clear_timea() {
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    timea_->clear();
  }
  clear_has_timea();
}
inline const ::std::string& festivalfestival::timea() const {
  return *timea_;
}
inline void festivalfestival::set_timea(const ::std::string& value) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(value);
}
inline void festivalfestival::set_timea(const char* value) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(value);
}
inline void festivalfestival::set_timea(const char* value, size_t size) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalfestival::mutable_timea() {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  return timea_;
}
inline ::std::string* festivalfestival::release_timea() {
  clear_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timea_;
    timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalfestival::set_allocated_timea(::std::string* timea) {
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    delete timea_;
  }
  if (timea) {
    set_has_timea();
    timea_ = timea;
  } else {
    clear_has_timea();
    timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timeB = 7;
inline bool festivalfestival::has_timeb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalfestival::set_has_timeb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalfestival::clear_has_timeb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalfestival::clear_timeb() {
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    timeb_->clear();
  }
  clear_has_timeb();
}
inline const ::std::string& festivalfestival::timeb() const {
  return *timeb_;
}
inline void festivalfestival::set_timeb(const ::std::string& value) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(value);
}
inline void festivalfestival::set_timeb(const char* value) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(value);
}
inline void festivalfestival::set_timeb(const char* value, size_t size) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalfestival::mutable_timeb() {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  return timeb_;
}
inline ::std::string* festivalfestival::release_timeb() {
  clear_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timeb_;
    timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalfestival::set_allocated_timeb(::std::string* timeb) {
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    delete timeb_;
  }
  if (timeb) {
    set_has_timeb();
    timeb_ = timeb;
  } else {
    clear_has_timeb();
    timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 timeType = 8;
inline bool festivalfestival::has_timetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivalfestival::set_has_timetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivalfestival::clear_has_timetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivalfestival::clear_timetype() {
  timetype_ = 0;
  clear_has_timetype();
}
inline ::google::protobuf::int32 festivalfestival::timetype() const {
  return timetype_;
}
inline void festivalfestival::set_timetype(::google::protobuf::int32 value) {
  set_has_timetype();
  timetype_ = value;
}

// optional int32 Level = 9;
inline bool festivalfestival::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void festivalfestival::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void festivalfestival::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void festivalfestival::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 festivalfestival::level() const {
  return level_;
}
inline void festivalfestival::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 vipLevel = 10;
inline bool festivalfestival::has_viplevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void festivalfestival::set_has_viplevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void festivalfestival::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void festivalfestival::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 festivalfestival::viplevel() const {
  return viplevel_;
}
inline void festivalfestival::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 rechange = 11;
inline bool festivalfestival::has_rechange() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void festivalfestival::set_has_rechange() {
  _has_bits_[0] |= 0x00000400u;
}
inline void festivalfestival::clear_has_rechange() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void festivalfestival::clear_rechange() {
  rechange_ = 0;
  clear_has_rechange();
}
inline ::google::protobuf::int32 festivalfestival::rechange() const {
  return rechange_;
}
inline void festivalfestival::set_rechange(::google::protobuf::int32 value) {
  set_has_rechange();
  rechange_ = value;
}

// optional int32 ifOpen = 12;
inline bool festivalfestival::has_ifopen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void festivalfestival::set_has_ifopen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void festivalfestival::clear_has_ifopen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void festivalfestival::clear_ifopen() {
  ifopen_ = 0;
  clear_has_ifopen();
}
inline ::google::protobuf::int32 festivalfestival::ifopen() const {
  return ifopen_;
}
inline void festivalfestival::set_ifopen(::google::protobuf::int32 value) {
  set_has_ifopen();
  ifopen_ = value;
}

// optional string list = 13;
inline bool festivalfestival::has_list() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void festivalfestival::set_has_list() {
  _has_bits_[0] |= 0x00001000u;
}
inline void festivalfestival::clear_has_list() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void festivalfestival::clear_list() {
  if (list_ != &::google::protobuf::internal::kEmptyString) {
    list_->clear();
  }
  clear_has_list();
}
inline const ::std::string& festivalfestival::list() const {
  return *list_;
}
inline void festivalfestival::set_list(const ::std::string& value) {
  set_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    list_ = new ::std::string;
  }
  list_->assign(value);
}
inline void festivalfestival::set_list(const char* value) {
  set_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    list_ = new ::std::string;
  }
  list_->assign(value);
}
inline void festivalfestival::set_list(const char* value, size_t size) {
  set_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    list_ = new ::std::string;
  }
  list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalfestival::mutable_list() {
  set_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    list_ = new ::std::string;
  }
  return list_;
}
inline ::std::string* festivalfestival::release_list() {
  clear_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = list_;
    list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalfestival::set_allocated_list(::std::string* list) {
  if (list_ != &::google::protobuf::internal::kEmptyString) {
    delete list_;
  }
  if (list) {
    set_has_list();
    list_ = list;
  } else {
    clear_has_list();
    list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string icon = 14;
inline bool festivalfestival::has_icon() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void festivalfestival::set_has_icon() {
  _has_bits_[0] |= 0x00002000u;
}
inline void festivalfestival::clear_has_icon() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void festivalfestival::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& festivalfestival::icon() const {
  return *icon_;
}
inline void festivalfestival::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void festivalfestival::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void festivalfestival::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalfestival::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* festivalfestival::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalfestival::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 loginPopPriority = 15;
inline bool festivalfestival::has_loginpoppriority() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void festivalfestival::set_has_loginpoppriority() {
  _has_bits_[0] |= 0x00004000u;
}
inline void festivalfestival::clear_has_loginpoppriority() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void festivalfestival::clear_loginpoppriority() {
  loginpoppriority_ = 0;
  clear_has_loginpoppriority();
}
inline ::google::protobuf::int32 festivalfestival::loginpoppriority() const {
  return loginpoppriority_;
}
inline void festivalfestival::set_loginpoppriority(::google::protobuf::int32 value) {
  set_has_loginpoppriority();
  loginpoppriority_ = value;
}

// optional int32 belong = 16;
inline bool festivalfestival::has_belong() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void festivalfestival::set_has_belong() {
  _has_bits_[0] |= 0x00008000u;
}
inline void festivalfestival::clear_has_belong() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void festivalfestival::clear_belong() {
  belong_ = 0;
  clear_has_belong();
}
inline ::google::protobuf::int32 festivalfestival::belong() const {
  return belong_;
}
inline void festivalfestival::set_belong(::google::protobuf::int32 value) {
  set_has_belong();
  belong_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalfestival

// repeated .proto_ff.festivalfestival festivalfestival_List = 1;
inline int Sheet_festivalfestival::festivalfestival_list_size() const {
  return festivalfestival_list_.size();
}
inline void Sheet_festivalfestival::clear_festivalfestival_list() {
  festivalfestival_list_.Clear();
}
inline const ::proto_ff::festivalfestival& Sheet_festivalfestival::festivalfestival_list(int index) const {
  return festivalfestival_list_.Get(index);
}
inline ::proto_ff::festivalfestival* Sheet_festivalfestival::mutable_festivalfestival_list(int index) {
  return festivalfestival_list_.Mutable(index);
}
inline ::proto_ff::festivalfestival* Sheet_festivalfestival::add_festivalfestival_list() {
  return festivalfestival_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalfestival >&
Sheet_festivalfestival::festivalfestival_list() const {
  return festivalfestival_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalfestival >*
Sheet_festivalfestival::mutable_festivalfestival_list() {
  return &festivalfestival_list_;
}

// -------------------------------------------------------------------

// festivaltemplate

// optional int32 id = 1;
inline bool festivaltemplate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivaltemplate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivaltemplate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivaltemplate::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivaltemplate::id() const {
  return id_;
}
inline void festivaltemplate::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 muBan = 2;
inline bool festivaltemplate::has_muban() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivaltemplate::set_has_muban() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivaltemplate::clear_has_muban() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivaltemplate::clear_muban() {
  muban_ = 0;
  clear_has_muban();
}
inline ::google::protobuf::int32 festivaltemplate::muban() const {
  return muban_;
}
inline void festivaltemplate::set_muban(::google::protobuf::int32 value) {
  set_has_muban();
  muban_ = value;
}

// optional int32 order = 3;
inline bool festivaltemplate::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivaltemplate::set_has_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivaltemplate::clear_has_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivaltemplate::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 festivaltemplate::order() const {
  return order_;
}
inline void festivaltemplate::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional string list = 4;
inline bool festivaltemplate::has_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivaltemplate::set_has_list() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivaltemplate::clear_has_list() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivaltemplate::clear_list() {
  if (list_ != &::google::protobuf::internal::kEmptyString) {
    list_->clear();
  }
  clear_has_list();
}
inline const ::std::string& festivaltemplate::list() const {
  return *list_;
}
inline void festivaltemplate::set_list(const ::std::string& value) {
  set_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    list_ = new ::std::string;
  }
  list_->assign(value);
}
inline void festivaltemplate::set_list(const char* value) {
  set_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    list_ = new ::std::string;
  }
  list_->assign(value);
}
inline void festivaltemplate::set_list(const char* value, size_t size) {
  set_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    list_ = new ::std::string;
  }
  list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_list() {
  set_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    list_ = new ::std::string;
  }
  return list_;
}
inline ::std::string* festivaltemplate::release_list() {
  clear_has_list();
  if (list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = list_;
    list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_list(::std::string* list) {
  if (list_ != &::google::protobuf::internal::kEmptyString) {
    delete list_;
  }
  if (list) {
    set_has_list();
    list_ = list;
  } else {
    clear_has_list();
    list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 nameId = 5;
inline bool festivaltemplate::has_nameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivaltemplate::set_has_nameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivaltemplate::clear_has_nameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivaltemplate::clear_nameid() {
  nameid_ = 0;
  clear_has_nameid();
}
inline ::google::protobuf::int32 festivaltemplate::nameid() const {
  return nameid_;
}
inline void festivaltemplate::set_nameid(::google::protobuf::int32 value) {
  set_has_nameid();
  nameid_ = value;
}

// optional string Name = 6;
inline bool festivaltemplate::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivaltemplate::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivaltemplate::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivaltemplate::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& festivaltemplate::name() const {
  return *name_;
}
inline void festivaltemplate::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void festivaltemplate::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void festivaltemplate::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* festivaltemplate::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 7;
inline bool festivaltemplate::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivaltemplate::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivaltemplate::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivaltemplate::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& festivaltemplate::type() const {
  return *type_;
}
inline void festivaltemplate::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void festivaltemplate::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void festivaltemplate::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* festivaltemplate::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timeA = 8;
inline bool festivaltemplate::has_timea() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivaltemplate::set_has_timea() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivaltemplate::clear_has_timea() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivaltemplate::clear_timea() {
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    timea_->clear();
  }
  clear_has_timea();
}
inline const ::std::string& festivaltemplate::timea() const {
  return *timea_;
}
inline void festivaltemplate::set_timea(const ::std::string& value) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(value);
}
inline void festivaltemplate::set_timea(const char* value) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(value);
}
inline void festivaltemplate::set_timea(const char* value, size_t size) {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  timea_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_timea() {
  set_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    timea_ = new ::std::string;
  }
  return timea_;
}
inline ::std::string* festivaltemplate::release_timea() {
  clear_has_timea();
  if (timea_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timea_;
    timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_timea(::std::string* timea) {
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    delete timea_;
  }
  if (timea) {
    set_has_timea();
    timea_ = timea;
  } else {
    clear_has_timea();
    timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timeB = 9;
inline bool festivaltemplate::has_timeb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void festivaltemplate::set_has_timeb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void festivaltemplate::clear_has_timeb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void festivaltemplate::clear_timeb() {
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    timeb_->clear();
  }
  clear_has_timeb();
}
inline const ::std::string& festivaltemplate::timeb() const {
  return *timeb_;
}
inline void festivaltemplate::set_timeb(const ::std::string& value) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(value);
}
inline void festivaltemplate::set_timeb(const char* value) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(value);
}
inline void festivaltemplate::set_timeb(const char* value, size_t size) {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  timeb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_timeb() {
  set_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    timeb_ = new ::std::string;
  }
  return timeb_;
}
inline ::std::string* festivaltemplate::release_timeb() {
  clear_has_timeb();
  if (timeb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timeb_;
    timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_timeb(::std::string* timeb) {
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    delete timeb_;
  }
  if (timeb) {
    set_has_timeb();
    timeb_ = timeb;
  } else {
    clear_has_timeb();
    timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 timeType = 10;
inline bool festivaltemplate::has_timetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void festivaltemplate::set_has_timetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void festivaltemplate::clear_has_timetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void festivaltemplate::clear_timetype() {
  timetype_ = 0;
  clear_has_timetype();
}
inline ::google::protobuf::int32 festivaltemplate::timetype() const {
  return timetype_;
}
inline void festivaltemplate::set_timetype(::google::protobuf::int32 value) {
  set_has_timetype();
  timetype_ = value;
}

// optional int32 level = 11;
inline bool festivaltemplate::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void festivaltemplate::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void festivaltemplate::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void festivaltemplate::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 festivaltemplate::level() const {
  return level_;
}
inline void festivaltemplate::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 vipLevel = 12;
inline bool festivaltemplate::has_viplevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void festivaltemplate::set_has_viplevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void festivaltemplate::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void festivaltemplate::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 festivaltemplate::viplevel() const {
  return viplevel_;
}
inline void festivaltemplate::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 rechange = 13;
inline bool festivaltemplate::has_rechange() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void festivaltemplate::set_has_rechange() {
  _has_bits_[0] |= 0x00001000u;
}
inline void festivaltemplate::clear_has_rechange() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void festivaltemplate::clear_rechange() {
  rechange_ = 0;
  clear_has_rechange();
}
inline ::google::protobuf::int32 festivaltemplate::rechange() const {
  return rechange_;
}
inline void festivaltemplate::set_rechange(::google::protobuf::int32 value) {
  set_has_rechange();
  rechange_ = value;
}

// optional int32 remarkId = 14;
inline bool festivaltemplate::has_remarkid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void festivaltemplate::set_has_remarkid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void festivaltemplate::clear_has_remarkid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void festivaltemplate::clear_remarkid() {
  remarkid_ = 0;
  clear_has_remarkid();
}
inline ::google::protobuf::int32 festivaltemplate::remarkid() const {
  return remarkid_;
}
inline void festivaltemplate::set_remarkid(::google::protobuf::int32 value) {
  set_has_remarkid();
  remarkid_ = value;
}

// optional string MiaoShu = 15;
inline bool festivaltemplate::has_miaoshu() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void festivaltemplate::set_has_miaoshu() {
  _has_bits_[0] |= 0x00004000u;
}
inline void festivaltemplate::clear_has_miaoshu() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void festivaltemplate::clear_miaoshu() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    miaoshu_->clear();
  }
  clear_has_miaoshu();
}
inline const ::std::string& festivaltemplate::miaoshu() const {
  return *miaoshu_;
}
inline void festivaltemplate::set_miaoshu(const ::std::string& value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivaltemplate::set_miaoshu(const char* value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivaltemplate::set_miaoshu(const char* value, size_t size) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_miaoshu() {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  return miaoshu_;
}
inline ::std::string* festivaltemplate::release_miaoshu() {
  clear_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshu_;
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_miaoshu(::std::string* miaoshu) {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshu) {
    set_has_miaoshu();
    miaoshu_ = miaoshu;
  } else {
    clear_has_miaoshu();
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 jiangLi = 16;
inline bool festivaltemplate::has_jiangli() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void festivaltemplate::set_has_jiangli() {
  _has_bits_[0] |= 0x00008000u;
}
inline void festivaltemplate::clear_has_jiangli() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void festivaltemplate::clear_jiangli() {
  jiangli_ = GOOGLE_LONGLONG(0);
  clear_has_jiangli();
}
inline ::google::protobuf::int64 festivaltemplate::jiangli() const {
  return jiangli_;
}
inline void festivaltemplate::set_jiangli(::google::protobuf::int64 value) {
  set_has_jiangli();
  jiangli_ = value;
}

// optional string beiJing = 17;
inline bool festivaltemplate::has_beijing() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void festivaltemplate::set_has_beijing() {
  _has_bits_[0] |= 0x00010000u;
}
inline void festivaltemplate::clear_has_beijing() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void festivaltemplate::clear_beijing() {
  if (beijing_ != &::google::protobuf::internal::kEmptyString) {
    beijing_->clear();
  }
  clear_has_beijing();
}
inline const ::std::string& festivaltemplate::beijing() const {
  return *beijing_;
}
inline void festivaltemplate::set_beijing(const ::std::string& value) {
  set_has_beijing();
  if (beijing_ == &::google::protobuf::internal::kEmptyString) {
    beijing_ = new ::std::string;
  }
  beijing_->assign(value);
}
inline void festivaltemplate::set_beijing(const char* value) {
  set_has_beijing();
  if (beijing_ == &::google::protobuf::internal::kEmptyString) {
    beijing_ = new ::std::string;
  }
  beijing_->assign(value);
}
inline void festivaltemplate::set_beijing(const char* value, size_t size) {
  set_has_beijing();
  if (beijing_ == &::google::protobuf::internal::kEmptyString) {
    beijing_ = new ::std::string;
  }
  beijing_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_beijing() {
  set_has_beijing();
  if (beijing_ == &::google::protobuf::internal::kEmptyString) {
    beijing_ = new ::std::string;
  }
  return beijing_;
}
inline ::std::string* festivaltemplate::release_beijing() {
  clear_has_beijing();
  if (beijing_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beijing_;
    beijing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_beijing(::std::string* beijing) {
  if (beijing_ != &::google::protobuf::internal::kEmptyString) {
    delete beijing_;
  }
  if (beijing) {
    set_has_beijing();
    beijing_ = beijing;
  } else {
    clear_has_beijing();
    beijing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 18;
inline bool festivaltemplate::has_title() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void festivaltemplate::set_has_title() {
  _has_bits_[0] |= 0x00020000u;
}
inline void festivaltemplate::clear_has_title() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void festivaltemplate::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& festivaltemplate::title() const {
  return *title_;
}
inline void festivaltemplate::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void festivaltemplate::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void festivaltemplate::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* festivaltemplate::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 19;
inline bool festivaltemplate::has_desc() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void festivaltemplate::set_has_desc() {
  _has_bits_[0] |= 0x00040000u;
}
inline void festivaltemplate::clear_has_desc() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void festivaltemplate::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& festivaltemplate::desc() const {
  return *desc_;
}
inline void festivaltemplate::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void festivaltemplate::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void festivaltemplate::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaltemplate::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* festivaltemplate::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaltemplate::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_festivaltemplate

// repeated .proto_ff.festivaltemplate festivaltemplate_List = 1;
inline int Sheet_festivaltemplate::festivaltemplate_list_size() const {
  return festivaltemplate_list_.size();
}
inline void Sheet_festivaltemplate::clear_festivaltemplate_list() {
  festivaltemplate_list_.Clear();
}
inline const ::proto_ff::festivaltemplate& Sheet_festivaltemplate::festivaltemplate_list(int index) const {
  return festivaltemplate_list_.Get(index);
}
inline ::proto_ff::festivaltemplate* Sheet_festivaltemplate::mutable_festivaltemplate_list(int index) {
  return festivaltemplate_list_.Mutable(index);
}
inline ::proto_ff::festivaltemplate* Sheet_festivaltemplate::add_festivaltemplate_list() {
  return festivaltemplate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaltemplate >&
Sheet_festivaltemplate::festivaltemplate_list() const {
  return festivaltemplate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaltemplate >*
Sheet_festivaltemplate::mutable_festivaltemplate_list() {
  return &festivaltemplate_list_;
}

// -------------------------------------------------------------------

// festivalmuban_worldboss

// optional int32 id = 1;
inline bool festivalmuban_worldboss::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_worldboss::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_worldboss::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_worldboss::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_worldboss::id() const {
  return id_;
}
inline void festivalmuban_worldboss::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 bossid = 2;
inline bool festivalmuban_worldboss::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_worldboss::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_worldboss::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_worldboss::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 festivalmuban_worldboss::bossid() const {
  return bossid_;
}
inline void festivalmuban_worldboss::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional int32 sort = 3;
inline bool festivalmuban_worldboss::has_sort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_worldboss::set_has_sort() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_worldboss::clear_has_sort() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_worldboss::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 festivalmuban_worldboss::sort() const {
  return sort_;
}
inline void festivalmuban_worldboss::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional int32 conditionType = 4;
inline bool festivalmuban_worldboss::has_conditiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_worldboss::set_has_conditiontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_worldboss::clear_has_conditiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_worldboss::clear_conditiontype() {
  conditiontype_ = 0;
  clear_has_conditiontype();
}
inline ::google::protobuf::int32 festivalmuban_worldboss::conditiontype() const {
  return conditiontype_;
}
inline void festivalmuban_worldboss::set_conditiontype(::google::protobuf::int32 value) {
  set_has_conditiontype();
  conditiontype_ = value;
}

// optional int32 condition = 5;
inline bool festivalmuban_worldboss::has_condition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_worldboss::set_has_condition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_worldboss::clear_has_condition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_worldboss::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::google::protobuf::int32 festivalmuban_worldboss::condition() const {
  return condition_;
}
inline void festivalmuban_worldboss::set_condition(::google::protobuf::int32 value) {
  set_has_condition();
  condition_ = value;
}

// optional string des = 6;
inline bool festivalmuban_worldboss::has_des() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_worldboss::set_has_des() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_worldboss::clear_has_des() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_worldboss::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& festivalmuban_worldboss::des() const {
  return *des_;
}
inline void festivalmuban_worldboss::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void festivalmuban_worldboss::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void festivalmuban_worldboss::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_worldboss::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* festivalmuban_worldboss::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_worldboss::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 boxId = 7;
inline bool festivalmuban_worldboss::has_boxid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_worldboss::set_has_boxid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_worldboss::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_worldboss::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 festivalmuban_worldboss::boxid() const {
  return boxid_;
}
inline void festivalmuban_worldboss::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_worldboss

// repeated .proto_ff.festivalmuban_worldboss festivalmuban_worldboss_List = 1;
inline int Sheet_festivalmuban_worldboss::festivalmuban_worldboss_list_size() const {
  return festivalmuban_worldboss_list_.size();
}
inline void Sheet_festivalmuban_worldboss::clear_festivalmuban_worldboss_list() {
  festivalmuban_worldboss_list_.Clear();
}
inline const ::proto_ff::festivalmuban_worldboss& Sheet_festivalmuban_worldboss::festivalmuban_worldboss_list(int index) const {
  return festivalmuban_worldboss_list_.Get(index);
}
inline ::proto_ff::festivalmuban_worldboss* Sheet_festivalmuban_worldboss::mutable_festivalmuban_worldboss_list(int index) {
  return festivalmuban_worldboss_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_worldboss* Sheet_festivalmuban_worldboss::add_festivalmuban_worldboss_list() {
  return festivalmuban_worldboss_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_worldboss >&
Sheet_festivalmuban_worldboss::festivalmuban_worldboss_list() const {
  return festivalmuban_worldboss_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_worldboss >*
Sheet_festivalmuban_worldboss::mutable_festivalmuban_worldboss_list() {
  return &festivalmuban_worldboss_list_;
}

// -------------------------------------------------------------------

// festivalmuban_libao

// optional int32 id = 1;
inline bool festivalmuban_libao::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_libao::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_libao::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_libao::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_libao::id() const {
  return id_;
}
inline void festivalmuban_libao::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 boxid = 2;
inline bool festivalmuban_libao::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_libao::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_libao::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_libao::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 festivalmuban_libao::boxid() const {
  return boxid_;
}
inline void festivalmuban_libao::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int32 term = 3;
inline bool festivalmuban_libao::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_libao::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_libao::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_libao::clear_term() {
  term_ = 0;
  clear_has_term();
}
inline ::google::protobuf::int32 festivalmuban_libao::term() const {
  return term_;
}
inline void festivalmuban_libao::set_term(::google::protobuf::int32 value) {
  set_has_term();
  term_ = value;
}

// optional int32 level = 4;
inline bool festivalmuban_libao::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_libao::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_libao::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_libao::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 festivalmuban_libao::level() const {
  return level_;
}
inline void festivalmuban_libao::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 currencyType = 5;
inline bool festivalmuban_libao::has_currencytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_libao::set_has_currencytype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_libao::clear_has_currencytype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_libao::clear_currencytype() {
  currencytype_ = 0;
  clear_has_currencytype();
}
inline ::google::protobuf::int32 festivalmuban_libao::currencytype() const {
  return currencytype_;
}
inline void festivalmuban_libao::set_currencytype(::google::protobuf::int32 value) {
  set_has_currencytype();
  currencytype_ = value;
}

// optional int32 price = 6;
inline bool festivalmuban_libao::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_libao::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_libao::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_libao::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 festivalmuban_libao::price() const {
  return price_;
}
inline void festivalmuban_libao::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 backType = 7;
inline bool festivalmuban_libao::has_backtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_libao::set_has_backtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_libao::clear_has_backtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_libao::clear_backtype() {
  backtype_ = 0;
  clear_has_backtype();
}
inline ::google::protobuf::int32 festivalmuban_libao::backtype() const {
  return backtype_;
}
inline void festivalmuban_libao::set_backtype(::google::protobuf::int32 value) {
  set_has_backtype();
  backtype_ = value;
}

// optional int32 dayBack = 8;
inline bool festivalmuban_libao::has_dayback() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivalmuban_libao::set_has_dayback() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivalmuban_libao::clear_has_dayback() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivalmuban_libao::clear_dayback() {
  dayback_ = 0;
  clear_has_dayback();
}
inline ::google::protobuf::int32 festivalmuban_libao::dayback() const {
  return dayback_;
}
inline void festivalmuban_libao::set_dayback(::google::protobuf::int32 value) {
  set_has_dayback();
  dayback_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_libao

// repeated .proto_ff.festivalmuban_libao festivalmuban_libao_List = 1;
inline int Sheet_festivalmuban_libao::festivalmuban_libao_list_size() const {
  return festivalmuban_libao_list_.size();
}
inline void Sheet_festivalmuban_libao::clear_festivalmuban_libao_list() {
  festivalmuban_libao_list_.Clear();
}
inline const ::proto_ff::festivalmuban_libao& Sheet_festivalmuban_libao::festivalmuban_libao_list(int index) const {
  return festivalmuban_libao_list_.Get(index);
}
inline ::proto_ff::festivalmuban_libao* Sheet_festivalmuban_libao::mutable_festivalmuban_libao_list(int index) {
  return festivalmuban_libao_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_libao* Sheet_festivalmuban_libao::add_festivalmuban_libao_list() {
  return festivalmuban_libao_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_libao >&
Sheet_festivalmuban_libao::festivalmuban_libao_list() const {
  return festivalmuban_libao_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_libao >*
Sheet_festivalmuban_libao::mutable_festivalmuban_libao_list() {
  return &festivalmuban_libao_list_;
}

// -------------------------------------------------------------------

// festivalmuban_double

// optional int32 id = 1;
inline bool festivalmuban_double::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_double::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_double::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_double::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_double::id() const {
  return id_;
}
inline void festivalmuban_double::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 gear = 2;
inline bool festivalmuban_double::has_gear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_double::set_has_gear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_double::clear_has_gear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_double::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 festivalmuban_double::gear() const {
  return gear_;
}
inline void festivalmuban_double::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
}

// optional int64 boxId = 3;
inline bool festivalmuban_double::has_boxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_double::set_has_boxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_double::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_double::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 festivalmuban_double::boxid() const {
  return boxid_;
}
inline void festivalmuban_double::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_double

// repeated .proto_ff.festivalmuban_double festivalmuban_double_List = 1;
inline int Sheet_festivalmuban_double::festivalmuban_double_list_size() const {
  return festivalmuban_double_list_.size();
}
inline void Sheet_festivalmuban_double::clear_festivalmuban_double_list() {
  festivalmuban_double_list_.Clear();
}
inline const ::proto_ff::festivalmuban_double& Sheet_festivalmuban_double::festivalmuban_double_list(int index) const {
  return festivalmuban_double_list_.Get(index);
}
inline ::proto_ff::festivalmuban_double* Sheet_festivalmuban_double::mutable_festivalmuban_double_list(int index) {
  return festivalmuban_double_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_double* Sheet_festivalmuban_double::add_festivalmuban_double_list() {
  return festivalmuban_double_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_double >&
Sheet_festivalmuban_double::festivalmuban_double_list() const {
  return festivalmuban_double_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_double >*
Sheet_festivalmuban_double::mutable_festivalmuban_double_list() {
  return &festivalmuban_double_list_;
}

// -------------------------------------------------------------------

// festivalmiaoshu

// optional int32 id = 1;
inline bool festivalmiaoshu::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmiaoshu::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmiaoshu::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmiaoshu::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmiaoshu::id() const {
  return id_;
}
inline void festivalmiaoshu::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string wenzi = 2;
inline bool festivalmiaoshu::has_wenzi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmiaoshu::set_has_wenzi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmiaoshu::clear_has_wenzi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmiaoshu::clear_wenzi() {
  if (wenzi_ != &::google::protobuf::internal::kEmptyString) {
    wenzi_->clear();
  }
  clear_has_wenzi();
}
inline const ::std::string& festivalmiaoshu::wenzi() const {
  return *wenzi_;
}
inline void festivalmiaoshu::set_wenzi(const ::std::string& value) {
  set_has_wenzi();
  if (wenzi_ == &::google::protobuf::internal::kEmptyString) {
    wenzi_ = new ::std::string;
  }
  wenzi_->assign(value);
}
inline void festivalmiaoshu::set_wenzi(const char* value) {
  set_has_wenzi();
  if (wenzi_ == &::google::protobuf::internal::kEmptyString) {
    wenzi_ = new ::std::string;
  }
  wenzi_->assign(value);
}
inline void festivalmiaoshu::set_wenzi(const char* value, size_t size) {
  set_has_wenzi();
  if (wenzi_ == &::google::protobuf::internal::kEmptyString) {
    wenzi_ = new ::std::string;
  }
  wenzi_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmiaoshu::mutable_wenzi() {
  set_has_wenzi();
  if (wenzi_ == &::google::protobuf::internal::kEmptyString) {
    wenzi_ = new ::std::string;
  }
  return wenzi_;
}
inline ::std::string* festivalmiaoshu::release_wenzi() {
  clear_has_wenzi();
  if (wenzi_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wenzi_;
    wenzi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmiaoshu::set_allocated_wenzi(::std::string* wenzi) {
  if (wenzi_ != &::google::protobuf::internal::kEmptyString) {
    delete wenzi_;
  }
  if (wenzi) {
    set_has_wenzi();
    wenzi_ = wenzi;
  } else {
    clear_has_wenzi();
    wenzi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_festivalmiaoshu

// repeated .proto_ff.festivalmiaoshu festivalmiaoshu_List = 1;
inline int Sheet_festivalmiaoshu::festivalmiaoshu_list_size() const {
  return festivalmiaoshu_list_.size();
}
inline void Sheet_festivalmiaoshu::clear_festivalmiaoshu_list() {
  festivalmiaoshu_list_.Clear();
}
inline const ::proto_ff::festivalmiaoshu& Sheet_festivalmiaoshu::festivalmiaoshu_list(int index) const {
  return festivalmiaoshu_list_.Get(index);
}
inline ::proto_ff::festivalmiaoshu* Sheet_festivalmiaoshu::mutable_festivalmiaoshu_list(int index) {
  return festivalmiaoshu_list_.Mutable(index);
}
inline ::proto_ff::festivalmiaoshu* Sheet_festivalmiaoshu::add_festivalmiaoshu_list() {
  return festivalmiaoshu_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmiaoshu >&
Sheet_festivalmiaoshu::festivalmiaoshu_list() const {
  return festivalmiaoshu_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmiaoshu >*
Sheet_festivalmiaoshu::mutable_festivalmiaoshu_list() {
  return &festivalmiaoshu_list_;
}

// -------------------------------------------------------------------

// festivalmuban_denglu

// optional int32 id = 1;
inline bool festivalmuban_denglu::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_denglu::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_denglu::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_denglu::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_denglu::id() const {
  return id_;
}
inline void festivalmuban_denglu::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Num = 2;
inline bool festivalmuban_denglu::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_denglu::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_denglu::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_denglu::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalmuban_denglu::num() const {
  return num_;
}
inline void festivalmuban_denglu::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 remarkId = 3;
inline bool festivalmuban_denglu::has_remarkid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_denglu::set_has_remarkid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_denglu::clear_has_remarkid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_denglu::clear_remarkid() {
  remarkid_ = 0;
  clear_has_remarkid();
}
inline ::google::protobuf::int32 festivalmuban_denglu::remarkid() const {
  return remarkid_;
}
inline void festivalmuban_denglu::set_remarkid(::google::protobuf::int32 value) {
  set_has_remarkid();
  remarkid_ = value;
}

// optional string miaoshu = 4;
inline bool festivalmuban_denglu::has_miaoshu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_denglu::set_has_miaoshu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_denglu::clear_has_miaoshu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_denglu::clear_miaoshu() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    miaoshu_->clear();
  }
  clear_has_miaoshu();
}
inline const ::std::string& festivalmuban_denglu::miaoshu() const {
  return *miaoshu_;
}
inline void festivalmuban_denglu::set_miaoshu(const ::std::string& value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_denglu::set_miaoshu(const char* value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_denglu::set_miaoshu(const char* value, size_t size) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_denglu::mutable_miaoshu() {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  return miaoshu_;
}
inline ::std::string* festivalmuban_denglu::release_miaoshu() {
  clear_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshu_;
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_denglu::set_allocated_miaoshu(::std::string* miaoshu) {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshu) {
    set_has_miaoshu();
    miaoshu_ = miaoshu;
  } else {
    clear_has_miaoshu();
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 jiangLi = 5;
inline bool festivalmuban_denglu::has_jiangli() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_denglu::set_has_jiangli() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_denglu::clear_has_jiangli() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_denglu::clear_jiangli() {
  jiangli_ = GOOGLE_LONGLONG(0);
  clear_has_jiangli();
}
inline ::google::protobuf::int64 festivalmuban_denglu::jiangli() const {
  return jiangli_;
}
inline void festivalmuban_denglu::set_jiangli(::google::protobuf::int64 value) {
  set_has_jiangli();
  jiangli_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_denglu

// repeated .proto_ff.festivalmuban_denglu festivalmuban_denglu_List = 1;
inline int Sheet_festivalmuban_denglu::festivalmuban_denglu_list_size() const {
  return festivalmuban_denglu_list_.size();
}
inline void Sheet_festivalmuban_denglu::clear_festivalmuban_denglu_list() {
  festivalmuban_denglu_list_.Clear();
}
inline const ::proto_ff::festivalmuban_denglu& Sheet_festivalmuban_denglu::festivalmuban_denglu_list(int index) const {
  return festivalmuban_denglu_list_.Get(index);
}
inline ::proto_ff::festivalmuban_denglu* Sheet_festivalmuban_denglu::mutable_festivalmuban_denglu_list(int index) {
  return festivalmuban_denglu_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_denglu* Sheet_festivalmuban_denglu::add_festivalmuban_denglu_list() {
  return festivalmuban_denglu_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_denglu >&
Sheet_festivalmuban_denglu::festivalmuban_denglu_list() const {
  return festivalmuban_denglu_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_denglu >*
Sheet_festivalmuban_denglu::mutable_festivalmuban_denglu_list() {
  return &festivalmuban_denglu_list_;
}

// -------------------------------------------------------------------

// festivalmuban_touzi

// optional int32 id = 1;
inline bool festivalmuban_touzi::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_touzi::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_touzi::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_touzi::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_touzi::id() const {
  return id_;
}
inline void festivalmuban_touzi::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool festivalmuban_touzi::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_touzi::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_touzi::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_touzi::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 festivalmuban_touzi::type() const {
  return type_;
}
inline void festivalmuban_touzi::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 Num = 3;
inline bool festivalmuban_touzi::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_touzi::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_touzi::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_touzi::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalmuban_touzi::num() const {
  return num_;
}
inline void festivalmuban_touzi::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int64 addNum = 4;
inline bool festivalmuban_touzi::has_addnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_touzi::set_has_addnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_touzi::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_touzi::clear_addnum() {
  addnum_ = GOOGLE_LONGLONG(0);
  clear_has_addnum();
}
inline ::google::protobuf::int64 festivalmuban_touzi::addnum() const {
  return addnum_;
}
inline void festivalmuban_touzi::set_addnum(::google::protobuf::int64 value) {
  set_has_addnum();
  addnum_ = value;
}

// optional int32 remarkId = 5;
inline bool festivalmuban_touzi::has_remarkid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_touzi::set_has_remarkid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_touzi::clear_has_remarkid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_touzi::clear_remarkid() {
  remarkid_ = 0;
  clear_has_remarkid();
}
inline ::google::protobuf::int32 festivalmuban_touzi::remarkid() const {
  return remarkid_;
}
inline void festivalmuban_touzi::set_remarkid(::google::protobuf::int32 value) {
  set_has_remarkid();
  remarkid_ = value;
}

// optional string miaoshu = 6;
inline bool festivalmuban_touzi::has_miaoshu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_touzi::set_has_miaoshu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_touzi::clear_has_miaoshu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_touzi::clear_miaoshu() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    miaoshu_->clear();
  }
  clear_has_miaoshu();
}
inline const ::std::string& festivalmuban_touzi::miaoshu() const {
  return *miaoshu_;
}
inline void festivalmuban_touzi::set_miaoshu(const ::std::string& value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_touzi::set_miaoshu(const char* value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_touzi::set_miaoshu(const char* value, size_t size) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_touzi::mutable_miaoshu() {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  return miaoshu_;
}
inline ::std::string* festivalmuban_touzi::release_miaoshu() {
  clear_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshu_;
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_touzi::set_allocated_miaoshu(::std::string* miaoshu) {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshu) {
    set_has_miaoshu();
    miaoshu_ = miaoshu;
  } else {
    clear_has_miaoshu();
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 jiangLi = 7;
inline bool festivalmuban_touzi::has_jiangli() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_touzi::set_has_jiangli() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_touzi::clear_has_jiangli() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_touzi::clear_jiangli() {
  jiangli_ = GOOGLE_LONGLONG(0);
  clear_has_jiangli();
}
inline ::google::protobuf::int64 festivalmuban_touzi::jiangli() const {
  return jiangli_;
}
inline void festivalmuban_touzi::set_jiangli(::google::protobuf::int64 value) {
  set_has_jiangli();
  jiangli_ = value;
}

// optional int64 linkId = 8;
inline bool festivalmuban_touzi::has_linkid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivalmuban_touzi::set_has_linkid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivalmuban_touzi::clear_has_linkid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivalmuban_touzi::clear_linkid() {
  linkid_ = GOOGLE_LONGLONG(0);
  clear_has_linkid();
}
inline ::google::protobuf::int64 festivalmuban_touzi::linkid() const {
  return linkid_;
}
inline void festivalmuban_touzi::set_linkid(::google::protobuf::int64 value) {
  set_has_linkid();
  linkid_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_touzi

// repeated .proto_ff.festivalmuban_touzi festivalmuban_touzi_List = 1;
inline int Sheet_festivalmuban_touzi::festivalmuban_touzi_list_size() const {
  return festivalmuban_touzi_list_.size();
}
inline void Sheet_festivalmuban_touzi::clear_festivalmuban_touzi_list() {
  festivalmuban_touzi_list_.Clear();
}
inline const ::proto_ff::festivalmuban_touzi& Sheet_festivalmuban_touzi::festivalmuban_touzi_list(int index) const {
  return festivalmuban_touzi_list_.Get(index);
}
inline ::proto_ff::festivalmuban_touzi* Sheet_festivalmuban_touzi::mutable_festivalmuban_touzi_list(int index) {
  return festivalmuban_touzi_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_touzi* Sheet_festivalmuban_touzi::add_festivalmuban_touzi_list() {
  return festivalmuban_touzi_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_touzi >&
Sheet_festivalmuban_touzi::festivalmuban_touzi_list() const {
  return festivalmuban_touzi_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_touzi >*
Sheet_festivalmuban_touzi::mutable_festivalmuban_touzi_list() {
  return &festivalmuban_touzi_list_;
}

// -------------------------------------------------------------------

// festivalmuban_zhichong

// optional int32 id = 1;
inline bool festivalmuban_zhichong::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_zhichong::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_zhichong::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_zhichong::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_zhichong::id() const {
  return id_;
}
inline void festivalmuban_zhichong::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Num = 2;
inline bool festivalmuban_zhichong::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_zhichong::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_zhichong::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_zhichong::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalmuban_zhichong::num() const {
  return num_;
}
inline void festivalmuban_zhichong::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional string severNum = 3;
inline bool festivalmuban_zhichong::has_severnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_zhichong::set_has_severnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_zhichong::clear_has_severnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_zhichong::clear_severnum() {
  if (severnum_ != &::google::protobuf::internal::kEmptyString) {
    severnum_->clear();
  }
  clear_has_severnum();
}
inline const ::std::string& festivalmuban_zhichong::severnum() const {
  return *severnum_;
}
inline void festivalmuban_zhichong::set_severnum(const ::std::string& value) {
  set_has_severnum();
  if (severnum_ == &::google::protobuf::internal::kEmptyString) {
    severnum_ = new ::std::string;
  }
  severnum_->assign(value);
}
inline void festivalmuban_zhichong::set_severnum(const char* value) {
  set_has_severnum();
  if (severnum_ == &::google::protobuf::internal::kEmptyString) {
    severnum_ = new ::std::string;
  }
  severnum_->assign(value);
}
inline void festivalmuban_zhichong::set_severnum(const char* value, size_t size) {
  set_has_severnum();
  if (severnum_ == &::google::protobuf::internal::kEmptyString) {
    severnum_ = new ::std::string;
  }
  severnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_zhichong::mutable_severnum() {
  set_has_severnum();
  if (severnum_ == &::google::protobuf::internal::kEmptyString) {
    severnum_ = new ::std::string;
  }
  return severnum_;
}
inline ::std::string* festivalmuban_zhichong::release_severnum() {
  clear_has_severnum();
  if (severnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = severnum_;
    severnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_zhichong::set_allocated_severnum(::std::string* severnum) {
  if (severnum_ != &::google::protobuf::internal::kEmptyString) {
    delete severnum_;
  }
  if (severnum) {
    set_has_severnum();
    severnum_ = severnum;
  } else {
    clear_has_severnum();
    severnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 remarkId = 4;
inline bool festivalmuban_zhichong::has_remarkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_zhichong::set_has_remarkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_zhichong::clear_has_remarkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_zhichong::clear_remarkid() {
  remarkid_ = 0;
  clear_has_remarkid();
}
inline ::google::protobuf::int32 festivalmuban_zhichong::remarkid() const {
  return remarkid_;
}
inline void festivalmuban_zhichong::set_remarkid(::google::protobuf::int32 value) {
  set_has_remarkid();
  remarkid_ = value;
}

// optional string miaoshu = 5;
inline bool festivalmuban_zhichong::has_miaoshu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_zhichong::set_has_miaoshu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_zhichong::clear_has_miaoshu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_zhichong::clear_miaoshu() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    miaoshu_->clear();
  }
  clear_has_miaoshu();
}
inline const ::std::string& festivalmuban_zhichong::miaoshu() const {
  return *miaoshu_;
}
inline void festivalmuban_zhichong::set_miaoshu(const ::std::string& value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_zhichong::set_miaoshu(const char* value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_zhichong::set_miaoshu(const char* value, size_t size) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_zhichong::mutable_miaoshu() {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  return miaoshu_;
}
inline ::std::string* festivalmuban_zhichong::release_miaoshu() {
  clear_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshu_;
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_zhichong::set_allocated_miaoshu(::std::string* miaoshu) {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshu) {
    set_has_miaoshu();
    miaoshu_ = miaoshu;
  } else {
    clear_has_miaoshu();
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 jiangLi = 6;
inline bool festivalmuban_zhichong::has_jiangli() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_zhichong::set_has_jiangli() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_zhichong::clear_has_jiangli() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_zhichong::clear_jiangli() {
  jiangli_ = GOOGLE_LONGLONG(0);
  clear_has_jiangli();
}
inline ::google::protobuf::int64 festivalmuban_zhichong::jiangli() const {
  return jiangli_;
}
inline void festivalmuban_zhichong::set_jiangli(::google::protobuf::int64 value) {
  set_has_jiangli();
  jiangli_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_zhichong

// repeated .proto_ff.festivalmuban_zhichong festivalmuban_zhichong_List = 1;
inline int Sheet_festivalmuban_zhichong::festivalmuban_zhichong_list_size() const {
  return festivalmuban_zhichong_list_.size();
}
inline void Sheet_festivalmuban_zhichong::clear_festivalmuban_zhichong_list() {
  festivalmuban_zhichong_list_.Clear();
}
inline const ::proto_ff::festivalmuban_zhichong& Sheet_festivalmuban_zhichong::festivalmuban_zhichong_list(int index) const {
  return festivalmuban_zhichong_list_.Get(index);
}
inline ::proto_ff::festivalmuban_zhichong* Sheet_festivalmuban_zhichong::mutable_festivalmuban_zhichong_list(int index) {
  return festivalmuban_zhichong_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_zhichong* Sheet_festivalmuban_zhichong::add_festivalmuban_zhichong_list() {
  return festivalmuban_zhichong_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_zhichong >&
Sheet_festivalmuban_zhichong::festivalmuban_zhichong_list() const {
  return festivalmuban_zhichong_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_zhichong >*
Sheet_festivalmuban_zhichong::mutable_festivalmuban_zhichong_list() {
  return &festivalmuban_zhichong_list_;
}

// -------------------------------------------------------------------

// festivalmuban_leichong

// optional int32 id = 1;
inline bool festivalmuban_leichong::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_leichong::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_leichong::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_leichong::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_leichong::id() const {
  return id_;
}
inline void festivalmuban_leichong::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool festivalmuban_leichong::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_leichong::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_leichong::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_leichong::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 festivalmuban_leichong::type() const {
  return type_;
}
inline void festivalmuban_leichong::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 Num = 3;
inline bool festivalmuban_leichong::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_leichong::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_leichong::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_leichong::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalmuban_leichong::num() const {
  return num_;
}
inline void festivalmuban_leichong::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 remarkId = 4;
inline bool festivalmuban_leichong::has_remarkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_leichong::set_has_remarkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_leichong::clear_has_remarkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_leichong::clear_remarkid() {
  remarkid_ = 0;
  clear_has_remarkid();
}
inline ::google::protobuf::int32 festivalmuban_leichong::remarkid() const {
  return remarkid_;
}
inline void festivalmuban_leichong::set_remarkid(::google::protobuf::int32 value) {
  set_has_remarkid();
  remarkid_ = value;
}

// optional string miaoshu = 5;
inline bool festivalmuban_leichong::has_miaoshu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_leichong::set_has_miaoshu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_leichong::clear_has_miaoshu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_leichong::clear_miaoshu() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    miaoshu_->clear();
  }
  clear_has_miaoshu();
}
inline const ::std::string& festivalmuban_leichong::miaoshu() const {
  return *miaoshu_;
}
inline void festivalmuban_leichong::set_miaoshu(const ::std::string& value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_leichong::set_miaoshu(const char* value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_leichong::set_miaoshu(const char* value, size_t size) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_leichong::mutable_miaoshu() {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  return miaoshu_;
}
inline ::std::string* festivalmuban_leichong::release_miaoshu() {
  clear_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshu_;
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_leichong::set_allocated_miaoshu(::std::string* miaoshu) {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshu) {
    set_has_miaoshu();
    miaoshu_ = miaoshu;
  } else {
    clear_has_miaoshu();
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 jiangLi = 6;
inline bool festivalmuban_leichong::has_jiangli() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_leichong::set_has_jiangli() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_leichong::clear_has_jiangli() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_leichong::clear_jiangli() {
  jiangli_ = GOOGLE_LONGLONG(0);
  clear_has_jiangli();
}
inline ::google::protobuf::int64 festivalmuban_leichong::jiangli() const {
  return jiangli_;
}
inline void festivalmuban_leichong::set_jiangli(::google::protobuf::int64 value) {
  set_has_jiangli();
  jiangli_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_leichong

// repeated .proto_ff.festivalmuban_leichong festivalmuban_leichong_List = 1;
inline int Sheet_festivalmuban_leichong::festivalmuban_leichong_list_size() const {
  return festivalmuban_leichong_list_.size();
}
inline void Sheet_festivalmuban_leichong::clear_festivalmuban_leichong_list() {
  festivalmuban_leichong_list_.Clear();
}
inline const ::proto_ff::festivalmuban_leichong& Sheet_festivalmuban_leichong::festivalmuban_leichong_list(int index) const {
  return festivalmuban_leichong_list_.Get(index);
}
inline ::proto_ff::festivalmuban_leichong* Sheet_festivalmuban_leichong::mutable_festivalmuban_leichong_list(int index) {
  return festivalmuban_leichong_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_leichong* Sheet_festivalmuban_leichong::add_festivalmuban_leichong_list() {
  return festivalmuban_leichong_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leichong >&
Sheet_festivalmuban_leichong::festivalmuban_leichong_list() const {
  return festivalmuban_leichong_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leichong >*
Sheet_festivalmuban_leichong::mutable_festivalmuban_leichong_list() {
  return &festivalmuban_leichong_list_;
}

// -------------------------------------------------------------------

// festivalmuban_duihuan

// optional int32 tiaoJianId = 1;
inline bool festivalmuban_duihuan::has_tiaojianid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_duihuan::set_has_tiaojianid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_duihuan::clear_has_tiaojianid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_duihuan::clear_tiaojianid() {
  tiaojianid_ = 0;
  clear_has_tiaojianid();
}
inline ::google::protobuf::int32 festivalmuban_duihuan::tiaojianid() const {
  return tiaojianid_;
}
inline void festivalmuban_duihuan::set_tiaojianid(::google::protobuf::int32 value) {
  set_has_tiaojianid();
  tiaojianid_ = value;
}

// optional int64 prizeId = 2;
inline bool festivalmuban_duihuan::has_prizeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_duihuan::set_has_prizeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_duihuan::clear_has_prizeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_duihuan::clear_prizeid() {
  prizeid_ = GOOGLE_LONGLONG(0);
  clear_has_prizeid();
}
inline ::google::protobuf::int64 festivalmuban_duihuan::prizeid() const {
  return prizeid_;
}
inline void festivalmuban_duihuan::set_prizeid(::google::protobuf::int64 value) {
  set_has_prizeid();
  prizeid_ = value;
}

// optional int32 prof = 3;
inline bool festivalmuban_duihuan::has_prof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_duihuan::set_has_prof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_duihuan::clear_has_prof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_duihuan::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 festivalmuban_duihuan::prof() const {
  return prof_;
}
inline void festivalmuban_duihuan::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 prizeNum = 4;
inline bool festivalmuban_duihuan::has_prizenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_duihuan::set_has_prizenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_duihuan::clear_has_prizenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_duihuan::clear_prizenum() {
  prizenum_ = 0;
  clear_has_prizenum();
}
inline ::google::protobuf::int32 festivalmuban_duihuan::prizenum() const {
  return prizenum_;
}
inline void festivalmuban_duihuan::set_prizenum(::google::protobuf::int32 value) {
  set_has_prizenum();
  prizenum_ = value;
}

// optional int64 propId = 5;
inline bool festivalmuban_duihuan::has_propid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_duihuan::set_has_propid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_duihuan::clear_has_propid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_duihuan::clear_propid() {
  propid_ = GOOGLE_LONGLONG(0);
  clear_has_propid();
}
inline ::google::protobuf::int64 festivalmuban_duihuan::propid() const {
  return propid_;
}
inline void festivalmuban_duihuan::set_propid(::google::protobuf::int64 value) {
  set_has_propid();
  propid_ = value;
}

// optional int32 propNum = 6;
inline bool festivalmuban_duihuan::has_propnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_duihuan::set_has_propnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_duihuan::clear_has_propnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_duihuan::clear_propnum() {
  propnum_ = 0;
  clear_has_propnum();
}
inline ::google::protobuf::int32 festivalmuban_duihuan::propnum() const {
  return propnum_;
}
inline void festivalmuban_duihuan::set_propnum(::google::protobuf::int32 value) {
  set_has_propnum();
  propnum_ = value;
}

// optional int32 times = 7;
inline bool festivalmuban_duihuan::has_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_duihuan::set_has_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_duihuan::clear_has_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_duihuan::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 festivalmuban_duihuan::times() const {
  return times_;
}
inline void festivalmuban_duihuan::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_duihuan

// repeated .proto_ff.festivalmuban_duihuan festivalmuban_duihuan_List = 1;
inline int Sheet_festivalmuban_duihuan::festivalmuban_duihuan_list_size() const {
  return festivalmuban_duihuan_list_.size();
}
inline void Sheet_festivalmuban_duihuan::clear_festivalmuban_duihuan_list() {
  festivalmuban_duihuan_list_.Clear();
}
inline const ::proto_ff::festivalmuban_duihuan& Sheet_festivalmuban_duihuan::festivalmuban_duihuan_list(int index) const {
  return festivalmuban_duihuan_list_.Get(index);
}
inline ::proto_ff::festivalmuban_duihuan* Sheet_festivalmuban_duihuan::mutable_festivalmuban_duihuan_list(int index) {
  return festivalmuban_duihuan_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_duihuan* Sheet_festivalmuban_duihuan::add_festivalmuban_duihuan_list() {
  return festivalmuban_duihuan_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_duihuan >&
Sheet_festivalmuban_duihuan::festivalmuban_duihuan_list() const {
  return festivalmuban_duihuan_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_duihuan >*
Sheet_festivalmuban_duihuan::mutable_festivalmuban_duihuan_list() {
  return &festivalmuban_duihuan_list_;
}

// -------------------------------------------------------------------

// festivald_diaoluo

// optional int32 id = 1;
inline bool festivald_diaoluo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivald_diaoluo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivald_diaoluo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivald_diaoluo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivald_diaoluo::id() const {
  return id_;
}
inline void festivald_diaoluo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 mixLevel = 2;
inline bool festivald_diaoluo::has_mixlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivald_diaoluo::set_has_mixlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivald_diaoluo::clear_has_mixlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivald_diaoluo::clear_mixlevel() {
  mixlevel_ = 0;
  clear_has_mixlevel();
}
inline ::google::protobuf::int32 festivald_diaoluo::mixlevel() const {
  return mixlevel_;
}
inline void festivald_diaoluo::set_mixlevel(::google::protobuf::int32 value) {
  set_has_mixlevel();
  mixlevel_ = value;
}

// optional int32 bossType = 3;
inline bool festivald_diaoluo::has_bosstype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivald_diaoluo::set_has_bosstype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivald_diaoluo::clear_has_bosstype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivald_diaoluo::clear_bosstype() {
  bosstype_ = 0;
  clear_has_bosstype();
}
inline ::google::protobuf::int32 festivald_diaoluo::bosstype() const {
  return bosstype_;
}
inline void festivald_diaoluo::set_bosstype(::google::protobuf::int32 value) {
  set_has_bosstype();
  bosstype_ = value;
}

// optional string dropNum = 4;
inline bool festivald_diaoluo::has_dropnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivald_diaoluo::set_has_dropnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivald_diaoluo::clear_has_dropnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivald_diaoluo::clear_dropnum() {
  if (dropnum_ != &::google::protobuf::internal::kEmptyString) {
    dropnum_->clear();
  }
  clear_has_dropnum();
}
inline const ::std::string& festivald_diaoluo::dropnum() const {
  return *dropnum_;
}
inline void festivald_diaoluo::set_dropnum(const ::std::string& value) {
  set_has_dropnum();
  if (dropnum_ == &::google::protobuf::internal::kEmptyString) {
    dropnum_ = new ::std::string;
  }
  dropnum_->assign(value);
}
inline void festivald_diaoluo::set_dropnum(const char* value) {
  set_has_dropnum();
  if (dropnum_ == &::google::protobuf::internal::kEmptyString) {
    dropnum_ = new ::std::string;
  }
  dropnum_->assign(value);
}
inline void festivald_diaoluo::set_dropnum(const char* value, size_t size) {
  set_has_dropnum();
  if (dropnum_ == &::google::protobuf::internal::kEmptyString) {
    dropnum_ = new ::std::string;
  }
  dropnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivald_diaoluo::mutable_dropnum() {
  set_has_dropnum();
  if (dropnum_ == &::google::protobuf::internal::kEmptyString) {
    dropnum_ = new ::std::string;
  }
  return dropnum_;
}
inline ::std::string* festivald_diaoluo::release_dropnum() {
  clear_has_dropnum();
  if (dropnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dropnum_;
    dropnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivald_diaoluo::set_allocated_dropnum(::std::string* dropnum) {
  if (dropnum_ != &::google::protobuf::internal::kEmptyString) {
    delete dropnum_;
  }
  if (dropnum) {
    set_has_dropnum();
    dropnum_ = dropnum;
  } else {
    clear_has_dropnum();
    dropnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dropRand = 5;
inline bool festivald_diaoluo::has_droprand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivald_diaoluo::set_has_droprand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivald_diaoluo::clear_has_droprand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivald_diaoluo::clear_droprand() {
  if (droprand_ != &::google::protobuf::internal::kEmptyString) {
    droprand_->clear();
  }
  clear_has_droprand();
}
inline const ::std::string& festivald_diaoluo::droprand() const {
  return *droprand_;
}
inline void festivald_diaoluo::set_droprand(const ::std::string& value) {
  set_has_droprand();
  if (droprand_ == &::google::protobuf::internal::kEmptyString) {
    droprand_ = new ::std::string;
  }
  droprand_->assign(value);
}
inline void festivald_diaoluo::set_droprand(const char* value) {
  set_has_droprand();
  if (droprand_ == &::google::protobuf::internal::kEmptyString) {
    droprand_ = new ::std::string;
  }
  droprand_->assign(value);
}
inline void festivald_diaoluo::set_droprand(const char* value, size_t size) {
  set_has_droprand();
  if (droprand_ == &::google::protobuf::internal::kEmptyString) {
    droprand_ = new ::std::string;
  }
  droprand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivald_diaoluo::mutable_droprand() {
  set_has_droprand();
  if (droprand_ == &::google::protobuf::internal::kEmptyString) {
    droprand_ = new ::std::string;
  }
  return droprand_;
}
inline ::std::string* festivald_diaoluo::release_droprand() {
  clear_has_droprand();
  if (droprand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = droprand_;
    droprand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivald_diaoluo::set_allocated_droprand(::std::string* droprand) {
  if (droprand_ != &::google::protobuf::internal::kEmptyString) {
    delete droprand_;
  }
  if (droprand) {
    set_has_droprand();
    droprand_ = droprand;
  } else {
    clear_has_droprand();
    droprand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_festivald_diaoluo

// repeated .proto_ff.festivald_diaoluo festivald_diaoluo_List = 1;
inline int Sheet_festivald_diaoluo::festivald_diaoluo_list_size() const {
  return festivald_diaoluo_list_.size();
}
inline void Sheet_festivald_diaoluo::clear_festivald_diaoluo_list() {
  festivald_diaoluo_list_.Clear();
}
inline const ::proto_ff::festivald_diaoluo& Sheet_festivald_diaoluo::festivald_diaoluo_list(int index) const {
  return festivald_diaoluo_list_.Get(index);
}
inline ::proto_ff::festivald_diaoluo* Sheet_festivald_diaoluo::mutable_festivald_diaoluo_list(int index) {
  return festivald_diaoluo_list_.Mutable(index);
}
inline ::proto_ff::festivald_diaoluo* Sheet_festivald_diaoluo::add_festivald_diaoluo_list() {
  return festivald_diaoluo_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivald_diaoluo >&
Sheet_festivald_diaoluo::festivald_diaoluo_list() const {
  return festivald_diaoluo_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivald_diaoluo >*
Sheet_festivald_diaoluo::mutable_festivald_diaoluo_list() {
  return &festivald_diaoluo_list_;
}

// -------------------------------------------------------------------

// festivalmuban_leixiao

// optional int32 id = 1;
inline bool festivalmuban_leixiao::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_leixiao::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_leixiao::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_leixiao::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_leixiao::id() const {
  return id_;
}
inline void festivalmuban_leixiao::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool festivalmuban_leixiao::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_leixiao::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_leixiao::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_leixiao::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 festivalmuban_leixiao::type() const {
  return type_;
}
inline void festivalmuban_leixiao::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 xiaoFei = 3;
inline bool festivalmuban_leixiao::has_xiaofei() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_leixiao::set_has_xiaofei() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_leixiao::clear_has_xiaofei() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_leixiao::clear_xiaofei() {
  xiaofei_ = 0;
  clear_has_xiaofei();
}
inline ::google::protobuf::int32 festivalmuban_leixiao::xiaofei() const {
  return xiaofei_;
}
inline void festivalmuban_leixiao::set_xiaofei(::google::protobuf::int32 value) {
  set_has_xiaofei();
  xiaofei_ = value;
}

// optional int32 remarkId = 4;
inline bool festivalmuban_leixiao::has_remarkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_leixiao::set_has_remarkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_leixiao::clear_has_remarkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_leixiao::clear_remarkid() {
  remarkid_ = 0;
  clear_has_remarkid();
}
inline ::google::protobuf::int32 festivalmuban_leixiao::remarkid() const {
  return remarkid_;
}
inline void festivalmuban_leixiao::set_remarkid(::google::protobuf::int32 value) {
  set_has_remarkid();
  remarkid_ = value;
}

// optional string miaoshu = 5;
inline bool festivalmuban_leixiao::has_miaoshu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_leixiao::set_has_miaoshu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_leixiao::clear_has_miaoshu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_leixiao::clear_miaoshu() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    miaoshu_->clear();
  }
  clear_has_miaoshu();
}
inline const ::std::string& festivalmuban_leixiao::miaoshu() const {
  return *miaoshu_;
}
inline void festivalmuban_leixiao::set_miaoshu(const ::std::string& value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_leixiao::set_miaoshu(const char* value) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(value);
}
inline void festivalmuban_leixiao::set_miaoshu(const char* value, size_t size) {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  miaoshu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_leixiao::mutable_miaoshu() {
  set_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    miaoshu_ = new ::std::string;
  }
  return miaoshu_;
}
inline ::std::string* festivalmuban_leixiao::release_miaoshu() {
  clear_has_miaoshu();
  if (miaoshu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miaoshu_;
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_leixiao::set_allocated_miaoshu(::std::string* miaoshu) {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshu) {
    set_has_miaoshu();
    miaoshu_ = miaoshu;
  } else {
    clear_has_miaoshu();
    miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 jiangLi = 6;
inline bool festivalmuban_leixiao::has_jiangli() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_leixiao::set_has_jiangli() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_leixiao::clear_has_jiangli() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_leixiao::clear_jiangli() {
  jiangli_ = GOOGLE_LONGLONG(0);
  clear_has_jiangli();
}
inline ::google::protobuf::int64 festivalmuban_leixiao::jiangli() const {
  return jiangli_;
}
inline void festivalmuban_leixiao::set_jiangli(::google::protobuf::int64 value) {
  set_has_jiangli();
  jiangli_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_leixiao

// repeated .proto_ff.festivalmuban_leixiao festivalmuban_leixiao_List = 1;
inline int Sheet_festivalmuban_leixiao::festivalmuban_leixiao_list_size() const {
  return festivalmuban_leixiao_list_.size();
}
inline void Sheet_festivalmuban_leixiao::clear_festivalmuban_leixiao_list() {
  festivalmuban_leixiao_list_.Clear();
}
inline const ::proto_ff::festivalmuban_leixiao& Sheet_festivalmuban_leixiao::festivalmuban_leixiao_list(int index) const {
  return festivalmuban_leixiao_list_.Get(index);
}
inline ::proto_ff::festivalmuban_leixiao* Sheet_festivalmuban_leixiao::mutable_festivalmuban_leixiao_list(int index) {
  return festivalmuban_leixiao_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_leixiao* Sheet_festivalmuban_leixiao::add_festivalmuban_leixiao_list() {
  return festivalmuban_leixiao_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leixiao >&
Sheet_festivalmuban_leixiao::festivalmuban_leixiao_list() const {
  return festivalmuban_leixiao_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_leixiao >*
Sheet_festivalmuban_leixiao::mutable_festivalmuban_leixiao_list() {
  return &festivalmuban_leixiao_list_;
}

// -------------------------------------------------------------------

// festivalmuban_shouchong

// optional int32 id = 1;
inline bool festivalmuban_shouchong::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_shouchong::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_shouchong::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_shouchong::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_shouchong::id() const {
  return id_;
}
inline void festivalmuban_shouchong::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 jiangLi = 2;
inline bool festivalmuban_shouchong::has_jiangli() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_shouchong::set_has_jiangli() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_shouchong::clear_has_jiangli() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_shouchong::clear_jiangli() {
  jiangli_ = GOOGLE_LONGLONG(0);
  clear_has_jiangli();
}
inline ::google::protobuf::int64 festivalmuban_shouchong::jiangli() const {
  return jiangli_;
}
inline void festivalmuban_shouchong::set_jiangli(::google::protobuf::int64 value) {
  set_has_jiangli();
  jiangli_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_shouchong

// repeated .proto_ff.festivalmuban_shouchong festivalmuban_shouchong_List = 1;
inline int Sheet_festivalmuban_shouchong::festivalmuban_shouchong_list_size() const {
  return festivalmuban_shouchong_list_.size();
}
inline void Sheet_festivalmuban_shouchong::clear_festivalmuban_shouchong_list() {
  festivalmuban_shouchong_list_.Clear();
}
inline const ::proto_ff::festivalmuban_shouchong& Sheet_festivalmuban_shouchong::festivalmuban_shouchong_list(int index) const {
  return festivalmuban_shouchong_list_.Get(index);
}
inline ::proto_ff::festivalmuban_shouchong* Sheet_festivalmuban_shouchong::mutable_festivalmuban_shouchong_list(int index) {
  return festivalmuban_shouchong_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_shouchong* Sheet_festivalmuban_shouchong::add_festivalmuban_shouchong_list() {
  return festivalmuban_shouchong_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shouchong >&
Sheet_festivalmuban_shouchong::festivalmuban_shouchong_list() const {
  return festivalmuban_shouchong_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shouchong >*
Sheet_festivalmuban_shouchong::mutable_festivalmuban_shouchong_list() {
  return &festivalmuban_shouchong_list_;
}

// -------------------------------------------------------------------

// festivalmuban_yanhua

// optional int32 id = 1;
inline bool festivalmuban_yanhua::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_yanhua::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_yanhua::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_yanhua::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_yanhua::id() const {
  return id_;
}
inline void festivalmuban_yanhua::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 itemid = 2;
inline bool festivalmuban_yanhua::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_yanhua::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_yanhua::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_yanhua::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 festivalmuban_yanhua::itemid() const {
  return itemid_;
}
inline void festivalmuban_yanhua::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 num = 3;
inline bool festivalmuban_yanhua::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_yanhua::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_yanhua::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_yanhua::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalmuban_yanhua::num() const {
  return num_;
}
inline void festivalmuban_yanhua::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 prof = 4;
inline bool festivalmuban_yanhua::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_yanhua::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_yanhua::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_yanhua::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 festivalmuban_yanhua::prof() const {
  return prof_;
}
inline void festivalmuban_yanhua::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 type = 5;
inline bool festivalmuban_yanhua::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_yanhua::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_yanhua::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_yanhua::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 festivalmuban_yanhua::type() const {
  return type_;
}
inline void festivalmuban_yanhua::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 order = 6;
inline bool festivalmuban_yanhua::has_order() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_yanhua::set_has_order() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_yanhua::clear_has_order() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_yanhua::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 festivalmuban_yanhua::order() const {
  return order_;
}
inline void festivalmuban_yanhua::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional int32 probability = 7;
inline bool festivalmuban_yanhua::has_probability() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_yanhua::set_has_probability() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_yanhua::clear_has_probability() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_yanhua::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline ::google::protobuf::int32 festivalmuban_yanhua::probability() const {
  return probability_;
}
inline void festivalmuban_yanhua::set_probability(::google::protobuf::int32 value) {
  set_has_probability();
  probability_ = value;
}

// optional int64 relation = 8;
inline bool festivalmuban_yanhua::has_relation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivalmuban_yanhua::set_has_relation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivalmuban_yanhua::clear_has_relation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivalmuban_yanhua::clear_relation() {
  relation_ = GOOGLE_LONGLONG(0);
  clear_has_relation();
}
inline ::google::protobuf::int64 festivalmuban_yanhua::relation() const {
  return relation_;
}
inline void festivalmuban_yanhua::set_relation(::google::protobuf::int64 value) {
  set_has_relation();
  relation_ = value;
}

// optional int64 modelid = 9;
inline bool festivalmuban_yanhua::has_modelid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void festivalmuban_yanhua::set_has_modelid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void festivalmuban_yanhua::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void festivalmuban_yanhua::clear_modelid() {
  modelid_ = GOOGLE_LONGLONG(0);
  clear_has_modelid();
}
inline ::google::protobuf::int64 festivalmuban_yanhua::modelid() const {
  return modelid_;
}
inline void festivalmuban_yanhua::set_modelid(::google::protobuf::int64 value) {
  set_has_modelid();
  modelid_ = value;
}

// optional int32 modeltype = 10;
inline bool festivalmuban_yanhua::has_modeltype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void festivalmuban_yanhua::set_has_modeltype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void festivalmuban_yanhua::clear_has_modeltype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void festivalmuban_yanhua::clear_modeltype() {
  modeltype_ = 0;
  clear_has_modeltype();
}
inline ::google::protobuf::int32 festivalmuban_yanhua::modeltype() const {
  return modeltype_;
}
inline void festivalmuban_yanhua::set_modeltype(::google::protobuf::int32 value) {
  set_has_modeltype();
  modeltype_ = value;
}

// optional string scale = 11;
inline bool festivalmuban_yanhua::has_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void festivalmuban_yanhua::set_has_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void festivalmuban_yanhua::clear_has_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void festivalmuban_yanhua::clear_scale() {
  if (scale_ != &::google::protobuf::internal::kEmptyString) {
    scale_->clear();
  }
  clear_has_scale();
}
inline const ::std::string& festivalmuban_yanhua::scale() const {
  return *scale_;
}
inline void festivalmuban_yanhua::set_scale(const ::std::string& value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
}
inline void festivalmuban_yanhua::set_scale(const char* value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
}
inline void festivalmuban_yanhua::set_scale(const char* value, size_t size) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_yanhua::mutable_scale() {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    scale_ = new ::std::string;
  }
  return scale_;
}
inline ::std::string* festivalmuban_yanhua::release_scale() {
  clear_has_scale();
  if (scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scale_;
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_yanhua::set_allocated_scale(::std::string* scale) {
  if (scale_ != &::google::protobuf::internal::kEmptyString) {
    delete scale_;
  }
  if (scale) {
    set_has_scale();
    scale_ = scale;
  } else {
    clear_has_scale();
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_yanhua

// repeated .proto_ff.festivalmuban_yanhua festivalmuban_yanhua_List = 1;
inline int Sheet_festivalmuban_yanhua::festivalmuban_yanhua_list_size() const {
  return festivalmuban_yanhua_list_.size();
}
inline void Sheet_festivalmuban_yanhua::clear_festivalmuban_yanhua_list() {
  festivalmuban_yanhua_list_.Clear();
}
inline const ::proto_ff::festivalmuban_yanhua& Sheet_festivalmuban_yanhua::festivalmuban_yanhua_list(int index) const {
  return festivalmuban_yanhua_list_.Get(index);
}
inline ::proto_ff::festivalmuban_yanhua* Sheet_festivalmuban_yanhua::mutable_festivalmuban_yanhua_list(int index) {
  return festivalmuban_yanhua_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_yanhua* Sheet_festivalmuban_yanhua::add_festivalmuban_yanhua_list() {
  return festivalmuban_yanhua_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_yanhua >&
Sheet_festivalmuban_yanhua::festivalmuban_yanhua_list() const {
  return festivalmuban_yanhua_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_yanhua >*
Sheet_festivalmuban_yanhua::mutable_festivalmuban_yanhua_list() {
  return &festivalmuban_yanhua_list_;
}

// -------------------------------------------------------------------

// festivalyanhuaConstant

// optional int64 id = 1;
inline bool festivalyanhuaConstant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalyanhuaConstant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalyanhuaConstant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalyanhuaConstant::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 festivalyanhuaConstant::id() const {
  return id_;
}
inline void festivalyanhuaConstant::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 costItem = 2;
inline bool festivalyanhuaConstant::has_costitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalyanhuaConstant::set_has_costitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalyanhuaConstant::clear_has_costitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalyanhuaConstant::clear_costitem() {
  costitem_ = GOOGLE_LONGLONG(0);
  clear_has_costitem();
}
inline ::google::protobuf::int64 festivalyanhuaConstant::costitem() const {
  return costitem_;
}
inline void festivalyanhuaConstant::set_costitem(::google::protobuf::int64 value) {
  set_has_costitem();
  costitem_ = value;
}

// optional int32 rewardPool = 3;
inline bool festivalyanhuaConstant::has_rewardpool() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalyanhuaConstant::set_has_rewardpool() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalyanhuaConstant::clear_has_rewardpool() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalyanhuaConstant::clear_rewardpool() {
  rewardpool_ = 0;
  clear_has_rewardpool();
}
inline ::google::protobuf::int32 festivalyanhuaConstant::rewardpool() const {
  return rewardpool_;
}
inline void festivalyanhuaConstant::set_rewardpool(::google::protobuf::int32 value) {
  set_has_rewardpool();
  rewardpool_ = value;
}

// optional int32 coinTye = 4;
inline bool festivalyanhuaConstant::has_cointye() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalyanhuaConstant::set_has_cointye() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalyanhuaConstant::clear_has_cointye() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalyanhuaConstant::clear_cointye() {
  cointye_ = 0;
  clear_has_cointye();
}
inline ::google::protobuf::int32 festivalyanhuaConstant::cointye() const {
  return cointye_;
}
inline void festivalyanhuaConstant::set_cointye(::google::protobuf::int32 value) {
  set_has_cointye();
  cointye_ = value;
}

// optional int32 number = 5;
inline bool festivalyanhuaConstant::has_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalyanhuaConstant::set_has_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalyanhuaConstant::clear_has_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalyanhuaConstant::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 festivalyanhuaConstant::number() const {
  return number_;
}
inline void festivalyanhuaConstant::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalyanhuaConstant

// repeated .proto_ff.festivalyanhuaConstant festivalyanhuaConstant_List = 1;
inline int Sheet_festivalyanhuaConstant::festivalyanhuaconstant_list_size() const {
  return festivalyanhuaconstant_list_.size();
}
inline void Sheet_festivalyanhuaConstant::clear_festivalyanhuaconstant_list() {
  festivalyanhuaconstant_list_.Clear();
}
inline const ::proto_ff::festivalyanhuaConstant& Sheet_festivalyanhuaConstant::festivalyanhuaconstant_list(int index) const {
  return festivalyanhuaconstant_list_.Get(index);
}
inline ::proto_ff::festivalyanhuaConstant* Sheet_festivalyanhuaConstant::mutable_festivalyanhuaconstant_list(int index) {
  return festivalyanhuaconstant_list_.Mutable(index);
}
inline ::proto_ff::festivalyanhuaConstant* Sheet_festivalyanhuaConstant::add_festivalyanhuaconstant_list() {
  return festivalyanhuaconstant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalyanhuaConstant >&
Sheet_festivalyanhuaConstant::festivalyanhuaconstant_list() const {
  return festivalyanhuaconstant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalyanhuaConstant >*
Sheet_festivalyanhuaConstant::mutable_festivalyanhuaconstant_list() {
  return &festivalyanhuaconstant_list_;
}

// -------------------------------------------------------------------

// festivalmuban_shop

// optional int64 id = 1;
inline bool festivalmuban_shop::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_shop::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_shop::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_shop::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 festivalmuban_shop::id() const {
  return id_;
}
inline void festivalmuban_shop::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 itemid = 2;
inline bool festivalmuban_shop::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_shop::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_shop::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_shop::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 festivalmuban_shop::itemid() const {
  return itemid_;
}
inline void festivalmuban_shop::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 prof = 3;
inline bool festivalmuban_shop::has_prof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_shop::set_has_prof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_shop::clear_has_prof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_shop::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 festivalmuban_shop::prof() const {
  return prof_;
}
inline void festivalmuban_shop::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 priceA = 4;
inline bool festivalmuban_shop::has_pricea() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_shop::set_has_pricea() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_shop::clear_has_pricea() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_shop::clear_pricea() {
  pricea_ = 0;
  clear_has_pricea();
}
inline ::google::protobuf::int32 festivalmuban_shop::pricea() const {
  return pricea_;
}
inline void festivalmuban_shop::set_pricea(::google::protobuf::int32 value) {
  set_has_pricea();
  pricea_ = value;
}

// optional int32 priceB = 5;
inline bool festivalmuban_shop::has_priceb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_shop::set_has_priceb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_shop::clear_has_priceb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_shop::clear_priceb() {
  priceb_ = 0;
  clear_has_priceb();
}
inline ::google::protobuf::int32 festivalmuban_shop::priceb() const {
  return priceb_;
}
inline void festivalmuban_shop::set_priceb(::google::protobuf::int32 value) {
  set_has_priceb();
  priceb_ = value;
}

// optional int32 currency = 6;
inline bool festivalmuban_shop::has_currency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_shop::set_has_currency() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_shop::clear_has_currency() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_shop::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 festivalmuban_shop::currency() const {
  return currency_;
}
inline void festivalmuban_shop::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// optional int32 discount = 7;
inline bool festivalmuban_shop::has_discount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_shop::set_has_discount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_shop::clear_has_discount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_shop::clear_discount() {
  discount_ = 0;
  clear_has_discount();
}
inline ::google::protobuf::int32 festivalmuban_shop::discount() const {
  return discount_;
}
inline void festivalmuban_shop::set_discount(::google::protobuf::int32 value) {
  set_has_discount();
  discount_ = value;
}

// optional int32 quantity = 8;
inline bool festivalmuban_shop::has_quantity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivalmuban_shop::set_has_quantity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivalmuban_shop::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivalmuban_shop::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
inline ::google::protobuf::int32 festivalmuban_shop::quantity() const {
  return quantity_;
}
inline void festivalmuban_shop::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_shop

// repeated .proto_ff.festivalmuban_shop festivalmuban_shop_List = 1;
inline int Sheet_festivalmuban_shop::festivalmuban_shop_list_size() const {
  return festivalmuban_shop_list_.size();
}
inline void Sheet_festivalmuban_shop::clear_festivalmuban_shop_list() {
  festivalmuban_shop_list_.Clear();
}
inline const ::proto_ff::festivalmuban_shop& Sheet_festivalmuban_shop::festivalmuban_shop_list(int index) const {
  return festivalmuban_shop_list_.Get(index);
}
inline ::proto_ff::festivalmuban_shop* Sheet_festivalmuban_shop::mutable_festivalmuban_shop_list(int index) {
  return festivalmuban_shop_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_shop* Sheet_festivalmuban_shop::add_festivalmuban_shop_list() {
  return festivalmuban_shop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shop >&
Sheet_festivalmuban_shop::festivalmuban_shop_list() const {
  return festivalmuban_shop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shop >*
Sheet_festivalmuban_shop::mutable_festivalmuban_shop_list() {
  return &festivalmuban_shop_list_;
}

// -------------------------------------------------------------------

// festivalmuban_czjb

// optional int32 id = 1;
inline bool festivalmuban_czjb::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_czjb::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_czjb::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_czjb::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_czjb::id() const {
  return id_;
}
inline void festivalmuban_czjb::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string RechargePoint = 2;
inline bool festivalmuban_czjb::has_rechargepoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_czjb::set_has_rechargepoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_czjb::clear_has_rechargepoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_czjb::clear_rechargepoint() {
  if (rechargepoint_ != &::google::protobuf::internal::kEmptyString) {
    rechargepoint_->clear();
  }
  clear_has_rechargepoint();
}
inline const ::std::string& festivalmuban_czjb::rechargepoint() const {
  return *rechargepoint_;
}
inline void festivalmuban_czjb::set_rechargepoint(const ::std::string& value) {
  set_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    rechargepoint_ = new ::std::string;
  }
  rechargepoint_->assign(value);
}
inline void festivalmuban_czjb::set_rechargepoint(const char* value) {
  set_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    rechargepoint_ = new ::std::string;
  }
  rechargepoint_->assign(value);
}
inline void festivalmuban_czjb::set_rechargepoint(const char* value, size_t size) {
  set_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    rechargepoint_ = new ::std::string;
  }
  rechargepoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_czjb::mutable_rechargepoint() {
  set_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    rechargepoint_ = new ::std::string;
  }
  return rechargepoint_;
}
inline ::std::string* festivalmuban_czjb::release_rechargepoint() {
  clear_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rechargepoint_;
    rechargepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_czjb::set_allocated_rechargepoint(::std::string* rechargepoint) {
  if (rechargepoint_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargepoint_;
  }
  if (rechargepoint) {
    set_has_rechargepoint();
    rechargepoint_ = rechargepoint;
  } else {
    clear_has_rechargepoint();
    rechargepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Perc = 3;
inline bool festivalmuban_czjb::has_perc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_czjb::set_has_perc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_czjb::clear_has_perc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_czjb::clear_perc() {
  perc_ = 0;
  clear_has_perc();
}
inline ::google::protobuf::int32 festivalmuban_czjb::perc() const {
  return perc_;
}
inline void festivalmuban_czjb::set_perc(::google::protobuf::int32 value) {
  set_has_perc();
  perc_ = value;
}

// optional int32 fristpresent = 4;
inline bool festivalmuban_czjb::has_fristpresent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_czjb::set_has_fristpresent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_czjb::clear_has_fristpresent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_czjb::clear_fristpresent() {
  fristpresent_ = 0;
  clear_has_fristpresent();
}
inline ::google::protobuf::int32 festivalmuban_czjb::fristpresent() const {
  return fristpresent_;
}
inline void festivalmuban_czjb::set_fristpresent(::google::protobuf::int32 value) {
  set_has_fristpresent();
  fristpresent_ = value;
}

// optional int32 presenttype = 5;
inline bool festivalmuban_czjb::has_presenttype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_czjb::set_has_presenttype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_czjb::clear_has_presenttype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_czjb::clear_presenttype() {
  presenttype_ = 0;
  clear_has_presenttype();
}
inline ::google::protobuf::int32 festivalmuban_czjb::presenttype() const {
  return presenttype_;
}
inline void festivalmuban_czjb::set_presenttype(::google::protobuf::int32 value) {
  set_has_presenttype();
  presenttype_ = value;
}

// optional int32 Point = 6;
inline bool festivalmuban_czjb::has_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_czjb::set_has_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_czjb::clear_has_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_czjb::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 festivalmuban_czjb::point() const {
  return point_;
}
inline void festivalmuban_czjb::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_czjb

// repeated .proto_ff.festivalmuban_czjb festivalmuban_czjb_List = 1;
inline int Sheet_festivalmuban_czjb::festivalmuban_czjb_list_size() const {
  return festivalmuban_czjb_list_.size();
}
inline void Sheet_festivalmuban_czjb::clear_festivalmuban_czjb_list() {
  festivalmuban_czjb_list_.Clear();
}
inline const ::proto_ff::festivalmuban_czjb& Sheet_festivalmuban_czjb::festivalmuban_czjb_list(int index) const {
  return festivalmuban_czjb_list_.Get(index);
}
inline ::proto_ff::festivalmuban_czjb* Sheet_festivalmuban_czjb::mutable_festivalmuban_czjb_list(int index) {
  return festivalmuban_czjb_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_czjb* Sheet_festivalmuban_czjb::add_festivalmuban_czjb_list() {
  return festivalmuban_czjb_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_czjb >&
Sheet_festivalmuban_czjb::festivalmuban_czjb_list() const {
  return festivalmuban_czjb_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_czjb >*
Sheet_festivalmuban_czjb::mutable_festivalmuban_czjb_list() {
  return &festivalmuban_czjb_list_;
}

// -------------------------------------------------------------------

// festivalmuban_scsb

// optional int32 id = 1;
inline bool festivalmuban_scsb::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_scsb::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_scsb::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_scsb::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_scsb::id() const {
  return id_;
}
inline void festivalmuban_scsb::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string RechargePoint = 2;
inline bool festivalmuban_scsb::has_rechargepoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_scsb::set_has_rechargepoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_scsb::clear_has_rechargepoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_scsb::clear_rechargepoint() {
  if (rechargepoint_ != &::google::protobuf::internal::kEmptyString) {
    rechargepoint_->clear();
  }
  clear_has_rechargepoint();
}
inline const ::std::string& festivalmuban_scsb::rechargepoint() const {
  return *rechargepoint_;
}
inline void festivalmuban_scsb::set_rechargepoint(const ::std::string& value) {
  set_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    rechargepoint_ = new ::std::string;
  }
  rechargepoint_->assign(value);
}
inline void festivalmuban_scsb::set_rechargepoint(const char* value) {
  set_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    rechargepoint_ = new ::std::string;
  }
  rechargepoint_->assign(value);
}
inline void festivalmuban_scsb::set_rechargepoint(const char* value, size_t size) {
  set_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    rechargepoint_ = new ::std::string;
  }
  rechargepoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_scsb::mutable_rechargepoint() {
  set_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    rechargepoint_ = new ::std::string;
  }
  return rechargepoint_;
}
inline ::std::string* festivalmuban_scsb::release_rechargepoint() {
  clear_has_rechargepoint();
  if (rechargepoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rechargepoint_;
    rechargepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_scsb::set_allocated_rechargepoint(::std::string* rechargepoint) {
  if (rechargepoint_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargepoint_;
  }
  if (rechargepoint) {
    set_has_rechargepoint();
    rechargepoint_ = rechargepoint;
  } else {
    clear_has_rechargepoint();
    rechargepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fristpresent = 3;
inline bool festivalmuban_scsb::has_fristpresent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_scsb::set_has_fristpresent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_scsb::clear_has_fristpresent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_scsb::clear_fristpresent() {
  fristpresent_ = 0;
  clear_has_fristpresent();
}
inline ::google::protobuf::int32 festivalmuban_scsb::fristpresent() const {
  return fristpresent_;
}
inline void festivalmuban_scsb::set_fristpresent(::google::protobuf::int32 value) {
  set_has_fristpresent();
  fristpresent_ = value;
}

// optional int32 presenttype = 4;
inline bool festivalmuban_scsb::has_presenttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_scsb::set_has_presenttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_scsb::clear_has_presenttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_scsb::clear_presenttype() {
  presenttype_ = 0;
  clear_has_presenttype();
}
inline ::google::protobuf::int32 festivalmuban_scsb::presenttype() const {
  return presenttype_;
}
inline void festivalmuban_scsb::set_presenttype(::google::protobuf::int32 value) {
  set_has_presenttype();
  presenttype_ = value;
}

// optional int32 Point = 5;
inline bool festivalmuban_scsb::has_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_scsb::set_has_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_scsb::clear_has_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_scsb::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 festivalmuban_scsb::point() const {
  return point_;
}
inline void festivalmuban_scsb::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_scsb

// repeated .proto_ff.festivalmuban_scsb festivalmuban_scsb_List = 1;
inline int Sheet_festivalmuban_scsb::festivalmuban_scsb_list_size() const {
  return festivalmuban_scsb_list_.size();
}
inline void Sheet_festivalmuban_scsb::clear_festivalmuban_scsb_list() {
  festivalmuban_scsb_list_.Clear();
}
inline const ::proto_ff::festivalmuban_scsb& Sheet_festivalmuban_scsb::festivalmuban_scsb_list(int index) const {
  return festivalmuban_scsb_list_.Get(index);
}
inline ::proto_ff::festivalmuban_scsb* Sheet_festivalmuban_scsb::mutable_festivalmuban_scsb_list(int index) {
  return festivalmuban_scsb_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_scsb* Sheet_festivalmuban_scsb::add_festivalmuban_scsb_list() {
  return festivalmuban_scsb_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_scsb >&
Sheet_festivalmuban_scsb::festivalmuban_scsb_list() const {
  return festivalmuban_scsb_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_scsb >*
Sheet_festivalmuban_scsb::mutable_festivalmuban_scsb_list() {
  return &festivalmuban_scsb_list_;
}

// -------------------------------------------------------------------

// festivalmuban_eggs

// optional int32 id = 1;
inline bool festivalmuban_eggs::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_eggs::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_eggs::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_eggs::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_eggs::id() const {
  return id_;
}
inline void festivalmuban_eggs::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 itemid = 2;
inline bool festivalmuban_eggs::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_eggs::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_eggs::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_eggs::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 festivalmuban_eggs::itemid() const {
  return itemid_;
}
inline void festivalmuban_eggs::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 num = 3;
inline bool festivalmuban_eggs::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_eggs::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_eggs::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_eggs::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 festivalmuban_eggs::num() const {
  return num_;
}
inline void festivalmuban_eggs::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 prof = 4;
inline bool festivalmuban_eggs::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_eggs::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_eggs::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_eggs::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 festivalmuban_eggs::prof() const {
  return prof_;
}
inline void festivalmuban_eggs::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 type = 5;
inline bool festivalmuban_eggs::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivalmuban_eggs::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivalmuban_eggs::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivalmuban_eggs::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 festivalmuban_eggs::type() const {
  return type_;
}
inline void festivalmuban_eggs::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 order = 6;
inline bool festivalmuban_eggs::has_order() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivalmuban_eggs::set_has_order() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivalmuban_eggs::clear_has_order() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivalmuban_eggs::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 festivalmuban_eggs::order() const {
  return order_;
}
inline void festivalmuban_eggs::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional int32 isnote = 7;
inline bool festivalmuban_eggs::has_isnote() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivalmuban_eggs::set_has_isnote() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivalmuban_eggs::clear_has_isnote() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivalmuban_eggs::clear_isnote() {
  isnote_ = 0;
  clear_has_isnote();
}
inline ::google::protobuf::int32 festivalmuban_eggs::isnote() const {
  return isnote_;
}
inline void festivalmuban_eggs::set_isnote(::google::protobuf::int32 value) {
  set_has_isnote();
  isnote_ = value;
}

// optional int32 probability = 8;
inline bool festivalmuban_eggs::has_probability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivalmuban_eggs::set_has_probability() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivalmuban_eggs::clear_has_probability() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivalmuban_eggs::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline ::google::protobuf::int32 festivalmuban_eggs::probability() const {
  return probability_;
}
inline void festivalmuban_eggs::set_probability(::google::protobuf::int32 value) {
  set_has_probability();
  probability_ = value;
}

// optional int64 relation = 9;
inline bool festivalmuban_eggs::has_relation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void festivalmuban_eggs::set_has_relation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void festivalmuban_eggs::clear_has_relation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void festivalmuban_eggs::clear_relation() {
  relation_ = GOOGLE_LONGLONG(0);
  clear_has_relation();
}
inline ::google::protobuf::int64 festivalmuban_eggs::relation() const {
  return relation_;
}
inline void festivalmuban_eggs::set_relation(::google::protobuf::int64 value) {
  set_has_relation();
  relation_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_eggs

// repeated .proto_ff.festivalmuban_eggs festivalmuban_eggs_List = 1;
inline int Sheet_festivalmuban_eggs::festivalmuban_eggs_list_size() const {
  return festivalmuban_eggs_list_.size();
}
inline void Sheet_festivalmuban_eggs::clear_festivalmuban_eggs_list() {
  festivalmuban_eggs_list_.Clear();
}
inline const ::proto_ff::festivalmuban_eggs& Sheet_festivalmuban_eggs::festivalmuban_eggs_list(int index) const {
  return festivalmuban_eggs_list_.Get(index);
}
inline ::proto_ff::festivalmuban_eggs* Sheet_festivalmuban_eggs::mutable_festivalmuban_eggs_list(int index) {
  return festivalmuban_eggs_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_eggs* Sheet_festivalmuban_eggs::add_festivalmuban_eggs_list() {
  return festivalmuban_eggs_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_eggs >&
Sheet_festivalmuban_eggs::festivalmuban_eggs_list() const {
  return festivalmuban_eggs_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_eggs >*
Sheet_festivalmuban_eggs::mutable_festivalmuban_eggs_list() {
  return &festivalmuban_eggs_list_;
}

// -------------------------------------------------------------------

// festivaleggConstant

// optional int64 id = 1;
inline bool festivaleggConstant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivaleggConstant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivaleggConstant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivaleggConstant::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 festivaleggConstant::id() const {
  return id_;
}
inline void festivaleggConstant::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string exReward = 2;
inline bool festivaleggConstant::has_exreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivaleggConstant::set_has_exreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivaleggConstant::clear_has_exreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivaleggConstant::clear_exreward() {
  if (exreward_ != &::google::protobuf::internal::kEmptyString) {
    exreward_->clear();
  }
  clear_has_exreward();
}
inline const ::std::string& festivaleggConstant::exreward() const {
  return *exreward_;
}
inline void festivaleggConstant::set_exreward(const ::std::string& value) {
  set_has_exreward();
  if (exreward_ == &::google::protobuf::internal::kEmptyString) {
    exreward_ = new ::std::string;
  }
  exreward_->assign(value);
}
inline void festivaleggConstant::set_exreward(const char* value) {
  set_has_exreward();
  if (exreward_ == &::google::protobuf::internal::kEmptyString) {
    exreward_ = new ::std::string;
  }
  exreward_->assign(value);
}
inline void festivaleggConstant::set_exreward(const char* value, size_t size) {
  set_has_exreward();
  if (exreward_ == &::google::protobuf::internal::kEmptyString) {
    exreward_ = new ::std::string;
  }
  exreward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaleggConstant::mutable_exreward() {
  set_has_exreward();
  if (exreward_ == &::google::protobuf::internal::kEmptyString) {
    exreward_ = new ::std::string;
  }
  return exreward_;
}
inline ::std::string* festivaleggConstant::release_exreward() {
  clear_has_exreward();
  if (exreward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exreward_;
    exreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaleggConstant::set_allocated_exreward(::std::string* exreward) {
  if (exreward_ != &::google::protobuf::internal::kEmptyString) {
    delete exreward_;
  }
  if (exreward) {
    set_has_exreward();
    exreward_ = exreward;
  } else {
    clear_has_exreward();
    exreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 costItem = 3;
inline bool festivaleggConstant::has_costitem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivaleggConstant::set_has_costitem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivaleggConstant::clear_has_costitem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivaleggConstant::clear_costitem() {
  costitem_ = GOOGLE_LONGLONG(0);
  clear_has_costitem();
}
inline ::google::protobuf::int64 festivaleggConstant::costitem() const {
  return costitem_;
}
inline void festivaleggConstant::set_costitem(::google::protobuf::int64 value) {
  set_has_costitem();
  costitem_ = value;
}

// optional int32 freeTime = 4;
inline bool festivaleggConstant::has_freetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivaleggConstant::set_has_freetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivaleggConstant::clear_has_freetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivaleggConstant::clear_freetime() {
  freetime_ = 0;
  clear_has_freetime();
}
inline ::google::protobuf::int32 festivaleggConstant::freetime() const {
  return freetime_;
}
inline void festivaleggConstant::set_freetime(::google::protobuf::int32 value) {
  set_has_freetime();
  freetime_ = value;
}

// optional string poolChange = 5;
inline bool festivaleggConstant::has_poolchange() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void festivaleggConstant::set_has_poolchange() {
  _has_bits_[0] |= 0x00000010u;
}
inline void festivaleggConstant::clear_has_poolchange() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void festivaleggConstant::clear_poolchange() {
  if (poolchange_ != &::google::protobuf::internal::kEmptyString) {
    poolchange_->clear();
  }
  clear_has_poolchange();
}
inline const ::std::string& festivaleggConstant::poolchange() const {
  return *poolchange_;
}
inline void festivaleggConstant::set_poolchange(const ::std::string& value) {
  set_has_poolchange();
  if (poolchange_ == &::google::protobuf::internal::kEmptyString) {
    poolchange_ = new ::std::string;
  }
  poolchange_->assign(value);
}
inline void festivaleggConstant::set_poolchange(const char* value) {
  set_has_poolchange();
  if (poolchange_ == &::google::protobuf::internal::kEmptyString) {
    poolchange_ = new ::std::string;
  }
  poolchange_->assign(value);
}
inline void festivaleggConstant::set_poolchange(const char* value, size_t size) {
  set_has_poolchange();
  if (poolchange_ == &::google::protobuf::internal::kEmptyString) {
    poolchange_ = new ::std::string;
  }
  poolchange_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaleggConstant::mutable_poolchange() {
  set_has_poolchange();
  if (poolchange_ == &::google::protobuf::internal::kEmptyString) {
    poolchange_ = new ::std::string;
  }
  return poolchange_;
}
inline ::std::string* festivaleggConstant::release_poolchange() {
  clear_has_poolchange();
  if (poolchange_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poolchange_;
    poolchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaleggConstant::set_allocated_poolchange(::std::string* poolchange) {
  if (poolchange_ != &::google::protobuf::internal::kEmptyString) {
    delete poolchange_;
  }
  if (poolchange) {
    set_has_poolchange();
    poolchange_ = poolchange;
  } else {
    clear_has_poolchange();
    poolchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 specialRate = 6;
inline bool festivaleggConstant::has_specialrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void festivaleggConstant::set_has_specialrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void festivaleggConstant::clear_has_specialrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void festivaleggConstant::clear_specialrate() {
  specialrate_ = 0;
  clear_has_specialrate();
}
inline ::google::protobuf::int32 festivaleggConstant::specialrate() const {
  return specialrate_;
}
inline void festivaleggConstant::set_specialrate(::google::protobuf::int32 value) {
  set_has_specialrate();
  specialrate_ = value;
}

// optional int32 specialAddRate = 7;
inline bool festivaleggConstant::has_specialaddrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void festivaleggConstant::set_has_specialaddrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void festivaleggConstant::clear_has_specialaddrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void festivaleggConstant::clear_specialaddrate() {
  specialaddrate_ = 0;
  clear_has_specialaddrate();
}
inline ::google::protobuf::int32 festivaleggConstant::specialaddrate() const {
  return specialaddrate_;
}
inline void festivaleggConstant::set_specialaddrate(::google::protobuf::int32 value) {
  set_has_specialaddrate();
  specialaddrate_ = value;
}

// optional string flashCost = 8;
inline bool festivaleggConstant::has_flashcost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void festivaleggConstant::set_has_flashcost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void festivaleggConstant::clear_has_flashcost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void festivaleggConstant::clear_flashcost() {
  if (flashcost_ != &::google::protobuf::internal::kEmptyString) {
    flashcost_->clear();
  }
  clear_has_flashcost();
}
inline const ::std::string& festivaleggConstant::flashcost() const {
  return *flashcost_;
}
inline void festivaleggConstant::set_flashcost(const ::std::string& value) {
  set_has_flashcost();
  if (flashcost_ == &::google::protobuf::internal::kEmptyString) {
    flashcost_ = new ::std::string;
  }
  flashcost_->assign(value);
}
inline void festivaleggConstant::set_flashcost(const char* value) {
  set_has_flashcost();
  if (flashcost_ == &::google::protobuf::internal::kEmptyString) {
    flashcost_ = new ::std::string;
  }
  flashcost_->assign(value);
}
inline void festivaleggConstant::set_flashcost(const char* value, size_t size) {
  set_has_flashcost();
  if (flashcost_ == &::google::protobuf::internal::kEmptyString) {
    flashcost_ = new ::std::string;
  }
  flashcost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivaleggConstant::mutable_flashcost() {
  set_has_flashcost();
  if (flashcost_ == &::google::protobuf::internal::kEmptyString) {
    flashcost_ = new ::std::string;
  }
  return flashcost_;
}
inline ::std::string* festivaleggConstant::release_flashcost() {
  clear_has_flashcost();
  if (flashcost_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flashcost_;
    flashcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivaleggConstant::set_allocated_flashcost(::std::string* flashcost) {
  if (flashcost_ != &::google::protobuf::internal::kEmptyString) {
    delete flashcost_;
  }
  if (flashcost) {
    set_has_flashcost();
    flashcost_ = flashcost;
  } else {
    clear_has_flashcost();
    flashcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 limit = 9;
inline bool festivaleggConstant::has_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void festivaleggConstant::set_has_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void festivaleggConstant::clear_has_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void festivaleggConstant::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 festivaleggConstant::limit() const {
  return limit_;
}
inline void festivaleggConstant::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional int32 rewardPool = 10;
inline bool festivaleggConstant::has_rewardpool() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void festivaleggConstant::set_has_rewardpool() {
  _has_bits_[0] |= 0x00000200u;
}
inline void festivaleggConstant::clear_has_rewardpool() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void festivaleggConstant::clear_rewardpool() {
  rewardpool_ = 0;
  clear_has_rewardpool();
}
inline ::google::protobuf::int32 festivaleggConstant::rewardpool() const {
  return rewardpool_;
}
inline void festivaleggConstant::set_rewardpool(::google::protobuf::int32 value) {
  set_has_rewardpool();
  rewardpool_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivaleggConstant

// repeated .proto_ff.festivaleggConstant festivaleggConstant_List = 1;
inline int Sheet_festivaleggConstant::festivaleggconstant_list_size() const {
  return festivaleggconstant_list_.size();
}
inline void Sheet_festivaleggConstant::clear_festivaleggconstant_list() {
  festivaleggconstant_list_.Clear();
}
inline const ::proto_ff::festivaleggConstant& Sheet_festivaleggConstant::festivaleggconstant_list(int index) const {
  return festivaleggconstant_list_.Get(index);
}
inline ::proto_ff::festivaleggConstant* Sheet_festivaleggConstant::mutable_festivaleggconstant_list(int index) {
  return festivaleggconstant_list_.Mutable(index);
}
inline ::proto_ff::festivaleggConstant* Sheet_festivaleggConstant::add_festivaleggconstant_list() {
  return festivaleggconstant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaleggConstant >&
Sheet_festivaleggConstant::festivaleggconstant_list() const {
  return festivaleggconstant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivaleggConstant >*
Sheet_festivaleggConstant::mutable_festivaleggconstant_list() {
  return &festivaleggconstant_list_;
}

// -------------------------------------------------------------------

// festivalconstant

// optional int64 constantid = 1;
inline bool festivalconstant::has_constantid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalconstant::set_has_constantid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalconstant::clear_has_constantid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalconstant::clear_constantid() {
  constantid_ = GOOGLE_LONGLONG(0);
  clear_has_constantid();
}
inline ::google::protobuf::int64 festivalconstant::constantid() const {
  return constantid_;
}
inline void festivalconstant::set_constantid(::google::protobuf::int64 value) {
  set_has_constantid();
  constantid_ = value;
}

// optional int64 constantdata = 2;
inline bool festivalconstant::has_constantdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalconstant::set_has_constantdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalconstant::clear_has_constantdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalconstant::clear_constantdata() {
  constantdata_ = GOOGLE_LONGLONG(0);
  clear_has_constantdata();
}
inline ::google::protobuf::int64 festivalconstant::constantdata() const {
  return constantdata_;
}
inline void festivalconstant::set_constantdata(::google::protobuf::int64 value) {
  set_has_constantdata();
  constantdata_ = value;
}

// optional string stringdata = 3;
inline bool festivalconstant::has_stringdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalconstant::set_has_stringdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalconstant::clear_has_stringdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalconstant::clear_stringdata() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    stringdata_->clear();
  }
  clear_has_stringdata();
}
inline const ::std::string& festivalconstant::stringdata() const {
  return *stringdata_;
}
inline void festivalconstant::set_stringdata(const ::std::string& value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void festivalconstant::set_stringdata(const char* value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void festivalconstant::set_stringdata(const char* value, size_t size) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalconstant::mutable_stringdata() {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  return stringdata_;
}
inline ::std::string* festivalconstant::release_stringdata() {
  clear_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringdata_;
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalconstant::set_allocated_stringdata(::std::string* stringdata) {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (stringdata) {
    set_has_stringdata();
    stringdata_ = stringdata;
  } else {
    clear_has_stringdata();
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_festivalconstant

// repeated .proto_ff.festivalconstant festivalconstant_List = 1;
inline int Sheet_festivalconstant::festivalconstant_list_size() const {
  return festivalconstant_list_.size();
}
inline void Sheet_festivalconstant::clear_festivalconstant_list() {
  festivalconstant_list_.Clear();
}
inline const ::proto_ff::festivalconstant& Sheet_festivalconstant::festivalconstant_list(int index) const {
  return festivalconstant_list_.Get(index);
}
inline ::proto_ff::festivalconstant* Sheet_festivalconstant::mutable_festivalconstant_list(int index) {
  return festivalconstant_list_.Mutable(index);
}
inline ::proto_ff::festivalconstant* Sheet_festivalconstant::add_festivalconstant_list() {
  return festivalconstant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalconstant >&
Sheet_festivalconstant::festivalconstant_list() const {
  return festivalconstant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalconstant >*
Sheet_festivalconstant::mutable_festivalconstant_list() {
  return &festivalconstant_list_;
}

// -------------------------------------------------------------------

// festivalmuban_shousha

// optional int32 id = 1;
inline bool festivalmuban_shousha::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_shousha::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_shousha::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_shousha::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_shousha::id() const {
  return id_;
}
inline void festivalmuban_shousha::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 bossId = 2;
inline bool festivalmuban_shousha::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_shousha::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_shousha::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_shousha::clear_bossid() {
  bossid_ = GOOGLE_LONGLONG(0);
  clear_has_bossid();
}
inline ::google::protobuf::int64 festivalmuban_shousha::bossid() const {
  return bossid_;
}
inline void festivalmuban_shousha::set_bossid(::google::protobuf::int64 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional int64 boxId = 3;
inline bool festivalmuban_shousha::has_boxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_shousha::set_has_boxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_shousha::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_shousha::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 festivalmuban_shousha::boxid() const {
  return boxid_;
}
inline void festivalmuban_shousha::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int64 linkid = 4;
inline bool festivalmuban_shousha::has_linkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_shousha::set_has_linkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_shousha::clear_has_linkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_shousha::clear_linkid() {
  linkid_ = GOOGLE_LONGLONG(0);
  clear_has_linkid();
}
inline ::google::protobuf::int64 festivalmuban_shousha::linkid() const {
  return linkid_;
}
inline void festivalmuban_shousha::set_linkid(::google::protobuf::int64 value) {
  set_has_linkid();
  linkid_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_shousha

// repeated .proto_ff.festivalmuban_shousha festivalmuban_shousha_List = 1;
inline int Sheet_festivalmuban_shousha::festivalmuban_shousha_list_size() const {
  return festivalmuban_shousha_list_.size();
}
inline void Sheet_festivalmuban_shousha::clear_festivalmuban_shousha_list() {
  festivalmuban_shousha_list_.Clear();
}
inline const ::proto_ff::festivalmuban_shousha& Sheet_festivalmuban_shousha::festivalmuban_shousha_list(int index) const {
  return festivalmuban_shousha_list_.Get(index);
}
inline ::proto_ff::festivalmuban_shousha* Sheet_festivalmuban_shousha::mutable_festivalmuban_shousha_list(int index) {
  return festivalmuban_shousha_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_shousha* Sheet_festivalmuban_shousha::add_festivalmuban_shousha_list() {
  return festivalmuban_shousha_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shousha >&
Sheet_festivalmuban_shousha::festivalmuban_shousha_list() const {
  return festivalmuban_shousha_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_shousha >*
Sheet_festivalmuban_shousha::mutable_festivalmuban_shousha_list() {
  return &festivalmuban_shousha_list_;
}

// -------------------------------------------------------------------

// festivalmuban_huoyue

// optional int32 id = 1;
inline bool festivalmuban_huoyue::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void festivalmuban_huoyue::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void festivalmuban_huoyue::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void festivalmuban_huoyue::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 festivalmuban_huoyue::id() const {
  return id_;
}
inline void festivalmuban_huoyue::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 activity = 2;
inline bool festivalmuban_huoyue::has_activity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void festivalmuban_huoyue::set_has_activity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void festivalmuban_huoyue::clear_has_activity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void festivalmuban_huoyue::clear_activity() {
  activity_ = 0;
  clear_has_activity();
}
inline ::google::protobuf::int32 festivalmuban_huoyue::activity() const {
  return activity_;
}
inline void festivalmuban_huoyue::set_activity(::google::protobuf::int32 value) {
  set_has_activity();
  activity_ = value;
}

// optional string desc = 3;
inline bool festivalmuban_huoyue::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void festivalmuban_huoyue::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void festivalmuban_huoyue::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void festivalmuban_huoyue::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& festivalmuban_huoyue::desc() const {
  return *desc_;
}
inline void festivalmuban_huoyue::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void festivalmuban_huoyue::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void festivalmuban_huoyue::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* festivalmuban_huoyue::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* festivalmuban_huoyue::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void festivalmuban_huoyue::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 boxId = 4;
inline bool festivalmuban_huoyue::has_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void festivalmuban_huoyue::set_has_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void festivalmuban_huoyue::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void festivalmuban_huoyue::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 festivalmuban_huoyue::boxid() const {
  return boxid_;
}
inline void festivalmuban_huoyue::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_festivalmuban_huoyue

// repeated .proto_ff.festivalmuban_huoyue festivalmuban_huoyue_List = 1;
inline int Sheet_festivalmuban_huoyue::festivalmuban_huoyue_list_size() const {
  return festivalmuban_huoyue_list_.size();
}
inline void Sheet_festivalmuban_huoyue::clear_festivalmuban_huoyue_list() {
  festivalmuban_huoyue_list_.Clear();
}
inline const ::proto_ff::festivalmuban_huoyue& Sheet_festivalmuban_huoyue::festivalmuban_huoyue_list(int index) const {
  return festivalmuban_huoyue_list_.Get(index);
}
inline ::proto_ff::festivalmuban_huoyue* Sheet_festivalmuban_huoyue::mutable_festivalmuban_huoyue_list(int index) {
  return festivalmuban_huoyue_list_.Mutable(index);
}
inline ::proto_ff::festivalmuban_huoyue* Sheet_festivalmuban_huoyue::add_festivalmuban_huoyue_list() {
  return festivalmuban_huoyue_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_huoyue >&
Sheet_festivalmuban_huoyue::festivalmuban_huoyue_list() const {
  return festivalmuban_huoyue_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::festivalmuban_huoyue >*
Sheet_festivalmuban_huoyue::mutable_festivalmuban_huoyue_list() {
  return &festivalmuban_huoyue_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_festival_2eproto__INCLUDED
