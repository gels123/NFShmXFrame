// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: partner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "partner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* partnerpartnerattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerpartnerattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerpartner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerpartner_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerpartner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerpartner_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerchangeattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerchangeattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerstarUpupAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerstarUpupAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerstarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerstarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerstarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerstarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerfragmentattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerfragmentattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerfragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerfragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerfragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerfragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerattributeattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerattributeattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerattribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerattribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerattribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerattribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerequipattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerequipattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerrefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerrefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerrefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerrefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* partnerslot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  partnerslot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_partnerslot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_partnerslot_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_partner_2eproto() {
  protobuf_AddDesc_partner_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "partner.proto");
  GOOGLE_CHECK(file != NULL);
  partnerpartnerattributeDesc_descriptor_ = file->message_type(0);
  static const int partnerpartnerattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartnerattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartnerattributeDesc, value_),
  };
  partnerpartnerattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerpartnerattributeDesc_descriptor_,
      partnerpartnerattributeDesc::default_instance_,
      partnerpartnerattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartnerattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartnerattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerpartnerattributeDesc));
  partnerpartner_descriptor_ = file->message_type(1);
  static const int partnerpartner_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, partnerskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, reallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, materialexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, breakmaterialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, breakmaterialcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, aiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, fragmentid_),
  };
  partnerpartner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerpartner_descriptor_,
      partnerpartner::default_instance_,
      partnerpartner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerpartner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerpartner));
  Sheet_partnerpartner_descriptor_ = file->message_type(2);
  static const int Sheet_partnerpartner_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerpartner, partnerpartner_list_),
  };
  Sheet_partnerpartner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerpartner_descriptor_,
      Sheet_partnerpartner::default_instance_,
      Sheet_partnerpartner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerpartner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerpartner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerpartner));
  partnerchangeattributeDesc_descriptor_ = file->message_type(3);
  static const int partnerchangeattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchangeattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchangeattributeDesc, value_),
  };
  partnerchangeattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerchangeattributeDesc_descriptor_,
      partnerchangeattributeDesc::default_instance_,
      partnerchangeattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchangeattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchangeattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerchangeattributeDesc));
  partnerchange_descriptor_ = file->message_type(4);
  static const int partnerchange_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, partnerskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, aiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, attribute_),
  };
  partnerchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerchange_descriptor_,
      partnerchange::default_instance_,
      partnerchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerchange));
  Sheet_partnerchange_descriptor_ = file->message_type(5);
  static const int Sheet_partnerchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerchange, partnerchange_list_),
  };
  Sheet_partnerchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerchange_descriptor_,
      Sheet_partnerchange::default_instance_,
      Sheet_partnerchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerchange));
  partnerstarUpupAttributeDesc_descriptor_ = file->message_type(6);
  static const int partnerstarUpupAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUpupAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUpupAttributeDesc, value_),
  };
  partnerstarUpupAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerstarUpupAttributeDesc_descriptor_,
      partnerstarUpupAttributeDesc::default_instance_,
      partnerstarUpupAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUpupAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUpupAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerstarUpupAttributeDesc));
  partnerstarUp_descriptor_ = file->message_type(7);
  static const int partnerstarUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUp, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUp, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUp, upattribute_),
  };
  partnerstarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerstarUp_descriptor_,
      partnerstarUp::default_instance_,
      partnerstarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerstarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerstarUp));
  Sheet_partnerstarUp_descriptor_ = file->message_type(8);
  static const int Sheet_partnerstarUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerstarUp, partnerstarup_list_),
  };
  Sheet_partnerstarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerstarUp_descriptor_,
      Sheet_partnerstarUp::default_instance_,
      Sheet_partnerstarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerstarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerstarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerstarUp));
  partnerfragmentattributeDesc_descriptor_ = file->message_type(9);
  static const int partnerfragmentattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragmentattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragmentattributeDesc, value_),
  };
  partnerfragmentattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerfragmentattributeDesc_descriptor_,
      partnerfragmentattributeDesc::default_instance_,
      partnerfragmentattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragmentattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragmentattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerfragmentattributeDesc));
  partnerfragment_descriptor_ = file->message_type(10);
  static const int partnerfragment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragment, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragment, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragment, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragment, attribute_),
  };
  partnerfragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerfragment_descriptor_,
      partnerfragment::default_instance_,
      partnerfragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerfragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerfragment));
  Sheet_partnerfragment_descriptor_ = file->message_type(11);
  static const int Sheet_partnerfragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerfragment, partnerfragment_list_),
  };
  Sheet_partnerfragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerfragment_descriptor_,
      Sheet_partnerfragment::default_instance_,
      Sheet_partnerfragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerfragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerfragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerfragment));
  partnerattributeattributeDesc_descriptor_ = file->message_type(12);
  static const int partnerattributeattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattributeattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattributeattributeDesc, value_),
  };
  partnerattributeattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerattributeattributeDesc_descriptor_,
      partnerattributeattributeDesc::default_instance_,
      partnerattributeattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattributeattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattributeattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerattributeattributeDesc));
  partnerattribute_descriptor_ = file->message_type(13);
  static const int partnerattribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattribute, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattribute, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattribute, attribute_),
  };
  partnerattribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerattribute_descriptor_,
      partnerattribute::default_instance_,
      partnerattribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerattribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerattribute));
  Sheet_partnerattribute_descriptor_ = file->message_type(14);
  static const int Sheet_partnerattribute_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerattribute, partnerattribute_list_),
  };
  Sheet_partnerattribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerattribute_descriptor_,
      Sheet_partnerattribute::default_instance_,
      Sheet_partnerattribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerattribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerattribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerattribute));
  partnerexp_descriptor_ = file->message_type(15);
  static const int partnerexp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerexp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerexp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerexp, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerexp, quality_),
  };
  partnerexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerexp_descriptor_,
      partnerexp::default_instance_,
      partnerexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerexp));
  Sheet_partnerexp_descriptor_ = file->message_type(16);
  static const int Sheet_partnerexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerexp, partnerexp_list_),
  };
  Sheet_partnerexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerexp_descriptor_,
      Sheet_partnerexp::default_instance_,
      Sheet_partnerexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerexp));
  partnerequipattributeDesc_descriptor_ = file->message_type(17);
  static const int partnerequipattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequipattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequipattributeDesc, value_),
  };
  partnerequipattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerequipattributeDesc_descriptor_,
      partnerequipattributeDesc::default_instance_,
      partnerequipattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequipattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequipattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerequipattributeDesc));
  partnerequip_descriptor_ = file->message_type(18);
  static const int partnerequip_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequip, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequip, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequip, refinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequip, attribute_),
  };
  partnerequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerequip_descriptor_,
      partnerequip::default_instance_,
      partnerequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerequip));
  Sheet_partnerequip_descriptor_ = file->message_type(19);
  static const int Sheet_partnerequip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerequip, partnerequip_list_),
  };
  Sheet_partnerequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerequip_descriptor_,
      Sheet_partnerequip::default_instance_,
      Sheet_partnerequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerequip));
  partnerrefine_descriptor_ = file->message_type(20);
  static const int partnerrefine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerrefine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerrefine, refineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerrefine, refinenum_),
  };
  partnerrefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerrefine_descriptor_,
      partnerrefine::default_instance_,
      partnerrefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerrefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerrefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerrefine));
  Sheet_partnerrefine_descriptor_ = file->message_type(21);
  static const int Sheet_partnerrefine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerrefine, partnerrefine_list_),
  };
  Sheet_partnerrefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerrefine_descriptor_,
      Sheet_partnerrefine::default_instance_,
      Sheet_partnerrefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerrefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerrefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerrefine));
  partnerslot_descriptor_ = file->message_type(22);
  static const int partnerslot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerslot, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerslot, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerslot, refinenum_),
  };
  partnerslot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      partnerslot_descriptor_,
      partnerslot::default_instance_,
      partnerslot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerslot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(partnerslot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(partnerslot));
  Sheet_partnerslot_descriptor_ = file->message_type(23);
  static const int Sheet_partnerslot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerslot, partnerslot_list_),
  };
  Sheet_partnerslot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_partnerslot_descriptor_,
      Sheet_partnerslot::default_instance_,
      Sheet_partnerslot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerslot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_partnerslot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_partnerslot));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_partner_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerpartnerattributeDesc_descriptor_, &partnerpartnerattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerpartner_descriptor_, &partnerpartner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerpartner_descriptor_, &Sheet_partnerpartner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerchangeattributeDesc_descriptor_, &partnerchangeattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerchange_descriptor_, &partnerchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerchange_descriptor_, &Sheet_partnerchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerstarUpupAttributeDesc_descriptor_, &partnerstarUpupAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerstarUp_descriptor_, &partnerstarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerstarUp_descriptor_, &Sheet_partnerstarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerfragmentattributeDesc_descriptor_, &partnerfragmentattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerfragment_descriptor_, &partnerfragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerfragment_descriptor_, &Sheet_partnerfragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerattributeattributeDesc_descriptor_, &partnerattributeattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerattribute_descriptor_, &partnerattribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerattribute_descriptor_, &Sheet_partnerattribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerexp_descriptor_, &partnerexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerexp_descriptor_, &Sheet_partnerexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerequipattributeDesc_descriptor_, &partnerequipattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerequip_descriptor_, &partnerequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerequip_descriptor_, &Sheet_partnerequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerrefine_descriptor_, &partnerrefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerrefine_descriptor_, &Sheet_partnerrefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    partnerslot_descriptor_, &partnerslot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_partnerslot_descriptor_, &Sheet_partnerslot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_partner_2eproto() {
  delete partnerpartnerattributeDesc::default_instance_;
  delete partnerpartnerattributeDesc_reflection_;
  delete partnerpartner::default_instance_;
  delete partnerpartner_reflection_;
  delete Sheet_partnerpartner::default_instance_;
  delete Sheet_partnerpartner_reflection_;
  delete partnerchangeattributeDesc::default_instance_;
  delete partnerchangeattributeDesc_reflection_;
  delete partnerchange::default_instance_;
  delete partnerchange_reflection_;
  delete Sheet_partnerchange::default_instance_;
  delete Sheet_partnerchange_reflection_;
  delete partnerstarUpupAttributeDesc::default_instance_;
  delete partnerstarUpupAttributeDesc_reflection_;
  delete partnerstarUp::default_instance_;
  delete partnerstarUp_reflection_;
  delete Sheet_partnerstarUp::default_instance_;
  delete Sheet_partnerstarUp_reflection_;
  delete partnerfragmentattributeDesc::default_instance_;
  delete partnerfragmentattributeDesc_reflection_;
  delete partnerfragment::default_instance_;
  delete partnerfragment_reflection_;
  delete Sheet_partnerfragment::default_instance_;
  delete Sheet_partnerfragment_reflection_;
  delete partnerattributeattributeDesc::default_instance_;
  delete partnerattributeattributeDesc_reflection_;
  delete partnerattribute::default_instance_;
  delete partnerattribute_reflection_;
  delete Sheet_partnerattribute::default_instance_;
  delete Sheet_partnerattribute_reflection_;
  delete partnerexp::default_instance_;
  delete partnerexp_reflection_;
  delete Sheet_partnerexp::default_instance_;
  delete Sheet_partnerexp_reflection_;
  delete partnerequipattributeDesc::default_instance_;
  delete partnerequipattributeDesc_reflection_;
  delete partnerequip::default_instance_;
  delete partnerequip_reflection_;
  delete Sheet_partnerequip::default_instance_;
  delete Sheet_partnerequip_reflection_;
  delete partnerrefine::default_instance_;
  delete partnerrefine_reflection_;
  delete Sheet_partnerrefine::default_instance_;
  delete Sheet_partnerrefine_reflection_;
  delete partnerslot::default_instance_;
  delete partnerslot_reflection_;
  delete Sheet_partnerslot::default_instance_;
  delete Sheet_partnerslot_reflection_;
}

void protobuf_AddDesc_partner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpartner.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"K\n\033partnerpartnerattributeDesc\022"
    "\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377"
    "\024\003\345\200\274\"\201\005\n\016partnerpartner\022\030\n\002id\030\001 \001(\003B\014\302\377"
    "\024\010\345\245\221\347\201\265ID\022&\n\010resource\030\002 \001(\tB\024\302\377\024\014\350\265\204\346\272\220"
    "\345\275\242\350\261\241\220\301\024<\022\034\n\004name\030\003 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024<"
    "\022)\n\nactiveDesc\030\004 \001(\tB\025\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260\220\301"
    "\024\214\001\022,\n\014partnerSkill\030\005 \001(\tB\026\302\377\024\016\344\274\231\344\274\264\346\212\200"
    "\350\203\275ID\220\301\024<\022\035\n\trealLevel\030\006 \001(\005B\n\302\377\024\006\347\255\211\347\272\247"
    "\022&\n\nmaterialID\030\007 \001(\003B\022\302\377\024\016\350\277\233\351\230\266\346\235\220\346\226\231ID"
    "\022.\n\013materialEXP\030\010 \001(\005B\031\302\377\024\025\350\277\233\351\230\266\346\235\220\346\226\231\347"
    "\273\217\351\252\214\345\200\274\022#\n\003exp\030\t \001(\005B\026\302\377\024\022\345\245\221\347\201\265\345\215\207\347\272\247\347"
    "\273\217\351\252\214\022+\n\017BreakMaterialID\030\n \001(\003B\022\302\377\024\016\347\252\201\347"
    "\240\264\346\235\220\346\226\231ID\0221\n\021BreakMaterialCost\030\013 \001(\005B\026\302"
    "\377\024\022\347\252\201\347\240\264\346\235\220\346\226\231\346\225\260\351\207\217\022#\n\007skillID\030\014 \001(\003B\022"
    "\302\377\024\016\350\247\243\351\224\201\346\212\200\350\203\275ID\022\031\n\004aiId\030\r \001(\003B\013\302\377\024\007AI"
    "\350\241\250ID\022N\n\tattribute\030\016 \003(\0132%.proto_ff.part"
    "nerpartnerattributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200"
    "\247\210\301\024\004\022*\n\nfragmentID\030\017 \003(\003B\026\302\377\024\016\345\205\263\350\201\224\347\242\216"
    "\347\211\207ID\210\301\024\003\"T\n\024Sheet_partnerpartner\022<\n\023par"
    "tnerpartner_List\030\001 \003(\0132\030.proto_ff.partne"
    "rpartnerB\005\210\301\024\364\003\"J\n\032partnerchangeattribut"
    "eDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001"
    "(\005B\007\302\377\024\003\345\200\274\"\332\004\n\rpartnerchange\022\030\n\002id\030\001 \001("
    "\003B\014\302\377\024\010\345\245\221\347\201\265ID\022&\n\010resource\030\002 \001(\tB\024\302\377\024\014\350"
    "\265\204\346\272\220\345\275\242\350\261\241\220\301\024<\022\034\n\004name\030\003 \001(\tB\016\302\377\024\006\345\220\215\345\255"
    "\227\220\301\024<\022(\n\nactiveDesc\030\004 \001(\tB\024\302\377\024\014\346\277\200\346\264\273\346\217\217"
    "\350\277\260\220\301\024x\022\033\n\007quality\030\005 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022\"\n\006"
    "starId\030\006 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022,\n\007star"
    "Num\030\007 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\310\001\022&"
    "\n\006starUp\030\010 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022,"
    "\n\014partnerSkill\030\t \001(\tB\026\302\377\024\016\344\274\231\344\274\264\346\212\200\350\203\275ID"
    "\220\301\024P\022<\n\007starBer\030\n \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345"
    "\261\236\346\200\247\345\242\236\345\212\240\347\232\204\344\270\207\345\210\206\346\257\224\345\200\274\022$\n\noccupation"
    "\030\013 \001(\003B\020\302\377\024\014\350\275\254\350\201\214\350\246\201\346\261\202\022\031\n\004aiId\030\014 \001(\003B\013"
    "\302\377\024\007AI\350\241\250ID\022,\n\rupAttributeId\030\r \001(\003B\025\302\377\024\021"
    "\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022M\n\tattribute\030\016 \003(\0132$.p"
    "roto_ff.partnerchangeattributeDescB\024\302\377\024\014"
    "\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\005\"P\n\023Sheet_partnerchange\022"
    "9\n\022partnerchange_List\030\001 \003(\0132\027.proto_ff.p"
    "artnerchangeB\004\210\301\024(\"L\n\034partnerstarUpupAtt"
    "ributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005valu"
    "e\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\306\001\n\rpartnerstarUp\022\030\n\002ID"
    "\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022,\n\rupAttributeId\030\002 "
    "\001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022\032\n\006starID\030\003 \001"
    "(\005B\n\302\377\024\006\346\230\237\347\272\247\022Q\n\013upAttribute\030\004 \003(\0132&.pr"
    "oto_ff.partnerstarUpupAttributeDescB\024\302\377\024"
    "\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\002\"P\n\023Sheet_partnerstarUp"
    "\0229\n\022partnerstarUp_List\030\001 \003(\0132\027.proto_ff."
    "partnerstarUpB\004\210\301\024(\"L\n\034partnerfragmentat"
    "tributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005val"
    "ue\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\311\001\n\017partnerfragment\022 \n"
    "\nfragmentID\030\001 \001(\003B\014\302\377\024\010\347\242\216\347\211\207ID\022\032\n\004item\030"
    "\002 \001(\003B\014\302\377\024\010\347\211\251\345\223\201ID\022\'\n\007itemNum\030\003 \001(\005B\026\302\377"
    "\024\022\347\242\216\347\211\207\344\275\277\347\224\250\344\270\212\351\231\220\022O\n\tattribute\030\004 \003(\0132"
    "&.proto_ff.partnerfragmentattributeDescB"
    "\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\003\"V\n\025Sheet_partnerfr"
    "agment\022=\n\024partnerfragment_List\030\001 \003(\0132\031.p"
    "roto_ff.partnerfragmentB\004\210\301\024\024\"M\n\035partner"
    "attributeattributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377"
    "\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\233\001\n\020partner"
    "attribute\022\026\n\002lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\035\n\003exp"
    "\030\002 \001(\003B\020\302\377\024\014\346\200\273\347\273\217\351\252\214\345\200\274\022P\n\tattribute\030\003 "
    "\003(\0132\'.proto_ff.partnerattributeattribute"
    "DescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\"Z\n\026Sheet_part"
    "nerattribute\022@\n\025partnerattribute_List\030\001 "
    "\003(\0132\032.proto_ff.partnerattributeB\005\210\301\024\320\017\"\212"
    "\001\n\npartnerexp\022\026\n\002ID\030\001 \001(\005B\n\302\377\024\006\345\272\217\345\217\267\022\032\n"
    "\003exp\030\002 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\022%\n\013wearQuality"
    "\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351\230\266\022!\n\007quality\030\004 \001("
    "\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\350\264\250\"H\n\020Sheet_partnerexp\022"
    "4\n\017partnerexp_List\030\001 \003(\0132\024.proto_ff.part"
    "nerexpB\005\210\301\024\310\001\"M\n\031partnerequipattributeDe"
    "sc\022\030\n\004type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005value\030\002 "
    "\001(\005B\007\302\377\024\003\345\200\274\"\370\001\n\014partnerequip\022\030\n\002id\030\001 \001("
    "\003B\014\302\377\024\010\350\243\205\345\244\207id\022\"\n\010position\030\002 \001(\005B\020\302\377\024\014\350"
    "\243\205\345\244\207\351\203\250\344\275\215\022(\n\010refineLv\030\003 \001(\005B\026\302\377\024\022\347\262\276\347\202"
    "\274\347\255\211\347\272\247\344\270\212\351\231\220\0228\n\trefineNum\030\004 \001(\005B%\302\377\024!\347\262"
    "\276\347\202\274\346\217\220\345\215\207\347\263\273\346\225\260\357\274\210\344\270\207\345\210\206\346\257\224\357\274\211\022F\n\tattri"
    "bute\030\005 \003(\0132#.proto_ff.partnerequipattrib"
    "uteDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\002\"M\n\022Sheet_partner"
    "equip\0227\n\021partnerequip_List\030\001 \003(\0132\026.proto"
    "_ff.partnerequipB\004\210\301\024(\"~\n\rpartnerrefine\022"
    "\034\n\002id\030\001 \001(\005B\020\302\377\024\014\347\262\276\347\202\274\347\255\211\347\272\247\022$\n\010refineI"
    "d\030\002 \001(\003B\022\302\377\024\016\347\262\276\347\202\274\346\235\220\346\226\231id\022)\n\trefineNum"
    "\030\003 \001(\005B\026\302\377\024\022\347\262\276\347\202\274\346\235\220\346\226\231\346\225\260\351\207\217\"Q\n\023Sheet_"
    "partnerrefine\022:\n\022partnerrefine_List\030\001 \003("
    "\0132\027.proto_ff.partnerrefineB\005\210\301\024\310\001\"\225\001\n\013pa"
    "rtnerslot\022\"\n\010position\030\001 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351"
    "\203\250\344\275\215\022(\n\010refineLv\030\002 \001(\005B\026\302\377\024\022\347\262\276\347\202\274\347\255\211\347\272"
    "\247\344\270\212\351\231\220\0228\n\trefineNum\030\003 \001(\005B%\302\377\024!\347\262\276\347\202\274\346\217"
    "\220\345\215\207\347\263\273\346\225\260\357\274\210\344\270\207\345\210\206\346\257\224\357\274\211\"J\n\021Sheet_partn"
    "erslot\0225\n\020partnerslot_List\030\001 \003(\0132\025.proto"
    "_ff.partnerslotB\004\210\301\024\024", 3741);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "partner.proto", &protobuf_RegisterTypes);
  partnerpartnerattributeDesc::default_instance_ = new partnerpartnerattributeDesc();
  partnerpartner::default_instance_ = new partnerpartner();
  Sheet_partnerpartner::default_instance_ = new Sheet_partnerpartner();
  partnerchangeattributeDesc::default_instance_ = new partnerchangeattributeDesc();
  partnerchange::default_instance_ = new partnerchange();
  Sheet_partnerchange::default_instance_ = new Sheet_partnerchange();
  partnerstarUpupAttributeDesc::default_instance_ = new partnerstarUpupAttributeDesc();
  partnerstarUp::default_instance_ = new partnerstarUp();
  Sheet_partnerstarUp::default_instance_ = new Sheet_partnerstarUp();
  partnerfragmentattributeDesc::default_instance_ = new partnerfragmentattributeDesc();
  partnerfragment::default_instance_ = new partnerfragment();
  Sheet_partnerfragment::default_instance_ = new Sheet_partnerfragment();
  partnerattributeattributeDesc::default_instance_ = new partnerattributeattributeDesc();
  partnerattribute::default_instance_ = new partnerattribute();
  Sheet_partnerattribute::default_instance_ = new Sheet_partnerattribute();
  partnerexp::default_instance_ = new partnerexp();
  Sheet_partnerexp::default_instance_ = new Sheet_partnerexp();
  partnerequipattributeDesc::default_instance_ = new partnerequipattributeDesc();
  partnerequip::default_instance_ = new partnerequip();
  Sheet_partnerequip::default_instance_ = new Sheet_partnerequip();
  partnerrefine::default_instance_ = new partnerrefine();
  Sheet_partnerrefine::default_instance_ = new Sheet_partnerrefine();
  partnerslot::default_instance_ = new partnerslot();
  Sheet_partnerslot::default_instance_ = new Sheet_partnerslot();
  partnerpartnerattributeDesc::default_instance_->InitAsDefaultInstance();
  partnerpartner::default_instance_->InitAsDefaultInstance();
  Sheet_partnerpartner::default_instance_->InitAsDefaultInstance();
  partnerchangeattributeDesc::default_instance_->InitAsDefaultInstance();
  partnerchange::default_instance_->InitAsDefaultInstance();
  Sheet_partnerchange::default_instance_->InitAsDefaultInstance();
  partnerstarUpupAttributeDesc::default_instance_->InitAsDefaultInstance();
  partnerstarUp::default_instance_->InitAsDefaultInstance();
  Sheet_partnerstarUp::default_instance_->InitAsDefaultInstance();
  partnerfragmentattributeDesc::default_instance_->InitAsDefaultInstance();
  partnerfragment::default_instance_->InitAsDefaultInstance();
  Sheet_partnerfragment::default_instance_->InitAsDefaultInstance();
  partnerattributeattributeDesc::default_instance_->InitAsDefaultInstance();
  partnerattribute::default_instance_->InitAsDefaultInstance();
  Sheet_partnerattribute::default_instance_->InitAsDefaultInstance();
  partnerexp::default_instance_->InitAsDefaultInstance();
  Sheet_partnerexp::default_instance_->InitAsDefaultInstance();
  partnerequipattributeDesc::default_instance_->InitAsDefaultInstance();
  partnerequip::default_instance_->InitAsDefaultInstance();
  Sheet_partnerequip::default_instance_->InitAsDefaultInstance();
  partnerrefine::default_instance_->InitAsDefaultInstance();
  Sheet_partnerrefine::default_instance_->InitAsDefaultInstance();
  partnerslot::default_instance_->InitAsDefaultInstance();
  Sheet_partnerslot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_partner_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_partner_2eproto {
  StaticDescriptorInitializer_partner_2eproto() {
    protobuf_AddDesc_partner_2eproto();
  }
} static_descriptor_initializer_partner_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int partnerpartnerattributeDesc::kTypeFieldNumber;
const int partnerpartnerattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

partnerpartnerattributeDesc::partnerpartnerattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerpartnerattributeDesc::InitAsDefaultInstance() {
}

partnerpartnerattributeDesc::partnerpartnerattributeDesc(const partnerpartnerattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerpartnerattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerpartnerattributeDesc::~partnerpartnerattributeDesc() {
  SharedDtor();
}

void partnerpartnerattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerpartnerattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerpartnerattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerpartnerattributeDesc_descriptor_;
}

const partnerpartnerattributeDesc& partnerpartnerattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerpartnerattributeDesc* partnerpartnerattributeDesc::default_instance_ = NULL;

partnerpartnerattributeDesc* partnerpartnerattributeDesc::New() const {
  return new partnerpartnerattributeDesc;
}

void partnerpartnerattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerpartnerattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerpartnerattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerpartnerattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerpartnerattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerpartnerattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerpartnerattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerpartnerattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerpartnerattributeDesc::MergeFrom(const partnerpartnerattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerpartnerattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerpartnerattributeDesc::CopyFrom(const partnerpartnerattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerpartnerattributeDesc::IsInitialized() const {

  return true;
}

void partnerpartnerattributeDesc::Swap(partnerpartnerattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerpartnerattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerpartnerattributeDesc_descriptor_;
  metadata.reflection = partnerpartnerattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerpartner::kIdFieldNumber;
const int partnerpartner::kResourceFieldNumber;
const int partnerpartner::kNameFieldNumber;
const int partnerpartner::kActiveDescFieldNumber;
const int partnerpartner::kPartnerSkillFieldNumber;
const int partnerpartner::kRealLevelFieldNumber;
const int partnerpartner::kMaterialIDFieldNumber;
const int partnerpartner::kMaterialEXPFieldNumber;
const int partnerpartner::kExpFieldNumber;
const int partnerpartner::kBreakMaterialIDFieldNumber;
const int partnerpartner::kBreakMaterialCostFieldNumber;
const int partnerpartner::kSkillIDFieldNumber;
const int partnerpartner::kAiIdFieldNumber;
const int partnerpartner::kAttributeFieldNumber;
const int partnerpartner::kFragmentIDFieldNumber;
#endif  // !_MSC_VER

partnerpartner::partnerpartner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerpartner::InitAsDefaultInstance() {
}

partnerpartner::partnerpartner(const partnerpartner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerpartner::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnerskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reallevel_ = 0;
  materialid_ = GOOGLE_LONGLONG(0);
  materialexp_ = 0;
  exp_ = 0;
  breakmaterialid_ = GOOGLE_LONGLONG(0);
  breakmaterialcost_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  aiid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerpartner::~partnerpartner() {
  SharedDtor();
}

void partnerpartner::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (partnerskill_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerskill_;
  }
  if (this != default_instance_) {
  }
}

void partnerpartner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerpartner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerpartner_descriptor_;
}

const partnerpartner& partnerpartner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerpartner* partnerpartner::default_instance_ = NULL;

partnerpartner* partnerpartner::New() const {
  return new partnerpartner;
}

void partnerpartner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    if (has_partnerskill()) {
      if (partnerskill_ != &::google::protobuf::internal::kEmptyString) {
        partnerskill_->clear();
      }
    }
    reallevel_ = 0;
    materialid_ = GOOGLE_LONGLONG(0);
    materialexp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0;
    breakmaterialid_ = GOOGLE_LONGLONG(0);
    breakmaterialcost_ = 0;
    skillid_ = GOOGLE_LONGLONG(0);
    aiid_ = GOOGLE_LONGLONG(0);
  }
  attribute_.Clear();
  fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerpartner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_partnerSkill;
        break;
      }

      // optional string partnerSkill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerskill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnerskill().data(), this->partnerskill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_realLevel;
        break;
      }

      // optional int32 realLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reallevel_)));
          set_has_reallevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_materialID;
        break;
      }

      // optional int64 materialID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_materialEXP;
        break;
      }

      // optional int32 materialEXP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialEXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialexp_)));
          set_has_materialexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional int32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BreakMaterialID;
        break;
      }

      // optional int64 BreakMaterialID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BreakMaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &breakmaterialid_)));
          set_has_breakmaterialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_BreakMaterialCost;
        break;
      }

      // optional int32 BreakMaterialCost = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BreakMaterialCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breakmaterialcost_)));
          set_has_breakmaterialcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skillID;
        break;
      }

      // optional int64 skillID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_aiId;
        break;
      }

      // optional int64 aiId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aiid_)));
          set_has_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.partnerpartnerattributeDesc attribute = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_attribute;
        if (input->ExpectTag(120)) goto parse_fragmentID;
        break;
      }

      // repeated int64 fragmentID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 120, input, this->mutable_fragmentid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fragmentid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fragmentID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerpartner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activedesc(), output);
  }

  // optional string partnerSkill = 5;
  if (has_partnerskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerskill().data(), this->partnerskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->partnerskill(), output);
  }

  // optional int32 realLevel = 6;
  if (has_reallevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reallevel(), output);
  }

  // optional int64 materialID = 7;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->materialid(), output);
  }

  // optional int32 materialEXP = 8;
  if (has_materialexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->materialexp(), output);
  }

  // optional int32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exp(), output);
  }

  // optional int64 BreakMaterialID = 10;
  if (has_breakmaterialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->breakmaterialid(), output);
  }

  // optional int32 BreakMaterialCost = 11;
  if (has_breakmaterialcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->breakmaterialcost(), output);
  }

  // optional int64 skillID = 12;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->skillid(), output);
  }

  // optional int64 aiId = 13;
  if (has_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->aiid(), output);
  }

  // repeated .proto_ff.partnerpartnerattributeDesc attribute = 14;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->attribute(i), output);
  }

  // repeated int64 fragmentID = 15;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      15, this->fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerpartner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activedesc(), target);
  }

  // optional string partnerSkill = 5;
  if (has_partnerskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerskill().data(), this->partnerskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->partnerskill(), target);
  }

  // optional int32 realLevel = 6;
  if (has_reallevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reallevel(), target);
  }

  // optional int64 materialID = 7;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->materialid(), target);
  }

  // optional int32 materialEXP = 8;
  if (has_materialexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->materialexp(), target);
  }

  // optional int32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exp(), target);
  }

  // optional int64 BreakMaterialID = 10;
  if (has_breakmaterialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->breakmaterialid(), target);
  }

  // optional int32 BreakMaterialCost = 11;
  if (has_breakmaterialcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->breakmaterialcost(), target);
  }

  // optional int64 skillID = 12;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->skillid(), target);
  }

  // optional int64 aiId = 13;
  if (has_aiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->aiid(), target);
  }

  // repeated .proto_ff.partnerpartnerattributeDesc attribute = 14;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->attribute(i), target);
  }

  // repeated int64 fragmentID = 15;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(15, this->fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerpartner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 4;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional string partnerSkill = 5;
    if (has_partnerskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnerskill());
    }

    // optional int32 realLevel = 6;
    if (has_reallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reallevel());
    }

    // optional int64 materialID = 7;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->materialid());
    }

    // optional int32 materialEXP = 8;
    if (has_materialexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialexp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 BreakMaterialID = 10;
    if (has_breakmaterialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->breakmaterialid());
    }

    // optional int32 BreakMaterialCost = 11;
    if (has_breakmaterialcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breakmaterialcost());
    }

    // optional int64 skillID = 12;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

    // optional int64 aiId = 13;
    if (has_aiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->aiid());
    }

  }
  // repeated .proto_ff.partnerpartnerattributeDesc attribute = 14;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated int64 fragmentID = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fragmentid(i));
    }
    total_size += 1 * this->fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerpartner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerpartner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerpartner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerpartner::MergeFrom(const partnerpartner& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  fragmentid_.MergeFrom(from.fragmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_partnerskill()) {
      set_partnerskill(from.partnerskill());
    }
    if (from.has_reallevel()) {
      set_reallevel(from.reallevel());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_materialexp()) {
      set_materialexp(from.materialexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_breakmaterialid()) {
      set_breakmaterialid(from.breakmaterialid());
    }
    if (from.has_breakmaterialcost()) {
      set_breakmaterialcost(from.breakmaterialcost());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_aiid()) {
      set_aiid(from.aiid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerpartner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerpartner::CopyFrom(const partnerpartner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerpartner::IsInitialized() const {

  return true;
}

void partnerpartner::Swap(partnerpartner* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(partnerskill_, other->partnerskill_);
    std::swap(reallevel_, other->reallevel_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialexp_, other->materialexp_);
    std::swap(exp_, other->exp_);
    std::swap(breakmaterialid_, other->breakmaterialid_);
    std::swap(breakmaterialcost_, other->breakmaterialcost_);
    std::swap(skillid_, other->skillid_);
    std::swap(aiid_, other->aiid_);
    attribute_.Swap(&other->attribute_);
    fragmentid_.Swap(&other->fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerpartner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerpartner_descriptor_;
  metadata.reflection = partnerpartner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerpartner::kPartnerpartnerListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerpartner::Sheet_partnerpartner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerpartner::InitAsDefaultInstance() {
}

Sheet_partnerpartner::Sheet_partnerpartner(const Sheet_partnerpartner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerpartner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerpartner::~Sheet_partnerpartner() {
  SharedDtor();
}

void Sheet_partnerpartner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerpartner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerpartner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerpartner_descriptor_;
}

const Sheet_partnerpartner& Sheet_partnerpartner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerpartner* Sheet_partnerpartner::default_instance_ = NULL;

Sheet_partnerpartner* Sheet_partnerpartner::New() const {
  return new Sheet_partnerpartner;
}

void Sheet_partnerpartner::Clear() {
  partnerpartner_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerpartner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerpartner partnerpartner_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerpartner_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerpartner_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerpartner_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerpartner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerpartner partnerpartner_List = 1;
  for (int i = 0; i < this->partnerpartner_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerpartner_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerpartner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerpartner partnerpartner_List = 1;
  for (int i = 0; i < this->partnerpartner_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerpartner_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerpartner::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerpartner partnerpartner_List = 1;
  total_size += 1 * this->partnerpartner_list_size();
  for (int i = 0; i < this->partnerpartner_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerpartner_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerpartner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerpartner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerpartner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerpartner::MergeFrom(const Sheet_partnerpartner& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerpartner_list_.MergeFrom(from.partnerpartner_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerpartner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerpartner::CopyFrom(const Sheet_partnerpartner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerpartner::IsInitialized() const {

  return true;
}

void Sheet_partnerpartner::Swap(Sheet_partnerpartner* other) {
  if (other != this) {
    partnerpartner_list_.Swap(&other->partnerpartner_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerpartner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerpartner_descriptor_;
  metadata.reflection = Sheet_partnerpartner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerchangeattributeDesc::kTypeFieldNumber;
const int partnerchangeattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

partnerchangeattributeDesc::partnerchangeattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerchangeattributeDesc::InitAsDefaultInstance() {
}

partnerchangeattributeDesc::partnerchangeattributeDesc(const partnerchangeattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerchangeattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerchangeattributeDesc::~partnerchangeattributeDesc() {
  SharedDtor();
}

void partnerchangeattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerchangeattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerchangeattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerchangeattributeDesc_descriptor_;
}

const partnerchangeattributeDesc& partnerchangeattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerchangeattributeDesc* partnerchangeattributeDesc::default_instance_ = NULL;

partnerchangeattributeDesc* partnerchangeattributeDesc::New() const {
  return new partnerchangeattributeDesc;
}

void partnerchangeattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerchangeattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerchangeattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerchangeattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerchangeattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerchangeattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerchangeattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerchangeattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerchangeattributeDesc::MergeFrom(const partnerchangeattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerchangeattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerchangeattributeDesc::CopyFrom(const partnerchangeattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerchangeattributeDesc::IsInitialized() const {

  return true;
}

void partnerchangeattributeDesc::Swap(partnerchangeattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerchangeattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerchangeattributeDesc_descriptor_;
  metadata.reflection = partnerchangeattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerchange::kIdFieldNumber;
const int partnerchange::kResourceFieldNumber;
const int partnerchange::kNameFieldNumber;
const int partnerchange::kActiveDescFieldNumber;
const int partnerchange::kQualityFieldNumber;
const int partnerchange::kStarIdFieldNumber;
const int partnerchange::kStarNumFieldNumber;
const int partnerchange::kStarUpFieldNumber;
const int partnerchange::kPartnerSkillFieldNumber;
const int partnerchange::kStarBerFieldNumber;
const int partnerchange::kOccupationFieldNumber;
const int partnerchange::kAiIdFieldNumber;
const int partnerchange::kUpAttributeIdFieldNumber;
const int partnerchange::kAttributeFieldNumber;
#endif  // !_MSC_VER

partnerchange::partnerchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerchange::InitAsDefaultInstance() {
}

partnerchange::partnerchange(const partnerchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starup_ = 0;
  partnerskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starber_ = 0;
  occupation_ = GOOGLE_LONGLONG(0);
  aiid_ = GOOGLE_LONGLONG(0);
  upattributeid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerchange::~partnerchange() {
  SharedDtor();
}

void partnerchange::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (partnerskill_ != &::google::protobuf::internal::kEmptyString) {
    delete partnerskill_;
  }
  if (this != default_instance_) {
  }
}

void partnerchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerchange_descriptor_;
}

const partnerchange& partnerchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerchange* partnerchange::default_instance_ = NULL;

partnerchange* partnerchange::New() const {
  return new partnerchange;
}

void partnerchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    quality_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
    starup_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_partnerskill()) {
      if (partnerskill_ != &::google::protobuf::internal::kEmptyString) {
        partnerskill_->clear();
      }
    }
    starber_ = 0;
    occupation_ = GOOGLE_LONGLONG(0);
    aiid_ = GOOGLE_LONGLONG(0);
    upattributeid_ = GOOGLE_LONGLONG(0);
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_starId;
        break;
      }

      // optional int64 starId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_starNum;
        break;
      }

      // optional string starNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_starUp;
        break;
      }

      // optional int32 starUp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starup_)));
          set_has_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_partnerSkill;
        break;
      }

      // optional string partnerSkill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerskill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partnerskill().data(), this->partnerskill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_starBer;
        break;
      }

      // optional int32 starBer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starber_)));
          set_has_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_occupation;
        break;
      }

      // optional int64 occupation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_aiId;
        break;
      }

      // optional int64 aiId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aiid_)));
          set_has_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.partnerchangeattributeDesc attribute = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activedesc(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // optional int64 starId = 6;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->starid(), output);
  }

  // optional string starNum = 7;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->starnum(), output);
  }

  // optional int32 starUp = 8;
  if (has_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->starup(), output);
  }

  // optional string partnerSkill = 9;
  if (has_partnerskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerskill().data(), this->partnerskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->partnerskill(), output);
  }

  // optional int32 starBer = 10;
  if (has_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->starber(), output);
  }

  // optional int64 occupation = 11;
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->occupation(), output);
  }

  // optional int64 aiId = 12;
  if (has_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->aiid(), output);
  }

  // optional int64 upAttributeId = 13;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->upattributeid(), output);
  }

  // repeated .proto_ff.partnerchangeattributeDesc attribute = 14;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activedesc(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // optional int64 starId = 6;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->starid(), target);
  }

  // optional string starNum = 7;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->starnum(), target);
  }

  // optional int32 starUp = 8;
  if (has_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->starup(), target);
  }

  // optional string partnerSkill = 9;
  if (has_partnerskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partnerskill().data(), this->partnerskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->partnerskill(), target);
  }

  // optional int32 starBer = 10;
  if (has_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->starber(), target);
  }

  // optional int64 occupation = 11;
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->occupation(), target);
  }

  // optional int64 aiId = 12;
  if (has_aiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->aiid(), target);
  }

  // optional int64 upAttributeId = 13;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->upattributeid(), target);
  }

  // repeated .proto_ff.partnerchangeattributeDesc attribute = 14;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 4;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 starId = 6;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

    // optional string starNum = 7;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

    // optional int32 starUp = 8;
    if (has_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starup());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string partnerSkill = 9;
    if (has_partnerskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnerskill());
    }

    // optional int32 starBer = 10;
    if (has_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starber());
    }

    // optional int64 occupation = 11;
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupation());
    }

    // optional int64 aiId = 12;
    if (has_aiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->aiid());
    }

    // optional int64 upAttributeId = 13;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

  }
  // repeated .proto_ff.partnerchangeattributeDesc attribute = 14;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerchange::MergeFrom(const partnerchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_starup()) {
      set_starup(from.starup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_partnerskill()) {
      set_partnerskill(from.partnerskill());
    }
    if (from.has_starber()) {
      set_starber(from.starber());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_aiid()) {
      set_aiid(from.aiid());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerchange::CopyFrom(const partnerchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerchange::IsInitialized() const {

  return true;
}

void partnerchange::Swap(partnerchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(quality_, other->quality_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(starup_, other->starup_);
    std::swap(partnerskill_, other->partnerskill_);
    std::swap(starber_, other->starber_);
    std::swap(occupation_, other->occupation_);
    std::swap(aiid_, other->aiid_);
    std::swap(upattributeid_, other->upattributeid_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerchange_descriptor_;
  metadata.reflection = partnerchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerchange::kPartnerchangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerchange::Sheet_partnerchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerchange::InitAsDefaultInstance() {
}

Sheet_partnerchange::Sheet_partnerchange(const Sheet_partnerchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerchange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerchange::~Sheet_partnerchange() {
  SharedDtor();
}

void Sheet_partnerchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerchange_descriptor_;
}

const Sheet_partnerchange& Sheet_partnerchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerchange* Sheet_partnerchange::default_instance_ = NULL;

Sheet_partnerchange* Sheet_partnerchange::New() const {
  return new Sheet_partnerchange;
}

void Sheet_partnerchange::Clear() {
  partnerchange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerchange partnerchange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerchange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerchange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerchange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerchange partnerchange_List = 1;
  for (int i = 0; i < this->partnerchange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerchange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerchange partnerchange_List = 1;
  for (int i = 0; i < this->partnerchange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerchange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerchange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerchange partnerchange_List = 1;
  total_size += 1 * this->partnerchange_list_size();
  for (int i = 0; i < this->partnerchange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerchange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerchange::MergeFrom(const Sheet_partnerchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerchange_list_.MergeFrom(from.partnerchange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerchange::CopyFrom(const Sheet_partnerchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerchange::IsInitialized() const {

  return true;
}

void Sheet_partnerchange::Swap(Sheet_partnerchange* other) {
  if (other != this) {
    partnerchange_list_.Swap(&other->partnerchange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerchange_descriptor_;
  metadata.reflection = Sheet_partnerchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerstarUpupAttributeDesc::kTypeFieldNumber;
const int partnerstarUpupAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

partnerstarUpupAttributeDesc::partnerstarUpupAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerstarUpupAttributeDesc::InitAsDefaultInstance() {
}

partnerstarUpupAttributeDesc::partnerstarUpupAttributeDesc(const partnerstarUpupAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerstarUpupAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerstarUpupAttributeDesc::~partnerstarUpupAttributeDesc() {
  SharedDtor();
}

void partnerstarUpupAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerstarUpupAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerstarUpupAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerstarUpupAttributeDesc_descriptor_;
}

const partnerstarUpupAttributeDesc& partnerstarUpupAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerstarUpupAttributeDesc* partnerstarUpupAttributeDesc::default_instance_ = NULL;

partnerstarUpupAttributeDesc* partnerstarUpupAttributeDesc::New() const {
  return new partnerstarUpupAttributeDesc;
}

void partnerstarUpupAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerstarUpupAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerstarUpupAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerstarUpupAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerstarUpupAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerstarUpupAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerstarUpupAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerstarUpupAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerstarUpupAttributeDesc::MergeFrom(const partnerstarUpupAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerstarUpupAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerstarUpupAttributeDesc::CopyFrom(const partnerstarUpupAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerstarUpupAttributeDesc::IsInitialized() const {

  return true;
}

void partnerstarUpupAttributeDesc::Swap(partnerstarUpupAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerstarUpupAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerstarUpupAttributeDesc_descriptor_;
  metadata.reflection = partnerstarUpupAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerstarUp::kIDFieldNumber;
const int partnerstarUp::kUpAttributeIdFieldNumber;
const int partnerstarUp::kStarIDFieldNumber;
const int partnerstarUp::kUpAttributeFieldNumber;
#endif  // !_MSC_VER

partnerstarUp::partnerstarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerstarUp::InitAsDefaultInstance() {
}

partnerstarUp::partnerstarUp(const partnerstarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerstarUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  upattributeid_ = GOOGLE_LONGLONG(0);
  starid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerstarUp::~partnerstarUp() {
  SharedDtor();
}

void partnerstarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerstarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerstarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerstarUp_descriptor_;
}

const partnerstarUp& partnerstarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerstarUp* partnerstarUp::default_instance_ = NULL;

partnerstarUp* partnerstarUp::New() const {
  return new partnerstarUp;
}

void partnerstarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    upattributeid_ = GOOGLE_LONGLONG(0);
    starid_ = 0;
  }
  upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerstarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starID;
        break;
      }

      // optional int32 starID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upAttribute;
        break;
      }

      // repeated .proto_ff.partnerstarUpupAttributeDesc upAttribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerstarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->upattributeid(), output);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starid(), output);
  }

  // repeated .proto_ff.partnerstarUpupAttributeDesc upAttribute = 4;
  for (int i = 0; i < this->upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerstarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->upattributeid(), target);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starid(), target);
  }

  // repeated .proto_ff.partnerstarUpupAttributeDesc upAttribute = 4;
  for (int i = 0; i < this->upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerstarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 upAttributeId = 2;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

    // optional int32 starID = 3;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }

  }
  // repeated .proto_ff.partnerstarUpupAttributeDesc upAttribute = 4;
  total_size += 1 * this->upattribute_size();
  for (int i = 0; i < this->upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerstarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerstarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerstarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerstarUp::MergeFrom(const partnerstarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  upattribute_.MergeFrom(from.upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerstarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerstarUp::CopyFrom(const partnerstarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerstarUp::IsInitialized() const {

  return true;
}

void partnerstarUp::Swap(partnerstarUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upattributeid_, other->upattributeid_);
    std::swap(starid_, other->starid_);
    upattribute_.Swap(&other->upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerstarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerstarUp_descriptor_;
  metadata.reflection = partnerstarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerstarUp::kPartnerstarUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerstarUp::Sheet_partnerstarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerstarUp::InitAsDefaultInstance() {
}

Sheet_partnerstarUp::Sheet_partnerstarUp(const Sheet_partnerstarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerstarUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerstarUp::~Sheet_partnerstarUp() {
  SharedDtor();
}

void Sheet_partnerstarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerstarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerstarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerstarUp_descriptor_;
}

const Sheet_partnerstarUp& Sheet_partnerstarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerstarUp* Sheet_partnerstarUp::default_instance_ = NULL;

Sheet_partnerstarUp* Sheet_partnerstarUp::New() const {
  return new Sheet_partnerstarUp;
}

void Sheet_partnerstarUp::Clear() {
  partnerstarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerstarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerstarUp partnerstarUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerstarUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerstarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerstarUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerstarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerstarUp partnerstarUp_List = 1;
  for (int i = 0; i < this->partnerstarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerstarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerstarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerstarUp partnerstarUp_List = 1;
  for (int i = 0; i < this->partnerstarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerstarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerstarUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerstarUp partnerstarUp_List = 1;
  total_size += 1 * this->partnerstarup_list_size();
  for (int i = 0; i < this->partnerstarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerstarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerstarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerstarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerstarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerstarUp::MergeFrom(const Sheet_partnerstarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerstarup_list_.MergeFrom(from.partnerstarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerstarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerstarUp::CopyFrom(const Sheet_partnerstarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerstarUp::IsInitialized() const {

  return true;
}

void Sheet_partnerstarUp::Swap(Sheet_partnerstarUp* other) {
  if (other != this) {
    partnerstarup_list_.Swap(&other->partnerstarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerstarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerstarUp_descriptor_;
  metadata.reflection = Sheet_partnerstarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerfragmentattributeDesc::kTypeFieldNumber;
const int partnerfragmentattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

partnerfragmentattributeDesc::partnerfragmentattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerfragmentattributeDesc::InitAsDefaultInstance() {
}

partnerfragmentattributeDesc::partnerfragmentattributeDesc(const partnerfragmentattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerfragmentattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerfragmentattributeDesc::~partnerfragmentattributeDesc() {
  SharedDtor();
}

void partnerfragmentattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerfragmentattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerfragmentattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerfragmentattributeDesc_descriptor_;
}

const partnerfragmentattributeDesc& partnerfragmentattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerfragmentattributeDesc* partnerfragmentattributeDesc::default_instance_ = NULL;

partnerfragmentattributeDesc* partnerfragmentattributeDesc::New() const {
  return new partnerfragmentattributeDesc;
}

void partnerfragmentattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerfragmentattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerfragmentattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerfragmentattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerfragmentattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerfragmentattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerfragmentattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerfragmentattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerfragmentattributeDesc::MergeFrom(const partnerfragmentattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerfragmentattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerfragmentattributeDesc::CopyFrom(const partnerfragmentattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerfragmentattributeDesc::IsInitialized() const {

  return true;
}

void partnerfragmentattributeDesc::Swap(partnerfragmentattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerfragmentattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerfragmentattributeDesc_descriptor_;
  metadata.reflection = partnerfragmentattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerfragment::kFragmentIDFieldNumber;
const int partnerfragment::kItemFieldNumber;
const int partnerfragment::kItemNumFieldNumber;
const int partnerfragment::kAttributeFieldNumber;
#endif  // !_MSC_VER

partnerfragment::partnerfragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerfragment::InitAsDefaultInstance() {
}

partnerfragment::partnerfragment(const partnerfragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerfragment::SharedCtor() {
  _cached_size_ = 0;
  fragmentid_ = GOOGLE_LONGLONG(0);
  item_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerfragment::~partnerfragment() {
  SharedDtor();
}

void partnerfragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerfragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerfragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerfragment_descriptor_;
}

const partnerfragment& partnerfragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerfragment* partnerfragment::default_instance_ = NULL;

partnerfragment* partnerfragment::New() const {
  return new partnerfragment;
}

void partnerfragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragmentid_ = GOOGLE_LONGLONG(0);
    item_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerfragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fragmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional int64 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.partnerfragmentattributeDesc attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerfragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 fragmentID = 1;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fragmentid(), output);
  }

  // optional int64 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // repeated .proto_ff.partnerfragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerfragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 fragmentID = 1;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fragmentid(), target);
  }

  // optional int64 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->item(), target);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // repeated .proto_ff.partnerfragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerfragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 fragmentID = 1;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fragmentid());
    }

    // optional int64 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  // repeated .proto_ff.partnerfragmentattributeDesc attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerfragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerfragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerfragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerfragment::MergeFrom(const partnerfragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerfragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerfragment::CopyFrom(const partnerfragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerfragment::IsInitialized() const {

  return true;
}

void partnerfragment::Swap(partnerfragment* other) {
  if (other != this) {
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(item_, other->item_);
    std::swap(itemnum_, other->itemnum_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerfragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerfragment_descriptor_;
  metadata.reflection = partnerfragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerfragment::kPartnerfragmentListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerfragment::Sheet_partnerfragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerfragment::InitAsDefaultInstance() {
}

Sheet_partnerfragment::Sheet_partnerfragment(const Sheet_partnerfragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerfragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerfragment::~Sheet_partnerfragment() {
  SharedDtor();
}

void Sheet_partnerfragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerfragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerfragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerfragment_descriptor_;
}

const Sheet_partnerfragment& Sheet_partnerfragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerfragment* Sheet_partnerfragment::default_instance_ = NULL;

Sheet_partnerfragment* Sheet_partnerfragment::New() const {
  return new Sheet_partnerfragment;
}

void Sheet_partnerfragment::Clear() {
  partnerfragment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerfragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerfragment partnerfragment_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerfragment_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerfragment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerfragment_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerfragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerfragment partnerfragment_List = 1;
  for (int i = 0; i < this->partnerfragment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerfragment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerfragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerfragment partnerfragment_List = 1;
  for (int i = 0; i < this->partnerfragment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerfragment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerfragment::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerfragment partnerfragment_List = 1;
  total_size += 1 * this->partnerfragment_list_size();
  for (int i = 0; i < this->partnerfragment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerfragment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerfragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerfragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerfragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerfragment::MergeFrom(const Sheet_partnerfragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerfragment_list_.MergeFrom(from.partnerfragment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerfragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerfragment::CopyFrom(const Sheet_partnerfragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerfragment::IsInitialized() const {

  return true;
}

void Sheet_partnerfragment::Swap(Sheet_partnerfragment* other) {
  if (other != this) {
    partnerfragment_list_.Swap(&other->partnerfragment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerfragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerfragment_descriptor_;
  metadata.reflection = Sheet_partnerfragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerattributeattributeDesc::kTypeFieldNumber;
const int partnerattributeattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

partnerattributeattributeDesc::partnerattributeattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerattributeattributeDesc::InitAsDefaultInstance() {
}

partnerattributeattributeDesc::partnerattributeattributeDesc(const partnerattributeattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerattributeattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerattributeattributeDesc::~partnerattributeattributeDesc() {
  SharedDtor();
}

void partnerattributeattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerattributeattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerattributeattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerattributeattributeDesc_descriptor_;
}

const partnerattributeattributeDesc& partnerattributeattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerattributeattributeDesc* partnerattributeattributeDesc::default_instance_ = NULL;

partnerattributeattributeDesc* partnerattributeattributeDesc::New() const {
  return new partnerattributeattributeDesc;
}

void partnerattributeattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerattributeattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerattributeattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerattributeattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerattributeattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerattributeattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerattributeattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerattributeattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerattributeattributeDesc::MergeFrom(const partnerattributeattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerattributeattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerattributeattributeDesc::CopyFrom(const partnerattributeattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerattributeattributeDesc::IsInitialized() const {

  return true;
}

void partnerattributeattributeDesc::Swap(partnerattributeattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerattributeattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerattributeattributeDesc_descriptor_;
  metadata.reflection = partnerattributeattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerattribute::kLvFieldNumber;
const int partnerattribute::kExpFieldNumber;
const int partnerattribute::kAttributeFieldNumber;
#endif  // !_MSC_VER

partnerattribute::partnerattribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerattribute::InitAsDefaultInstance() {
}

partnerattribute::partnerattribute(const partnerattribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerattribute::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerattribute::~partnerattribute() {
  SharedDtor();
}

void partnerattribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerattribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerattribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerattribute_descriptor_;
}

const partnerattribute& partnerattribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerattribute* partnerattribute::default_instance_ = NULL;

partnerattribute* partnerattribute::New() const {
  return new partnerattribute;
}

void partnerattribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerattribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.partnerattributeattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerattribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exp(), output);
  }

  // repeated .proto_ff.partnerattributeattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerattribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exp(), target);
  }

  // repeated .proto_ff.partnerattributeattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerattribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

  }
  // repeated .proto_ff.partnerattributeattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerattribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerattribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerattribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerattribute::MergeFrom(const partnerattribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerattribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerattribute::CopyFrom(const partnerattribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerattribute::IsInitialized() const {

  return true;
}

void partnerattribute::Swap(partnerattribute* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerattribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerattribute_descriptor_;
  metadata.reflection = partnerattribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerattribute::kPartnerattributeListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerattribute::Sheet_partnerattribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerattribute::InitAsDefaultInstance() {
}

Sheet_partnerattribute::Sheet_partnerattribute(const Sheet_partnerattribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerattribute::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerattribute::~Sheet_partnerattribute() {
  SharedDtor();
}

void Sheet_partnerattribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerattribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerattribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerattribute_descriptor_;
}

const Sheet_partnerattribute& Sheet_partnerattribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerattribute* Sheet_partnerattribute::default_instance_ = NULL;

Sheet_partnerattribute* Sheet_partnerattribute::New() const {
  return new Sheet_partnerattribute;
}

void Sheet_partnerattribute::Clear() {
  partnerattribute_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerattribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerattribute partnerattribute_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerattribute_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerattribute_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerattribute_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerattribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerattribute partnerattribute_List = 1;
  for (int i = 0; i < this->partnerattribute_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerattribute_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerattribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerattribute partnerattribute_List = 1;
  for (int i = 0; i < this->partnerattribute_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerattribute_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerattribute::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerattribute partnerattribute_List = 1;
  total_size += 1 * this->partnerattribute_list_size();
  for (int i = 0; i < this->partnerattribute_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerattribute_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerattribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerattribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerattribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerattribute::MergeFrom(const Sheet_partnerattribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerattribute_list_.MergeFrom(from.partnerattribute_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerattribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerattribute::CopyFrom(const Sheet_partnerattribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerattribute::IsInitialized() const {

  return true;
}

void Sheet_partnerattribute::Swap(Sheet_partnerattribute* other) {
  if (other != this) {
    partnerattribute_list_.Swap(&other->partnerattribute_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerattribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerattribute_descriptor_;
  metadata.reflection = Sheet_partnerattribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerexp::kIDFieldNumber;
const int partnerexp::kExpFieldNumber;
const int partnerexp::kWearQualityFieldNumber;
const int partnerexp::kQualityFieldNumber;
#endif  // !_MSC_VER

partnerexp::partnerexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerexp::InitAsDefaultInstance() {
}

partnerexp::partnerexp(const partnerexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerexp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = 0;
  wearquality_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerexp::~partnerexp() {
  SharedDtor();
}

void partnerexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerexp_descriptor_;
}

const partnerexp& partnerexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerexp* partnerexp::default_instance_ = NULL;

partnerexp* partnerexp::New() const {
  return new partnerexp;
}

void partnerexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = 0;
    wearquality_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wearquality(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wearquality(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 wearQuality = 3;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerexp::MergeFrom(const partnerexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerexp::CopyFrom(const partnerexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerexp::IsInitialized() const {

  return true;
}

void partnerexp::Swap(partnerexp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerexp_descriptor_;
  metadata.reflection = partnerexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerexp::kPartnerexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerexp::Sheet_partnerexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerexp::InitAsDefaultInstance() {
}

Sheet_partnerexp::Sheet_partnerexp(const Sheet_partnerexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerexp::~Sheet_partnerexp() {
  SharedDtor();
}

void Sheet_partnerexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerexp_descriptor_;
}

const Sheet_partnerexp& Sheet_partnerexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerexp* Sheet_partnerexp::default_instance_ = NULL;

Sheet_partnerexp* Sheet_partnerexp::New() const {
  return new Sheet_partnerexp;
}

void Sheet_partnerexp::Clear() {
  partnerexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerexp partnerexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerexp partnerexp_List = 1;
  for (int i = 0; i < this->partnerexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerexp partnerexp_List = 1;
  for (int i = 0; i < this->partnerexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerexp partnerexp_List = 1;
  total_size += 1 * this->partnerexp_list_size();
  for (int i = 0; i < this->partnerexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerexp::MergeFrom(const Sheet_partnerexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerexp_list_.MergeFrom(from.partnerexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerexp::CopyFrom(const Sheet_partnerexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerexp::IsInitialized() const {

  return true;
}

void Sheet_partnerexp::Swap(Sheet_partnerexp* other) {
  if (other != this) {
    partnerexp_list_.Swap(&other->partnerexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerexp_descriptor_;
  metadata.reflection = Sheet_partnerexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerequipattributeDesc::kTypeFieldNumber;
const int partnerequipattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

partnerequipattributeDesc::partnerequipattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerequipattributeDesc::InitAsDefaultInstance() {
}

partnerequipattributeDesc::partnerequipattributeDesc(const partnerequipattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerequipattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerequipattributeDesc::~partnerequipattributeDesc() {
  SharedDtor();
}

void partnerequipattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerequipattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerequipattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerequipattributeDesc_descriptor_;
}

const partnerequipattributeDesc& partnerequipattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerequipattributeDesc* partnerequipattributeDesc::default_instance_ = NULL;

partnerequipattributeDesc* partnerequipattributeDesc::New() const {
  return new partnerequipattributeDesc;
}

void partnerequipattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerequipattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerequipattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerequipattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerequipattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerequipattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerequipattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerequipattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerequipattributeDesc::MergeFrom(const partnerequipattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerequipattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerequipattributeDesc::CopyFrom(const partnerequipattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerequipattributeDesc::IsInitialized() const {

  return true;
}

void partnerequipattributeDesc::Swap(partnerequipattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerequipattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerequipattributeDesc_descriptor_;
  metadata.reflection = partnerequipattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerequip::kIdFieldNumber;
const int partnerequip::kPositionFieldNumber;
const int partnerequip::kRefineLvFieldNumber;
const int partnerequip::kRefineNumFieldNumber;
const int partnerequip::kAttributeFieldNumber;
#endif  // !_MSC_VER

partnerequip::partnerequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerequip::InitAsDefaultInstance() {
}

partnerequip::partnerequip(const partnerequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerequip::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  refinelv_ = 0;
  refinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerequip::~partnerequip() {
  SharedDtor();
}

void partnerequip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerequip_descriptor_;
}

const partnerequip& partnerequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerequip* partnerequip::default_instance_ = NULL;

partnerequip* partnerequip::New() const {
  return new partnerequip;
}

void partnerequip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    refinelv_ = 0;
    refinenum_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refineLv;
        break;
      }

      // optional int32 refineLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refineNum;
        break;
      }

      // optional int32 refineNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinenum_)));
          set_has_refinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.partnerequipattributeDesc attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int32 refineLv = 3;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refinelv(), output);
  }

  // optional int32 refineNum = 4;
  if (has_refinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refinenum(), output);
  }

  // repeated .proto_ff.partnerequipattributeDesc attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional int32 refineLv = 3;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refinelv(), target);
  }

  // optional int32 refineNum = 4;
  if (has_refinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refinenum(), target);
  }

  // repeated .proto_ff.partnerequipattributeDesc attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerequip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 refineLv = 3;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinelv());
    }

    // optional int32 refineNum = 4;
    if (has_refinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinenum());
    }

  }
  // repeated .proto_ff.partnerequipattributeDesc attribute = 5;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerequip::MergeFrom(const partnerequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_refinenum()) {
      set_refinenum(from.refinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerequip::CopyFrom(const partnerequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerequip::IsInitialized() const {

  return true;
}

void partnerequip::Swap(partnerequip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(refinenum_, other->refinenum_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerequip_descriptor_;
  metadata.reflection = partnerequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerequip::kPartnerequipListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerequip::Sheet_partnerequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerequip::InitAsDefaultInstance() {
}

Sheet_partnerequip::Sheet_partnerequip(const Sheet_partnerequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerequip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerequip::~Sheet_partnerequip() {
  SharedDtor();
}

void Sheet_partnerequip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerequip_descriptor_;
}

const Sheet_partnerequip& Sheet_partnerequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerequip* Sheet_partnerequip::default_instance_ = NULL;

Sheet_partnerequip* Sheet_partnerequip::New() const {
  return new Sheet_partnerequip;
}

void Sheet_partnerequip::Clear() {
  partnerequip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerequip partnerequip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerequip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerequip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerequip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerequip partnerequip_List = 1;
  for (int i = 0; i < this->partnerequip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerequip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerequip partnerequip_List = 1;
  for (int i = 0; i < this->partnerequip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerequip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerequip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerequip partnerequip_List = 1;
  total_size += 1 * this->partnerequip_list_size();
  for (int i = 0; i < this->partnerequip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerequip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerequip::MergeFrom(const Sheet_partnerequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerequip_list_.MergeFrom(from.partnerequip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerequip::CopyFrom(const Sheet_partnerequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerequip::IsInitialized() const {

  return true;
}

void Sheet_partnerequip::Swap(Sheet_partnerequip* other) {
  if (other != this) {
    partnerequip_list_.Swap(&other->partnerequip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerequip_descriptor_;
  metadata.reflection = Sheet_partnerequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerrefine::kIdFieldNumber;
const int partnerrefine::kRefineIdFieldNumber;
const int partnerrefine::kRefineNumFieldNumber;
#endif  // !_MSC_VER

partnerrefine::partnerrefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerrefine::InitAsDefaultInstance() {
}

partnerrefine::partnerrefine(const partnerrefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerrefine::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  refineid_ = GOOGLE_LONGLONG(0);
  refinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerrefine::~partnerrefine() {
  SharedDtor();
}

void partnerrefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerrefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerrefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerrefine_descriptor_;
}

const partnerrefine& partnerrefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerrefine* partnerrefine::default_instance_ = NULL;

partnerrefine* partnerrefine::New() const {
  return new partnerrefine;
}

void partnerrefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    refineid_ = GOOGLE_LONGLONG(0);
    refinenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerrefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refineId;
        break;
      }

      // optional int64 refineId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refineid_)));
          set_has_refineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refineNum;
        break;
      }

      // optional int32 refineNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinenum_)));
          set_has_refinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerrefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 refineId = 2;
  if (has_refineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->refineid(), output);
  }

  // optional int32 refineNum = 3;
  if (has_refinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerrefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 refineId = 2;
  if (has_refineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->refineid(), target);
  }

  // optional int32 refineNum = 3;
  if (has_refinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerrefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 refineId = 2;
    if (has_refineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refineid());
    }

    // optional int32 refineNum = 3;
    if (has_refinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerrefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerrefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerrefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerrefine::MergeFrom(const partnerrefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_refineid()) {
      set_refineid(from.refineid());
    }
    if (from.has_refinenum()) {
      set_refinenum(from.refinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerrefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerrefine::CopyFrom(const partnerrefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerrefine::IsInitialized() const {

  return true;
}

void partnerrefine::Swap(partnerrefine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(refineid_, other->refineid_);
    std::swap(refinenum_, other->refinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerrefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerrefine_descriptor_;
  metadata.reflection = partnerrefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerrefine::kPartnerrefineListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerrefine::Sheet_partnerrefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerrefine::InitAsDefaultInstance() {
}

Sheet_partnerrefine::Sheet_partnerrefine(const Sheet_partnerrefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerrefine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerrefine::~Sheet_partnerrefine() {
  SharedDtor();
}

void Sheet_partnerrefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerrefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerrefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerrefine_descriptor_;
}

const Sheet_partnerrefine& Sheet_partnerrefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerrefine* Sheet_partnerrefine::default_instance_ = NULL;

Sheet_partnerrefine* Sheet_partnerrefine::New() const {
  return new Sheet_partnerrefine;
}

void Sheet_partnerrefine::Clear() {
  partnerrefine_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerrefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerrefine partnerrefine_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerrefine_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerrefine_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerrefine_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerrefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerrefine partnerrefine_List = 1;
  for (int i = 0; i < this->partnerrefine_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerrefine_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerrefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerrefine partnerrefine_List = 1;
  for (int i = 0; i < this->partnerrefine_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerrefine_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerrefine::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerrefine partnerrefine_List = 1;
  total_size += 1 * this->partnerrefine_list_size();
  for (int i = 0; i < this->partnerrefine_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerrefine_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerrefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerrefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerrefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerrefine::MergeFrom(const Sheet_partnerrefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerrefine_list_.MergeFrom(from.partnerrefine_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerrefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerrefine::CopyFrom(const Sheet_partnerrefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerrefine::IsInitialized() const {

  return true;
}

void Sheet_partnerrefine::Swap(Sheet_partnerrefine* other) {
  if (other != this) {
    partnerrefine_list_.Swap(&other->partnerrefine_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerrefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerrefine_descriptor_;
  metadata.reflection = Sheet_partnerrefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int partnerslot::kPositionFieldNumber;
const int partnerslot::kRefineLvFieldNumber;
const int partnerslot::kRefineNumFieldNumber;
#endif  // !_MSC_VER

partnerslot::partnerslot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void partnerslot::InitAsDefaultInstance() {
}

partnerslot::partnerslot(const partnerslot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void partnerslot::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  refinelv_ = 0;
  refinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

partnerslot::~partnerslot() {
  SharedDtor();
}

void partnerslot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void partnerslot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* partnerslot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return partnerslot_descriptor_;
}

const partnerslot& partnerslot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

partnerslot* partnerslot::default_instance_ = NULL;

partnerslot* partnerslot::New() const {
  return new partnerslot;
}

void partnerslot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    refinelv_ = 0;
    refinenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool partnerslot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refineLv;
        break;
      }

      // optional int32 refineLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refineNum;
        break;
      }

      // optional int32 refineNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinenum_)));
          set_has_refinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void partnerslot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // optional int32 refineLv = 2;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refinelv(), output);
  }

  // optional int32 refineNum = 3;
  if (has_refinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* partnerslot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  // optional int32 refineLv = 2;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refinelv(), target);
  }

  // optional int32 refineNum = 3;
  if (has_refinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int partnerslot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 refineLv = 2;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinelv());
    }

    // optional int32 refineNum = 3;
    if (has_refinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void partnerslot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const partnerslot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const partnerslot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void partnerslot::MergeFrom(const partnerslot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_refinenum()) {
      set_refinenum(from.refinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void partnerslot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void partnerslot::CopyFrom(const partnerslot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool partnerslot::IsInitialized() const {

  return true;
}

void partnerslot::Swap(partnerslot* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(refinenum_, other->refinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata partnerslot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = partnerslot_descriptor_;
  metadata.reflection = partnerslot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_partnerslot::kPartnerslotListFieldNumber;
#endif  // !_MSC_VER

Sheet_partnerslot::Sheet_partnerslot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_partnerslot::InitAsDefaultInstance() {
}

Sheet_partnerslot::Sheet_partnerslot(const Sheet_partnerslot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_partnerslot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_partnerslot::~Sheet_partnerslot() {
  SharedDtor();
}

void Sheet_partnerslot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_partnerslot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_partnerslot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_partnerslot_descriptor_;
}

const Sheet_partnerslot& Sheet_partnerslot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_partner_2eproto();
  return *default_instance_;
}

Sheet_partnerslot* Sheet_partnerslot::default_instance_ = NULL;

Sheet_partnerslot* Sheet_partnerslot::New() const {
  return new Sheet_partnerslot;
}

void Sheet_partnerslot::Clear() {
  partnerslot_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_partnerslot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.partnerslot partnerslot_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partnerslot_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partnerslot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_partnerslot_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_partnerslot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.partnerslot partnerslot_List = 1;
  for (int i = 0; i < this->partnerslot_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partnerslot_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_partnerslot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.partnerslot partnerslot_List = 1;
  for (int i = 0; i < this->partnerslot_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partnerslot_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_partnerslot::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.partnerslot partnerslot_List = 1;
  total_size += 1 * this->partnerslot_list_size();
  for (int i = 0; i < this->partnerslot_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partnerslot_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_partnerslot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_partnerslot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_partnerslot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_partnerslot::MergeFrom(const Sheet_partnerslot& from) {
  GOOGLE_CHECK_NE(&from, this);
  partnerslot_list_.MergeFrom(from.partnerslot_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_partnerslot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_partnerslot::CopyFrom(const Sheet_partnerslot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_partnerslot::IsInitialized() const {

  return true;
}

void Sheet_partnerslot::Swap(Sheet_partnerslot* other) {
  if (other != this) {
    partnerslot_list_.Swap(&other->partnerslot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_partnerslot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_partnerslot_descriptor_;
  metadata.reflection = Sheet_partnerslot_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
