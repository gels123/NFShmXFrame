// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lightAndShadow.proto

#ifndef PROTOBUF_lightAndShadow_2eproto__INCLUDED
#define PROTOBUF_lightAndShadow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lightAndShadow_2eproto();
void protobuf_AssignDesc_lightAndShadow_2eproto();
void protobuf_ShutdownFile_lightAndShadow_2eproto();

class lightAndShadowcons;
class Sheet_lightAndShadowcons;
class lightAndShadowreward;
class Sheet_lightAndShadowreward;

// ===================================================================

class lightAndShadowcons : public ::google::protobuf::Message {
 public:
  lightAndShadowcons();
  virtual ~lightAndShadowcons();

  lightAndShadowcons(const lightAndShadowcons& from);

  inline lightAndShadowcons& operator=(const lightAndShadowcons& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lightAndShadowcons& default_instance();

  void Swap(lightAndShadowcons* other);

  // implements Message ----------------------------------------------

  lightAndShadowcons* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const lightAndShadowcons& from);
  void MergeFrom(const lightAndShadowcons& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 valuedata = 2;
  inline bool has_valuedata() const;
  inline void clear_valuedata();
  static const int kValuedataFieldNumber = 2;
  inline ::google::protobuf::int64 valuedata() const;
  inline void set_valuedata(::google::protobuf::int64 value);

  // optional string stringdata = 3;
  inline bool has_stringdata() const;
  inline void clear_stringdata();
  static const int kStringdataFieldNumber = 3;
  inline const ::std::string& stringdata() const;
  inline void set_stringdata(const ::std::string& value);
  inline void set_stringdata(const char* value);
  inline void set_stringdata(const char* value, size_t size);
  inline ::std::string* mutable_stringdata();
  inline ::std::string* release_stringdata();
  inline void set_allocated_stringdata(::std::string* stringdata);

  // @@protoc_insertion_point(class_scope:proto_ff.lightAndShadowcons)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_valuedata();
  inline void clear_has_valuedata();
  inline void set_has_stringdata();
  inline void clear_has_stringdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 valuedata_;
  ::std::string* stringdata_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lightAndShadow_2eproto();
  friend void protobuf_AssignDesc_lightAndShadow_2eproto();
  friend void protobuf_ShutdownFile_lightAndShadow_2eproto();

  void InitAsDefaultInstance();
  static lightAndShadowcons* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_lightAndShadowcons : public ::google::protobuf::Message {
 public:
  Sheet_lightAndShadowcons();
  virtual ~Sheet_lightAndShadowcons();

  Sheet_lightAndShadowcons(const Sheet_lightAndShadowcons& from);

  inline Sheet_lightAndShadowcons& operator=(const Sheet_lightAndShadowcons& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_lightAndShadowcons& default_instance();

  void Swap(Sheet_lightAndShadowcons* other);

  // implements Message ----------------------------------------------

  Sheet_lightAndShadowcons* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_lightAndShadowcons& from);
  void MergeFrom(const Sheet_lightAndShadowcons& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.lightAndShadowcons lightAndShadowcons_List = 1;
  inline int lightandshadowcons_list_size() const;
  inline void clear_lightandshadowcons_list();
  static const int kLightAndShadowconsListFieldNumber = 1;
  inline const ::proto_ff::lightAndShadowcons& lightandshadowcons_list(int index) const;
  inline ::proto_ff::lightAndShadowcons* mutable_lightandshadowcons_list(int index);
  inline ::proto_ff::lightAndShadowcons* add_lightandshadowcons_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowcons >&
      lightandshadowcons_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowcons >*
      mutable_lightandshadowcons_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_lightAndShadowcons)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowcons > lightandshadowcons_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lightAndShadow_2eproto();
  friend void protobuf_AssignDesc_lightAndShadow_2eproto();
  friend void protobuf_ShutdownFile_lightAndShadow_2eproto();

  void InitAsDefaultInstance();
  static Sheet_lightAndShadowcons* default_instance_;
};
// -------------------------------------------------------------------

class lightAndShadowreward : public ::google::protobuf::Message {
 public:
  lightAndShadowreward();
  virtual ~lightAndShadowreward();

  lightAndShadowreward(const lightAndShadowreward& from);

  inline lightAndShadowreward& operator=(const lightAndShadowreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const lightAndShadowreward& default_instance();

  void Swap(lightAndShadowreward* other);

  // implements Message ----------------------------------------------

  lightAndShadowreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const lightAndShadowreward& from);
  void MergeFrom(const lightAndShadowreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 goldMin = 2;
  inline bool has_goldmin() const;
  inline void clear_goldmin();
  static const int kGoldMinFieldNumber = 2;
  inline ::google::protobuf::int32 goldmin() const;
  inline void set_goldmin(::google::protobuf::int32 value);

  // optional int32 goldMax = 3;
  inline bool has_goldmax() const;
  inline void clear_goldmax();
  static const int kGoldMaxFieldNumber = 3;
  inline ::google::protobuf::int32 goldmax() const;
  inline void set_goldmax(::google::protobuf::int32 value);

  // optional int64 winReward = 4;
  inline bool has_winreward() const;
  inline void clear_winreward();
  static const int kWinRewardFieldNumber = 4;
  inline ::google::protobuf::int64 winreward() const;
  inline void set_winreward(::google::protobuf::int64 value);

  // optional int32 winRewardNum = 5;
  inline bool has_winrewardnum() const;
  inline void clear_winrewardnum();
  static const int kWinRewardNumFieldNumber = 5;
  inline ::google::protobuf::int32 winrewardnum() const;
  inline void set_winrewardnum(::google::protobuf::int32 value);

  // optional int64 loseReward = 6;
  inline bool has_losereward() const;
  inline void clear_losereward();
  static const int kLoseRewardFieldNumber = 6;
  inline ::google::protobuf::int64 losereward() const;
  inline void set_losereward(::google::protobuf::int64 value);

  // optional int32 loseRewardNum = 7;
  inline bool has_loserewardnum() const;
  inline void clear_loserewardnum();
  static const int kLoseRewardNumFieldNumber = 7;
  inline ::google::protobuf::int32 loserewardnum() const;
  inline void set_loserewardnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.lightAndShadowreward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_goldmin();
  inline void clear_has_goldmin();
  inline void set_has_goldmax();
  inline void clear_has_goldmax();
  inline void set_has_winreward();
  inline void clear_has_winreward();
  inline void set_has_winrewardnum();
  inline void clear_has_winrewardnum();
  inline void set_has_losereward();
  inline void clear_has_losereward();
  inline void set_has_loserewardnum();
  inline void clear_has_loserewardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 goldmin_;
  ::google::protobuf::int64 winreward_;
  ::google::protobuf::int32 goldmax_;
  ::google::protobuf::int32 winrewardnum_;
  ::google::protobuf::int64 losereward_;
  ::google::protobuf::int32 loserewardnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_lightAndShadow_2eproto();
  friend void protobuf_AssignDesc_lightAndShadow_2eproto();
  friend void protobuf_ShutdownFile_lightAndShadow_2eproto();

  void InitAsDefaultInstance();
  static lightAndShadowreward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_lightAndShadowreward : public ::google::protobuf::Message {
 public:
  Sheet_lightAndShadowreward();
  virtual ~Sheet_lightAndShadowreward();

  Sheet_lightAndShadowreward(const Sheet_lightAndShadowreward& from);

  inline Sheet_lightAndShadowreward& operator=(const Sheet_lightAndShadowreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_lightAndShadowreward& default_instance();

  void Swap(Sheet_lightAndShadowreward* other);

  // implements Message ----------------------------------------------

  Sheet_lightAndShadowreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_lightAndShadowreward& from);
  void MergeFrom(const Sheet_lightAndShadowreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.lightAndShadowreward lightAndShadowreward_List = 1;
  inline int lightandshadowreward_list_size() const;
  inline void clear_lightandshadowreward_list();
  static const int kLightAndShadowrewardListFieldNumber = 1;
  inline const ::proto_ff::lightAndShadowreward& lightandshadowreward_list(int index) const;
  inline ::proto_ff::lightAndShadowreward* mutable_lightandshadowreward_list(int index);
  inline ::proto_ff::lightAndShadowreward* add_lightandshadowreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowreward >&
      lightandshadowreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowreward >*
      mutable_lightandshadowreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_lightAndShadowreward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowreward > lightandshadowreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lightAndShadow_2eproto();
  friend void protobuf_AssignDesc_lightAndShadow_2eproto();
  friend void protobuf_ShutdownFile_lightAndShadow_2eproto();

  void InitAsDefaultInstance();
  static Sheet_lightAndShadowreward* default_instance_;
};
// ===================================================================


// ===================================================================

// lightAndShadowcons

// optional int32 ID = 1;
inline bool lightAndShadowcons::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lightAndShadowcons::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lightAndShadowcons::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lightAndShadowcons::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 lightAndShadowcons::id() const {
  return id_;
}
inline void lightAndShadowcons::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 valuedata = 2;
inline bool lightAndShadowcons::has_valuedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lightAndShadowcons::set_has_valuedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lightAndShadowcons::clear_has_valuedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lightAndShadowcons::clear_valuedata() {
  valuedata_ = GOOGLE_LONGLONG(0);
  clear_has_valuedata();
}
inline ::google::protobuf::int64 lightAndShadowcons::valuedata() const {
  return valuedata_;
}
inline void lightAndShadowcons::set_valuedata(::google::protobuf::int64 value) {
  set_has_valuedata();
  valuedata_ = value;
}

// optional string stringdata = 3;
inline bool lightAndShadowcons::has_stringdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lightAndShadowcons::set_has_stringdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lightAndShadowcons::clear_has_stringdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lightAndShadowcons::clear_stringdata() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    stringdata_->clear();
  }
  clear_has_stringdata();
}
inline const ::std::string& lightAndShadowcons::stringdata() const {
  return *stringdata_;
}
inline void lightAndShadowcons::set_stringdata(const ::std::string& value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void lightAndShadowcons::set_stringdata(const char* value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void lightAndShadowcons::set_stringdata(const char* value, size_t size) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* lightAndShadowcons::mutable_stringdata() {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  return stringdata_;
}
inline ::std::string* lightAndShadowcons::release_stringdata() {
  clear_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringdata_;
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void lightAndShadowcons::set_allocated_stringdata(::std::string* stringdata) {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (stringdata) {
    set_has_stringdata();
    stringdata_ = stringdata;
  } else {
    clear_has_stringdata();
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_lightAndShadowcons

// repeated .proto_ff.lightAndShadowcons lightAndShadowcons_List = 1;
inline int Sheet_lightAndShadowcons::lightandshadowcons_list_size() const {
  return lightandshadowcons_list_.size();
}
inline void Sheet_lightAndShadowcons::clear_lightandshadowcons_list() {
  lightandshadowcons_list_.Clear();
}
inline const ::proto_ff::lightAndShadowcons& Sheet_lightAndShadowcons::lightandshadowcons_list(int index) const {
  return lightandshadowcons_list_.Get(index);
}
inline ::proto_ff::lightAndShadowcons* Sheet_lightAndShadowcons::mutable_lightandshadowcons_list(int index) {
  return lightandshadowcons_list_.Mutable(index);
}
inline ::proto_ff::lightAndShadowcons* Sheet_lightAndShadowcons::add_lightandshadowcons_list() {
  return lightandshadowcons_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowcons >&
Sheet_lightAndShadowcons::lightandshadowcons_list() const {
  return lightandshadowcons_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowcons >*
Sheet_lightAndShadowcons::mutable_lightandshadowcons_list() {
  return &lightandshadowcons_list_;
}

// -------------------------------------------------------------------

// lightAndShadowreward

// optional int32 ID = 1;
inline bool lightAndShadowreward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void lightAndShadowreward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void lightAndShadowreward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void lightAndShadowreward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 lightAndShadowreward::id() const {
  return id_;
}
inline void lightAndShadowreward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 goldMin = 2;
inline bool lightAndShadowreward::has_goldmin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void lightAndShadowreward::set_has_goldmin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void lightAndShadowreward::clear_has_goldmin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void lightAndShadowreward::clear_goldmin() {
  goldmin_ = 0;
  clear_has_goldmin();
}
inline ::google::protobuf::int32 lightAndShadowreward::goldmin() const {
  return goldmin_;
}
inline void lightAndShadowreward::set_goldmin(::google::protobuf::int32 value) {
  set_has_goldmin();
  goldmin_ = value;
}

// optional int32 goldMax = 3;
inline bool lightAndShadowreward::has_goldmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void lightAndShadowreward::set_has_goldmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void lightAndShadowreward::clear_has_goldmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void lightAndShadowreward::clear_goldmax() {
  goldmax_ = 0;
  clear_has_goldmax();
}
inline ::google::protobuf::int32 lightAndShadowreward::goldmax() const {
  return goldmax_;
}
inline void lightAndShadowreward::set_goldmax(::google::protobuf::int32 value) {
  set_has_goldmax();
  goldmax_ = value;
}

// optional int64 winReward = 4;
inline bool lightAndShadowreward::has_winreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void lightAndShadowreward::set_has_winreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void lightAndShadowreward::clear_has_winreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void lightAndShadowreward::clear_winreward() {
  winreward_ = GOOGLE_LONGLONG(0);
  clear_has_winreward();
}
inline ::google::protobuf::int64 lightAndShadowreward::winreward() const {
  return winreward_;
}
inline void lightAndShadowreward::set_winreward(::google::protobuf::int64 value) {
  set_has_winreward();
  winreward_ = value;
}

// optional int32 winRewardNum = 5;
inline bool lightAndShadowreward::has_winrewardnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void lightAndShadowreward::set_has_winrewardnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void lightAndShadowreward::clear_has_winrewardnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void lightAndShadowreward::clear_winrewardnum() {
  winrewardnum_ = 0;
  clear_has_winrewardnum();
}
inline ::google::protobuf::int32 lightAndShadowreward::winrewardnum() const {
  return winrewardnum_;
}
inline void lightAndShadowreward::set_winrewardnum(::google::protobuf::int32 value) {
  set_has_winrewardnum();
  winrewardnum_ = value;
}

// optional int64 loseReward = 6;
inline bool lightAndShadowreward::has_losereward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void lightAndShadowreward::set_has_losereward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void lightAndShadowreward::clear_has_losereward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void lightAndShadowreward::clear_losereward() {
  losereward_ = GOOGLE_LONGLONG(0);
  clear_has_losereward();
}
inline ::google::protobuf::int64 lightAndShadowreward::losereward() const {
  return losereward_;
}
inline void lightAndShadowreward::set_losereward(::google::protobuf::int64 value) {
  set_has_losereward();
  losereward_ = value;
}

// optional int32 loseRewardNum = 7;
inline bool lightAndShadowreward::has_loserewardnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void lightAndShadowreward::set_has_loserewardnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void lightAndShadowreward::clear_has_loserewardnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void lightAndShadowreward::clear_loserewardnum() {
  loserewardnum_ = 0;
  clear_has_loserewardnum();
}
inline ::google::protobuf::int32 lightAndShadowreward::loserewardnum() const {
  return loserewardnum_;
}
inline void lightAndShadowreward::set_loserewardnum(::google::protobuf::int32 value) {
  set_has_loserewardnum();
  loserewardnum_ = value;
}

// -------------------------------------------------------------------

// Sheet_lightAndShadowreward

// repeated .proto_ff.lightAndShadowreward lightAndShadowreward_List = 1;
inline int Sheet_lightAndShadowreward::lightandshadowreward_list_size() const {
  return lightandshadowreward_list_.size();
}
inline void Sheet_lightAndShadowreward::clear_lightandshadowreward_list() {
  lightandshadowreward_list_.Clear();
}
inline const ::proto_ff::lightAndShadowreward& Sheet_lightAndShadowreward::lightandshadowreward_list(int index) const {
  return lightandshadowreward_list_.Get(index);
}
inline ::proto_ff::lightAndShadowreward* Sheet_lightAndShadowreward::mutable_lightandshadowreward_list(int index) {
  return lightandshadowreward_list_.Mutable(index);
}
inline ::proto_ff::lightAndShadowreward* Sheet_lightAndShadowreward::add_lightandshadowreward_list() {
  return lightandshadowreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowreward >&
Sheet_lightAndShadowreward::lightandshadowreward_list() const {
  return lightandshadowreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::lightAndShadowreward >*
Sheet_lightAndShadowreward::mutable_lightandshadowreward_list() {
  return &lightandshadowreward_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lightAndShadow_2eproto__INCLUDED
