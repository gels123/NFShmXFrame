// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colPoints.proto

#ifndef PROTOBUF_colPoints_2eproto__INCLUDED
#define PROTOBUF_colPoints_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_colPoints_2eproto();
void protobuf_AssignDesc_colPoints_2eproto();
void protobuf_ShutdownFile_colPoints_2eproto();

class colPointscolPoints;
class Sheet_colPointscolPoints;
class colPointstask;
class Sheet_colPointstask;

// ===================================================================

class colPointscolPoints : public ::google::protobuf::Message {
 public:
  colPointscolPoints();
  virtual ~colPointscolPoints();

  colPointscolPoints(const colPointscolPoints& from);

  inline colPointscolPoints& operator=(const colPointscolPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const colPointscolPoints& default_instance();

  void Swap(colPointscolPoints* other);

  // implements Message ----------------------------------------------

  colPointscolPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const colPointscolPoints& from);
  void MergeFrom(const colPointscolPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // optional int64 boxid = 3;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxidFieldNumber = 3;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // optional int32 beginPoint = 4;
  inline bool has_beginpoint() const;
  inline void clear_beginpoint();
  static const int kBeginPointFieldNumber = 4;
  inline ::google::protobuf::int32 beginpoint() const;
  inline void set_beginpoint(::google::protobuf::int32 value);

  // optional int32 targetPoint = 5;
  inline bool has_targetpoint() const;
  inline void clear_targetpoint();
  static const int kTargetPointFieldNumber = 5;
  inline ::google::protobuf::int32 targetpoint() const;
  inline void set_targetpoint(::google::protobuf::int32 value);

  // optional string taskID = 6;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 6;
  inline const ::std::string& taskid() const;
  inline void set_taskid(const ::std::string& value);
  inline void set_taskid(const char* value);
  inline void set_taskid(const char* value, size_t size);
  inline ::std::string* mutable_taskid();
  inline ::std::string* release_taskid();
  inline void set_allocated_taskid(::std::string* taskid);

  // @@protoc_insertion_point(class_scope:proto_ff.colPointscolPoints)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_beginpoint();
  inline void clear_has_beginpoint();
  inline void set_has_targetpoint();
  inline void clear_has_targetpoint();
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 weight_;
  ::google::protobuf::int64 boxid_;
  ::google::protobuf::int32 beginpoint_;
  ::google::protobuf::int32 targetpoint_;
  ::std::string* taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_colPoints_2eproto();
  friend void protobuf_AssignDesc_colPoints_2eproto();
  friend void protobuf_ShutdownFile_colPoints_2eproto();

  void InitAsDefaultInstance();
  static colPointscolPoints* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_colPointscolPoints : public ::google::protobuf::Message {
 public:
  Sheet_colPointscolPoints();
  virtual ~Sheet_colPointscolPoints();

  Sheet_colPointscolPoints(const Sheet_colPointscolPoints& from);

  inline Sheet_colPointscolPoints& operator=(const Sheet_colPointscolPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_colPointscolPoints& default_instance();

  void Swap(Sheet_colPointscolPoints* other);

  // implements Message ----------------------------------------------

  Sheet_colPointscolPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_colPointscolPoints& from);
  void MergeFrom(const Sheet_colPointscolPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.colPointscolPoints colPointscolPoints_List = 1;
  inline int colpointscolpoints_list_size() const;
  inline void clear_colpointscolpoints_list();
  static const int kColPointscolPointsListFieldNumber = 1;
  inline const ::proto_ff::colPointscolPoints& colpointscolpoints_list(int index) const;
  inline ::proto_ff::colPointscolPoints* mutable_colpointscolpoints_list(int index);
  inline ::proto_ff::colPointscolPoints* add_colpointscolpoints_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointscolPoints >&
      colpointscolpoints_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointscolPoints >*
      mutable_colpointscolpoints_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_colPointscolPoints)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointscolPoints > colpointscolpoints_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_colPoints_2eproto();
  friend void protobuf_AssignDesc_colPoints_2eproto();
  friend void protobuf_ShutdownFile_colPoints_2eproto();

  void InitAsDefaultInstance();
  static Sheet_colPointscolPoints* default_instance_;
};
// -------------------------------------------------------------------

class colPointstask : public ::google::protobuf::Message {
 public:
  colPointstask();
  virtual ~colPointstask();

  colPointstask(const colPointstask& from);

  inline colPointstask& operator=(const colPointstask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const colPointstask& default_instance();

  void Swap(colPointstask* other);

  // implements Message ----------------------------------------------

  colPointstask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const colPointstask& from);
  void MergeFrom(const colPointstask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 task = 4;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 4;
  inline ::google::protobuf::int32 task() const;
  inline void set_task(::google::protobuf::int32 value);

  // optional string taskParam = 5;
  inline bool has_taskparam() const;
  inline void clear_taskparam();
  static const int kTaskParamFieldNumber = 5;
  inline const ::std::string& taskparam() const;
  inline void set_taskparam(const ::std::string& value);
  inline void set_taskparam(const char* value);
  inline void set_taskparam(const char* value, size_t size);
  inline ::std::string* mutable_taskparam();
  inline ::std::string* release_taskparam();
  inline void set_allocated_taskparam(::std::string* taskparam);

  // @@protoc_insertion_point(class_scope:proto_ff.colPointstask)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_taskparam();
  inline void clear_has_taskparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 point_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 task_;
  ::std::string* taskparam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_colPoints_2eproto();
  friend void protobuf_AssignDesc_colPoints_2eproto();
  friend void protobuf_ShutdownFile_colPoints_2eproto();

  void InitAsDefaultInstance();
  static colPointstask* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_colPointstask : public ::google::protobuf::Message {
 public:
  Sheet_colPointstask();
  virtual ~Sheet_colPointstask();

  Sheet_colPointstask(const Sheet_colPointstask& from);

  inline Sheet_colPointstask& operator=(const Sheet_colPointstask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_colPointstask& default_instance();

  void Swap(Sheet_colPointstask* other);

  // implements Message ----------------------------------------------

  Sheet_colPointstask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_colPointstask& from);
  void MergeFrom(const Sheet_colPointstask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.colPointstask colPointstask_List = 1;
  inline int colpointstask_list_size() const;
  inline void clear_colpointstask_list();
  static const int kColPointstaskListFieldNumber = 1;
  inline const ::proto_ff::colPointstask& colpointstask_list(int index) const;
  inline ::proto_ff::colPointstask* mutable_colpointstask_list(int index);
  inline ::proto_ff::colPointstask* add_colpointstask_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointstask >&
      colpointstask_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointstask >*
      mutable_colpointstask_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_colPointstask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointstask > colpointstask_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_colPoints_2eproto();
  friend void protobuf_AssignDesc_colPoints_2eproto();
  friend void protobuf_ShutdownFile_colPoints_2eproto();

  void InitAsDefaultInstance();
  static Sheet_colPointstask* default_instance_;
};
// ===================================================================


// ===================================================================

// colPointscolPoints

// optional int32 id = 1;
inline bool colPointscolPoints::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void colPointscolPoints::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void colPointscolPoints::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void colPointscolPoints::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 colPointscolPoints::id() const {
  return id_;
}
inline void colPointscolPoints::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 weight = 2;
inline bool colPointscolPoints::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void colPointscolPoints::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void colPointscolPoints::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void colPointscolPoints::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline ::google::protobuf::int32 colPointscolPoints::weight() const {
  return weight_;
}
inline void colPointscolPoints::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
}

// optional int64 boxid = 3;
inline bool colPointscolPoints::has_boxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void colPointscolPoints::set_has_boxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void colPointscolPoints::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void colPointscolPoints::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 colPointscolPoints::boxid() const {
  return boxid_;
}
inline void colPointscolPoints::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int32 beginPoint = 4;
inline bool colPointscolPoints::has_beginpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void colPointscolPoints::set_has_beginpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void colPointscolPoints::clear_has_beginpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void colPointscolPoints::clear_beginpoint() {
  beginpoint_ = 0;
  clear_has_beginpoint();
}
inline ::google::protobuf::int32 colPointscolPoints::beginpoint() const {
  return beginpoint_;
}
inline void colPointscolPoints::set_beginpoint(::google::protobuf::int32 value) {
  set_has_beginpoint();
  beginpoint_ = value;
}

// optional int32 targetPoint = 5;
inline bool colPointscolPoints::has_targetpoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void colPointscolPoints::set_has_targetpoint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void colPointscolPoints::clear_has_targetpoint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void colPointscolPoints::clear_targetpoint() {
  targetpoint_ = 0;
  clear_has_targetpoint();
}
inline ::google::protobuf::int32 colPointscolPoints::targetpoint() const {
  return targetpoint_;
}
inline void colPointscolPoints::set_targetpoint(::google::protobuf::int32 value) {
  set_has_targetpoint();
  targetpoint_ = value;
}

// optional string taskID = 6;
inline bool colPointscolPoints::has_taskid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void colPointscolPoints::set_has_taskid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void colPointscolPoints::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void colPointscolPoints::clear_taskid() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    taskid_->clear();
  }
  clear_has_taskid();
}
inline const ::std::string& colPointscolPoints::taskid() const {
  return *taskid_;
}
inline void colPointscolPoints::set_taskid(const ::std::string& value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void colPointscolPoints::set_taskid(const char* value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void colPointscolPoints::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* colPointscolPoints::mutable_taskid() {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  return taskid_;
}
inline ::std::string* colPointscolPoints::release_taskid() {
  clear_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskid_;
    taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void colPointscolPoints::set_allocated_taskid(::std::string* taskid) {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (taskid) {
    set_has_taskid();
    taskid_ = taskid;
  } else {
    clear_has_taskid();
    taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_colPointscolPoints

// repeated .proto_ff.colPointscolPoints colPointscolPoints_List = 1;
inline int Sheet_colPointscolPoints::colpointscolpoints_list_size() const {
  return colpointscolpoints_list_.size();
}
inline void Sheet_colPointscolPoints::clear_colpointscolpoints_list() {
  colpointscolpoints_list_.Clear();
}
inline const ::proto_ff::colPointscolPoints& Sheet_colPointscolPoints::colpointscolpoints_list(int index) const {
  return colpointscolpoints_list_.Get(index);
}
inline ::proto_ff::colPointscolPoints* Sheet_colPointscolPoints::mutable_colpointscolpoints_list(int index) {
  return colpointscolpoints_list_.Mutable(index);
}
inline ::proto_ff::colPointscolPoints* Sheet_colPointscolPoints::add_colpointscolpoints_list() {
  return colpointscolpoints_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointscolPoints >&
Sheet_colPointscolPoints::colpointscolpoints_list() const {
  return colpointscolpoints_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointscolPoints >*
Sheet_colPointscolPoints::mutable_colpointscolpoints_list() {
  return &colpointscolpoints_list_;
}

// -------------------------------------------------------------------

// colPointstask

// optional int32 id = 1;
inline bool colPointstask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void colPointstask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void colPointstask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void colPointstask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 colPointstask::id() const {
  return id_;
}
inline void colPointstask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 point = 2;
inline bool colPointstask::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void colPointstask::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void colPointstask::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void colPointstask::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 colPointstask::point() const {
  return point_;
}
inline void colPointstask::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// optional int32 num = 3;
inline bool colPointstask::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void colPointstask::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void colPointstask::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void colPointstask::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 colPointstask::num() const {
  return num_;
}
inline void colPointstask::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 task = 4;
inline bool colPointstask::has_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void colPointstask::set_has_task() {
  _has_bits_[0] |= 0x00000008u;
}
inline void colPointstask::clear_has_task() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void colPointstask::clear_task() {
  task_ = 0;
  clear_has_task();
}
inline ::google::protobuf::int32 colPointstask::task() const {
  return task_;
}
inline void colPointstask::set_task(::google::protobuf::int32 value) {
  set_has_task();
  task_ = value;
}

// optional string taskParam = 5;
inline bool colPointstask::has_taskparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void colPointstask::set_has_taskparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void colPointstask::clear_has_taskparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void colPointstask::clear_taskparam() {
  if (taskparam_ != &::google::protobuf::internal::kEmptyString) {
    taskparam_->clear();
  }
  clear_has_taskparam();
}
inline const ::std::string& colPointstask::taskparam() const {
  return *taskparam_;
}
inline void colPointstask::set_taskparam(const ::std::string& value) {
  set_has_taskparam();
  if (taskparam_ == &::google::protobuf::internal::kEmptyString) {
    taskparam_ = new ::std::string;
  }
  taskparam_->assign(value);
}
inline void colPointstask::set_taskparam(const char* value) {
  set_has_taskparam();
  if (taskparam_ == &::google::protobuf::internal::kEmptyString) {
    taskparam_ = new ::std::string;
  }
  taskparam_->assign(value);
}
inline void colPointstask::set_taskparam(const char* value, size_t size) {
  set_has_taskparam();
  if (taskparam_ == &::google::protobuf::internal::kEmptyString) {
    taskparam_ = new ::std::string;
  }
  taskparam_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* colPointstask::mutable_taskparam() {
  set_has_taskparam();
  if (taskparam_ == &::google::protobuf::internal::kEmptyString) {
    taskparam_ = new ::std::string;
  }
  return taskparam_;
}
inline ::std::string* colPointstask::release_taskparam() {
  clear_has_taskparam();
  if (taskparam_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskparam_;
    taskparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void colPointstask::set_allocated_taskparam(::std::string* taskparam) {
  if (taskparam_ != &::google::protobuf::internal::kEmptyString) {
    delete taskparam_;
  }
  if (taskparam) {
    set_has_taskparam();
    taskparam_ = taskparam;
  } else {
    clear_has_taskparam();
    taskparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_colPointstask

// repeated .proto_ff.colPointstask colPointstask_List = 1;
inline int Sheet_colPointstask::colpointstask_list_size() const {
  return colpointstask_list_.size();
}
inline void Sheet_colPointstask::clear_colpointstask_list() {
  colpointstask_list_.Clear();
}
inline const ::proto_ff::colPointstask& Sheet_colPointstask::colpointstask_list(int index) const {
  return colpointstask_list_.Get(index);
}
inline ::proto_ff::colPointstask* Sheet_colPointstask::mutable_colpointstask_list(int index) {
  return colpointstask_list_.Mutable(index);
}
inline ::proto_ff::colPointstask* Sheet_colPointstask::add_colpointstask_list() {
  return colpointstask_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointstask >&
Sheet_colPointstask::colpointstask_list() const {
  return colpointstask_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::colPointstask >*
Sheet_colPointstask::mutable_colpointstask_list() {
  return &colpointstask_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_colPoints_2eproto__INCLUDED
