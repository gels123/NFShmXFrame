// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: title.proto

#ifndef PROTOBUF_title_2eproto__INCLUDED
#define PROTOBUF_title_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_title_2eproto();
void protobuf_AssignDesc_title_2eproto();
void protobuf_ShutdownFile_title_2eproto();

class titletype;
class Sheet_titletype;
class titletitleattributeDesc;
class titletitle;
class Sheet_titletitle;

// ===================================================================

class titletype : public ::google::protobuf::Message {
 public:
  titletype();
  virtual ~titletype();

  titletype(const titletype& from);

  inline titletype& operator=(const titletype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const titletype& default_instance();

  void Swap(titletype* other);

  // implements Message ----------------------------------------------

  titletype* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const titletype& from);
  void MergeFrom(const titletype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.titletype)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_title_2eproto();
  friend void protobuf_AssignDesc_title_2eproto();
  friend void protobuf_ShutdownFile_title_2eproto();

  void InitAsDefaultInstance();
  static titletype* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_titletype : public ::google::protobuf::Message {
 public:
  Sheet_titletype();
  virtual ~Sheet_titletype();

  Sheet_titletype(const Sheet_titletype& from);

  inline Sheet_titletype& operator=(const Sheet_titletype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_titletype& default_instance();

  void Swap(Sheet_titletype* other);

  // implements Message ----------------------------------------------

  Sheet_titletype* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_titletype& from);
  void MergeFrom(const Sheet_titletype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.titletype titletype_List = 1;
  inline int titletype_list_size() const;
  inline void clear_titletype_list();
  static const int kTitletypeListFieldNumber = 1;
  inline const ::proto_ff::titletype& titletype_list(int index) const;
  inline ::proto_ff::titletype* mutable_titletype_list(int index);
  inline ::proto_ff::titletype* add_titletype_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::titletype >&
      titletype_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::titletype >*
      mutable_titletype_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_titletype)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::titletype > titletype_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_title_2eproto();
  friend void protobuf_AssignDesc_title_2eproto();
  friend void protobuf_ShutdownFile_title_2eproto();

  void InitAsDefaultInstance();
  static Sheet_titletype* default_instance_;
};
// -------------------------------------------------------------------

class titletitleattributeDesc : public ::google::protobuf::Message {
 public:
  titletitleattributeDesc();
  virtual ~titletitleattributeDesc();

  titletitleattributeDesc(const titletitleattributeDesc& from);

  inline titletitleattributeDesc& operator=(const titletitleattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const titletitleattributeDesc& default_instance();

  void Swap(titletitleattributeDesc* other);

  // implements Message ----------------------------------------------

  titletitleattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const titletitleattributeDesc& from);
  void MergeFrom(const titletitleattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.titletitleattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_title_2eproto();
  friend void protobuf_AssignDesc_title_2eproto();
  friend void protobuf_ShutdownFile_title_2eproto();

  void InitAsDefaultInstance();
  static titletitleattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class titletitle : public ::google::protobuf::Message {
 public:
  titletitle();
  virtual ~titletitle();

  titletitle(const titletitle& from);

  inline titletitle& operator=(const titletitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const titletitle& default_instance();

  void Swap(titletitle* other);

  // implements Message ----------------------------------------------

  titletitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const titletitle& from);
  void MergeFrom(const titletitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 subType = 4;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 4;
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);

  // optional string eventValue = 5;
  inline bool has_eventvalue() const;
  inline void clear_eventvalue();
  static const int kEventValueFieldNumber = 5;
  inline const ::std::string& eventvalue() const;
  inline void set_eventvalue(const ::std::string& value);
  inline void set_eventvalue(const char* value);
  inline void set_eventvalue(const char* value, size_t size);
  inline ::std::string* mutable_eventvalue();
  inline ::std::string* release_eventvalue();
  inline void set_allocated_eventvalue(::std::string* eventvalue);

  // optional string describe = 6;
  inline bool has_describe() const;
  inline void clear_describe();
  static const int kDescribeFieldNumber = 6;
  inline const ::std::string& describe() const;
  inline void set_describe(const ::std::string& value);
  inline void set_describe(const char* value);
  inline void set_describe(const char* value, size_t size);
  inline ::std::string* mutable_describe();
  inline ::std::string* release_describe();
  inline void set_allocated_describe(::std::string* describe);

  // optional int32 addTime = 7;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddTimeFieldNumber = 7;
  inline ::google::protobuf::int32 addtime() const;
  inline void set_addtime(::google::protobuf::int32 value);

  // optional int32 lifeTime = 8;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifeTimeFieldNumber = 8;
  inline ::google::protobuf::int32 lifetime() const;
  inline void set_lifetime(::google::protobuf::int32 value);

  // repeated .proto_ff.titletitleattributeDesc attribute = 9;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 9;
  inline const ::proto_ff::titletitleattributeDesc& attribute(int index) const;
  inline ::proto_ff::titletitleattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::titletitleattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitleattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitleattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.titletitle)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_eventvalue();
  inline void clear_has_eventvalue();
  inline void set_has_describe();
  inline void clear_has_describe();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_lifetime();
  inline void clear_has_lifetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 subtype_;
  ::std::string* eventvalue_;
  ::std::string* describe_;
  ::google::protobuf::int32 addtime_;
  ::google::protobuf::int32 lifetime_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitleattributeDesc > attribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_title_2eproto();
  friend void protobuf_AssignDesc_title_2eproto();
  friend void protobuf_ShutdownFile_title_2eproto();

  void InitAsDefaultInstance();
  static titletitle* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_titletitle : public ::google::protobuf::Message {
 public:
  Sheet_titletitle();
  virtual ~Sheet_titletitle();

  Sheet_titletitle(const Sheet_titletitle& from);

  inline Sheet_titletitle& operator=(const Sheet_titletitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_titletitle& default_instance();

  void Swap(Sheet_titletitle* other);

  // implements Message ----------------------------------------------

  Sheet_titletitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_titletitle& from);
  void MergeFrom(const Sheet_titletitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.titletitle titletitle_List = 1;
  inline int titletitle_list_size() const;
  inline void clear_titletitle_list();
  static const int kTitletitleListFieldNumber = 1;
  inline const ::proto_ff::titletitle& titletitle_list(int index) const;
  inline ::proto_ff::titletitle* mutable_titletitle_list(int index);
  inline ::proto_ff::titletitle* add_titletitle_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitle >&
      titletitle_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitle >*
      mutable_titletitle_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_titletitle)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitle > titletitle_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_title_2eproto();
  friend void protobuf_AssignDesc_title_2eproto();
  friend void protobuf_ShutdownFile_title_2eproto();

  void InitAsDefaultInstance();
  static Sheet_titletitle* default_instance_;
};
// ===================================================================


// ===================================================================

// titletype

// optional int32 type = 1;
inline bool titletype::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void titletype::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void titletype::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void titletype::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 titletype::type() const {
  return type_;
}
inline void titletype::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Sheet_titletype

// repeated .proto_ff.titletype titletype_List = 1;
inline int Sheet_titletype::titletype_list_size() const {
  return titletype_list_.size();
}
inline void Sheet_titletype::clear_titletype_list() {
  titletype_list_.Clear();
}
inline const ::proto_ff::titletype& Sheet_titletype::titletype_list(int index) const {
  return titletype_list_.Get(index);
}
inline ::proto_ff::titletype* Sheet_titletype::mutable_titletype_list(int index) {
  return titletype_list_.Mutable(index);
}
inline ::proto_ff::titletype* Sheet_titletype::add_titletype_list() {
  return titletype_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::titletype >&
Sheet_titletype::titletype_list() const {
  return titletype_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::titletype >*
Sheet_titletype::mutable_titletype_list() {
  return &titletype_list_;
}

// -------------------------------------------------------------------

// titletitleattributeDesc

// optional int32 type = 1;
inline bool titletitleattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void titletitleattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void titletitleattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void titletitleattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 titletitleattributeDesc::type() const {
  return type_;
}
inline void titletitleattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool titletitleattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void titletitleattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void titletitleattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void titletitleattributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 titletitleattributeDesc::value() const {
  return value_;
}
inline void titletitleattributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// titletitle

// optional int64 id = 1;
inline bool titletitle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void titletitle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void titletitle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void titletitle::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 titletitle::id() const {
  return id_;
}
inline void titletitle::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool titletitle::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void titletitle::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void titletitle::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void titletitle::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& titletitle::name() const {
  return *name_;
}
inline void titletitle::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void titletitle::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void titletitle::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* titletitle::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* titletitle::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void titletitle::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 3;
inline bool titletitle::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void titletitle::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void titletitle::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void titletitle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 titletitle::type() const {
  return type_;
}
inline void titletitle::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 subType = 4;
inline bool titletitle::has_subtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void titletitle::set_has_subtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void titletitle::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void titletitle::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 titletitle::subtype() const {
  return subtype_;
}
inline void titletitle::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
}

// optional string eventValue = 5;
inline bool titletitle::has_eventvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void titletitle::set_has_eventvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void titletitle::clear_has_eventvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void titletitle::clear_eventvalue() {
  if (eventvalue_ != &::google::protobuf::internal::kEmptyString) {
    eventvalue_->clear();
  }
  clear_has_eventvalue();
}
inline const ::std::string& titletitle::eventvalue() const {
  return *eventvalue_;
}
inline void titletitle::set_eventvalue(const ::std::string& value) {
  set_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    eventvalue_ = new ::std::string;
  }
  eventvalue_->assign(value);
}
inline void titletitle::set_eventvalue(const char* value) {
  set_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    eventvalue_ = new ::std::string;
  }
  eventvalue_->assign(value);
}
inline void titletitle::set_eventvalue(const char* value, size_t size) {
  set_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    eventvalue_ = new ::std::string;
  }
  eventvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* titletitle::mutable_eventvalue() {
  set_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    eventvalue_ = new ::std::string;
  }
  return eventvalue_;
}
inline ::std::string* titletitle::release_eventvalue() {
  clear_has_eventvalue();
  if (eventvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventvalue_;
    eventvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void titletitle::set_allocated_eventvalue(::std::string* eventvalue) {
  if (eventvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete eventvalue_;
  }
  if (eventvalue) {
    set_has_eventvalue();
    eventvalue_ = eventvalue;
  } else {
    clear_has_eventvalue();
    eventvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string describe = 6;
inline bool titletitle::has_describe() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void titletitle::set_has_describe() {
  _has_bits_[0] |= 0x00000020u;
}
inline void titletitle::clear_has_describe() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void titletitle::clear_describe() {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    describe_->clear();
  }
  clear_has_describe();
}
inline const ::std::string& titletitle::describe() const {
  return *describe_;
}
inline void titletitle::set_describe(const ::std::string& value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void titletitle::set_describe(const char* value) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(value);
}
inline void titletitle::set_describe(const char* value, size_t size) {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  describe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* titletitle::mutable_describe() {
  set_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    describe_ = new ::std::string;
  }
  return describe_;
}
inline ::std::string* titletitle::release_describe() {
  clear_has_describe();
  if (describe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describe_;
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void titletitle::set_allocated_describe(::std::string* describe) {
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (describe) {
    set_has_describe();
    describe_ = describe;
  } else {
    clear_has_describe();
    describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 addTime = 7;
inline bool titletitle::has_addtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void titletitle::set_has_addtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void titletitle::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void titletitle::clear_addtime() {
  addtime_ = 0;
  clear_has_addtime();
}
inline ::google::protobuf::int32 titletitle::addtime() const {
  return addtime_;
}
inline void titletitle::set_addtime(::google::protobuf::int32 value) {
  set_has_addtime();
  addtime_ = value;
}

// optional int32 lifeTime = 8;
inline bool titletitle::has_lifetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void titletitle::set_has_lifetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void titletitle::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void titletitle::clear_lifetime() {
  lifetime_ = 0;
  clear_has_lifetime();
}
inline ::google::protobuf::int32 titletitle::lifetime() const {
  return lifetime_;
}
inline void titletitle::set_lifetime(::google::protobuf::int32 value) {
  set_has_lifetime();
  lifetime_ = value;
}

// repeated .proto_ff.titletitleattributeDesc attribute = 9;
inline int titletitle::attribute_size() const {
  return attribute_.size();
}
inline void titletitle::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::titletitleattributeDesc& titletitle::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::titletitleattributeDesc* titletitle::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::titletitleattributeDesc* titletitle::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitleattributeDesc >&
titletitle::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitleattributeDesc >*
titletitle::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_titletitle

// repeated .proto_ff.titletitle titletitle_List = 1;
inline int Sheet_titletitle::titletitle_list_size() const {
  return titletitle_list_.size();
}
inline void Sheet_titletitle::clear_titletitle_list() {
  titletitle_list_.Clear();
}
inline const ::proto_ff::titletitle& Sheet_titletitle::titletitle_list(int index) const {
  return titletitle_list_.Get(index);
}
inline ::proto_ff::titletitle* Sheet_titletitle::mutable_titletitle_list(int index) {
  return titletitle_list_.Mutable(index);
}
inline ::proto_ff::titletitle* Sheet_titletitle::add_titletitle_list() {
  return titletitle_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitle >&
Sheet_titletitle::titletitle_list() const {
  return titletitle_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::titletitle >*
Sheet_titletitle::mutable_titletitle_list() {
  return &titletitle_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_title_2eproto__INCLUDED
