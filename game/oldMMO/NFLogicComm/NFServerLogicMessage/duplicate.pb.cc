// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: duplicate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "duplicate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* duplicateduplicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicateduplicate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicateduplicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicateduplicate_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicateconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicateconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicateconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicateconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicateendlessMaze_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicateendlessMaze_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicateendlessMaze_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicateendlessMaze_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicatetowerReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicatetowerReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicatetowerReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicatetowerReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicatedungeonRewardrewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicatedungeonRewardrewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicatedungeonReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicatedungeonReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicatedungeonReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicatedungeonReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicategroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicategroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicategroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicategroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicatesweepmonsterNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicatesweepmonsterNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicatesweepmonsterNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicatesweepmonsterNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicateGuildbosstime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicateGuildbosstime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicateGuildbosstime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicateGuildbosstime_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicateGuildbosskillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicateGuildbosskillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicateGuildboss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicateGuildboss_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicateGuildboss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicateGuildboss_reflection_ = NULL;
const ::google::protobuf::Descriptor* duplicateGuildDuplicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  duplicateGuildDuplicate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_duplicateGuildDuplicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_duplicateGuildDuplicate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_duplicate_2eproto() {
  protobuf_AddDesc_duplicate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "duplicate.proto");
  GOOGLE_CHECK(file != NULL);
  duplicateduplicate_descriptor_ = file->message_type(0);
  static const int duplicateduplicate_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, duplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, duplicatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, duplicatetitlepic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, duplicatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, playtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, sceneresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, linkduplicaterequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, isautofight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, duplicateconditiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, revivemaxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, dropnormalmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, dropelitemonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, dropbossmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, sceneaiscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, bossdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, teamobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, gradecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, sweeprewardboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, sweeprewardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, trackpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, pathofmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, ispatrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, sweeptype_),
  };
  duplicateduplicate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicateduplicate_descriptor_,
      duplicateduplicate::default_instance_,
      duplicateduplicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateduplicate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicateduplicate));
  Sheet_duplicateduplicate_descriptor_ = file->message_type(1);
  static const int Sheet_duplicateduplicate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateduplicate, duplicateduplicate_list_),
  };
  Sheet_duplicateduplicate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicateduplicate_descriptor_,
      Sheet_duplicateduplicate::default_instance_,
      Sheet_duplicateduplicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateduplicate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateduplicate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicateduplicate));
  duplicateconstant_descriptor_ = file->message_type(2);
  static const int duplicateconstant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateconstant, constantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateconstant, constantdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateconstant, stringdata_),
  };
  duplicateconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicateconstant_descriptor_,
      duplicateconstant::default_instance_,
      duplicateconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicateconstant));
  Sheet_duplicateconstant_descriptor_ = file->message_type(3);
  static const int Sheet_duplicateconstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateconstant, duplicateconstant_list_),
  };
  Sheet_duplicateconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicateconstant_descriptor_,
      Sheet_duplicateconstant::default_instance_,
      Sheet_duplicateconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicateconstant));
  duplicateendlessMaze_descriptor_ = file->message_type(4);
  static const int duplicateendlessMaze_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateendlessMaze, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateendlessMaze, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateendlessMaze, duplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateendlessMaze, createrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateendlessMaze, rewardid_),
  };
  duplicateendlessMaze_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicateendlessMaze_descriptor_,
      duplicateendlessMaze::default_instance_,
      duplicateendlessMaze_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateendlessMaze, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateendlessMaze, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicateendlessMaze));
  Sheet_duplicateendlessMaze_descriptor_ = file->message_type(5);
  static const int Sheet_duplicateendlessMaze_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateendlessMaze, duplicateendlessmaze_list_),
  };
  Sheet_duplicateendlessMaze_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicateendlessMaze_descriptor_,
      Sheet_duplicateendlessMaze::default_instance_,
      Sheet_duplicateendlessMaze_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateendlessMaze, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateendlessMaze, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicateendlessMaze));
  duplicatetowerReward_descriptor_ = file->message_type(6);
  static const int duplicatetowerReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatetowerReward, floormin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatetowerReward, floormax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatetowerReward, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatetowerReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatetowerReward, itemnum_),
  };
  duplicatetowerReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicatetowerReward_descriptor_,
      duplicatetowerReward::default_instance_,
      duplicatetowerReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatetowerReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatetowerReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicatetowerReward));
  Sheet_duplicatetowerReward_descriptor_ = file->message_type(7);
  static const int Sheet_duplicatetowerReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatetowerReward, duplicatetowerreward_list_),
  };
  Sheet_duplicatetowerReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicatetowerReward_descriptor_,
      Sheet_duplicatetowerReward::default_instance_,
      Sheet_duplicatetowerReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatetowerReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatetowerReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicatetowerReward));
  duplicatedungeonRewardrewardDesc_descriptor_ = file->message_type(8);
  static const int duplicatedungeonRewardrewardDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonRewardrewardDesc, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonRewardrewardDesc, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonRewardrewardDesc, num_),
  };
  duplicatedungeonRewardrewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicatedungeonRewardrewardDesc_descriptor_,
      duplicatedungeonRewardrewardDesc::default_instance_,
      duplicatedungeonRewardrewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonRewardrewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonRewardrewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicatedungeonRewardrewardDesc));
  duplicatedungeonReward_descriptor_ = file->message_type(9);
  static const int duplicatedungeonReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonReward, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonReward, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonReward, passreceivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonReward, reward_),
  };
  duplicatedungeonReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicatedungeonReward_descriptor_,
      duplicatedungeonReward::default_instance_,
      duplicatedungeonReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatedungeonReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicatedungeonReward));
  Sheet_duplicatedungeonReward_descriptor_ = file->message_type(10);
  static const int Sheet_duplicatedungeonReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatedungeonReward, duplicatedungeonreward_list_),
  };
  Sheet_duplicatedungeonReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicatedungeonReward_descriptor_,
      Sheet_duplicatedungeonReward::default_instance_,
      Sheet_duplicatedungeonReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatedungeonReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatedungeonReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicatedungeonReward));
  duplicategroup_descriptor_ = file->message_type(11);
  static const int duplicategroup_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, duplicatetitlepic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, unlocklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, belongtotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, dynamiclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, timesres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, grouptimestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, grouptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, refreshtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, enteritemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, relivetpye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, sweepcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, buyentertimescosttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, buyentertimescost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, pathfindingtype_),
  };
  duplicategroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicategroup_descriptor_,
      duplicategroup::default_instance_,
      duplicategroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicategroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicategroup));
  Sheet_duplicategroup_descriptor_ = file->message_type(12);
  static const int Sheet_duplicategroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicategroup, duplicategroup_list_),
  };
  Sheet_duplicategroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicategroup_descriptor_,
      Sheet_duplicategroup::default_instance_,
      Sheet_duplicategroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicategroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicategroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicategroup));
  duplicatesweepmonsterNum_descriptor_ = file->message_type(13);
  static const int duplicatesweepmonsterNum_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatesweepmonsterNum, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatesweepmonsterNum, sweeptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatesweepmonsterNum, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatesweepmonsterNum, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatesweepmonsterNum, killnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatesweepmonsterNum, monstervaluetype_),
  };
  duplicatesweepmonsterNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicatesweepmonsterNum_descriptor_,
      duplicatesweepmonsterNum::default_instance_,
      duplicatesweepmonsterNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatesweepmonsterNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicatesweepmonsterNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicatesweepmonsterNum));
  Sheet_duplicatesweepmonsterNum_descriptor_ = file->message_type(14);
  static const int Sheet_duplicatesweepmonsterNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatesweepmonsterNum, duplicatesweepmonsternum_list_),
  };
  Sheet_duplicatesweepmonsterNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicatesweepmonsterNum_descriptor_,
      Sheet_duplicatesweepmonsterNum::default_instance_,
      Sheet_duplicatesweepmonsterNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatesweepmonsterNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicatesweepmonsterNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicatesweepmonsterNum));
  duplicateGuildbosstime_descriptor_ = file->message_type(15);
  static const int duplicateGuildbosstime_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosstime, duplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosstime, opencycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosstime, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosstime, bossgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosstime, relevance_),
  };
  duplicateGuildbosstime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicateGuildbosstime_descriptor_,
      duplicateGuildbosstime::default_instance_,
      duplicateGuildbosstime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosstime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosstime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicateGuildbosstime));
  Sheet_duplicateGuildbosstime_descriptor_ = file->message_type(16);
  static const int Sheet_duplicateGuildbosstime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildbosstime, duplicateguildbosstime_list_),
  };
  Sheet_duplicateGuildbosstime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicateGuildbosstime_descriptor_,
      Sheet_duplicateGuildbosstime::default_instance_,
      Sheet_duplicateGuildbosstime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildbosstime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildbosstime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicateGuildbosstime));
  duplicateGuildbosskillDesc_descriptor_ = file->message_type(17);
  static const int duplicateGuildbosskillDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosskillDesc, small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosskillDesc, large_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosskillDesc, weaken_),
  };
  duplicateGuildbosskillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicateGuildbosskillDesc_descriptor_,
      duplicateGuildbosskillDesc::default_instance_,
      duplicateGuildbosskillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosskillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildbosskillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicateGuildbosskillDesc));
  duplicateGuildboss_descriptor_ = file->message_type(18);
  static const int duplicateGuildboss_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildboss, duplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildboss, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildboss, kill_),
  };
  duplicateGuildboss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicateGuildboss_descriptor_,
      duplicateGuildboss::default_instance_,
      duplicateGuildboss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildboss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildboss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicateGuildboss));
  Sheet_duplicateGuildboss_descriptor_ = file->message_type(19);
  static const int Sheet_duplicateGuildboss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildboss, duplicateguildboss_list_),
  };
  Sheet_duplicateGuildboss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicateGuildboss_descriptor_,
      Sheet_duplicateGuildboss::default_instance_,
      Sheet_duplicateGuildboss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildboss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildboss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicateGuildboss));
  duplicateGuildDuplicate_descriptor_ = file->message_type(20);
  static const int duplicateGuildDuplicate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildDuplicate, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildDuplicate, monsterexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildDuplicate, bossexp_),
  };
  duplicateGuildDuplicate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      duplicateGuildDuplicate_descriptor_,
      duplicateGuildDuplicate::default_instance_,
      duplicateGuildDuplicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildDuplicate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(duplicateGuildDuplicate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(duplicateGuildDuplicate));
  Sheet_duplicateGuildDuplicate_descriptor_ = file->message_type(21);
  static const int Sheet_duplicateGuildDuplicate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildDuplicate, duplicateguildduplicate_list_),
  };
  Sheet_duplicateGuildDuplicate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_duplicateGuildDuplicate_descriptor_,
      Sheet_duplicateGuildDuplicate::default_instance_,
      Sheet_duplicateGuildDuplicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildDuplicate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_duplicateGuildDuplicate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_duplicateGuildDuplicate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_duplicate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicateduplicate_descriptor_, &duplicateduplicate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicateduplicate_descriptor_, &Sheet_duplicateduplicate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicateconstant_descriptor_, &duplicateconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicateconstant_descriptor_, &Sheet_duplicateconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicateendlessMaze_descriptor_, &duplicateendlessMaze::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicateendlessMaze_descriptor_, &Sheet_duplicateendlessMaze::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicatetowerReward_descriptor_, &duplicatetowerReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicatetowerReward_descriptor_, &Sheet_duplicatetowerReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicatedungeonRewardrewardDesc_descriptor_, &duplicatedungeonRewardrewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicatedungeonReward_descriptor_, &duplicatedungeonReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicatedungeonReward_descriptor_, &Sheet_duplicatedungeonReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicategroup_descriptor_, &duplicategroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicategroup_descriptor_, &Sheet_duplicategroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicatesweepmonsterNum_descriptor_, &duplicatesweepmonsterNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicatesweepmonsterNum_descriptor_, &Sheet_duplicatesweepmonsterNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicateGuildbosstime_descriptor_, &duplicateGuildbosstime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicateGuildbosstime_descriptor_, &Sheet_duplicateGuildbosstime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicateGuildbosskillDesc_descriptor_, &duplicateGuildbosskillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicateGuildboss_descriptor_, &duplicateGuildboss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicateGuildboss_descriptor_, &Sheet_duplicateGuildboss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    duplicateGuildDuplicate_descriptor_, &duplicateGuildDuplicate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_duplicateGuildDuplicate_descriptor_, &Sheet_duplicateGuildDuplicate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_duplicate_2eproto() {
  delete duplicateduplicate::default_instance_;
  delete duplicateduplicate_reflection_;
  delete Sheet_duplicateduplicate::default_instance_;
  delete Sheet_duplicateduplicate_reflection_;
  delete duplicateconstant::default_instance_;
  delete duplicateconstant_reflection_;
  delete Sheet_duplicateconstant::default_instance_;
  delete Sheet_duplicateconstant_reflection_;
  delete duplicateendlessMaze::default_instance_;
  delete duplicateendlessMaze_reflection_;
  delete Sheet_duplicateendlessMaze::default_instance_;
  delete Sheet_duplicateendlessMaze_reflection_;
  delete duplicatetowerReward::default_instance_;
  delete duplicatetowerReward_reflection_;
  delete Sheet_duplicatetowerReward::default_instance_;
  delete Sheet_duplicatetowerReward_reflection_;
  delete duplicatedungeonRewardrewardDesc::default_instance_;
  delete duplicatedungeonRewardrewardDesc_reflection_;
  delete duplicatedungeonReward::default_instance_;
  delete duplicatedungeonReward_reflection_;
  delete Sheet_duplicatedungeonReward::default_instance_;
  delete Sheet_duplicatedungeonReward_reflection_;
  delete duplicategroup::default_instance_;
  delete duplicategroup_reflection_;
  delete Sheet_duplicategroup::default_instance_;
  delete Sheet_duplicategroup_reflection_;
  delete duplicatesweepmonsterNum::default_instance_;
  delete duplicatesweepmonsterNum_reflection_;
  delete Sheet_duplicatesweepmonsterNum::default_instance_;
  delete Sheet_duplicatesweepmonsterNum_reflection_;
  delete duplicateGuildbosstime::default_instance_;
  delete duplicateGuildbosstime_reflection_;
  delete Sheet_duplicateGuildbosstime::default_instance_;
  delete Sheet_duplicateGuildbosstime_reflection_;
  delete duplicateGuildbosskillDesc::default_instance_;
  delete duplicateGuildbosskillDesc_reflection_;
  delete duplicateGuildboss::default_instance_;
  delete duplicateGuildboss_reflection_;
  delete Sheet_duplicateGuildboss::default_instance_;
  delete Sheet_duplicateGuildboss_reflection_;
  delete duplicateGuildDuplicate::default_instance_;
  delete duplicateGuildDuplicate_reflection_;
  delete Sheet_duplicateGuildDuplicate::default_instance_;
  delete Sheet_duplicateGuildDuplicate_reflection_;
}

void protobuf_AddDesc_duplicate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017duplicate.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\260\t\n\022duplicateduplicate\022!\n\013dup"
    "licateID\030\001 \001(\003B\014\302\377\024\010\345\211\257\346\234\254ID\022+\n\rduplicat"
    "eName\030\002 \001(\tB\024\302\377\024\014\345\211\257\346\234\254\345\220\215\347\247\260\220\301\024<\0225\n\021dup"
    "licateTitlePic\030\003 \001(\tB\032\302\377\024\022\345\211\257\346\234\254\346\240\207\351\242\230\345\233"
    "\276\347\211\207\220\301\024<\022&\n\007groupID\030\004 \001(\003B\025\302\377\024\021\346\211\200\345\261\236\345\211\257"
    "\346\234\254\347\273\204ID\022-\n\rduplicateType\030\005 \001(\005B\026\302\377\024\022\345\211\257"
    "\346\234\254\345\206\205\345\256\271\347\261\273\345\236\213\022(\n\010playType\030\006 \001(\005B\026\302\377\024\022\345"
    "\211\257\346\234\254\347\216\251\346\263\225\347\261\273\345\236\213\022#\n\rsceneResource\030\007 \001(\003"
    "B\014\302\377\024\010\345\234\272\346\231\257ID\022*\n\nlevelLimit\030\010 \001(\005B\026\302\377\024\022"
    "\347\255\211\347\272\247\350\246\201\346\261\202\344\270\213\351\231\220\0224\n\024linkDuplicateReque"
    "st\030\t \001(\003B\026\302\377\024\022\345\211\215\347\275\256\345\211\257\346\234\254\350\246\201\346\261\202\0221\n\013isAu"
    "toFight\030\n \001(\005B\034\302\377\024\030\346\230\257\345\220\246\345\205\201\350\256\270\350\207\252\345\212\250\346\210\230"
    "\346\226\227\022@\n\026duplicateConditionType\030\013 \001(\tB \302\377\024"
    "\030\345\211\257\346\234\254\350\203\234\345\210\251\346\235\241\344\273\266\347\261\273\345\236\213\220\301\024<\022.\n\016reviveM"
    "axTimes\030\014 \001(\005B\026\302\377\024\022\345\244\215\346\264\273\346\254\241\346\225\260\344\270\212\351\231\220\0221\n"
    "\021dropNormalMonster\030\r \001(\003B\026\302\377\024\022\346\231\256\351\200\232\346\200\252\347"
    "\211\251\346\216\211\350\220\275\0220\n\020dropEliteMonster\030\016 \001(\003B\026\302\377\024\022"
    "\347\262\276\350\213\261\346\200\252\347\211\251\346\216\211\350\220\275\022/\n\017dropBossMonster\030\017 "
    "\001(\003B\026\302\377\024\022\351\246\226\351\242\206\346\200\252\347\211\251\346\216\211\350\220\275\022-\n\rsceneAISc"
    "ript\030\020 \001(\tB\026\302\377\024\016\345\234\272\346\231\257AI\350\204\232\346\234\254\220\301\024<\022,\n\010bo"
    "ssDesc\030\021 \001(\tB\032\302\377\024\022\351\246\226\351\242\206\350\257\264\346\230\216\345\272\217\345\210\227\220\301\024<"
    "\022(\n\014TeamObjectID\030\022 \001(\005B\022\302\377\024\016\347\273\204\351\230\237\347\233\256\346\240\207"
    "ID\022,\n\016gradeCondition\030\023 \001(\tB\024\302\377\024\014\346\230\237\347\272\247\346\227"
    "\266\351\227\264\220\301\024<\022/\n\020sweepRewardBoxID\030\024 \001(\003B\025\302\377\024\021"
    "\346\211\253\350\215\241\345\245\226\345\212\261BOXID\022.\n\016sweepRewardExp\030\025 \001("
    "\005B\026\302\377\024\022\346\211\253\350\215\241\347\273\217\351\252\214\345\245\226\345\212\261\022+\n\ttrackpath\030\026"
    " \001(\tB\030\302\377\024\017\345\211\257\346\234\254\345\257\273\350\267\257\347\202\271\220\301\024\310\001\022;\n\rpathOf"
    "monster\030\027 \001(\tB$\302\377\024\033\345\211\257\346\234\254\345\257\273\350\267\257\347\202\271\345\257\271\345\272\224"
    "\346\200\252\347\211\251\220\301\024\310\001\022+\n\010isPatrol\030\030 \001(\005B\031\302\377\024\025\345\257\273\350\267"
    "\257\345\211\215\346\230\257\345\220\246\345\267\241\346\225\214\022#\n\tsweepType\030\031 \001(\005B\020\302\377\024"
    "\014\346\211\253\350\215\241\347\261\273\345\236\213\"`\n\030Sheet_duplicateduplicat"
    "e\022D\n\027duplicateduplicate_List\030\001 \003(\0132\034.pro"
    "to_ff.duplicateduplicateB\005\210\301\024\204\007\"\204\001\n\021dupl"
    "icateconstant\022 \n\nconstantid\030\001 \001(\003B\014\302\377\024\010\351"
    "\205\215\347\275\256id\022 \n\014constantdata\030\002 \001(\003B\n\302\377\024\006\346\225\260\346\215"
    "\256\022+\n\nstringdata\030\003 \001(\tB\027\302\377\024\017\345\255\227\347\254\246\344\270\262\346\225\260\346"
    "\215\256\220\301\024<\"\\\n\027Sheet_duplicateconstant\022A\n\026dup"
    "licateconstant_List\030\001 \003(\0132\033.proto_ff.dup"
    "licateconstantB\004\210\301\024\024\"\316\001\n\024duplicateendles"
    "sMaze\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\037\n\005level\030\002 \001(\005"
    "B\020\302\377\024\014\347\255\211\347\272\247\344\270\213\351\231\220\022&\n\013duplicateID\030\003 \001(\tB"
    "\021\302\377\024\010\345\211\257\346\234\254id\220\301\024\254\002\0223\n\nCreateRate\030\004 \001(\005B\037"
    "\302\377\024\033\345\210\206\351\205\215\345\210\260\346\226\260\345\211\257\346\234\254\347\232\204\346\246\202\347\216\207\022$\n\010rewar"
    "dID\030\005 \001(\003B\022\302\377\024\016\345\217\202\344\270\216\345\245\226\345\212\261id\"e\n\032Sheet_d"
    "uplicateendlessMaze\022G\n\031duplicateendlessM"
    "aze_List\030\001 \003(\0132\036.proto_ff.duplicateendle"
    "ssMazeB\004\210\301\024\024\"\307\001\n\024duplicatetowerReward\022\"\n"
    "\010floorMin\030\001 \001(\003B\020\302\377\024\014\345\261\202\346\225\260\344\270\213\351\231\220\022\"\n\010flo"
    "ormax\030\002 \001(\003B\020\302\377\024\014\345\261\202\346\225\260\344\270\212\351\231\220\022\034\n\005BOXID\030\003"
    " \001(\003B\r\302\377\024\t\345\245\226\345\212\261BOX\022 \n\006itemId\030\004 \001(\003B\020\302\377\024"
    "\014\347\272\271\347\253\240\347\273\217\351\252\214\022\'\n\007itemNum\030\005 \001(\005B\026\302\377\024\022\347\272\271\347"
    "\253\240\347\273\217\351\252\214\346\225\260\351\207\217\"e\n\032Sheet_duplicatetowerRe"
    "ward\022G\n\031duplicatetowerReward_List\030\001 \003(\0132"
    "\036.proto_ff.duplicatetowerRewardB\004\210\301\024P\"x\n"
    " duplicatedungeonRewardrewardDesc\022!\n\007Ite"
    "mNum\030\001 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\225\260\351\207\217\022\030\n\004Item\030\002 \001"
    "(\003B\n\302\377\024\006\351\201\223\345\205\267\022\027\n\003Num\030\003 \001(\005B\n\302\377\024\006\345\272\217\345\217\267\""
    "\336\001\n\026duplicatedungeonReward\022\033\n\007levelID\030\001 "
    "\001(\005B\n\302\377\024\006\345\261\202\346\225\260\022*\n\nrewardTime\030\002 \001(\005B\026\302\377\024"
    "\022\351\242\206\345\217\226\346\254\241\346\225\260\344\270\212\351\231\220\022/\n\017passReceiveTime\030\003"
    " \001(\005B\026\302\377\024\022\351\200\232\345\205\263\350\216\267\345\276\227\346\254\241\346\225\260\022J\n\006reward\030\004"
    " \003(\0132*.proto_ff.duplicatedungeonRewardre"
    "wardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\n\"l\n\034Sheet_duplic"
    "atedungeonReward\022L\n\033duplicatedungeonRewa"
    "rd_List\030\001 \003(\0132 .proto_ff.duplicatedungeo"
    "nRewardB\005\210\301\024\254\002\"\244\006\n\016duplicategroup\022\033\n\002id\030"
    "\001 \001(\003B\017\302\377\024\013\345\211\257\346\234\254\347\273\204ID\022\"\n\004name\030\002 \001(\tB\024\302\377"
    "\024\014\345\211\257\346\234\254\347\273\204\345\220\215\220\301\024<\0225\n\021duplicateTitlePic\030"
    "\003 \001(\tB\032\302\377\024\022\345\211\257\346\234\254\346\240\207\351\242\230\345\233\276\347\211\207\220\301\024<\022%\n\013unl"
    "ockLevel\030\004 \001(\005B\020\302\377\024\014\350\247\243\351\224\201\347\255\211\347\272\247\022&\n\014belo"
    "ngToType\030\005 \001(\005B\020\302\377\024\014\346\211\200\345\261\236\347\261\273\345\236\213\022\036\n\007vipt"
    "ype\030\006 \001(\005B\r\302\377\024\tVIP\347\261\273\345\236\213\022,\n\014dynamiclevel"
    "\030\007 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\345\212\250\346\200\201\347\255\211\347\272\247\022*\n\010timesR"
    "es\030\010 \001(\tB\030\302\377\024\020\346\254\241\346\225\260ICON\350\265\204\346\272\220\220\301\024<\022+\n\016gr"
    "oupTimesType\030\t \001(\005B\023\302\377\024\017\347\273\204\346\254\241\346\225\260\347\261\273\345\236\213\022"
    "\'\n\ngroupTimes\030\n \001(\005B\023\302\377\024\017\346\254\241\346\225\260\344\270\212\351\231\220\345\200\274"
    "\0221\n\013refreshType\030\013 \001(\005B\034\302\377\024\030\346\254\241\346\225\260\344\270\212\351\231\220\345"
    "\210\267\346\226\260\347\261\273\345\236\213\022+\n\013enterItemID\030\014 \001(\003B\026\302\377\024\022\345\211"
    "\257\346\234\254\350\277\233\345\205\245\351\201\223\345\205\267\022$\n\nreliveTpye\030\r \001(\005B\020\302\377"
    "\024\014\345\244\215\346\264\273\347\261\273\345\236\213\022,\n\016sweepCondition\030\016 \001(\tB\024"
    "\302\377\024\014\346\211\253\350\215\241\346\235\241\344\273\266\220\301\024<\022;\n\025buyEnterTimesCos"
    "tType\030\017 \001(\005B\034\302\377\024\030\350\264\255\344\271\260\346\254\241\346\225\260\346\266\210\350\200\227\350\264\247\345\270"
    "\201\0227\n\021buyEnterTimesCost\030\020 \001(\005B\034\302\377\024\030\350\264\255\344\271\260"
    "\350\277\233\345\205\245\346\254\241\346\225\260\346\266\210\350\200\227\022&\n\tcountDown\030\021 \001(\005B\023\302"
    "\377\024\017\345\200\222\350\256\241\346\227\266\346\227\266\351\227\264\022)\n\017pathfindingtype\030\022 "
    "\001(\005B\020\302\377\024\014\350\277\275\350\270\252\347\261\273\345\236\213\"S\n\024Sheet_duplicate"
    "group\022;\n\023duplicategroup_List\030\001 \003(\0132\030.pro"
    "to_ff.duplicategroupB\004\210\301\024(\"\205\002\n\030duplicate"
    "sweepmonsterNum\022\022\n\002ID\030\001 \001(\005B\006\302\377\024\002ID\022#\n\ts"
    "weepType\030\002 \001(\005B\020\302\377\024\014\346\211\253\350\215\241\347\261\273\345\236\213\022(\n\010minL"
    "evel\030\003 \001(\005B\026\302\377\024\022\347\216\251\345\256\266\347\255\211\346\236\201\344\270\213\351\231\220\022(\n\010ma"
    "xLevel\030\004 \001(\005B\026\302\377\024\022\347\216\251\345\256\266\347\255\211\346\236\201\344\270\212\351\231\220\022*\n\n"
    "killNumber\030\005 \001(\005B\026\302\377\024\022\346\235\200\346\200\252\346\240\207\345\207\206\346\225\260\351\207\217"
    "\0220\n\020monstervaluetype\030\006 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\346\225"
    "\260\345\200\274\347\261\273\345\236\213\"q\n\036Sheet_duplicatesweepmonste"
    "rNum\022O\n\035duplicatesweepmonsterNum_List\030\001 "
    "\003(\0132\".proto_ff.duplicatesweepmonsterNumB"
    "\004\210\301\024d\"\341\001\n\026duplicateGuildbosstime\022!\n\013dupl"
    "icateID\030\001 \001(\003B\014\302\377\024\010\345\211\257\346\234\254ID\022)\n\topenCycle"
    "\030\002 \001(\005B\026\302\377\024\022\345\211\257\346\234\254\345\274\200\345\220\257\346\230\237\346\234\237\022,\n\010openTi"
    "me\030\003 \001(\tB\032\302\377\024\022\345\211\257\346\234\254\345\274\200\345\220\257\346\227\266\351\227\264\220\301\024<\022&\n\t"
    "bossGroup\030\004 \001(\005B\023\302\377\024\017\345\205\254\344\274\232boss\347\273\204ID\022#\n\t"
    "relevance\030\005 \001(\005B\020\302\377\024\014\344\272\222\346\226\245\346\240\207\350\256\260\"l\n\034She"
    "et_duplicateGuildbosstime\022L\n\033duplicateGu"
    "ildbosstime_List\030\001 \003(\0132 .proto_ff.duplic"
    "ateGuildbosstimeB\005\210\301\024\254\002\"\200\001\n\032duplicateGui"
    "ldbosskillDesc\022\037\n\005small\030\001 \001(\005B\020\302\377\024\014\346\234\200\345\260"
    "\217\346\254\241\346\225\260\022\037\n\005large\030\002 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346\254\241\346\225\260"
    "\022 \n\006weaken\030\003 \001(\005B\020\302\377\024\014\345\211\257\346\234\254\345\261\236\346\200\247\"\236\001\n\022d"
    "uplicateGuildboss\022!\n\013duplicateID\030\001 \001(\003B\014"
    "\302\377\024\010\345\211\257\346\234\254ID\022!\n\010rewardId\030\002 \001(\003B\017\302\377\024\013\351\242\206\345"
    "\217\226BOXID\022B\n\004kill\030\003 \003(\0132$.proto_ff.duplica"
    "teGuildbosskillDescB\016\302\377\024\006\345\207\273\350\264\245\210\301\024\006\"`\n\030S"
    "heet_duplicateGuildboss\022D\n\027duplicateGuil"
    "dboss_List\030\001 \003(\0132\034.proto_ff.duplicateGui"
    "ldbossB\005\210\301\024\254\002\"\201\001\n\027duplicateGuildDuplicat"
    "e\022\037\n\005level\030\001 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022$\n\nmo"
    "nsterExp\030\002 \001(\003B\020\302\377\024\014\345\260\217\346\200\252\347\273\217\351\252\214\022\037\n\007boss"
    "Exp\030\003 \001(\003B\016\302\377\024\nboss\347\273\217\351\252\214\"o\n\035Sheet_dupli"
    "cateGuildDuplicate\022N\n\034duplicateGuildDupl"
    "icate_List\030\001 \003(\0132!.proto_ff.duplicateGui"
    "ldDuplicateB\005\210\301\024\320\017", 4898);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "duplicate.proto", &protobuf_RegisterTypes);
  duplicateduplicate::default_instance_ = new duplicateduplicate();
  Sheet_duplicateduplicate::default_instance_ = new Sheet_duplicateduplicate();
  duplicateconstant::default_instance_ = new duplicateconstant();
  Sheet_duplicateconstant::default_instance_ = new Sheet_duplicateconstant();
  duplicateendlessMaze::default_instance_ = new duplicateendlessMaze();
  Sheet_duplicateendlessMaze::default_instance_ = new Sheet_duplicateendlessMaze();
  duplicatetowerReward::default_instance_ = new duplicatetowerReward();
  Sheet_duplicatetowerReward::default_instance_ = new Sheet_duplicatetowerReward();
  duplicatedungeonRewardrewardDesc::default_instance_ = new duplicatedungeonRewardrewardDesc();
  duplicatedungeonReward::default_instance_ = new duplicatedungeonReward();
  Sheet_duplicatedungeonReward::default_instance_ = new Sheet_duplicatedungeonReward();
  duplicategroup::default_instance_ = new duplicategroup();
  Sheet_duplicategroup::default_instance_ = new Sheet_duplicategroup();
  duplicatesweepmonsterNum::default_instance_ = new duplicatesweepmonsterNum();
  Sheet_duplicatesweepmonsterNum::default_instance_ = new Sheet_duplicatesweepmonsterNum();
  duplicateGuildbosstime::default_instance_ = new duplicateGuildbosstime();
  Sheet_duplicateGuildbosstime::default_instance_ = new Sheet_duplicateGuildbosstime();
  duplicateGuildbosskillDesc::default_instance_ = new duplicateGuildbosskillDesc();
  duplicateGuildboss::default_instance_ = new duplicateGuildboss();
  Sheet_duplicateGuildboss::default_instance_ = new Sheet_duplicateGuildboss();
  duplicateGuildDuplicate::default_instance_ = new duplicateGuildDuplicate();
  Sheet_duplicateGuildDuplicate::default_instance_ = new Sheet_duplicateGuildDuplicate();
  duplicateduplicate::default_instance_->InitAsDefaultInstance();
  Sheet_duplicateduplicate::default_instance_->InitAsDefaultInstance();
  duplicateconstant::default_instance_->InitAsDefaultInstance();
  Sheet_duplicateconstant::default_instance_->InitAsDefaultInstance();
  duplicateendlessMaze::default_instance_->InitAsDefaultInstance();
  Sheet_duplicateendlessMaze::default_instance_->InitAsDefaultInstance();
  duplicatetowerReward::default_instance_->InitAsDefaultInstance();
  Sheet_duplicatetowerReward::default_instance_->InitAsDefaultInstance();
  duplicatedungeonRewardrewardDesc::default_instance_->InitAsDefaultInstance();
  duplicatedungeonReward::default_instance_->InitAsDefaultInstance();
  Sheet_duplicatedungeonReward::default_instance_->InitAsDefaultInstance();
  duplicategroup::default_instance_->InitAsDefaultInstance();
  Sheet_duplicategroup::default_instance_->InitAsDefaultInstance();
  duplicatesweepmonsterNum::default_instance_->InitAsDefaultInstance();
  Sheet_duplicatesweepmonsterNum::default_instance_->InitAsDefaultInstance();
  duplicateGuildbosstime::default_instance_->InitAsDefaultInstance();
  Sheet_duplicateGuildbosstime::default_instance_->InitAsDefaultInstance();
  duplicateGuildbosskillDesc::default_instance_->InitAsDefaultInstance();
  duplicateGuildboss::default_instance_->InitAsDefaultInstance();
  Sheet_duplicateGuildboss::default_instance_->InitAsDefaultInstance();
  duplicateGuildDuplicate::default_instance_->InitAsDefaultInstance();
  Sheet_duplicateGuildDuplicate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_duplicate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_duplicate_2eproto {
  StaticDescriptorInitializer_duplicate_2eproto() {
    protobuf_AddDesc_duplicate_2eproto();
  }
} static_descriptor_initializer_duplicate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int duplicateduplicate::kDuplicateIDFieldNumber;
const int duplicateduplicate::kDuplicateNameFieldNumber;
const int duplicateduplicate::kDuplicateTitlePicFieldNumber;
const int duplicateduplicate::kGroupIDFieldNumber;
const int duplicateduplicate::kDuplicateTypeFieldNumber;
const int duplicateduplicate::kPlayTypeFieldNumber;
const int duplicateduplicate::kSceneResourceFieldNumber;
const int duplicateduplicate::kLevelLimitFieldNumber;
const int duplicateduplicate::kLinkDuplicateRequestFieldNumber;
const int duplicateduplicate::kIsAutoFightFieldNumber;
const int duplicateduplicate::kDuplicateConditionTypeFieldNumber;
const int duplicateduplicate::kReviveMaxTimesFieldNumber;
const int duplicateduplicate::kDropNormalMonsterFieldNumber;
const int duplicateduplicate::kDropEliteMonsterFieldNumber;
const int duplicateduplicate::kDropBossMonsterFieldNumber;
const int duplicateduplicate::kSceneAIScriptFieldNumber;
const int duplicateduplicate::kBossDescFieldNumber;
const int duplicateduplicate::kTeamObjectIDFieldNumber;
const int duplicateduplicate::kGradeConditionFieldNumber;
const int duplicateduplicate::kSweepRewardBoxIDFieldNumber;
const int duplicateduplicate::kSweepRewardExpFieldNumber;
const int duplicateduplicate::kTrackpathFieldNumber;
const int duplicateduplicate::kPathOfmonsterFieldNumber;
const int duplicateduplicate::kIsPatrolFieldNumber;
const int duplicateduplicate::kSweepTypeFieldNumber;
#endif  // !_MSC_VER

duplicateduplicate::duplicateduplicate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicateduplicate::InitAsDefaultInstance() {
}

duplicateduplicate::duplicateduplicate(const duplicateduplicate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicateduplicate::SharedCtor() {
  _cached_size_ = 0;
  duplicateid_ = GOOGLE_LONGLONG(0);
  duplicatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duplicatetitlepic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = GOOGLE_LONGLONG(0);
  duplicatetype_ = 0;
  playtype_ = 0;
  sceneresource_ = GOOGLE_LONGLONG(0);
  levellimit_ = 0;
  linkduplicaterequest_ = GOOGLE_LONGLONG(0);
  isautofight_ = 0;
  duplicateconditiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revivemaxtimes_ = 0;
  dropnormalmonster_ = GOOGLE_LONGLONG(0);
  dropelitemonster_ = GOOGLE_LONGLONG(0);
  dropbossmonster_ = GOOGLE_LONGLONG(0);
  sceneaiscript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bossdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamobjectid_ = 0;
  gradecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sweeprewardboxid_ = GOOGLE_LONGLONG(0);
  sweeprewardexp_ = 0;
  trackpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pathofmonster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ispatrol_ = 0;
  sweeptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicateduplicate::~duplicateduplicate() {
  SharedDtor();
}

void duplicateduplicate::SharedDtor() {
  if (duplicatename_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicatename_;
  }
  if (duplicatetitlepic_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicatetitlepic_;
  }
  if (duplicateconditiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicateconditiontype_;
  }
  if (sceneaiscript_ != &::google::protobuf::internal::kEmptyString) {
    delete sceneaiscript_;
  }
  if (bossdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete bossdesc_;
  }
  if (gradecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete gradecondition_;
  }
  if (trackpath_ != &::google::protobuf::internal::kEmptyString) {
    delete trackpath_;
  }
  if (pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
    delete pathofmonster_;
  }
  if (this != default_instance_) {
  }
}

void duplicateduplicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicateduplicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicateduplicate_descriptor_;
}

const duplicateduplicate& duplicateduplicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicateduplicate* duplicateduplicate::default_instance_ = NULL;

duplicateduplicate* duplicateduplicate::New() const {
  return new duplicateduplicate;
}

void duplicateduplicate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicateid_ = GOOGLE_LONGLONG(0);
    if (has_duplicatename()) {
      if (duplicatename_ != &::google::protobuf::internal::kEmptyString) {
        duplicatename_->clear();
      }
    }
    if (has_duplicatetitlepic()) {
      if (duplicatetitlepic_ != &::google::protobuf::internal::kEmptyString) {
        duplicatetitlepic_->clear();
      }
    }
    groupid_ = GOOGLE_LONGLONG(0);
    duplicatetype_ = 0;
    playtype_ = 0;
    sceneresource_ = GOOGLE_LONGLONG(0);
    levellimit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    linkduplicaterequest_ = GOOGLE_LONGLONG(0);
    isautofight_ = 0;
    if (has_duplicateconditiontype()) {
      if (duplicateconditiontype_ != &::google::protobuf::internal::kEmptyString) {
        duplicateconditiontype_->clear();
      }
    }
    revivemaxtimes_ = 0;
    dropnormalmonster_ = GOOGLE_LONGLONG(0);
    dropelitemonster_ = GOOGLE_LONGLONG(0);
    dropbossmonster_ = GOOGLE_LONGLONG(0);
    if (has_sceneaiscript()) {
      if (sceneaiscript_ != &::google::protobuf::internal::kEmptyString) {
        sceneaiscript_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_bossdesc()) {
      if (bossdesc_ != &::google::protobuf::internal::kEmptyString) {
        bossdesc_->clear();
      }
    }
    teamobjectid_ = 0;
    if (has_gradecondition()) {
      if (gradecondition_ != &::google::protobuf::internal::kEmptyString) {
        gradecondition_->clear();
      }
    }
    sweeprewardboxid_ = GOOGLE_LONGLONG(0);
    sweeprewardexp_ = 0;
    if (has_trackpath()) {
      if (trackpath_ != &::google::protobuf::internal::kEmptyString) {
        trackpath_->clear();
      }
    }
    if (has_pathofmonster()) {
      if (pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
        pathofmonster_->clear();
      }
    }
    ispatrol_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sweeptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicateduplicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duplicateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duplicateid_)));
          set_has_duplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_duplicateName;
        break;
      }

      // optional string duplicateName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duplicatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->duplicatename().data(), this->duplicatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_duplicateTitlePic;
        break;
      }

      // optional string duplicateTitlePic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateTitlePic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duplicatetitlepic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->duplicatetitlepic().data(), this->duplicatetitlepic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupID;
        break;
      }

      // optional int64 groupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duplicateType;
        break;
      }

      // optional int32 duplicateType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicatetype_)));
          set_has_duplicatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playType;
        break;
      }

      // optional int32 playType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtype_)));
          set_has_playtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sceneResource;
        break;
      }

      // optional int64 sceneResource = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneResource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneresource_)));
          set_has_sceneresource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_levelLimit;
        break;
      }

      // optional int32 levelLimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_linkDuplicateRequest;
        break;
      }

      // optional int64 linkDuplicateRequest = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linkDuplicateRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &linkduplicaterequest_)));
          set_has_linkduplicaterequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isAutoFight;
        break;
      }

      // optional int32 isAutoFight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautofight_)));
          set_has_isautofight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_duplicateConditionType;
        break;
      }

      // optional string duplicateConditionType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateConditionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duplicateconditiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->duplicateconditiontype().data(), this->duplicateconditiontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_reviveMaxTimes;
        break;
      }

      // optional int32 reviveMaxTimes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveMaxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivemaxtimes_)));
          set_has_revivemaxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dropNormalMonster;
        break;
      }

      // optional int64 dropNormalMonster = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropNormalMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropnormalmonster_)));
          set_has_dropnormalmonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dropEliteMonster;
        break;
      }

      // optional int64 dropEliteMonster = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropEliteMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropelitemonster_)));
          set_has_dropelitemonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dropBossMonster;
        break;
      }

      // optional int64 dropBossMonster = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropBossMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropbossmonster_)));
          set_has_dropbossmonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_sceneAIScript;
        break;
      }

      // optional string sceneAIScript = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sceneAIScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneaiscript()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sceneaiscript().data(), this->sceneaiscript().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_bossDesc;
        break;
      }

      // optional string bossDesc = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bossdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bossdesc().data(), this->bossdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_TeamObjectID;
        break;
      }

      // optional int32 TeamObjectID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamobjectid_)));
          set_has_teamobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_gradeCondition;
        break;
      }

      // optional string gradeCondition = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gradeCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gradecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gradecondition().data(), this->gradecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_sweepRewardBoxID;
        break;
      }

      // optional int64 sweepRewardBoxID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepRewardBoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sweeprewardboxid_)));
          set_has_sweeprewardboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sweepRewardExp;
        break;
      }

      // optional int32 sweepRewardExp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepRewardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweeprewardexp_)));
          set_has_sweeprewardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_trackpath;
        break;
      }

      // optional string trackpath = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackpath().data(), this->trackpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_pathOfmonster;
        break;
      }

      // optional string pathOfmonster = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pathOfmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathofmonster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pathofmonster().data(), this->pathofmonster().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_isPatrol;
        break;
      }

      // optional int32 isPatrol = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPatrol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispatrol_)));
          set_has_ispatrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_sweepType;
        break;
      }

      // optional int32 sweepType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweeptype_)));
          set_has_sweeptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicateduplicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 duplicateID = 1;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->duplicateid(), output);
  }

  // optional string duplicateName = 2;
  if (has_duplicatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicatename().data(), this->duplicatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->duplicatename(), output);
  }

  // optional string duplicateTitlePic = 3;
  if (has_duplicatetitlepic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicatetitlepic().data(), this->duplicatetitlepic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->duplicatetitlepic(), output);
  }

  // optional int64 groupID = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->groupid(), output);
  }

  // optional int32 duplicateType = 5;
  if (has_duplicatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duplicatetype(), output);
  }

  // optional int32 playType = 6;
  if (has_playtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playtype(), output);
  }

  // optional int64 sceneResource = 7;
  if (has_sceneresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sceneresource(), output);
  }

  // optional int32 levelLimit = 8;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->levellimit(), output);
  }

  // optional int64 linkDuplicateRequest = 9;
  if (has_linkduplicaterequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->linkduplicaterequest(), output);
  }

  // optional int32 isAutoFight = 10;
  if (has_isautofight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isautofight(), output);
  }

  // optional string duplicateConditionType = 11;
  if (has_duplicateconditiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicateconditiontype().data(), this->duplicateconditiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->duplicateconditiontype(), output);
  }

  // optional int32 reviveMaxTimes = 12;
  if (has_revivemaxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->revivemaxtimes(), output);
  }

  // optional int64 dropNormalMonster = 13;
  if (has_dropnormalmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->dropnormalmonster(), output);
  }

  // optional int64 dropEliteMonster = 14;
  if (has_dropelitemonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->dropelitemonster(), output);
  }

  // optional int64 dropBossMonster = 15;
  if (has_dropbossmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->dropbossmonster(), output);
  }

  // optional string sceneAIScript = 16;
  if (has_sceneaiscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sceneaiscript().data(), this->sceneaiscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->sceneaiscript(), output);
  }

  // optional string bossDesc = 17;
  if (has_bossdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bossdesc().data(), this->bossdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->bossdesc(), output);
  }

  // optional int32 TeamObjectID = 18;
  if (has_teamobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->teamobjectid(), output);
  }

  // optional string gradeCondition = 19;
  if (has_gradecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gradecondition().data(), this->gradecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->gradecondition(), output);
  }

  // optional int64 sweepRewardBoxID = 20;
  if (has_sweeprewardboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->sweeprewardboxid(), output);
  }

  // optional int32 sweepRewardExp = 21;
  if (has_sweeprewardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->sweeprewardexp(), output);
  }

  // optional string trackpath = 22;
  if (has_trackpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackpath().data(), this->trackpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->trackpath(), output);
  }

  // optional string pathOfmonster = 23;
  if (has_pathofmonster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathofmonster().data(), this->pathofmonster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->pathofmonster(), output);
  }

  // optional int32 isPatrol = 24;
  if (has_ispatrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ispatrol(), output);
  }

  // optional int32 sweepType = 25;
  if (has_sweeptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->sweeptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicateduplicate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 duplicateID = 1;
  if (has_duplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->duplicateid(), target);
  }

  // optional string duplicateName = 2;
  if (has_duplicatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicatename().data(), this->duplicatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->duplicatename(), target);
  }

  // optional string duplicateTitlePic = 3;
  if (has_duplicatetitlepic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicatetitlepic().data(), this->duplicatetitlepic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->duplicatetitlepic(), target);
  }

  // optional int64 groupID = 4;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->groupid(), target);
  }

  // optional int32 duplicateType = 5;
  if (has_duplicatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duplicatetype(), target);
  }

  // optional int32 playType = 6;
  if (has_playtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playtype(), target);
  }

  // optional int64 sceneResource = 7;
  if (has_sceneresource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sceneresource(), target);
  }

  // optional int32 levelLimit = 8;
  if (has_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->levellimit(), target);
  }

  // optional int64 linkDuplicateRequest = 9;
  if (has_linkduplicaterequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->linkduplicaterequest(), target);
  }

  // optional int32 isAutoFight = 10;
  if (has_isautofight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isautofight(), target);
  }

  // optional string duplicateConditionType = 11;
  if (has_duplicateconditiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicateconditiontype().data(), this->duplicateconditiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->duplicateconditiontype(), target);
  }

  // optional int32 reviveMaxTimes = 12;
  if (has_revivemaxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->revivemaxtimes(), target);
  }

  // optional int64 dropNormalMonster = 13;
  if (has_dropnormalmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->dropnormalmonster(), target);
  }

  // optional int64 dropEliteMonster = 14;
  if (has_dropelitemonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->dropelitemonster(), target);
  }

  // optional int64 dropBossMonster = 15;
  if (has_dropbossmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->dropbossmonster(), target);
  }

  // optional string sceneAIScript = 16;
  if (has_sceneaiscript()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sceneaiscript().data(), this->sceneaiscript().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->sceneaiscript(), target);
  }

  // optional string bossDesc = 17;
  if (has_bossdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bossdesc().data(), this->bossdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bossdesc(), target);
  }

  // optional int32 TeamObjectID = 18;
  if (has_teamobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->teamobjectid(), target);
  }

  // optional string gradeCondition = 19;
  if (has_gradecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gradecondition().data(), this->gradecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->gradecondition(), target);
  }

  // optional int64 sweepRewardBoxID = 20;
  if (has_sweeprewardboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->sweeprewardboxid(), target);
  }

  // optional int32 sweepRewardExp = 21;
  if (has_sweeprewardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->sweeprewardexp(), target);
  }

  // optional string trackpath = 22;
  if (has_trackpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackpath().data(), this->trackpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->trackpath(), target);
  }

  // optional string pathOfmonster = 23;
  if (has_pathofmonster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathofmonster().data(), this->pathofmonster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->pathofmonster(), target);
  }

  // optional int32 isPatrol = 24;
  if (has_ispatrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->ispatrol(), target);
  }

  // optional int32 sweepType = 25;
  if (has_sweeptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->sweeptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicateduplicate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 duplicateID = 1;
    if (has_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duplicateid());
    }

    // optional string duplicateName = 2;
    if (has_duplicatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->duplicatename());
    }

    // optional string duplicateTitlePic = 3;
    if (has_duplicatetitlepic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->duplicatetitlepic());
    }

    // optional int64 groupID = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

    // optional int32 duplicateType = 5;
    if (has_duplicatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicatetype());
    }

    // optional int32 playType = 6;
    if (has_playtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtype());
    }

    // optional int64 sceneResource = 7;
    if (has_sceneresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sceneresource());
    }

    // optional int32 levelLimit = 8;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 linkDuplicateRequest = 9;
    if (has_linkduplicaterequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->linkduplicaterequest());
    }

    // optional int32 isAutoFight = 10;
    if (has_isautofight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isautofight());
    }

    // optional string duplicateConditionType = 11;
    if (has_duplicateconditiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->duplicateconditiontype());
    }

    // optional int32 reviveMaxTimes = 12;
    if (has_revivemaxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivemaxtimes());
    }

    // optional int64 dropNormalMonster = 13;
    if (has_dropnormalmonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dropnormalmonster());
    }

    // optional int64 dropEliteMonster = 14;
    if (has_dropelitemonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dropelitemonster());
    }

    // optional int64 dropBossMonster = 15;
    if (has_dropbossmonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dropbossmonster());
    }

    // optional string sceneAIScript = 16;
    if (has_sceneaiscript()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneaiscript());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string bossDesc = 17;
    if (has_bossdesc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bossdesc());
    }

    // optional int32 TeamObjectID = 18;
    if (has_teamobjectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamobjectid());
    }

    // optional string gradeCondition = 19;
    if (has_gradecondition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gradecondition());
    }

    // optional int64 sweepRewardBoxID = 20;
    if (has_sweeprewardboxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sweeprewardboxid());
    }

    // optional int32 sweepRewardExp = 21;
    if (has_sweeprewardexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweeprewardexp());
    }

    // optional string trackpath = 22;
    if (has_trackpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackpath());
    }

    // optional string pathOfmonster = 23;
    if (has_pathofmonster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pathofmonster());
    }

    // optional int32 isPatrol = 24;
    if (has_ispatrol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispatrol());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 sweepType = 25;
    if (has_sweeptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweeptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicateduplicate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicateduplicate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicateduplicate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicateduplicate::MergeFrom(const duplicateduplicate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicateid()) {
      set_duplicateid(from.duplicateid());
    }
    if (from.has_duplicatename()) {
      set_duplicatename(from.duplicatename());
    }
    if (from.has_duplicatetitlepic()) {
      set_duplicatetitlepic(from.duplicatetitlepic());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_duplicatetype()) {
      set_duplicatetype(from.duplicatetype());
    }
    if (from.has_playtype()) {
      set_playtype(from.playtype());
    }
    if (from.has_sceneresource()) {
      set_sceneresource(from.sceneresource());
    }
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_linkduplicaterequest()) {
      set_linkduplicaterequest(from.linkduplicaterequest());
    }
    if (from.has_isautofight()) {
      set_isautofight(from.isautofight());
    }
    if (from.has_duplicateconditiontype()) {
      set_duplicateconditiontype(from.duplicateconditiontype());
    }
    if (from.has_revivemaxtimes()) {
      set_revivemaxtimes(from.revivemaxtimes());
    }
    if (from.has_dropnormalmonster()) {
      set_dropnormalmonster(from.dropnormalmonster());
    }
    if (from.has_dropelitemonster()) {
      set_dropelitemonster(from.dropelitemonster());
    }
    if (from.has_dropbossmonster()) {
      set_dropbossmonster(from.dropbossmonster());
    }
    if (from.has_sceneaiscript()) {
      set_sceneaiscript(from.sceneaiscript());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bossdesc()) {
      set_bossdesc(from.bossdesc());
    }
    if (from.has_teamobjectid()) {
      set_teamobjectid(from.teamobjectid());
    }
    if (from.has_gradecondition()) {
      set_gradecondition(from.gradecondition());
    }
    if (from.has_sweeprewardboxid()) {
      set_sweeprewardboxid(from.sweeprewardboxid());
    }
    if (from.has_sweeprewardexp()) {
      set_sweeprewardexp(from.sweeprewardexp());
    }
    if (from.has_trackpath()) {
      set_trackpath(from.trackpath());
    }
    if (from.has_pathofmonster()) {
      set_pathofmonster(from.pathofmonster());
    }
    if (from.has_ispatrol()) {
      set_ispatrol(from.ispatrol());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sweeptype()) {
      set_sweeptype(from.sweeptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicateduplicate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicateduplicate::CopyFrom(const duplicateduplicate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicateduplicate::IsInitialized() const {

  return true;
}

void duplicateduplicate::Swap(duplicateduplicate* other) {
  if (other != this) {
    std::swap(duplicateid_, other->duplicateid_);
    std::swap(duplicatename_, other->duplicatename_);
    std::swap(duplicatetitlepic_, other->duplicatetitlepic_);
    std::swap(groupid_, other->groupid_);
    std::swap(duplicatetype_, other->duplicatetype_);
    std::swap(playtype_, other->playtype_);
    std::swap(sceneresource_, other->sceneresource_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(linkduplicaterequest_, other->linkduplicaterequest_);
    std::swap(isautofight_, other->isautofight_);
    std::swap(duplicateconditiontype_, other->duplicateconditiontype_);
    std::swap(revivemaxtimes_, other->revivemaxtimes_);
    std::swap(dropnormalmonster_, other->dropnormalmonster_);
    std::swap(dropelitemonster_, other->dropelitemonster_);
    std::swap(dropbossmonster_, other->dropbossmonster_);
    std::swap(sceneaiscript_, other->sceneaiscript_);
    std::swap(bossdesc_, other->bossdesc_);
    std::swap(teamobjectid_, other->teamobjectid_);
    std::swap(gradecondition_, other->gradecondition_);
    std::swap(sweeprewardboxid_, other->sweeprewardboxid_);
    std::swap(sweeprewardexp_, other->sweeprewardexp_);
    std::swap(trackpath_, other->trackpath_);
    std::swap(pathofmonster_, other->pathofmonster_);
    std::swap(ispatrol_, other->ispatrol_);
    std::swap(sweeptype_, other->sweeptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicateduplicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicateduplicate_descriptor_;
  metadata.reflection = duplicateduplicate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicateduplicate::kDuplicateduplicateListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicateduplicate::Sheet_duplicateduplicate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicateduplicate::InitAsDefaultInstance() {
}

Sheet_duplicateduplicate::Sheet_duplicateduplicate(const Sheet_duplicateduplicate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicateduplicate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicateduplicate::~Sheet_duplicateduplicate() {
  SharedDtor();
}

void Sheet_duplicateduplicate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicateduplicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicateduplicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicateduplicate_descriptor_;
}

const Sheet_duplicateduplicate& Sheet_duplicateduplicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicateduplicate* Sheet_duplicateduplicate::default_instance_ = NULL;

Sheet_duplicateduplicate* Sheet_duplicateduplicate::New() const {
  return new Sheet_duplicateduplicate;
}

void Sheet_duplicateduplicate::Clear() {
  duplicateduplicate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicateduplicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicateduplicate duplicateduplicate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateduplicate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicateduplicate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicateduplicate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicateduplicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicateduplicate duplicateduplicate_List = 1;
  for (int i = 0; i < this->duplicateduplicate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicateduplicate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicateduplicate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicateduplicate duplicateduplicate_List = 1;
  for (int i = 0; i < this->duplicateduplicate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicateduplicate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicateduplicate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicateduplicate duplicateduplicate_List = 1;
  total_size += 1 * this->duplicateduplicate_list_size();
  for (int i = 0; i < this->duplicateduplicate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicateduplicate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicateduplicate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicateduplicate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicateduplicate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicateduplicate::MergeFrom(const Sheet_duplicateduplicate& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicateduplicate_list_.MergeFrom(from.duplicateduplicate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicateduplicate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicateduplicate::CopyFrom(const Sheet_duplicateduplicate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicateduplicate::IsInitialized() const {

  return true;
}

void Sheet_duplicateduplicate::Swap(Sheet_duplicateduplicate* other) {
  if (other != this) {
    duplicateduplicate_list_.Swap(&other->duplicateduplicate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicateduplicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicateduplicate_descriptor_;
  metadata.reflection = Sheet_duplicateduplicate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicateconstant::kConstantidFieldNumber;
const int duplicateconstant::kConstantdataFieldNumber;
const int duplicateconstant::kStringdataFieldNumber;
#endif  // !_MSC_VER

duplicateconstant::duplicateconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicateconstant::InitAsDefaultInstance() {
}

duplicateconstant::duplicateconstant(const duplicateconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicateconstant::SharedCtor() {
  _cached_size_ = 0;
  constantid_ = GOOGLE_LONGLONG(0);
  constantdata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicateconstant::~duplicateconstant() {
  SharedDtor();
}

void duplicateconstant::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void duplicateconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicateconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicateconstant_descriptor_;
}

const duplicateconstant& duplicateconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicateconstant* duplicateconstant::default_instance_ = NULL;

duplicateconstant* duplicateconstant::New() const {
  return new duplicateconstant;
}

void duplicateconstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    constantid_ = GOOGLE_LONGLONG(0);
    constantdata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicateconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 constantid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantid_)));
          set_has_constantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_constantdata;
        break;
      }

      // optional int64 constantdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constantdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantdata_)));
          set_has_constantdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicateconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 constantid = 1;
  if (has_constantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->constantid(), output);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->constantdata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicateconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 constantid = 1;
  if (has_constantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->constantid(), target);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->constantdata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicateconstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 constantid = 1;
    if (has_constantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantid());
    }

    // optional int64 constantdata = 2;
    if (has_constantdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantdata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicateconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicateconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicateconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicateconstant::MergeFrom(const duplicateconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_constantid()) {
      set_constantid(from.constantid());
    }
    if (from.has_constantdata()) {
      set_constantdata(from.constantdata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicateconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicateconstant::CopyFrom(const duplicateconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicateconstant::IsInitialized() const {

  return true;
}

void duplicateconstant::Swap(duplicateconstant* other) {
  if (other != this) {
    std::swap(constantid_, other->constantid_);
    std::swap(constantdata_, other->constantdata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicateconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicateconstant_descriptor_;
  metadata.reflection = duplicateconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicateconstant::kDuplicateconstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicateconstant::Sheet_duplicateconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicateconstant::InitAsDefaultInstance() {
}

Sheet_duplicateconstant::Sheet_duplicateconstant(const Sheet_duplicateconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicateconstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicateconstant::~Sheet_duplicateconstant() {
  SharedDtor();
}

void Sheet_duplicateconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicateconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicateconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicateconstant_descriptor_;
}

const Sheet_duplicateconstant& Sheet_duplicateconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicateconstant* Sheet_duplicateconstant::default_instance_ = NULL;

Sheet_duplicateconstant* Sheet_duplicateconstant::New() const {
  return new Sheet_duplicateconstant;
}

void Sheet_duplicateconstant::Clear() {
  duplicateconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicateconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicateconstant duplicateconstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateconstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicateconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicateconstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicateconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicateconstant duplicateconstant_List = 1;
  for (int i = 0; i < this->duplicateconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicateconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicateconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicateconstant duplicateconstant_List = 1;
  for (int i = 0; i < this->duplicateconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicateconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicateconstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicateconstant duplicateconstant_List = 1;
  total_size += 1 * this->duplicateconstant_list_size();
  for (int i = 0; i < this->duplicateconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicateconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicateconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicateconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicateconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicateconstant::MergeFrom(const Sheet_duplicateconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicateconstant_list_.MergeFrom(from.duplicateconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicateconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicateconstant::CopyFrom(const Sheet_duplicateconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicateconstant::IsInitialized() const {

  return true;
}

void Sheet_duplicateconstant::Swap(Sheet_duplicateconstant* other) {
  if (other != this) {
    duplicateconstant_list_.Swap(&other->duplicateconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicateconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicateconstant_descriptor_;
  metadata.reflection = Sheet_duplicateconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicateendlessMaze::kIdFieldNumber;
const int duplicateendlessMaze::kLevelFieldNumber;
const int duplicateendlessMaze::kDuplicateIDFieldNumber;
const int duplicateendlessMaze::kCreateRateFieldNumber;
const int duplicateendlessMaze::kRewardIDFieldNumber;
#endif  // !_MSC_VER

duplicateendlessMaze::duplicateendlessMaze()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicateendlessMaze::InitAsDefaultInstance() {
}

duplicateendlessMaze::duplicateendlessMaze(const duplicateendlessMaze& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicateendlessMaze::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  duplicateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createrate_ = 0;
  rewardid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicateendlessMaze::~duplicateendlessMaze() {
  SharedDtor();
}

void duplicateendlessMaze::SharedDtor() {
  if (duplicateid_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicateid_;
  }
  if (this != default_instance_) {
  }
}

void duplicateendlessMaze::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicateendlessMaze::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicateendlessMaze_descriptor_;
}

const duplicateendlessMaze& duplicateendlessMaze::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicateendlessMaze* duplicateendlessMaze::default_instance_ = NULL;

duplicateendlessMaze* duplicateendlessMaze::New() const {
  return new duplicateendlessMaze;
}

void duplicateendlessMaze::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
    if (has_duplicateid()) {
      if (duplicateid_ != &::google::protobuf::internal::kEmptyString) {
        duplicateid_->clear();
      }
    }
    createrate_ = 0;
    rewardid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicateendlessMaze::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_duplicateID;
        break;
      }

      // optional string duplicateID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duplicateid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->duplicateid().data(), this->duplicateid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CreateRate;
        break;
      }

      // optional int32 CreateRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createrate_)));
          set_has_createrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rewardID;
        break;
      }

      // optional int64 rewardID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicateendlessMaze::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional string duplicateID = 3;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicateid().data(), this->duplicateid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->duplicateid(), output);
  }

  // optional int32 CreateRate = 4;
  if (has_createrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->createrate(), output);
  }

  // optional int64 rewardID = 5;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicateendlessMaze::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional string duplicateID = 3;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicateid().data(), this->duplicateid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->duplicateid(), target);
  }

  // optional int32 CreateRate = 4;
  if (has_createrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->createrate(), target);
  }

  // optional int64 rewardID = 5;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicateendlessMaze::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string duplicateID = 3;
    if (has_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->duplicateid());
    }

    // optional int32 CreateRate = 4;
    if (has_createrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createrate());
    }

    // optional int64 rewardID = 5;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicateendlessMaze::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicateendlessMaze* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicateendlessMaze*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicateendlessMaze::MergeFrom(const duplicateendlessMaze& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_duplicateid()) {
      set_duplicateid(from.duplicateid());
    }
    if (from.has_createrate()) {
      set_createrate(from.createrate());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicateendlessMaze::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicateendlessMaze::CopyFrom(const duplicateendlessMaze& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicateendlessMaze::IsInitialized() const {

  return true;
}

void duplicateendlessMaze::Swap(duplicateendlessMaze* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(duplicateid_, other->duplicateid_);
    std::swap(createrate_, other->createrate_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicateendlessMaze::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicateendlessMaze_descriptor_;
  metadata.reflection = duplicateendlessMaze_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicateendlessMaze::kDuplicateendlessMazeListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicateendlessMaze::Sheet_duplicateendlessMaze()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicateendlessMaze::InitAsDefaultInstance() {
}

Sheet_duplicateendlessMaze::Sheet_duplicateendlessMaze(const Sheet_duplicateendlessMaze& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicateendlessMaze::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicateendlessMaze::~Sheet_duplicateendlessMaze() {
  SharedDtor();
}

void Sheet_duplicateendlessMaze::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicateendlessMaze::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicateendlessMaze::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicateendlessMaze_descriptor_;
}

const Sheet_duplicateendlessMaze& Sheet_duplicateendlessMaze::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicateendlessMaze* Sheet_duplicateendlessMaze::default_instance_ = NULL;

Sheet_duplicateendlessMaze* Sheet_duplicateendlessMaze::New() const {
  return new Sheet_duplicateendlessMaze;
}

void Sheet_duplicateendlessMaze::Clear() {
  duplicateendlessmaze_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicateendlessMaze::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicateendlessMaze duplicateendlessMaze_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateendlessMaze_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicateendlessmaze_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicateendlessMaze_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicateendlessMaze::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicateendlessMaze duplicateendlessMaze_List = 1;
  for (int i = 0; i < this->duplicateendlessmaze_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicateendlessmaze_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicateendlessMaze::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicateendlessMaze duplicateendlessMaze_List = 1;
  for (int i = 0; i < this->duplicateendlessmaze_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicateendlessmaze_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicateendlessMaze::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicateendlessMaze duplicateendlessMaze_List = 1;
  total_size += 1 * this->duplicateendlessmaze_list_size();
  for (int i = 0; i < this->duplicateendlessmaze_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicateendlessmaze_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicateendlessMaze::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicateendlessMaze* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicateendlessMaze*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicateendlessMaze::MergeFrom(const Sheet_duplicateendlessMaze& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicateendlessmaze_list_.MergeFrom(from.duplicateendlessmaze_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicateendlessMaze::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicateendlessMaze::CopyFrom(const Sheet_duplicateendlessMaze& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicateendlessMaze::IsInitialized() const {

  return true;
}

void Sheet_duplicateendlessMaze::Swap(Sheet_duplicateendlessMaze* other) {
  if (other != this) {
    duplicateendlessmaze_list_.Swap(&other->duplicateendlessmaze_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicateendlessMaze::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicateendlessMaze_descriptor_;
  metadata.reflection = Sheet_duplicateendlessMaze_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicatetowerReward::kFloorMinFieldNumber;
const int duplicatetowerReward::kFloormaxFieldNumber;
const int duplicatetowerReward::kBOXIDFieldNumber;
const int duplicatetowerReward::kItemIdFieldNumber;
const int duplicatetowerReward::kItemNumFieldNumber;
#endif  // !_MSC_VER

duplicatetowerReward::duplicatetowerReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicatetowerReward::InitAsDefaultInstance() {
}

duplicatetowerReward::duplicatetowerReward(const duplicatetowerReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicatetowerReward::SharedCtor() {
  _cached_size_ = 0;
  floormin_ = GOOGLE_LONGLONG(0);
  floormax_ = GOOGLE_LONGLONG(0);
  boxid_ = GOOGLE_LONGLONG(0);
  itemid_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicatetowerReward::~duplicatetowerReward() {
  SharedDtor();
}

void duplicatetowerReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void duplicatetowerReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicatetowerReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicatetowerReward_descriptor_;
}

const duplicatetowerReward& duplicatetowerReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicatetowerReward* duplicatetowerReward::default_instance_ = NULL;

duplicatetowerReward* duplicatetowerReward::New() const {
  return new duplicatetowerReward;
}

void duplicatetowerReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    floormin_ = GOOGLE_LONGLONG(0);
    floormax_ = GOOGLE_LONGLONG(0);
    boxid_ = GOOGLE_LONGLONG(0);
    itemid_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicatetowerReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 floorMin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &floormin_)));
          set_has_floormin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_floormax;
        break;
      }

      // optional int64 floormax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floormax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &floormax_)));
          set_has_floormax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BOXID;
        break;
      }

      // optional int64 BOXID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BOXID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // optional int64 itemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicatetowerReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 floorMin = 1;
  if (has_floormin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->floormin(), output);
  }

  // optional int64 floormax = 2;
  if (has_floormax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->floormax(), output);
  }

  // optional int64 BOXID = 3;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->boxid(), output);
  }

  // optional int64 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->itemid(), output);
  }

  // optional int32 itemNum = 5;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicatetowerReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 floorMin = 1;
  if (has_floormin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->floormin(), target);
  }

  // optional int64 floormax = 2;
  if (has_floormax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->floormax(), target);
  }

  // optional int64 BOXID = 3;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->boxid(), target);
  }

  // optional int64 itemId = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->itemid(), target);
  }

  // optional int32 itemNum = 5;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicatetowerReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 floorMin = 1;
    if (has_floormin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->floormin());
    }

    // optional int64 floormax = 2;
    if (has_floormax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->floormax());
    }

    // optional int64 BOXID = 3;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int64 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 itemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicatetowerReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicatetowerReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicatetowerReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicatetowerReward::MergeFrom(const duplicatetowerReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_floormin()) {
      set_floormin(from.floormin());
    }
    if (from.has_floormax()) {
      set_floormax(from.floormax());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicatetowerReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicatetowerReward::CopyFrom(const duplicatetowerReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicatetowerReward::IsInitialized() const {

  return true;
}

void duplicatetowerReward::Swap(duplicatetowerReward* other) {
  if (other != this) {
    std::swap(floormin_, other->floormin_);
    std::swap(floormax_, other->floormax_);
    std::swap(boxid_, other->boxid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicatetowerReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicatetowerReward_descriptor_;
  metadata.reflection = duplicatetowerReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicatetowerReward::kDuplicatetowerRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicatetowerReward::Sheet_duplicatetowerReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicatetowerReward::InitAsDefaultInstance() {
}

Sheet_duplicatetowerReward::Sheet_duplicatetowerReward(const Sheet_duplicatetowerReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicatetowerReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicatetowerReward::~Sheet_duplicatetowerReward() {
  SharedDtor();
}

void Sheet_duplicatetowerReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicatetowerReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicatetowerReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicatetowerReward_descriptor_;
}

const Sheet_duplicatetowerReward& Sheet_duplicatetowerReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicatetowerReward* Sheet_duplicatetowerReward::default_instance_ = NULL;

Sheet_duplicatetowerReward* Sheet_duplicatetowerReward::New() const {
  return new Sheet_duplicatetowerReward;
}

void Sheet_duplicatetowerReward::Clear() {
  duplicatetowerreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicatetowerReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicatetowerReward duplicatetowerReward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicatetowerReward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicatetowerreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicatetowerReward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicatetowerReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicatetowerReward duplicatetowerReward_List = 1;
  for (int i = 0; i < this->duplicatetowerreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicatetowerreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicatetowerReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicatetowerReward duplicatetowerReward_List = 1;
  for (int i = 0; i < this->duplicatetowerreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicatetowerreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicatetowerReward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicatetowerReward duplicatetowerReward_List = 1;
  total_size += 1 * this->duplicatetowerreward_list_size();
  for (int i = 0; i < this->duplicatetowerreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicatetowerreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicatetowerReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicatetowerReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicatetowerReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicatetowerReward::MergeFrom(const Sheet_duplicatetowerReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicatetowerreward_list_.MergeFrom(from.duplicatetowerreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicatetowerReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicatetowerReward::CopyFrom(const Sheet_duplicatetowerReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicatetowerReward::IsInitialized() const {

  return true;
}

void Sheet_duplicatetowerReward::Swap(Sheet_duplicatetowerReward* other) {
  if (other != this) {
    duplicatetowerreward_list_.Swap(&other->duplicatetowerreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicatetowerReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicatetowerReward_descriptor_;
  metadata.reflection = Sheet_duplicatetowerReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicatedungeonRewardrewardDesc::kItemNumFieldNumber;
const int duplicatedungeonRewardrewardDesc::kItemFieldNumber;
const int duplicatedungeonRewardrewardDesc::kNumFieldNumber;
#endif  // !_MSC_VER

duplicatedungeonRewardrewardDesc::duplicatedungeonRewardrewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicatedungeonRewardrewardDesc::InitAsDefaultInstance() {
}

duplicatedungeonRewardrewardDesc::duplicatedungeonRewardrewardDesc(const duplicatedungeonRewardrewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicatedungeonRewardrewardDesc::SharedCtor() {
  _cached_size_ = 0;
  itemnum_ = 0;
  item_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicatedungeonRewardrewardDesc::~duplicatedungeonRewardrewardDesc() {
  SharedDtor();
}

void duplicatedungeonRewardrewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void duplicatedungeonRewardrewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicatedungeonRewardrewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicatedungeonRewardrewardDesc_descriptor_;
}

const duplicatedungeonRewardrewardDesc& duplicatedungeonRewardrewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicatedungeonRewardrewardDesc* duplicatedungeonRewardrewardDesc::default_instance_ = NULL;

duplicatedungeonRewardrewardDesc* duplicatedungeonRewardrewardDesc::New() const {
  return new duplicatedungeonRewardrewardDesc;
}

void duplicatedungeonRewardrewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemnum_ = 0;
    item_ = GOOGLE_LONGLONG(0);
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicatedungeonRewardrewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Item;
        break;
      }

      // optional int64 Item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional int32 Num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicatedungeonRewardrewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ItemNum = 1;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemnum(), output);
  }

  // optional int64 Item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item(), output);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicatedungeonRewardrewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemNum = 1;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemnum(), target);
  }

  // optional int64 Item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->item(), target);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicatedungeonRewardrewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemNum = 1;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int64 Item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicatedungeonRewardrewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicatedungeonRewardrewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicatedungeonRewardrewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicatedungeonRewardrewardDesc::MergeFrom(const duplicatedungeonRewardrewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicatedungeonRewardrewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicatedungeonRewardrewardDesc::CopyFrom(const duplicatedungeonRewardrewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicatedungeonRewardrewardDesc::IsInitialized() const {

  return true;
}

void duplicatedungeonRewardrewardDesc::Swap(duplicatedungeonRewardrewardDesc* other) {
  if (other != this) {
    std::swap(itemnum_, other->itemnum_);
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicatedungeonRewardrewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicatedungeonRewardrewardDesc_descriptor_;
  metadata.reflection = duplicatedungeonRewardrewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicatedungeonReward::kLevelIDFieldNumber;
const int duplicatedungeonReward::kRewardTimeFieldNumber;
const int duplicatedungeonReward::kPassReceiveTimeFieldNumber;
const int duplicatedungeonReward::kRewardFieldNumber;
#endif  // !_MSC_VER

duplicatedungeonReward::duplicatedungeonReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicatedungeonReward::InitAsDefaultInstance() {
}

duplicatedungeonReward::duplicatedungeonReward(const duplicatedungeonReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicatedungeonReward::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0;
  rewardtime_ = 0;
  passreceivetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicatedungeonReward::~duplicatedungeonReward() {
  SharedDtor();
}

void duplicatedungeonReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void duplicatedungeonReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicatedungeonReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicatedungeonReward_descriptor_;
}

const duplicatedungeonReward& duplicatedungeonReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicatedungeonReward* duplicatedungeonReward::default_instance_ = NULL;

duplicatedungeonReward* duplicatedungeonReward::New() const {
  return new duplicatedungeonReward;
}

void duplicatedungeonReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0;
    rewardtime_ = 0;
    passreceivetime_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicatedungeonReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardTime;
        break;
      }

      // optional int32 rewardTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_passReceiveTime;
        break;
      }

      // optional int32 passReceiveTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passreceivetime_)));
          set_has_passreceivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.duplicatedungeonRewardrewardDesc reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicatedungeonReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelid(), output);
  }

  // optional int32 rewardTime = 2;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardtime(), output);
  }

  // optional int32 passReceiveTime = 3;
  if (has_passreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->passreceivetime(), output);
  }

  // repeated .proto_ff.duplicatedungeonRewardrewardDesc reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicatedungeonReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelid(), target);
  }

  // optional int32 rewardTime = 2;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardtime(), target);
  }

  // optional int32 passReceiveTime = 3;
  if (has_passreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->passreceivetime(), target);
  }

  // repeated .proto_ff.duplicatedungeonRewardrewardDesc reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicatedungeonReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelid());
    }

    // optional int32 rewardTime = 2;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardtime());
    }

    // optional int32 passReceiveTime = 3;
    if (has_passreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passreceivetime());
    }

  }
  // repeated .proto_ff.duplicatedungeonRewardrewardDesc reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicatedungeonReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicatedungeonReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicatedungeonReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicatedungeonReward::MergeFrom(const duplicatedungeonReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_passreceivetime()) {
      set_passreceivetime(from.passreceivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicatedungeonReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicatedungeonReward::CopyFrom(const duplicatedungeonReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicatedungeonReward::IsInitialized() const {

  return true;
}

void duplicatedungeonReward::Swap(duplicatedungeonReward* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(passreceivetime_, other->passreceivetime_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicatedungeonReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicatedungeonReward_descriptor_;
  metadata.reflection = duplicatedungeonReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicatedungeonReward::kDuplicatedungeonRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicatedungeonReward::Sheet_duplicatedungeonReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicatedungeonReward::InitAsDefaultInstance() {
}

Sheet_duplicatedungeonReward::Sheet_duplicatedungeonReward(const Sheet_duplicatedungeonReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicatedungeonReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicatedungeonReward::~Sheet_duplicatedungeonReward() {
  SharedDtor();
}

void Sheet_duplicatedungeonReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicatedungeonReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicatedungeonReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicatedungeonReward_descriptor_;
}

const Sheet_duplicatedungeonReward& Sheet_duplicatedungeonReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicatedungeonReward* Sheet_duplicatedungeonReward::default_instance_ = NULL;

Sheet_duplicatedungeonReward* Sheet_duplicatedungeonReward::New() const {
  return new Sheet_duplicatedungeonReward;
}

void Sheet_duplicatedungeonReward::Clear() {
  duplicatedungeonreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicatedungeonReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicatedungeonReward duplicatedungeonReward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicatedungeonReward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicatedungeonreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicatedungeonReward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicatedungeonReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicatedungeonReward duplicatedungeonReward_List = 1;
  for (int i = 0; i < this->duplicatedungeonreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicatedungeonreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicatedungeonReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicatedungeonReward duplicatedungeonReward_List = 1;
  for (int i = 0; i < this->duplicatedungeonreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicatedungeonreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicatedungeonReward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicatedungeonReward duplicatedungeonReward_List = 1;
  total_size += 1 * this->duplicatedungeonreward_list_size();
  for (int i = 0; i < this->duplicatedungeonreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicatedungeonreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicatedungeonReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicatedungeonReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicatedungeonReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicatedungeonReward::MergeFrom(const Sheet_duplicatedungeonReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicatedungeonreward_list_.MergeFrom(from.duplicatedungeonreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicatedungeonReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicatedungeonReward::CopyFrom(const Sheet_duplicatedungeonReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicatedungeonReward::IsInitialized() const {

  return true;
}

void Sheet_duplicatedungeonReward::Swap(Sheet_duplicatedungeonReward* other) {
  if (other != this) {
    duplicatedungeonreward_list_.Swap(&other->duplicatedungeonreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicatedungeonReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicatedungeonReward_descriptor_;
  metadata.reflection = Sheet_duplicatedungeonReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicategroup::kIdFieldNumber;
const int duplicategroup::kNameFieldNumber;
const int duplicategroup::kDuplicateTitlePicFieldNumber;
const int duplicategroup::kUnlockLevelFieldNumber;
const int duplicategroup::kBelongToTypeFieldNumber;
const int duplicategroup::kViptypeFieldNumber;
const int duplicategroup::kDynamiclevelFieldNumber;
const int duplicategroup::kTimesResFieldNumber;
const int duplicategroup::kGroupTimesTypeFieldNumber;
const int duplicategroup::kGroupTimesFieldNumber;
const int duplicategroup::kRefreshTypeFieldNumber;
const int duplicategroup::kEnterItemIDFieldNumber;
const int duplicategroup::kReliveTpyeFieldNumber;
const int duplicategroup::kSweepConditionFieldNumber;
const int duplicategroup::kBuyEnterTimesCostTypeFieldNumber;
const int duplicategroup::kBuyEnterTimesCostFieldNumber;
const int duplicategroup::kCountDownFieldNumber;
const int duplicategroup::kPathfindingtypeFieldNumber;
#endif  // !_MSC_VER

duplicategroup::duplicategroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicategroup::InitAsDefaultInstance() {
}

duplicategroup::duplicategroup(const duplicategroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicategroup::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duplicatetitlepic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unlocklevel_ = 0;
  belongtotype_ = 0;
  viptype_ = 0;
  dynamiclevel_ = 0;
  timesres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grouptimestype_ = 0;
  grouptimes_ = 0;
  refreshtype_ = 0;
  enteritemid_ = GOOGLE_LONGLONG(0);
  relivetpye_ = 0;
  sweepcondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buyentertimescosttype_ = 0;
  buyentertimescost_ = 0;
  countdown_ = 0;
  pathfindingtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicategroup::~duplicategroup() {
  SharedDtor();
}

void duplicategroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (duplicatetitlepic_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicatetitlepic_;
  }
  if (timesres_ != &::google::protobuf::internal::kEmptyString) {
    delete timesres_;
  }
  if (sweepcondition_ != &::google::protobuf::internal::kEmptyString) {
    delete sweepcondition_;
  }
  if (this != default_instance_) {
  }
}

void duplicategroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicategroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicategroup_descriptor_;
}

const duplicategroup& duplicategroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicategroup* duplicategroup::default_instance_ = NULL;

duplicategroup* duplicategroup::New() const {
  return new duplicategroup;
}

void duplicategroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_duplicatetitlepic()) {
      if (duplicatetitlepic_ != &::google::protobuf::internal::kEmptyString) {
        duplicatetitlepic_->clear();
      }
    }
    unlocklevel_ = 0;
    belongtotype_ = 0;
    viptype_ = 0;
    dynamiclevel_ = 0;
    if (has_timesres()) {
      if (timesres_ != &::google::protobuf::internal::kEmptyString) {
        timesres_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    grouptimestype_ = 0;
    grouptimes_ = 0;
    refreshtype_ = 0;
    enteritemid_ = GOOGLE_LONGLONG(0);
    relivetpye_ = 0;
    if (has_sweepcondition()) {
      if (sweepcondition_ != &::google::protobuf::internal::kEmptyString) {
        sweepcondition_->clear();
      }
    }
    buyentertimescosttype_ = 0;
    buyentertimescost_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    countdown_ = 0;
    pathfindingtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicategroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_duplicateTitlePic;
        break;
      }

      // optional string duplicateTitlePic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateTitlePic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duplicatetitlepic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->duplicatetitlepic().data(), this->duplicatetitlepic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unlockLevel;
        break;
      }

      // optional int32 unlockLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_belongToType;
        break;
      }

      // optional int32 belongToType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belongToType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belongtotype_)));
          set_has_belongtotype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viptype;
        break;
      }

      // optional int32 viptype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptype_)));
          set_has_viptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dynamiclevel;
        break;
      }

      // optional int32 dynamiclevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamiclevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynamiclevel_)));
          set_has_dynamiclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timesRes;
        break;
      }

      // optional string timesRes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timesRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timesres()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timesres().data(), this->timesres().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_groupTimesType;
        break;
      }

      // optional int32 groupTimesType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupTimesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptimestype_)));
          set_has_grouptimestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_groupTimes;
        break;
      }

      // optional int32 groupTimes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptimes_)));
          set_has_grouptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refreshType;
        break;
      }

      // optional int32 refreshType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshtype_)));
          set_has_refreshtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_enterItemID;
        break;
      }

      // optional int64 enterItemID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enteritemid_)));
          set_has_enteritemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_reliveTpye;
        break;
      }

      // optional int32 reliveTpye = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reliveTpye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relivetpye_)));
          set_has_relivetpye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sweepCondition;
        break;
      }

      // optional string sweepCondition = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sweepCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sweepcondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sweepcondition().data(), this->sweepcondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_buyEnterTimesCostType;
        break;
      }

      // optional int32 buyEnterTimesCostType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyEnterTimesCostType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyentertimescosttype_)));
          set_has_buyentertimescosttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_buyEnterTimesCost;
        break;
      }

      // optional int32 buyEnterTimesCost = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyEnterTimesCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyentertimescost_)));
          set_has_buyentertimescost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_countDown;
        break;
      }

      // optional int32 countDown = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_pathfindingtype;
        break;
      }

      // optional int32 pathfindingtype = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathfindingtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathfindingtype_)));
          set_has_pathfindingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicategroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string duplicateTitlePic = 3;
  if (has_duplicatetitlepic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicatetitlepic().data(), this->duplicatetitlepic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->duplicatetitlepic(), output);
  }

  // optional int32 unlockLevel = 4;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unlocklevel(), output);
  }

  // optional int32 belongToType = 5;
  if (has_belongtotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->belongtotype(), output);
  }

  // optional int32 viptype = 6;
  if (has_viptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viptype(), output);
  }

  // optional int32 dynamiclevel = 7;
  if (has_dynamiclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dynamiclevel(), output);
  }

  // optional string timesRes = 8;
  if (has_timesres()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timesres().data(), this->timesres().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->timesres(), output);
  }

  // optional int32 groupTimesType = 9;
  if (has_grouptimestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->grouptimestype(), output);
  }

  // optional int32 groupTimes = 10;
  if (has_grouptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->grouptimes(), output);
  }

  // optional int32 refreshType = 11;
  if (has_refreshtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->refreshtype(), output);
  }

  // optional int64 enterItemID = 12;
  if (has_enteritemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->enteritemid(), output);
  }

  // optional int32 reliveTpye = 13;
  if (has_relivetpye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->relivetpye(), output);
  }

  // optional string sweepCondition = 14;
  if (has_sweepcondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sweepcondition().data(), this->sweepcondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sweepcondition(), output);
  }

  // optional int32 buyEnterTimesCostType = 15;
  if (has_buyentertimescosttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->buyentertimescosttype(), output);
  }

  // optional int32 buyEnterTimesCost = 16;
  if (has_buyentertimescost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->buyentertimescost(), output);
  }

  // optional int32 countDown = 17;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->countdown(), output);
  }

  // optional int32 pathfindingtype = 18;
  if (has_pathfindingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->pathfindingtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicategroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string duplicateTitlePic = 3;
  if (has_duplicatetitlepic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duplicatetitlepic().data(), this->duplicatetitlepic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->duplicatetitlepic(), target);
  }

  // optional int32 unlockLevel = 4;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unlocklevel(), target);
  }

  // optional int32 belongToType = 5;
  if (has_belongtotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->belongtotype(), target);
  }

  // optional int32 viptype = 6;
  if (has_viptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viptype(), target);
  }

  // optional int32 dynamiclevel = 7;
  if (has_dynamiclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dynamiclevel(), target);
  }

  // optional string timesRes = 8;
  if (has_timesres()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timesres().data(), this->timesres().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timesres(), target);
  }

  // optional int32 groupTimesType = 9;
  if (has_grouptimestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->grouptimestype(), target);
  }

  // optional int32 groupTimes = 10;
  if (has_grouptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->grouptimes(), target);
  }

  // optional int32 refreshType = 11;
  if (has_refreshtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->refreshtype(), target);
  }

  // optional int64 enterItemID = 12;
  if (has_enteritemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->enteritemid(), target);
  }

  // optional int32 reliveTpye = 13;
  if (has_relivetpye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->relivetpye(), target);
  }

  // optional string sweepCondition = 14;
  if (has_sweepcondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sweepcondition().data(), this->sweepcondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sweepcondition(), target);
  }

  // optional int32 buyEnterTimesCostType = 15;
  if (has_buyentertimescosttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->buyentertimescosttype(), target);
  }

  // optional int32 buyEnterTimesCost = 16;
  if (has_buyentertimescost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->buyentertimescost(), target);
  }

  // optional int32 countDown = 17;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->countdown(), target);
  }

  // optional int32 pathfindingtype = 18;
  if (has_pathfindingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->pathfindingtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicategroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string duplicateTitlePic = 3;
    if (has_duplicatetitlepic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->duplicatetitlepic());
    }

    // optional int32 unlockLevel = 4;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlocklevel());
    }

    // optional int32 belongToType = 5;
    if (has_belongtotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->belongtotype());
    }

    // optional int32 viptype = 6;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }

    // optional int32 dynamiclevel = 7;
    if (has_dynamiclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dynamiclevel());
    }

    // optional string timesRes = 8;
    if (has_timesres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timesres());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 groupTimesType = 9;
    if (has_grouptimestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouptimestype());
    }

    // optional int32 groupTimes = 10;
    if (has_grouptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouptimes());
    }

    // optional int32 refreshType = 11;
    if (has_refreshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshtype());
    }

    // optional int64 enterItemID = 12;
    if (has_enteritemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enteritemid());
    }

    // optional int32 reliveTpye = 13;
    if (has_relivetpye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relivetpye());
    }

    // optional string sweepCondition = 14;
    if (has_sweepcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sweepcondition());
    }

    // optional int32 buyEnterTimesCostType = 15;
    if (has_buyentertimescosttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyentertimescosttype());
    }

    // optional int32 buyEnterTimesCost = 16;
    if (has_buyentertimescost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyentertimescost());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 countDown = 17;
    if (has_countdown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

    // optional int32 pathfindingtype = 18;
    if (has_pathfindingtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathfindingtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicategroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicategroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicategroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicategroup::MergeFrom(const duplicategroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_duplicatetitlepic()) {
      set_duplicatetitlepic(from.duplicatetitlepic());
    }
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
    if (from.has_belongtotype()) {
      set_belongtotype(from.belongtotype());
    }
    if (from.has_viptype()) {
      set_viptype(from.viptype());
    }
    if (from.has_dynamiclevel()) {
      set_dynamiclevel(from.dynamiclevel());
    }
    if (from.has_timesres()) {
      set_timesres(from.timesres());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grouptimestype()) {
      set_grouptimestype(from.grouptimestype());
    }
    if (from.has_grouptimes()) {
      set_grouptimes(from.grouptimes());
    }
    if (from.has_refreshtype()) {
      set_refreshtype(from.refreshtype());
    }
    if (from.has_enteritemid()) {
      set_enteritemid(from.enteritemid());
    }
    if (from.has_relivetpye()) {
      set_relivetpye(from.relivetpye());
    }
    if (from.has_sweepcondition()) {
      set_sweepcondition(from.sweepcondition());
    }
    if (from.has_buyentertimescosttype()) {
      set_buyentertimescosttype(from.buyentertimescosttype());
    }
    if (from.has_buyentertimescost()) {
      set_buyentertimescost(from.buyentertimescost());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_pathfindingtype()) {
      set_pathfindingtype(from.pathfindingtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicategroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicategroup::CopyFrom(const duplicategroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicategroup::IsInitialized() const {

  return true;
}

void duplicategroup::Swap(duplicategroup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(duplicatetitlepic_, other->duplicatetitlepic_);
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(belongtotype_, other->belongtotype_);
    std::swap(viptype_, other->viptype_);
    std::swap(dynamiclevel_, other->dynamiclevel_);
    std::swap(timesres_, other->timesres_);
    std::swap(grouptimestype_, other->grouptimestype_);
    std::swap(grouptimes_, other->grouptimes_);
    std::swap(refreshtype_, other->refreshtype_);
    std::swap(enteritemid_, other->enteritemid_);
    std::swap(relivetpye_, other->relivetpye_);
    std::swap(sweepcondition_, other->sweepcondition_);
    std::swap(buyentertimescosttype_, other->buyentertimescosttype_);
    std::swap(buyentertimescost_, other->buyentertimescost_);
    std::swap(countdown_, other->countdown_);
    std::swap(pathfindingtype_, other->pathfindingtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicategroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicategroup_descriptor_;
  metadata.reflection = duplicategroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicategroup::kDuplicategroupListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicategroup::Sheet_duplicategroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicategroup::InitAsDefaultInstance() {
}

Sheet_duplicategroup::Sheet_duplicategroup(const Sheet_duplicategroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicategroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicategroup::~Sheet_duplicategroup() {
  SharedDtor();
}

void Sheet_duplicategroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicategroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicategroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicategroup_descriptor_;
}

const Sheet_duplicategroup& Sheet_duplicategroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicategroup* Sheet_duplicategroup::default_instance_ = NULL;

Sheet_duplicategroup* Sheet_duplicategroup::New() const {
  return new Sheet_duplicategroup;
}

void Sheet_duplicategroup::Clear() {
  duplicategroup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicategroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicategroup duplicategroup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicategroup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicategroup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicategroup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicategroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicategroup duplicategroup_List = 1;
  for (int i = 0; i < this->duplicategroup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicategroup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicategroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicategroup duplicategroup_List = 1;
  for (int i = 0; i < this->duplicategroup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicategroup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicategroup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicategroup duplicategroup_List = 1;
  total_size += 1 * this->duplicategroup_list_size();
  for (int i = 0; i < this->duplicategroup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicategroup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicategroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicategroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicategroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicategroup::MergeFrom(const Sheet_duplicategroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicategroup_list_.MergeFrom(from.duplicategroup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicategroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicategroup::CopyFrom(const Sheet_duplicategroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicategroup::IsInitialized() const {

  return true;
}

void Sheet_duplicategroup::Swap(Sheet_duplicategroup* other) {
  if (other != this) {
    duplicategroup_list_.Swap(&other->duplicategroup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicategroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicategroup_descriptor_;
  metadata.reflection = Sheet_duplicategroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicatesweepmonsterNum::kIDFieldNumber;
const int duplicatesweepmonsterNum::kSweepTypeFieldNumber;
const int duplicatesweepmonsterNum::kMinLevelFieldNumber;
const int duplicatesweepmonsterNum::kMaxLevelFieldNumber;
const int duplicatesweepmonsterNum::kKillNumberFieldNumber;
const int duplicatesweepmonsterNum::kMonstervaluetypeFieldNumber;
#endif  // !_MSC_VER

duplicatesweepmonsterNum::duplicatesweepmonsterNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicatesweepmonsterNum::InitAsDefaultInstance() {
}

duplicatesweepmonsterNum::duplicatesweepmonsterNum(const duplicatesweepmonsterNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicatesweepmonsterNum::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  sweeptype_ = 0;
  minlevel_ = 0;
  maxlevel_ = 0;
  killnumber_ = 0;
  monstervaluetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicatesweepmonsterNum::~duplicatesweepmonsterNum() {
  SharedDtor();
}

void duplicatesweepmonsterNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void duplicatesweepmonsterNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicatesweepmonsterNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicatesweepmonsterNum_descriptor_;
}

const duplicatesweepmonsterNum& duplicatesweepmonsterNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicatesweepmonsterNum* duplicatesweepmonsterNum::default_instance_ = NULL;

duplicatesweepmonsterNum* duplicatesweepmonsterNum::New() const {
  return new duplicatesweepmonsterNum;
}

void duplicatesweepmonsterNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    sweeptype_ = 0;
    minlevel_ = 0;
    maxlevel_ = 0;
    killnumber_ = 0;
    monstervaluetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicatesweepmonsterNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sweepType;
        break;
      }

      // optional int32 sweepType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweeptype_)));
          set_has_sweeptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minLevel;
        break;
      }

      // optional int32 minLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlevel_)));
          set_has_minlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxLevel;
        break;
      }

      // optional int32 maxLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killNumber;
        break;
      }

      // optional int32 killNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killnumber_)));
          set_has_killnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monstervaluetype;
        break;
      }

      // optional int32 monstervaluetype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monstervaluetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monstervaluetype_)));
          set_has_monstervaluetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicatesweepmonsterNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 sweepType = 2;
  if (has_sweeptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sweeptype(), output);
  }

  // optional int32 minLevel = 3;
  if (has_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minlevel(), output);
  }

  // optional int32 maxLevel = 4;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxlevel(), output);
  }

  // optional int32 killNumber = 5;
  if (has_killnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->killnumber(), output);
  }

  // optional int32 monstervaluetype = 6;
  if (has_monstervaluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->monstervaluetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicatesweepmonsterNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 sweepType = 2;
  if (has_sweeptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sweeptype(), target);
  }

  // optional int32 minLevel = 3;
  if (has_minlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minlevel(), target);
  }

  // optional int32 maxLevel = 4;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxlevel(), target);
  }

  // optional int32 killNumber = 5;
  if (has_killnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->killnumber(), target);
  }

  // optional int32 monstervaluetype = 6;
  if (has_monstervaluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->monstervaluetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicatesweepmonsterNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 sweepType = 2;
    if (has_sweeptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweeptype());
    }

    // optional int32 minLevel = 3;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlevel());
    }

    // optional int32 maxLevel = 4;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

    // optional int32 killNumber = 5;
    if (has_killnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killnumber());
    }

    // optional int32 monstervaluetype = 6;
    if (has_monstervaluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monstervaluetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicatesweepmonsterNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicatesweepmonsterNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicatesweepmonsterNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicatesweepmonsterNum::MergeFrom(const duplicatesweepmonsterNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sweeptype()) {
      set_sweeptype(from.sweeptype());
    }
    if (from.has_minlevel()) {
      set_minlevel(from.minlevel());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_killnumber()) {
      set_killnumber(from.killnumber());
    }
    if (from.has_monstervaluetype()) {
      set_monstervaluetype(from.monstervaluetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicatesweepmonsterNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicatesweepmonsterNum::CopyFrom(const duplicatesweepmonsterNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicatesweepmonsterNum::IsInitialized() const {

  return true;
}

void duplicatesweepmonsterNum::Swap(duplicatesweepmonsterNum* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sweeptype_, other->sweeptype_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(killnumber_, other->killnumber_);
    std::swap(monstervaluetype_, other->monstervaluetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicatesweepmonsterNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicatesweepmonsterNum_descriptor_;
  metadata.reflection = duplicatesweepmonsterNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicatesweepmonsterNum::kDuplicatesweepmonsterNumListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicatesweepmonsterNum::Sheet_duplicatesweepmonsterNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicatesweepmonsterNum::InitAsDefaultInstance() {
}

Sheet_duplicatesweepmonsterNum::Sheet_duplicatesweepmonsterNum(const Sheet_duplicatesweepmonsterNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicatesweepmonsterNum::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicatesweepmonsterNum::~Sheet_duplicatesweepmonsterNum() {
  SharedDtor();
}

void Sheet_duplicatesweepmonsterNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicatesweepmonsterNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicatesweepmonsterNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicatesweepmonsterNum_descriptor_;
}

const Sheet_duplicatesweepmonsterNum& Sheet_duplicatesweepmonsterNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicatesweepmonsterNum* Sheet_duplicatesweepmonsterNum::default_instance_ = NULL;

Sheet_duplicatesweepmonsterNum* Sheet_duplicatesweepmonsterNum::New() const {
  return new Sheet_duplicatesweepmonsterNum;
}

void Sheet_duplicatesweepmonsterNum::Clear() {
  duplicatesweepmonsternum_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicatesweepmonsterNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicatesweepmonsterNum duplicatesweepmonsterNum_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicatesweepmonsterNum_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicatesweepmonsternum_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicatesweepmonsterNum_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicatesweepmonsterNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicatesweepmonsterNum duplicatesweepmonsterNum_List = 1;
  for (int i = 0; i < this->duplicatesweepmonsternum_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicatesweepmonsternum_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicatesweepmonsterNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicatesweepmonsterNum duplicatesweepmonsterNum_List = 1;
  for (int i = 0; i < this->duplicatesweepmonsternum_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicatesweepmonsternum_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicatesweepmonsterNum::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicatesweepmonsterNum duplicatesweepmonsterNum_List = 1;
  total_size += 1 * this->duplicatesweepmonsternum_list_size();
  for (int i = 0; i < this->duplicatesweepmonsternum_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicatesweepmonsternum_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicatesweepmonsterNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicatesweepmonsterNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicatesweepmonsterNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicatesweepmonsterNum::MergeFrom(const Sheet_duplicatesweepmonsterNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicatesweepmonsternum_list_.MergeFrom(from.duplicatesweepmonsternum_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicatesweepmonsterNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicatesweepmonsterNum::CopyFrom(const Sheet_duplicatesweepmonsterNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicatesweepmonsterNum::IsInitialized() const {

  return true;
}

void Sheet_duplicatesweepmonsterNum::Swap(Sheet_duplicatesweepmonsterNum* other) {
  if (other != this) {
    duplicatesweepmonsternum_list_.Swap(&other->duplicatesweepmonsternum_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicatesweepmonsterNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicatesweepmonsterNum_descriptor_;
  metadata.reflection = Sheet_duplicatesweepmonsterNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicateGuildbosstime::kDuplicateIDFieldNumber;
const int duplicateGuildbosstime::kOpenCycleFieldNumber;
const int duplicateGuildbosstime::kOpenTimeFieldNumber;
const int duplicateGuildbosstime::kBossGroupFieldNumber;
const int duplicateGuildbosstime::kRelevanceFieldNumber;
#endif  // !_MSC_VER

duplicateGuildbosstime::duplicateGuildbosstime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicateGuildbosstime::InitAsDefaultInstance() {
}

duplicateGuildbosstime::duplicateGuildbosstime(const duplicateGuildbosstime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicateGuildbosstime::SharedCtor() {
  _cached_size_ = 0;
  duplicateid_ = GOOGLE_LONGLONG(0);
  opencycle_ = 0;
  opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bossgroup_ = 0;
  relevance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicateGuildbosstime::~duplicateGuildbosstime() {
  SharedDtor();
}

void duplicateGuildbosstime::SharedDtor() {
  if (opentime_ != &::google::protobuf::internal::kEmptyString) {
    delete opentime_;
  }
  if (this != default_instance_) {
  }
}

void duplicateGuildbosstime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicateGuildbosstime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicateGuildbosstime_descriptor_;
}

const duplicateGuildbosstime& duplicateGuildbosstime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicateGuildbosstime* duplicateGuildbosstime::default_instance_ = NULL;

duplicateGuildbosstime* duplicateGuildbosstime::New() const {
  return new duplicateGuildbosstime;
}

void duplicateGuildbosstime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicateid_ = GOOGLE_LONGLONG(0);
    opencycle_ = 0;
    if (has_opentime()) {
      if (opentime_ != &::google::protobuf::internal::kEmptyString) {
        opentime_->clear();
      }
    }
    bossgroup_ = 0;
    relevance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicateGuildbosstime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duplicateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duplicateid_)));
          set_has_duplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_openCycle;
        break;
      }

      // optional int32 openCycle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opencycle_)));
          set_has_opencycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_openTime;
        break;
      }

      // optional string openTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opentime().data(), this->opentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bossGroup;
        break;
      }

      // optional int32 bossGroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossgroup_)));
          set_has_bossgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_relevance;
        break;
      }

      // optional int32 relevance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relevance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relevance_)));
          set_has_relevance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicateGuildbosstime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 duplicateID = 1;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->duplicateid(), output);
  }

  // optional int32 openCycle = 2;
  if (has_opencycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opencycle(), output);
  }

  // optional string openTime = 3;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opentime(), output);
  }

  // optional int32 bossGroup = 4;
  if (has_bossgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bossgroup(), output);
  }

  // optional int32 relevance = 5;
  if (has_relevance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->relevance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicateGuildbosstime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 duplicateID = 1;
  if (has_duplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->duplicateid(), target);
  }

  // optional int32 openCycle = 2;
  if (has_opencycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opencycle(), target);
  }

  // optional string openTime = 3;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->opentime(), target);
  }

  // optional int32 bossGroup = 4;
  if (has_bossgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bossgroup(), target);
  }

  // optional int32 relevance = 5;
  if (has_relevance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->relevance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicateGuildbosstime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 duplicateID = 1;
    if (has_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duplicateid());
    }

    // optional int32 openCycle = 2;
    if (has_opencycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opencycle());
    }

    // optional string openTime = 3;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opentime());
    }

    // optional int32 bossGroup = 4;
    if (has_bossgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossgroup());
    }

    // optional int32 relevance = 5;
    if (has_relevance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relevance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicateGuildbosstime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicateGuildbosstime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicateGuildbosstime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicateGuildbosstime::MergeFrom(const duplicateGuildbosstime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicateid()) {
      set_duplicateid(from.duplicateid());
    }
    if (from.has_opencycle()) {
      set_opencycle(from.opencycle());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_bossgroup()) {
      set_bossgroup(from.bossgroup());
    }
    if (from.has_relevance()) {
      set_relevance(from.relevance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicateGuildbosstime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicateGuildbosstime::CopyFrom(const duplicateGuildbosstime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicateGuildbosstime::IsInitialized() const {

  return true;
}

void duplicateGuildbosstime::Swap(duplicateGuildbosstime* other) {
  if (other != this) {
    std::swap(duplicateid_, other->duplicateid_);
    std::swap(opencycle_, other->opencycle_);
    std::swap(opentime_, other->opentime_);
    std::swap(bossgroup_, other->bossgroup_);
    std::swap(relevance_, other->relevance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicateGuildbosstime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicateGuildbosstime_descriptor_;
  metadata.reflection = duplicateGuildbosstime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicateGuildbosstime::kDuplicateGuildbosstimeListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicateGuildbosstime::Sheet_duplicateGuildbosstime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicateGuildbosstime::InitAsDefaultInstance() {
}

Sheet_duplicateGuildbosstime::Sheet_duplicateGuildbosstime(const Sheet_duplicateGuildbosstime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicateGuildbosstime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicateGuildbosstime::~Sheet_duplicateGuildbosstime() {
  SharedDtor();
}

void Sheet_duplicateGuildbosstime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicateGuildbosstime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicateGuildbosstime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicateGuildbosstime_descriptor_;
}

const Sheet_duplicateGuildbosstime& Sheet_duplicateGuildbosstime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicateGuildbosstime* Sheet_duplicateGuildbosstime::default_instance_ = NULL;

Sheet_duplicateGuildbosstime* Sheet_duplicateGuildbosstime::New() const {
  return new Sheet_duplicateGuildbosstime;
}

void Sheet_duplicateGuildbosstime::Clear() {
  duplicateguildbosstime_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicateGuildbosstime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicateGuildbosstime duplicateGuildbosstime_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateGuildbosstime_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicateguildbosstime_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicateGuildbosstime_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicateGuildbosstime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicateGuildbosstime duplicateGuildbosstime_List = 1;
  for (int i = 0; i < this->duplicateguildbosstime_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicateguildbosstime_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicateGuildbosstime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicateGuildbosstime duplicateGuildbosstime_List = 1;
  for (int i = 0; i < this->duplicateguildbosstime_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicateguildbosstime_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicateGuildbosstime::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicateGuildbosstime duplicateGuildbosstime_List = 1;
  total_size += 1 * this->duplicateguildbosstime_list_size();
  for (int i = 0; i < this->duplicateguildbosstime_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicateguildbosstime_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicateGuildbosstime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicateGuildbosstime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicateGuildbosstime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicateGuildbosstime::MergeFrom(const Sheet_duplicateGuildbosstime& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicateguildbosstime_list_.MergeFrom(from.duplicateguildbosstime_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicateGuildbosstime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicateGuildbosstime::CopyFrom(const Sheet_duplicateGuildbosstime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicateGuildbosstime::IsInitialized() const {

  return true;
}

void Sheet_duplicateGuildbosstime::Swap(Sheet_duplicateGuildbosstime* other) {
  if (other != this) {
    duplicateguildbosstime_list_.Swap(&other->duplicateguildbosstime_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicateGuildbosstime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicateGuildbosstime_descriptor_;
  metadata.reflection = Sheet_duplicateGuildbosstime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicateGuildbosskillDesc::kSmallFieldNumber;
const int duplicateGuildbosskillDesc::kLargeFieldNumber;
const int duplicateGuildbosskillDesc::kWeakenFieldNumber;
#endif  // !_MSC_VER

duplicateGuildbosskillDesc::duplicateGuildbosskillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicateGuildbosskillDesc::InitAsDefaultInstance() {
}

duplicateGuildbosskillDesc::duplicateGuildbosskillDesc(const duplicateGuildbosskillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicateGuildbosskillDesc::SharedCtor() {
  _cached_size_ = 0;
  small_ = 0;
  large_ = 0;
  weaken_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicateGuildbosskillDesc::~duplicateGuildbosskillDesc() {
  SharedDtor();
}

void duplicateGuildbosskillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void duplicateGuildbosskillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicateGuildbosskillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicateGuildbosskillDesc_descriptor_;
}

const duplicateGuildbosskillDesc& duplicateGuildbosskillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicateGuildbosskillDesc* duplicateGuildbosskillDesc::default_instance_ = NULL;

duplicateGuildbosskillDesc* duplicateGuildbosskillDesc::New() const {
  return new duplicateGuildbosskillDesc;
}

void duplicateGuildbosskillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    small_ = 0;
    large_ = 0;
    weaken_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicateGuildbosskillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 small = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &small_)));
          set_has_small();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_large;
        break;
      }

      // optional int32 large = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_large:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &large_)));
          set_has_large();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weaken;
        break;
      }

      // optional int32 weaken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaken_)));
          set_has_weaken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicateGuildbosskillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 small = 1;
  if (has_small()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->small(), output);
  }

  // optional int32 large = 2;
  if (has_large()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->large(), output);
  }

  // optional int32 weaken = 3;
  if (has_weaken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weaken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicateGuildbosskillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 small = 1;
  if (has_small()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->small(), target);
  }

  // optional int32 large = 2;
  if (has_large()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->large(), target);
  }

  // optional int32 weaken = 3;
  if (has_weaken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weaken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicateGuildbosskillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 small = 1;
    if (has_small()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->small());
    }

    // optional int32 large = 2;
    if (has_large()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->large());
    }

    // optional int32 weaken = 3;
    if (has_weaken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicateGuildbosskillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicateGuildbosskillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicateGuildbosskillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicateGuildbosskillDesc::MergeFrom(const duplicateGuildbosskillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_small()) {
      set_small(from.small());
    }
    if (from.has_large()) {
      set_large(from.large());
    }
    if (from.has_weaken()) {
      set_weaken(from.weaken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicateGuildbosskillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicateGuildbosskillDesc::CopyFrom(const duplicateGuildbosskillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicateGuildbosskillDesc::IsInitialized() const {

  return true;
}

void duplicateGuildbosskillDesc::Swap(duplicateGuildbosskillDesc* other) {
  if (other != this) {
    std::swap(small_, other->small_);
    std::swap(large_, other->large_);
    std::swap(weaken_, other->weaken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicateGuildbosskillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicateGuildbosskillDesc_descriptor_;
  metadata.reflection = duplicateGuildbosskillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicateGuildboss::kDuplicateIDFieldNumber;
const int duplicateGuildboss::kRewardIdFieldNumber;
const int duplicateGuildboss::kKillFieldNumber;
#endif  // !_MSC_VER

duplicateGuildboss::duplicateGuildboss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicateGuildboss::InitAsDefaultInstance() {
}

duplicateGuildboss::duplicateGuildboss(const duplicateGuildboss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicateGuildboss::SharedCtor() {
  _cached_size_ = 0;
  duplicateid_ = GOOGLE_LONGLONG(0);
  rewardid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicateGuildboss::~duplicateGuildboss() {
  SharedDtor();
}

void duplicateGuildboss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void duplicateGuildboss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicateGuildboss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicateGuildboss_descriptor_;
}

const duplicateGuildboss& duplicateGuildboss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicateGuildboss* duplicateGuildboss::default_instance_ = NULL;

duplicateGuildboss* duplicateGuildboss::New() const {
  return new duplicateGuildboss;
}

void duplicateGuildboss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicateid_ = GOOGLE_LONGLONG(0);
    rewardid_ = GOOGLE_LONGLONG(0);
  }
  kill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicateGuildboss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duplicateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duplicateid_)));
          set_has_duplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardId;
        break;
      }

      // optional int64 rewardId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kill;
        break;
      }

      // repeated .proto_ff.duplicateGuildbosskillDesc kill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicateGuildboss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 duplicateID = 1;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->duplicateid(), output);
  }

  // optional int64 rewardId = 2;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rewardid(), output);
  }

  // repeated .proto_ff.duplicateGuildbosskillDesc kill = 3;
  for (int i = 0; i < this->kill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicateGuildboss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 duplicateID = 1;
  if (has_duplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->duplicateid(), target);
  }

  // optional int64 rewardId = 2;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rewardid(), target);
  }

  // repeated .proto_ff.duplicateGuildbosskillDesc kill = 3;
  for (int i = 0; i < this->kill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->kill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicateGuildboss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 duplicateID = 1;
    if (has_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duplicateid());
    }

    // optional int64 rewardId = 2;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardid());
    }

  }
  // repeated .proto_ff.duplicateGuildbosskillDesc kill = 3;
  total_size += 1 * this->kill_size();
  for (int i = 0; i < this->kill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicateGuildboss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicateGuildboss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicateGuildboss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicateGuildboss::MergeFrom(const duplicateGuildboss& from) {
  GOOGLE_CHECK_NE(&from, this);
  kill_.MergeFrom(from.kill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicateid()) {
      set_duplicateid(from.duplicateid());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicateGuildboss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicateGuildboss::CopyFrom(const duplicateGuildboss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicateGuildboss::IsInitialized() const {

  return true;
}

void duplicateGuildboss::Swap(duplicateGuildboss* other) {
  if (other != this) {
    std::swap(duplicateid_, other->duplicateid_);
    std::swap(rewardid_, other->rewardid_);
    kill_.Swap(&other->kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicateGuildboss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicateGuildboss_descriptor_;
  metadata.reflection = duplicateGuildboss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicateGuildboss::kDuplicateGuildbossListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicateGuildboss::Sheet_duplicateGuildboss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicateGuildboss::InitAsDefaultInstance() {
}

Sheet_duplicateGuildboss::Sheet_duplicateGuildboss(const Sheet_duplicateGuildboss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicateGuildboss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicateGuildboss::~Sheet_duplicateGuildboss() {
  SharedDtor();
}

void Sheet_duplicateGuildboss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicateGuildboss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicateGuildboss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicateGuildboss_descriptor_;
}

const Sheet_duplicateGuildboss& Sheet_duplicateGuildboss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicateGuildboss* Sheet_duplicateGuildboss::default_instance_ = NULL;

Sheet_duplicateGuildboss* Sheet_duplicateGuildboss::New() const {
  return new Sheet_duplicateGuildboss;
}

void Sheet_duplicateGuildboss::Clear() {
  duplicateguildboss_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicateGuildboss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicateGuildboss duplicateGuildboss_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateGuildboss_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicateguildboss_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicateGuildboss_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicateGuildboss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicateGuildboss duplicateGuildboss_List = 1;
  for (int i = 0; i < this->duplicateguildboss_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicateguildboss_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicateGuildboss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicateGuildboss duplicateGuildboss_List = 1;
  for (int i = 0; i < this->duplicateguildboss_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicateguildboss_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicateGuildboss::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicateGuildboss duplicateGuildboss_List = 1;
  total_size += 1 * this->duplicateguildboss_list_size();
  for (int i = 0; i < this->duplicateguildboss_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicateguildboss_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicateGuildboss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicateGuildboss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicateGuildboss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicateGuildboss::MergeFrom(const Sheet_duplicateGuildboss& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicateguildboss_list_.MergeFrom(from.duplicateguildboss_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicateGuildboss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicateGuildboss::CopyFrom(const Sheet_duplicateGuildboss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicateGuildboss::IsInitialized() const {

  return true;
}

void Sheet_duplicateGuildboss::Swap(Sheet_duplicateGuildboss* other) {
  if (other != this) {
    duplicateguildboss_list_.Swap(&other->duplicateguildboss_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicateGuildboss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicateGuildboss_descriptor_;
  metadata.reflection = Sheet_duplicateGuildboss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int duplicateGuildDuplicate::kLevelFieldNumber;
const int duplicateGuildDuplicate::kMonsterExpFieldNumber;
const int duplicateGuildDuplicate::kBossExpFieldNumber;
#endif  // !_MSC_VER

duplicateGuildDuplicate::duplicateGuildDuplicate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void duplicateGuildDuplicate::InitAsDefaultInstance() {
}

duplicateGuildDuplicate::duplicateGuildDuplicate(const duplicateGuildDuplicate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void duplicateGuildDuplicate::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  monsterexp_ = GOOGLE_LONGLONG(0);
  bossexp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

duplicateGuildDuplicate::~duplicateGuildDuplicate() {
  SharedDtor();
}

void duplicateGuildDuplicate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void duplicateGuildDuplicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* duplicateGuildDuplicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return duplicateGuildDuplicate_descriptor_;
}

const duplicateGuildDuplicate& duplicateGuildDuplicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

duplicateGuildDuplicate* duplicateGuildDuplicate::default_instance_ = NULL;

duplicateGuildDuplicate* duplicateGuildDuplicate::New() const {
  return new duplicateGuildDuplicate;
}

void duplicateGuildDuplicate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    monsterexp_ = GOOGLE_LONGLONG(0);
    bossexp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool duplicateGuildDuplicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterExp;
        break;
      }

      // optional int64 monsterExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterexp_)));
          set_has_monsterexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossExp;
        break;
      }

      // optional int64 bossExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossexp_)));
          set_has_bossexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void duplicateGuildDuplicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int64 monsterExp = 2;
  if (has_monsterexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->monsterexp(), output);
  }

  // optional int64 bossExp = 3;
  if (has_bossexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bossexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* duplicateGuildDuplicate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int64 monsterExp = 2;
  if (has_monsterexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->monsterexp(), target);
  }

  // optional int64 bossExp = 3;
  if (has_bossexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bossexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int duplicateGuildDuplicate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 monsterExp = 2;
    if (has_monsterexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterexp());
    }

    // optional int64 bossExp = 3;
    if (has_bossexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void duplicateGuildDuplicate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const duplicateGuildDuplicate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const duplicateGuildDuplicate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void duplicateGuildDuplicate::MergeFrom(const duplicateGuildDuplicate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_monsterexp()) {
      set_monsterexp(from.monsterexp());
    }
    if (from.has_bossexp()) {
      set_bossexp(from.bossexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void duplicateGuildDuplicate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void duplicateGuildDuplicate::CopyFrom(const duplicateGuildDuplicate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool duplicateGuildDuplicate::IsInitialized() const {

  return true;
}

void duplicateGuildDuplicate::Swap(duplicateGuildDuplicate* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(monsterexp_, other->monsterexp_);
    std::swap(bossexp_, other->bossexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata duplicateGuildDuplicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = duplicateGuildDuplicate_descriptor_;
  metadata.reflection = duplicateGuildDuplicate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_duplicateGuildDuplicate::kDuplicateGuildDuplicateListFieldNumber;
#endif  // !_MSC_VER

Sheet_duplicateGuildDuplicate::Sheet_duplicateGuildDuplicate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_duplicateGuildDuplicate::InitAsDefaultInstance() {
}

Sheet_duplicateGuildDuplicate::Sheet_duplicateGuildDuplicate(const Sheet_duplicateGuildDuplicate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_duplicateGuildDuplicate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_duplicateGuildDuplicate::~Sheet_duplicateGuildDuplicate() {
  SharedDtor();
}

void Sheet_duplicateGuildDuplicate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_duplicateGuildDuplicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_duplicateGuildDuplicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_duplicateGuildDuplicate_descriptor_;
}

const Sheet_duplicateGuildDuplicate& Sheet_duplicateGuildDuplicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_duplicate_2eproto();
  return *default_instance_;
}

Sheet_duplicateGuildDuplicate* Sheet_duplicateGuildDuplicate::default_instance_ = NULL;

Sheet_duplicateGuildDuplicate* Sheet_duplicateGuildDuplicate::New() const {
  return new Sheet_duplicateGuildDuplicate;
}

void Sheet_duplicateGuildDuplicate::Clear() {
  duplicateguildduplicate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_duplicateGuildDuplicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.duplicateGuildDuplicate duplicateGuildDuplicate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateGuildDuplicate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicateguildduplicate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicateGuildDuplicate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_duplicateGuildDuplicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.duplicateGuildDuplicate duplicateGuildDuplicate_List = 1;
  for (int i = 0; i < this->duplicateguildduplicate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicateguildduplicate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_duplicateGuildDuplicate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.duplicateGuildDuplicate duplicateGuildDuplicate_List = 1;
  for (int i = 0; i < this->duplicateguildduplicate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicateguildduplicate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_duplicateGuildDuplicate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.duplicateGuildDuplicate duplicateGuildDuplicate_List = 1;
  total_size += 1 * this->duplicateguildduplicate_list_size();
  for (int i = 0; i < this->duplicateguildduplicate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicateguildduplicate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_duplicateGuildDuplicate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_duplicateGuildDuplicate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_duplicateGuildDuplicate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_duplicateGuildDuplicate::MergeFrom(const Sheet_duplicateGuildDuplicate& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicateguildduplicate_list_.MergeFrom(from.duplicateguildduplicate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_duplicateGuildDuplicate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_duplicateGuildDuplicate::CopyFrom(const Sheet_duplicateGuildDuplicate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_duplicateGuildDuplicate::IsInitialized() const {

  return true;
}

void Sheet_duplicateGuildDuplicate::Swap(Sheet_duplicateGuildDuplicate* other) {
  if (other != this) {
    duplicateguildduplicate_list_.Swap(&other->duplicateguildduplicate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_duplicateGuildDuplicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_duplicateGuildDuplicate_descriptor_;
  metadata.reflection = Sheet_duplicateGuildDuplicate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
