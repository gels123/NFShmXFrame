// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achievement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "achievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* achievementachievementitemRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  achievementachievementitemRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* achievementachievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  achievementachievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_achievementachievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_achievementachievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* achievementachievementreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  achievementachievementreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_achievementachievementreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_achievementachievementreward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_achievement_2eproto() {
  protobuf_AddDesc_achievement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "achievement.proto");
  GOOGLE_CHECK(file != NULL);
  achievementachievementitemRewardDesc_descriptor_ = file->message_type(0);
  static const int achievementachievementitemRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementitemRewardDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementitemRewardDesc, value_),
  };
  achievementachievementitemRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      achievementachievementitemRewardDesc_descriptor_,
      achievementachievementitemRewardDesc::default_instance_,
      achievementachievementitemRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementitemRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementitemRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(achievementachievementitemRewardDesc));
  achievementachievement_descriptor_ = file->message_type(1);
  static const int achievementachievement_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementdtp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementsubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementobjectidstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementobjectvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementgod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, achievementpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, linkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, itemreward_),
  };
  achievementachievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      achievementachievement_descriptor_,
      achievementachievement::default_instance_,
      achievementachievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(achievementachievement));
  Sheet_achievementachievement_descriptor_ = file->message_type(2);
  static const int Sheet_achievementachievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_achievementachievement, achievementachievement_list_),
  };
  Sheet_achievementachievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_achievementachievement_descriptor_,
      Sheet_achievementachievement::default_instance_,
      Sheet_achievementachievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_achievementachievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_achievementachievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_achievementachievement));
  achievementachievementreward_descriptor_ = file->message_type(3);
  static const int achievementachievementreward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementreward, achievementprizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementreward, achievementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementreward, achievementpointvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementreward, achievementskil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementreward, achievementdia_),
  };
  achievementachievementreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      achievementachievementreward_descriptor_,
      achievementachievementreward::default_instance_,
      achievementachievementreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(achievementachievementreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(achievementachievementreward));
  Sheet_achievementachievementreward_descriptor_ = file->message_type(4);
  static const int Sheet_achievementachievementreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_achievementachievementreward, achievementachievementreward_list_),
  };
  Sheet_achievementachievementreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_achievementachievementreward_descriptor_,
      Sheet_achievementachievementreward::default_instance_,
      Sheet_achievementachievementreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_achievementachievementreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_achievementachievementreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_achievementachievementreward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_achievement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    achievementachievementitemRewardDesc_descriptor_, &achievementachievementitemRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    achievementachievement_descriptor_, &achievementachievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_achievementachievement_descriptor_, &Sheet_achievementachievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    achievementachievementreward_descriptor_, &achievementachievementreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_achievementachievementreward_descriptor_, &Sheet_achievementachievementreward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_achievement_2eproto() {
  delete achievementachievementitemRewardDesc::default_instance_;
  delete achievementachievementitemRewardDesc_reflection_;
  delete achievementachievement::default_instance_;
  delete achievementachievement_reflection_;
  delete Sheet_achievementachievement::default_instance_;
  delete Sheet_achievementachievement_reflection_;
  delete achievementachievementreward::default_instance_;
  delete achievementachievementreward_reflection_;
  delete Sheet_achievementachievementreward::default_instance_;
  delete Sheet_achievementachievementreward_reflection_;
}

void protobuf_AddDesc_achievement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021achievement.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"U\n$achievementachievementit"
    "emRewardDesc\022\022\n\002ID\030\001 \001(\003B\006\302\377\024\002ID\022\031\n\005Valu"
    "e\030\002 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\"\262\005\n\026achievementachie"
    "vement\022#\n\rachievementId\030\001 \001(\003B\014\302\377\024\010\346\210\220\345\260"
    "\261ID\0220\n\020achievementLevel\030\002 \001(\005B\026\302\377\024\022\346\210\220\345\260"
    "\261\350\247\246\345\217\221\347\255\211\347\272\247\022(\n\016achievementDTP\030\003 \001(\005B\020\302"
    "\377\024\014\346\210\220\345\260\261\345\244\247\347\261\273\022)\n\017achievementType\030\004 \001(\005"
    "B\020\302\377\024\014\346\210\220\345\260\261\347\261\273\345\236\213\022,\n\022achievementSubType"
    "\030\005 \001(\005B\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213\022/\n\023achievementO"
    "bjectID\030\006 \001(\003B\022\302\377\024\016\344\272\213\344\273\266\347\233\256\346\240\207ID\022\?\n\031ach"
    "ievementObjectIDString\030\007 \001(\tB\034\302\377\024\024\344\272\213\344\273\266"
    "\347\233\256\346\240\207Idstring\220\301\024<\0229\n\026achievementObjectV"
    "alue\030\010 \001(\005B\031\302\377\024\025\344\272\213\344\273\266\347\233\256\346\240\207\345\256\214\346\210\220\345\200\274\0224\n"
    "\016achievementDia\030\t \001(\005B\034\302\377\024\030\350\216\267\345\276\227\347\273\221\345\256\232\351"
    "\222\273\347\237\263\346\225\260\351\207\217\022.\n\016achievementGod\030\n \001(\005B\026\302\377\024"
    "\022\350\216\267\345\276\227\351\207\221\345\270\201\346\225\260\351\207\217\0223\n\020achievementPoint\030"
    "\013 \001(\005B\031\302\377\024\025\350\216\267\345\217\226\346\210\220\345\260\261\347\202\271\346\225\260\351\207\217\022\034\n\006link"
    "ID\030\014 \001(\005B\014\302\377\024\010\345\211\215\345\276\200ID\022X\n\nitemReward\030\r \003"
    "(\0132..proto_ff.achievementachievementitem"
    "RewardDescB\024\302\377\024\014\350\216\267\345\276\227\347\211\251\345\223\201\210\301\024\002\"l\n\034Shee"
    "t_achievementachievement\022L\n\033achievementa"
    "chievement_List\030\001 \003(\0132 .proto_ff.achieve"
    "mentachievementB\005\210\301\024\220\003\"\223\002\n\034achievementac"
    "hievementreward\022.\n\022achievementPrizeId\030\001 "
    "\001(\003B\022\302\377\024\016\346\210\220\345\260\261\345\245\226\345\212\261ID\022)\n\017achievementTy"
    "pe\030\002 \001(\005B\020\302\377\024\014\346\210\220\345\260\261\347\261\273\345\236\213\0225\n\025achievemen"
    "tPointValue\030\003 \001(\005B\026\302\377\024\022\346\211\200\351\234\200\346\210\220\345\260\261\347\202\271\345\200"
    "\274\022+\n\017achievementSkil\030\004 \001(\003B\022\302\377\024\016\346\210\220\345\260\261\346\212"
    "\200\350\203\275id\0224\n\016achievementDia\030\005 \001(\005B\034\302\377\024\030\350\216\267\345"
    "\276\227\347\273\221\345\256\232\351\222\273\347\237\263\346\225\260\351\207\217\"}\n\"Sheet_achievemen"
    "tachievementreward\022W\n!achievementachieve"
    "mentreward_List\030\001 \003(\0132&.proto_ff.achieve"
    "mentachievementrewardB\004\210\301\024\024", 1347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "achievement.proto", &protobuf_RegisterTypes);
  achievementachievementitemRewardDesc::default_instance_ = new achievementachievementitemRewardDesc();
  achievementachievement::default_instance_ = new achievementachievement();
  Sheet_achievementachievement::default_instance_ = new Sheet_achievementachievement();
  achievementachievementreward::default_instance_ = new achievementachievementreward();
  Sheet_achievementachievementreward::default_instance_ = new Sheet_achievementachievementreward();
  achievementachievementitemRewardDesc::default_instance_->InitAsDefaultInstance();
  achievementachievement::default_instance_->InitAsDefaultInstance();
  Sheet_achievementachievement::default_instance_->InitAsDefaultInstance();
  achievementachievementreward::default_instance_->InitAsDefaultInstance();
  Sheet_achievementachievementreward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_achievement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_achievement_2eproto {
  StaticDescriptorInitializer_achievement_2eproto() {
    protobuf_AddDesc_achievement_2eproto();
  }
} static_descriptor_initializer_achievement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int achievementachievementitemRewardDesc::kIDFieldNumber;
const int achievementachievementitemRewardDesc::kValueFieldNumber;
#endif  // !_MSC_VER

achievementachievementitemRewardDesc::achievementachievementitemRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void achievementachievementitemRewardDesc::InitAsDefaultInstance() {
}

achievementachievementitemRewardDesc::achievementachievementitemRewardDesc(const achievementachievementitemRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void achievementachievementitemRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

achievementachievementitemRewardDesc::~achievementachievementitemRewardDesc() {
  SharedDtor();
}

void achievementachievementitemRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void achievementachievementitemRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* achievementachievementitemRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return achievementachievementitemRewardDesc_descriptor_;
}

const achievementachievementitemRewardDesc& achievementachievementitemRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

achievementachievementitemRewardDesc* achievementachievementitemRewardDesc::default_instance_ = NULL;

achievementachievementitemRewardDesc* achievementachievementitemRewardDesc::New() const {
  return new achievementachievementitemRewardDesc;
}

void achievementachievementitemRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool achievementachievementitemRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void achievementachievementitemRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* achievementachievementitemRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int achievementachievementitemRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void achievementachievementitemRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const achievementachievementitemRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const achievementachievementitemRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void achievementachievementitemRewardDesc::MergeFrom(const achievementachievementitemRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void achievementachievementitemRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void achievementachievementitemRewardDesc::CopyFrom(const achievementachievementitemRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool achievementachievementitemRewardDesc::IsInitialized() const {

  return true;
}

void achievementachievementitemRewardDesc::Swap(achievementachievementitemRewardDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata achievementachievementitemRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = achievementachievementitemRewardDesc_descriptor_;
  metadata.reflection = achievementachievementitemRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int achievementachievement::kAchievementIdFieldNumber;
const int achievementachievement::kAchievementLevelFieldNumber;
const int achievementachievement::kAchievementDTPFieldNumber;
const int achievementachievement::kAchievementTypeFieldNumber;
const int achievementachievement::kAchievementSubTypeFieldNumber;
const int achievementachievement::kAchievementObjectIDFieldNumber;
const int achievementachievement::kAchievementObjectIDStringFieldNumber;
const int achievementachievement::kAchievementObjectValueFieldNumber;
const int achievementachievement::kAchievementDiaFieldNumber;
const int achievementachievement::kAchievementGodFieldNumber;
const int achievementachievement::kAchievementPointFieldNumber;
const int achievementachievement::kLinkIDFieldNumber;
const int achievementachievement::kItemRewardFieldNumber;
#endif  // !_MSC_VER

achievementachievement::achievementachievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void achievementachievement::InitAsDefaultInstance() {
}

achievementachievement::achievementachievement(const achievementachievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void achievementachievement::SharedCtor() {
  _cached_size_ = 0;
  achievementid_ = GOOGLE_LONGLONG(0);
  achievementlevel_ = 0;
  achievementdtp_ = 0;
  achievementtype_ = 0;
  achievementsubtype_ = 0;
  achievementobjectid_ = GOOGLE_LONGLONG(0);
  achievementobjectidstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  achievementobjectvalue_ = 0;
  achievementdia_ = 0;
  achievementgod_ = 0;
  achievementpoint_ = 0;
  linkid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

achievementachievement::~achievementachievement() {
  SharedDtor();
}

void achievementachievement::SharedDtor() {
  if (achievementobjectidstring_ != &::google::protobuf::internal::kEmptyString) {
    delete achievementobjectidstring_;
  }
  if (this != default_instance_) {
  }
}

void achievementachievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* achievementachievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return achievementachievement_descriptor_;
}

const achievementachievement& achievementachievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

achievementachievement* achievementachievement::default_instance_ = NULL;

achievementachievement* achievementachievement::New() const {
  return new achievementachievement;
}

void achievementachievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievementid_ = GOOGLE_LONGLONG(0);
    achievementlevel_ = 0;
    achievementdtp_ = 0;
    achievementtype_ = 0;
    achievementsubtype_ = 0;
    achievementobjectid_ = GOOGLE_LONGLONG(0);
    if (has_achievementobjectidstring()) {
      if (achievementobjectidstring_ != &::google::protobuf::internal::kEmptyString) {
        achievementobjectidstring_->clear();
      }
    }
    achievementobjectvalue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    achievementdia_ = 0;
    achievementgod_ = 0;
    achievementpoint_ = 0;
    linkid_ = 0;
  }
  itemreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool achievementachievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 achievementId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &achievementid_)));
          set_has_achievementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achievementLevel;
        break;
      }

      // optional int32 achievementLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementlevel_)));
          set_has_achievementlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_achievementDTP;
        break;
      }

      // optional int32 achievementDTP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementDTP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementdtp_)));
          set_has_achievementdtp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_achievementType;
        break;
      }

      // optional int32 achievementType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementtype_)));
          set_has_achievementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_achievementSubType;
        break;
      }

      // optional int32 achievementSubType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementsubtype_)));
          set_has_achievementsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_achievementObjectID;
        break;
      }

      // optional int64 achievementObjectID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &achievementobjectid_)));
          set_has_achievementobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_achievementObjectIDString;
        break;
      }

      // optional string achievementObjectIDString = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementObjectIDString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_achievementobjectidstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->achievementobjectidstring().data(), this->achievementobjectidstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_achievementObjectValue;
        break;
      }

      // optional int32 achievementObjectValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementObjectValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementobjectvalue_)));
          set_has_achievementobjectvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_achievementDia;
        break;
      }

      // optional int32 achievementDia = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementDia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementdia_)));
          set_has_achievementdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_achievementGod;
        break;
      }

      // optional int32 achievementGod = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementGod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementgod_)));
          set_has_achievementgod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_achievementPoint;
        break;
      }

      // optional int32 achievementPoint = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementpoint_)));
          set_has_achievementpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_linkID;
        break;
      }

      // optional int32 linkID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linkID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linkid_)));
          set_has_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_itemReward;
        break;
      }

      // repeated .proto_ff.achievementachievementitemRewardDesc itemReward = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_itemReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void achievementachievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 achievementId = 1;
  if (has_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->achievementid(), output);
  }

  // optional int32 achievementLevel = 2;
  if (has_achievementlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achievementlevel(), output);
  }

  // optional int32 achievementDTP = 3;
  if (has_achievementdtp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->achievementdtp(), output);
  }

  // optional int32 achievementType = 4;
  if (has_achievementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->achievementtype(), output);
  }

  // optional int32 achievementSubType = 5;
  if (has_achievementsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->achievementsubtype(), output);
  }

  // optional int64 achievementObjectID = 6;
  if (has_achievementobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->achievementobjectid(), output);
  }

  // optional string achievementObjectIDString = 7;
  if (has_achievementobjectidstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achievementobjectidstring().data(), this->achievementobjectidstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->achievementobjectidstring(), output);
  }

  // optional int32 achievementObjectValue = 8;
  if (has_achievementobjectvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->achievementobjectvalue(), output);
  }

  // optional int32 achievementDia = 9;
  if (has_achievementdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->achievementdia(), output);
  }

  // optional int32 achievementGod = 10;
  if (has_achievementgod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->achievementgod(), output);
  }

  // optional int32 achievementPoint = 11;
  if (has_achievementpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->achievementpoint(), output);
  }

  // optional int32 linkID = 12;
  if (has_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->linkid(), output);
  }

  // repeated .proto_ff.achievementachievementitemRewardDesc itemReward = 13;
  for (int i = 0; i < this->itemreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->itemreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* achievementachievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 achievementId = 1;
  if (has_achievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->achievementid(), target);
  }

  // optional int32 achievementLevel = 2;
  if (has_achievementlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achievementlevel(), target);
  }

  // optional int32 achievementDTP = 3;
  if (has_achievementdtp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->achievementdtp(), target);
  }

  // optional int32 achievementType = 4;
  if (has_achievementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->achievementtype(), target);
  }

  // optional int32 achievementSubType = 5;
  if (has_achievementsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->achievementsubtype(), target);
  }

  // optional int64 achievementObjectID = 6;
  if (has_achievementobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->achievementobjectid(), target);
  }

  // optional string achievementObjectIDString = 7;
  if (has_achievementobjectidstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->achievementobjectidstring().data(), this->achievementobjectidstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->achievementobjectidstring(), target);
  }

  // optional int32 achievementObjectValue = 8;
  if (has_achievementobjectvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->achievementobjectvalue(), target);
  }

  // optional int32 achievementDia = 9;
  if (has_achievementdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->achievementdia(), target);
  }

  // optional int32 achievementGod = 10;
  if (has_achievementgod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->achievementgod(), target);
  }

  // optional int32 achievementPoint = 11;
  if (has_achievementpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->achievementpoint(), target);
  }

  // optional int32 linkID = 12;
  if (has_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->linkid(), target);
  }

  // repeated .proto_ff.achievementachievementitemRewardDesc itemReward = 13;
  for (int i = 0; i < this->itemreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->itemreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int achievementachievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 achievementId = 1;
    if (has_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->achievementid());
    }

    // optional int32 achievementLevel = 2;
    if (has_achievementlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementlevel());
    }

    // optional int32 achievementDTP = 3;
    if (has_achievementdtp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementdtp());
    }

    // optional int32 achievementType = 4;
    if (has_achievementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementtype());
    }

    // optional int32 achievementSubType = 5;
    if (has_achievementsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementsubtype());
    }

    // optional int64 achievementObjectID = 6;
    if (has_achievementobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->achievementobjectid());
    }

    // optional string achievementObjectIDString = 7;
    if (has_achievementobjectidstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->achievementobjectidstring());
    }

    // optional int32 achievementObjectValue = 8;
    if (has_achievementobjectvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementobjectvalue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 achievementDia = 9;
    if (has_achievementdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementdia());
    }

    // optional int32 achievementGod = 10;
    if (has_achievementgod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementgod());
    }

    // optional int32 achievementPoint = 11;
    if (has_achievementpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementpoint());
    }

    // optional int32 linkID = 12;
    if (has_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linkid());
    }

  }
  // repeated .proto_ff.achievementachievementitemRewardDesc itemReward = 13;
  total_size += 1 * this->itemreward_size();
  for (int i = 0; i < this->itemreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void achievementachievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const achievementachievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const achievementachievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void achievementachievement::MergeFrom(const achievementachievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemreward_.MergeFrom(from.itemreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementid()) {
      set_achievementid(from.achievementid());
    }
    if (from.has_achievementlevel()) {
      set_achievementlevel(from.achievementlevel());
    }
    if (from.has_achievementdtp()) {
      set_achievementdtp(from.achievementdtp());
    }
    if (from.has_achievementtype()) {
      set_achievementtype(from.achievementtype());
    }
    if (from.has_achievementsubtype()) {
      set_achievementsubtype(from.achievementsubtype());
    }
    if (from.has_achievementobjectid()) {
      set_achievementobjectid(from.achievementobjectid());
    }
    if (from.has_achievementobjectidstring()) {
      set_achievementobjectidstring(from.achievementobjectidstring());
    }
    if (from.has_achievementobjectvalue()) {
      set_achievementobjectvalue(from.achievementobjectvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_achievementdia()) {
      set_achievementdia(from.achievementdia());
    }
    if (from.has_achievementgod()) {
      set_achievementgod(from.achievementgod());
    }
    if (from.has_achievementpoint()) {
      set_achievementpoint(from.achievementpoint());
    }
    if (from.has_linkid()) {
      set_linkid(from.linkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void achievementachievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void achievementachievement::CopyFrom(const achievementachievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool achievementachievement::IsInitialized() const {

  return true;
}

void achievementachievement::Swap(achievementachievement* other) {
  if (other != this) {
    std::swap(achievementid_, other->achievementid_);
    std::swap(achievementlevel_, other->achievementlevel_);
    std::swap(achievementdtp_, other->achievementdtp_);
    std::swap(achievementtype_, other->achievementtype_);
    std::swap(achievementsubtype_, other->achievementsubtype_);
    std::swap(achievementobjectid_, other->achievementobjectid_);
    std::swap(achievementobjectidstring_, other->achievementobjectidstring_);
    std::swap(achievementobjectvalue_, other->achievementobjectvalue_);
    std::swap(achievementdia_, other->achievementdia_);
    std::swap(achievementgod_, other->achievementgod_);
    std::swap(achievementpoint_, other->achievementpoint_);
    std::swap(linkid_, other->linkid_);
    itemreward_.Swap(&other->itemreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata achievementachievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = achievementachievement_descriptor_;
  metadata.reflection = achievementachievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_achievementachievement::kAchievementachievementListFieldNumber;
#endif  // !_MSC_VER

Sheet_achievementachievement::Sheet_achievementachievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_achievementachievement::InitAsDefaultInstance() {
}

Sheet_achievementachievement::Sheet_achievementachievement(const Sheet_achievementachievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_achievementachievement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_achievementachievement::~Sheet_achievementachievement() {
  SharedDtor();
}

void Sheet_achievementachievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_achievementachievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_achievementachievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_achievementachievement_descriptor_;
}

const Sheet_achievementachievement& Sheet_achievementachievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

Sheet_achievementachievement* Sheet_achievementachievement::default_instance_ = NULL;

Sheet_achievementachievement* Sheet_achievementachievement::New() const {
  return new Sheet_achievementachievement;
}

void Sheet_achievementachievement::Clear() {
  achievementachievement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_achievementachievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.achievementachievement achievementachievement_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementachievement_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementachievement_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievementachievement_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_achievementachievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.achievementachievement achievementachievement_List = 1;
  for (int i = 0; i < this->achievementachievement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievementachievement_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_achievementachievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.achievementachievement achievementachievement_List = 1;
  for (int i = 0; i < this->achievementachievement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievementachievement_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_achievementachievement::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.achievementachievement achievementachievement_List = 1;
  total_size += 1 * this->achievementachievement_list_size();
  for (int i = 0; i < this->achievementachievement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementachievement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_achievementachievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_achievementachievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_achievementachievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_achievementachievement::MergeFrom(const Sheet_achievementachievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievementachievement_list_.MergeFrom(from.achievementachievement_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_achievementachievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_achievementachievement::CopyFrom(const Sheet_achievementachievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_achievementachievement::IsInitialized() const {

  return true;
}

void Sheet_achievementachievement::Swap(Sheet_achievementachievement* other) {
  if (other != this) {
    achievementachievement_list_.Swap(&other->achievementachievement_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_achievementachievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_achievementachievement_descriptor_;
  metadata.reflection = Sheet_achievementachievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int achievementachievementreward::kAchievementPrizeIdFieldNumber;
const int achievementachievementreward::kAchievementTypeFieldNumber;
const int achievementachievementreward::kAchievementPointValueFieldNumber;
const int achievementachievementreward::kAchievementSkilFieldNumber;
const int achievementachievementreward::kAchievementDiaFieldNumber;
#endif  // !_MSC_VER

achievementachievementreward::achievementachievementreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void achievementachievementreward::InitAsDefaultInstance() {
}

achievementachievementreward::achievementachievementreward(const achievementachievementreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void achievementachievementreward::SharedCtor() {
  _cached_size_ = 0;
  achievementprizeid_ = GOOGLE_LONGLONG(0);
  achievementtype_ = 0;
  achievementpointvalue_ = 0;
  achievementskil_ = GOOGLE_LONGLONG(0);
  achievementdia_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

achievementachievementreward::~achievementachievementreward() {
  SharedDtor();
}

void achievementachievementreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void achievementachievementreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* achievementachievementreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return achievementachievementreward_descriptor_;
}

const achievementachievementreward& achievementachievementreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

achievementachievementreward* achievementachievementreward::default_instance_ = NULL;

achievementachievementreward* achievementachievementreward::New() const {
  return new achievementachievementreward;
}

void achievementachievementreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievementprizeid_ = GOOGLE_LONGLONG(0);
    achievementtype_ = 0;
    achievementpointvalue_ = 0;
    achievementskil_ = GOOGLE_LONGLONG(0);
    achievementdia_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool achievementachievementreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 achievementPrizeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &achievementprizeid_)));
          set_has_achievementprizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achievementType;
        break;
      }

      // optional int32 achievementType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementtype_)));
          set_has_achievementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_achievementPointValue;
        break;
      }

      // optional int32 achievementPointValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementPointValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementpointvalue_)));
          set_has_achievementpointvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_achievementSkil;
        break;
      }

      // optional int64 achievementSkil = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementSkil:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &achievementskil_)));
          set_has_achievementskil();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_achievementDia;
        break;
      }

      // optional int32 achievementDia = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementDia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementdia_)));
          set_has_achievementdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void achievementachievementreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 achievementPrizeId = 1;
  if (has_achievementprizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->achievementprizeid(), output);
  }

  // optional int32 achievementType = 2;
  if (has_achievementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achievementtype(), output);
  }

  // optional int32 achievementPointValue = 3;
  if (has_achievementpointvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->achievementpointvalue(), output);
  }

  // optional int64 achievementSkil = 4;
  if (has_achievementskil()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->achievementskil(), output);
  }

  // optional int32 achievementDia = 5;
  if (has_achievementdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->achievementdia(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* achievementachievementreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 achievementPrizeId = 1;
  if (has_achievementprizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->achievementprizeid(), target);
  }

  // optional int32 achievementType = 2;
  if (has_achievementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achievementtype(), target);
  }

  // optional int32 achievementPointValue = 3;
  if (has_achievementpointvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->achievementpointvalue(), target);
  }

  // optional int64 achievementSkil = 4;
  if (has_achievementskil()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->achievementskil(), target);
  }

  // optional int32 achievementDia = 5;
  if (has_achievementdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->achievementdia(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int achievementachievementreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 achievementPrizeId = 1;
    if (has_achievementprizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->achievementprizeid());
    }

    // optional int32 achievementType = 2;
    if (has_achievementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementtype());
    }

    // optional int32 achievementPointValue = 3;
    if (has_achievementpointvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementpointvalue());
    }

    // optional int64 achievementSkil = 4;
    if (has_achievementskil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->achievementskil());
    }

    // optional int32 achievementDia = 5;
    if (has_achievementdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementdia());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void achievementachievementreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const achievementachievementreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const achievementachievementreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void achievementachievementreward::MergeFrom(const achievementachievementreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementprizeid()) {
      set_achievementprizeid(from.achievementprizeid());
    }
    if (from.has_achievementtype()) {
      set_achievementtype(from.achievementtype());
    }
    if (from.has_achievementpointvalue()) {
      set_achievementpointvalue(from.achievementpointvalue());
    }
    if (from.has_achievementskil()) {
      set_achievementskil(from.achievementskil());
    }
    if (from.has_achievementdia()) {
      set_achievementdia(from.achievementdia());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void achievementachievementreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void achievementachievementreward::CopyFrom(const achievementachievementreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool achievementachievementreward::IsInitialized() const {

  return true;
}

void achievementachievementreward::Swap(achievementachievementreward* other) {
  if (other != this) {
    std::swap(achievementprizeid_, other->achievementprizeid_);
    std::swap(achievementtype_, other->achievementtype_);
    std::swap(achievementpointvalue_, other->achievementpointvalue_);
    std::swap(achievementskil_, other->achievementskil_);
    std::swap(achievementdia_, other->achievementdia_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata achievementachievementreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = achievementachievementreward_descriptor_;
  metadata.reflection = achievementachievementreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_achievementachievementreward::kAchievementachievementrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_achievementachievementreward::Sheet_achievementachievementreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_achievementachievementreward::InitAsDefaultInstance() {
}

Sheet_achievementachievementreward::Sheet_achievementachievementreward(const Sheet_achievementachievementreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_achievementachievementreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_achievementachievementreward::~Sheet_achievementachievementreward() {
  SharedDtor();
}

void Sheet_achievementachievementreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_achievementachievementreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_achievementachievementreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_achievementachievementreward_descriptor_;
}

const Sheet_achievementachievementreward& Sheet_achievementachievementreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievement_2eproto();
  return *default_instance_;
}

Sheet_achievementachievementreward* Sheet_achievementachievementreward::default_instance_ = NULL;

Sheet_achievementachievementreward* Sheet_achievementachievementreward::New() const {
  return new Sheet_achievementachievementreward;
}

void Sheet_achievementachievementreward::Clear() {
  achievementachievementreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_achievementachievementreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.achievementachievementreward achievementachievementreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementachievementreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementachievementreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievementachievementreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_achievementachievementreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.achievementachievementreward achievementachievementreward_List = 1;
  for (int i = 0; i < this->achievementachievementreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievementachievementreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_achievementachievementreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.achievementachievementreward achievementachievementreward_List = 1;
  for (int i = 0; i < this->achievementachievementreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievementachievementreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_achievementachievementreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.achievementachievementreward achievementachievementreward_List = 1;
  total_size += 1 * this->achievementachievementreward_list_size();
  for (int i = 0; i < this->achievementachievementreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementachievementreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_achievementachievementreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_achievementachievementreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_achievementachievementreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_achievementachievementreward::MergeFrom(const Sheet_achievementachievementreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievementachievementreward_list_.MergeFrom(from.achievementachievementreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_achievementachievementreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_achievementachievementreward::CopyFrom(const Sheet_achievementachievementreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_achievementachievementreward::IsInitialized() const {

  return true;
}

void Sheet_achievementachievementreward::Swap(Sheet_achievementachievementreward* other) {
  if (other != this) {
    achievementachievementreward_list_.Swap(&other->achievementachievementreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_achievementachievementreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_achievementachievementreward_descriptor_;
  metadata.reflection = Sheet_achievementachievementreward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
