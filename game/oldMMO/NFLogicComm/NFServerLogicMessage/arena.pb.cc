// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arena.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "arena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_ArenaRobotAttrDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaRobotAttrDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ArenaRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ArenaRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaRobotfacadeFacadeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaRobotfacadeFacadeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaRobotfacade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaRobotfacade_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ArenaRobotfacade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ArenaRobotfacade_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaArenawardRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaArenawardRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaArenaward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaArenaward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ArenaArenaward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ArenaArenaward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaRankawardRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaRankawardRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaRankaward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaRankaward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ArenaRankaward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ArenaRankaward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaFirstrankRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaFirstrankRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaFirstrank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaFirstrank_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ArenaFirstrank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ArenaFirstrank_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ArenaBuychallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ArenaBuychallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ArenaBuychallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ArenaBuychallenge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_arena_2eproto() {
  protobuf_AddDesc_arena_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "arena.proto");
  GOOGLE_CHECK(file != NULL);
  E_ArenaRobotAttrDesc_descriptor_ = file->message_type(0);
  static const int E_ArenaRobotAttrDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotAttrDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotAttrDesc, m_val_),
  };
  E_ArenaRobotAttrDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaRobotAttrDesc_descriptor_,
      E_ArenaRobotAttrDesc::default_instance_,
      E_ArenaRobotAttrDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotAttrDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotAttrDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaRobotAttrDesc));
  E_ArenaRobot_descriptor_ = file->message_type(1);
  static const int E_ArenaRobot_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_arenaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_robotname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_aiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_robotprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_robotlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_sword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_facadeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_occupationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, m_attr_),
  };
  E_ArenaRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaRobot_descriptor_,
      E_ArenaRobot::default_instance_,
      E_ArenaRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaRobot));
  Sheet_ArenaRobot_descriptor_ = file->message_type(2);
  static const int Sheet_ArenaRobot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRobot, e_arenarobot_list_),
  };
  Sheet_ArenaRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ArenaRobot_descriptor_,
      Sheet_ArenaRobot::default_instance_,
      Sheet_ArenaRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ArenaRobot));
  E_ArenaRobotfacadeFacadeDesc_descriptor_ = file->message_type(3);
  static const int E_ArenaRobotfacadeFacadeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacadeFacadeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacadeFacadeDesc, m_value_),
  };
  E_ArenaRobotfacadeFacadeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaRobotfacadeFacadeDesc_descriptor_,
      E_ArenaRobotfacadeFacadeDesc::default_instance_,
      E_ArenaRobotfacadeFacadeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacadeFacadeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacadeFacadeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaRobotfacadeFacadeDesc));
  E_ArenaRobotfacade_descriptor_ = file->message_type(4);
  static const int E_ArenaRobotfacade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacade, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacade, m_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacade, m_facade_),
  };
  E_ArenaRobotfacade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaRobotfacade_descriptor_,
      E_ArenaRobotfacade::default_instance_,
      E_ArenaRobotfacade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRobotfacade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaRobotfacade));
  Sheet_ArenaRobotfacade_descriptor_ = file->message_type(5);
  static const int Sheet_ArenaRobotfacade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRobotfacade, e_arenarobotfacade_list_),
  };
  Sheet_ArenaRobotfacade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ArenaRobotfacade_descriptor_,
      Sheet_ArenaRobotfacade::default_instance_,
      Sheet_ArenaRobotfacade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRobotfacade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRobotfacade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ArenaRobotfacade));
  E_ArenaArenawardRewardDesc_descriptor_ = file->message_type(6);
  static const int E_ArenaArenawardRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenawardRewardDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenawardRewardDesc, m_value_),
  };
  E_ArenaArenawardRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaArenawardRewardDesc_descriptor_,
      E_ArenaArenawardRewardDesc::default_instance_,
      E_ArenaArenawardRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenawardRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenawardRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaArenawardRewardDesc));
  E_ArenaArenaward_descriptor_ = file->message_type(7);
  static const int E_ArenaArenaward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenaward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenaward, m_lvdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenaward, m_lvup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenaward, m_reward_),
  };
  E_ArenaArenaward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaArenaward_descriptor_,
      E_ArenaArenaward::default_instance_,
      E_ArenaArenaward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenaward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaArenaward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaArenaward));
  Sheet_ArenaArenaward_descriptor_ = file->message_type(8);
  static const int Sheet_ArenaArenaward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaArenaward, e_arenaarenaward_list_),
  };
  Sheet_ArenaArenaward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ArenaArenaward_descriptor_,
      Sheet_ArenaArenaward::default_instance_,
      Sheet_ArenaArenaward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaArenaward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaArenaward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ArenaArenaward));
  E_ArenaRankawardRewardDesc_descriptor_ = file->message_type(9);
  static const int E_ArenaRankawardRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankawardRewardDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankawardRewardDesc, m_value_),
  };
  E_ArenaRankawardRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaRankawardRewardDesc_descriptor_,
      E_ArenaRankawardRewardDesc::default_instance_,
      E_ArenaRankawardRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankawardRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankawardRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaRankawardRewardDesc));
  E_ArenaRankaward_descriptor_ = file->message_type(10);
  static const int E_ArenaRankaward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankaward, m_prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankaward, m_arenadown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankaward, m_arenaup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankaward, m_reward_),
  };
  E_ArenaRankaward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaRankaward_descriptor_,
      E_ArenaRankaward::default_instance_,
      E_ArenaRankaward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankaward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaRankaward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaRankaward));
  Sheet_ArenaRankaward_descriptor_ = file->message_type(11);
  static const int Sheet_ArenaRankaward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRankaward, e_arenarankaward_list_),
  };
  Sheet_ArenaRankaward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ArenaRankaward_descriptor_,
      Sheet_ArenaRankaward::default_instance_,
      Sheet_ArenaRankaward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRankaward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaRankaward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ArenaRankaward));
  E_ArenaFirstrankRewardDesc_descriptor_ = file->message_type(12);
  static const int E_ArenaFirstrankRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrankRewardDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrankRewardDesc, m_value_),
  };
  E_ArenaFirstrankRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaFirstrankRewardDesc_descriptor_,
      E_ArenaFirstrankRewardDesc::default_instance_,
      E_ArenaFirstrankRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrankRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrankRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaFirstrankRewardDesc));
  E_ArenaFirstrank_descriptor_ = file->message_type(13);
  static const int E_ArenaFirstrank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrank, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrank, m_rankdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrank, m_rankup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrank, m_reward_),
  };
  E_ArenaFirstrank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaFirstrank_descriptor_,
      E_ArenaFirstrank::default_instance_,
      E_ArenaFirstrank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaFirstrank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaFirstrank));
  Sheet_ArenaFirstrank_descriptor_ = file->message_type(14);
  static const int Sheet_ArenaFirstrank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaFirstrank, e_arenafirstrank_list_),
  };
  Sheet_ArenaFirstrank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ArenaFirstrank_descriptor_,
      Sheet_ArenaFirstrank::default_instance_,
      Sheet_ArenaFirstrank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaFirstrank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaFirstrank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ArenaFirstrank));
  E_ArenaBuychallenge_descriptor_ = file->message_type(15);
  static const int E_ArenaBuychallenge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaBuychallenge, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaBuychallenge, m_costtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaBuychallenge, m_cost_),
  };
  E_ArenaBuychallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ArenaBuychallenge_descriptor_,
      E_ArenaBuychallenge::default_instance_,
      E_ArenaBuychallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaBuychallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ArenaBuychallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ArenaBuychallenge));
  Sheet_ArenaBuychallenge_descriptor_ = file->message_type(16);
  static const int Sheet_ArenaBuychallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaBuychallenge, e_arenabuychallenge_list_),
  };
  Sheet_ArenaBuychallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ArenaBuychallenge_descriptor_,
      Sheet_ArenaBuychallenge::default_instance_,
      Sheet_ArenaBuychallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaBuychallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ArenaBuychallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ArenaBuychallenge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_arena_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaRobotAttrDesc_descriptor_, &E_ArenaRobotAttrDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaRobot_descriptor_, &E_ArenaRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ArenaRobot_descriptor_, &Sheet_ArenaRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaRobotfacadeFacadeDesc_descriptor_, &E_ArenaRobotfacadeFacadeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaRobotfacade_descriptor_, &E_ArenaRobotfacade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ArenaRobotfacade_descriptor_, &Sheet_ArenaRobotfacade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaArenawardRewardDesc_descriptor_, &E_ArenaArenawardRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaArenaward_descriptor_, &E_ArenaArenaward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ArenaArenaward_descriptor_, &Sheet_ArenaArenaward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaRankawardRewardDesc_descriptor_, &E_ArenaRankawardRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaRankaward_descriptor_, &E_ArenaRankaward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ArenaRankaward_descriptor_, &Sheet_ArenaRankaward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaFirstrankRewardDesc_descriptor_, &E_ArenaFirstrankRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaFirstrank_descriptor_, &E_ArenaFirstrank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ArenaFirstrank_descriptor_, &Sheet_ArenaFirstrank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ArenaBuychallenge_descriptor_, &E_ArenaBuychallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ArenaBuychallenge_descriptor_, &Sheet_ArenaBuychallenge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_arena_2eproto() {
  delete E_ArenaRobotAttrDesc::default_instance_;
  delete E_ArenaRobotAttrDesc_reflection_;
  delete E_ArenaRobot::default_instance_;
  delete E_ArenaRobot_reflection_;
  delete Sheet_ArenaRobot::default_instance_;
  delete Sheet_ArenaRobot_reflection_;
  delete E_ArenaRobotfacadeFacadeDesc::default_instance_;
  delete E_ArenaRobotfacadeFacadeDesc_reflection_;
  delete E_ArenaRobotfacade::default_instance_;
  delete E_ArenaRobotfacade_reflection_;
  delete Sheet_ArenaRobotfacade::default_instance_;
  delete Sheet_ArenaRobotfacade_reflection_;
  delete E_ArenaArenawardRewardDesc::default_instance_;
  delete E_ArenaArenawardRewardDesc_reflection_;
  delete E_ArenaArenaward::default_instance_;
  delete E_ArenaArenaward_reflection_;
  delete Sheet_ArenaArenaward::default_instance_;
  delete Sheet_ArenaArenaward_reflection_;
  delete E_ArenaRankawardRewardDesc::default_instance_;
  delete E_ArenaRankawardRewardDesc_reflection_;
  delete E_ArenaRankaward::default_instance_;
  delete E_ArenaRankaward_reflection_;
  delete Sheet_ArenaRankaward::default_instance_;
  delete Sheet_ArenaRankaward_reflection_;
  delete E_ArenaFirstrankRewardDesc::default_instance_;
  delete E_ArenaFirstrankRewardDesc_reflection_;
  delete E_ArenaFirstrank::default_instance_;
  delete E_ArenaFirstrank_reflection_;
  delete Sheet_ArenaFirstrank::default_instance_;
  delete Sheet_ArenaFirstrank_reflection_;
  delete E_ArenaBuychallenge::default_instance_;
  delete E_ArenaBuychallenge_reflection_;
  delete Sheet_ArenaBuychallenge::default_instance_;
  delete Sheet_ArenaBuychallenge_reflection_;
}

void protobuf_AddDesc_arena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013arena.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"J\n\024E_ArenaRobotAttrDesc\022\032\n\006m_type"
    "\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005m_val\030\002 \001(\005B\007\302\377\024\003\345"
    "\200\274\"\235\003\n\014E_ArenaRobot\022(\n\tm_arenaid\030\001 \001(\005B\025"
    "\302\377\024\021\347\253\236\346\212\200\345\234\272\346\216\222\345\220\215ID\022,\n\013m_robotname\030\002 \001"
    "(\tB\027\302\377\024\017\346\234\272\345\231\250\344\272\272\345\220\215\347\247\260\220\301\024<\022\030\n\006m_aiid\030\003 "
    "\001(\005B\010\302\377\024\004aiID\022\036\n\010m_rankid\030\004 \001(\005B\014\302\377\024\010\346\216\222"
    "\345\220\215id\022.\n\021m_robotprofession\030\005 \001(\005B\023\302\377\024\017\346\234"
    "\272\345\231\250\344\272\272\350\201\214\344\270\232\022&\n\tm_robotlv\030\006 \001(\005B\023\302\377\024\017\346\234"
    "\272\345\231\250\344\272\272\347\255\211\347\272\247\022\033\n\007m_sword\030\007 \001(\005B\n\302\377\024\006\346\210\230\345"
    "\212\233\022 \n\nm_facadeid\030\010 \001(\005B\014\302\377\024\010\345\244\226\350\247\202ID\022$\n\016"
    "m_occupationid\030\t \001(\005B\014\302\377\024\010\350\275\254\350\201\214ID\022>\n\006m_"
    "attr\030\n \003(\0132\036.proto_ff.E_ArenaRobotAttrDe"
    "scB\016\302\377\024\006\345\261\236\346\200\247\210\301\024F\"L\n\020Sheet_ArenaRobot\0228"
    "\n\021E_ArenaRobot_List\030\001 \003(\0132\026.proto_ff.E_A"
    "renaRobotB\005\210\301\024\360.\"T\n\034E_ArenaRobotfacadeFa"
    "cadeDesc\022\032\n\006m_type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\030\n\007"
    "m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\227\001\n\022E_ArenaRobotf"
    "acade\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022!\n\007m_color\030\002"
    " \001(\005B\020\302\377\024\014\345\210\233\345\273\272\351\242\234\350\211\262\022H\n\010m_facade\030\003 \003(\013"
    "2&.proto_ff.E_ArenaRobotfacadeFacadeDesc"
    "B\016\302\377\024\006\345\244\226\350\247\202\210\301\024\021\"]\n\026Sheet_ArenaRobotfaca"
    "de\022C\n\027E_ArenaRobotfacade_List\030\001 \003(\0132\034.pr"
    "oto_ff.E_ArenaRobotfacadeB\004\210\301\024\024\"O\n\032E_Are"
    "naArenawardRewardDesc\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002ID\022\033\n\007m_value\030\002 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\"\274\001\n\020E_A"
    "renaArenaward\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\010m"
    "_lvdown\030\002 \001(\005B\020\302\377\024\014\344\270\213\351\231\220\347\255\211\347\272\247\022 \n\006m_lvu"
    "p\030\003 \001(\005B\020\302\377\024\014\344\270\212\351\231\220\347\255\211\347\272\247\022L\n\010m_reward\030\004 "
    "\003(\0132$.proto_ff.E_ArenaArenawardRewardDes"
    "cB\024\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\210\301\024\005\"X\n\024Sheet_ArenaAr"
    "enaward\022@\n\025E_ArenaArenaward_List\030\001 \003(\0132\032"
    ".proto_ff.E_ArenaArenawardB\005\210\301\024\320\017\"O\n\032E_A"
    "renaRankawardRewardDesc\022\024\n\004m_id\030\001 \001(\005B\006\302"
    "\377\024\002ID\022\033\n\007m_value\030\002 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\"\315\001\n\020E"
    "_ArenaRankaward\022\037\n\tm_prizeid\030\001 \001(\005B\014\302\377\024\010"
    "\345\245\226\345\212\261ID\022%\n\013m_arenadown\030\002 \001(\005B\020\302\377\024\014\344\270\213\351\231"
    "\220\346\216\222\345\220\215\022#\n\tm_arenaup\030\003 \001(\005B\020\302\377\024\014\344\270\212\351\231\220\346\216"
    "\222\345\220\215\022L\n\010m_reward\030\004 \003(\0132$.proto_ff.E_Aren"
    "aRankawardRewardDescB\024\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\210\301"
    "\024\005\"W\n\024Sheet_ArenaRankaward\022\?\n\025E_ArenaRan"
    "kaward_List\030\001 \003(\0132\032.proto_ff.E_ArenaRank"
    "awardB\004\210\301\024\024\"O\n\032E_ArenaFirstrankRewardDes"
    "c\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002ID\022\033\n\007m_value\030\002 \001(\005"
    "B\n\302\377\024\006\346\225\260\351\207\217\"\300\001\n\020E_ArenaFirstrank\022\024\n\004m_i"
    "d\030\001 \001(\005B\006\302\377\024\002id\022$\n\nm_rankdown\030\002 \001(\005B\020\302\377\024"
    "\014\344\270\213\351\231\220\346\216\222\345\220\215\022\"\n\010m_rankup\030\003 \001(\005B\020\302\377\024\014\344\270\212"
    "\351\231\220\346\216\222\345\220\215\022L\n\010m_reward\030\004 \003(\0132$.proto_ff.E"
    "_ArenaFirstrankRewardDescB\024\302\377\024\014\345\245\226\345\212\261\347\211\251"
    "\345\223\201\210\301\024\005\"W\n\024Sheet_ArenaFirstrank\022\?\n\025E_Are"
    "naFirstrank_List\030\001 \003(\0132\032.proto_ff.E_Aren"
    "aFirstrankB\004\210\301\024\024\"z\n\023E_ArenaBuychallenge\022"
    "!\n\007m_count\030\001 \001(\005B\020\302\377\024\014\350\264\255\344\271\260\350\256\241\346\254\241\022$\n\nm_"
    "costtype\030\002 \001(\005B\020\302\377\024\014\350\212\261\350\264\271\347\261\273\345\236\213\022\032\n\006m_co"
    "st\030\003 \001(\005B\n\302\377\024\006\350\212\261\350\264\271\"`\n\027Sheet_ArenaBuych"
    "allenge\022E\n\030E_ArenaBuychallenge_List\030\001 \003("
    "\0132\035.proto_ff.E_ArenaBuychallengeB\004\210\301\024\024", 2278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "arena.proto", &protobuf_RegisterTypes);
  E_ArenaRobotAttrDesc::default_instance_ = new E_ArenaRobotAttrDesc();
  E_ArenaRobot::default_instance_ = new E_ArenaRobot();
  Sheet_ArenaRobot::default_instance_ = new Sheet_ArenaRobot();
  E_ArenaRobotfacadeFacadeDesc::default_instance_ = new E_ArenaRobotfacadeFacadeDesc();
  E_ArenaRobotfacade::default_instance_ = new E_ArenaRobotfacade();
  Sheet_ArenaRobotfacade::default_instance_ = new Sheet_ArenaRobotfacade();
  E_ArenaArenawardRewardDesc::default_instance_ = new E_ArenaArenawardRewardDesc();
  E_ArenaArenaward::default_instance_ = new E_ArenaArenaward();
  Sheet_ArenaArenaward::default_instance_ = new Sheet_ArenaArenaward();
  E_ArenaRankawardRewardDesc::default_instance_ = new E_ArenaRankawardRewardDesc();
  E_ArenaRankaward::default_instance_ = new E_ArenaRankaward();
  Sheet_ArenaRankaward::default_instance_ = new Sheet_ArenaRankaward();
  E_ArenaFirstrankRewardDesc::default_instance_ = new E_ArenaFirstrankRewardDesc();
  E_ArenaFirstrank::default_instance_ = new E_ArenaFirstrank();
  Sheet_ArenaFirstrank::default_instance_ = new Sheet_ArenaFirstrank();
  E_ArenaBuychallenge::default_instance_ = new E_ArenaBuychallenge();
  Sheet_ArenaBuychallenge::default_instance_ = new Sheet_ArenaBuychallenge();
  E_ArenaRobotAttrDesc::default_instance_->InitAsDefaultInstance();
  E_ArenaRobot::default_instance_->InitAsDefaultInstance();
  Sheet_ArenaRobot::default_instance_->InitAsDefaultInstance();
  E_ArenaRobotfacadeFacadeDesc::default_instance_->InitAsDefaultInstance();
  E_ArenaRobotfacade::default_instance_->InitAsDefaultInstance();
  Sheet_ArenaRobotfacade::default_instance_->InitAsDefaultInstance();
  E_ArenaArenawardRewardDesc::default_instance_->InitAsDefaultInstance();
  E_ArenaArenaward::default_instance_->InitAsDefaultInstance();
  Sheet_ArenaArenaward::default_instance_->InitAsDefaultInstance();
  E_ArenaRankawardRewardDesc::default_instance_->InitAsDefaultInstance();
  E_ArenaRankaward::default_instance_->InitAsDefaultInstance();
  Sheet_ArenaRankaward::default_instance_->InitAsDefaultInstance();
  E_ArenaFirstrankRewardDesc::default_instance_->InitAsDefaultInstance();
  E_ArenaFirstrank::default_instance_->InitAsDefaultInstance();
  Sheet_ArenaFirstrank::default_instance_->InitAsDefaultInstance();
  E_ArenaBuychallenge::default_instance_->InitAsDefaultInstance();
  Sheet_ArenaBuychallenge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_arena_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_arena_2eproto {
  StaticDescriptorInitializer_arena_2eproto() {
    protobuf_AddDesc_arena_2eproto();
  }
} static_descriptor_initializer_arena_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_ArenaRobotAttrDesc::kMTypeFieldNumber;
const int E_ArenaRobotAttrDesc::kMValFieldNumber;
#endif  // !_MSC_VER

E_ArenaRobotAttrDesc::E_ArenaRobotAttrDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaRobotAttrDesc::InitAsDefaultInstance() {
}

E_ArenaRobotAttrDesc::E_ArenaRobotAttrDesc(const E_ArenaRobotAttrDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaRobotAttrDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaRobotAttrDesc::~E_ArenaRobotAttrDesc() {
  SharedDtor();
}

void E_ArenaRobotAttrDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaRobotAttrDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaRobotAttrDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaRobotAttrDesc_descriptor_;
}

const E_ArenaRobotAttrDesc& E_ArenaRobotAttrDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaRobotAttrDesc* E_ArenaRobotAttrDesc::default_instance_ = NULL;

E_ArenaRobotAttrDesc* E_ArenaRobotAttrDesc::New() const {
  return new E_ArenaRobotAttrDesc;
}

void E_ArenaRobotAttrDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaRobotAttrDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_val;
        break;
      }

      // optional int32 m_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_val_)));
          set_has_m_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaRobotAttrDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_val = 2;
  if (has_m_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaRobotAttrDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_val = 2;
  if (has_m_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaRobotAttrDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_val = 2;
    if (has_m_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaRobotAttrDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaRobotAttrDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaRobotAttrDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaRobotAttrDesc::MergeFrom(const E_ArenaRobotAttrDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_val()) {
      set_m_val(from.m_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaRobotAttrDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaRobotAttrDesc::CopyFrom(const E_ArenaRobotAttrDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaRobotAttrDesc::IsInitialized() const {

  return true;
}

void E_ArenaRobotAttrDesc::Swap(E_ArenaRobotAttrDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_val_, other->m_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaRobotAttrDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaRobotAttrDesc_descriptor_;
  metadata.reflection = E_ArenaRobotAttrDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaRobot::kMArenaidFieldNumber;
const int E_ArenaRobot::kMRobotnameFieldNumber;
const int E_ArenaRobot::kMAiidFieldNumber;
const int E_ArenaRobot::kMRankidFieldNumber;
const int E_ArenaRobot::kMRobotprofessionFieldNumber;
const int E_ArenaRobot::kMRobotlvFieldNumber;
const int E_ArenaRobot::kMSwordFieldNumber;
const int E_ArenaRobot::kMFacadeidFieldNumber;
const int E_ArenaRobot::kMOccupationidFieldNumber;
const int E_ArenaRobot::kMAttrFieldNumber;
#endif  // !_MSC_VER

E_ArenaRobot::E_ArenaRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaRobot::InitAsDefaultInstance() {
}

E_ArenaRobot::E_ArenaRobot(const E_ArenaRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaRobot::SharedCtor() {
  _cached_size_ = 0;
  m_arenaid_ = 0;
  m_robotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_aiid_ = 0;
  m_rankid_ = 0;
  m_robotprofession_ = 0;
  m_robotlv_ = 0;
  m_sword_ = 0;
  m_facadeid_ = 0;
  m_occupationid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaRobot::~E_ArenaRobot() {
  SharedDtor();
}

void E_ArenaRobot::SharedDtor() {
  if (m_robotname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_robotname_;
  }
  if (this != default_instance_) {
  }
}

void E_ArenaRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaRobot_descriptor_;
}

const E_ArenaRobot& E_ArenaRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaRobot* E_ArenaRobot::default_instance_ = NULL;

E_ArenaRobot* E_ArenaRobot::New() const {
  return new E_ArenaRobot;
}

void E_ArenaRobot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_arenaid_ = 0;
    if (has_m_robotname()) {
      if (m_robotname_ != &::google::protobuf::internal::kEmptyString) {
        m_robotname_->clear();
      }
    }
    m_aiid_ = 0;
    m_rankid_ = 0;
    m_robotprofession_ = 0;
    m_robotlv_ = 0;
    m_sword_ = 0;
    m_facadeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_occupationid_ = 0;
  }
  m_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_arenaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_arenaid_)));
          set_has_m_arenaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_robotname;
        break;
      }

      // optional string m_robotname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_robotname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_robotname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_robotname().data(), this->m_robotname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_aiid;
        break;
      }

      // optional int32 m_aiid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_aiid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_aiid_)));
          set_has_m_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rankid;
        break;
      }

      // optional int32 m_rankid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankid_)));
          set_has_m_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_robotprofession;
        break;
      }

      // optional int32 m_robotprofession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_robotprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_robotprofession_)));
          set_has_m_robotprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_robotlv;
        break;
      }

      // optional int32 m_robotlv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_robotlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_robotlv_)));
          set_has_m_robotlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_sword;
        break;
      }

      // optional int32 m_sword = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sword_)));
          set_has_m_sword();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_facadeid;
        break;
      }

      // optional int32 m_facadeid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_facadeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_facadeid_)));
          set_has_m_facadeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_occupationid;
        break;
      }

      // optional int32 m_occupationid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_occupationid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_occupationid_)));
          set_has_m_occupationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_attr;
        break;
      }

      // repeated .proto_ff.E_ArenaRobotAttrDesc m_attr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_arenaid = 1;
  if (has_m_arenaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_arenaid(), output);
  }

  // optional string m_robotname = 2;
  if (has_m_robotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_robotname().data(), this->m_robotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_robotname(), output);
  }

  // optional int32 m_aiid = 3;
  if (has_m_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_aiid(), output);
  }

  // optional int32 m_rankid = 4;
  if (has_m_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rankid(), output);
  }

  // optional int32 m_robotprofession = 5;
  if (has_m_robotprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_robotprofession(), output);
  }

  // optional int32 m_robotlv = 6;
  if (has_m_robotlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_robotlv(), output);
  }

  // optional int32 m_sword = 7;
  if (has_m_sword()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_sword(), output);
  }

  // optional int32 m_facadeid = 8;
  if (has_m_facadeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_facadeid(), output);
  }

  // optional int32 m_occupationid = 9;
  if (has_m_occupationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_occupationid(), output);
  }

  // repeated .proto_ff.E_ArenaRobotAttrDesc m_attr = 10;
  for (int i = 0; i < this->m_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_arenaid = 1;
  if (has_m_arenaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_arenaid(), target);
  }

  // optional string m_robotname = 2;
  if (has_m_robotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_robotname().data(), this->m_robotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_robotname(), target);
  }

  // optional int32 m_aiid = 3;
  if (has_m_aiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_aiid(), target);
  }

  // optional int32 m_rankid = 4;
  if (has_m_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rankid(), target);
  }

  // optional int32 m_robotprofession = 5;
  if (has_m_robotprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_robotprofession(), target);
  }

  // optional int32 m_robotlv = 6;
  if (has_m_robotlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_robotlv(), target);
  }

  // optional int32 m_sword = 7;
  if (has_m_sword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_sword(), target);
  }

  // optional int32 m_facadeid = 8;
  if (has_m_facadeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_facadeid(), target);
  }

  // optional int32 m_occupationid = 9;
  if (has_m_occupationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_occupationid(), target);
  }

  // repeated .proto_ff.E_ArenaRobotAttrDesc m_attr = 10;
  for (int i = 0; i < this->m_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaRobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_arenaid = 1;
    if (has_m_arenaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_arenaid());
    }

    // optional string m_robotname = 2;
    if (has_m_robotname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_robotname());
    }

    // optional int32 m_aiid = 3;
    if (has_m_aiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_aiid());
    }

    // optional int32 m_rankid = 4;
    if (has_m_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankid());
    }

    // optional int32 m_robotprofession = 5;
    if (has_m_robotprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_robotprofession());
    }

    // optional int32 m_robotlv = 6;
    if (has_m_robotlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_robotlv());
    }

    // optional int32 m_sword = 7;
    if (has_m_sword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sword());
    }

    // optional int32 m_facadeid = 8;
    if (has_m_facadeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_facadeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_occupationid = 9;
    if (has_m_occupationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_occupationid());
    }

  }
  // repeated .proto_ff.E_ArenaRobotAttrDesc m_attr = 10;
  total_size += 1 * this->m_attr_size();
  for (int i = 0; i < this->m_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaRobot::MergeFrom(const E_ArenaRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attr_.MergeFrom(from.m_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_arenaid()) {
      set_m_arenaid(from.m_arenaid());
    }
    if (from.has_m_robotname()) {
      set_m_robotname(from.m_robotname());
    }
    if (from.has_m_aiid()) {
      set_m_aiid(from.m_aiid());
    }
    if (from.has_m_rankid()) {
      set_m_rankid(from.m_rankid());
    }
    if (from.has_m_robotprofession()) {
      set_m_robotprofession(from.m_robotprofession());
    }
    if (from.has_m_robotlv()) {
      set_m_robotlv(from.m_robotlv());
    }
    if (from.has_m_sword()) {
      set_m_sword(from.m_sword());
    }
    if (from.has_m_facadeid()) {
      set_m_facadeid(from.m_facadeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_occupationid()) {
      set_m_occupationid(from.m_occupationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaRobot::CopyFrom(const E_ArenaRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaRobot::IsInitialized() const {

  return true;
}

void E_ArenaRobot::Swap(E_ArenaRobot* other) {
  if (other != this) {
    std::swap(m_arenaid_, other->m_arenaid_);
    std::swap(m_robotname_, other->m_robotname_);
    std::swap(m_aiid_, other->m_aiid_);
    std::swap(m_rankid_, other->m_rankid_);
    std::swap(m_robotprofession_, other->m_robotprofession_);
    std::swap(m_robotlv_, other->m_robotlv_);
    std::swap(m_sword_, other->m_sword_);
    std::swap(m_facadeid_, other->m_facadeid_);
    std::swap(m_occupationid_, other->m_occupationid_);
    m_attr_.Swap(&other->m_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaRobot_descriptor_;
  metadata.reflection = E_ArenaRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ArenaRobot::kEArenaRobotListFieldNumber;
#endif  // !_MSC_VER

Sheet_ArenaRobot::Sheet_ArenaRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ArenaRobot::InitAsDefaultInstance() {
}

Sheet_ArenaRobot::Sheet_ArenaRobot(const Sheet_ArenaRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ArenaRobot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ArenaRobot::~Sheet_ArenaRobot() {
  SharedDtor();
}

void Sheet_ArenaRobot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ArenaRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ArenaRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ArenaRobot_descriptor_;
}

const Sheet_ArenaRobot& Sheet_ArenaRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_ArenaRobot* Sheet_ArenaRobot::default_instance_ = NULL;

Sheet_ArenaRobot* Sheet_ArenaRobot::New() const {
  return new Sheet_ArenaRobot;
}

void Sheet_ArenaRobot::Clear() {
  e_arenarobot_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ArenaRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ArenaRobot E_ArenaRobot_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ArenaRobot_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_arenarobot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ArenaRobot_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ArenaRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ArenaRobot E_ArenaRobot_List = 1;
  for (int i = 0; i < this->e_arenarobot_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_arenarobot_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ArenaRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ArenaRobot E_ArenaRobot_List = 1;
  for (int i = 0; i < this->e_arenarobot_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_arenarobot_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ArenaRobot::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ArenaRobot E_ArenaRobot_List = 1;
  total_size += 1 * this->e_arenarobot_list_size();
  for (int i = 0; i < this->e_arenarobot_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_arenarobot_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ArenaRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ArenaRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ArenaRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ArenaRobot::MergeFrom(const Sheet_ArenaRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_arenarobot_list_.MergeFrom(from.e_arenarobot_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ArenaRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ArenaRobot::CopyFrom(const Sheet_ArenaRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ArenaRobot::IsInitialized() const {

  return true;
}

void Sheet_ArenaRobot::Swap(Sheet_ArenaRobot* other) {
  if (other != this) {
    e_arenarobot_list_.Swap(&other->e_arenarobot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ArenaRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ArenaRobot_descriptor_;
  metadata.reflection = Sheet_ArenaRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaRobotfacadeFacadeDesc::kMTypeFieldNumber;
const int E_ArenaRobotfacadeFacadeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_ArenaRobotfacadeFacadeDesc::E_ArenaRobotfacadeFacadeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaRobotfacadeFacadeDesc::InitAsDefaultInstance() {
}

E_ArenaRobotfacadeFacadeDesc::E_ArenaRobotfacadeFacadeDesc(const E_ArenaRobotfacadeFacadeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaRobotfacadeFacadeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaRobotfacadeFacadeDesc::~E_ArenaRobotfacadeFacadeDesc() {
  SharedDtor();
}

void E_ArenaRobotfacadeFacadeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaRobotfacadeFacadeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaRobotfacadeFacadeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaRobotfacadeFacadeDesc_descriptor_;
}

const E_ArenaRobotfacadeFacadeDesc& E_ArenaRobotfacadeFacadeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaRobotfacadeFacadeDesc* E_ArenaRobotfacadeFacadeDesc::default_instance_ = NULL;

E_ArenaRobotfacadeFacadeDesc* E_ArenaRobotfacadeFacadeDesc::New() const {
  return new E_ArenaRobotfacadeFacadeDesc;
}

void E_ArenaRobotfacadeFacadeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaRobotfacadeFacadeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaRobotfacadeFacadeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaRobotfacadeFacadeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaRobotfacadeFacadeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaRobotfacadeFacadeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaRobotfacadeFacadeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaRobotfacadeFacadeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaRobotfacadeFacadeDesc::MergeFrom(const E_ArenaRobotfacadeFacadeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaRobotfacadeFacadeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaRobotfacadeFacadeDesc::CopyFrom(const E_ArenaRobotfacadeFacadeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaRobotfacadeFacadeDesc::IsInitialized() const {

  return true;
}

void E_ArenaRobotfacadeFacadeDesc::Swap(E_ArenaRobotfacadeFacadeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaRobotfacadeFacadeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaRobotfacadeFacadeDesc_descriptor_;
  metadata.reflection = E_ArenaRobotfacadeFacadeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaRobotfacade::kMIdFieldNumber;
const int E_ArenaRobotfacade::kMColorFieldNumber;
const int E_ArenaRobotfacade::kMFacadeFieldNumber;
#endif  // !_MSC_VER

E_ArenaRobotfacade::E_ArenaRobotfacade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaRobotfacade::InitAsDefaultInstance() {
}

E_ArenaRobotfacade::E_ArenaRobotfacade(const E_ArenaRobotfacade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaRobotfacade::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaRobotfacade::~E_ArenaRobotfacade() {
  SharedDtor();
}

void E_ArenaRobotfacade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaRobotfacade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaRobotfacade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaRobotfacade_descriptor_;
}

const E_ArenaRobotfacade& E_ArenaRobotfacade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaRobotfacade* E_ArenaRobotfacade::default_instance_ = NULL;

E_ArenaRobotfacade* E_ArenaRobotfacade::New() const {
  return new E_ArenaRobotfacade;
}

void E_ArenaRobotfacade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_color_ = 0;
  }
  m_facade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaRobotfacade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_color;
        break;
      }

      // optional int32 m_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_color_)));
          set_has_m_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_facade;
        break;
      }

      // repeated .proto_ff.E_ArenaRobotfacadeFacadeDesc m_facade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_facade;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaRobotfacade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_color = 2;
  if (has_m_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_color(), output);
  }

  // repeated .proto_ff.E_ArenaRobotfacadeFacadeDesc m_facade = 3;
  for (int i = 0; i < this->m_facade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_facade(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaRobotfacade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_color = 2;
  if (has_m_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_color(), target);
  }

  // repeated .proto_ff.E_ArenaRobotfacadeFacadeDesc m_facade = 3;
  for (int i = 0; i < this->m_facade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_facade(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaRobotfacade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_color = 2;
    if (has_m_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_color());
    }

  }
  // repeated .proto_ff.E_ArenaRobotfacadeFacadeDesc m_facade = 3;
  total_size += 1 * this->m_facade_size();
  for (int i = 0; i < this->m_facade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_facade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaRobotfacade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaRobotfacade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaRobotfacade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaRobotfacade::MergeFrom(const E_ArenaRobotfacade& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_facade_.MergeFrom(from.m_facade_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_color()) {
      set_m_color(from.m_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaRobotfacade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaRobotfacade::CopyFrom(const E_ArenaRobotfacade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaRobotfacade::IsInitialized() const {

  return true;
}

void E_ArenaRobotfacade::Swap(E_ArenaRobotfacade* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_color_, other->m_color_);
    m_facade_.Swap(&other->m_facade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaRobotfacade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaRobotfacade_descriptor_;
  metadata.reflection = E_ArenaRobotfacade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ArenaRobotfacade::kEArenaRobotfacadeListFieldNumber;
#endif  // !_MSC_VER

Sheet_ArenaRobotfacade::Sheet_ArenaRobotfacade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ArenaRobotfacade::InitAsDefaultInstance() {
}

Sheet_ArenaRobotfacade::Sheet_ArenaRobotfacade(const Sheet_ArenaRobotfacade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ArenaRobotfacade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ArenaRobotfacade::~Sheet_ArenaRobotfacade() {
  SharedDtor();
}

void Sheet_ArenaRobotfacade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ArenaRobotfacade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ArenaRobotfacade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ArenaRobotfacade_descriptor_;
}

const Sheet_ArenaRobotfacade& Sheet_ArenaRobotfacade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_ArenaRobotfacade* Sheet_ArenaRobotfacade::default_instance_ = NULL;

Sheet_ArenaRobotfacade* Sheet_ArenaRobotfacade::New() const {
  return new Sheet_ArenaRobotfacade;
}

void Sheet_ArenaRobotfacade::Clear() {
  e_arenarobotfacade_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ArenaRobotfacade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ArenaRobotfacade E_ArenaRobotfacade_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ArenaRobotfacade_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_arenarobotfacade_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ArenaRobotfacade_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ArenaRobotfacade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ArenaRobotfacade E_ArenaRobotfacade_List = 1;
  for (int i = 0; i < this->e_arenarobotfacade_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_arenarobotfacade_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ArenaRobotfacade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ArenaRobotfacade E_ArenaRobotfacade_List = 1;
  for (int i = 0; i < this->e_arenarobotfacade_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_arenarobotfacade_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ArenaRobotfacade::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ArenaRobotfacade E_ArenaRobotfacade_List = 1;
  total_size += 1 * this->e_arenarobotfacade_list_size();
  for (int i = 0; i < this->e_arenarobotfacade_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_arenarobotfacade_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ArenaRobotfacade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ArenaRobotfacade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ArenaRobotfacade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ArenaRobotfacade::MergeFrom(const Sheet_ArenaRobotfacade& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_arenarobotfacade_list_.MergeFrom(from.e_arenarobotfacade_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ArenaRobotfacade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ArenaRobotfacade::CopyFrom(const Sheet_ArenaRobotfacade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ArenaRobotfacade::IsInitialized() const {

  return true;
}

void Sheet_ArenaRobotfacade::Swap(Sheet_ArenaRobotfacade* other) {
  if (other != this) {
    e_arenarobotfacade_list_.Swap(&other->e_arenarobotfacade_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ArenaRobotfacade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ArenaRobotfacade_descriptor_;
  metadata.reflection = Sheet_ArenaRobotfacade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaArenawardRewardDesc::kMIdFieldNumber;
const int E_ArenaArenawardRewardDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_ArenaArenawardRewardDesc::E_ArenaArenawardRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaArenawardRewardDesc::InitAsDefaultInstance() {
}

E_ArenaArenawardRewardDesc::E_ArenaArenawardRewardDesc(const E_ArenaArenawardRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaArenawardRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaArenawardRewardDesc::~E_ArenaArenawardRewardDesc() {
  SharedDtor();
}

void E_ArenaArenawardRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaArenawardRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaArenawardRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaArenawardRewardDesc_descriptor_;
}

const E_ArenaArenawardRewardDesc& E_ArenaArenawardRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaArenawardRewardDesc* E_ArenaArenawardRewardDesc::default_instance_ = NULL;

E_ArenaArenawardRewardDesc* E_ArenaArenawardRewardDesc::New() const {
  return new E_ArenaArenawardRewardDesc;
}

void E_ArenaArenawardRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaArenawardRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaArenawardRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaArenawardRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaArenawardRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaArenawardRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaArenawardRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaArenawardRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaArenawardRewardDesc::MergeFrom(const E_ArenaArenawardRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaArenawardRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaArenawardRewardDesc::CopyFrom(const E_ArenaArenawardRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaArenawardRewardDesc::IsInitialized() const {

  return true;
}

void E_ArenaArenawardRewardDesc::Swap(E_ArenaArenawardRewardDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaArenawardRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaArenawardRewardDesc_descriptor_;
  metadata.reflection = E_ArenaArenawardRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaArenaward::kMIdFieldNumber;
const int E_ArenaArenaward::kMLvdownFieldNumber;
const int E_ArenaArenaward::kMLvupFieldNumber;
const int E_ArenaArenaward::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_ArenaArenaward::E_ArenaArenaward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaArenaward::InitAsDefaultInstance() {
}

E_ArenaArenaward::E_ArenaArenaward(const E_ArenaArenaward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaArenaward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lvdown_ = 0;
  m_lvup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaArenaward::~E_ArenaArenaward() {
  SharedDtor();
}

void E_ArenaArenaward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaArenaward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaArenaward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaArenaward_descriptor_;
}

const E_ArenaArenaward& E_ArenaArenaward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaArenaward* E_ArenaArenaward::default_instance_ = NULL;

E_ArenaArenaward* E_ArenaArenaward::New() const {
  return new E_ArenaArenaward;
}

void E_ArenaArenaward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lvdown_ = 0;
    m_lvup_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaArenaward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lvdown;
        break;
      }

      // optional int32 m_lvdown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvdown_)));
          set_has_m_lvdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lvup;
        break;
      }

      // optional int32 m_lvup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvup_)));
          set_has_m_lvup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_ArenaArenawardRewardDesc m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaArenaward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lvdown = 2;
  if (has_m_lvdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lvdown(), output);
  }

  // optional int32 m_lvup = 3;
  if (has_m_lvup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lvup(), output);
  }

  // repeated .proto_ff.E_ArenaArenawardRewardDesc m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaArenaward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lvdown = 2;
  if (has_m_lvdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lvdown(), target);
  }

  // optional int32 m_lvup = 3;
  if (has_m_lvup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lvup(), target);
  }

  // repeated .proto_ff.E_ArenaArenawardRewardDesc m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaArenaward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lvdown = 2;
    if (has_m_lvdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvdown());
    }

    // optional int32 m_lvup = 3;
    if (has_m_lvup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvup());
    }

  }
  // repeated .proto_ff.E_ArenaArenawardRewardDesc m_reward = 4;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaArenaward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaArenaward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaArenaward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaArenaward::MergeFrom(const E_ArenaArenaward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lvdown()) {
      set_m_lvdown(from.m_lvdown());
    }
    if (from.has_m_lvup()) {
      set_m_lvup(from.m_lvup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaArenaward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaArenaward::CopyFrom(const E_ArenaArenaward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaArenaward::IsInitialized() const {

  return true;
}

void E_ArenaArenaward::Swap(E_ArenaArenaward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lvdown_, other->m_lvdown_);
    std::swap(m_lvup_, other->m_lvup_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaArenaward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaArenaward_descriptor_;
  metadata.reflection = E_ArenaArenaward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ArenaArenaward::kEArenaArenawardListFieldNumber;
#endif  // !_MSC_VER

Sheet_ArenaArenaward::Sheet_ArenaArenaward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ArenaArenaward::InitAsDefaultInstance() {
}

Sheet_ArenaArenaward::Sheet_ArenaArenaward(const Sheet_ArenaArenaward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ArenaArenaward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ArenaArenaward::~Sheet_ArenaArenaward() {
  SharedDtor();
}

void Sheet_ArenaArenaward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ArenaArenaward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ArenaArenaward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ArenaArenaward_descriptor_;
}

const Sheet_ArenaArenaward& Sheet_ArenaArenaward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_ArenaArenaward* Sheet_ArenaArenaward::default_instance_ = NULL;

Sheet_ArenaArenaward* Sheet_ArenaArenaward::New() const {
  return new Sheet_ArenaArenaward;
}

void Sheet_ArenaArenaward::Clear() {
  e_arenaarenaward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ArenaArenaward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ArenaArenaward E_ArenaArenaward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ArenaArenaward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_arenaarenaward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ArenaArenaward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ArenaArenaward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ArenaArenaward E_ArenaArenaward_List = 1;
  for (int i = 0; i < this->e_arenaarenaward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_arenaarenaward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ArenaArenaward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ArenaArenaward E_ArenaArenaward_List = 1;
  for (int i = 0; i < this->e_arenaarenaward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_arenaarenaward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ArenaArenaward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ArenaArenaward E_ArenaArenaward_List = 1;
  total_size += 1 * this->e_arenaarenaward_list_size();
  for (int i = 0; i < this->e_arenaarenaward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_arenaarenaward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ArenaArenaward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ArenaArenaward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ArenaArenaward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ArenaArenaward::MergeFrom(const Sheet_ArenaArenaward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_arenaarenaward_list_.MergeFrom(from.e_arenaarenaward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ArenaArenaward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ArenaArenaward::CopyFrom(const Sheet_ArenaArenaward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ArenaArenaward::IsInitialized() const {

  return true;
}

void Sheet_ArenaArenaward::Swap(Sheet_ArenaArenaward* other) {
  if (other != this) {
    e_arenaarenaward_list_.Swap(&other->e_arenaarenaward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ArenaArenaward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ArenaArenaward_descriptor_;
  metadata.reflection = Sheet_ArenaArenaward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaRankawardRewardDesc::kMIdFieldNumber;
const int E_ArenaRankawardRewardDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_ArenaRankawardRewardDesc::E_ArenaRankawardRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaRankawardRewardDesc::InitAsDefaultInstance() {
}

E_ArenaRankawardRewardDesc::E_ArenaRankawardRewardDesc(const E_ArenaRankawardRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaRankawardRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaRankawardRewardDesc::~E_ArenaRankawardRewardDesc() {
  SharedDtor();
}

void E_ArenaRankawardRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaRankawardRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaRankawardRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaRankawardRewardDesc_descriptor_;
}

const E_ArenaRankawardRewardDesc& E_ArenaRankawardRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaRankawardRewardDesc* E_ArenaRankawardRewardDesc::default_instance_ = NULL;

E_ArenaRankawardRewardDesc* E_ArenaRankawardRewardDesc::New() const {
  return new E_ArenaRankawardRewardDesc;
}

void E_ArenaRankawardRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaRankawardRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaRankawardRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaRankawardRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaRankawardRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaRankawardRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaRankawardRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaRankawardRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaRankawardRewardDesc::MergeFrom(const E_ArenaRankawardRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaRankawardRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaRankawardRewardDesc::CopyFrom(const E_ArenaRankawardRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaRankawardRewardDesc::IsInitialized() const {

  return true;
}

void E_ArenaRankawardRewardDesc::Swap(E_ArenaRankawardRewardDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaRankawardRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaRankawardRewardDesc_descriptor_;
  metadata.reflection = E_ArenaRankawardRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaRankaward::kMPrizeidFieldNumber;
const int E_ArenaRankaward::kMArenadownFieldNumber;
const int E_ArenaRankaward::kMArenaupFieldNumber;
const int E_ArenaRankaward::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_ArenaRankaward::E_ArenaRankaward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaRankaward::InitAsDefaultInstance() {
}

E_ArenaRankaward::E_ArenaRankaward(const E_ArenaRankaward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaRankaward::SharedCtor() {
  _cached_size_ = 0;
  m_prizeid_ = 0;
  m_arenadown_ = 0;
  m_arenaup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaRankaward::~E_ArenaRankaward() {
  SharedDtor();
}

void E_ArenaRankaward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaRankaward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaRankaward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaRankaward_descriptor_;
}

const E_ArenaRankaward& E_ArenaRankaward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaRankaward* E_ArenaRankaward::default_instance_ = NULL;

E_ArenaRankaward* E_ArenaRankaward::New() const {
  return new E_ArenaRankaward;
}

void E_ArenaRankaward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_prizeid_ = 0;
    m_arenadown_ = 0;
    m_arenaup_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaRankaward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_prizeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prizeid_)));
          set_has_m_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_arenadown;
        break;
      }

      // optional int32 m_arenadown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_arenadown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_arenadown_)));
          set_has_m_arenadown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_arenaup;
        break;
      }

      // optional int32 m_arenaup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_arenaup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_arenaup_)));
          set_has_m_arenaup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_ArenaRankawardRewardDesc m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaRankaward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_prizeid = 1;
  if (has_m_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_prizeid(), output);
  }

  // optional int32 m_arenadown = 2;
  if (has_m_arenadown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_arenadown(), output);
  }

  // optional int32 m_arenaup = 3;
  if (has_m_arenaup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_arenaup(), output);
  }

  // repeated .proto_ff.E_ArenaRankawardRewardDesc m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaRankaward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_prizeid = 1;
  if (has_m_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_prizeid(), target);
  }

  // optional int32 m_arenadown = 2;
  if (has_m_arenadown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_arenadown(), target);
  }

  // optional int32 m_arenaup = 3;
  if (has_m_arenaup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_arenaup(), target);
  }

  // repeated .proto_ff.E_ArenaRankawardRewardDesc m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaRankaward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_prizeid = 1;
    if (has_m_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prizeid());
    }

    // optional int32 m_arenadown = 2;
    if (has_m_arenadown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_arenadown());
    }

    // optional int32 m_arenaup = 3;
    if (has_m_arenaup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_arenaup());
    }

  }
  // repeated .proto_ff.E_ArenaRankawardRewardDesc m_reward = 4;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaRankaward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaRankaward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaRankaward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaRankaward::MergeFrom(const E_ArenaRankaward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_prizeid()) {
      set_m_prizeid(from.m_prizeid());
    }
    if (from.has_m_arenadown()) {
      set_m_arenadown(from.m_arenadown());
    }
    if (from.has_m_arenaup()) {
      set_m_arenaup(from.m_arenaup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaRankaward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaRankaward::CopyFrom(const E_ArenaRankaward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaRankaward::IsInitialized() const {

  return true;
}

void E_ArenaRankaward::Swap(E_ArenaRankaward* other) {
  if (other != this) {
    std::swap(m_prizeid_, other->m_prizeid_);
    std::swap(m_arenadown_, other->m_arenadown_);
    std::swap(m_arenaup_, other->m_arenaup_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaRankaward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaRankaward_descriptor_;
  metadata.reflection = E_ArenaRankaward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ArenaRankaward::kEArenaRankawardListFieldNumber;
#endif  // !_MSC_VER

Sheet_ArenaRankaward::Sheet_ArenaRankaward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ArenaRankaward::InitAsDefaultInstance() {
}

Sheet_ArenaRankaward::Sheet_ArenaRankaward(const Sheet_ArenaRankaward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ArenaRankaward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ArenaRankaward::~Sheet_ArenaRankaward() {
  SharedDtor();
}

void Sheet_ArenaRankaward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ArenaRankaward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ArenaRankaward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ArenaRankaward_descriptor_;
}

const Sheet_ArenaRankaward& Sheet_ArenaRankaward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_ArenaRankaward* Sheet_ArenaRankaward::default_instance_ = NULL;

Sheet_ArenaRankaward* Sheet_ArenaRankaward::New() const {
  return new Sheet_ArenaRankaward;
}

void Sheet_ArenaRankaward::Clear() {
  e_arenarankaward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ArenaRankaward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ArenaRankaward E_ArenaRankaward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ArenaRankaward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_arenarankaward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ArenaRankaward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ArenaRankaward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ArenaRankaward E_ArenaRankaward_List = 1;
  for (int i = 0; i < this->e_arenarankaward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_arenarankaward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ArenaRankaward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ArenaRankaward E_ArenaRankaward_List = 1;
  for (int i = 0; i < this->e_arenarankaward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_arenarankaward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ArenaRankaward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ArenaRankaward E_ArenaRankaward_List = 1;
  total_size += 1 * this->e_arenarankaward_list_size();
  for (int i = 0; i < this->e_arenarankaward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_arenarankaward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ArenaRankaward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ArenaRankaward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ArenaRankaward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ArenaRankaward::MergeFrom(const Sheet_ArenaRankaward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_arenarankaward_list_.MergeFrom(from.e_arenarankaward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ArenaRankaward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ArenaRankaward::CopyFrom(const Sheet_ArenaRankaward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ArenaRankaward::IsInitialized() const {

  return true;
}

void Sheet_ArenaRankaward::Swap(Sheet_ArenaRankaward* other) {
  if (other != this) {
    e_arenarankaward_list_.Swap(&other->e_arenarankaward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ArenaRankaward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ArenaRankaward_descriptor_;
  metadata.reflection = Sheet_ArenaRankaward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaFirstrankRewardDesc::kMIdFieldNumber;
const int E_ArenaFirstrankRewardDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_ArenaFirstrankRewardDesc::E_ArenaFirstrankRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaFirstrankRewardDesc::InitAsDefaultInstance() {
}

E_ArenaFirstrankRewardDesc::E_ArenaFirstrankRewardDesc(const E_ArenaFirstrankRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaFirstrankRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaFirstrankRewardDesc::~E_ArenaFirstrankRewardDesc() {
  SharedDtor();
}

void E_ArenaFirstrankRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaFirstrankRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaFirstrankRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaFirstrankRewardDesc_descriptor_;
}

const E_ArenaFirstrankRewardDesc& E_ArenaFirstrankRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaFirstrankRewardDesc* E_ArenaFirstrankRewardDesc::default_instance_ = NULL;

E_ArenaFirstrankRewardDesc* E_ArenaFirstrankRewardDesc::New() const {
  return new E_ArenaFirstrankRewardDesc;
}

void E_ArenaFirstrankRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaFirstrankRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaFirstrankRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaFirstrankRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaFirstrankRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaFirstrankRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaFirstrankRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaFirstrankRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaFirstrankRewardDesc::MergeFrom(const E_ArenaFirstrankRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaFirstrankRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaFirstrankRewardDesc::CopyFrom(const E_ArenaFirstrankRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaFirstrankRewardDesc::IsInitialized() const {

  return true;
}

void E_ArenaFirstrankRewardDesc::Swap(E_ArenaFirstrankRewardDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaFirstrankRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaFirstrankRewardDesc_descriptor_;
  metadata.reflection = E_ArenaFirstrankRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaFirstrank::kMIdFieldNumber;
const int E_ArenaFirstrank::kMRankdownFieldNumber;
const int E_ArenaFirstrank::kMRankupFieldNumber;
const int E_ArenaFirstrank::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_ArenaFirstrank::E_ArenaFirstrank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaFirstrank::InitAsDefaultInstance() {
}

E_ArenaFirstrank::E_ArenaFirstrank(const E_ArenaFirstrank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaFirstrank::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_rankdown_ = 0;
  m_rankup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaFirstrank::~E_ArenaFirstrank() {
  SharedDtor();
}

void E_ArenaFirstrank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaFirstrank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaFirstrank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaFirstrank_descriptor_;
}

const E_ArenaFirstrank& E_ArenaFirstrank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaFirstrank* E_ArenaFirstrank::default_instance_ = NULL;

E_ArenaFirstrank* E_ArenaFirstrank::New() const {
  return new E_ArenaFirstrank;
}

void E_ArenaFirstrank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_rankdown_ = 0;
    m_rankup_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaFirstrank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rankdown;
        break;
      }

      // optional int32 m_rankdown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankdown_)));
          set_has_m_rankdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rankup;
        break;
      }

      // optional int32 m_rankup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankup_)));
          set_has_m_rankup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_ArenaFirstrankRewardDesc m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaFirstrank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_rankdown = 2;
  if (has_m_rankdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rankdown(), output);
  }

  // optional int32 m_rankup = 3;
  if (has_m_rankup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rankup(), output);
  }

  // repeated .proto_ff.E_ArenaFirstrankRewardDesc m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaFirstrank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_rankdown = 2;
  if (has_m_rankdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rankdown(), target);
  }

  // optional int32 m_rankup = 3;
  if (has_m_rankup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rankup(), target);
  }

  // repeated .proto_ff.E_ArenaFirstrankRewardDesc m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaFirstrank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_rankdown = 2;
    if (has_m_rankdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankdown());
    }

    // optional int32 m_rankup = 3;
    if (has_m_rankup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankup());
    }

  }
  // repeated .proto_ff.E_ArenaFirstrankRewardDesc m_reward = 4;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaFirstrank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaFirstrank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaFirstrank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaFirstrank::MergeFrom(const E_ArenaFirstrank& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rankdown()) {
      set_m_rankdown(from.m_rankdown());
    }
    if (from.has_m_rankup()) {
      set_m_rankup(from.m_rankup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaFirstrank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaFirstrank::CopyFrom(const E_ArenaFirstrank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaFirstrank::IsInitialized() const {

  return true;
}

void E_ArenaFirstrank::Swap(E_ArenaFirstrank* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_rankdown_, other->m_rankdown_);
    std::swap(m_rankup_, other->m_rankup_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaFirstrank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaFirstrank_descriptor_;
  metadata.reflection = E_ArenaFirstrank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ArenaFirstrank::kEArenaFirstrankListFieldNumber;
#endif  // !_MSC_VER

Sheet_ArenaFirstrank::Sheet_ArenaFirstrank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ArenaFirstrank::InitAsDefaultInstance() {
}

Sheet_ArenaFirstrank::Sheet_ArenaFirstrank(const Sheet_ArenaFirstrank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ArenaFirstrank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ArenaFirstrank::~Sheet_ArenaFirstrank() {
  SharedDtor();
}

void Sheet_ArenaFirstrank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ArenaFirstrank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ArenaFirstrank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ArenaFirstrank_descriptor_;
}

const Sheet_ArenaFirstrank& Sheet_ArenaFirstrank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_ArenaFirstrank* Sheet_ArenaFirstrank::default_instance_ = NULL;

Sheet_ArenaFirstrank* Sheet_ArenaFirstrank::New() const {
  return new Sheet_ArenaFirstrank;
}

void Sheet_ArenaFirstrank::Clear() {
  e_arenafirstrank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ArenaFirstrank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ArenaFirstrank E_ArenaFirstrank_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ArenaFirstrank_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_arenafirstrank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ArenaFirstrank_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ArenaFirstrank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ArenaFirstrank E_ArenaFirstrank_List = 1;
  for (int i = 0; i < this->e_arenafirstrank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_arenafirstrank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ArenaFirstrank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ArenaFirstrank E_ArenaFirstrank_List = 1;
  for (int i = 0; i < this->e_arenafirstrank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_arenafirstrank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ArenaFirstrank::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ArenaFirstrank E_ArenaFirstrank_List = 1;
  total_size += 1 * this->e_arenafirstrank_list_size();
  for (int i = 0; i < this->e_arenafirstrank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_arenafirstrank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ArenaFirstrank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ArenaFirstrank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ArenaFirstrank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ArenaFirstrank::MergeFrom(const Sheet_ArenaFirstrank& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_arenafirstrank_list_.MergeFrom(from.e_arenafirstrank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ArenaFirstrank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ArenaFirstrank::CopyFrom(const Sheet_ArenaFirstrank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ArenaFirstrank::IsInitialized() const {

  return true;
}

void Sheet_ArenaFirstrank::Swap(Sheet_ArenaFirstrank* other) {
  if (other != this) {
    e_arenafirstrank_list_.Swap(&other->e_arenafirstrank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ArenaFirstrank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ArenaFirstrank_descriptor_;
  metadata.reflection = Sheet_ArenaFirstrank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ArenaBuychallenge::kMCountFieldNumber;
const int E_ArenaBuychallenge::kMCosttypeFieldNumber;
const int E_ArenaBuychallenge::kMCostFieldNumber;
#endif  // !_MSC_VER

E_ArenaBuychallenge::E_ArenaBuychallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ArenaBuychallenge::InitAsDefaultInstance() {
}

E_ArenaBuychallenge::E_ArenaBuychallenge(const E_ArenaBuychallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ArenaBuychallenge::SharedCtor() {
  _cached_size_ = 0;
  m_count_ = 0;
  m_costtype_ = 0;
  m_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ArenaBuychallenge::~E_ArenaBuychallenge() {
  SharedDtor();
}

void E_ArenaBuychallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ArenaBuychallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ArenaBuychallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ArenaBuychallenge_descriptor_;
}

const E_ArenaBuychallenge& E_ArenaBuychallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

E_ArenaBuychallenge* E_ArenaBuychallenge::default_instance_ = NULL;

E_ArenaBuychallenge* E_ArenaBuychallenge::New() const {
  return new E_ArenaBuychallenge;
}

void E_ArenaBuychallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_count_ = 0;
    m_costtype_ = 0;
    m_cost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ArenaBuychallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_costtype;
        break;
      }

      // optional int32 m_costtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costtype_)));
          set_has_m_costtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_cost;
        break;
      }

      // optional int32 m_cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cost_)));
          set_has_m_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ArenaBuychallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_count = 1;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_count(), output);
  }

  // optional int32 m_costtype = 2;
  if (has_m_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_costtype(), output);
  }

  // optional int32 m_cost = 3;
  if (has_m_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ArenaBuychallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_count = 1;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_count(), target);
  }

  // optional int32 m_costtype = 2;
  if (has_m_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_costtype(), target);
  }

  // optional int32 m_cost = 3;
  if (has_m_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ArenaBuychallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_count = 1;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // optional int32 m_costtype = 2;
    if (has_m_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costtype());
    }

    // optional int32 m_cost = 3;
    if (has_m_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ArenaBuychallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ArenaBuychallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ArenaBuychallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ArenaBuychallenge::MergeFrom(const E_ArenaBuychallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_costtype()) {
      set_m_costtype(from.m_costtype());
    }
    if (from.has_m_cost()) {
      set_m_cost(from.m_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ArenaBuychallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ArenaBuychallenge::CopyFrom(const E_ArenaBuychallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ArenaBuychallenge::IsInitialized() const {

  return true;
}

void E_ArenaBuychallenge::Swap(E_ArenaBuychallenge* other) {
  if (other != this) {
    std::swap(m_count_, other->m_count_);
    std::swap(m_costtype_, other->m_costtype_);
    std::swap(m_cost_, other->m_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ArenaBuychallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ArenaBuychallenge_descriptor_;
  metadata.reflection = E_ArenaBuychallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ArenaBuychallenge::kEArenaBuychallengeListFieldNumber;
#endif  // !_MSC_VER

Sheet_ArenaBuychallenge::Sheet_ArenaBuychallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ArenaBuychallenge::InitAsDefaultInstance() {
}

Sheet_ArenaBuychallenge::Sheet_ArenaBuychallenge(const Sheet_ArenaBuychallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ArenaBuychallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ArenaBuychallenge::~Sheet_ArenaBuychallenge() {
  SharedDtor();
}

void Sheet_ArenaBuychallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ArenaBuychallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ArenaBuychallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ArenaBuychallenge_descriptor_;
}

const Sheet_ArenaBuychallenge& Sheet_ArenaBuychallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_ArenaBuychallenge* Sheet_ArenaBuychallenge::default_instance_ = NULL;

Sheet_ArenaBuychallenge* Sheet_ArenaBuychallenge::New() const {
  return new Sheet_ArenaBuychallenge;
}

void Sheet_ArenaBuychallenge::Clear() {
  e_arenabuychallenge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ArenaBuychallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ArenaBuychallenge E_ArenaBuychallenge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ArenaBuychallenge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_arenabuychallenge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ArenaBuychallenge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ArenaBuychallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ArenaBuychallenge E_ArenaBuychallenge_List = 1;
  for (int i = 0; i < this->e_arenabuychallenge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_arenabuychallenge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ArenaBuychallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ArenaBuychallenge E_ArenaBuychallenge_List = 1;
  for (int i = 0; i < this->e_arenabuychallenge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_arenabuychallenge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ArenaBuychallenge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ArenaBuychallenge E_ArenaBuychallenge_List = 1;
  total_size += 1 * this->e_arenabuychallenge_list_size();
  for (int i = 0; i < this->e_arenabuychallenge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_arenabuychallenge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ArenaBuychallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ArenaBuychallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ArenaBuychallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ArenaBuychallenge::MergeFrom(const Sheet_ArenaBuychallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_arenabuychallenge_list_.MergeFrom(from.e_arenabuychallenge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ArenaBuychallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ArenaBuychallenge::CopyFrom(const Sheet_ArenaBuychallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ArenaBuychallenge::IsInitialized() const {

  return true;
}

void Sheet_ArenaBuychallenge::Swap(Sheet_ArenaBuychallenge* other) {
  if (other != this) {
    e_arenabuychallenge_list_.Swap(&other->e_arenabuychallenge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ArenaBuychallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ArenaBuychallenge_descriptor_;
  metadata.reflection = Sheet_ArenaBuychallenge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
