// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recharge.proto

#ifndef PROTOBUF_recharge_2eproto__INCLUDED
#define PROTOBUF_recharge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_recharge_2eproto();
void protobuf_AssignDesc_recharge_2eproto();
void protobuf_ShutdownFile_recharge_2eproto();

class rechargerechargepresentDesc;
class rechargerechargechannelDesc;
class rechargerecharge;
class Sheet_rechargerecharge;

// ===================================================================

class rechargerechargepresentDesc : public ::google::protobuf::Message {
 public:
  rechargerechargepresentDesc();
  virtual ~rechargerechargepresentDesc();

  rechargerechargepresentDesc(const rechargerechargepresentDesc& from);

  inline rechargerechargepresentDesc& operator=(const rechargerechargepresentDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rechargerechargepresentDesc& default_instance();

  void Swap(rechargerechargepresentDesc* other);

  // implements Message ----------------------------------------------

  rechargerechargepresentDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rechargerechargepresentDesc& from);
  void MergeFrom(const rechargerechargepresentDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int64 Id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.rechargerechargepresentDesc)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2eproto();
  friend void protobuf_AssignDesc_recharge_2eproto();
  friend void protobuf_ShutdownFile_recharge_2eproto();

  void InitAsDefaultInstance();
  static rechargerechargepresentDesc* default_instance_;
};
// -------------------------------------------------------------------

class rechargerechargechannelDesc : public ::google::protobuf::Message {
 public:
  rechargerechargechannelDesc();
  virtual ~rechargerechargechannelDesc();

  rechargerechargechannelDesc(const rechargerechargechannelDesc& from);

  inline rechargerechargechannelDesc& operator=(const rechargerechargechannelDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rechargerechargechannelDesc& default_instance();

  void Swap(rechargerechargechannelDesc* other);

  // implements Message ----------------------------------------------

  rechargerechargechannelDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rechargerechargechannelDesc& from);
  void MergeFrom(const rechargerechargechannelDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline const ::std::string& point() const;
  inline void set_point(const ::std::string& value);
  inline void set_point(const char* value);
  inline void set_point(const char* value, size_t size);
  inline ::std::string* mutable_point();
  inline ::std::string* release_point();
  inline void set_allocated_point(::std::string* point);

  // @@protoc_insertion_point(class_scope:proto_ff.rechargerechargechannelDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* point_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2eproto();
  friend void protobuf_AssignDesc_recharge_2eproto();
  friend void protobuf_ShutdownFile_recharge_2eproto();

  void InitAsDefaultInstance();
  static rechargerechargechannelDesc* default_instance_;
};
// -------------------------------------------------------------------

class rechargerecharge : public ::google::protobuf::Message {
 public:
  rechargerecharge();
  virtual ~rechargerecharge();

  rechargerecharge(const rechargerecharge& from);

  inline rechargerecharge& operator=(const rechargerecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rechargerecharge& default_instance();

  void Swap(rechargerecharge* other);

  // implements Message ----------------------------------------------

  rechargerecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rechargerecharge& from);
  void MergeFrom(const rechargerecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string defaultPoint = 3;
  inline bool has_defaultpoint() const;
  inline void clear_defaultpoint();
  static const int kDefaultPointFieldNumber = 3;
  inline const ::std::string& defaultpoint() const;
  inline void set_defaultpoint(const ::std::string& value);
  inline void set_defaultpoint(const char* value);
  inline void set_defaultpoint(const char* value, size_t size);
  inline ::std::string* mutable_defaultpoint();
  inline ::std::string* release_defaultpoint();
  inline void set_allocated_defaultpoint(::std::string* defaultpoint);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string unit = 5;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 5;
  inline const ::std::string& unit() const;
  inline void set_unit(const ::std::string& value);
  inline void set_unit(const char* value);
  inline void set_unit(const char* value, size_t size);
  inline ::std::string* mutable_unit();
  inline ::std::string* release_unit();
  inline void set_allocated_unit(::std::string* unit);

  // optional string beizhu = 6;
  inline bool has_beizhu() const;
  inline void clear_beizhu();
  static const int kBeizhuFieldNumber = 6;
  inline const ::std::string& beizhu() const;
  inline void set_beizhu(const ::std::string& value);
  inline void set_beizhu(const char* value);
  inline void set_beizhu(const char* value, size_t size);
  inline ::std::string* mutable_beizhu();
  inline ::std::string* release_beizhu();
  inline void set_allocated_beizhu(::std::string* beizhu);

  // optional int64 quantity = 7;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 7;
  inline ::google::protobuf::int64 quantity() const;
  inline void set_quantity(::google::protobuf::int64 value);

  // optional int32 itemNum = 8;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 8;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);

  // optional int64 multipleTimes = 9;
  inline bool has_multipletimes() const;
  inline void clear_multipletimes();
  static const int kMultipleTimesFieldNumber = 9;
  inline ::google::protobuf::int64 multipletimes() const;
  inline void set_multipletimes(::google::protobuf::int64 value);

  // optional int64 multipleReward = 10;
  inline bool has_multiplereward() const;
  inline void clear_multiplereward();
  static const int kMultipleRewardFieldNumber = 10;
  inline ::google::protobuf::int64 multiplereward() const;
  inline void set_multiplereward(::google::protobuf::int64 value);

  // optional int32 zuanshitype = 11;
  inline bool has_zuanshitype() const;
  inline void clear_zuanshitype();
  static const int kZuanshitypeFieldNumber = 11;
  inline ::google::protobuf::int32 zuanshitype() const;
  inline void set_zuanshitype(::google::protobuf::int32 value);

  // optional int32 vipExp = 12;
  inline bool has_vipexp() const;
  inline void clear_vipexp();
  static const int kVipExpFieldNumber = 12;
  inline ::google::protobuf::int32 vipexp() const;
  inline void set_vipexp(::google::protobuf::int32 value);

  // optional int32 vipExpLimit = 13;
  inline bool has_vipexplimit() const;
  inline void clear_vipexplimit();
  static const int kVipExpLimitFieldNumber = 13;
  inline ::google::protobuf::int32 vipexplimit() const;
  inline void set_vipexplimit(::google::protobuf::int32 value);

  // optional int32 activityCount = 14;
  inline bool has_activitycount() const;
  inline void clear_activitycount();
  static const int kActivityCountFieldNumber = 14;
  inline ::google::protobuf::int32 activitycount() const;
  inline void set_activitycount(::google::protobuf::int32 value);

  // optional int32 HactivityCount = 15;
  inline bool has_hactivitycount() const;
  inline void clear_hactivitycount();
  static const int kHactivityCountFieldNumber = 15;
  inline ::google::protobuf::int32 hactivitycount() const;
  inline void set_hactivitycount(::google::protobuf::int32 value);

  // optional int32 price = 16;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 16;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 fristpresent = 17;
  inline bool has_fristpresent() const;
  inline void clear_fristpresent();
  static const int kFristpresentFieldNumber = 17;
  inline ::google::protobuf::int32 fristpresent() const;
  inline void set_fristpresent(::google::protobuf::int32 value);

  // optional int32 presenttype = 18;
  inline bool has_presenttype() const;
  inline void clear_presenttype();
  static const int kPresenttypeFieldNumber = 18;
  inline ::google::protobuf::int32 presenttype() const;
  inline void set_presenttype(::google::protobuf::int32 value);

  // optional string icon = 19;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 19;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional int32 preRecharge = 20;
  inline bool has_prerecharge() const;
  inline void clear_prerecharge();
  static const int kPreRechargeFieldNumber = 20;
  inline ::google::protobuf::int32 prerecharge() const;
  inline void set_prerecharge(::google::protobuf::int32 value);

  // repeated .proto_ff.rechargerechargepresentDesc present = 21;
  inline int present_size() const;
  inline void clear_present();
  static const int kPresentFieldNumber = 21;
  inline const ::proto_ff::rechargerechargepresentDesc& present(int index) const;
  inline ::proto_ff::rechargerechargepresentDesc* mutable_present(int index);
  inline ::proto_ff::rechargerechargepresentDesc* add_present();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargepresentDesc >&
      present() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargepresentDesc >*
      mutable_present();

  // repeated .proto_ff.rechargerechargechannelDesc channel = 22;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 22;
  inline const ::proto_ff::rechargerechargechannelDesc& channel(int index) const;
  inline ::proto_ff::rechargerechargechannelDesc* mutable_channel(int index);
  inline ::proto_ff::rechargerechargechannelDesc* add_channel();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargechannelDesc >&
      channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargechannelDesc >*
      mutable_channel();

  // @@protoc_insertion_point(class_scope:proto_ff.rechargerecharge)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_defaultpoint();
  inline void clear_has_defaultpoint();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_beizhu();
  inline void clear_has_beizhu();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_multipletimes();
  inline void clear_has_multipletimes();
  inline void set_has_multiplereward();
  inline void clear_has_multiplereward();
  inline void set_has_zuanshitype();
  inline void clear_has_zuanshitype();
  inline void set_has_vipexp();
  inline void clear_has_vipexp();
  inline void set_has_vipexplimit();
  inline void clear_has_vipexplimit();
  inline void set_has_activitycount();
  inline void clear_has_activitycount();
  inline void set_has_hactivitycount();
  inline void clear_has_hactivitycount();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_fristpresent();
  inline void clear_has_fristpresent();
  inline void set_has_presenttype();
  inline void clear_has_presenttype();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_prerecharge();
  inline void clear_has_prerecharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::std::string* defaultpoint_;
  ::std::string* unit_;
  ::std::string* beizhu_;
  ::google::protobuf::int64 quantity_;
  ::google::protobuf::int64 multipletimes_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::int32 zuanshitype_;
  ::google::protobuf::int64 multiplereward_;
  ::google::protobuf::int32 vipexp_;
  ::google::protobuf::int32 vipexplimit_;
  ::google::protobuf::int32 activitycount_;
  ::google::protobuf::int32 hactivitycount_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 fristpresent_;
  ::std::string* icon_;
  ::google::protobuf::int32 presenttype_;
  ::google::protobuf::int32 prerecharge_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargepresentDesc > present_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargechannelDesc > channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2eproto();
  friend void protobuf_AssignDesc_recharge_2eproto();
  friend void protobuf_ShutdownFile_recharge_2eproto();

  void InitAsDefaultInstance();
  static rechargerecharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_rechargerecharge : public ::google::protobuf::Message {
 public:
  Sheet_rechargerecharge();
  virtual ~Sheet_rechargerecharge();

  Sheet_rechargerecharge(const Sheet_rechargerecharge& from);

  inline Sheet_rechargerecharge& operator=(const Sheet_rechargerecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_rechargerecharge& default_instance();

  void Swap(Sheet_rechargerecharge* other);

  // implements Message ----------------------------------------------

  Sheet_rechargerecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_rechargerecharge& from);
  void MergeFrom(const Sheet_rechargerecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.rechargerecharge rechargerecharge_List = 1;
  inline int rechargerecharge_list_size() const;
  inline void clear_rechargerecharge_list();
  static const int kRechargerechargeListFieldNumber = 1;
  inline const ::proto_ff::rechargerecharge& rechargerecharge_list(int index) const;
  inline ::proto_ff::rechargerecharge* mutable_rechargerecharge_list(int index);
  inline ::proto_ff::rechargerecharge* add_rechargerecharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerecharge >&
      rechargerecharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerecharge >*
      mutable_rechargerecharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_rechargerecharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerecharge > rechargerecharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_recharge_2eproto();
  friend void protobuf_AssignDesc_recharge_2eproto();
  friend void protobuf_ShutdownFile_recharge_2eproto();

  void InitAsDefaultInstance();
  static Sheet_rechargerecharge* default_instance_;
};
// ===================================================================


// ===================================================================

// rechargerechargepresentDesc

// optional int32 Num = 1;
inline bool rechargerechargepresentDesc::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rechargerechargepresentDesc::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rechargerechargepresentDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rechargerechargepresentDesc::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 rechargerechargepresentDesc::num() const {
  return num_;
}
inline void rechargerechargepresentDesc::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int64 Id = 2;
inline bool rechargerechargepresentDesc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rechargerechargepresentDesc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rechargerechargepresentDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rechargerechargepresentDesc::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 rechargerechargepresentDesc::id() const {
  return id_;
}
inline void rechargerechargepresentDesc::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// rechargerechargechannelDesc

// optional int32 id = 1;
inline bool rechargerechargechannelDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rechargerechargechannelDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rechargerechargechannelDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rechargerechargechannelDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 rechargerechargechannelDesc::id() const {
  return id_;
}
inline void rechargerechargechannelDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string point = 2;
inline bool rechargerechargechannelDesc::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rechargerechargechannelDesc::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rechargerechargechannelDesc::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rechargerechargechannelDesc::clear_point() {
  if (point_ != &::google::protobuf::internal::kEmptyString) {
    point_->clear();
  }
  clear_has_point();
}
inline const ::std::string& rechargerechargechannelDesc::point() const {
  return *point_;
}
inline void rechargerechargechannelDesc::set_point(const ::std::string& value) {
  set_has_point();
  if (point_ == &::google::protobuf::internal::kEmptyString) {
    point_ = new ::std::string;
  }
  point_->assign(value);
}
inline void rechargerechargechannelDesc::set_point(const char* value) {
  set_has_point();
  if (point_ == &::google::protobuf::internal::kEmptyString) {
    point_ = new ::std::string;
  }
  point_->assign(value);
}
inline void rechargerechargechannelDesc::set_point(const char* value, size_t size) {
  set_has_point();
  if (point_ == &::google::protobuf::internal::kEmptyString) {
    point_ = new ::std::string;
  }
  point_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rechargerechargechannelDesc::mutable_point() {
  set_has_point();
  if (point_ == &::google::protobuf::internal::kEmptyString) {
    point_ = new ::std::string;
  }
  return point_;
}
inline ::std::string* rechargerechargechannelDesc::release_point() {
  clear_has_point();
  if (point_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = point_;
    point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rechargerechargechannelDesc::set_allocated_point(::std::string* point) {
  if (point_ != &::google::protobuf::internal::kEmptyString) {
    delete point_;
  }
  if (point) {
    set_has_point();
    point_ = point;
  } else {
    clear_has_point();
    point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// rechargerecharge

// optional int32 id = 1;
inline bool rechargerecharge::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rechargerecharge::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rechargerecharge::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rechargerecharge::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 rechargerecharge::id() const {
  return id_;
}
inline void rechargerecharge::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool rechargerecharge::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rechargerecharge::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rechargerecharge::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rechargerecharge::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& rechargerecharge::name() const {
  return *name_;
}
inline void rechargerecharge::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void rechargerecharge::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void rechargerecharge::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rechargerecharge::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* rechargerecharge::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rechargerecharge::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string defaultPoint = 3;
inline bool rechargerecharge::has_defaultpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rechargerecharge::set_has_defaultpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rechargerecharge::clear_has_defaultpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rechargerecharge::clear_defaultpoint() {
  if (defaultpoint_ != &::google::protobuf::internal::kEmptyString) {
    defaultpoint_->clear();
  }
  clear_has_defaultpoint();
}
inline const ::std::string& rechargerecharge::defaultpoint() const {
  return *defaultpoint_;
}
inline void rechargerecharge::set_defaultpoint(const ::std::string& value) {
  set_has_defaultpoint();
  if (defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    defaultpoint_ = new ::std::string;
  }
  defaultpoint_->assign(value);
}
inline void rechargerecharge::set_defaultpoint(const char* value) {
  set_has_defaultpoint();
  if (defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    defaultpoint_ = new ::std::string;
  }
  defaultpoint_->assign(value);
}
inline void rechargerecharge::set_defaultpoint(const char* value, size_t size) {
  set_has_defaultpoint();
  if (defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    defaultpoint_ = new ::std::string;
  }
  defaultpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rechargerecharge::mutable_defaultpoint() {
  set_has_defaultpoint();
  if (defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    defaultpoint_ = new ::std::string;
  }
  return defaultpoint_;
}
inline ::std::string* rechargerecharge::release_defaultpoint() {
  clear_has_defaultpoint();
  if (defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defaultpoint_;
    defaultpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rechargerecharge::set_allocated_defaultpoint(::std::string* defaultpoint) {
  if (defaultpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete defaultpoint_;
  }
  if (defaultpoint) {
    set_has_defaultpoint();
    defaultpoint_ = defaultpoint;
  } else {
    clear_has_defaultpoint();
    defaultpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 4;
inline bool rechargerecharge::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rechargerecharge::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rechargerecharge::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rechargerecharge::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 rechargerecharge::type() const {
  return type_;
}
inline void rechargerecharge::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string unit = 5;
inline bool rechargerecharge::has_unit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rechargerecharge::set_has_unit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rechargerecharge::clear_has_unit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rechargerecharge::clear_unit() {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    unit_->clear();
  }
  clear_has_unit();
}
inline const ::std::string& rechargerecharge::unit() const {
  return *unit_;
}
inline void rechargerecharge::set_unit(const ::std::string& value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
}
inline void rechargerecharge::set_unit(const char* value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
}
inline void rechargerecharge::set_unit(const char* value, size_t size) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rechargerecharge::mutable_unit() {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  return unit_;
}
inline ::std::string* rechargerecharge::release_unit() {
  clear_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unit_;
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rechargerecharge::set_allocated_unit(::std::string* unit) {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (unit) {
    set_has_unit();
    unit_ = unit;
  } else {
    clear_has_unit();
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string beizhu = 6;
inline bool rechargerecharge::has_beizhu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rechargerecharge::set_has_beizhu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rechargerecharge::clear_has_beizhu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rechargerecharge::clear_beizhu() {
  if (beizhu_ != &::google::protobuf::internal::kEmptyString) {
    beizhu_->clear();
  }
  clear_has_beizhu();
}
inline const ::std::string& rechargerecharge::beizhu() const {
  return *beizhu_;
}
inline void rechargerecharge::set_beizhu(const ::std::string& value) {
  set_has_beizhu();
  if (beizhu_ == &::google::protobuf::internal::kEmptyString) {
    beizhu_ = new ::std::string;
  }
  beizhu_->assign(value);
}
inline void rechargerecharge::set_beizhu(const char* value) {
  set_has_beizhu();
  if (beizhu_ == &::google::protobuf::internal::kEmptyString) {
    beizhu_ = new ::std::string;
  }
  beizhu_->assign(value);
}
inline void rechargerecharge::set_beizhu(const char* value, size_t size) {
  set_has_beizhu();
  if (beizhu_ == &::google::protobuf::internal::kEmptyString) {
    beizhu_ = new ::std::string;
  }
  beizhu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rechargerecharge::mutable_beizhu() {
  set_has_beizhu();
  if (beizhu_ == &::google::protobuf::internal::kEmptyString) {
    beizhu_ = new ::std::string;
  }
  return beizhu_;
}
inline ::std::string* rechargerecharge::release_beizhu() {
  clear_has_beizhu();
  if (beizhu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beizhu_;
    beizhu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rechargerecharge::set_allocated_beizhu(::std::string* beizhu) {
  if (beizhu_ != &::google::protobuf::internal::kEmptyString) {
    delete beizhu_;
  }
  if (beizhu) {
    set_has_beizhu();
    beizhu_ = beizhu;
  } else {
    clear_has_beizhu();
    beizhu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 quantity = 7;
inline bool rechargerecharge::has_quantity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rechargerecharge::set_has_quantity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rechargerecharge::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rechargerecharge::clear_quantity() {
  quantity_ = GOOGLE_LONGLONG(0);
  clear_has_quantity();
}
inline ::google::protobuf::int64 rechargerecharge::quantity() const {
  return quantity_;
}
inline void rechargerecharge::set_quantity(::google::protobuf::int64 value) {
  set_has_quantity();
  quantity_ = value;
}

// optional int32 itemNum = 8;
inline bool rechargerecharge::has_itemnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void rechargerecharge::set_has_itemnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void rechargerecharge::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void rechargerecharge::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 rechargerecharge::itemnum() const {
  return itemnum_;
}
inline void rechargerecharge::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional int64 multipleTimes = 9;
inline bool rechargerecharge::has_multipletimes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void rechargerecharge::set_has_multipletimes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void rechargerecharge::clear_has_multipletimes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void rechargerecharge::clear_multipletimes() {
  multipletimes_ = GOOGLE_LONGLONG(0);
  clear_has_multipletimes();
}
inline ::google::protobuf::int64 rechargerecharge::multipletimes() const {
  return multipletimes_;
}
inline void rechargerecharge::set_multipletimes(::google::protobuf::int64 value) {
  set_has_multipletimes();
  multipletimes_ = value;
}

// optional int64 multipleReward = 10;
inline bool rechargerecharge::has_multiplereward() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void rechargerecharge::set_has_multiplereward() {
  _has_bits_[0] |= 0x00000200u;
}
inline void rechargerecharge::clear_has_multiplereward() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void rechargerecharge::clear_multiplereward() {
  multiplereward_ = GOOGLE_LONGLONG(0);
  clear_has_multiplereward();
}
inline ::google::protobuf::int64 rechargerecharge::multiplereward() const {
  return multiplereward_;
}
inline void rechargerecharge::set_multiplereward(::google::protobuf::int64 value) {
  set_has_multiplereward();
  multiplereward_ = value;
}

// optional int32 zuanshitype = 11;
inline bool rechargerecharge::has_zuanshitype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void rechargerecharge::set_has_zuanshitype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void rechargerecharge::clear_has_zuanshitype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void rechargerecharge::clear_zuanshitype() {
  zuanshitype_ = 0;
  clear_has_zuanshitype();
}
inline ::google::protobuf::int32 rechargerecharge::zuanshitype() const {
  return zuanshitype_;
}
inline void rechargerecharge::set_zuanshitype(::google::protobuf::int32 value) {
  set_has_zuanshitype();
  zuanshitype_ = value;
}

// optional int32 vipExp = 12;
inline bool rechargerecharge::has_vipexp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void rechargerecharge::set_has_vipexp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void rechargerecharge::clear_has_vipexp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void rechargerecharge::clear_vipexp() {
  vipexp_ = 0;
  clear_has_vipexp();
}
inline ::google::protobuf::int32 rechargerecharge::vipexp() const {
  return vipexp_;
}
inline void rechargerecharge::set_vipexp(::google::protobuf::int32 value) {
  set_has_vipexp();
  vipexp_ = value;
}

// optional int32 vipExpLimit = 13;
inline bool rechargerecharge::has_vipexplimit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void rechargerecharge::set_has_vipexplimit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void rechargerecharge::clear_has_vipexplimit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void rechargerecharge::clear_vipexplimit() {
  vipexplimit_ = 0;
  clear_has_vipexplimit();
}
inline ::google::protobuf::int32 rechargerecharge::vipexplimit() const {
  return vipexplimit_;
}
inline void rechargerecharge::set_vipexplimit(::google::protobuf::int32 value) {
  set_has_vipexplimit();
  vipexplimit_ = value;
}

// optional int32 activityCount = 14;
inline bool rechargerecharge::has_activitycount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void rechargerecharge::set_has_activitycount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void rechargerecharge::clear_has_activitycount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void rechargerecharge::clear_activitycount() {
  activitycount_ = 0;
  clear_has_activitycount();
}
inline ::google::protobuf::int32 rechargerecharge::activitycount() const {
  return activitycount_;
}
inline void rechargerecharge::set_activitycount(::google::protobuf::int32 value) {
  set_has_activitycount();
  activitycount_ = value;
}

// optional int32 HactivityCount = 15;
inline bool rechargerecharge::has_hactivitycount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void rechargerecharge::set_has_hactivitycount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void rechargerecharge::clear_has_hactivitycount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void rechargerecharge::clear_hactivitycount() {
  hactivitycount_ = 0;
  clear_has_hactivitycount();
}
inline ::google::protobuf::int32 rechargerecharge::hactivitycount() const {
  return hactivitycount_;
}
inline void rechargerecharge::set_hactivitycount(::google::protobuf::int32 value) {
  set_has_hactivitycount();
  hactivitycount_ = value;
}

// optional int32 price = 16;
inline bool rechargerecharge::has_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void rechargerecharge::set_has_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void rechargerecharge::clear_has_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void rechargerecharge::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 rechargerecharge::price() const {
  return price_;
}
inline void rechargerecharge::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 fristpresent = 17;
inline bool rechargerecharge::has_fristpresent() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void rechargerecharge::set_has_fristpresent() {
  _has_bits_[0] |= 0x00010000u;
}
inline void rechargerecharge::clear_has_fristpresent() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void rechargerecharge::clear_fristpresent() {
  fristpresent_ = 0;
  clear_has_fristpresent();
}
inline ::google::protobuf::int32 rechargerecharge::fristpresent() const {
  return fristpresent_;
}
inline void rechargerecharge::set_fristpresent(::google::protobuf::int32 value) {
  set_has_fristpresent();
  fristpresent_ = value;
}

// optional int32 presenttype = 18;
inline bool rechargerecharge::has_presenttype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void rechargerecharge::set_has_presenttype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void rechargerecharge::clear_has_presenttype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void rechargerecharge::clear_presenttype() {
  presenttype_ = 0;
  clear_has_presenttype();
}
inline ::google::protobuf::int32 rechargerecharge::presenttype() const {
  return presenttype_;
}
inline void rechargerecharge::set_presenttype(::google::protobuf::int32 value) {
  set_has_presenttype();
  presenttype_ = value;
}

// optional string icon = 19;
inline bool rechargerecharge::has_icon() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void rechargerecharge::set_has_icon() {
  _has_bits_[0] |= 0x00040000u;
}
inline void rechargerecharge::clear_has_icon() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void rechargerecharge::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& rechargerecharge::icon() const {
  return *icon_;
}
inline void rechargerecharge::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void rechargerecharge::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void rechargerecharge::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rechargerecharge::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* rechargerecharge::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rechargerecharge::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 preRecharge = 20;
inline bool rechargerecharge::has_prerecharge() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void rechargerecharge::set_has_prerecharge() {
  _has_bits_[0] |= 0x00080000u;
}
inline void rechargerecharge::clear_has_prerecharge() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void rechargerecharge::clear_prerecharge() {
  prerecharge_ = 0;
  clear_has_prerecharge();
}
inline ::google::protobuf::int32 rechargerecharge::prerecharge() const {
  return prerecharge_;
}
inline void rechargerecharge::set_prerecharge(::google::protobuf::int32 value) {
  set_has_prerecharge();
  prerecharge_ = value;
}

// repeated .proto_ff.rechargerechargepresentDesc present = 21;
inline int rechargerecharge::present_size() const {
  return present_.size();
}
inline void rechargerecharge::clear_present() {
  present_.Clear();
}
inline const ::proto_ff::rechargerechargepresentDesc& rechargerecharge::present(int index) const {
  return present_.Get(index);
}
inline ::proto_ff::rechargerechargepresentDesc* rechargerecharge::mutable_present(int index) {
  return present_.Mutable(index);
}
inline ::proto_ff::rechargerechargepresentDesc* rechargerecharge::add_present() {
  return present_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargepresentDesc >&
rechargerecharge::present() const {
  return present_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargepresentDesc >*
rechargerecharge::mutable_present() {
  return &present_;
}

// repeated .proto_ff.rechargerechargechannelDesc channel = 22;
inline int rechargerecharge::channel_size() const {
  return channel_.size();
}
inline void rechargerecharge::clear_channel() {
  channel_.Clear();
}
inline const ::proto_ff::rechargerechargechannelDesc& rechargerecharge::channel(int index) const {
  return channel_.Get(index);
}
inline ::proto_ff::rechargerechargechannelDesc* rechargerecharge::mutable_channel(int index) {
  return channel_.Mutable(index);
}
inline ::proto_ff::rechargerechargechannelDesc* rechargerecharge::add_channel() {
  return channel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargechannelDesc >&
rechargerecharge::channel() const {
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerechargechannelDesc >*
rechargerecharge::mutable_channel() {
  return &channel_;
}

// -------------------------------------------------------------------

// Sheet_rechargerecharge

// repeated .proto_ff.rechargerecharge rechargerecharge_List = 1;
inline int Sheet_rechargerecharge::rechargerecharge_list_size() const {
  return rechargerecharge_list_.size();
}
inline void Sheet_rechargerecharge::clear_rechargerecharge_list() {
  rechargerecharge_list_.Clear();
}
inline const ::proto_ff::rechargerecharge& Sheet_rechargerecharge::rechargerecharge_list(int index) const {
  return rechargerecharge_list_.Get(index);
}
inline ::proto_ff::rechargerecharge* Sheet_rechargerecharge::mutable_rechargerecharge_list(int index) {
  return rechargerecharge_list_.Mutable(index);
}
inline ::proto_ff::rechargerecharge* Sheet_rechargerecharge::add_rechargerecharge_list() {
  return rechargerecharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerecharge >&
Sheet_rechargerecharge::rechargerecharge_list() const {
  return rechargerecharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rechargerecharge >*
Sheet_rechargerecharge::mutable_rechargerecharge_list() {
  return &rechargerecharge_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_recharge_2eproto__INCLUDED
