// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: godevil.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "godevil.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_GodevilPreposetask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilPreposetask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilPreposetask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilPreposetask_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilGodevillvAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilGodevillvAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilGodevillv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilGodevillv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilGodevillv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilGodevillv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilGodevilprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilGodevilprivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilGodevilprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilGodevilprivilege_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_godevil_2eproto() {
  protobuf_AddDesc_godevil_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "godevil.proto");
  GOOGLE_CHECK(file != NULL);
  E_GodevilPreposetask_descriptor_ = file->message_type(0);
  static const int E_GodevilPreposetask_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_modeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_starttask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_endtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_rewardid_),
  };
  E_GodevilPreposetask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilPreposetask_descriptor_,
      E_GodevilPreposetask::default_instance_,
      E_GodevilPreposetask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilPreposetask));
  Sheet_GodevilPreposetask_descriptor_ = file->message_type(1);
  static const int Sheet_GodevilPreposetask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPreposetask, e_godevilpreposetask_list_),
  };
  Sheet_GodevilPreposetask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilPreposetask_descriptor_,
      Sheet_GodevilPreposetask::default_instance_,
      Sheet_GodevilPreposetask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPreposetask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPreposetask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilPreposetask));
  E_GodevilGodevillvAttributeDesc_descriptor_ = file->message_type(2);
  static const int E_GodevilGodevillvAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillvAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillvAttributeDesc, m_value_),
  };
  E_GodevilGodevillvAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilGodevillvAttributeDesc_descriptor_,
      E_GodevilGodevillvAttributeDesc::default_instance_,
      E_GodevilGodevillvAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillvAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillvAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilGodevillvAttributeDesc));
  E_GodevilGodevillv_descriptor_ = file->message_type(3);
  static const int E_GodevilGodevillv_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_explimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_attribute_),
  };
  E_GodevilGodevillv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilGodevillv_descriptor_,
      E_GodevilGodevillv::default_instance_,
      E_GodevilGodevillv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilGodevillv));
  Sheet_GodevilGodevillv_descriptor_ = file->message_type(4);
  static const int Sheet_GodevilGodevillv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevillv, e_godevilgodevillv_list_),
  };
  Sheet_GodevilGodevillv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilGodevillv_descriptor_,
      Sheet_GodevilGodevillv::default_instance_,
      Sheet_GodevilGodevillv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevillv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevillv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilGodevillv));
  E_GodevilGodevilprivilege_descriptor_ = file->message_type(5);
  static const int E_GodevilGodevilprivilege_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_oldprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_newprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_rechargid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_equipmentid_),
  };
  E_GodevilGodevilprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilGodevilprivilege_descriptor_,
      E_GodevilGodevilprivilege::default_instance_,
      E_GodevilGodevilprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilGodevilprivilege));
  Sheet_GodevilGodevilprivilege_descriptor_ = file->message_type(6);
  static const int Sheet_GodevilGodevilprivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilprivilege, e_godevilgodevilprivilege_list_),
  };
  Sheet_GodevilGodevilprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilGodevilprivilege_descriptor_,
      Sheet_GodevilGodevilprivilege::default_instance_,
      Sheet_GodevilGodevilprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilGodevilprivilege));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_godevil_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilPreposetask_descriptor_, &E_GodevilPreposetask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilPreposetask_descriptor_, &Sheet_GodevilPreposetask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilGodevillvAttributeDesc_descriptor_, &E_GodevilGodevillvAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilGodevillv_descriptor_, &E_GodevilGodevillv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilGodevillv_descriptor_, &Sheet_GodevilGodevillv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilGodevilprivilege_descriptor_, &E_GodevilGodevilprivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilGodevilprivilege_descriptor_, &Sheet_GodevilGodevilprivilege::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_godevil_2eproto() {
  delete E_GodevilPreposetask::default_instance_;
  delete E_GodevilPreposetask_reflection_;
  delete Sheet_GodevilPreposetask::default_instance_;
  delete Sheet_GodevilPreposetask_reflection_;
  delete E_GodevilGodevillvAttributeDesc::default_instance_;
  delete E_GodevilGodevillvAttributeDesc_reflection_;
  delete E_GodevilGodevillv::default_instance_;
  delete E_GodevilGodevillv_reflection_;
  delete Sheet_GodevilGodevillv::default_instance_;
  delete Sheet_GodevilGodevillv_reflection_;
  delete E_GodevilGodevilprivilege::default_instance_;
  delete E_GodevilGodevilprivilege_reflection_;
  delete Sheet_GodevilGodevilprivilege::default_instance_;
  delete Sheet_GodevilGodevilprivilege_reflection_;
}

void protobuf_AddDesc_godevil_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgodevil.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\242\002\n\024E_GodevilPreposetask\022\032\n\004m_i"
    "d\030\001 \001(\005B\014\302\377\024\010\345\272\217\345\217\267ID\022\032\n\006m_type\030\002 \001(\005B\n\302"
    "\377\024\006\347\261\273\345\236\213\022%\n\013m_modeltype\030\003 \001(\005B\020\302\377\024\014\346\211\200\345"
    "\261\236\351\230\266\346\256\265\022!\n\013m_starttask\030\004 \001(\005B\014\302\377\024\010\344\273\273\345\212"
    "\241ID\022%\n\tm_endtask\030\005 \001(\005B\022\302\377\024\016\347\273\223\346\235\237\344\273\273\345\212\241"
    "ID\022\037\n\013m_condition\030\006 \001(\005B\n\302\377\024\006\346\235\241\344\273\266\022\036\n\007m"
    "_value\030\007 \001(\005B\r\302\377\024\t\346\235\241\344\273\266\345\200\274\022 \n\nm_rewardi"
    "d\030\010 \001(\005B\014\302\377\024\010\345\245\226\345\212\261ID\"c\n\030Sheet_GodevilPr"
    "eposetask\022G\n\031E_GodevilPreposetask_List\030\001"
    " \003(\0132\036.proto_ff.E_GodevilPreposetaskB\004\210\301"
    "\024\024\"S\n\037E_GodevilGodevillvAttributeDesc\022\026\n"
    "\006m_type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007"
    "\302\377\024\003\345\200\274\"\220\002\n\022E_GodevilGodevillv\022\030\n\004m_id\030\001"
    " \001(\003B\n\302\377\024\006\347\255\211\347\272\247\022\037\n\005m_exp\030\002 \001(\003B\020\302\377\024\014\344\270\213"
    "\347\272\247\347\273\217\351\252\214\022$\n\nm_explimit\030\003 \001(\003B\020\302\377\024\014\347\273\217\351\252"
    "\214\344\270\212\351\231\220\022\"\n\010m_itemid\030\004 \001(\005B\020\302\377\024\014\347\252\201\347\240\264\346\235\220"
    "\346\226\231\022\037\n\005m_num\030\005 \001(\005B\020\302\377\024\014\346\235\220\346\226\231\346\225\260\351\207\217\022T\n\013"
    "m_attribute\030\006 \003(\0132).proto_ff.E_GodevilGo"
    "devillvAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301"
    "\024\007\"]\n\026Sheet_GodevilGodevillv\022C\n\027E_Godevi"
    "lGodevillv_List\030\001 \003(\0132\034.proto_ff.E_Godev"
    "ilGodevillvB\004\210\301\024(\"\323\002\n\031E_GodevilGodevilpr"
    "ivilege\022\024\n\004m_id\030\001 \001(\003B\006\302\377\024\002id\022!\n\nm_oldpr"
    "ice\030\002 \001(\005B\r\302\377\024\t\345\216\237\344\273\267\345\205\203\022\036\n\nm_newprice\030\003"
    " \001(\005B\n\302\377\024\006\347\216\260\344\273\267\022\"\n\013m_rechargid\030\004 \001(\005B\r\302"
    "\377\024\t\350\256\241\350\264\271\347\202\271\022 \n\006m_type\030\005 \001(\005B\020\302\377\024\014\347\211\271\346\235\203"
    "\347\261\273\345\236\213\022\036\n\004m_lv\030\006 \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\255\211\347\272\247\022("
    "\n\016m_functiontype\030\007 \001(\005B\020\302\377\024\014\345\212\237\350\203\275\347\261\273\345\236\213"
    "\022\034\n\010m_parama\030\010 \001(\005B\n\302\377\024\006\345\217\202\346\225\260\022/\n\rm_equi"
    "pmentid\030\t \001(\005B\030\302\377\024\024\350\216\267\345\217\226\350\243\205\345\244\207\351\201\223\345\205\267ID\""
    "r\n\035Sheet_GodevilGodevilprivilege\022Q\n\036E_Go"
    "devilGodevilprivilege_List\030\001 \003(\0132#.proto"
    "_ff.E_GodevilGodevilprivilegeB\004\210\301\024(", 1355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "godevil.proto", &protobuf_RegisterTypes);
  E_GodevilPreposetask::default_instance_ = new E_GodevilPreposetask();
  Sheet_GodevilPreposetask::default_instance_ = new Sheet_GodevilPreposetask();
  E_GodevilGodevillvAttributeDesc::default_instance_ = new E_GodevilGodevillvAttributeDesc();
  E_GodevilGodevillv::default_instance_ = new E_GodevilGodevillv();
  Sheet_GodevilGodevillv::default_instance_ = new Sheet_GodevilGodevillv();
  E_GodevilGodevilprivilege::default_instance_ = new E_GodevilGodevilprivilege();
  Sheet_GodevilGodevilprivilege::default_instance_ = new Sheet_GodevilGodevilprivilege();
  E_GodevilPreposetask::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilPreposetask::default_instance_->InitAsDefaultInstance();
  E_GodevilGodevillvAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_GodevilGodevillv::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilGodevillv::default_instance_->InitAsDefaultInstance();
  E_GodevilGodevilprivilege::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilGodevilprivilege::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_godevil_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_godevil_2eproto {
  StaticDescriptorInitializer_godevil_2eproto() {
    protobuf_AddDesc_godevil_2eproto();
  }
} static_descriptor_initializer_godevil_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_GodevilPreposetask::kMIdFieldNumber;
const int E_GodevilPreposetask::kMTypeFieldNumber;
const int E_GodevilPreposetask::kMModeltypeFieldNumber;
const int E_GodevilPreposetask::kMStarttaskFieldNumber;
const int E_GodevilPreposetask::kMEndtaskFieldNumber;
const int E_GodevilPreposetask::kMConditionFieldNumber;
const int E_GodevilPreposetask::kMValueFieldNumber;
const int E_GodevilPreposetask::kMRewardidFieldNumber;
#endif  // !_MSC_VER

E_GodevilPreposetask::E_GodevilPreposetask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilPreposetask::InitAsDefaultInstance() {
}

E_GodevilPreposetask::E_GodevilPreposetask(const E_GodevilPreposetask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilPreposetask::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_modeltype_ = 0;
  m_starttask_ = 0;
  m_endtask_ = 0;
  m_condition_ = 0;
  m_value_ = 0;
  m_rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilPreposetask::~E_GodevilPreposetask() {
  SharedDtor();
}

void E_GodevilPreposetask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilPreposetask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilPreposetask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilPreposetask_descriptor_;
}

const E_GodevilPreposetask& E_GodevilPreposetask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godevil_2eproto();
  return *default_instance_;
}

E_GodevilPreposetask* E_GodevilPreposetask::default_instance_ = NULL;

E_GodevilPreposetask* E_GodevilPreposetask::New() const {
  return new E_GodevilPreposetask;
}

void E_GodevilPreposetask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_modeltype_ = 0;
    m_starttask_ = 0;
    m_endtask_ = 0;
    m_condition_ = 0;
    m_value_ = 0;
    m_rewardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilPreposetask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_modeltype;
        break;
      }

      // optional int32 m_modeltype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modeltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modeltype_)));
          set_has_m_modeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_starttask;
        break;
      }

      // optional int32 m_starttask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starttask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starttask_)));
          set_has_m_starttask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_endtask;
        break;
      }

      // optional int32 m_endtask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_endtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_endtask_)));
          set_has_m_endtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_rewardid;
        break;
      }

      // optional int32 m_rewardid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardid_)));
          set_has_m_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilPreposetask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_modeltype = 3;
  if (has_m_modeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_modeltype(), output);
  }

  // optional int32 m_starttask = 4;
  if (has_m_starttask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_starttask(), output);
  }

  // optional int32 m_endtask = 5;
  if (has_m_endtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_endtask(), output);
  }

  // optional int32 m_condition = 6;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_condition(), output);
  }

  // optional int32 m_value = 7;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_value(), output);
  }

  // optional int32 m_rewardid = 8;
  if (has_m_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilPreposetask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_modeltype = 3;
  if (has_m_modeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_modeltype(), target);
  }

  // optional int32 m_starttask = 4;
  if (has_m_starttask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_starttask(), target);
  }

  // optional int32 m_endtask = 5;
  if (has_m_endtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_endtask(), target);
  }

  // optional int32 m_condition = 6;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_condition(), target);
  }

  // optional int32 m_value = 7;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_value(), target);
  }

  // optional int32 m_rewardid = 8;
  if (has_m_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilPreposetask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_modeltype = 3;
    if (has_m_modeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modeltype());
    }

    // optional int32 m_starttask = 4;
    if (has_m_starttask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starttask());
    }

    // optional int32 m_endtask = 5;
    if (has_m_endtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_endtask());
    }

    // optional int32 m_condition = 6;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

    // optional int32 m_value = 7;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_rewardid = 8;
    if (has_m_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilPreposetask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilPreposetask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilPreposetask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilPreposetask::MergeFrom(const E_GodevilPreposetask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_modeltype()) {
      set_m_modeltype(from.m_modeltype());
    }
    if (from.has_m_starttask()) {
      set_m_starttask(from.m_starttask());
    }
    if (from.has_m_endtask()) {
      set_m_endtask(from.m_endtask());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_rewardid()) {
      set_m_rewardid(from.m_rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilPreposetask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilPreposetask::CopyFrom(const E_GodevilPreposetask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilPreposetask::IsInitialized() const {

  return true;
}

void E_GodevilPreposetask::Swap(E_GodevilPreposetask* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_modeltype_, other->m_modeltype_);
    std::swap(m_starttask_, other->m_starttask_);
    std::swap(m_endtask_, other->m_endtask_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_rewardid_, other->m_rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilPreposetask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilPreposetask_descriptor_;
  metadata.reflection = E_GodevilPreposetask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilPreposetask::kEGodevilPreposetaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilPreposetask::Sheet_GodevilPreposetask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilPreposetask::InitAsDefaultInstance() {
}

Sheet_GodevilPreposetask::Sheet_GodevilPreposetask(const Sheet_GodevilPreposetask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilPreposetask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilPreposetask::~Sheet_GodevilPreposetask() {
  SharedDtor();
}

void Sheet_GodevilPreposetask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilPreposetask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilPreposetask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilPreposetask_descriptor_;
}

const Sheet_GodevilPreposetask& Sheet_GodevilPreposetask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilPreposetask* Sheet_GodevilPreposetask::default_instance_ = NULL;

Sheet_GodevilPreposetask* Sheet_GodevilPreposetask::New() const {
  return new Sheet_GodevilPreposetask;
}

void Sheet_GodevilPreposetask::Clear() {
  e_godevilpreposetask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilPreposetask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilPreposetask E_GodevilPreposetask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilPreposetask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilpreposetask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilPreposetask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilPreposetask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilPreposetask E_GodevilPreposetask_List = 1;
  for (int i = 0; i < this->e_godevilpreposetask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilpreposetask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilPreposetask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilPreposetask E_GodevilPreposetask_List = 1;
  for (int i = 0; i < this->e_godevilpreposetask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilpreposetask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilPreposetask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilPreposetask E_GodevilPreposetask_List = 1;
  total_size += 1 * this->e_godevilpreposetask_list_size();
  for (int i = 0; i < this->e_godevilpreposetask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilpreposetask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilPreposetask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilPreposetask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilPreposetask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilPreposetask::MergeFrom(const Sheet_GodevilPreposetask& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilpreposetask_list_.MergeFrom(from.e_godevilpreposetask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilPreposetask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilPreposetask::CopyFrom(const Sheet_GodevilPreposetask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilPreposetask::IsInitialized() const {

  return true;
}

void Sheet_GodevilPreposetask::Swap(Sheet_GodevilPreposetask* other) {
  if (other != this) {
    e_godevilpreposetask_list_.Swap(&other->e_godevilpreposetask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilPreposetask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilPreposetask_descriptor_;
  metadata.reflection = Sheet_GodevilPreposetask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilGodevillvAttributeDesc::kMTypeFieldNumber;
const int E_GodevilGodevillvAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_GodevilGodevillvAttributeDesc::E_GodevilGodevillvAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilGodevillvAttributeDesc::InitAsDefaultInstance() {
}

E_GodevilGodevillvAttributeDesc::E_GodevilGodevillvAttributeDesc(const E_GodevilGodevillvAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilGodevillvAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilGodevillvAttributeDesc::~E_GodevilGodevillvAttributeDesc() {
  SharedDtor();
}

void E_GodevilGodevillvAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilGodevillvAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilGodevillvAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilGodevillvAttributeDesc_descriptor_;
}

const E_GodevilGodevillvAttributeDesc& E_GodevilGodevillvAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godevil_2eproto();
  return *default_instance_;
}

E_GodevilGodevillvAttributeDesc* E_GodevilGodevillvAttributeDesc::default_instance_ = NULL;

E_GodevilGodevillvAttributeDesc* E_GodevilGodevillvAttributeDesc::New() const {
  return new E_GodevilGodevillvAttributeDesc;
}

void E_GodevilGodevillvAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilGodevillvAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilGodevillvAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilGodevillvAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilGodevillvAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilGodevillvAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilGodevillvAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilGodevillvAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilGodevillvAttributeDesc::MergeFrom(const E_GodevilGodevillvAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilGodevillvAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilGodevillvAttributeDesc::CopyFrom(const E_GodevilGodevillvAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilGodevillvAttributeDesc::IsInitialized() const {

  return true;
}

void E_GodevilGodevillvAttributeDesc::Swap(E_GodevilGodevillvAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilGodevillvAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilGodevillvAttributeDesc_descriptor_;
  metadata.reflection = E_GodevilGodevillvAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilGodevillv::kMIdFieldNumber;
const int E_GodevilGodevillv::kMExpFieldNumber;
const int E_GodevilGodevillv::kMExplimitFieldNumber;
const int E_GodevilGodevillv::kMItemidFieldNumber;
const int E_GodevilGodevillv::kMNumFieldNumber;
const int E_GodevilGodevillv::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_GodevilGodevillv::E_GodevilGodevillv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilGodevillv::InitAsDefaultInstance() {
}

E_GodevilGodevillv::E_GodevilGodevillv(const E_GodevilGodevillv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilGodevillv::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_exp_ = GOOGLE_LONGLONG(0);
  m_explimit_ = GOOGLE_LONGLONG(0);
  m_itemid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilGodevillv::~E_GodevilGodevillv() {
  SharedDtor();
}

void E_GodevilGodevillv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilGodevillv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilGodevillv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilGodevillv_descriptor_;
}

const E_GodevilGodevillv& E_GodevilGodevillv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godevil_2eproto();
  return *default_instance_;
}

E_GodevilGodevillv* E_GodevilGodevillv::default_instance_ = NULL;

E_GodevilGodevillv* E_GodevilGodevillv::New() const {
  return new E_GodevilGodevillv;
}

void E_GodevilGodevillv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_exp_ = GOOGLE_LONGLONG(0);
    m_explimit_ = GOOGLE_LONGLONG(0);
    m_itemid_ = 0;
    m_num_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilGodevillv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int64 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_explimit;
        break;
      }

      // optional int64 m_explimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_explimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_explimit_)));
          set_has_m_explimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_GodevilGodevillvAttributeDesc m_attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilGodevillv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_exp(), output);
  }

  // optional int64 m_explimit = 3;
  if (has_m_explimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_explimit(), output);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itemid(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  // repeated .proto_ff.E_GodevilGodevillvAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilGodevillv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_exp(), target);
  }

  // optional int64 m_explimit = 3;
  if (has_m_explimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_explimit(), target);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itemid(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  // repeated .proto_ff.E_GodevilGodevillvAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilGodevillv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int64 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_exp());
    }

    // optional int64 m_explimit = 3;
    if (has_m_explimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_explimit());
    }

    // optional int32 m_itemid = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated .proto_ff.E_GodevilGodevillvAttributeDesc m_attribute = 6;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilGodevillv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilGodevillv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilGodevillv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilGodevillv::MergeFrom(const E_GodevilGodevillv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_explimit()) {
      set_m_explimit(from.m_explimit());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilGodevillv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilGodevillv::CopyFrom(const E_GodevilGodevillv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilGodevillv::IsInitialized() const {

  return true;
}

void E_GodevilGodevillv::Swap(E_GodevilGodevillv* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_explimit_, other->m_explimit_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilGodevillv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilGodevillv_descriptor_;
  metadata.reflection = E_GodevilGodevillv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilGodevillv::kEGodevilGodevillvListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilGodevillv::Sheet_GodevilGodevillv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilGodevillv::InitAsDefaultInstance() {
}

Sheet_GodevilGodevillv::Sheet_GodevilGodevillv(const Sheet_GodevilGodevillv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilGodevillv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilGodevillv::~Sheet_GodevilGodevillv() {
  SharedDtor();
}

void Sheet_GodevilGodevillv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilGodevillv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilGodevillv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilGodevillv_descriptor_;
}

const Sheet_GodevilGodevillv& Sheet_GodevilGodevillv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilGodevillv* Sheet_GodevilGodevillv::default_instance_ = NULL;

Sheet_GodevilGodevillv* Sheet_GodevilGodevillv::New() const {
  return new Sheet_GodevilGodevillv;
}

void Sheet_GodevilGodevillv::Clear() {
  e_godevilgodevillv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilGodevillv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilGodevillv E_GodevilGodevillv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilGodevillv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilgodevillv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilGodevillv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilGodevillv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilGodevillv E_GodevilGodevillv_List = 1;
  for (int i = 0; i < this->e_godevilgodevillv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilgodevillv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilGodevillv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilGodevillv E_GodevilGodevillv_List = 1;
  for (int i = 0; i < this->e_godevilgodevillv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilgodevillv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilGodevillv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilGodevillv E_GodevilGodevillv_List = 1;
  total_size += 1 * this->e_godevilgodevillv_list_size();
  for (int i = 0; i < this->e_godevilgodevillv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilgodevillv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilGodevillv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilGodevillv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilGodevillv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilGodevillv::MergeFrom(const Sheet_GodevilGodevillv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilgodevillv_list_.MergeFrom(from.e_godevilgodevillv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilGodevillv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilGodevillv::CopyFrom(const Sheet_GodevilGodevillv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilGodevillv::IsInitialized() const {

  return true;
}

void Sheet_GodevilGodevillv::Swap(Sheet_GodevilGodevillv* other) {
  if (other != this) {
    e_godevilgodevillv_list_.Swap(&other->e_godevilgodevillv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilGodevillv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilGodevillv_descriptor_;
  metadata.reflection = Sheet_GodevilGodevillv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilGodevilprivilege::kMIdFieldNumber;
const int E_GodevilGodevilprivilege::kMOldpriceFieldNumber;
const int E_GodevilGodevilprivilege::kMNewpriceFieldNumber;
const int E_GodevilGodevilprivilege::kMRechargidFieldNumber;
const int E_GodevilGodevilprivilege::kMTypeFieldNumber;
const int E_GodevilGodevilprivilege::kMLvFieldNumber;
const int E_GodevilGodevilprivilege::kMFunctiontypeFieldNumber;
const int E_GodevilGodevilprivilege::kMParamaFieldNumber;
const int E_GodevilGodevilprivilege::kMEquipmentidFieldNumber;
#endif  // !_MSC_VER

E_GodevilGodevilprivilege::E_GodevilGodevilprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilGodevilprivilege::InitAsDefaultInstance() {
}

E_GodevilGodevilprivilege::E_GodevilGodevilprivilege(const E_GodevilGodevilprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilGodevilprivilege::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_oldprice_ = 0;
  m_newprice_ = 0;
  m_rechargid_ = 0;
  m_type_ = 0;
  m_lv_ = 0;
  m_functiontype_ = 0;
  m_parama_ = 0;
  m_equipmentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilGodevilprivilege::~E_GodevilGodevilprivilege() {
  SharedDtor();
}

void E_GodevilGodevilprivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilGodevilprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilGodevilprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilGodevilprivilege_descriptor_;
}

const E_GodevilGodevilprivilege& E_GodevilGodevilprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godevil_2eproto();
  return *default_instance_;
}

E_GodevilGodevilprivilege* E_GodevilGodevilprivilege::default_instance_ = NULL;

E_GodevilGodevilprivilege* E_GodevilGodevilprivilege::New() const {
  return new E_GodevilGodevilprivilege;
}

void E_GodevilGodevilprivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_oldprice_ = 0;
    m_newprice_ = 0;
    m_rechargid_ = 0;
    m_type_ = 0;
    m_lv_ = 0;
    m_functiontype_ = 0;
    m_parama_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_equipmentid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilGodevilprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_oldprice;
        break;
      }

      // optional int32 m_oldprice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_oldprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_oldprice_)));
          set_has_m_oldprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_newprice;
        break;
      }

      // optional int32 m_newprice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_newprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_newprice_)));
          set_has_m_newprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rechargid;
        break;
      }

      // optional int32 m_rechargid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargid_)));
          set_has_m_rechargid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_functiontype;
        break;
      }

      // optional int32 m_functiontype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functiontype_)));
          set_has_m_functiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_parama;
        break;
      }

      // optional int32 m_parama = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_parama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_parama_)));
          set_has_m_parama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_equipmentid;
        break;
      }

      // optional int32 m_equipmentid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipmentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipmentid_)));
          set_has_m_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilGodevilprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_oldprice = 2;
  if (has_m_oldprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_oldprice(), output);
  }

  // optional int32 m_newprice = 3;
  if (has_m_newprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_newprice(), output);
  }

  // optional int32 m_rechargid = 4;
  if (has_m_rechargid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rechargid(), output);
  }

  // optional int32 m_type = 5;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_type(), output);
  }

  // optional int32 m_lv = 6;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lv(), output);
  }

  // optional int32 m_functiontype = 7;
  if (has_m_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_functiontype(), output);
  }

  // optional int32 m_parama = 8;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_parama(), output);
  }

  // optional int32 m_equipmentid = 9;
  if (has_m_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_equipmentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilGodevilprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_oldprice = 2;
  if (has_m_oldprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_oldprice(), target);
  }

  // optional int32 m_newprice = 3;
  if (has_m_newprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_newprice(), target);
  }

  // optional int32 m_rechargid = 4;
  if (has_m_rechargid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rechargid(), target);
  }

  // optional int32 m_type = 5;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_type(), target);
  }

  // optional int32 m_lv = 6;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lv(), target);
  }

  // optional int32 m_functiontype = 7;
  if (has_m_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_functiontype(), target);
  }

  // optional int32 m_parama = 8;
  if (has_m_parama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_parama(), target);
  }

  // optional int32 m_equipmentid = 9;
  if (has_m_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_equipmentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilGodevilprivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_oldprice = 2;
    if (has_m_oldprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_oldprice());
    }

    // optional int32 m_newprice = 3;
    if (has_m_newprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_newprice());
    }

    // optional int32 m_rechargid = 4;
    if (has_m_rechargid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargid());
    }

    // optional int32 m_type = 5;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_lv = 6;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_functiontype = 7;
    if (has_m_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functiontype());
    }

    // optional int32 m_parama = 8;
    if (has_m_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_parama());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_equipmentid = 9;
    if (has_m_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipmentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilGodevilprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilGodevilprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilGodevilprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilGodevilprivilege::MergeFrom(const E_GodevilGodevilprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_oldprice()) {
      set_m_oldprice(from.m_oldprice());
    }
    if (from.has_m_newprice()) {
      set_m_newprice(from.m_newprice());
    }
    if (from.has_m_rechargid()) {
      set_m_rechargid(from.m_rechargid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_functiontype()) {
      set_m_functiontype(from.m_functiontype());
    }
    if (from.has_m_parama()) {
      set_m_parama(from.m_parama());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_equipmentid()) {
      set_m_equipmentid(from.m_equipmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilGodevilprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilGodevilprivilege::CopyFrom(const E_GodevilGodevilprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilGodevilprivilege::IsInitialized() const {

  return true;
}

void E_GodevilGodevilprivilege::Swap(E_GodevilGodevilprivilege* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_oldprice_, other->m_oldprice_);
    std::swap(m_newprice_, other->m_newprice_);
    std::swap(m_rechargid_, other->m_rechargid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_functiontype_, other->m_functiontype_);
    std::swap(m_parama_, other->m_parama_);
    std::swap(m_equipmentid_, other->m_equipmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilGodevilprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilGodevilprivilege_descriptor_;
  metadata.reflection = E_GodevilGodevilprivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilGodevilprivilege::kEGodevilGodevilprivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilGodevilprivilege::Sheet_GodevilGodevilprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilGodevilprivilege::InitAsDefaultInstance() {
}

Sheet_GodevilGodevilprivilege::Sheet_GodevilGodevilprivilege(const Sheet_GodevilGodevilprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilGodevilprivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilGodevilprivilege::~Sheet_GodevilGodevilprivilege() {
  SharedDtor();
}

void Sheet_GodevilGodevilprivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilGodevilprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilGodevilprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilGodevilprivilege_descriptor_;
}

const Sheet_GodevilGodevilprivilege& Sheet_GodevilGodevilprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_godevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilGodevilprivilege* Sheet_GodevilGodevilprivilege::default_instance_ = NULL;

Sheet_GodevilGodevilprivilege* Sheet_GodevilGodevilprivilege::New() const {
  return new Sheet_GodevilGodevilprivilege;
}

void Sheet_GodevilGodevilprivilege::Clear() {
  e_godevilgodevilprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilGodevilprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilGodevilprivilege E_GodevilGodevilprivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilGodevilprivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilgodevilprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilGodevilprivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilGodevilprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilGodevilprivilege E_GodevilGodevilprivilege_List = 1;
  for (int i = 0; i < this->e_godevilgodevilprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilgodevilprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilGodevilprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilGodevilprivilege E_GodevilGodevilprivilege_List = 1;
  for (int i = 0; i < this->e_godevilgodevilprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilgodevilprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilGodevilprivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilGodevilprivilege E_GodevilGodevilprivilege_List = 1;
  total_size += 1 * this->e_godevilgodevilprivilege_list_size();
  for (int i = 0; i < this->e_godevilgodevilprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilgodevilprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilGodevilprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilGodevilprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilGodevilprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilGodevilprivilege::MergeFrom(const Sheet_GodevilGodevilprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilgodevilprivilege_list_.MergeFrom(from.e_godevilgodevilprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilGodevilprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilGodevilprivilege::CopyFrom(const Sheet_GodevilGodevilprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilGodevilprivilege::IsInitialized() const {

  return true;
}

void Sheet_GodevilGodevilprivilege::Swap(Sheet_GodevilGodevilprivilege* other) {
  if (other != this) {
    e_godevilgodevilprivilege_list_.Swap(&other->e_godevilgodevilprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilGodevilprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilGodevilprivilege_descriptor_;
  metadata.reflection = Sheet_GodevilGodevilprivilege_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
