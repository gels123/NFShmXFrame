// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: warland.proto

#ifndef PROTOBUF_warland_2eproto__INCLUDED
#define PROTOBUF_warland_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_warland_2eproto();
void protobuf_AssignDesc_warland_2eproto();
void protobuf_ShutdownFile_warland_2eproto();

class warlandconstant;
class Sheet_warlandconstant;
class warlandmultiKill;
class Sheet_warlandmultiKill;
class warlandrankreward;
class Sheet_warlandrankreward;

// ===================================================================

class warlandconstant : public ::google::protobuf::Message {
 public:
  warlandconstant();
  virtual ~warlandconstant();

  warlandconstant(const warlandconstant& from);

  inline warlandconstant& operator=(const warlandconstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const warlandconstant& default_instance();

  void Swap(warlandconstant* other);

  // implements Message ----------------------------------------------

  warlandconstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const warlandconstant& from);
  void MergeFrom(const warlandconstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 winscore = 2;
  inline bool has_winscore() const;
  inline void clear_winscore();
  static const int kWinscoreFieldNumber = 2;
  inline ::google::protobuf::int32 winscore() const;
  inline void set_winscore(::google::protobuf::int32 value);

  // optional int64 scoreareaID = 3;
  inline bool has_scoreareaid() const;
  inline void clear_scoreareaid();
  static const int kScoreareaIDFieldNumber = 3;
  inline ::google::protobuf::int64 scoreareaid() const;
  inline void set_scoreareaid(::google::protobuf::int64 value);

  // optional int32 OccupyScore = 4;
  inline bool has_occupyscore() const;
  inline void clear_occupyscore();
  static const int kOccupyScoreFieldNumber = 4;
  inline ::google::protobuf::int32 occupyscore() const;
  inline void set_occupyscore(::google::protobuf::int32 value);

  // optional int32 OccupyContribution = 5;
  inline bool has_occupycontribution() const;
  inline void clear_occupycontribution();
  static const int kOccupyContributionFieldNumber = 5;
  inline ::google::protobuf::int32 occupycontribution() const;
  inline void set_occupycontribution(::google::protobuf::int32 value);

  // optional int32 KillArea = 6;
  inline bool has_killarea() const;
  inline void clear_killarea();
  static const int kKillAreaFieldNumber = 6;
  inline ::google::protobuf::int32 killarea() const;
  inline void set_killarea(::google::protobuf::int32 value);

  // optional int32 KillContribution = 7;
  inline bool has_killcontribution() const;
  inline void clear_killcontribution();
  static const int kKillContributionFieldNumber = 7;
  inline ::google::protobuf::int32 killcontribution() const;
  inline void set_killcontribution(::google::protobuf::int32 value);

  // optional int32 KillRangeContribution = 8;
  inline bool has_killrangecontribution() const;
  inline void clear_killrangecontribution();
  static const int kKillRangeContributionFieldNumber = 8;
  inline ::google::protobuf::int32 killrangecontribution() const;
  inline void set_killrangecontribution(::google::protobuf::int32 value);

  // optional int32 KillRange = 9;
  inline bool has_killrange() const;
  inline void clear_killrange();
  static const int kKillRangeFieldNumber = 9;
  inline ::google::protobuf::int32 killrange() const;
  inline void set_killrange(::google::protobuf::int32 value);

  // optional int64 SkillIdA = 10;
  inline bool has_skillida() const;
  inline void clear_skillida();
  static const int kSkillIdAFieldNumber = 10;
  inline ::google::protobuf::int64 skillida() const;
  inline void set_skillida(::google::protobuf::int64 value);

  // optional int64 SkillIdB = 11;
  inline bool has_skillidb() const;
  inline void clear_skillidb();
  static const int kSkillIdBFieldNumber = 11;
  inline ::google::protobuf::int64 skillidb() const;
  inline void set_skillidb(::google::protobuf::int64 value);

  // optional int64 GuardskillId = 12;
  inline bool has_guardskillid() const;
  inline void clear_guardskillid();
  static const int kGuardskillIdFieldNumber = 12;
  inline ::google::protobuf::int64 guardskillid() const;
  inline void set_guardskillid(::google::protobuf::int64 value);

  // optional string ContinuousKillBuffId = 13;
  inline bool has_continuouskillbuffid() const;
  inline void clear_continuouskillbuffid();
  static const int kContinuousKillBuffIdFieldNumber = 13;
  inline const ::std::string& continuouskillbuffid() const;
  inline void set_continuouskillbuffid(const ::std::string& value);
  inline void set_continuouskillbuffid(const char* value);
  inline void set_continuouskillbuffid(const char* value, size_t size);
  inline ::std::string* mutable_continuouskillbuffid();
  inline ::std::string* release_continuouskillbuffid();
  inline void set_allocated_continuouskillbuffid(::std::string* continuouskillbuffid);

  // optional string WinReward = 14;
  inline bool has_winreward() const;
  inline void clear_winreward();
  static const int kWinRewardFieldNumber = 14;
  inline const ::std::string& winreward() const;
  inline void set_winreward(const ::std::string& value);
  inline void set_winreward(const char* value);
  inline void set_winreward(const char* value, size_t size);
  inline ::std::string* mutable_winreward();
  inline ::std::string* release_winreward();
  inline void set_allocated_winreward(::std::string* winreward);

  // optional string LoseReward = 15;
  inline bool has_losereward() const;
  inline void clear_losereward();
  static const int kLoseRewardFieldNumber = 15;
  inline const ::std::string& losereward() const;
  inline void set_losereward(const ::std::string& value);
  inline void set_losereward(const char* value);
  inline void set_losereward(const char* value, size_t size);
  inline ::std::string* mutable_losereward();
  inline ::std::string* release_losereward();
  inline void set_allocated_losereward(::std::string* losereward);

  // optional int64 PrepareBuff = 16;
  inline bool has_preparebuff() const;
  inline void clear_preparebuff();
  static const int kPrepareBuffFieldNumber = 16;
  inline ::google::protobuf::int64 preparebuff() const;
  inline void set_preparebuff(::google::protobuf::int64 value);

  // optional int32 PrepareTime = 17;
  inline bool has_preparetime() const;
  inline void clear_preparetime();
  static const int kPrepareTimeFieldNumber = 17;
  inline ::google::protobuf::int32 preparetime() const;
  inline void set_preparetime(::google::protobuf::int32 value);

  // optional int64 invincibleSkillId = 18;
  inline bool has_invincibleskillid() const;
  inline void clear_invincibleskillid();
  static const int kInvincibleSkillIdFieldNumber = 18;
  inline ::google::protobuf::int64 invincibleskillid() const;
  inline void set_invincibleskillid(::google::protobuf::int64 value);

  // optional int64 allplayerSkillId = 19;
  inline bool has_allplayerskillid() const;
  inline void clear_allplayerskillid();
  static const int kAllplayerSkillIdFieldNumber = 19;
  inline ::google::protobuf::int64 allplayerskillid() const;
  inline void set_allplayerskillid(::google::protobuf::int64 value);

  // optional int32 killHelpPoint = 20;
  inline bool has_killhelppoint() const;
  inline void clear_killhelppoint();
  static const int kKillHelpPointFieldNumber = 20;
  inline ::google::protobuf::int32 killhelppoint() const;
  inline void set_killhelppoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.warlandconstant)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_winscore();
  inline void clear_has_winscore();
  inline void set_has_scoreareaid();
  inline void clear_has_scoreareaid();
  inline void set_has_occupyscore();
  inline void clear_has_occupyscore();
  inline void set_has_occupycontribution();
  inline void clear_has_occupycontribution();
  inline void set_has_killarea();
  inline void clear_has_killarea();
  inline void set_has_killcontribution();
  inline void clear_has_killcontribution();
  inline void set_has_killrangecontribution();
  inline void clear_has_killrangecontribution();
  inline void set_has_killrange();
  inline void clear_has_killrange();
  inline void set_has_skillida();
  inline void clear_has_skillida();
  inline void set_has_skillidb();
  inline void clear_has_skillidb();
  inline void set_has_guardskillid();
  inline void clear_has_guardskillid();
  inline void set_has_continuouskillbuffid();
  inline void clear_has_continuouskillbuffid();
  inline void set_has_winreward();
  inline void clear_has_winreward();
  inline void set_has_losereward();
  inline void clear_has_losereward();
  inline void set_has_preparebuff();
  inline void clear_has_preparebuff();
  inline void set_has_preparetime();
  inline void clear_has_preparetime();
  inline void set_has_invincibleskillid();
  inline void clear_has_invincibleskillid();
  inline void set_has_allplayerskillid();
  inline void clear_has_allplayerskillid();
  inline void set_has_killhelppoint();
  inline void clear_has_killhelppoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 winscore_;
  ::google::protobuf::int64 scoreareaid_;
  ::google::protobuf::int32 occupyscore_;
  ::google::protobuf::int32 occupycontribution_;
  ::google::protobuf::int32 killarea_;
  ::google::protobuf::int32 killcontribution_;
  ::google::protobuf::int32 killrangecontribution_;
  ::google::protobuf::int32 killrange_;
  ::google::protobuf::int64 skillida_;
  ::google::protobuf::int64 skillidb_;
  ::google::protobuf::int64 guardskillid_;
  ::std::string* continuouskillbuffid_;
  ::std::string* winreward_;
  ::std::string* losereward_;
  ::google::protobuf::int64 preparebuff_;
  ::google::protobuf::int64 invincibleskillid_;
  ::google::protobuf::int32 preparetime_;
  ::google::protobuf::int32 killhelppoint_;
  ::google::protobuf::int64 allplayerskillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_warland_2eproto();
  friend void protobuf_AssignDesc_warland_2eproto();
  friend void protobuf_ShutdownFile_warland_2eproto();

  void InitAsDefaultInstance();
  static warlandconstant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_warlandconstant : public ::google::protobuf::Message {
 public:
  Sheet_warlandconstant();
  virtual ~Sheet_warlandconstant();

  Sheet_warlandconstant(const Sheet_warlandconstant& from);

  inline Sheet_warlandconstant& operator=(const Sheet_warlandconstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_warlandconstant& default_instance();

  void Swap(Sheet_warlandconstant* other);

  // implements Message ----------------------------------------------

  Sheet_warlandconstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_warlandconstant& from);
  void MergeFrom(const Sheet_warlandconstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.warlandconstant warlandconstant_List = 1;
  inline int warlandconstant_list_size() const;
  inline void clear_warlandconstant_list();
  static const int kWarlandconstantListFieldNumber = 1;
  inline const ::proto_ff::warlandconstant& warlandconstant_list(int index) const;
  inline ::proto_ff::warlandconstant* mutable_warlandconstant_list(int index);
  inline ::proto_ff::warlandconstant* add_warlandconstant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandconstant >&
      warlandconstant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandconstant >*
      mutable_warlandconstant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_warlandconstant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandconstant > warlandconstant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_warland_2eproto();
  friend void protobuf_AssignDesc_warland_2eproto();
  friend void protobuf_ShutdownFile_warland_2eproto();

  void InitAsDefaultInstance();
  static Sheet_warlandconstant* default_instance_;
};
// -------------------------------------------------------------------

class warlandmultiKill : public ::google::protobuf::Message {
 public:
  warlandmultiKill();
  virtual ~warlandmultiKill();

  warlandmultiKill(const warlandmultiKill& from);

  inline warlandmultiKill& operator=(const warlandmultiKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const warlandmultiKill& default_instance();

  void Swap(warlandmultiKill* other);

  // implements Message ----------------------------------------------

  warlandmultiKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const warlandmultiKill& from);
  void MergeFrom(const warlandmultiKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 multiKillNum = 1;
  inline bool has_multikillnum() const;
  inline void clear_multikillnum();
  static const int kMultiKillNumFieldNumber = 1;
  inline ::google::protobuf::int32 multikillnum() const;
  inline void set_multikillnum(::google::protobuf::int32 value);

  // optional string multiKillIcon = 2;
  inline bool has_multikillicon() const;
  inline void clear_multikillicon();
  static const int kMultiKillIconFieldNumber = 2;
  inline const ::std::string& multikillicon() const;
  inline void set_multikillicon(const ::std::string& value);
  inline void set_multikillicon(const char* value);
  inline void set_multikillicon(const char* value, size_t size);
  inline ::std::string* mutable_multikillicon();
  inline ::std::string* release_multikillicon();
  inline void set_allocated_multikillicon(::std::string* multikillicon);

  // optional int32 endMultiKillscore = 3;
  inline bool has_endmultikillscore() const;
  inline void clear_endmultikillscore();
  static const int kEndMultiKillscoreFieldNumber = 3;
  inline ::google::protobuf::int32 endmultikillscore() const;
  inline void set_endmultikillscore(::google::protobuf::int32 value);

  // optional int32 endMultiKillPoint = 4;
  inline bool has_endmultikillpoint() const;
  inline void clear_endmultikillpoint();
  static const int kEndMultiKillPointFieldNumber = 4;
  inline ::google::protobuf::int32 endmultikillpoint() const;
  inline void set_endmultikillpoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.warlandmultiKill)
 private:
  inline void set_has_multikillnum();
  inline void clear_has_multikillnum();
  inline void set_has_multikillicon();
  inline void clear_has_multikillicon();
  inline void set_has_endmultikillscore();
  inline void clear_has_endmultikillscore();
  inline void set_has_endmultikillpoint();
  inline void clear_has_endmultikillpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* multikillicon_;
  ::google::protobuf::int32 multikillnum_;
  ::google::protobuf::int32 endmultikillscore_;
  ::google::protobuf::int32 endmultikillpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_warland_2eproto();
  friend void protobuf_AssignDesc_warland_2eproto();
  friend void protobuf_ShutdownFile_warland_2eproto();

  void InitAsDefaultInstance();
  static warlandmultiKill* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_warlandmultiKill : public ::google::protobuf::Message {
 public:
  Sheet_warlandmultiKill();
  virtual ~Sheet_warlandmultiKill();

  Sheet_warlandmultiKill(const Sheet_warlandmultiKill& from);

  inline Sheet_warlandmultiKill& operator=(const Sheet_warlandmultiKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_warlandmultiKill& default_instance();

  void Swap(Sheet_warlandmultiKill* other);

  // implements Message ----------------------------------------------

  Sheet_warlandmultiKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_warlandmultiKill& from);
  void MergeFrom(const Sheet_warlandmultiKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.warlandmultiKill warlandmultiKill_List = 1;
  inline int warlandmultikill_list_size() const;
  inline void clear_warlandmultikill_list();
  static const int kWarlandmultiKillListFieldNumber = 1;
  inline const ::proto_ff::warlandmultiKill& warlandmultikill_list(int index) const;
  inline ::proto_ff::warlandmultiKill* mutable_warlandmultikill_list(int index);
  inline ::proto_ff::warlandmultiKill* add_warlandmultikill_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandmultiKill >&
      warlandmultikill_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandmultiKill >*
      mutable_warlandmultikill_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_warlandmultiKill)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandmultiKill > warlandmultikill_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_warland_2eproto();
  friend void protobuf_AssignDesc_warland_2eproto();
  friend void protobuf_ShutdownFile_warland_2eproto();

  void InitAsDefaultInstance();
  static Sheet_warlandmultiKill* default_instance_;
};
// -------------------------------------------------------------------

class warlandrankreward : public ::google::protobuf::Message {
 public:
  warlandrankreward();
  virtual ~warlandrankreward();

  warlandrankreward(const warlandrankreward& from);

  inline warlandrankreward& operator=(const warlandrankreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const warlandrankreward& default_instance();

  void Swap(warlandrankreward* other);

  // implements Message ----------------------------------------------

  warlandrankreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const warlandrankreward& from);
  void MergeFrom(const warlandrankreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 stageId = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIdFieldNumber = 1;
  inline ::google::protobuf::int32 stageid() const;
  inline void set_stageid(::google::protobuf::int32 value);

  // optional int32 MinRanking = 2;
  inline bool has_minranking() const;
  inline void clear_minranking();
  static const int kMinRankingFieldNumber = 2;
  inline ::google::protobuf::int32 minranking() const;
  inline void set_minranking(::google::protobuf::int32 value);

  // optional int32 MaxRanking = 3;
  inline bool has_maxranking() const;
  inline void clear_maxranking();
  static const int kMaxRankingFieldNumber = 3;
  inline ::google::protobuf::int32 maxranking() const;
  inline void set_maxranking(::google::protobuf::int32 value);

  // optional string Reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // @@protoc_insertion_point(class_scope:proto_ff.warlandrankreward)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_minranking();
  inline void clear_has_minranking();
  inline void set_has_maxranking();
  inline void clear_has_maxranking();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stageid_;
  ::google::protobuf::int32 minranking_;
  ::std::string* reward_;
  ::google::protobuf::int32 maxranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_warland_2eproto();
  friend void protobuf_AssignDesc_warland_2eproto();
  friend void protobuf_ShutdownFile_warland_2eproto();

  void InitAsDefaultInstance();
  static warlandrankreward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_warlandrankreward : public ::google::protobuf::Message {
 public:
  Sheet_warlandrankreward();
  virtual ~Sheet_warlandrankreward();

  Sheet_warlandrankreward(const Sheet_warlandrankreward& from);

  inline Sheet_warlandrankreward& operator=(const Sheet_warlandrankreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_warlandrankreward& default_instance();

  void Swap(Sheet_warlandrankreward* other);

  // implements Message ----------------------------------------------

  Sheet_warlandrankreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_warlandrankreward& from);
  void MergeFrom(const Sheet_warlandrankreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.warlandrankreward warlandrankreward_List = 1;
  inline int warlandrankreward_list_size() const;
  inline void clear_warlandrankreward_list();
  static const int kWarlandrankrewardListFieldNumber = 1;
  inline const ::proto_ff::warlandrankreward& warlandrankreward_list(int index) const;
  inline ::proto_ff::warlandrankreward* mutable_warlandrankreward_list(int index);
  inline ::proto_ff::warlandrankreward* add_warlandrankreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandrankreward >&
      warlandrankreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandrankreward >*
      mutable_warlandrankreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_warlandrankreward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandrankreward > warlandrankreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_warland_2eproto();
  friend void protobuf_AssignDesc_warland_2eproto();
  friend void protobuf_ShutdownFile_warland_2eproto();

  void InitAsDefaultInstance();
  static Sheet_warlandrankreward* default_instance_;
};
// ===================================================================


// ===================================================================

// warlandconstant

// optional int32 id = 1;
inline bool warlandconstant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void warlandconstant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void warlandconstant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void warlandconstant::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 warlandconstant::id() const {
  return id_;
}
inline void warlandconstant::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 winscore = 2;
inline bool warlandconstant::has_winscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void warlandconstant::set_has_winscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void warlandconstant::clear_has_winscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void warlandconstant::clear_winscore() {
  winscore_ = 0;
  clear_has_winscore();
}
inline ::google::protobuf::int32 warlandconstant::winscore() const {
  return winscore_;
}
inline void warlandconstant::set_winscore(::google::protobuf::int32 value) {
  set_has_winscore();
  winscore_ = value;
}

// optional int64 scoreareaID = 3;
inline bool warlandconstant::has_scoreareaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void warlandconstant::set_has_scoreareaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void warlandconstant::clear_has_scoreareaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void warlandconstant::clear_scoreareaid() {
  scoreareaid_ = GOOGLE_LONGLONG(0);
  clear_has_scoreareaid();
}
inline ::google::protobuf::int64 warlandconstant::scoreareaid() const {
  return scoreareaid_;
}
inline void warlandconstant::set_scoreareaid(::google::protobuf::int64 value) {
  set_has_scoreareaid();
  scoreareaid_ = value;
}

// optional int32 OccupyScore = 4;
inline bool warlandconstant::has_occupyscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void warlandconstant::set_has_occupyscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void warlandconstant::clear_has_occupyscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void warlandconstant::clear_occupyscore() {
  occupyscore_ = 0;
  clear_has_occupyscore();
}
inline ::google::protobuf::int32 warlandconstant::occupyscore() const {
  return occupyscore_;
}
inline void warlandconstant::set_occupyscore(::google::protobuf::int32 value) {
  set_has_occupyscore();
  occupyscore_ = value;
}

// optional int32 OccupyContribution = 5;
inline bool warlandconstant::has_occupycontribution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void warlandconstant::set_has_occupycontribution() {
  _has_bits_[0] |= 0x00000010u;
}
inline void warlandconstant::clear_has_occupycontribution() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void warlandconstant::clear_occupycontribution() {
  occupycontribution_ = 0;
  clear_has_occupycontribution();
}
inline ::google::protobuf::int32 warlandconstant::occupycontribution() const {
  return occupycontribution_;
}
inline void warlandconstant::set_occupycontribution(::google::protobuf::int32 value) {
  set_has_occupycontribution();
  occupycontribution_ = value;
}

// optional int32 KillArea = 6;
inline bool warlandconstant::has_killarea() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void warlandconstant::set_has_killarea() {
  _has_bits_[0] |= 0x00000020u;
}
inline void warlandconstant::clear_has_killarea() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void warlandconstant::clear_killarea() {
  killarea_ = 0;
  clear_has_killarea();
}
inline ::google::protobuf::int32 warlandconstant::killarea() const {
  return killarea_;
}
inline void warlandconstant::set_killarea(::google::protobuf::int32 value) {
  set_has_killarea();
  killarea_ = value;
}

// optional int32 KillContribution = 7;
inline bool warlandconstant::has_killcontribution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void warlandconstant::set_has_killcontribution() {
  _has_bits_[0] |= 0x00000040u;
}
inline void warlandconstant::clear_has_killcontribution() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void warlandconstant::clear_killcontribution() {
  killcontribution_ = 0;
  clear_has_killcontribution();
}
inline ::google::protobuf::int32 warlandconstant::killcontribution() const {
  return killcontribution_;
}
inline void warlandconstant::set_killcontribution(::google::protobuf::int32 value) {
  set_has_killcontribution();
  killcontribution_ = value;
}

// optional int32 KillRangeContribution = 8;
inline bool warlandconstant::has_killrangecontribution() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void warlandconstant::set_has_killrangecontribution() {
  _has_bits_[0] |= 0x00000080u;
}
inline void warlandconstant::clear_has_killrangecontribution() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void warlandconstant::clear_killrangecontribution() {
  killrangecontribution_ = 0;
  clear_has_killrangecontribution();
}
inline ::google::protobuf::int32 warlandconstant::killrangecontribution() const {
  return killrangecontribution_;
}
inline void warlandconstant::set_killrangecontribution(::google::protobuf::int32 value) {
  set_has_killrangecontribution();
  killrangecontribution_ = value;
}

// optional int32 KillRange = 9;
inline bool warlandconstant::has_killrange() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void warlandconstant::set_has_killrange() {
  _has_bits_[0] |= 0x00000100u;
}
inline void warlandconstant::clear_has_killrange() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void warlandconstant::clear_killrange() {
  killrange_ = 0;
  clear_has_killrange();
}
inline ::google::protobuf::int32 warlandconstant::killrange() const {
  return killrange_;
}
inline void warlandconstant::set_killrange(::google::protobuf::int32 value) {
  set_has_killrange();
  killrange_ = value;
}

// optional int64 SkillIdA = 10;
inline bool warlandconstant::has_skillida() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void warlandconstant::set_has_skillida() {
  _has_bits_[0] |= 0x00000200u;
}
inline void warlandconstant::clear_has_skillida() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void warlandconstant::clear_skillida() {
  skillida_ = GOOGLE_LONGLONG(0);
  clear_has_skillida();
}
inline ::google::protobuf::int64 warlandconstant::skillida() const {
  return skillida_;
}
inline void warlandconstant::set_skillida(::google::protobuf::int64 value) {
  set_has_skillida();
  skillida_ = value;
}

// optional int64 SkillIdB = 11;
inline bool warlandconstant::has_skillidb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void warlandconstant::set_has_skillidb() {
  _has_bits_[0] |= 0x00000400u;
}
inline void warlandconstant::clear_has_skillidb() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void warlandconstant::clear_skillidb() {
  skillidb_ = GOOGLE_LONGLONG(0);
  clear_has_skillidb();
}
inline ::google::protobuf::int64 warlandconstant::skillidb() const {
  return skillidb_;
}
inline void warlandconstant::set_skillidb(::google::protobuf::int64 value) {
  set_has_skillidb();
  skillidb_ = value;
}

// optional int64 GuardskillId = 12;
inline bool warlandconstant::has_guardskillid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void warlandconstant::set_has_guardskillid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void warlandconstant::clear_has_guardskillid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void warlandconstant::clear_guardskillid() {
  guardskillid_ = GOOGLE_LONGLONG(0);
  clear_has_guardskillid();
}
inline ::google::protobuf::int64 warlandconstant::guardskillid() const {
  return guardskillid_;
}
inline void warlandconstant::set_guardskillid(::google::protobuf::int64 value) {
  set_has_guardskillid();
  guardskillid_ = value;
}

// optional string ContinuousKillBuffId = 13;
inline bool warlandconstant::has_continuouskillbuffid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void warlandconstant::set_has_continuouskillbuffid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void warlandconstant::clear_has_continuouskillbuffid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void warlandconstant::clear_continuouskillbuffid() {
  if (continuouskillbuffid_ != &::google::protobuf::internal::kEmptyString) {
    continuouskillbuffid_->clear();
  }
  clear_has_continuouskillbuffid();
}
inline const ::std::string& warlandconstant::continuouskillbuffid() const {
  return *continuouskillbuffid_;
}
inline void warlandconstant::set_continuouskillbuffid(const ::std::string& value) {
  set_has_continuouskillbuffid();
  if (continuouskillbuffid_ == &::google::protobuf::internal::kEmptyString) {
    continuouskillbuffid_ = new ::std::string;
  }
  continuouskillbuffid_->assign(value);
}
inline void warlandconstant::set_continuouskillbuffid(const char* value) {
  set_has_continuouskillbuffid();
  if (continuouskillbuffid_ == &::google::protobuf::internal::kEmptyString) {
    continuouskillbuffid_ = new ::std::string;
  }
  continuouskillbuffid_->assign(value);
}
inline void warlandconstant::set_continuouskillbuffid(const char* value, size_t size) {
  set_has_continuouskillbuffid();
  if (continuouskillbuffid_ == &::google::protobuf::internal::kEmptyString) {
    continuouskillbuffid_ = new ::std::string;
  }
  continuouskillbuffid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* warlandconstant::mutable_continuouskillbuffid() {
  set_has_continuouskillbuffid();
  if (continuouskillbuffid_ == &::google::protobuf::internal::kEmptyString) {
    continuouskillbuffid_ = new ::std::string;
  }
  return continuouskillbuffid_;
}
inline ::std::string* warlandconstant::release_continuouskillbuffid() {
  clear_has_continuouskillbuffid();
  if (continuouskillbuffid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = continuouskillbuffid_;
    continuouskillbuffid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void warlandconstant::set_allocated_continuouskillbuffid(::std::string* continuouskillbuffid) {
  if (continuouskillbuffid_ != &::google::protobuf::internal::kEmptyString) {
    delete continuouskillbuffid_;
  }
  if (continuouskillbuffid) {
    set_has_continuouskillbuffid();
    continuouskillbuffid_ = continuouskillbuffid;
  } else {
    clear_has_continuouskillbuffid();
    continuouskillbuffid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string WinReward = 14;
inline bool warlandconstant::has_winreward() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void warlandconstant::set_has_winreward() {
  _has_bits_[0] |= 0x00002000u;
}
inline void warlandconstant::clear_has_winreward() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void warlandconstant::clear_winreward() {
  if (winreward_ != &::google::protobuf::internal::kEmptyString) {
    winreward_->clear();
  }
  clear_has_winreward();
}
inline const ::std::string& warlandconstant::winreward() const {
  return *winreward_;
}
inline void warlandconstant::set_winreward(const ::std::string& value) {
  set_has_winreward();
  if (winreward_ == &::google::protobuf::internal::kEmptyString) {
    winreward_ = new ::std::string;
  }
  winreward_->assign(value);
}
inline void warlandconstant::set_winreward(const char* value) {
  set_has_winreward();
  if (winreward_ == &::google::protobuf::internal::kEmptyString) {
    winreward_ = new ::std::string;
  }
  winreward_->assign(value);
}
inline void warlandconstant::set_winreward(const char* value, size_t size) {
  set_has_winreward();
  if (winreward_ == &::google::protobuf::internal::kEmptyString) {
    winreward_ = new ::std::string;
  }
  winreward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* warlandconstant::mutable_winreward() {
  set_has_winreward();
  if (winreward_ == &::google::protobuf::internal::kEmptyString) {
    winreward_ = new ::std::string;
  }
  return winreward_;
}
inline ::std::string* warlandconstant::release_winreward() {
  clear_has_winreward();
  if (winreward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winreward_;
    winreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void warlandconstant::set_allocated_winreward(::std::string* winreward) {
  if (winreward_ != &::google::protobuf::internal::kEmptyString) {
    delete winreward_;
  }
  if (winreward) {
    set_has_winreward();
    winreward_ = winreward;
  } else {
    clear_has_winreward();
    winreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string LoseReward = 15;
inline bool warlandconstant::has_losereward() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void warlandconstant::set_has_losereward() {
  _has_bits_[0] |= 0x00004000u;
}
inline void warlandconstant::clear_has_losereward() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void warlandconstant::clear_losereward() {
  if (losereward_ != &::google::protobuf::internal::kEmptyString) {
    losereward_->clear();
  }
  clear_has_losereward();
}
inline const ::std::string& warlandconstant::losereward() const {
  return *losereward_;
}
inline void warlandconstant::set_losereward(const ::std::string& value) {
  set_has_losereward();
  if (losereward_ == &::google::protobuf::internal::kEmptyString) {
    losereward_ = new ::std::string;
  }
  losereward_->assign(value);
}
inline void warlandconstant::set_losereward(const char* value) {
  set_has_losereward();
  if (losereward_ == &::google::protobuf::internal::kEmptyString) {
    losereward_ = new ::std::string;
  }
  losereward_->assign(value);
}
inline void warlandconstant::set_losereward(const char* value, size_t size) {
  set_has_losereward();
  if (losereward_ == &::google::protobuf::internal::kEmptyString) {
    losereward_ = new ::std::string;
  }
  losereward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* warlandconstant::mutable_losereward() {
  set_has_losereward();
  if (losereward_ == &::google::protobuf::internal::kEmptyString) {
    losereward_ = new ::std::string;
  }
  return losereward_;
}
inline ::std::string* warlandconstant::release_losereward() {
  clear_has_losereward();
  if (losereward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = losereward_;
    losereward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void warlandconstant::set_allocated_losereward(::std::string* losereward) {
  if (losereward_ != &::google::protobuf::internal::kEmptyString) {
    delete losereward_;
  }
  if (losereward) {
    set_has_losereward();
    losereward_ = losereward;
  } else {
    clear_has_losereward();
    losereward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 PrepareBuff = 16;
inline bool warlandconstant::has_preparebuff() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void warlandconstant::set_has_preparebuff() {
  _has_bits_[0] |= 0x00008000u;
}
inline void warlandconstant::clear_has_preparebuff() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void warlandconstant::clear_preparebuff() {
  preparebuff_ = GOOGLE_LONGLONG(0);
  clear_has_preparebuff();
}
inline ::google::protobuf::int64 warlandconstant::preparebuff() const {
  return preparebuff_;
}
inline void warlandconstant::set_preparebuff(::google::protobuf::int64 value) {
  set_has_preparebuff();
  preparebuff_ = value;
}

// optional int32 PrepareTime = 17;
inline bool warlandconstant::has_preparetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void warlandconstant::set_has_preparetime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void warlandconstant::clear_has_preparetime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void warlandconstant::clear_preparetime() {
  preparetime_ = 0;
  clear_has_preparetime();
}
inline ::google::protobuf::int32 warlandconstant::preparetime() const {
  return preparetime_;
}
inline void warlandconstant::set_preparetime(::google::protobuf::int32 value) {
  set_has_preparetime();
  preparetime_ = value;
}

// optional int64 invincibleSkillId = 18;
inline bool warlandconstant::has_invincibleskillid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void warlandconstant::set_has_invincibleskillid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void warlandconstant::clear_has_invincibleskillid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void warlandconstant::clear_invincibleskillid() {
  invincibleskillid_ = GOOGLE_LONGLONG(0);
  clear_has_invincibleskillid();
}
inline ::google::protobuf::int64 warlandconstant::invincibleskillid() const {
  return invincibleskillid_;
}
inline void warlandconstant::set_invincibleskillid(::google::protobuf::int64 value) {
  set_has_invincibleskillid();
  invincibleskillid_ = value;
}

// optional int64 allplayerSkillId = 19;
inline bool warlandconstant::has_allplayerskillid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void warlandconstant::set_has_allplayerskillid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void warlandconstant::clear_has_allplayerskillid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void warlandconstant::clear_allplayerskillid() {
  allplayerskillid_ = GOOGLE_LONGLONG(0);
  clear_has_allplayerskillid();
}
inline ::google::protobuf::int64 warlandconstant::allplayerskillid() const {
  return allplayerskillid_;
}
inline void warlandconstant::set_allplayerskillid(::google::protobuf::int64 value) {
  set_has_allplayerskillid();
  allplayerskillid_ = value;
}

// optional int32 killHelpPoint = 20;
inline bool warlandconstant::has_killhelppoint() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void warlandconstant::set_has_killhelppoint() {
  _has_bits_[0] |= 0x00080000u;
}
inline void warlandconstant::clear_has_killhelppoint() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void warlandconstant::clear_killhelppoint() {
  killhelppoint_ = 0;
  clear_has_killhelppoint();
}
inline ::google::protobuf::int32 warlandconstant::killhelppoint() const {
  return killhelppoint_;
}
inline void warlandconstant::set_killhelppoint(::google::protobuf::int32 value) {
  set_has_killhelppoint();
  killhelppoint_ = value;
}

// -------------------------------------------------------------------

// Sheet_warlandconstant

// repeated .proto_ff.warlandconstant warlandconstant_List = 1;
inline int Sheet_warlandconstant::warlandconstant_list_size() const {
  return warlandconstant_list_.size();
}
inline void Sheet_warlandconstant::clear_warlandconstant_list() {
  warlandconstant_list_.Clear();
}
inline const ::proto_ff::warlandconstant& Sheet_warlandconstant::warlandconstant_list(int index) const {
  return warlandconstant_list_.Get(index);
}
inline ::proto_ff::warlandconstant* Sheet_warlandconstant::mutable_warlandconstant_list(int index) {
  return warlandconstant_list_.Mutable(index);
}
inline ::proto_ff::warlandconstant* Sheet_warlandconstant::add_warlandconstant_list() {
  return warlandconstant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandconstant >&
Sheet_warlandconstant::warlandconstant_list() const {
  return warlandconstant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandconstant >*
Sheet_warlandconstant::mutable_warlandconstant_list() {
  return &warlandconstant_list_;
}

// -------------------------------------------------------------------

// warlandmultiKill

// optional int32 multiKillNum = 1;
inline bool warlandmultiKill::has_multikillnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void warlandmultiKill::set_has_multikillnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void warlandmultiKill::clear_has_multikillnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void warlandmultiKill::clear_multikillnum() {
  multikillnum_ = 0;
  clear_has_multikillnum();
}
inline ::google::protobuf::int32 warlandmultiKill::multikillnum() const {
  return multikillnum_;
}
inline void warlandmultiKill::set_multikillnum(::google::protobuf::int32 value) {
  set_has_multikillnum();
  multikillnum_ = value;
}

// optional string multiKillIcon = 2;
inline bool warlandmultiKill::has_multikillicon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void warlandmultiKill::set_has_multikillicon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void warlandmultiKill::clear_has_multikillicon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void warlandmultiKill::clear_multikillicon() {
  if (multikillicon_ != &::google::protobuf::internal::kEmptyString) {
    multikillicon_->clear();
  }
  clear_has_multikillicon();
}
inline const ::std::string& warlandmultiKill::multikillicon() const {
  return *multikillicon_;
}
inline void warlandmultiKill::set_multikillicon(const ::std::string& value) {
  set_has_multikillicon();
  if (multikillicon_ == &::google::protobuf::internal::kEmptyString) {
    multikillicon_ = new ::std::string;
  }
  multikillicon_->assign(value);
}
inline void warlandmultiKill::set_multikillicon(const char* value) {
  set_has_multikillicon();
  if (multikillicon_ == &::google::protobuf::internal::kEmptyString) {
    multikillicon_ = new ::std::string;
  }
  multikillicon_->assign(value);
}
inline void warlandmultiKill::set_multikillicon(const char* value, size_t size) {
  set_has_multikillicon();
  if (multikillicon_ == &::google::protobuf::internal::kEmptyString) {
    multikillicon_ = new ::std::string;
  }
  multikillicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* warlandmultiKill::mutable_multikillicon() {
  set_has_multikillicon();
  if (multikillicon_ == &::google::protobuf::internal::kEmptyString) {
    multikillicon_ = new ::std::string;
  }
  return multikillicon_;
}
inline ::std::string* warlandmultiKill::release_multikillicon() {
  clear_has_multikillicon();
  if (multikillicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = multikillicon_;
    multikillicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void warlandmultiKill::set_allocated_multikillicon(::std::string* multikillicon) {
  if (multikillicon_ != &::google::protobuf::internal::kEmptyString) {
    delete multikillicon_;
  }
  if (multikillicon) {
    set_has_multikillicon();
    multikillicon_ = multikillicon;
  } else {
    clear_has_multikillicon();
    multikillicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 endMultiKillscore = 3;
inline bool warlandmultiKill::has_endmultikillscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void warlandmultiKill::set_has_endmultikillscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void warlandmultiKill::clear_has_endmultikillscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void warlandmultiKill::clear_endmultikillscore() {
  endmultikillscore_ = 0;
  clear_has_endmultikillscore();
}
inline ::google::protobuf::int32 warlandmultiKill::endmultikillscore() const {
  return endmultikillscore_;
}
inline void warlandmultiKill::set_endmultikillscore(::google::protobuf::int32 value) {
  set_has_endmultikillscore();
  endmultikillscore_ = value;
}

// optional int32 endMultiKillPoint = 4;
inline bool warlandmultiKill::has_endmultikillpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void warlandmultiKill::set_has_endmultikillpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void warlandmultiKill::clear_has_endmultikillpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void warlandmultiKill::clear_endmultikillpoint() {
  endmultikillpoint_ = 0;
  clear_has_endmultikillpoint();
}
inline ::google::protobuf::int32 warlandmultiKill::endmultikillpoint() const {
  return endmultikillpoint_;
}
inline void warlandmultiKill::set_endmultikillpoint(::google::protobuf::int32 value) {
  set_has_endmultikillpoint();
  endmultikillpoint_ = value;
}

// -------------------------------------------------------------------

// Sheet_warlandmultiKill

// repeated .proto_ff.warlandmultiKill warlandmultiKill_List = 1;
inline int Sheet_warlandmultiKill::warlandmultikill_list_size() const {
  return warlandmultikill_list_.size();
}
inline void Sheet_warlandmultiKill::clear_warlandmultikill_list() {
  warlandmultikill_list_.Clear();
}
inline const ::proto_ff::warlandmultiKill& Sheet_warlandmultiKill::warlandmultikill_list(int index) const {
  return warlandmultikill_list_.Get(index);
}
inline ::proto_ff::warlandmultiKill* Sheet_warlandmultiKill::mutable_warlandmultikill_list(int index) {
  return warlandmultikill_list_.Mutable(index);
}
inline ::proto_ff::warlandmultiKill* Sheet_warlandmultiKill::add_warlandmultikill_list() {
  return warlandmultikill_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandmultiKill >&
Sheet_warlandmultiKill::warlandmultikill_list() const {
  return warlandmultikill_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandmultiKill >*
Sheet_warlandmultiKill::mutable_warlandmultikill_list() {
  return &warlandmultikill_list_;
}

// -------------------------------------------------------------------

// warlandrankreward

// optional int32 stageId = 1;
inline bool warlandrankreward::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void warlandrankreward::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void warlandrankreward::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void warlandrankreward::clear_stageid() {
  stageid_ = 0;
  clear_has_stageid();
}
inline ::google::protobuf::int32 warlandrankreward::stageid() const {
  return stageid_;
}
inline void warlandrankreward::set_stageid(::google::protobuf::int32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional int32 MinRanking = 2;
inline bool warlandrankreward::has_minranking() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void warlandrankreward::set_has_minranking() {
  _has_bits_[0] |= 0x00000002u;
}
inline void warlandrankreward::clear_has_minranking() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void warlandrankreward::clear_minranking() {
  minranking_ = 0;
  clear_has_minranking();
}
inline ::google::protobuf::int32 warlandrankreward::minranking() const {
  return minranking_;
}
inline void warlandrankreward::set_minranking(::google::protobuf::int32 value) {
  set_has_minranking();
  minranking_ = value;
}

// optional int32 MaxRanking = 3;
inline bool warlandrankreward::has_maxranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void warlandrankreward::set_has_maxranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void warlandrankreward::clear_has_maxranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void warlandrankreward::clear_maxranking() {
  maxranking_ = 0;
  clear_has_maxranking();
}
inline ::google::protobuf::int32 warlandrankreward::maxranking() const {
  return maxranking_;
}
inline void warlandrankreward::set_maxranking(::google::protobuf::int32 value) {
  set_has_maxranking();
  maxranking_ = value;
}

// optional string Reward = 4;
inline bool warlandrankreward::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void warlandrankreward::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void warlandrankreward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void warlandrankreward::clear_reward() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& warlandrankreward::reward() const {
  return *reward_;
}
inline void warlandrankreward::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void warlandrankreward::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void warlandrankreward::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* warlandrankreward::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  return reward_;
}
inline ::std::string* warlandrankreward::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void warlandrankreward::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_warlandrankreward

// repeated .proto_ff.warlandrankreward warlandrankreward_List = 1;
inline int Sheet_warlandrankreward::warlandrankreward_list_size() const {
  return warlandrankreward_list_.size();
}
inline void Sheet_warlandrankreward::clear_warlandrankreward_list() {
  warlandrankreward_list_.Clear();
}
inline const ::proto_ff::warlandrankreward& Sheet_warlandrankreward::warlandrankreward_list(int index) const {
  return warlandrankreward_list_.Get(index);
}
inline ::proto_ff::warlandrankreward* Sheet_warlandrankreward::mutable_warlandrankreward_list(int index) {
  return warlandrankreward_list_.Mutable(index);
}
inline ::proto_ff::warlandrankreward* Sheet_warlandrankreward::add_warlandrankreward_list() {
  return warlandrankreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandrankreward >&
Sheet_warlandrankreward::warlandrankreward_list() const {
  return warlandrankreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::warlandrankreward >*
Sheet_warlandrankreward::mutable_warlandrankreward_list() {
  return &warlandrankreward_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_warland_2eproto__INCLUDED
