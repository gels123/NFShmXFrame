// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meditation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "meditation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_MeditationMeditationAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MeditationMeditationAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MeditationMeditationActiveattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MeditationMeditationActiveattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MeditationMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MeditationMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MeditationMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MeditationMeditation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_meditation_2eproto() {
  protobuf_AddDesc_meditation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "meditation.proto");
  GOOGLE_CHECK(file != NULL);
  E_MeditationMeditationAttributeDesc_descriptor_ = file->message_type(0);
  static const int E_MeditationMeditationAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditationAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditationAttributeDesc, m_value_),
  };
  E_MeditationMeditationAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MeditationMeditationAttributeDesc_descriptor_,
      E_MeditationMeditationAttributeDesc::default_instance_,
      E_MeditationMeditationAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditationAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditationAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MeditationMeditationAttributeDesc));
  E_MeditationMeditationActiveattributeDesc_descriptor_ = file->message_type(1);
  static const int E_MeditationMeditationActiveattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditationActiveattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditationActiveattributeDesc, m_value_),
  };
  E_MeditationMeditationActiveattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MeditationMeditationActiveattributeDesc_descriptor_,
      E_MeditationMeditationActiveattributeDesc::default_instance_,
      E_MeditationMeditationActiveattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditationActiveattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditationActiveattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MeditationMeditationActiveattributeDesc));
  E_MeditationMeditation_descriptor_ = file->message_type(2);
  static const int E_MeditationMeditation_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_professionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, m_activeattribute_),
  };
  E_MeditationMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MeditationMeditation_descriptor_,
      E_MeditationMeditation::default_instance_,
      E_MeditationMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MeditationMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MeditationMeditation));
  Sheet_MeditationMeditation_descriptor_ = file->message_type(3);
  static const int Sheet_MeditationMeditation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MeditationMeditation, e_meditationmeditation_list_),
  };
  Sheet_MeditationMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MeditationMeditation_descriptor_,
      Sheet_MeditationMeditation::default_instance_,
      Sheet_MeditationMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MeditationMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MeditationMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MeditationMeditation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_meditation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MeditationMeditationAttributeDesc_descriptor_, &E_MeditationMeditationAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MeditationMeditationActiveattributeDesc_descriptor_, &E_MeditationMeditationActiveattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MeditationMeditation_descriptor_, &E_MeditationMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MeditationMeditation_descriptor_, &Sheet_MeditationMeditation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_meditation_2eproto() {
  delete E_MeditationMeditationAttributeDesc::default_instance_;
  delete E_MeditationMeditationAttributeDesc_reflection_;
  delete E_MeditationMeditationActiveattributeDesc::default_instance_;
  delete E_MeditationMeditationActiveattributeDesc_reflection_;
  delete E_MeditationMeditation::default_instance_;
  delete E_MeditationMeditation_reflection_;
  delete Sheet_MeditationMeditation::default_instance_;
  delete Sheet_MeditationMeditation_reflection_;
}

void protobuf_AddDesc_meditation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020meditation.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"[\n#E_MeditationMeditationAtt"
    "ributeDesc\022\032\n\006m_type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\030"
    "\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"a\n)E_Meditation"
    "MeditationActiveattributeDesc\022\032\n\006m_type\030"
    "\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003"
    "\345\200\274\"\245\005\n\026E_MeditationMeditation\022\032\n\004m_id\030\001"
    " \001(\003B\014\302\377\024\010\346\211\223\345\235\220ID\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014"
    "\346\211\223\345\235\220\345\220\215\347\247\260\220\301\024<\022 \n\006m_type\030\003 \001(\005B\020\302\377\024\014\345\244"
    "\226\350\247\202\347\261\273\345\236\213\022#\n\tm_quality\030\004 \001(\005B\020\302\377\024\014\346\211\223\345\235"
    "\220\345\223\201\350\264\250\022/\n\021m_professionlimit\030\005 \001(\tB\024\302\377\024\014"
    "\350\201\214\344\270\232\351\231\220\345\210\266\220\301\024<\022,\n\020m_activationitem\030\006 \001"
    "(\003B\022\302\377\024\016\346\277\200\346\264\273\351\201\223\345\205\267ID\022/\n\017m_activationnu"
    "m\030\007 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\022$\n\010m_sta"
    "rid\030\010 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022.\n\tm_starn"
    "um\030\t \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\254\002\022(\n"
    "\010m_starup\030\n \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022"
    ">\n\tm_starber\030\013 \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345\261\236\346"
    "\200\247\345\242\236\345\212\240\347\232\204\347\231\276\345\210\206\346\257\224\345\200\274\022R\n\013m_attribute\030\014"
    " \003(\0132-.proto_ff.E_MeditationMeditationAt"
    "tributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006\022^\n\021m_activea"
    "ttribute\030\r \003(\01323.proto_ff.E_MeditationMe"
    "ditationActiveattributeDescB\016\302\377\024\006\345\261\236\346\200\247\210"
    "\301\024\006\"i\n\032Sheet_MeditationMeditation\022K\n\033E_M"
    "editationMeditation_List\030\001 \003(\0132 .proto_f"
    "f.E_MeditationMeditationB\004\210\301\024\024", 1030);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "meditation.proto", &protobuf_RegisterTypes);
  E_MeditationMeditationAttributeDesc::default_instance_ = new E_MeditationMeditationAttributeDesc();
  E_MeditationMeditationActiveattributeDesc::default_instance_ = new E_MeditationMeditationActiveattributeDesc();
  E_MeditationMeditation::default_instance_ = new E_MeditationMeditation();
  Sheet_MeditationMeditation::default_instance_ = new Sheet_MeditationMeditation();
  E_MeditationMeditationAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_MeditationMeditationActiveattributeDesc::default_instance_->InitAsDefaultInstance();
  E_MeditationMeditation::default_instance_->InitAsDefaultInstance();
  Sheet_MeditationMeditation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_meditation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_meditation_2eproto {
  StaticDescriptorInitializer_meditation_2eproto() {
    protobuf_AddDesc_meditation_2eproto();
  }
} static_descriptor_initializer_meditation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_MeditationMeditationAttributeDesc::kMTypeFieldNumber;
const int E_MeditationMeditationAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_MeditationMeditationAttributeDesc::E_MeditationMeditationAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MeditationMeditationAttributeDesc::InitAsDefaultInstance() {
}

E_MeditationMeditationAttributeDesc::E_MeditationMeditationAttributeDesc(const E_MeditationMeditationAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MeditationMeditationAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MeditationMeditationAttributeDesc::~E_MeditationMeditationAttributeDesc() {
  SharedDtor();
}

void E_MeditationMeditationAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MeditationMeditationAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MeditationMeditationAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MeditationMeditationAttributeDesc_descriptor_;
}

const E_MeditationMeditationAttributeDesc& E_MeditationMeditationAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_meditation_2eproto();
  return *default_instance_;
}

E_MeditationMeditationAttributeDesc* E_MeditationMeditationAttributeDesc::default_instance_ = NULL;

E_MeditationMeditationAttributeDesc* E_MeditationMeditationAttributeDesc::New() const {
  return new E_MeditationMeditationAttributeDesc;
}

void E_MeditationMeditationAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MeditationMeditationAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MeditationMeditationAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MeditationMeditationAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MeditationMeditationAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MeditationMeditationAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MeditationMeditationAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MeditationMeditationAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MeditationMeditationAttributeDesc::MergeFrom(const E_MeditationMeditationAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MeditationMeditationAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MeditationMeditationAttributeDesc::CopyFrom(const E_MeditationMeditationAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MeditationMeditationAttributeDesc::IsInitialized() const {

  return true;
}

void E_MeditationMeditationAttributeDesc::Swap(E_MeditationMeditationAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MeditationMeditationAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MeditationMeditationAttributeDesc_descriptor_;
  metadata.reflection = E_MeditationMeditationAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MeditationMeditationActiveattributeDesc::kMTypeFieldNumber;
const int E_MeditationMeditationActiveattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_MeditationMeditationActiveattributeDesc::E_MeditationMeditationActiveattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MeditationMeditationActiveattributeDesc::InitAsDefaultInstance() {
}

E_MeditationMeditationActiveattributeDesc::E_MeditationMeditationActiveattributeDesc(const E_MeditationMeditationActiveattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MeditationMeditationActiveattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MeditationMeditationActiveattributeDesc::~E_MeditationMeditationActiveattributeDesc() {
  SharedDtor();
}

void E_MeditationMeditationActiveattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MeditationMeditationActiveattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MeditationMeditationActiveattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MeditationMeditationActiveattributeDesc_descriptor_;
}

const E_MeditationMeditationActiveattributeDesc& E_MeditationMeditationActiveattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_meditation_2eproto();
  return *default_instance_;
}

E_MeditationMeditationActiveattributeDesc* E_MeditationMeditationActiveattributeDesc::default_instance_ = NULL;

E_MeditationMeditationActiveattributeDesc* E_MeditationMeditationActiveattributeDesc::New() const {
  return new E_MeditationMeditationActiveattributeDesc;
}

void E_MeditationMeditationActiveattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MeditationMeditationActiveattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MeditationMeditationActiveattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MeditationMeditationActiveattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MeditationMeditationActiveattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MeditationMeditationActiveattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MeditationMeditationActiveattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MeditationMeditationActiveattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MeditationMeditationActiveattributeDesc::MergeFrom(const E_MeditationMeditationActiveattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MeditationMeditationActiveattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MeditationMeditationActiveattributeDesc::CopyFrom(const E_MeditationMeditationActiveattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MeditationMeditationActiveattributeDesc::IsInitialized() const {

  return true;
}

void E_MeditationMeditationActiveattributeDesc::Swap(E_MeditationMeditationActiveattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MeditationMeditationActiveattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MeditationMeditationActiveattributeDesc_descriptor_;
  metadata.reflection = E_MeditationMeditationActiveattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MeditationMeditation::kMIdFieldNumber;
const int E_MeditationMeditation::kMNameFieldNumber;
const int E_MeditationMeditation::kMTypeFieldNumber;
const int E_MeditationMeditation::kMQualityFieldNumber;
const int E_MeditationMeditation::kMProfessionlimitFieldNumber;
const int E_MeditationMeditation::kMActivationitemFieldNumber;
const int E_MeditationMeditation::kMActivationnumFieldNumber;
const int E_MeditationMeditation::kMStaridFieldNumber;
const int E_MeditationMeditation::kMStarnumFieldNumber;
const int E_MeditationMeditation::kMStarupFieldNumber;
const int E_MeditationMeditation::kMStarberFieldNumber;
const int E_MeditationMeditation::kMAttributeFieldNumber;
const int E_MeditationMeditation::kMActiveattributeFieldNumber;
#endif  // !_MSC_VER

E_MeditationMeditation::E_MeditationMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MeditationMeditation::InitAsDefaultInstance() {
}

E_MeditationMeditation::E_MeditationMeditation(const E_MeditationMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MeditationMeditation::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_type_ = 0;
  m_quality_ = 0;
  m_professionlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_activationitem_ = GOOGLE_LONGLONG(0);
  m_activationnum_ = 0;
  m_starid_ = GOOGLE_LONGLONG(0);
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starup_ = 0;
  m_starber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MeditationMeditation::~E_MeditationMeditation() {
  SharedDtor();
}

void E_MeditationMeditation::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_professionlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete m_professionlimit_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (this != default_instance_) {
  }
}

void E_MeditationMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MeditationMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MeditationMeditation_descriptor_;
}

const E_MeditationMeditation& E_MeditationMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_meditation_2eproto();
  return *default_instance_;
}

E_MeditationMeditation* E_MeditationMeditation::default_instance_ = NULL;

E_MeditationMeditation* E_MeditationMeditation::New() const {
  return new E_MeditationMeditation;
}

void E_MeditationMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_type_ = 0;
    m_quality_ = 0;
    if (has_m_professionlimit()) {
      if (m_professionlimit_ != &::google::protobuf::internal::kEmptyString) {
        m_professionlimit_->clear();
      }
    }
    m_activationitem_ = GOOGLE_LONGLONG(0);
    m_activationnum_ = 0;
    m_starid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
    m_starup_ = 0;
    m_starber_ = 0;
  }
  m_attribute_.Clear();
  m_activeattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MeditationMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_professionlimit;
        break;
      }

      // optional string m_professionlimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_professionlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_professionlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_professionlimit().data(), this->m_professionlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_activationitem;
        break;
      }

      // optional int64 m_activationitem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_activationitem_)));
          set_has_m_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_activationnum;
        break;
      }

      // optional int32 m_activationnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activationnum_)));
          set_has_m_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_starid;
        break;
      }

      // optional int64 m_starid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_starnum;
        break;
      }

      // optional string m_starnum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_starup;
        break;
      }

      // optional int32 m_starup = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starup_)));
          set_has_m_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_starber;
        break;
      }

      // optional int32 m_starber = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starber_)));
          set_has_m_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_MeditationMeditationAttributeDesc m_attribute = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_attribute;
        if (input->ExpectTag(106)) goto parse_m_activeattribute;
        break;
      }

      // repeated .proto_ff.E_MeditationMeditationActiveattributeDesc m_activeattribute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activeattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_activeattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_activeattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MeditationMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quality(), output);
  }

  // optional string m_professionlimit = 5;
  if (has_m_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_professionlimit().data(), this->m_professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_professionlimit(), output);
  }

  // optional int64 m_activationitem = 6;
  if (has_m_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->m_activationitem(), output);
  }

  // optional int32 m_activationnum = 7;
  if (has_m_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_activationnum(), output);
  }

  // optional int64 m_starid = 8;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_starid(), output);
  }

  // optional string m_starnum = 9;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_starnum(), output);
  }

  // optional int32 m_starup = 10;
  if (has_m_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_starup(), output);
  }

  // optional int32 m_starber = 11;
  if (has_m_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_starber(), output);
  }

  // repeated .proto_ff.E_MeditationMeditationAttributeDesc m_attribute = 12;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_attribute(i), output);
  }

  // repeated .proto_ff.E_MeditationMeditationActiveattributeDesc m_activeattribute = 13;
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_activeattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MeditationMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quality(), target);
  }

  // optional string m_professionlimit = 5;
  if (has_m_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_professionlimit().data(), this->m_professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_professionlimit(), target);
  }

  // optional int64 m_activationitem = 6;
  if (has_m_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->m_activationitem(), target);
  }

  // optional int32 m_activationnum = 7;
  if (has_m_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_activationnum(), target);
  }

  // optional int64 m_starid = 8;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_starid(), target);
  }

  // optional string m_starnum = 9;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_starnum(), target);
  }

  // optional int32 m_starup = 10;
  if (has_m_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_starup(), target);
  }

  // optional int32 m_starber = 11;
  if (has_m_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_starber(), target);
  }

  // repeated .proto_ff.E_MeditationMeditationAttributeDesc m_attribute = 12;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_attribute(i), target);
  }

  // repeated .proto_ff.E_MeditationMeditationActiveattributeDesc m_activeattribute = 13;
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_activeattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MeditationMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_quality = 4;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional string m_professionlimit = 5;
    if (has_m_professionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_professionlimit());
    }

    // optional int64 m_activationitem = 6;
    if (has_m_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_activationitem());
    }

    // optional int32 m_activationnum = 7;
    if (has_m_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activationnum());
    }

    // optional int64 m_starid = 8;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_starid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_starnum = 9;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

    // optional int32 m_starup = 10;
    if (has_m_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starup());
    }

    // optional int32 m_starber = 11;
    if (has_m_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starber());
    }

  }
  // repeated .proto_ff.E_MeditationMeditationAttributeDesc m_attribute = 12;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated .proto_ff.E_MeditationMeditationActiveattributeDesc m_activeattribute = 13;
  total_size += 1 * this->m_activeattribute_size();
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_activeattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MeditationMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MeditationMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MeditationMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MeditationMeditation::MergeFrom(const E_MeditationMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_activeattribute_.MergeFrom(from.m_activeattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_professionlimit()) {
      set_m_professionlimit(from.m_professionlimit());
    }
    if (from.has_m_activationitem()) {
      set_m_activationitem(from.m_activationitem());
    }
    if (from.has_m_activationnum()) {
      set_m_activationnum(from.m_activationnum());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_starup()) {
      set_m_starup(from.m_starup());
    }
    if (from.has_m_starber()) {
      set_m_starber(from.m_starber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MeditationMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MeditationMeditation::CopyFrom(const E_MeditationMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MeditationMeditation::IsInitialized() const {

  return true;
}

void E_MeditationMeditation::Swap(E_MeditationMeditation* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_professionlimit_, other->m_professionlimit_);
    std::swap(m_activationitem_, other->m_activationitem_);
    std::swap(m_activationnum_, other->m_activationnum_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_starup_, other->m_starup_);
    std::swap(m_starber_, other->m_starber_);
    m_attribute_.Swap(&other->m_attribute_);
    m_activeattribute_.Swap(&other->m_activeattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MeditationMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MeditationMeditation_descriptor_;
  metadata.reflection = E_MeditationMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MeditationMeditation::kEMeditationMeditationListFieldNumber;
#endif  // !_MSC_VER

Sheet_MeditationMeditation::Sheet_MeditationMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MeditationMeditation::InitAsDefaultInstance() {
}

Sheet_MeditationMeditation::Sheet_MeditationMeditation(const Sheet_MeditationMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MeditationMeditation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MeditationMeditation::~Sheet_MeditationMeditation() {
  SharedDtor();
}

void Sheet_MeditationMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MeditationMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MeditationMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MeditationMeditation_descriptor_;
}

const Sheet_MeditationMeditation& Sheet_MeditationMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_meditation_2eproto();
  return *default_instance_;
}

Sheet_MeditationMeditation* Sheet_MeditationMeditation::default_instance_ = NULL;

Sheet_MeditationMeditation* Sheet_MeditationMeditation::New() const {
  return new Sheet_MeditationMeditation;
}

void Sheet_MeditationMeditation::Clear() {
  e_meditationmeditation_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MeditationMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MeditationMeditation E_MeditationMeditation_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MeditationMeditation_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_meditationmeditation_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MeditationMeditation_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MeditationMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MeditationMeditation E_MeditationMeditation_List = 1;
  for (int i = 0; i < this->e_meditationmeditation_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_meditationmeditation_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MeditationMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MeditationMeditation E_MeditationMeditation_List = 1;
  for (int i = 0; i < this->e_meditationmeditation_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_meditationmeditation_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MeditationMeditation::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MeditationMeditation E_MeditationMeditation_List = 1;
  total_size += 1 * this->e_meditationmeditation_list_size();
  for (int i = 0; i < this->e_meditationmeditation_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_meditationmeditation_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MeditationMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MeditationMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MeditationMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MeditationMeditation::MergeFrom(const Sheet_MeditationMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_meditationmeditation_list_.MergeFrom(from.e_meditationmeditation_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MeditationMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MeditationMeditation::CopyFrom(const Sheet_MeditationMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MeditationMeditation::IsInitialized() const {

  return true;
}

void Sheet_MeditationMeditation::Swap(Sheet_MeditationMeditation* other) {
  if (other != this) {
    e_meditationmeditation_list_.Swap(&other->e_meditationmeditation_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MeditationMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MeditationMeditation_descriptor_;
  metadata.reflection = Sheet_MeditationMeditation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
