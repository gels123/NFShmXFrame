// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treasure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "treasure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* treasuretreasureattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasuretreasureattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasuretreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasuretreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_treasuretreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_treasuretreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasurechangeattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasurechangeattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasurechange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasurechange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_treasurechange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_treasurechange_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasurestarUpupAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasurestarUpupAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasurestarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasurestarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_treasurestarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_treasurestarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasurefragmentattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasurefragmentattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasurefragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasurefragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_treasurefragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_treasurefragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasureequipattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasureequipattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasureequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasureequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_treasureequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_treasureequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasureslot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasureslot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_treasureslot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_treasureslot_reflection_ = NULL;
const ::google::protobuf::Descriptor* treasurerefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treasurerefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_treasurerefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_treasurerefine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_treasure_2eproto() {
  protobuf_AddDesc_treasure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "treasure.proto");
  GOOGLE_CHECK(file != NULL);
  treasuretreasureattributeDesc_descriptor_ = file->message_type(0);
  static const int treasuretreasureattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasureattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasureattributeDesc, value_),
  };
  treasuretreasureattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasuretreasureattributeDesc_descriptor_,
      treasuretreasureattributeDesc::default_instance_,
      treasuretreasureattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasureattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasureattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasuretreasureattributeDesc));
  treasuretreasure_descriptor_ = file->message_type(1);
  static const int treasuretreasure_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, reallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, materialexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, breakmaterialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, breakmaterialcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, fragmentid_),
  };
  treasuretreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasuretreasure_descriptor_,
      treasuretreasure::default_instance_,
      treasuretreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasuretreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasuretreasure));
  Sheet_treasuretreasure_descriptor_ = file->message_type(2);
  static const int Sheet_treasuretreasure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasuretreasure, treasuretreasure_list_),
  };
  Sheet_treasuretreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_treasuretreasure_descriptor_,
      Sheet_treasuretreasure::default_instance_,
      Sheet_treasuretreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasuretreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasuretreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_treasuretreasure));
  treasurechangeattributeDesc_descriptor_ = file->message_type(3);
  static const int treasurechangeattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechangeattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechangeattributeDesc, value_),
  };
  treasurechangeattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasurechangeattributeDesc_descriptor_,
      treasurechangeattributeDesc::default_instance_,
      treasurechangeattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechangeattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechangeattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasurechangeattributeDesc));
  treasurechange_descriptor_ = file->message_type(4);
  static const int treasurechange_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, attribute_),
  };
  treasurechange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasurechange_descriptor_,
      treasurechange::default_instance_,
      treasurechange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurechange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasurechange));
  Sheet_treasurechange_descriptor_ = file->message_type(5);
  static const int Sheet_treasurechange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurechange, treasurechange_list_),
  };
  Sheet_treasurechange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_treasurechange_descriptor_,
      Sheet_treasurechange::default_instance_,
      Sheet_treasurechange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurechange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurechange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_treasurechange));
  treasurestarUpupAttributeDesc_descriptor_ = file->message_type(6);
  static const int treasurestarUpupAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUpupAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUpupAttributeDesc, value_),
  };
  treasurestarUpupAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasurestarUpupAttributeDesc_descriptor_,
      treasurestarUpupAttributeDesc::default_instance_,
      treasurestarUpupAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUpupAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUpupAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasurestarUpupAttributeDesc));
  treasurestarUp_descriptor_ = file->message_type(7);
  static const int treasurestarUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUp, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUp, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUp, upattribute_),
  };
  treasurestarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasurestarUp_descriptor_,
      treasurestarUp::default_instance_,
      treasurestarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurestarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasurestarUp));
  Sheet_treasurestarUp_descriptor_ = file->message_type(8);
  static const int Sheet_treasurestarUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurestarUp, treasurestarup_list_),
  };
  Sheet_treasurestarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_treasurestarUp_descriptor_,
      Sheet_treasurestarUp::default_instance_,
      Sheet_treasurestarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurestarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurestarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_treasurestarUp));
  treasurefragmentattributeDesc_descriptor_ = file->message_type(9);
  static const int treasurefragmentattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragmentattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragmentattributeDesc, value_),
  };
  treasurefragmentattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasurefragmentattributeDesc_descriptor_,
      treasurefragmentattributeDesc::default_instance_,
      treasurefragmentattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragmentattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragmentattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasurefragmentattributeDesc));
  treasurefragment_descriptor_ = file->message_type(10);
  static const int treasurefragment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragment, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragment, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragment, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragment, attribute_),
  };
  treasurefragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasurefragment_descriptor_,
      treasurefragment::default_instance_,
      treasurefragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurefragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasurefragment));
  Sheet_treasurefragment_descriptor_ = file->message_type(11);
  static const int Sheet_treasurefragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurefragment, treasurefragment_list_),
  };
  Sheet_treasurefragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_treasurefragment_descriptor_,
      Sheet_treasurefragment::default_instance_,
      Sheet_treasurefragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurefragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurefragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_treasurefragment));
  treasureequipattributeDesc_descriptor_ = file->message_type(12);
  static const int treasureequipattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequipattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequipattributeDesc, value_),
  };
  treasureequipattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasureequipattributeDesc_descriptor_,
      treasureequipattributeDesc::default_instance_,
      treasureequipattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequipattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequipattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasureequipattributeDesc));
  treasureequip_descriptor_ = file->message_type(13);
  static const int treasureequip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequip, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequip, attribute_),
  };
  treasureequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasureequip_descriptor_,
      treasureequip::default_instance_,
      treasureequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasureequip));
  Sheet_treasureequip_descriptor_ = file->message_type(14);
  static const int Sheet_treasureequip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasureequip, treasureequip_list_),
  };
  Sheet_treasureequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_treasureequip_descriptor_,
      Sheet_treasureequip::default_instance_,
      Sheet_treasureequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasureequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasureequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_treasureequip));
  treasureslot_descriptor_ = file->message_type(15);
  static const int treasureslot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureslot, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureslot, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureslot, refinenum_),
  };
  treasureslot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasureslot_descriptor_,
      treasureslot::default_instance_,
      treasureslot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureslot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasureslot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasureslot));
  Sheet_treasureslot_descriptor_ = file->message_type(16);
  static const int Sheet_treasureslot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasureslot, treasureslot_list_),
  };
  Sheet_treasureslot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_treasureslot_descriptor_,
      Sheet_treasureslot::default_instance_,
      Sheet_treasureslot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasureslot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasureslot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_treasureslot));
  treasurerefine_descriptor_ = file->message_type(17);
  static const int treasurerefine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurerefine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurerefine, refineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurerefine, refinenum_),
  };
  treasurerefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treasurerefine_descriptor_,
      treasurerefine::default_instance_,
      treasurerefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurerefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treasurerefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treasurerefine));
  Sheet_treasurerefine_descriptor_ = file->message_type(18);
  static const int Sheet_treasurerefine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurerefine, treasurerefine_list_),
  };
  Sheet_treasurerefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_treasurerefine_descriptor_,
      Sheet_treasurerefine::default_instance_,
      Sheet_treasurerefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurerefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_treasurerefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_treasurerefine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_treasure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasuretreasureattributeDesc_descriptor_, &treasuretreasureattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasuretreasure_descriptor_, &treasuretreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_treasuretreasure_descriptor_, &Sheet_treasuretreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasurechangeattributeDesc_descriptor_, &treasurechangeattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasurechange_descriptor_, &treasurechange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_treasurechange_descriptor_, &Sheet_treasurechange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasurestarUpupAttributeDesc_descriptor_, &treasurestarUpupAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasurestarUp_descriptor_, &treasurestarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_treasurestarUp_descriptor_, &Sheet_treasurestarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasurefragmentattributeDesc_descriptor_, &treasurefragmentattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasurefragment_descriptor_, &treasurefragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_treasurefragment_descriptor_, &Sheet_treasurefragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasureequipattributeDesc_descriptor_, &treasureequipattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasureequip_descriptor_, &treasureequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_treasureequip_descriptor_, &Sheet_treasureequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasureslot_descriptor_, &treasureslot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_treasureslot_descriptor_, &Sheet_treasureslot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treasurerefine_descriptor_, &treasurerefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_treasurerefine_descriptor_, &Sheet_treasurerefine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_treasure_2eproto() {
  delete treasuretreasureattributeDesc::default_instance_;
  delete treasuretreasureattributeDesc_reflection_;
  delete treasuretreasure::default_instance_;
  delete treasuretreasure_reflection_;
  delete Sheet_treasuretreasure::default_instance_;
  delete Sheet_treasuretreasure_reflection_;
  delete treasurechangeattributeDesc::default_instance_;
  delete treasurechangeattributeDesc_reflection_;
  delete treasurechange::default_instance_;
  delete treasurechange_reflection_;
  delete Sheet_treasurechange::default_instance_;
  delete Sheet_treasurechange_reflection_;
  delete treasurestarUpupAttributeDesc::default_instance_;
  delete treasurestarUpupAttributeDesc_reflection_;
  delete treasurestarUp::default_instance_;
  delete treasurestarUp_reflection_;
  delete Sheet_treasurestarUp::default_instance_;
  delete Sheet_treasurestarUp_reflection_;
  delete treasurefragmentattributeDesc::default_instance_;
  delete treasurefragmentattributeDesc_reflection_;
  delete treasurefragment::default_instance_;
  delete treasurefragment_reflection_;
  delete Sheet_treasurefragment::default_instance_;
  delete Sheet_treasurefragment_reflection_;
  delete treasureequipattributeDesc::default_instance_;
  delete treasureequipattributeDesc_reflection_;
  delete treasureequip::default_instance_;
  delete treasureequip_reflection_;
  delete Sheet_treasureequip::default_instance_;
  delete Sheet_treasureequip_reflection_;
  delete treasureslot::default_instance_;
  delete treasureslot_reflection_;
  delete Sheet_treasureslot::default_instance_;
  delete Sheet_treasureslot_reflection_;
  delete treasurerefine::default_instance_;
  delete treasurerefine_reflection_;
  delete Sheet_treasurerefine::default_instance_;
  delete Sheet_treasurerefine_reflection_;
}

void protobuf_AddDesc_treasure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016treasure.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"M\n\035treasuretreasureattributeDe"
    "sc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B"
    "\007\302\377\024\003\345\200\274\"\336\004\n\020treasuretreasure\022\030\n\002id\030\001 \001("
    "\003B\014\302\377\024\010\345\256\235\345\205\267ID\022&\n\010resource\030\002 \001(\tB\024\302\377\024\014\350"
    "\265\204\346\272\220\345\275\242\350\261\241\220\301\024<\022\034\n\004name\030\003 \001(\tB\016\302\377\024\006\345\220\215\345\255"
    "\227\220\301\024<\022(\n\nactiveDesc\030\004 \001(\tB\024\302\377\024\014\346\277\200\346\264\273\346\217\217"
    "\350\277\260\220\301\024x\022\035\n\trealLevel\030\005 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022&"
    "\n\nmaterialID\030\006 \001(\003B\022\302\377\024\016\350\277\233\351\230\266\346\235\220\346\226\231ID\022."
    "\n\013materialEXP\030\007 \001(\005B\031\302\377\024\025\350\277\233\351\230\266\346\235\220\346\226\231\347\273\217"
    "\351\252\214\345\200\274\022#\n\003exp\030\010 \001(\005B\026\302\377\024\022\345\256\235\345\205\267\345\215\207\347\272\247\347\273\217"
    "\351\252\214\022+\n\017BreakMaterialID\030\t \001(\003B\022\302\377\024\016\347\252\201\347\240\264"
    "\346\235\220\346\226\231ID\0221\n\021BreakMaterialCost\030\n \001(\005B\026\302\377\024"
    "\022\347\252\201\347\240\264\346\235\220\346\226\231\346\225\260\351\207\217\022!\n\005skill\030\013 \001(\003B\022\302\377\024\016"
    "\344\270\273\345\212\250\346\212\200\350\203\275ID\022#\n\007skillID\030\014 \001(\003B\022\302\377\024\016\350\247\243"
    "\351\224\201\346\212\200\350\203\275ID\022P\n\tattribute\030\r \003(\0132\'.proto_f"
    "f.treasuretreasureattributeDescB\024\302\377\024\014\345\237\272"
    "\347\241\200\345\261\236\346\200\247\210\301\024\004\022*\n\nfragmentID\030\016 \003(\003B\026\302\377\024\016\345"
    "\205\263\350\201\224\347\242\216\347\211\207ID\210\301\024\003\"Z\n\026Sheet_treasuretreas"
    "ure\022@\n\025treasuretreasure_List\030\001 \003(\0132\032.pro"
    "to_ff.treasuretreasureB\005\210\301\024\364\003\"K\n\033treasur"
    "echangeattributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002"
    "ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\267\004\n\016treasurec"
    "hange\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\345\256\235\345\205\267ID\022&\n\010resou"
    "rce\030\002 \001(\tB\024\302\377\024\014\350\265\204\346\272\220\345\275\242\350\261\241\220\301\024<\022\034\n\004name\030"
    "\003 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024<\022)\n\nactiveDesc\030\004 \001("
    "\tB\025\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260\220\301\024\214\001\022\033\n\007quality\030\005 \001("
    "\005B\n\302\377\024\006\345\223\201\350\264\250\022\"\n\006starId\030\006 \001(\003B\022\302\377\024\016\345\215\207\346\230"
    "\237\351\201\223\345\205\267id\022,\n\007starNum\030\007 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201"
    "\223\345\205\267\346\225\260\351\207\217\220\301\024\310\001\022&\n\006starUp\030\010 \001(\005B\026\302\377\024\022\345\215\207"
    "\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022<\n\007starBer\030\t \001(\005B+\302\377\024\'\346\257"
    "\217\346\254\241\345\215\207\346\230\237\345\261\236\346\200\247\345\242\236\345\212\240\347\232\204\344\270\207\345\210\206\346\257\224\345\200\274\022$\n"
    "\noccupation\030\n \001(\003B\020\302\377\024\014\350\275\254\350\201\214\350\246\201\346\261\202\022!\n\005s"
    "kill\030\013 \001(\003B\022\302\377\024\016\344\270\273\345\212\250\346\212\200\350\203\275ID\022,\n\rupAttr"
    "ibuteId\030\014 \001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022N\n\t"
    "attribute\030\r \003(\0132%.proto_ff.treasurechang"
    "eattributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\005\"S\n\024"
    "Sheet_treasurechange\022;\n\023treasurechange_L"
    "ist\030\001 \003(\0132\030.proto_ff.treasurechangeB\004\210\301\024"
    "\024\"M\n\035treasurestarUpupAttributeDesc\022\024\n\004ty"
    "pe\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274"
    "\"\310\001\n\016treasurestarUp\022\030\n\002ID\030\001 \001(\005B\014\302\377\024\010\345\224\257"
    "\344\270\200ID\022,\n\rupAttributeId\030\002 \001(\003B\025\302\377\024\021\345\215\207\346\230\237"
    "\345\261\236\346\200\247\347\273\204ID\022\032\n\006starID\030\003 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022"
    "R\n\013upAttribute\030\004 \003(\0132\'.proto_ff.treasure"
    "starUpupAttributeDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210"
    "\301\024\002\"S\n\024Sheet_treasurestarUp\022;\n\023treasures"
    "tarUp_List\030\001 \003(\0132\030.proto_ff.treasurestar"
    "UpB\004\210\301\024\024\"M\n\035treasurefragmentattributeDes"
    "c\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007"
    "\302\377\024\003\345\200\274\"\313\001\n\020treasurefragment\022 \n\nfragment"
    "ID\030\001 \001(\003B\014\302\377\024\010\347\242\216\347\211\207ID\022\032\n\004item\030\002 \001(\003B\014\302\377"
    "\024\010\347\211\251\345\223\201ID\022\'\n\007itemNum\030\003 \001(\005B\026\302\377\024\022\347\242\216\347\211\207\344"
    "\275\277\347\224\250\344\270\212\351\231\220\022P\n\tattribute\030\004 \003(\0132\'.proto_f"
    "f.treasurefragmentattributeDescB\024\302\377\024\014\345\237\272"
    "\347\241\200\345\261\236\346\200\247\210\301\024\003\"Y\n\026Sheet_treasurefragment\022"
    "\?\n\025treasurefragment_List\030\001 \003(\0132\032.proto_f"
    "f.treasurefragmentB\004\210\301\024\024\"N\n\032treasureequi"
    "pattributeDesc\022\030\n\004type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213"
    "\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\226\001\n\rtreasureequ"
    "ip\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\350\243\205\345\244\207id\022\"\n\010position"
    "\030\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\022G\n\tattribute\030\003 "
    "\003(\0132$.proto_ff.treasureequipattributeDes"
    "cB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\002\"P\n\023Sheet_treasureequip"
    "\0229\n\022treasureequip_List\030\001 \003(\0132\027.proto_ff."
    "treasureequipB\004\210\301\024(\"\226\001\n\014treasureslot\022\"\n\010"
    "position\030\001 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\022(\n\010refi"
    "neLv\030\002 \001(\005B\026\302\377\024\022\347\262\276\347\202\274\347\255\211\347\272\247\344\270\212\351\231\220\0228\n\tre"
    "fineNum\030\003 \001(\005B%\302\377\024!\347\262\276\347\202\274\346\217\220\345\215\207\347\263\273\346\225\260\357\274\210"
    "\344\270\207\345\210\206\346\257\224\357\274\211\"M\n\022Sheet_treasureslot\0227\n\021tr"
    "easureslot_List\030\001 \003(\0132\026.proto_ff.treasur"
    "eslotB\004\210\301\024\024\"\177\n\016treasurerefine\022\034\n\002id\030\001 \001("
    "\005B\020\302\377\024\014\347\262\276\347\202\274\347\255\211\347\272\247\022$\n\010refineId\030\002 \001(\003B\022\302"
    "\377\024\016\347\262\276\347\202\274\346\235\220\346\226\231id\022)\n\trefineNum\030\003 \001(\005B\026\302\377"
    "\024\022\347\262\276\347\202\274\346\235\220\346\226\231\346\225\260\351\207\217\"T\n\024Sheet_treasurere"
    "fine\022<\n\023treasurerefine_List\030\001 \003(\0132\030.prot"
    "o_ff.treasurerefineB\005\210\301\024\310\001", 3066);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "treasure.proto", &protobuf_RegisterTypes);
  treasuretreasureattributeDesc::default_instance_ = new treasuretreasureattributeDesc();
  treasuretreasure::default_instance_ = new treasuretreasure();
  Sheet_treasuretreasure::default_instance_ = new Sheet_treasuretreasure();
  treasurechangeattributeDesc::default_instance_ = new treasurechangeattributeDesc();
  treasurechange::default_instance_ = new treasurechange();
  Sheet_treasurechange::default_instance_ = new Sheet_treasurechange();
  treasurestarUpupAttributeDesc::default_instance_ = new treasurestarUpupAttributeDesc();
  treasurestarUp::default_instance_ = new treasurestarUp();
  Sheet_treasurestarUp::default_instance_ = new Sheet_treasurestarUp();
  treasurefragmentattributeDesc::default_instance_ = new treasurefragmentattributeDesc();
  treasurefragment::default_instance_ = new treasurefragment();
  Sheet_treasurefragment::default_instance_ = new Sheet_treasurefragment();
  treasureequipattributeDesc::default_instance_ = new treasureequipattributeDesc();
  treasureequip::default_instance_ = new treasureequip();
  Sheet_treasureequip::default_instance_ = new Sheet_treasureequip();
  treasureslot::default_instance_ = new treasureslot();
  Sheet_treasureslot::default_instance_ = new Sheet_treasureslot();
  treasurerefine::default_instance_ = new treasurerefine();
  Sheet_treasurerefine::default_instance_ = new Sheet_treasurerefine();
  treasuretreasureattributeDesc::default_instance_->InitAsDefaultInstance();
  treasuretreasure::default_instance_->InitAsDefaultInstance();
  Sheet_treasuretreasure::default_instance_->InitAsDefaultInstance();
  treasurechangeattributeDesc::default_instance_->InitAsDefaultInstance();
  treasurechange::default_instance_->InitAsDefaultInstance();
  Sheet_treasurechange::default_instance_->InitAsDefaultInstance();
  treasurestarUpupAttributeDesc::default_instance_->InitAsDefaultInstance();
  treasurestarUp::default_instance_->InitAsDefaultInstance();
  Sheet_treasurestarUp::default_instance_->InitAsDefaultInstance();
  treasurefragmentattributeDesc::default_instance_->InitAsDefaultInstance();
  treasurefragment::default_instance_->InitAsDefaultInstance();
  Sheet_treasurefragment::default_instance_->InitAsDefaultInstance();
  treasureequipattributeDesc::default_instance_->InitAsDefaultInstance();
  treasureequip::default_instance_->InitAsDefaultInstance();
  Sheet_treasureequip::default_instance_->InitAsDefaultInstance();
  treasureslot::default_instance_->InitAsDefaultInstance();
  Sheet_treasureslot::default_instance_->InitAsDefaultInstance();
  treasurerefine::default_instance_->InitAsDefaultInstance();
  Sheet_treasurerefine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_treasure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_treasure_2eproto {
  StaticDescriptorInitializer_treasure_2eproto() {
    protobuf_AddDesc_treasure_2eproto();
  }
} static_descriptor_initializer_treasure_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int treasuretreasureattributeDesc::kTypeFieldNumber;
const int treasuretreasureattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

treasuretreasureattributeDesc::treasuretreasureattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasuretreasureattributeDesc::InitAsDefaultInstance() {
}

treasuretreasureattributeDesc::treasuretreasureattributeDesc(const treasuretreasureattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasuretreasureattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasuretreasureattributeDesc::~treasuretreasureattributeDesc() {
  SharedDtor();
}

void treasuretreasureattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasuretreasureattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasuretreasureattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasuretreasureattributeDesc_descriptor_;
}

const treasuretreasureattributeDesc& treasuretreasureattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasuretreasureattributeDesc* treasuretreasureattributeDesc::default_instance_ = NULL;

treasuretreasureattributeDesc* treasuretreasureattributeDesc::New() const {
  return new treasuretreasureattributeDesc;
}

void treasuretreasureattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasuretreasureattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasuretreasureattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasuretreasureattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasuretreasureattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasuretreasureattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasuretreasureattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasuretreasureattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasuretreasureattributeDesc::MergeFrom(const treasuretreasureattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasuretreasureattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasuretreasureattributeDesc::CopyFrom(const treasuretreasureattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasuretreasureattributeDesc::IsInitialized() const {

  return true;
}

void treasuretreasureattributeDesc::Swap(treasuretreasureattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasuretreasureattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasuretreasureattributeDesc_descriptor_;
  metadata.reflection = treasuretreasureattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasuretreasure::kIdFieldNumber;
const int treasuretreasure::kResourceFieldNumber;
const int treasuretreasure::kNameFieldNumber;
const int treasuretreasure::kActiveDescFieldNumber;
const int treasuretreasure::kRealLevelFieldNumber;
const int treasuretreasure::kMaterialIDFieldNumber;
const int treasuretreasure::kMaterialEXPFieldNumber;
const int treasuretreasure::kExpFieldNumber;
const int treasuretreasure::kBreakMaterialIDFieldNumber;
const int treasuretreasure::kBreakMaterialCostFieldNumber;
const int treasuretreasure::kSkillFieldNumber;
const int treasuretreasure::kSkillIDFieldNumber;
const int treasuretreasure::kAttributeFieldNumber;
const int treasuretreasure::kFragmentIDFieldNumber;
#endif  // !_MSC_VER

treasuretreasure::treasuretreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasuretreasure::InitAsDefaultInstance() {
}

treasuretreasure::treasuretreasure(const treasuretreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasuretreasure::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reallevel_ = 0;
  materialid_ = GOOGLE_LONGLONG(0);
  materialexp_ = 0;
  exp_ = 0;
  breakmaterialid_ = GOOGLE_LONGLONG(0);
  breakmaterialcost_ = 0;
  skill_ = GOOGLE_LONGLONG(0);
  skillid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasuretreasure::~treasuretreasure() {
  SharedDtor();
}

void treasuretreasure::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (this != default_instance_) {
  }
}

void treasuretreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasuretreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasuretreasure_descriptor_;
}

const treasuretreasure& treasuretreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasuretreasure* treasuretreasure::default_instance_ = NULL;

treasuretreasure* treasuretreasure::New() const {
  return new treasuretreasure;
}

void treasuretreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    reallevel_ = 0;
    materialid_ = GOOGLE_LONGLONG(0);
    materialexp_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    breakmaterialid_ = GOOGLE_LONGLONG(0);
    breakmaterialcost_ = 0;
    skill_ = GOOGLE_LONGLONG(0);
    skillid_ = GOOGLE_LONGLONG(0);
  }
  attribute_.Clear();
  fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasuretreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_realLevel;
        break;
      }

      // optional int32 realLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reallevel_)));
          set_has_reallevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_materialID;
        break;
      }

      // optional int64 materialID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_materialEXP;
        break;
      }

      // optional int32 materialEXP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialEXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialexp_)));
          set_has_materialexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BreakMaterialID;
        break;
      }

      // optional int64 BreakMaterialID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BreakMaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &breakmaterialid_)));
          set_has_breakmaterialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BreakMaterialCost;
        break;
      }

      // optional int32 BreakMaterialCost = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BreakMaterialCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breakmaterialcost_)));
          set_has_breakmaterialcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill;
        break;
      }

      // optional int64 skill = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skillID;
        break;
      }

      // optional int64 skillID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.treasuretreasureattributeDesc attribute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_attribute;
        if (input->ExpectTag(112)) goto parse_fragmentID;
        break;
      }

      // repeated int64 fragmentID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 112, input, this->mutable_fragmentid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fragmentid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fragmentID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasuretreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activedesc(), output);
  }

  // optional int32 realLevel = 5;
  if (has_reallevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reallevel(), output);
  }

  // optional int64 materialID = 6;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->materialid(), output);
  }

  // optional int32 materialEXP = 7;
  if (has_materialexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->materialexp(), output);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // optional int64 BreakMaterialID = 9;
  if (has_breakmaterialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->breakmaterialid(), output);
  }

  // optional int32 BreakMaterialCost = 10;
  if (has_breakmaterialcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->breakmaterialcost(), output);
  }

  // optional int64 skill = 11;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->skill(), output);
  }

  // optional int64 skillID = 12;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->skillid(), output);
  }

  // repeated .proto_ff.treasuretreasureattributeDesc attribute = 13;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->attribute(i), output);
  }

  // repeated int64 fragmentID = 14;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      14, this->fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasuretreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activedesc(), target);
  }

  // optional int32 realLevel = 5;
  if (has_reallevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reallevel(), target);
  }

  // optional int64 materialID = 6;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->materialid(), target);
  }

  // optional int32 materialEXP = 7;
  if (has_materialexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->materialexp(), target);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // optional int64 BreakMaterialID = 9;
  if (has_breakmaterialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->breakmaterialid(), target);
  }

  // optional int32 BreakMaterialCost = 10;
  if (has_breakmaterialcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->breakmaterialcost(), target);
  }

  // optional int64 skill = 11;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->skill(), target);
  }

  // optional int64 skillID = 12;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->skillid(), target);
  }

  // repeated .proto_ff.treasuretreasureattributeDesc attribute = 13;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->attribute(i), target);
  }

  // repeated int64 fragmentID = 14;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(14, this->fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasuretreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 4;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional int32 realLevel = 5;
    if (has_reallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reallevel());
    }

    // optional int64 materialID = 6;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->materialid());
    }

    // optional int32 materialEXP = 7;
    if (has_materialexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialexp());
    }

    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 BreakMaterialID = 9;
    if (has_breakmaterialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->breakmaterialid());
    }

    // optional int32 BreakMaterialCost = 10;
    if (has_breakmaterialcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breakmaterialcost());
    }

    // optional int64 skill = 11;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skill());
    }

    // optional int64 skillID = 12;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

  }
  // repeated .proto_ff.treasuretreasureattributeDesc attribute = 13;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated int64 fragmentID = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fragmentid(i));
    }
    total_size += 1 * this->fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasuretreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasuretreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasuretreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasuretreasure::MergeFrom(const treasuretreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  fragmentid_.MergeFrom(from.fragmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_reallevel()) {
      set_reallevel(from.reallevel());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_materialexp()) {
      set_materialexp(from.materialexp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_breakmaterialid()) {
      set_breakmaterialid(from.breakmaterialid());
    }
    if (from.has_breakmaterialcost()) {
      set_breakmaterialcost(from.breakmaterialcost());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasuretreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasuretreasure::CopyFrom(const treasuretreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasuretreasure::IsInitialized() const {

  return true;
}

void treasuretreasure::Swap(treasuretreasure* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(reallevel_, other->reallevel_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialexp_, other->materialexp_);
    std::swap(exp_, other->exp_);
    std::swap(breakmaterialid_, other->breakmaterialid_);
    std::swap(breakmaterialcost_, other->breakmaterialcost_);
    std::swap(skill_, other->skill_);
    std::swap(skillid_, other->skillid_);
    attribute_.Swap(&other->attribute_);
    fragmentid_.Swap(&other->fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasuretreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasuretreasure_descriptor_;
  metadata.reflection = treasuretreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_treasuretreasure::kTreasuretreasureListFieldNumber;
#endif  // !_MSC_VER

Sheet_treasuretreasure::Sheet_treasuretreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_treasuretreasure::InitAsDefaultInstance() {
}

Sheet_treasuretreasure::Sheet_treasuretreasure(const Sheet_treasuretreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_treasuretreasure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_treasuretreasure::~Sheet_treasuretreasure() {
  SharedDtor();
}

void Sheet_treasuretreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_treasuretreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_treasuretreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_treasuretreasure_descriptor_;
}

const Sheet_treasuretreasure& Sheet_treasuretreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Sheet_treasuretreasure* Sheet_treasuretreasure::default_instance_ = NULL;

Sheet_treasuretreasure* Sheet_treasuretreasure::New() const {
  return new Sheet_treasuretreasure;
}

void Sheet_treasuretreasure::Clear() {
  treasuretreasure_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_treasuretreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.treasuretreasure treasuretreasure_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasuretreasure_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasuretreasure_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasuretreasure_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_treasuretreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.treasuretreasure treasuretreasure_List = 1;
  for (int i = 0; i < this->treasuretreasure_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasuretreasure_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_treasuretreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.treasuretreasure treasuretreasure_List = 1;
  for (int i = 0; i < this->treasuretreasure_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasuretreasure_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_treasuretreasure::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.treasuretreasure treasuretreasure_List = 1;
  total_size += 1 * this->treasuretreasure_list_size();
  for (int i = 0; i < this->treasuretreasure_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasuretreasure_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_treasuretreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_treasuretreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_treasuretreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_treasuretreasure::MergeFrom(const Sheet_treasuretreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasuretreasure_list_.MergeFrom(from.treasuretreasure_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_treasuretreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_treasuretreasure::CopyFrom(const Sheet_treasuretreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_treasuretreasure::IsInitialized() const {

  return true;
}

void Sheet_treasuretreasure::Swap(Sheet_treasuretreasure* other) {
  if (other != this) {
    treasuretreasure_list_.Swap(&other->treasuretreasure_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_treasuretreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_treasuretreasure_descriptor_;
  metadata.reflection = Sheet_treasuretreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasurechangeattributeDesc::kTypeFieldNumber;
const int treasurechangeattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

treasurechangeattributeDesc::treasurechangeattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasurechangeattributeDesc::InitAsDefaultInstance() {
}

treasurechangeattributeDesc::treasurechangeattributeDesc(const treasurechangeattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasurechangeattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasurechangeattributeDesc::~treasurechangeattributeDesc() {
  SharedDtor();
}

void treasurechangeattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasurechangeattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasurechangeattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasurechangeattributeDesc_descriptor_;
}

const treasurechangeattributeDesc& treasurechangeattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasurechangeattributeDesc* treasurechangeattributeDesc::default_instance_ = NULL;

treasurechangeattributeDesc* treasurechangeattributeDesc::New() const {
  return new treasurechangeattributeDesc;
}

void treasurechangeattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasurechangeattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasurechangeattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasurechangeattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasurechangeattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasurechangeattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasurechangeattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasurechangeattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasurechangeattributeDesc::MergeFrom(const treasurechangeattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasurechangeattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasurechangeattributeDesc::CopyFrom(const treasurechangeattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasurechangeattributeDesc::IsInitialized() const {

  return true;
}

void treasurechangeattributeDesc::Swap(treasurechangeattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasurechangeattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasurechangeattributeDesc_descriptor_;
  metadata.reflection = treasurechangeattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasurechange::kIdFieldNumber;
const int treasurechange::kResourceFieldNumber;
const int treasurechange::kNameFieldNumber;
const int treasurechange::kActiveDescFieldNumber;
const int treasurechange::kQualityFieldNumber;
const int treasurechange::kStarIdFieldNumber;
const int treasurechange::kStarNumFieldNumber;
const int treasurechange::kStarUpFieldNumber;
const int treasurechange::kStarBerFieldNumber;
const int treasurechange::kOccupationFieldNumber;
const int treasurechange::kSkillFieldNumber;
const int treasurechange::kUpAttributeIdFieldNumber;
const int treasurechange::kAttributeFieldNumber;
#endif  // !_MSC_VER

treasurechange::treasurechange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasurechange::InitAsDefaultInstance() {
}

treasurechange::treasurechange(const treasurechange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasurechange::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starup_ = 0;
  starber_ = 0;
  occupation_ = GOOGLE_LONGLONG(0);
  skill_ = GOOGLE_LONGLONG(0);
  upattributeid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasurechange::~treasurechange() {
  SharedDtor();
}

void treasurechange::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (this != default_instance_) {
  }
}

void treasurechange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasurechange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasurechange_descriptor_;
}

const treasurechange& treasurechange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasurechange* treasurechange::default_instance_ = NULL;

treasurechange* treasurechange::New() const {
  return new treasurechange;
}

void treasurechange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    quality_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
    starup_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starber_ = 0;
    occupation_ = GOOGLE_LONGLONG(0);
    skill_ = GOOGLE_LONGLONG(0);
    upattributeid_ = GOOGLE_LONGLONG(0);
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasurechange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_starId;
        break;
      }

      // optional int64 starId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_starNum;
        break;
      }

      // optional string starNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_starUp;
        break;
      }

      // optional int32 starUp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starup_)));
          set_has_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_starBer;
        break;
      }

      // optional int32 starBer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starber_)));
          set_has_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_occupation;
        break;
      }

      // optional int64 occupation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill;
        break;
      }

      // optional int64 skill = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.treasurechangeattributeDesc attribute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasurechange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activedesc(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // optional int64 starId = 6;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->starid(), output);
  }

  // optional string starNum = 7;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->starnum(), output);
  }

  // optional int32 starUp = 8;
  if (has_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->starup(), output);
  }

  // optional int32 starBer = 9;
  if (has_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->starber(), output);
  }

  // optional int64 occupation = 10;
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->occupation(), output);
  }

  // optional int64 skill = 11;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->skill(), output);
  }

  // optional int64 upAttributeId = 12;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->upattributeid(), output);
  }

  // repeated .proto_ff.treasurechangeattributeDesc attribute = 13;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasurechange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activedesc(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // optional int64 starId = 6;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->starid(), target);
  }

  // optional string starNum = 7;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->starnum(), target);
  }

  // optional int32 starUp = 8;
  if (has_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->starup(), target);
  }

  // optional int32 starBer = 9;
  if (has_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->starber(), target);
  }

  // optional int64 occupation = 10;
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->occupation(), target);
  }

  // optional int64 skill = 11;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->skill(), target);
  }

  // optional int64 upAttributeId = 12;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->upattributeid(), target);
  }

  // repeated .proto_ff.treasurechangeattributeDesc attribute = 13;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasurechange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 4;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 starId = 6;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

    // optional string starNum = 7;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

    // optional int32 starUp = 8;
    if (has_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starup());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 starBer = 9;
    if (has_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starber());
    }

    // optional int64 occupation = 10;
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupation());
    }

    // optional int64 skill = 11;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skill());
    }

    // optional int64 upAttributeId = 12;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

  }
  // repeated .proto_ff.treasurechangeattributeDesc attribute = 13;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasurechange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasurechange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasurechange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasurechange::MergeFrom(const treasurechange& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_starup()) {
      set_starup(from.starup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starber()) {
      set_starber(from.starber());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasurechange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasurechange::CopyFrom(const treasurechange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasurechange::IsInitialized() const {

  return true;
}

void treasurechange::Swap(treasurechange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(quality_, other->quality_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(starup_, other->starup_);
    std::swap(starber_, other->starber_);
    std::swap(occupation_, other->occupation_);
    std::swap(skill_, other->skill_);
    std::swap(upattributeid_, other->upattributeid_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasurechange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasurechange_descriptor_;
  metadata.reflection = treasurechange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_treasurechange::kTreasurechangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_treasurechange::Sheet_treasurechange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_treasurechange::InitAsDefaultInstance() {
}

Sheet_treasurechange::Sheet_treasurechange(const Sheet_treasurechange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_treasurechange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_treasurechange::~Sheet_treasurechange() {
  SharedDtor();
}

void Sheet_treasurechange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_treasurechange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_treasurechange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_treasurechange_descriptor_;
}

const Sheet_treasurechange& Sheet_treasurechange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Sheet_treasurechange* Sheet_treasurechange::default_instance_ = NULL;

Sheet_treasurechange* Sheet_treasurechange::New() const {
  return new Sheet_treasurechange;
}

void Sheet_treasurechange::Clear() {
  treasurechange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_treasurechange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.treasurechange treasurechange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasurechange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasurechange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasurechange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_treasurechange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.treasurechange treasurechange_List = 1;
  for (int i = 0; i < this->treasurechange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasurechange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_treasurechange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.treasurechange treasurechange_List = 1;
  for (int i = 0; i < this->treasurechange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasurechange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_treasurechange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.treasurechange treasurechange_List = 1;
  total_size += 1 * this->treasurechange_list_size();
  for (int i = 0; i < this->treasurechange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasurechange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_treasurechange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_treasurechange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_treasurechange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_treasurechange::MergeFrom(const Sheet_treasurechange& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasurechange_list_.MergeFrom(from.treasurechange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_treasurechange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_treasurechange::CopyFrom(const Sheet_treasurechange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_treasurechange::IsInitialized() const {

  return true;
}

void Sheet_treasurechange::Swap(Sheet_treasurechange* other) {
  if (other != this) {
    treasurechange_list_.Swap(&other->treasurechange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_treasurechange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_treasurechange_descriptor_;
  metadata.reflection = Sheet_treasurechange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasurestarUpupAttributeDesc::kTypeFieldNumber;
const int treasurestarUpupAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

treasurestarUpupAttributeDesc::treasurestarUpupAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasurestarUpupAttributeDesc::InitAsDefaultInstance() {
}

treasurestarUpupAttributeDesc::treasurestarUpupAttributeDesc(const treasurestarUpupAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasurestarUpupAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasurestarUpupAttributeDesc::~treasurestarUpupAttributeDesc() {
  SharedDtor();
}

void treasurestarUpupAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasurestarUpupAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasurestarUpupAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasurestarUpupAttributeDesc_descriptor_;
}

const treasurestarUpupAttributeDesc& treasurestarUpupAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasurestarUpupAttributeDesc* treasurestarUpupAttributeDesc::default_instance_ = NULL;

treasurestarUpupAttributeDesc* treasurestarUpupAttributeDesc::New() const {
  return new treasurestarUpupAttributeDesc;
}

void treasurestarUpupAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasurestarUpupAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasurestarUpupAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasurestarUpupAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasurestarUpupAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasurestarUpupAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasurestarUpupAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasurestarUpupAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasurestarUpupAttributeDesc::MergeFrom(const treasurestarUpupAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasurestarUpupAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasurestarUpupAttributeDesc::CopyFrom(const treasurestarUpupAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasurestarUpupAttributeDesc::IsInitialized() const {

  return true;
}

void treasurestarUpupAttributeDesc::Swap(treasurestarUpupAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasurestarUpupAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasurestarUpupAttributeDesc_descriptor_;
  metadata.reflection = treasurestarUpupAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasurestarUp::kIDFieldNumber;
const int treasurestarUp::kUpAttributeIdFieldNumber;
const int treasurestarUp::kStarIDFieldNumber;
const int treasurestarUp::kUpAttributeFieldNumber;
#endif  // !_MSC_VER

treasurestarUp::treasurestarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasurestarUp::InitAsDefaultInstance() {
}

treasurestarUp::treasurestarUp(const treasurestarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasurestarUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  upattributeid_ = GOOGLE_LONGLONG(0);
  starid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasurestarUp::~treasurestarUp() {
  SharedDtor();
}

void treasurestarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasurestarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasurestarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasurestarUp_descriptor_;
}

const treasurestarUp& treasurestarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasurestarUp* treasurestarUp::default_instance_ = NULL;

treasurestarUp* treasurestarUp::New() const {
  return new treasurestarUp;
}

void treasurestarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    upattributeid_ = GOOGLE_LONGLONG(0);
    starid_ = 0;
  }
  upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasurestarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starID;
        break;
      }

      // optional int32 starID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upAttribute;
        break;
      }

      // repeated .proto_ff.treasurestarUpupAttributeDesc upAttribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasurestarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->upattributeid(), output);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starid(), output);
  }

  // repeated .proto_ff.treasurestarUpupAttributeDesc upAttribute = 4;
  for (int i = 0; i < this->upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasurestarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->upattributeid(), target);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starid(), target);
  }

  // repeated .proto_ff.treasurestarUpupAttributeDesc upAttribute = 4;
  for (int i = 0; i < this->upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasurestarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 upAttributeId = 2;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

    // optional int32 starID = 3;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }

  }
  // repeated .proto_ff.treasurestarUpupAttributeDesc upAttribute = 4;
  total_size += 1 * this->upattribute_size();
  for (int i = 0; i < this->upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasurestarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasurestarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasurestarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasurestarUp::MergeFrom(const treasurestarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  upattribute_.MergeFrom(from.upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasurestarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasurestarUp::CopyFrom(const treasurestarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasurestarUp::IsInitialized() const {

  return true;
}

void treasurestarUp::Swap(treasurestarUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upattributeid_, other->upattributeid_);
    std::swap(starid_, other->starid_);
    upattribute_.Swap(&other->upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasurestarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasurestarUp_descriptor_;
  metadata.reflection = treasurestarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_treasurestarUp::kTreasurestarUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_treasurestarUp::Sheet_treasurestarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_treasurestarUp::InitAsDefaultInstance() {
}

Sheet_treasurestarUp::Sheet_treasurestarUp(const Sheet_treasurestarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_treasurestarUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_treasurestarUp::~Sheet_treasurestarUp() {
  SharedDtor();
}

void Sheet_treasurestarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_treasurestarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_treasurestarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_treasurestarUp_descriptor_;
}

const Sheet_treasurestarUp& Sheet_treasurestarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Sheet_treasurestarUp* Sheet_treasurestarUp::default_instance_ = NULL;

Sheet_treasurestarUp* Sheet_treasurestarUp::New() const {
  return new Sheet_treasurestarUp;
}

void Sheet_treasurestarUp::Clear() {
  treasurestarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_treasurestarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.treasurestarUp treasurestarUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasurestarUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasurestarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasurestarUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_treasurestarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.treasurestarUp treasurestarUp_List = 1;
  for (int i = 0; i < this->treasurestarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasurestarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_treasurestarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.treasurestarUp treasurestarUp_List = 1;
  for (int i = 0; i < this->treasurestarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasurestarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_treasurestarUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.treasurestarUp treasurestarUp_List = 1;
  total_size += 1 * this->treasurestarup_list_size();
  for (int i = 0; i < this->treasurestarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasurestarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_treasurestarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_treasurestarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_treasurestarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_treasurestarUp::MergeFrom(const Sheet_treasurestarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasurestarup_list_.MergeFrom(from.treasurestarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_treasurestarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_treasurestarUp::CopyFrom(const Sheet_treasurestarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_treasurestarUp::IsInitialized() const {

  return true;
}

void Sheet_treasurestarUp::Swap(Sheet_treasurestarUp* other) {
  if (other != this) {
    treasurestarup_list_.Swap(&other->treasurestarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_treasurestarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_treasurestarUp_descriptor_;
  metadata.reflection = Sheet_treasurestarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasurefragmentattributeDesc::kTypeFieldNumber;
const int treasurefragmentattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

treasurefragmentattributeDesc::treasurefragmentattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasurefragmentattributeDesc::InitAsDefaultInstance() {
}

treasurefragmentattributeDesc::treasurefragmentattributeDesc(const treasurefragmentattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasurefragmentattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasurefragmentattributeDesc::~treasurefragmentattributeDesc() {
  SharedDtor();
}

void treasurefragmentattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasurefragmentattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasurefragmentattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasurefragmentattributeDesc_descriptor_;
}

const treasurefragmentattributeDesc& treasurefragmentattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasurefragmentattributeDesc* treasurefragmentattributeDesc::default_instance_ = NULL;

treasurefragmentattributeDesc* treasurefragmentattributeDesc::New() const {
  return new treasurefragmentattributeDesc;
}

void treasurefragmentattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasurefragmentattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasurefragmentattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasurefragmentattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasurefragmentattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasurefragmentattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasurefragmentattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasurefragmentattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasurefragmentattributeDesc::MergeFrom(const treasurefragmentattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasurefragmentattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasurefragmentattributeDesc::CopyFrom(const treasurefragmentattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasurefragmentattributeDesc::IsInitialized() const {

  return true;
}

void treasurefragmentattributeDesc::Swap(treasurefragmentattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasurefragmentattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasurefragmentattributeDesc_descriptor_;
  metadata.reflection = treasurefragmentattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasurefragment::kFragmentIDFieldNumber;
const int treasurefragment::kItemFieldNumber;
const int treasurefragment::kItemNumFieldNumber;
const int treasurefragment::kAttributeFieldNumber;
#endif  // !_MSC_VER

treasurefragment::treasurefragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasurefragment::InitAsDefaultInstance() {
}

treasurefragment::treasurefragment(const treasurefragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasurefragment::SharedCtor() {
  _cached_size_ = 0;
  fragmentid_ = GOOGLE_LONGLONG(0);
  item_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasurefragment::~treasurefragment() {
  SharedDtor();
}

void treasurefragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasurefragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasurefragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasurefragment_descriptor_;
}

const treasurefragment& treasurefragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasurefragment* treasurefragment::default_instance_ = NULL;

treasurefragment* treasurefragment::New() const {
  return new treasurefragment;
}

void treasurefragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragmentid_ = GOOGLE_LONGLONG(0);
    item_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasurefragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fragmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional int64 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.treasurefragmentattributeDesc attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasurefragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 fragmentID = 1;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fragmentid(), output);
  }

  // optional int64 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // repeated .proto_ff.treasurefragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasurefragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 fragmentID = 1;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fragmentid(), target);
  }

  // optional int64 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->item(), target);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // repeated .proto_ff.treasurefragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasurefragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 fragmentID = 1;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fragmentid());
    }

    // optional int64 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  // repeated .proto_ff.treasurefragmentattributeDesc attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasurefragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasurefragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasurefragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasurefragment::MergeFrom(const treasurefragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasurefragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasurefragment::CopyFrom(const treasurefragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasurefragment::IsInitialized() const {

  return true;
}

void treasurefragment::Swap(treasurefragment* other) {
  if (other != this) {
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(item_, other->item_);
    std::swap(itemnum_, other->itemnum_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasurefragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasurefragment_descriptor_;
  metadata.reflection = treasurefragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_treasurefragment::kTreasurefragmentListFieldNumber;
#endif  // !_MSC_VER

Sheet_treasurefragment::Sheet_treasurefragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_treasurefragment::InitAsDefaultInstance() {
}

Sheet_treasurefragment::Sheet_treasurefragment(const Sheet_treasurefragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_treasurefragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_treasurefragment::~Sheet_treasurefragment() {
  SharedDtor();
}

void Sheet_treasurefragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_treasurefragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_treasurefragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_treasurefragment_descriptor_;
}

const Sheet_treasurefragment& Sheet_treasurefragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Sheet_treasurefragment* Sheet_treasurefragment::default_instance_ = NULL;

Sheet_treasurefragment* Sheet_treasurefragment::New() const {
  return new Sheet_treasurefragment;
}

void Sheet_treasurefragment::Clear() {
  treasurefragment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_treasurefragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.treasurefragment treasurefragment_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasurefragment_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasurefragment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasurefragment_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_treasurefragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.treasurefragment treasurefragment_List = 1;
  for (int i = 0; i < this->treasurefragment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasurefragment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_treasurefragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.treasurefragment treasurefragment_List = 1;
  for (int i = 0; i < this->treasurefragment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasurefragment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_treasurefragment::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.treasurefragment treasurefragment_List = 1;
  total_size += 1 * this->treasurefragment_list_size();
  for (int i = 0; i < this->treasurefragment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasurefragment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_treasurefragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_treasurefragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_treasurefragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_treasurefragment::MergeFrom(const Sheet_treasurefragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasurefragment_list_.MergeFrom(from.treasurefragment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_treasurefragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_treasurefragment::CopyFrom(const Sheet_treasurefragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_treasurefragment::IsInitialized() const {

  return true;
}

void Sheet_treasurefragment::Swap(Sheet_treasurefragment* other) {
  if (other != this) {
    treasurefragment_list_.Swap(&other->treasurefragment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_treasurefragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_treasurefragment_descriptor_;
  metadata.reflection = Sheet_treasurefragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasureequipattributeDesc::kTypeFieldNumber;
const int treasureequipattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

treasureequipattributeDesc::treasureequipattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasureequipattributeDesc::InitAsDefaultInstance() {
}

treasureequipattributeDesc::treasureequipattributeDesc(const treasureequipattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasureequipattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasureequipattributeDesc::~treasureequipattributeDesc() {
  SharedDtor();
}

void treasureequipattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasureequipattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasureequipattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasureequipattributeDesc_descriptor_;
}

const treasureequipattributeDesc& treasureequipattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasureequipattributeDesc* treasureequipattributeDesc::default_instance_ = NULL;

treasureequipattributeDesc* treasureequipattributeDesc::New() const {
  return new treasureequipattributeDesc;
}

void treasureequipattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasureequipattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasureequipattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasureequipattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasureequipattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasureequipattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasureequipattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasureequipattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasureequipattributeDesc::MergeFrom(const treasureequipattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasureequipattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasureequipattributeDesc::CopyFrom(const treasureequipattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasureequipattributeDesc::IsInitialized() const {

  return true;
}

void treasureequipattributeDesc::Swap(treasureequipattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasureequipattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasureequipattributeDesc_descriptor_;
  metadata.reflection = treasureequipattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasureequip::kIdFieldNumber;
const int treasureequip::kPositionFieldNumber;
const int treasureequip::kAttributeFieldNumber;
#endif  // !_MSC_VER

treasureequip::treasureequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasureequip::InitAsDefaultInstance() {
}

treasureequip::treasureequip(const treasureequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasureequip::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasureequip::~treasureequip() {
  SharedDtor();
}

void treasureequip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasureequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasureequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasureequip_descriptor_;
}

const treasureequip& treasureequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasureequip* treasureequip::default_instance_ = NULL;

treasureequip* treasureequip::New() const {
  return new treasureequip;
}

void treasureequip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasureequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.treasureequipattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasureequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // repeated .proto_ff.treasureequipattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasureequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // repeated .proto_ff.treasureequipattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasureequip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  // repeated .proto_ff.treasureequipattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasureequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasureequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasureequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasureequip::MergeFrom(const treasureequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasureequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasureequip::CopyFrom(const treasureequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasureequip::IsInitialized() const {

  return true;
}

void treasureequip::Swap(treasureequip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasureequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasureequip_descriptor_;
  metadata.reflection = treasureequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_treasureequip::kTreasureequipListFieldNumber;
#endif  // !_MSC_VER

Sheet_treasureequip::Sheet_treasureequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_treasureequip::InitAsDefaultInstance() {
}

Sheet_treasureequip::Sheet_treasureequip(const Sheet_treasureequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_treasureequip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_treasureequip::~Sheet_treasureequip() {
  SharedDtor();
}

void Sheet_treasureequip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_treasureequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_treasureequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_treasureequip_descriptor_;
}

const Sheet_treasureequip& Sheet_treasureequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Sheet_treasureequip* Sheet_treasureequip::default_instance_ = NULL;

Sheet_treasureequip* Sheet_treasureequip::New() const {
  return new Sheet_treasureequip;
}

void Sheet_treasureequip::Clear() {
  treasureequip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_treasureequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.treasureequip treasureequip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasureequip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasureequip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasureequip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_treasureequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.treasureequip treasureequip_List = 1;
  for (int i = 0; i < this->treasureequip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasureequip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_treasureequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.treasureequip treasureequip_List = 1;
  for (int i = 0; i < this->treasureequip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasureequip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_treasureequip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.treasureequip treasureequip_List = 1;
  total_size += 1 * this->treasureequip_list_size();
  for (int i = 0; i < this->treasureequip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasureequip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_treasureequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_treasureequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_treasureequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_treasureequip::MergeFrom(const Sheet_treasureequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasureequip_list_.MergeFrom(from.treasureequip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_treasureequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_treasureequip::CopyFrom(const Sheet_treasureequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_treasureequip::IsInitialized() const {

  return true;
}

void Sheet_treasureequip::Swap(Sheet_treasureequip* other) {
  if (other != this) {
    treasureequip_list_.Swap(&other->treasureequip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_treasureequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_treasureequip_descriptor_;
  metadata.reflection = Sheet_treasureequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasureslot::kPositionFieldNumber;
const int treasureslot::kRefineLvFieldNumber;
const int treasureslot::kRefineNumFieldNumber;
#endif  // !_MSC_VER

treasureslot::treasureslot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasureslot::InitAsDefaultInstance() {
}

treasureslot::treasureslot(const treasureslot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasureslot::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  refinelv_ = 0;
  refinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasureslot::~treasureslot() {
  SharedDtor();
}

void treasureslot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasureslot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasureslot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasureslot_descriptor_;
}

const treasureslot& treasureslot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasureslot* treasureslot::default_instance_ = NULL;

treasureslot* treasureslot::New() const {
  return new treasureslot;
}

void treasureslot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    refinelv_ = 0;
    refinenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasureslot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refineLv;
        break;
      }

      // optional int32 refineLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refineNum;
        break;
      }

      // optional int32 refineNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinenum_)));
          set_has_refinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasureslot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // optional int32 refineLv = 2;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refinelv(), output);
  }

  // optional int32 refineNum = 3;
  if (has_refinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasureslot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  // optional int32 refineLv = 2;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refinelv(), target);
  }

  // optional int32 refineNum = 3;
  if (has_refinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasureslot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 refineLv = 2;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinelv());
    }

    // optional int32 refineNum = 3;
    if (has_refinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasureslot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasureslot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasureslot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasureslot::MergeFrom(const treasureslot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_refinenum()) {
      set_refinenum(from.refinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasureslot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasureslot::CopyFrom(const treasureslot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasureslot::IsInitialized() const {

  return true;
}

void treasureslot::Swap(treasureslot* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(refinenum_, other->refinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasureslot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasureslot_descriptor_;
  metadata.reflection = treasureslot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_treasureslot::kTreasureslotListFieldNumber;
#endif  // !_MSC_VER

Sheet_treasureslot::Sheet_treasureslot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_treasureslot::InitAsDefaultInstance() {
}

Sheet_treasureslot::Sheet_treasureslot(const Sheet_treasureslot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_treasureslot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_treasureslot::~Sheet_treasureslot() {
  SharedDtor();
}

void Sheet_treasureslot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_treasureslot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_treasureslot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_treasureslot_descriptor_;
}

const Sheet_treasureslot& Sheet_treasureslot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Sheet_treasureslot* Sheet_treasureslot::default_instance_ = NULL;

Sheet_treasureslot* Sheet_treasureslot::New() const {
  return new Sheet_treasureslot;
}

void Sheet_treasureslot::Clear() {
  treasureslot_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_treasureslot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.treasureslot treasureslot_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasureslot_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasureslot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasureslot_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_treasureslot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.treasureslot treasureslot_List = 1;
  for (int i = 0; i < this->treasureslot_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasureslot_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_treasureslot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.treasureslot treasureslot_List = 1;
  for (int i = 0; i < this->treasureslot_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasureslot_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_treasureslot::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.treasureslot treasureslot_List = 1;
  total_size += 1 * this->treasureslot_list_size();
  for (int i = 0; i < this->treasureslot_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasureslot_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_treasureslot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_treasureslot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_treasureslot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_treasureslot::MergeFrom(const Sheet_treasureslot& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasureslot_list_.MergeFrom(from.treasureslot_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_treasureslot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_treasureslot::CopyFrom(const Sheet_treasureslot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_treasureslot::IsInitialized() const {

  return true;
}

void Sheet_treasureslot::Swap(Sheet_treasureslot* other) {
  if (other != this) {
    treasureslot_list_.Swap(&other->treasureslot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_treasureslot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_treasureslot_descriptor_;
  metadata.reflection = Sheet_treasureslot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treasurerefine::kIdFieldNumber;
const int treasurerefine::kRefineIdFieldNumber;
const int treasurerefine::kRefineNumFieldNumber;
#endif  // !_MSC_VER

treasurerefine::treasurerefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void treasurerefine::InitAsDefaultInstance() {
}

treasurerefine::treasurerefine(const treasurerefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void treasurerefine::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  refineid_ = GOOGLE_LONGLONG(0);
  refinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treasurerefine::~treasurerefine() {
  SharedDtor();
}

void treasurerefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void treasurerefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treasurerefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treasurerefine_descriptor_;
}

const treasurerefine& treasurerefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

treasurerefine* treasurerefine::default_instance_ = NULL;

treasurerefine* treasurerefine::New() const {
  return new treasurerefine;
}

void treasurerefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    refineid_ = GOOGLE_LONGLONG(0);
    refinenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treasurerefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refineId;
        break;
      }

      // optional int64 refineId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refineid_)));
          set_has_refineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refineNum;
        break;
      }

      // optional int32 refineNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinenum_)));
          set_has_refinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void treasurerefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 refineId = 2;
  if (has_refineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->refineid(), output);
  }

  // optional int32 refineNum = 3;
  if (has_refinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* treasurerefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 refineId = 2;
  if (has_refineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->refineid(), target);
  }

  // optional int32 refineNum = 3;
  if (has_refinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int treasurerefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 refineId = 2;
    if (has_refineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refineid());
    }

    // optional int32 refineNum = 3;
    if (has_refinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treasurerefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treasurerefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treasurerefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treasurerefine::MergeFrom(const treasurerefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_refineid()) {
      set_refineid(from.refineid());
    }
    if (from.has_refinenum()) {
      set_refinenum(from.refinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treasurerefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treasurerefine::CopyFrom(const treasurerefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treasurerefine::IsInitialized() const {

  return true;
}

void treasurerefine::Swap(treasurerefine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(refineid_, other->refineid_);
    std::swap(refinenum_, other->refinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treasurerefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treasurerefine_descriptor_;
  metadata.reflection = treasurerefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_treasurerefine::kTreasurerefineListFieldNumber;
#endif  // !_MSC_VER

Sheet_treasurerefine::Sheet_treasurerefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_treasurerefine::InitAsDefaultInstance() {
}

Sheet_treasurerefine::Sheet_treasurerefine(const Sheet_treasurerefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_treasurerefine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_treasurerefine::~Sheet_treasurerefine() {
  SharedDtor();
}

void Sheet_treasurerefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_treasurerefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_treasurerefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_treasurerefine_descriptor_;
}

const Sheet_treasurerefine& Sheet_treasurerefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treasure_2eproto();
  return *default_instance_;
}

Sheet_treasurerefine* Sheet_treasurerefine::default_instance_ = NULL;

Sheet_treasurerefine* Sheet_treasurerefine::New() const {
  return new Sheet_treasurerefine;
}

void Sheet_treasurerefine::Clear() {
  treasurerefine_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_treasurerefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.treasurerefine treasurerefine_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasurerefine_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasurerefine_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasurerefine_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_treasurerefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.treasurerefine treasurerefine_List = 1;
  for (int i = 0; i < this->treasurerefine_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasurerefine_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_treasurerefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.treasurerefine treasurerefine_List = 1;
  for (int i = 0; i < this->treasurerefine_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasurerefine_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_treasurerefine::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.treasurerefine treasurerefine_List = 1;
  total_size += 1 * this->treasurerefine_list_size();
  for (int i = 0; i < this->treasurerefine_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasurerefine_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_treasurerefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_treasurerefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_treasurerefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_treasurerefine::MergeFrom(const Sheet_treasurerefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasurerefine_list_.MergeFrom(from.treasurerefine_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_treasurerefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_treasurerefine::CopyFrom(const Sheet_treasurerefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_treasurerefine::IsInitialized() const {

  return true;
}

void Sheet_treasurerefine::Swap(Sheet_treasurerefine* other) {
  if (other != this) {
    treasurerefine_list_.Swap(&other->treasurerefine_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_treasurerefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_treasurerefine_descriptor_;
  metadata.reflection = Sheet_treasurerefine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
