// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GMCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GMCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GMCommandGMCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCommandGMCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GMCommandGMCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GMCommandGMCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GMCommand_2eproto() {
  protobuf_AddDesc_GMCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GMCommand.proto");
  GOOGLE_CHECK(file != NULL);
  GMCommandGMCommand_descriptor_ = file->message_type(0);
  static const int GMCommandGMCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGMCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGMCommand, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGMCommand, paramcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGMCommand, des_),
  };
  GMCommandGMCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCommandGMCommand_descriptor_,
      GMCommandGMCommand::default_instance_,
      GMCommandGMCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGMCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGMCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCommandGMCommand));
  Sheet_GMCommandGMCommand_descriptor_ = file->message_type(1);
  static const int Sheet_GMCommandGMCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMCommandGMCommand, gmcommandgmcommand_list_),
  };
  Sheet_GMCommandGMCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GMCommandGMCommand_descriptor_,
      Sheet_GMCommandGMCommand::default_instance_,
      Sheet_GMCommandGMCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMCommandGMCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMCommandGMCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GMCommandGMCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GMCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCommandGMCommand_descriptor_, &GMCommandGMCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GMCommandGMCommand_descriptor_, &Sheet_GMCommandGMCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GMCommand_2eproto() {
  delete GMCommandGMCommand::default_instance_;
  delete GMCommandGMCommand_reflection_;
  delete Sheet_GMCommandGMCommand::default_instance_;
  delete Sheet_GMCommandGMCommand_reflection_;
}

void protobuf_AddDesc_GMCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017GMCommand.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\233\001\n\022GMCommandGMCommand\022\034\n\002ID\030"
    "\001 \001(\005B\020\302\377\024\014\345\221\275\344\273\244\347\264\242\345\274\225\022$\n\003Key\030\002 \001(\tB\027\302\377"
    "\024\017\345\221\275\344\273\244\345\205\263\351\224\256\345\255\227\220\301\024<\022$\n\nParamCount\030\003 \001("
    "\005B\020\302\377\024\014\345\217\202\346\225\260\346\225\260\351\207\217\022\033\n\003Des\030\004 \001(\tB\016\302\377\024\006\346\217"
    "\217\350\277\260\220\301\024P\"_\n\030Sheet_GMCommandGMCommand\022C\n\027"
    "GMCommandGMCommand_List\030\001 \003(\0132\034.proto_ff"
    ".GMCommandGMCommandB\004\210\301\024P", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GMCommand.proto", &protobuf_RegisterTypes);
  GMCommandGMCommand::default_instance_ = new GMCommandGMCommand();
  Sheet_GMCommandGMCommand::default_instance_ = new Sheet_GMCommandGMCommand();
  GMCommandGMCommand::default_instance_->InitAsDefaultInstance();
  Sheet_GMCommandGMCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GMCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GMCommand_2eproto {
  StaticDescriptorInitializer_GMCommand_2eproto() {
    protobuf_AddDesc_GMCommand_2eproto();
  }
} static_descriptor_initializer_GMCommand_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GMCommandGMCommand::kIDFieldNumber;
const int GMCommandGMCommand::kKeyFieldNumber;
const int GMCommandGMCommand::kParamCountFieldNumber;
const int GMCommandGMCommand::kDesFieldNumber;
#endif  // !_MSC_VER

GMCommandGMCommand::GMCommandGMCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMCommandGMCommand::InitAsDefaultInstance() {
}

GMCommandGMCommand::GMCommandGMCommand(const GMCommandGMCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMCommandGMCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paramcount_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCommandGMCommand::~GMCommandGMCommand() {
  SharedDtor();
}

void GMCommandGMCommand::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void GMCommandGMCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCommandGMCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCommandGMCommand_descriptor_;
}

const GMCommandGMCommand& GMCommandGMCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMCommand_2eproto();
  return *default_instance_;
}

GMCommandGMCommand* GMCommandGMCommand::default_instance_ = NULL;

GMCommandGMCommand* GMCommandGMCommand::New() const {
  return new GMCommandGMCommand;
}

void GMCommandGMCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    paramcount_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCommandGMCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // optional string Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ParamCount;
        break;
      }

      // optional int32 ParamCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParamCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paramcount_)));
          set_has_paramcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Des;
        break;
      }

      // optional string Des = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMCommandGMCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional int32 ParamCount = 3;
  if (has_paramcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->paramcount(), output);
  }

  // optional string Des = 4;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->des(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMCommandGMCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional int32 ParamCount = 3;
  if (has_paramcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->paramcount(), target);
  }

  // optional string Des = 4;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->des(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMCommandGMCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 ParamCount = 3;
    if (has_paramcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paramcount());
    }

    // optional string Des = 4;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCommandGMCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCommandGMCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCommandGMCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCommandGMCommand::MergeFrom(const GMCommandGMCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_paramcount()) {
      set_paramcount(from.paramcount());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCommandGMCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCommandGMCommand::CopyFrom(const GMCommandGMCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCommandGMCommand::IsInitialized() const {

  return true;
}

void GMCommandGMCommand::Swap(GMCommandGMCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(key_, other->key_);
    std::swap(paramcount_, other->paramcount_);
    std::swap(des_, other->des_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCommandGMCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCommandGMCommand_descriptor_;
  metadata.reflection = GMCommandGMCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GMCommandGMCommand::kGMCommandGMCommandListFieldNumber;
#endif  // !_MSC_VER

Sheet_GMCommandGMCommand::Sheet_GMCommandGMCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GMCommandGMCommand::InitAsDefaultInstance() {
}

Sheet_GMCommandGMCommand::Sheet_GMCommandGMCommand(const Sheet_GMCommandGMCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GMCommandGMCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GMCommandGMCommand::~Sheet_GMCommandGMCommand() {
  SharedDtor();
}

void Sheet_GMCommandGMCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GMCommandGMCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GMCommandGMCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GMCommandGMCommand_descriptor_;
}

const Sheet_GMCommandGMCommand& Sheet_GMCommandGMCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMCommand_2eproto();
  return *default_instance_;
}

Sheet_GMCommandGMCommand* Sheet_GMCommandGMCommand::default_instance_ = NULL;

Sheet_GMCommandGMCommand* Sheet_GMCommandGMCommand::New() const {
  return new Sheet_GMCommandGMCommand;
}

void Sheet_GMCommandGMCommand::Clear() {
  gmcommandgmcommand_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GMCommandGMCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMCommandGMCommand GMCommandGMCommand_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMCommandGMCommand_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmcommandgmcommand_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GMCommandGMCommand_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GMCommandGMCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMCommandGMCommand GMCommandGMCommand_List = 1;
  for (int i = 0; i < this->gmcommandgmcommand_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmcommandgmcommand_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GMCommandGMCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMCommandGMCommand GMCommandGMCommand_List = 1;
  for (int i = 0; i < this->gmcommandgmcommand_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmcommandgmcommand_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GMCommandGMCommand::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMCommandGMCommand GMCommandGMCommand_List = 1;
  total_size += 1 * this->gmcommandgmcommand_list_size();
  for (int i = 0; i < this->gmcommandgmcommand_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmcommandgmcommand_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GMCommandGMCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GMCommandGMCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GMCommandGMCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GMCommandGMCommand::MergeFrom(const Sheet_GMCommandGMCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmcommandgmcommand_list_.MergeFrom(from.gmcommandgmcommand_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GMCommandGMCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GMCommandGMCommand::CopyFrom(const Sheet_GMCommandGMCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GMCommandGMCommand::IsInitialized() const {

  return true;
}

void Sheet_GMCommandGMCommand::Swap(Sheet_GMCommandGMCommand* other) {
  if (other != this) {
    gmcommandgmcommand_list_.Swap(&other->gmcommandgmcommand_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GMCommandGMCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GMCommandGMCommand_descriptor_;
  metadata.reflection = Sheet_GMCommandGMCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
