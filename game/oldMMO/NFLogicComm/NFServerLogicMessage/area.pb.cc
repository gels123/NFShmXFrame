// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: area.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "area.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* areaarea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  areaarea_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_areaarea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_areaarea_reflection_ = NULL;
const ::google::protobuf::Descriptor* areapath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  areapath_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_areapath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_areapath_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_area_2eproto() {
  protobuf_AddDesc_area_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "area.proto");
  GOOGLE_CHECK(file != NULL);
  areaarea_descriptor_ = file->message_type(0);
  static const int areaarea_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areaarea, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areaarea, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areaarea, belongtosceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areaarea, shapetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areaarea, isnotice_),
  };
  areaarea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      areaarea_descriptor_,
      areaarea::default_instance_,
      areaarea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areaarea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areaarea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(areaarea));
  Sheet_areaarea_descriptor_ = file->message_type(1);
  static const int Sheet_areaarea_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_areaarea, areaarea_list_),
  };
  Sheet_areaarea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_areaarea_descriptor_,
      Sheet_areaarea::default_instance_,
      Sheet_areaarea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_areaarea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_areaarea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_areaarea));
  areapath_descriptor_ = file->message_type(2);
  static const int areapath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areapath, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areapath, belongtosceneid_),
  };
  areapath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      areapath_descriptor_,
      areapath::default_instance_,
      areapath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areapath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(areapath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(areapath));
  Sheet_areapath_descriptor_ = file->message_type(3);
  static const int Sheet_areapath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_areapath, areapath_list_),
  };
  Sheet_areapath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_areapath_descriptor_,
      Sheet_areapath::default_instance_,
      Sheet_areapath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_areapath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_areapath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_areapath));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_area_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    areaarea_descriptor_, &areaarea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_areaarea_descriptor_, &Sheet_areaarea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    areapath_descriptor_, &areapath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_areapath_descriptor_, &Sheet_areapath::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_area_2eproto() {
  delete areaarea::default_instance_;
  delete areaarea_reflection_;
  delete Sheet_areaarea::default_instance_;
  delete Sheet_areaarea_reflection_;
  delete areapath::default_instance_;
  delete areapath_reflection_;
  delete Sheet_areapath::default_instance_;
  delete Sheet_areapath_reflection_;
}

void protobuf_AddDesc_area_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\narea.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\301\001\n\010areaarea\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\345\214\272\345"
    "\237\237ID\022!\n\007subType\030\002 \001(\005B\020\302\377\024\014\347\273\206\345\210\206\347\261\273\345\236\213\022"
    ")\n\017belongToSceneID\030\003 \001(\003B\020\302\377\024\014\346\211\200\345\261\236\345\234\272\346"
    "\231\257\022#\n\tshapeType\030\004 \001(\005B\020\302\377\024\014\345\275\242\347\212\266\347\261\273\345\236\213\022"
    "(\n\010isNotice\030\005 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\350\277\233\345\207\272\346\217\220\347\244"
    "\272\"B\n\016Sheet_areaarea\0220\n\rareaarea_List\030\001 \003"
    "(\0132\022.proto_ff.areaareaB\005\210\301\024\254\002\"O\n\010areapat"
    "h\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\350\267\257\345\276\204ID\022)\n\017belongToS"
    "ceneID\030\002 \001(\003B\020\302\377\024\014\346\211\200\345\261\236\345\234\272\346\231\257\"B\n\016Sheet_"
    "areapath\0220\n\rareapath_List\030\001 \003(\0132\022.proto_"
    "ff.areapathB\005\210\301\024\320\017", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "area.proto", &protobuf_RegisterTypes);
  areaarea::default_instance_ = new areaarea();
  Sheet_areaarea::default_instance_ = new Sheet_areaarea();
  areapath::default_instance_ = new areapath();
  Sheet_areapath::default_instance_ = new Sheet_areapath();
  areaarea::default_instance_->InitAsDefaultInstance();
  Sheet_areaarea::default_instance_->InitAsDefaultInstance();
  areapath::default_instance_->InitAsDefaultInstance();
  Sheet_areapath::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_area_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_area_2eproto {
  StaticDescriptorInitializer_area_2eproto() {
    protobuf_AddDesc_area_2eproto();
  }
} static_descriptor_initializer_area_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int areaarea::kIdFieldNumber;
const int areaarea::kSubTypeFieldNumber;
const int areaarea::kBelongToSceneIDFieldNumber;
const int areaarea::kShapeTypeFieldNumber;
const int areaarea::kIsNoticeFieldNumber;
#endif  // !_MSC_VER

areaarea::areaarea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void areaarea::InitAsDefaultInstance() {
}

areaarea::areaarea(const areaarea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void areaarea::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  belongtosceneid_ = GOOGLE_LONGLONG(0);
  shapetype_ = 0;
  isnotice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

areaarea::~areaarea() {
  SharedDtor();
}

void areaarea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void areaarea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* areaarea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return areaarea_descriptor_;
}

const areaarea& areaarea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_area_2eproto();
  return *default_instance_;
}

areaarea* areaarea::default_instance_ = NULL;

areaarea* areaarea::New() const {
  return new areaarea;
}

void areaarea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    belongtosceneid_ = GOOGLE_LONGLONG(0);
    shapetype_ = 0;
    isnotice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool areaarea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subType;
        break;
      }

      // optional int32 subType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_belongToSceneID;
        break;
      }

      // optional int64 belongToSceneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belongToSceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &belongtosceneid_)));
          set_has_belongtosceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_shapeType;
        break;
      }

      // optional int32 shapeType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shapeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shapetype_)));
          set_has_shapetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isNotice;
        break;
      }

      // optional int32 isNotice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNotice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnotice_)));
          set_has_isnotice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void areaarea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 subType = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subtype(), output);
  }

  // optional int64 belongToSceneID = 3;
  if (has_belongtosceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->belongtosceneid(), output);
  }

  // optional int32 shapeType = 4;
  if (has_shapetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shapetype(), output);
  }

  // optional int32 isNotice = 5;
  if (has_isnotice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isnotice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* areaarea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 subType = 2;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subtype(), target);
  }

  // optional int64 belongToSceneID = 3;
  if (has_belongtosceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->belongtosceneid(), target);
  }

  // optional int32 shapeType = 4;
  if (has_shapetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shapetype(), target);
  }

  // optional int32 isNotice = 5;
  if (has_isnotice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isnotice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int areaarea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 subType = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional int64 belongToSceneID = 3;
    if (has_belongtosceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->belongtosceneid());
    }

    // optional int32 shapeType = 4;
    if (has_shapetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shapetype());
    }

    // optional int32 isNotice = 5;
    if (has_isnotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnotice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void areaarea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const areaarea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const areaarea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void areaarea::MergeFrom(const areaarea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_belongtosceneid()) {
      set_belongtosceneid(from.belongtosceneid());
    }
    if (from.has_shapetype()) {
      set_shapetype(from.shapetype());
    }
    if (from.has_isnotice()) {
      set_isnotice(from.isnotice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void areaarea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void areaarea::CopyFrom(const areaarea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool areaarea::IsInitialized() const {

  return true;
}

void areaarea::Swap(areaarea* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subtype_, other->subtype_);
    std::swap(belongtosceneid_, other->belongtosceneid_);
    std::swap(shapetype_, other->shapetype_);
    std::swap(isnotice_, other->isnotice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata areaarea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = areaarea_descriptor_;
  metadata.reflection = areaarea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_areaarea::kAreaareaListFieldNumber;
#endif  // !_MSC_VER

Sheet_areaarea::Sheet_areaarea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_areaarea::InitAsDefaultInstance() {
}

Sheet_areaarea::Sheet_areaarea(const Sheet_areaarea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_areaarea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_areaarea::~Sheet_areaarea() {
  SharedDtor();
}

void Sheet_areaarea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_areaarea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_areaarea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_areaarea_descriptor_;
}

const Sheet_areaarea& Sheet_areaarea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_area_2eproto();
  return *default_instance_;
}

Sheet_areaarea* Sheet_areaarea::default_instance_ = NULL;

Sheet_areaarea* Sheet_areaarea::New() const {
  return new Sheet_areaarea;
}

void Sheet_areaarea::Clear() {
  areaarea_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_areaarea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.areaarea areaarea_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaarea_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areaarea_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_areaarea_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_areaarea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.areaarea areaarea_List = 1;
  for (int i = 0; i < this->areaarea_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->areaarea_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_areaarea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.areaarea areaarea_List = 1;
  for (int i = 0; i < this->areaarea_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->areaarea_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_areaarea::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.areaarea areaarea_List = 1;
  total_size += 1 * this->areaarea_list_size();
  for (int i = 0; i < this->areaarea_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areaarea_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_areaarea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_areaarea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_areaarea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_areaarea::MergeFrom(const Sheet_areaarea& from) {
  GOOGLE_CHECK_NE(&from, this);
  areaarea_list_.MergeFrom(from.areaarea_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_areaarea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_areaarea::CopyFrom(const Sheet_areaarea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_areaarea::IsInitialized() const {

  return true;
}

void Sheet_areaarea::Swap(Sheet_areaarea* other) {
  if (other != this) {
    areaarea_list_.Swap(&other->areaarea_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_areaarea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_areaarea_descriptor_;
  metadata.reflection = Sheet_areaarea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int areapath::kIdFieldNumber;
const int areapath::kBelongToSceneIDFieldNumber;
#endif  // !_MSC_VER

areapath::areapath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void areapath::InitAsDefaultInstance() {
}

areapath::areapath(const areapath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void areapath::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  belongtosceneid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

areapath::~areapath() {
  SharedDtor();
}

void areapath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void areapath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* areapath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return areapath_descriptor_;
}

const areapath& areapath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_area_2eproto();
  return *default_instance_;
}

areapath* areapath::default_instance_ = NULL;

areapath* areapath::New() const {
  return new areapath;
}

void areapath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    belongtosceneid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool areapath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_belongToSceneID;
        break;
      }

      // optional int64 belongToSceneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belongToSceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &belongtosceneid_)));
          set_has_belongtosceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void areapath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 belongToSceneID = 2;
  if (has_belongtosceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->belongtosceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* areapath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 belongToSceneID = 2;
  if (has_belongtosceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->belongtosceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int areapath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 belongToSceneID = 2;
    if (has_belongtosceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->belongtosceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void areapath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const areapath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const areapath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void areapath::MergeFrom(const areapath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_belongtosceneid()) {
      set_belongtosceneid(from.belongtosceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void areapath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void areapath::CopyFrom(const areapath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool areapath::IsInitialized() const {

  return true;
}

void areapath::Swap(areapath* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(belongtosceneid_, other->belongtosceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata areapath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = areapath_descriptor_;
  metadata.reflection = areapath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_areapath::kAreapathListFieldNumber;
#endif  // !_MSC_VER

Sheet_areapath::Sheet_areapath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_areapath::InitAsDefaultInstance() {
}

Sheet_areapath::Sheet_areapath(const Sheet_areapath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_areapath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_areapath::~Sheet_areapath() {
  SharedDtor();
}

void Sheet_areapath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_areapath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_areapath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_areapath_descriptor_;
}

const Sheet_areapath& Sheet_areapath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_area_2eproto();
  return *default_instance_;
}

Sheet_areapath* Sheet_areapath::default_instance_ = NULL;

Sheet_areapath* Sheet_areapath::New() const {
  return new Sheet_areapath;
}

void Sheet_areapath::Clear() {
  areapath_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_areapath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.areapath areapath_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areapath_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areapath_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_areapath_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_areapath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.areapath areapath_List = 1;
  for (int i = 0; i < this->areapath_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->areapath_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_areapath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.areapath areapath_List = 1;
  for (int i = 0; i < this->areapath_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->areapath_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_areapath::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.areapath areapath_List = 1;
  total_size += 1 * this->areapath_list_size();
  for (int i = 0; i < this->areapath_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areapath_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_areapath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_areapath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_areapath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_areapath::MergeFrom(const Sheet_areapath& from) {
  GOOGLE_CHECK_NE(&from, this);
  areapath_list_.MergeFrom(from.areapath_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_areapath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_areapath::CopyFrom(const Sheet_areapath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_areapath::IsInitialized() const {

  return true;
}

void Sheet_areapath::Swap(Sheet_areapath* other) {
  if (other != this) {
    areapath_list_.Swap(&other->areapath_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_areapath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_areapath_descriptor_;
  metadata.reflection = Sheet_areapath_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
