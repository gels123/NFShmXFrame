// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achievement.proto

#ifndef PROTOBUF_achievement_2eproto__INCLUDED
#define PROTOBUF_achievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_achievement_2eproto();
void protobuf_AssignDesc_achievement_2eproto();
void protobuf_ShutdownFile_achievement_2eproto();

class achievementachievementitemRewardDesc;
class achievementachievement;
class Sheet_achievementachievement;
class achievementachievementreward;
class Sheet_achievementachievementreward;

// ===================================================================

class achievementachievementitemRewardDesc : public ::google::protobuf::Message {
 public:
  achievementachievementitemRewardDesc();
  virtual ~achievementachievementitemRewardDesc();

  achievementachievementitemRewardDesc(const achievementachievementitemRewardDesc& from);

  inline achievementachievementitemRewardDesc& operator=(const achievementachievementitemRewardDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const achievementachievementitemRewardDesc& default_instance();

  void Swap(achievementachievementitemRewardDesc* other);

  // implements Message ----------------------------------------------

  achievementachievementitemRewardDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const achievementachievementitemRewardDesc& from);
  void MergeFrom(const achievementachievementitemRewardDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.achievementachievementitemRewardDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static achievementachievementitemRewardDesc* default_instance_;
};
// -------------------------------------------------------------------

class achievementachievement : public ::google::protobuf::Message {
 public:
  achievementachievement();
  virtual ~achievementachievement();

  achievementachievement(const achievementachievement& from);

  inline achievementachievement& operator=(const achievementachievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const achievementachievement& default_instance();

  void Swap(achievementachievement* other);

  // implements Message ----------------------------------------------

  achievementachievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const achievementachievement& from);
  void MergeFrom(const achievementachievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 achievementId = 1;
  inline bool has_achievementid() const;
  inline void clear_achievementid();
  static const int kAchievementIdFieldNumber = 1;
  inline ::google::protobuf::int64 achievementid() const;
  inline void set_achievementid(::google::protobuf::int64 value);

  // optional int32 achievementLevel = 2;
  inline bool has_achievementlevel() const;
  inline void clear_achievementlevel();
  static const int kAchievementLevelFieldNumber = 2;
  inline ::google::protobuf::int32 achievementlevel() const;
  inline void set_achievementlevel(::google::protobuf::int32 value);

  // optional int32 achievementDTP = 3;
  inline bool has_achievementdtp() const;
  inline void clear_achievementdtp();
  static const int kAchievementDTPFieldNumber = 3;
  inline ::google::protobuf::int32 achievementdtp() const;
  inline void set_achievementdtp(::google::protobuf::int32 value);

  // optional int32 achievementType = 4;
  inline bool has_achievementtype() const;
  inline void clear_achievementtype();
  static const int kAchievementTypeFieldNumber = 4;
  inline ::google::protobuf::int32 achievementtype() const;
  inline void set_achievementtype(::google::protobuf::int32 value);

  // optional int32 achievementSubType = 5;
  inline bool has_achievementsubtype() const;
  inline void clear_achievementsubtype();
  static const int kAchievementSubTypeFieldNumber = 5;
  inline ::google::protobuf::int32 achievementsubtype() const;
  inline void set_achievementsubtype(::google::protobuf::int32 value);

  // optional int64 achievementObjectID = 6;
  inline bool has_achievementobjectid() const;
  inline void clear_achievementobjectid();
  static const int kAchievementObjectIDFieldNumber = 6;
  inline ::google::protobuf::int64 achievementobjectid() const;
  inline void set_achievementobjectid(::google::protobuf::int64 value);

  // optional string achievementObjectIDString = 7;
  inline bool has_achievementobjectidstring() const;
  inline void clear_achievementobjectidstring();
  static const int kAchievementObjectIDStringFieldNumber = 7;
  inline const ::std::string& achievementobjectidstring() const;
  inline void set_achievementobjectidstring(const ::std::string& value);
  inline void set_achievementobjectidstring(const char* value);
  inline void set_achievementobjectidstring(const char* value, size_t size);
  inline ::std::string* mutable_achievementobjectidstring();
  inline ::std::string* release_achievementobjectidstring();
  inline void set_allocated_achievementobjectidstring(::std::string* achievementobjectidstring);

  // optional int32 achievementObjectValue = 8;
  inline bool has_achievementobjectvalue() const;
  inline void clear_achievementobjectvalue();
  static const int kAchievementObjectValueFieldNumber = 8;
  inline ::google::protobuf::int32 achievementobjectvalue() const;
  inline void set_achievementobjectvalue(::google::protobuf::int32 value);

  // optional int32 achievementDia = 9;
  inline bool has_achievementdia() const;
  inline void clear_achievementdia();
  static const int kAchievementDiaFieldNumber = 9;
  inline ::google::protobuf::int32 achievementdia() const;
  inline void set_achievementdia(::google::protobuf::int32 value);

  // optional int32 achievementGod = 10;
  inline bool has_achievementgod() const;
  inline void clear_achievementgod();
  static const int kAchievementGodFieldNumber = 10;
  inline ::google::protobuf::int32 achievementgod() const;
  inline void set_achievementgod(::google::protobuf::int32 value);

  // optional int32 achievementPoint = 11;
  inline bool has_achievementpoint() const;
  inline void clear_achievementpoint();
  static const int kAchievementPointFieldNumber = 11;
  inline ::google::protobuf::int32 achievementpoint() const;
  inline void set_achievementpoint(::google::protobuf::int32 value);

  // optional int32 linkID = 12;
  inline bool has_linkid() const;
  inline void clear_linkid();
  static const int kLinkIDFieldNumber = 12;
  inline ::google::protobuf::int32 linkid() const;
  inline void set_linkid(::google::protobuf::int32 value);

  // repeated .proto_ff.achievementachievementitemRewardDesc itemReward = 13;
  inline int itemreward_size() const;
  inline void clear_itemreward();
  static const int kItemRewardFieldNumber = 13;
  inline const ::proto_ff::achievementachievementitemRewardDesc& itemreward(int index) const;
  inline ::proto_ff::achievementachievementitemRewardDesc* mutable_itemreward(int index);
  inline ::proto_ff::achievementachievementitemRewardDesc* add_itemreward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementitemRewardDesc >&
      itemreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementitemRewardDesc >*
      mutable_itemreward();

  // @@protoc_insertion_point(class_scope:proto_ff.achievementachievement)
 private:
  inline void set_has_achievementid();
  inline void clear_has_achievementid();
  inline void set_has_achievementlevel();
  inline void clear_has_achievementlevel();
  inline void set_has_achievementdtp();
  inline void clear_has_achievementdtp();
  inline void set_has_achievementtype();
  inline void clear_has_achievementtype();
  inline void set_has_achievementsubtype();
  inline void clear_has_achievementsubtype();
  inline void set_has_achievementobjectid();
  inline void clear_has_achievementobjectid();
  inline void set_has_achievementobjectidstring();
  inline void clear_has_achievementobjectidstring();
  inline void set_has_achievementobjectvalue();
  inline void clear_has_achievementobjectvalue();
  inline void set_has_achievementdia();
  inline void clear_has_achievementdia();
  inline void set_has_achievementgod();
  inline void clear_has_achievementgod();
  inline void set_has_achievementpoint();
  inline void clear_has_achievementpoint();
  inline void set_has_linkid();
  inline void clear_has_linkid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 achievementid_;
  ::google::protobuf::int32 achievementlevel_;
  ::google::protobuf::int32 achievementdtp_;
  ::google::protobuf::int32 achievementtype_;
  ::google::protobuf::int32 achievementsubtype_;
  ::google::protobuf::int64 achievementobjectid_;
  ::std::string* achievementobjectidstring_;
  ::google::protobuf::int32 achievementobjectvalue_;
  ::google::protobuf::int32 achievementdia_;
  ::google::protobuf::int32 achievementgod_;
  ::google::protobuf::int32 achievementpoint_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementitemRewardDesc > itemreward_;
  ::google::protobuf::int32 linkid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static achievementachievement* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_achievementachievement : public ::google::protobuf::Message {
 public:
  Sheet_achievementachievement();
  virtual ~Sheet_achievementachievement();

  Sheet_achievementachievement(const Sheet_achievementachievement& from);

  inline Sheet_achievementachievement& operator=(const Sheet_achievementachievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_achievementachievement& default_instance();

  void Swap(Sheet_achievementachievement* other);

  // implements Message ----------------------------------------------

  Sheet_achievementachievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_achievementachievement& from);
  void MergeFrom(const Sheet_achievementachievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.achievementachievement achievementachievement_List = 1;
  inline int achievementachievement_list_size() const;
  inline void clear_achievementachievement_list();
  static const int kAchievementachievementListFieldNumber = 1;
  inline const ::proto_ff::achievementachievement& achievementachievement_list(int index) const;
  inline ::proto_ff::achievementachievement* mutable_achievementachievement_list(int index);
  inline ::proto_ff::achievementachievement* add_achievementachievement_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievement >&
      achievementachievement_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievement >*
      mutable_achievementachievement_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_achievementachievement)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievement > achievementachievement_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static Sheet_achievementachievement* default_instance_;
};
// -------------------------------------------------------------------

class achievementachievementreward : public ::google::protobuf::Message {
 public:
  achievementachievementreward();
  virtual ~achievementachievementreward();

  achievementachievementreward(const achievementachievementreward& from);

  inline achievementachievementreward& operator=(const achievementachievementreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const achievementachievementreward& default_instance();

  void Swap(achievementachievementreward* other);

  // implements Message ----------------------------------------------

  achievementachievementreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const achievementachievementreward& from);
  void MergeFrom(const achievementachievementreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 achievementPrizeId = 1;
  inline bool has_achievementprizeid() const;
  inline void clear_achievementprizeid();
  static const int kAchievementPrizeIdFieldNumber = 1;
  inline ::google::protobuf::int64 achievementprizeid() const;
  inline void set_achievementprizeid(::google::protobuf::int64 value);

  // optional int32 achievementType = 2;
  inline bool has_achievementtype() const;
  inline void clear_achievementtype();
  static const int kAchievementTypeFieldNumber = 2;
  inline ::google::protobuf::int32 achievementtype() const;
  inline void set_achievementtype(::google::protobuf::int32 value);

  // optional int32 achievementPointValue = 3;
  inline bool has_achievementpointvalue() const;
  inline void clear_achievementpointvalue();
  static const int kAchievementPointValueFieldNumber = 3;
  inline ::google::protobuf::int32 achievementpointvalue() const;
  inline void set_achievementpointvalue(::google::protobuf::int32 value);

  // optional int64 achievementSkil = 4;
  inline bool has_achievementskil() const;
  inline void clear_achievementskil();
  static const int kAchievementSkilFieldNumber = 4;
  inline ::google::protobuf::int64 achievementskil() const;
  inline void set_achievementskil(::google::protobuf::int64 value);

  // optional int32 achievementDia = 5;
  inline bool has_achievementdia() const;
  inline void clear_achievementdia();
  static const int kAchievementDiaFieldNumber = 5;
  inline ::google::protobuf::int32 achievementdia() const;
  inline void set_achievementdia(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.achievementachievementreward)
 private:
  inline void set_has_achievementprizeid();
  inline void clear_has_achievementprizeid();
  inline void set_has_achievementtype();
  inline void clear_has_achievementtype();
  inline void set_has_achievementpointvalue();
  inline void clear_has_achievementpointvalue();
  inline void set_has_achievementskil();
  inline void clear_has_achievementskil();
  inline void set_has_achievementdia();
  inline void clear_has_achievementdia();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 achievementprizeid_;
  ::google::protobuf::int32 achievementtype_;
  ::google::protobuf::int32 achievementpointvalue_;
  ::google::protobuf::int64 achievementskil_;
  ::google::protobuf::int32 achievementdia_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static achievementachievementreward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_achievementachievementreward : public ::google::protobuf::Message {
 public:
  Sheet_achievementachievementreward();
  virtual ~Sheet_achievementachievementreward();

  Sheet_achievementachievementreward(const Sheet_achievementachievementreward& from);

  inline Sheet_achievementachievementreward& operator=(const Sheet_achievementachievementreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_achievementachievementreward& default_instance();

  void Swap(Sheet_achievementachievementreward* other);

  // implements Message ----------------------------------------------

  Sheet_achievementachievementreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_achievementachievementreward& from);
  void MergeFrom(const Sheet_achievementachievementreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.achievementachievementreward achievementachievementreward_List = 1;
  inline int achievementachievementreward_list_size() const;
  inline void clear_achievementachievementreward_list();
  static const int kAchievementachievementrewardListFieldNumber = 1;
  inline const ::proto_ff::achievementachievementreward& achievementachievementreward_list(int index) const;
  inline ::proto_ff::achievementachievementreward* mutable_achievementachievementreward_list(int index);
  inline ::proto_ff::achievementachievementreward* add_achievementachievementreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementreward >&
      achievementachievementreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementreward >*
      mutable_achievementachievementreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_achievementachievementreward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementreward > achievementachievementreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_achievement_2eproto();
  friend void protobuf_AssignDesc_achievement_2eproto();
  friend void protobuf_ShutdownFile_achievement_2eproto();

  void InitAsDefaultInstance();
  static Sheet_achievementachievementreward* default_instance_;
};
// ===================================================================


// ===================================================================

// achievementachievementitemRewardDesc

// optional int64 ID = 1;
inline bool achievementachievementitemRewardDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void achievementachievementitemRewardDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void achievementachievementitemRewardDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void achievementachievementitemRewardDesc::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 achievementachievementitemRewardDesc::id() const {
  return id_;
}
inline void achievementachievementitemRewardDesc::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Value = 2;
inline bool achievementachievementitemRewardDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void achievementachievementitemRewardDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void achievementachievementitemRewardDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void achievementachievementitemRewardDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 achievementachievementitemRewardDesc::value() const {
  return value_;
}
inline void achievementachievementitemRewardDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// achievementachievement

// optional int64 achievementId = 1;
inline bool achievementachievement::has_achievementid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void achievementachievement::set_has_achievementid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void achievementachievement::clear_has_achievementid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void achievementachievement::clear_achievementid() {
  achievementid_ = GOOGLE_LONGLONG(0);
  clear_has_achievementid();
}
inline ::google::protobuf::int64 achievementachievement::achievementid() const {
  return achievementid_;
}
inline void achievementachievement::set_achievementid(::google::protobuf::int64 value) {
  set_has_achievementid();
  achievementid_ = value;
}

// optional int32 achievementLevel = 2;
inline bool achievementachievement::has_achievementlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void achievementachievement::set_has_achievementlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void achievementachievement::clear_has_achievementlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void achievementachievement::clear_achievementlevel() {
  achievementlevel_ = 0;
  clear_has_achievementlevel();
}
inline ::google::protobuf::int32 achievementachievement::achievementlevel() const {
  return achievementlevel_;
}
inline void achievementachievement::set_achievementlevel(::google::protobuf::int32 value) {
  set_has_achievementlevel();
  achievementlevel_ = value;
}

// optional int32 achievementDTP = 3;
inline bool achievementachievement::has_achievementdtp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void achievementachievement::set_has_achievementdtp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void achievementachievement::clear_has_achievementdtp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void achievementachievement::clear_achievementdtp() {
  achievementdtp_ = 0;
  clear_has_achievementdtp();
}
inline ::google::protobuf::int32 achievementachievement::achievementdtp() const {
  return achievementdtp_;
}
inline void achievementachievement::set_achievementdtp(::google::protobuf::int32 value) {
  set_has_achievementdtp();
  achievementdtp_ = value;
}

// optional int32 achievementType = 4;
inline bool achievementachievement::has_achievementtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void achievementachievement::set_has_achievementtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void achievementachievement::clear_has_achievementtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void achievementachievement::clear_achievementtype() {
  achievementtype_ = 0;
  clear_has_achievementtype();
}
inline ::google::protobuf::int32 achievementachievement::achievementtype() const {
  return achievementtype_;
}
inline void achievementachievement::set_achievementtype(::google::protobuf::int32 value) {
  set_has_achievementtype();
  achievementtype_ = value;
}

// optional int32 achievementSubType = 5;
inline bool achievementachievement::has_achievementsubtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void achievementachievement::set_has_achievementsubtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void achievementachievement::clear_has_achievementsubtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void achievementachievement::clear_achievementsubtype() {
  achievementsubtype_ = 0;
  clear_has_achievementsubtype();
}
inline ::google::protobuf::int32 achievementachievement::achievementsubtype() const {
  return achievementsubtype_;
}
inline void achievementachievement::set_achievementsubtype(::google::protobuf::int32 value) {
  set_has_achievementsubtype();
  achievementsubtype_ = value;
}

// optional int64 achievementObjectID = 6;
inline bool achievementachievement::has_achievementobjectid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void achievementachievement::set_has_achievementobjectid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void achievementachievement::clear_has_achievementobjectid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void achievementachievement::clear_achievementobjectid() {
  achievementobjectid_ = GOOGLE_LONGLONG(0);
  clear_has_achievementobjectid();
}
inline ::google::protobuf::int64 achievementachievement::achievementobjectid() const {
  return achievementobjectid_;
}
inline void achievementachievement::set_achievementobjectid(::google::protobuf::int64 value) {
  set_has_achievementobjectid();
  achievementobjectid_ = value;
}

// optional string achievementObjectIDString = 7;
inline bool achievementachievement::has_achievementobjectidstring() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void achievementachievement::set_has_achievementobjectidstring() {
  _has_bits_[0] |= 0x00000040u;
}
inline void achievementachievement::clear_has_achievementobjectidstring() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void achievementachievement::clear_achievementobjectidstring() {
  if (achievementobjectidstring_ != &::google::protobuf::internal::kEmptyString) {
    achievementobjectidstring_->clear();
  }
  clear_has_achievementobjectidstring();
}
inline const ::std::string& achievementachievement::achievementobjectidstring() const {
  return *achievementobjectidstring_;
}
inline void achievementachievement::set_achievementobjectidstring(const ::std::string& value) {
  set_has_achievementobjectidstring();
  if (achievementobjectidstring_ == &::google::protobuf::internal::kEmptyString) {
    achievementobjectidstring_ = new ::std::string;
  }
  achievementobjectidstring_->assign(value);
}
inline void achievementachievement::set_achievementobjectidstring(const char* value) {
  set_has_achievementobjectidstring();
  if (achievementobjectidstring_ == &::google::protobuf::internal::kEmptyString) {
    achievementobjectidstring_ = new ::std::string;
  }
  achievementobjectidstring_->assign(value);
}
inline void achievementachievement::set_achievementobjectidstring(const char* value, size_t size) {
  set_has_achievementobjectidstring();
  if (achievementobjectidstring_ == &::google::protobuf::internal::kEmptyString) {
    achievementobjectidstring_ = new ::std::string;
  }
  achievementobjectidstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* achievementachievement::mutable_achievementobjectidstring() {
  set_has_achievementobjectidstring();
  if (achievementobjectidstring_ == &::google::protobuf::internal::kEmptyString) {
    achievementobjectidstring_ = new ::std::string;
  }
  return achievementobjectidstring_;
}
inline ::std::string* achievementachievement::release_achievementobjectidstring() {
  clear_has_achievementobjectidstring();
  if (achievementobjectidstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = achievementobjectidstring_;
    achievementobjectidstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void achievementachievement::set_allocated_achievementobjectidstring(::std::string* achievementobjectidstring) {
  if (achievementobjectidstring_ != &::google::protobuf::internal::kEmptyString) {
    delete achievementobjectidstring_;
  }
  if (achievementobjectidstring) {
    set_has_achievementobjectidstring();
    achievementobjectidstring_ = achievementobjectidstring;
  } else {
    clear_has_achievementobjectidstring();
    achievementobjectidstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 achievementObjectValue = 8;
inline bool achievementachievement::has_achievementobjectvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void achievementachievement::set_has_achievementobjectvalue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void achievementachievement::clear_has_achievementobjectvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void achievementachievement::clear_achievementobjectvalue() {
  achievementobjectvalue_ = 0;
  clear_has_achievementobjectvalue();
}
inline ::google::protobuf::int32 achievementachievement::achievementobjectvalue() const {
  return achievementobjectvalue_;
}
inline void achievementachievement::set_achievementobjectvalue(::google::protobuf::int32 value) {
  set_has_achievementobjectvalue();
  achievementobjectvalue_ = value;
}

// optional int32 achievementDia = 9;
inline bool achievementachievement::has_achievementdia() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void achievementachievement::set_has_achievementdia() {
  _has_bits_[0] |= 0x00000100u;
}
inline void achievementachievement::clear_has_achievementdia() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void achievementachievement::clear_achievementdia() {
  achievementdia_ = 0;
  clear_has_achievementdia();
}
inline ::google::protobuf::int32 achievementachievement::achievementdia() const {
  return achievementdia_;
}
inline void achievementachievement::set_achievementdia(::google::protobuf::int32 value) {
  set_has_achievementdia();
  achievementdia_ = value;
}

// optional int32 achievementGod = 10;
inline bool achievementachievement::has_achievementgod() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void achievementachievement::set_has_achievementgod() {
  _has_bits_[0] |= 0x00000200u;
}
inline void achievementachievement::clear_has_achievementgod() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void achievementachievement::clear_achievementgod() {
  achievementgod_ = 0;
  clear_has_achievementgod();
}
inline ::google::protobuf::int32 achievementachievement::achievementgod() const {
  return achievementgod_;
}
inline void achievementachievement::set_achievementgod(::google::protobuf::int32 value) {
  set_has_achievementgod();
  achievementgod_ = value;
}

// optional int32 achievementPoint = 11;
inline bool achievementachievement::has_achievementpoint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void achievementachievement::set_has_achievementpoint() {
  _has_bits_[0] |= 0x00000400u;
}
inline void achievementachievement::clear_has_achievementpoint() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void achievementachievement::clear_achievementpoint() {
  achievementpoint_ = 0;
  clear_has_achievementpoint();
}
inline ::google::protobuf::int32 achievementachievement::achievementpoint() const {
  return achievementpoint_;
}
inline void achievementachievement::set_achievementpoint(::google::protobuf::int32 value) {
  set_has_achievementpoint();
  achievementpoint_ = value;
}

// optional int32 linkID = 12;
inline bool achievementachievement::has_linkid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void achievementachievement::set_has_linkid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void achievementachievement::clear_has_linkid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void achievementachievement::clear_linkid() {
  linkid_ = 0;
  clear_has_linkid();
}
inline ::google::protobuf::int32 achievementachievement::linkid() const {
  return linkid_;
}
inline void achievementachievement::set_linkid(::google::protobuf::int32 value) {
  set_has_linkid();
  linkid_ = value;
}

// repeated .proto_ff.achievementachievementitemRewardDesc itemReward = 13;
inline int achievementachievement::itemreward_size() const {
  return itemreward_.size();
}
inline void achievementachievement::clear_itemreward() {
  itemreward_.Clear();
}
inline const ::proto_ff::achievementachievementitemRewardDesc& achievementachievement::itemreward(int index) const {
  return itemreward_.Get(index);
}
inline ::proto_ff::achievementachievementitemRewardDesc* achievementachievement::mutable_itemreward(int index) {
  return itemreward_.Mutable(index);
}
inline ::proto_ff::achievementachievementitemRewardDesc* achievementachievement::add_itemreward() {
  return itemreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementitemRewardDesc >&
achievementachievement::itemreward() const {
  return itemreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementitemRewardDesc >*
achievementachievement::mutable_itemreward() {
  return &itemreward_;
}

// -------------------------------------------------------------------

// Sheet_achievementachievement

// repeated .proto_ff.achievementachievement achievementachievement_List = 1;
inline int Sheet_achievementachievement::achievementachievement_list_size() const {
  return achievementachievement_list_.size();
}
inline void Sheet_achievementachievement::clear_achievementachievement_list() {
  achievementachievement_list_.Clear();
}
inline const ::proto_ff::achievementachievement& Sheet_achievementachievement::achievementachievement_list(int index) const {
  return achievementachievement_list_.Get(index);
}
inline ::proto_ff::achievementachievement* Sheet_achievementachievement::mutable_achievementachievement_list(int index) {
  return achievementachievement_list_.Mutable(index);
}
inline ::proto_ff::achievementachievement* Sheet_achievementachievement::add_achievementachievement_list() {
  return achievementachievement_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievement >&
Sheet_achievementachievement::achievementachievement_list() const {
  return achievementachievement_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievement >*
Sheet_achievementachievement::mutable_achievementachievement_list() {
  return &achievementachievement_list_;
}

// -------------------------------------------------------------------

// achievementachievementreward

// optional int64 achievementPrizeId = 1;
inline bool achievementachievementreward::has_achievementprizeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void achievementachievementreward::set_has_achievementprizeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void achievementachievementreward::clear_has_achievementprizeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void achievementachievementreward::clear_achievementprizeid() {
  achievementprizeid_ = GOOGLE_LONGLONG(0);
  clear_has_achievementprizeid();
}
inline ::google::protobuf::int64 achievementachievementreward::achievementprizeid() const {
  return achievementprizeid_;
}
inline void achievementachievementreward::set_achievementprizeid(::google::protobuf::int64 value) {
  set_has_achievementprizeid();
  achievementprizeid_ = value;
}

// optional int32 achievementType = 2;
inline bool achievementachievementreward::has_achievementtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void achievementachievementreward::set_has_achievementtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void achievementachievementreward::clear_has_achievementtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void achievementachievementreward::clear_achievementtype() {
  achievementtype_ = 0;
  clear_has_achievementtype();
}
inline ::google::protobuf::int32 achievementachievementreward::achievementtype() const {
  return achievementtype_;
}
inline void achievementachievementreward::set_achievementtype(::google::protobuf::int32 value) {
  set_has_achievementtype();
  achievementtype_ = value;
}

// optional int32 achievementPointValue = 3;
inline bool achievementachievementreward::has_achievementpointvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void achievementachievementreward::set_has_achievementpointvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void achievementachievementreward::clear_has_achievementpointvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void achievementachievementreward::clear_achievementpointvalue() {
  achievementpointvalue_ = 0;
  clear_has_achievementpointvalue();
}
inline ::google::protobuf::int32 achievementachievementreward::achievementpointvalue() const {
  return achievementpointvalue_;
}
inline void achievementachievementreward::set_achievementpointvalue(::google::protobuf::int32 value) {
  set_has_achievementpointvalue();
  achievementpointvalue_ = value;
}

// optional int64 achievementSkil = 4;
inline bool achievementachievementreward::has_achievementskil() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void achievementachievementreward::set_has_achievementskil() {
  _has_bits_[0] |= 0x00000008u;
}
inline void achievementachievementreward::clear_has_achievementskil() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void achievementachievementreward::clear_achievementskil() {
  achievementskil_ = GOOGLE_LONGLONG(0);
  clear_has_achievementskil();
}
inline ::google::protobuf::int64 achievementachievementreward::achievementskil() const {
  return achievementskil_;
}
inline void achievementachievementreward::set_achievementskil(::google::protobuf::int64 value) {
  set_has_achievementskil();
  achievementskil_ = value;
}

// optional int32 achievementDia = 5;
inline bool achievementachievementreward::has_achievementdia() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void achievementachievementreward::set_has_achievementdia() {
  _has_bits_[0] |= 0x00000010u;
}
inline void achievementachievementreward::clear_has_achievementdia() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void achievementachievementreward::clear_achievementdia() {
  achievementdia_ = 0;
  clear_has_achievementdia();
}
inline ::google::protobuf::int32 achievementachievementreward::achievementdia() const {
  return achievementdia_;
}
inline void achievementachievementreward::set_achievementdia(::google::protobuf::int32 value) {
  set_has_achievementdia();
  achievementdia_ = value;
}

// -------------------------------------------------------------------

// Sheet_achievementachievementreward

// repeated .proto_ff.achievementachievementreward achievementachievementreward_List = 1;
inline int Sheet_achievementachievementreward::achievementachievementreward_list_size() const {
  return achievementachievementreward_list_.size();
}
inline void Sheet_achievementachievementreward::clear_achievementachievementreward_list() {
  achievementachievementreward_list_.Clear();
}
inline const ::proto_ff::achievementachievementreward& Sheet_achievementachievementreward::achievementachievementreward_list(int index) const {
  return achievementachievementreward_list_.Get(index);
}
inline ::proto_ff::achievementachievementreward* Sheet_achievementachievementreward::mutable_achievementachievementreward_list(int index) {
  return achievementachievementreward_list_.Mutable(index);
}
inline ::proto_ff::achievementachievementreward* Sheet_achievementachievementreward::add_achievementachievementreward_list() {
  return achievementachievementreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementreward >&
Sheet_achievementachievementreward::achievementachievementreward_list() const {
  return achievementachievementreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::achievementachievementreward >*
Sheet_achievementachievementreward::mutable_achievementachievementreward_list() {
  return &achievementachievementreward_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_achievement_2eproto__INCLUDED
