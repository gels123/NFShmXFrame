// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_PetDisplayMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetDisplayMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetAttributetpyeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetAttributetpyeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetAttributetpye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetAttributetpye_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetAttributetpye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetAttributetpye_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetLvexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetLvexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetLvexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetLvexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetAdvancelvAdvanceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetAdvancelvAdvanceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetAdvancelv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetAdvancelv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetAdvancelv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetAdvancelv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStarupUpattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStarupUpattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStarup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStarup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetStarup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetStarup_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetEggPetDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetEggPetDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetEgg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetEgg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetEgg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetEgg_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetDecomposeDecomposeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetDecomposeDecomposeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetDecompose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetDecompose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetDecompose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetDecompose_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetFettersAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetFettersAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetFetters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetFetters_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetFetters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetFetters_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pet_2eproto() {
  protobuf_AddDesc_pet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pet.proto");
  GOOGLE_CHECK(file != NULL);
  E_PetDisplayMaterialDesc_descriptor_ = file->message_type(0);
  static const int E_PetDisplayMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplayMaterialDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplayMaterialDesc, m_exp_),
  };
  E_PetDisplayMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetDisplayMaterialDesc_descriptor_,
      E_PetDisplayMaterialDesc::default_instance_,
      E_PetDisplayMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplayMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplayMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetDisplayMaterialDesc));
  E_PetDisplay_descriptor_ = file->message_type(1);
  static const int E_PetDisplay_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_isstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_activeskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_exclusiveskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_passiveskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_activeattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_activeparama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growattparama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growstandarda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growstandardb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growstandard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_advanceattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_advancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_pettagskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starllimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_staritem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starpetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starpetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_fettersid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_material_),
  };
  E_PetDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetDisplay_descriptor_,
      E_PetDisplay::default_instance_,
      E_PetDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetDisplay));
  Sheet_PetDisplay_descriptor_ = file->message_type(2);
  static const int Sheet_PetDisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDisplay, e_petdisplay_list_),
  };
  Sheet_PetDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetDisplay_descriptor_,
      Sheet_PetDisplay::default_instance_,
      Sheet_PetDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetDisplay));
  E_PetAttributetpyeAttributeDesc_descriptor_ = file->message_type(3);
  static const int E_PetAttributetpyeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpyeAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpyeAttributeDesc, m_value_),
  };
  E_PetAttributetpyeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetAttributetpyeAttributeDesc_descriptor_,
      E_PetAttributetpyeAttributeDesc::default_instance_,
      E_PetAttributetpyeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpyeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpyeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetAttributetpyeAttributeDesc));
  E_PetAttributetpye_descriptor_ = file->message_type(4);
  static const int E_PetAttributetpye_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, m_tpye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, m_attribute_),
  };
  E_PetAttributetpye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetAttributetpye_descriptor_,
      E_PetAttributetpye::default_instance_,
      E_PetAttributetpye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetAttributetpye));
  Sheet_PetAttributetpye_descriptor_ = file->message_type(5);
  static const int Sheet_PetAttributetpye_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAttributetpye, e_petattributetpye_list_),
  };
  Sheet_PetAttributetpye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetAttributetpye_descriptor_,
      Sheet_PetAttributetpye::default_instance_,
      Sheet_PetAttributetpye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAttributetpye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAttributetpye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetAttributetpye));
  E_PetLvexp_descriptor_ = file->message_type(6);
  static const int E_PetLvexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetLvexp, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetLvexp, m_exp_),
  };
  E_PetLvexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetLvexp_descriptor_,
      E_PetLvexp::default_instance_,
      E_PetLvexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetLvexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetLvexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetLvexp));
  Sheet_PetLvexp_descriptor_ = file->message_type(7);
  static const int Sheet_PetLvexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetLvexp, e_petlvexp_list_),
  };
  Sheet_PetLvexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetLvexp_descriptor_,
      Sheet_PetLvexp::default_instance_,
      Sheet_PetLvexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetLvexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetLvexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetLvexp));
  E_PetAdvancelvAdvanceDesc_descriptor_ = file->message_type(8);
  static const int E_PetAdvancelvAdvanceDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelvAdvanceDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelvAdvanceDesc, m_param_),
  };
  E_PetAdvancelvAdvanceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetAdvancelvAdvanceDesc_descriptor_,
      E_PetAdvancelvAdvanceDesc::default_instance_,
      E_PetAdvancelvAdvanceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelvAdvanceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelvAdvanceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetAdvancelvAdvanceDesc));
  E_PetAdvancelv_descriptor_ = file->message_type(9);
  static const int E_PetAdvancelv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, m_advanceitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, m_advancenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, m_advance_),
  };
  E_PetAdvancelv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetAdvancelv_descriptor_,
      E_PetAdvancelv::default_instance_,
      E_PetAdvancelv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetAdvancelv));
  Sheet_PetAdvancelv_descriptor_ = file->message_type(10);
  static const int Sheet_PetAdvancelv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAdvancelv, e_petadvancelv_list_),
  };
  Sheet_PetAdvancelv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetAdvancelv_descriptor_,
      Sheet_PetAdvancelv::default_instance_,
      Sheet_PetAdvancelv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAdvancelv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAdvancelv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetAdvancelv));
  E_PetStarupUpattributeDesc_descriptor_ = file->message_type(11);
  static const int E_PetStarupUpattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarupUpattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarupUpattributeDesc, m_value_),
  };
  E_PetStarupUpattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStarupUpattributeDesc_descriptor_,
      E_PetStarupUpattributeDesc::default_instance_,
      E_PetStarupUpattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarupUpattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarupUpattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStarupUpattributeDesc));
  E_PetStarup_descriptor_ = file->message_type(12);
  static const int E_PetStarup_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_activeskillidlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_upattribute_),
  };
  E_PetStarup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStarup_descriptor_,
      E_PetStarup::default_instance_,
      E_PetStarup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStarup));
  Sheet_PetStarup_descriptor_ = file->message_type(13);
  static const int Sheet_PetStarup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarup, e_petstarup_list_),
  };
  Sheet_PetStarup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetStarup_descriptor_,
      Sheet_PetStarup::default_instance_,
      Sheet_PetStarup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetStarup));
  E_PetEggPetDesc_descriptor_ = file->message_type(14);
  static const int E_PetEggPetDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEggPetDesc, m_rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEggPetDesc, m_id_),
  };
  E_PetEggPetDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetEggPetDesc_descriptor_,
      E_PetEggPetDesc::default_instance_,
      E_PetEggPetDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEggPetDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEggPetDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetEggPetDesc));
  E_PetEgg_descriptor_ = file->message_type(15);
  static const int E_PetEgg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, m_pet_),
  };
  E_PetEgg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetEgg_descriptor_,
      E_PetEgg::default_instance_,
      E_PetEgg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetEgg));
  Sheet_PetEgg_descriptor_ = file->message_type(16);
  static const int Sheet_PetEgg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEgg, e_petegg_list_),
  };
  Sheet_PetEgg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetEgg_descriptor_,
      Sheet_PetEgg::default_instance_,
      Sheet_PetEgg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEgg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEgg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetEgg));
  E_PetDecomposeDecomposeDesc_descriptor_ = file->message_type(17);
  static const int E_PetDecomposeDecomposeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecomposeDecomposeDesc, m_boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecomposeDecomposeDesc, m_type_),
  };
  E_PetDecomposeDecomposeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetDecomposeDecomposeDesc_descriptor_,
      E_PetDecomposeDecomposeDesc::default_instance_,
      E_PetDecomposeDecomposeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecomposeDecomposeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecomposeDecomposeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetDecomposeDecomposeDesc));
  E_PetDecompose_descriptor_ = file->message_type(18);
  static const int E_PetDecompose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, m_decompose_),
  };
  E_PetDecompose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetDecompose_descriptor_,
      E_PetDecompose::default_instance_,
      E_PetDecompose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetDecompose));
  Sheet_PetDecompose_descriptor_ = file->message_type(19);
  static const int Sheet_PetDecompose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDecompose, e_petdecompose_list_),
  };
  Sheet_PetDecompose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetDecompose_descriptor_,
      Sheet_PetDecompose::default_instance_,
      Sheet_PetDecompose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDecompose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDecompose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetDecompose));
  E_PetFettersAttributeDesc_descriptor_ = file->message_type(20);
  static const int E_PetFettersAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFettersAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFettersAttributeDesc, m_value_),
  };
  E_PetFettersAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetFettersAttributeDesc_descriptor_,
      E_PetFettersAttributeDesc::default_instance_,
      E_PetFettersAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFettersAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFettersAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetFettersAttributeDesc));
  E_PetFetters_descriptor_ = file->message_type(21);
  static const int E_PetFetters_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_atctive_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_attribute_),
  };
  E_PetFetters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetFetters_descriptor_,
      E_PetFetters::default_instance_,
      E_PetFetters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetFetters));
  Sheet_PetFetters_descriptor_ = file->message_type(22);
  static const int Sheet_PetFetters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetFetters, e_petfetters_list_),
  };
  Sheet_PetFetters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetFetters_descriptor_,
      Sheet_PetFetters::default_instance_,
      Sheet_PetFetters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetFetters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetFetters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetFetters));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetDisplayMaterialDesc_descriptor_, &E_PetDisplayMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetDisplay_descriptor_, &E_PetDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetDisplay_descriptor_, &Sheet_PetDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetAttributetpyeAttributeDesc_descriptor_, &E_PetAttributetpyeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetAttributetpye_descriptor_, &E_PetAttributetpye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetAttributetpye_descriptor_, &Sheet_PetAttributetpye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetLvexp_descriptor_, &E_PetLvexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetLvexp_descriptor_, &Sheet_PetLvexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetAdvancelvAdvanceDesc_descriptor_, &E_PetAdvancelvAdvanceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetAdvancelv_descriptor_, &E_PetAdvancelv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetAdvancelv_descriptor_, &Sheet_PetAdvancelv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStarupUpattributeDesc_descriptor_, &E_PetStarupUpattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStarup_descriptor_, &E_PetStarup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetStarup_descriptor_, &Sheet_PetStarup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetEggPetDesc_descriptor_, &E_PetEggPetDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetEgg_descriptor_, &E_PetEgg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetEgg_descriptor_, &Sheet_PetEgg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetDecomposeDecomposeDesc_descriptor_, &E_PetDecomposeDecomposeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetDecompose_descriptor_, &E_PetDecompose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetDecompose_descriptor_, &Sheet_PetDecompose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetFettersAttributeDesc_descriptor_, &E_PetFettersAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetFetters_descriptor_, &E_PetFetters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetFetters_descriptor_, &Sheet_PetFetters::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pet_2eproto() {
  delete E_PetDisplayMaterialDesc::default_instance_;
  delete E_PetDisplayMaterialDesc_reflection_;
  delete E_PetDisplay::default_instance_;
  delete E_PetDisplay_reflection_;
  delete Sheet_PetDisplay::default_instance_;
  delete Sheet_PetDisplay_reflection_;
  delete E_PetAttributetpyeAttributeDesc::default_instance_;
  delete E_PetAttributetpyeAttributeDesc_reflection_;
  delete E_PetAttributetpye::default_instance_;
  delete E_PetAttributetpye_reflection_;
  delete Sheet_PetAttributetpye::default_instance_;
  delete Sheet_PetAttributetpye_reflection_;
  delete E_PetLvexp::default_instance_;
  delete E_PetLvexp_reflection_;
  delete Sheet_PetLvexp::default_instance_;
  delete Sheet_PetLvexp_reflection_;
  delete E_PetAdvancelvAdvanceDesc::default_instance_;
  delete E_PetAdvancelvAdvanceDesc_reflection_;
  delete E_PetAdvancelv::default_instance_;
  delete E_PetAdvancelv_reflection_;
  delete Sheet_PetAdvancelv::default_instance_;
  delete Sheet_PetAdvancelv_reflection_;
  delete E_PetStarupUpattributeDesc::default_instance_;
  delete E_PetStarupUpattributeDesc_reflection_;
  delete E_PetStarup::default_instance_;
  delete E_PetStarup_reflection_;
  delete Sheet_PetStarup::default_instance_;
  delete Sheet_PetStarup_reflection_;
  delete E_PetEggPetDesc::default_instance_;
  delete E_PetEggPetDesc_reflection_;
  delete E_PetEgg::default_instance_;
  delete E_PetEgg_reflection_;
  delete Sheet_PetEgg::default_instance_;
  delete Sheet_PetEgg_reflection_;
  delete E_PetDecomposeDecomposeDesc::default_instance_;
  delete E_PetDecomposeDecomposeDesc_reflection_;
  delete E_PetDecompose::default_instance_;
  delete E_PetDecompose_reflection_;
  delete Sheet_PetDecompose::default_instance_;
  delete Sheet_PetDecompose_reflection_;
  delete E_PetFettersAttributeDesc::default_instance_;
  delete E_PetFettersAttributeDesc_reflection_;
  delete E_PetFetters::default_instance_;
  delete E_PetFetters_reflection_;
  delete Sheet_PetFetters::default_instance_;
  delete Sheet_PetFetters_reflection_;
}

void protobuf_AddDesc_pet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpet.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"N\n\030E_PetDisplayMaterialDesc\022\024\n\004m_id"
    "\030\001 \001(\003B\006\302\377\024\002ID\022\034\n\005m_exp\030\002 \001(\005B\r\302\377\024\t\347\273\217\351\252"
    "\214\345\200\274\"\305\013\n\014E_PetDisplay\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024"
    "\010\345\244\226\350\247\202ID\022#\n\tm_quality\030\002 \001(\005B\020\302\377\024\014\345\256\240\347\211\251"
    "\345\223\201\350\264\250\022%\n\010m_isstar\030\003 \001(\005B\023\302\377\024\017\346\230\257\345\220\246\345\217\257\345"
    "\215\207\346\230\237\022\037\n\007m_grade\030\004 \001(\tB\016\302\377\024\006\350\257\204\347\272\247\220\301\024<\022$"
    "\n\013m_monsterid\030\005 \001(\003B\017\302\377\024\013\346\200\252\347\211\251\350\241\250ID\022\036\n\006"
    "m_name\030\006 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024<\022)\n\017m_active"
    "skillid\030\007 \001(\005B\020\302\377\024\014\344\270\273\345\212\250\346\212\200\350\203\275\0220\n\022m_exc"
    "lusiveskillid\030\010 \001(\tB\024\302\377\024\014\344\270\223\345\261\236\346\212\200\350\203\275\220\301\024"
    "<\022.\n\020m_passiveskillid\030\t \001(\tB\024\302\377\024\014\350\242\253\345\212\250\346"
    "\212\200\350\203\275\220\301\024<\0227\n\021m_activeattribute\030\n \001(\005B\034\302\377"
    "\024\030\345\210\235\345\247\213\350\216\267\345\276\227\345\261\236\346\200\247\346\250\241\346\235\277\022)\n\tm_growatt\030"
    "\013 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\345\261\236\346\200\247\346\250\241\346\235\277\022+\n\016m_activ"
    "eparama\030\014 \001(\002B\023\302\377\024\017\345\210\235\345\200\274\345\200\274\347\263\273\346\225\260\022/\n\017m_"
    "growattparama\030\r \001(\002B\026\302\377\024\022\345\215\207\347\272\247\345\261\236\346\200\247\347\263\273"
    "\346\225\260\022-\n\017m_growstandarda\030\016 \001(\002B\024\302\377\024\020\346\240\207\345\207\206"
    "\345\200\274\347\263\273\346\225\260A\022-\n\017m_growstandardb\030\017 \001(\002B\024\302\377\024"
    "\020\346\240\207\345\207\206\345\200\274\347\263\273\346\225\260B\022+\n\016m_growstandard\030\020 \001("
    "\002B\023\302\377\024\017\350\265\204\350\264\250\346\240\207\345\207\206\345\200\274\022)\n\tm_growmin\030\021 \001("
    "\002B\026\302\377\024\022\345\210\235\345\247\213\350\265\204\350\264\250\344\270\213\351\231\220\022)\n\tm_growmax\030\022"
    " \001(\002B\026\302\377\024\022\345\210\235\345\247\213\350\265\204\350\264\250\344\270\213\351\231\220\0220\n\nm_growst"
    "ar\030\023 \001(\002B\034\302\377\024\030\345\215\207\346\230\237\350\265\204\350\264\250\346\217\220\345\215\207\347\263\273\346\225\260\022/"
    "\n\022m_advanceattribute\030\024 \001(\005B\023\302\377\024\017\350\277\233\351\230\266\345\200"
    "\274\346\250\241\346\235\277\022\'\n\rm_advancetype\030\025 \001(\005B\020\302\377\024\014\350\277\233\351"
    "\230\266\347\261\273\345\236\213\022+\n\rm_pettagskill\030\026 \001(\tB\024\302\377\024\014\347\245\236"
    "\345\256\240\346\212\200\350\203\275\220\301\024<\022/\n\017m_starattribute\030\027 \001(\005B\026"
    "\302\377\024\022\345\215\207\346\230\237\345\261\236\346\200\247\346\250\241\346\235\277\022-\n\rm_starpercent\030"
    "\030 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\345\261\236\346\200\247\345\212\240\346\210\220\022&\n\014m_starl"
    "limit\030\031 \001(\005B\020\302\377\024\014\345\215\207\346\230\237\344\270\212\351\231\220\022$\n\nm_stari"
    "tem\030\032 \001(\003B\020\302\377\024\014\345\215\207\346\230\237\351\201\223\345\205\267\022.\n\tm_starnum"
    "\030\033 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\254\002\022\'\n\013m"
    "_starpetid\030\034 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\345\256\240\347\211\251ID\0221\n\014"
    "m_starpetnum\030\035 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\345\256\240\347\211\251\346\225\260\351"
    "\207\217\220\301\024\254\002\022\"\n\010m_weapon\030\036 \001(\005B\020\302\377\024\014\344\270\223\345\261\236\346\255\246"
    "\345\231\250\022.\n\017m_upattributeid\030\037 \001(\003B\025\302\377\024\021\345\215\207\346\230\237"
    "\345\261\236\346\200\247\347\273\204ID\022!\n\013m_fettersid\030  \001(\005B\014\302\377\024\010\347\276"
    "\201\347\273\212ID\022L\n\nm_material\030! \003(\0132\".proto_ff.E_"
    "PetDisplayMaterialDescB\024\302\377\024\014\345\215\207\347\272\247\346\235\220\346\226\231"
    "\210\301\024\003\"K\n\020Sheet_PetDisplay\0227\n\021E_PetDisplay"
    "_List\030\001 \003(\0132\026.proto_ff.E_PetDisplayB\004\210\301\024"
    "\024\"S\n\037E_PetAttributetpyeAttributeDesc\022\026\n\006"
    "m_type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302"
    "\377\024\003\345\200\274\"\242\001\n\022E_PetAttributetpye\022\024\n\004m_id\030\001 "
    "\001(\003B\006\302\377\024\002id\022 \n\006m_tpye\030\002 \001(\005B\020\302\377\024\014\345\261\236\346\200\247\347"
    "\261\273\345\236\213\022T\n\013m_attribute\030\003 \003(\0132).proto_ff.E_"
    "PetAttributetpyeAttributeDescB\024\302\377\024\014\345\237\272\347\241"
    "\200\345\261\236\346\200\247\210\301\024\006\"]\n\026Sheet_PetAttributetpye\022C\n"
    "\027E_PetAttributetpye_List\030\001 \003(\0132\034.proto_f"
    "f.E_PetAttributetpyeB\004\210\301\024(\"G\n\nE_PetLvexp"
    "\022\030\n\004m_id\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\037\n\005m_exp\030\002 \001("
    "\003B\020\302\377\024\014\345\215\207\347\272\247\347\273\217\351\252\214\"F\n\016Sheet_PetLvexp\0224\n"
    "\017E_PetLvexp_List\030\001 \003(\0132\024.proto_ff.E_PetL"
    "vexpB\005\210\301\024\364\003\"T\n\031E_PetAdvancelvAdvanceDesc"
    "\022\032\n\006m_type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\033\n\007m_param\030"
    "\002 \001(\002B\n\302\377\024\006\347\263\273\346\225\260\"\311\001\n\016E_PetAdvancelv\022\030\n\004"
    "m_id\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022-\n\rm_advanceitem\030"
    "\002 \001(\005B\026\302\377\024\022\350\277\233\351\230\266\346\266\210\350\200\227\351\201\223\345\205\267\022&\n\014m_advan"
    "cenum\030\003 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\022F\n\tm_advan"
    "ce\030\004 \003(\0132#.proto_ff.E_PetAdvancelvAdvanc"
    "eDescB\016\302\377\024\006\350\277\233\351\230\266\210\301\024\002\"R\n\022Sheet_PetAdvanc"
    "elv\022<\n\023E_PetAdvancelv_List\030\001 \003(\0132\030.proto"
    "_ff.E_PetAdvancelvB\005\210\301\024\310\001\"N\n\032E_PetStarup"
    "UpattributeDesc\022\026\n\006m_type\030\001 \001(\005B\006\302\377\024\002ID\022"
    "\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\236\002\n\013E_PetStaru"
    "p\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022.\n\017m_upatt"
    "ributeid\030\002 \001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022\034\n"
    "\010m_starid\030\003 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022\037\n\tm_skillid"
    "\030\004 \001(\005B\014\302\377\024\010\346\212\200\350\203\275id\0221\n\021m_activeskillidl"
    "v\030\005 \001(\005B\026\302\377\024\022\344\270\273\345\212\250\346\212\200\350\203\275\347\255\211\347\272\247\022Q\n\rm_upa"
    "ttribute\030\006 \003(\0132$.proto_ff.E_PetStarupUpa"
    "ttributeDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\006\"H\n\017Sh"
    "eet_PetStarup\0225\n\020E_PetStarup_List\030\001 \003(\0132"
    "\025.proto_ff.E_PetStarupB\004\210\301\024(\"C\n\017E_PetEgg"
    "PetDesc\022\032\n\006m_rand\030\001 \001(\005B\n\302\377\024\006\346\246\202\347\216\207\022\024\n\004m"
    "_id\030\002 \001(\005B\006\302\377\024\002ID\"\213\001\n\010E_PetEgg\022#\n\004m_id\030\001"
    " \001(\005B\025\302\377\024\021\345\256\240\347\211\251\350\233\213\351\201\223\345\205\267ID\022 \n\006m_time\030\002 "
    "\001(\005B\020\302\377\024\014\345\255\265\345\214\226\346\227\266\351\227\264\0228\n\005m_pet\030\003 \003(\0132\031.p"
    "roto_ff.E_PetEggPetDescB\016\302\377\024\006\345\256\240\347\211\251\210\301\024\n\""
    "\?\n\014Sheet_PetEgg\022/\n\rE_PetEgg_List\030\001 \003(\0132\022"
    ".proto_ff.E_PetEggB\004\210\301\024\024\"S\n\033E_PetDecompo"
    "seDecomposeDesc\022\032\n\007m_boxid\030\001 \001(\005B\t\302\377\024\005bo"
    "xID\022\030\n\006m_type\030\002 \001(\005B\010\302\377\024\004type\"\235\001\n\016E_PetD"
    "ecompose\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022#\n\tm_qual"
    "ity\030\002 \001(\005B\020\302\377\024\014\345\256\240\347\211\251\345\223\201\350\264\250\022P\n\013m_decompo"
    "se\030\003 \003(\0132%.proto_ff.E_PetDecomposeDecomp"
    "oseDescB\024\302\377\024\014\345\210\206\350\247\243\347\261\273\345\236\213\210\301\024\004\"Q\n\022Sheet_P"
    "etDecompose\022;\n\023E_PetDecompose_List\030\001 \003(\013"
    "2\030.proto_ff.E_PetDecomposeB\004\210\301\024\024\"M\n\031E_Pe"
    "tFettersAttributeDesc\022\026\n\006m_type\030\001 \001(\005B\006\302"
    "\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\363\001\n\014E_Pe"
    "tFetters\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022#\n\tm_qual"
    "ity\030\002 \001(\005B\020\302\377\024\014\347\276\201\347\273\212\345\223\201\350\264\250\022\'\n\007m_petid\030\003"
    " \003(\005B\026\302\377\024\016\347\276\201\347\273\212\345\256\240\347\211\251ID\210\301\024\003\022/\n\021m_atctiv"
    "e_skillid\030\004 \003(\005B\024\302\377\024\014\346\277\200\346\264\273\346\212\200\350\203\275\210\301\024\004\022N\n"
    "\013m_attribute\030\005 \003(\0132#.proto_ff.E_PetFette"
    "rsAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\006\"K\n"
    "\020Sheet_PetFetters\0227\n\021E_PetFetters_List\030\001"
    " \003(\0132\026.proto_ff.E_PetFettersB\004\210\301\024\024", 3994);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pet.proto", &protobuf_RegisterTypes);
  E_PetDisplayMaterialDesc::default_instance_ = new E_PetDisplayMaterialDesc();
  E_PetDisplay::default_instance_ = new E_PetDisplay();
  Sheet_PetDisplay::default_instance_ = new Sheet_PetDisplay();
  E_PetAttributetpyeAttributeDesc::default_instance_ = new E_PetAttributetpyeAttributeDesc();
  E_PetAttributetpye::default_instance_ = new E_PetAttributetpye();
  Sheet_PetAttributetpye::default_instance_ = new Sheet_PetAttributetpye();
  E_PetLvexp::default_instance_ = new E_PetLvexp();
  Sheet_PetLvexp::default_instance_ = new Sheet_PetLvexp();
  E_PetAdvancelvAdvanceDesc::default_instance_ = new E_PetAdvancelvAdvanceDesc();
  E_PetAdvancelv::default_instance_ = new E_PetAdvancelv();
  Sheet_PetAdvancelv::default_instance_ = new Sheet_PetAdvancelv();
  E_PetStarupUpattributeDesc::default_instance_ = new E_PetStarupUpattributeDesc();
  E_PetStarup::default_instance_ = new E_PetStarup();
  Sheet_PetStarup::default_instance_ = new Sheet_PetStarup();
  E_PetEggPetDesc::default_instance_ = new E_PetEggPetDesc();
  E_PetEgg::default_instance_ = new E_PetEgg();
  Sheet_PetEgg::default_instance_ = new Sheet_PetEgg();
  E_PetDecomposeDecomposeDesc::default_instance_ = new E_PetDecomposeDecomposeDesc();
  E_PetDecompose::default_instance_ = new E_PetDecompose();
  Sheet_PetDecompose::default_instance_ = new Sheet_PetDecompose();
  E_PetFettersAttributeDesc::default_instance_ = new E_PetFettersAttributeDesc();
  E_PetFetters::default_instance_ = new E_PetFetters();
  Sheet_PetFetters::default_instance_ = new Sheet_PetFetters();
  E_PetDisplayMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_PetDisplay::default_instance_->InitAsDefaultInstance();
  Sheet_PetDisplay::default_instance_->InitAsDefaultInstance();
  E_PetAttributetpyeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetAttributetpye::default_instance_->InitAsDefaultInstance();
  Sheet_PetAttributetpye::default_instance_->InitAsDefaultInstance();
  E_PetLvexp::default_instance_->InitAsDefaultInstance();
  Sheet_PetLvexp::default_instance_->InitAsDefaultInstance();
  E_PetAdvancelvAdvanceDesc::default_instance_->InitAsDefaultInstance();
  E_PetAdvancelv::default_instance_->InitAsDefaultInstance();
  Sheet_PetAdvancelv::default_instance_->InitAsDefaultInstance();
  E_PetStarupUpattributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetStarup::default_instance_->InitAsDefaultInstance();
  Sheet_PetStarup::default_instance_->InitAsDefaultInstance();
  E_PetEggPetDesc::default_instance_->InitAsDefaultInstance();
  E_PetEgg::default_instance_->InitAsDefaultInstance();
  Sheet_PetEgg::default_instance_->InitAsDefaultInstance();
  E_PetDecomposeDecomposeDesc::default_instance_->InitAsDefaultInstance();
  E_PetDecompose::default_instance_->InitAsDefaultInstance();
  Sheet_PetDecompose::default_instance_->InitAsDefaultInstance();
  E_PetFettersAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetFetters::default_instance_->InitAsDefaultInstance();
  Sheet_PetFetters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pet_2eproto {
  StaticDescriptorInitializer_pet_2eproto() {
    protobuf_AddDesc_pet_2eproto();
  }
} static_descriptor_initializer_pet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_PetDisplayMaterialDesc::kMIdFieldNumber;
const int E_PetDisplayMaterialDesc::kMExpFieldNumber;
#endif  // !_MSC_VER

E_PetDisplayMaterialDesc::E_PetDisplayMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetDisplayMaterialDesc::InitAsDefaultInstance() {
}

E_PetDisplayMaterialDesc::E_PetDisplayMaterialDesc(const E_PetDisplayMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetDisplayMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetDisplayMaterialDesc::~E_PetDisplayMaterialDesc() {
  SharedDtor();
}

void E_PetDisplayMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetDisplayMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetDisplayMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetDisplayMaterialDesc_descriptor_;
}

const E_PetDisplayMaterialDesc& E_PetDisplayMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetDisplayMaterialDesc* E_PetDisplayMaterialDesc::default_instance_ = NULL;

E_PetDisplayMaterialDesc* E_PetDisplayMaterialDesc::New() const {
  return new E_PetDisplayMaterialDesc;
}

void E_PetDisplayMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetDisplayMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetDisplayMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetDisplayMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetDisplayMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetDisplayMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetDisplayMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetDisplayMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetDisplayMaterialDesc::MergeFrom(const E_PetDisplayMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetDisplayMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetDisplayMaterialDesc::CopyFrom(const E_PetDisplayMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetDisplayMaterialDesc::IsInitialized() const {

  return true;
}

void E_PetDisplayMaterialDesc::Swap(E_PetDisplayMaterialDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetDisplayMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetDisplayMaterialDesc_descriptor_;
  metadata.reflection = E_PetDisplayMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetDisplay::kMIdFieldNumber;
const int E_PetDisplay::kMQualityFieldNumber;
const int E_PetDisplay::kMIsstarFieldNumber;
const int E_PetDisplay::kMGradeFieldNumber;
const int E_PetDisplay::kMMonsteridFieldNumber;
const int E_PetDisplay::kMNameFieldNumber;
const int E_PetDisplay::kMActiveskillidFieldNumber;
const int E_PetDisplay::kMExclusiveskillidFieldNumber;
const int E_PetDisplay::kMPassiveskillidFieldNumber;
const int E_PetDisplay::kMActiveattributeFieldNumber;
const int E_PetDisplay::kMGrowattFieldNumber;
const int E_PetDisplay::kMActiveparamaFieldNumber;
const int E_PetDisplay::kMGrowattparamaFieldNumber;
const int E_PetDisplay::kMGrowstandardaFieldNumber;
const int E_PetDisplay::kMGrowstandardbFieldNumber;
const int E_PetDisplay::kMGrowstandardFieldNumber;
const int E_PetDisplay::kMGrowminFieldNumber;
const int E_PetDisplay::kMGrowmaxFieldNumber;
const int E_PetDisplay::kMGrowstarFieldNumber;
const int E_PetDisplay::kMAdvanceattributeFieldNumber;
const int E_PetDisplay::kMAdvancetypeFieldNumber;
const int E_PetDisplay::kMPettagskillFieldNumber;
const int E_PetDisplay::kMStarattributeFieldNumber;
const int E_PetDisplay::kMStarpercentFieldNumber;
const int E_PetDisplay::kMStarllimitFieldNumber;
const int E_PetDisplay::kMStaritemFieldNumber;
const int E_PetDisplay::kMStarnumFieldNumber;
const int E_PetDisplay::kMStarpetidFieldNumber;
const int E_PetDisplay::kMStarpetnumFieldNumber;
const int E_PetDisplay::kMWeaponFieldNumber;
const int E_PetDisplay::kMUpattributeidFieldNumber;
const int E_PetDisplay::kMFettersidFieldNumber;
const int E_PetDisplay::kMMaterialFieldNumber;
#endif  // !_MSC_VER

E_PetDisplay::E_PetDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetDisplay::InitAsDefaultInstance() {
}

E_PetDisplay::E_PetDisplay(const E_PetDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetDisplay::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_quality_ = 0;
  m_isstar_ = 0;
  m_grade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_monsterid_ = GOOGLE_LONGLONG(0);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_activeskillid_ = 0;
  m_exclusiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_passiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_activeattribute_ = 0;
  m_growatt_ = 0;
  m_activeparama_ = 0;
  m_growattparama_ = 0;
  m_growstandarda_ = 0;
  m_growstandardb_ = 0;
  m_growstandard_ = 0;
  m_growmin_ = 0;
  m_growmax_ = 0;
  m_growstar_ = 0;
  m_advanceattribute_ = 0;
  m_advancetype_ = 0;
  m_pettagskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starattribute_ = 0;
  m_starpercent_ = 0;
  m_starllimit_ = 0;
  m_staritem_ = GOOGLE_LONGLONG(0);
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starpetid_ = GOOGLE_LONGLONG(0);
  m_starpetnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_weapon_ = 0;
  m_upattributeid_ = GOOGLE_LONGLONG(0);
  m_fettersid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetDisplay::~E_PetDisplay() {
  SharedDtor();
}

void E_PetDisplay::SharedDtor() {
  if (m_grade_ != &::google::protobuf::internal::kEmptyString) {
    delete m_grade_;
  }
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_exclusiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_exclusiveskillid_;
  }
  if (m_passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_passiveskillid_;
  }
  if (m_pettagskill_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pettagskill_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (m_starpetnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starpetnum_;
  }
  if (this != default_instance_) {
  }
}

void E_PetDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetDisplay_descriptor_;
}

const E_PetDisplay& E_PetDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetDisplay* E_PetDisplay::default_instance_ = NULL;

E_PetDisplay* E_PetDisplay::New() const {
  return new E_PetDisplay;
}

void E_PetDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_quality_ = 0;
    m_isstar_ = 0;
    if (has_m_grade()) {
      if (m_grade_ != &::google::protobuf::internal::kEmptyString) {
        m_grade_->clear();
      }
    }
    m_monsterid_ = GOOGLE_LONGLONG(0);
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_activeskillid_ = 0;
    if (has_m_exclusiveskillid()) {
      if (m_exclusiveskillid_ != &::google::protobuf::internal::kEmptyString) {
        m_exclusiveskillid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_passiveskillid()) {
      if (m_passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
        m_passiveskillid_->clear();
      }
    }
    m_activeattribute_ = 0;
    m_growatt_ = 0;
    m_activeparama_ = 0;
    m_growattparama_ = 0;
    m_growstandarda_ = 0;
    m_growstandardb_ = 0;
    m_growstandard_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_growmin_ = 0;
    m_growmax_ = 0;
    m_growstar_ = 0;
    m_advanceattribute_ = 0;
    m_advancetype_ = 0;
    if (has_m_pettagskill()) {
      if (m_pettagskill_ != &::google::protobuf::internal::kEmptyString) {
        m_pettagskill_->clear();
      }
    }
    m_starattribute_ = 0;
    m_starpercent_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_starllimit_ = 0;
    m_staritem_ = GOOGLE_LONGLONG(0);
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
    m_starpetid_ = GOOGLE_LONGLONG(0);
    if (has_m_starpetnum()) {
      if (m_starpetnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starpetnum_->clear();
      }
    }
    m_weapon_ = 0;
    m_upattributeid_ = GOOGLE_LONGLONG(0);
    m_fettersid_ = 0;
  }
  m_material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_isstar;
        break;
      }

      // optional int32 m_isstar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isstar_)));
          set_has_m_isstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_grade;
        break;
      }

      // optional string m_grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_grade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_grade().data(), this->m_grade().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_monsterid;
        break;
      }

      // optional int64 m_monsterid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_monsterid_)));
          set_has_m_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_name;
        break;
      }

      // optional string m_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_activeskillid;
        break;
      }

      // optional int32 m_activeskillid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeskillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeskillid_)));
          set_has_m_activeskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_exclusiveskillid;
        break;
      }

      // optional string m_exclusiveskillid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_exclusiveskillid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_exclusiveskillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_exclusiveskillid().data(), this->m_exclusiveskillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_passiveskillid;
        break;
      }

      // optional string m_passiveskillid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_passiveskillid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_passiveskillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_passiveskillid().data(), this->m_passiveskillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_activeattribute;
        break;
      }

      // optional int32 m_activeattribute = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeattribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeattribute_)));
          set_has_m_activeattribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_growatt;
        break;
      }

      // optional int32 m_growatt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_growatt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_growatt_)));
          set_has_m_growatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_m_activeparama;
        break;
      }

      // optional float m_activeparama = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_activeparama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_activeparama_)));
          set_has_m_activeparama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_m_growattparama;
        break;
      }

      // optional float m_growattparama = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growattparama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growattparama_)));
          set_has_m_growattparama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_m_growstandarda;
        break;
      }

      // optional float m_growstandarda = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growstandarda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growstandarda_)));
          set_has_m_growstandarda();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_m_growstandardb;
        break;
      }

      // optional float m_growstandardb = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growstandardb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growstandardb_)));
          set_has_m_growstandardb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_m_growstandard;
        break;
      }

      // optional float m_growstandard = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growstandard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growstandard_)));
          set_has_m_growstandard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_m_growmin;
        break;
      }

      // optional float m_growmin = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growmin_)));
          set_has_m_growmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_m_growmax;
        break;
      }

      // optional float m_growmax = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growmax_)));
          set_has_m_growmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_m_growstar;
        break;
      }

      // optional float m_growstar = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growstar_)));
          set_has_m_growstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_advanceattribute;
        break;
      }

      // optional int32 m_advanceattribute = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceattribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advanceattribute_)));
          set_has_m_advanceattribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_advancetype;
        break;
      }

      // optional int32 m_advancetype = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advancetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancetype_)));
          set_has_m_advancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_m_pettagskill;
        break;
      }

      // optional string m_pettagskill = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pettagskill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_pettagskill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_pettagskill().data(), this->m_pettagskill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_starattribute;
        break;
      }

      // optional int32 m_starattribute = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starattribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starattribute_)));
          set_has_m_starattribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_starpercent;
        break;
      }

      // optional int32 m_starpercent = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starpercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starpercent_)));
          set_has_m_starpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_starllimit;
        break;
      }

      // optional int32 m_starllimit = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starllimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starllimit_)));
          set_has_m_starllimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_staritem;
        break;
      }

      // optional int64 m_staritem = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_staritem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_staritem_)));
          set_has_m_staritem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_m_starnum;
        break;
      }

      // optional string m_starnum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_starpetid;
        break;
      }

      // optional int64 m_starpetid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starpetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_starpetid_)));
          set_has_m_starpetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_m_starpetnum;
        break;
      }

      // optional string m_starpetnum = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starpetnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starpetnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starpetnum().data(), this->m_starpetnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_m_weapon;
        break;
      }

      // optional int32 m_weapon = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weapon_)));
          set_has_m_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_upattributeid;
        break;
      }

      // optional int64 m_upattributeid = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upattributeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_fettersid;
        break;
      }

      // optional int32 m_fettersid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fettersid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fettersid_)));
          set_has_m_fettersid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_PetDisplayMaterialDesc m_material = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_m_material;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // optional int32 m_isstar = 3;
  if (has_m_isstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_isstar(), output);
  }

  // optional string m_grade = 4;
  if (has_m_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_grade().data(), this->m_grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_grade(), output);
  }

  // optional int64 m_monsterid = 5;
  if (has_m_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_monsterid(), output);
  }

  // optional string m_name = 6;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_name(), output);
  }

  // optional int32 m_activeskillid = 7;
  if (has_m_activeskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_activeskillid(), output);
  }

  // optional string m_exclusiveskillid = 8;
  if (has_m_exclusiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_exclusiveskillid().data(), this->m_exclusiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_exclusiveskillid(), output);
  }

  // optional string m_passiveskillid = 9;
  if (has_m_passiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_passiveskillid().data(), this->m_passiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_passiveskillid(), output);
  }

  // optional int32 m_activeattribute = 10;
  if (has_m_activeattribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_activeattribute(), output);
  }

  // optional int32 m_growatt = 11;
  if (has_m_growatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_growatt(), output);
  }

  // optional float m_activeparama = 12;
  if (has_m_activeparama()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->m_activeparama(), output);
  }

  // optional float m_growattparama = 13;
  if (has_m_growattparama()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->m_growattparama(), output);
  }

  // optional float m_growstandarda = 14;
  if (has_m_growstandarda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->m_growstandarda(), output);
  }

  // optional float m_growstandardb = 15;
  if (has_m_growstandardb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->m_growstandardb(), output);
  }

  // optional float m_growstandard = 16;
  if (has_m_growstandard()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->m_growstandard(), output);
  }

  // optional float m_growmin = 17;
  if (has_m_growmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->m_growmin(), output);
  }

  // optional float m_growmax = 18;
  if (has_m_growmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->m_growmax(), output);
  }

  // optional float m_growstar = 19;
  if (has_m_growstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->m_growstar(), output);
  }

  // optional int32 m_advanceattribute = 20;
  if (has_m_advanceattribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_advanceattribute(), output);
  }

  // optional int32 m_advancetype = 21;
  if (has_m_advancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_advancetype(), output);
  }

  // optional string m_pettagskill = 22;
  if (has_m_pettagskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pettagskill().data(), this->m_pettagskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->m_pettagskill(), output);
  }

  // optional int32 m_starattribute = 23;
  if (has_m_starattribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_starattribute(), output);
  }

  // optional int32 m_starpercent = 24;
  if (has_m_starpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_starpercent(), output);
  }

  // optional int32 m_starllimit = 25;
  if (has_m_starllimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->m_starllimit(), output);
  }

  // optional int64 m_staritem = 26;
  if (has_m_staritem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->m_staritem(), output);
  }

  // optional string m_starnum = 27;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->m_starnum(), output);
  }

  // optional int64 m_starpetid = 28;
  if (has_m_starpetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->m_starpetid(), output);
  }

  // optional string m_starpetnum = 29;
  if (has_m_starpetnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starpetnum().data(), this->m_starpetnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->m_starpetnum(), output);
  }

  // optional int32 m_weapon = 30;
  if (has_m_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->m_weapon(), output);
  }

  // optional int64 m_upattributeid = 31;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->m_upattributeid(), output);
  }

  // optional int32 m_fettersid = 32;
  if (has_m_fettersid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->m_fettersid(), output);
  }

  // repeated .proto_ff.E_PetDisplayMaterialDesc m_material = 33;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->m_material(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // optional int32 m_isstar = 3;
  if (has_m_isstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_isstar(), target);
  }

  // optional string m_grade = 4;
  if (has_m_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_grade().data(), this->m_grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_grade(), target);
  }

  // optional int64 m_monsterid = 5;
  if (has_m_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_monsterid(), target);
  }

  // optional string m_name = 6;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_name(), target);
  }

  // optional int32 m_activeskillid = 7;
  if (has_m_activeskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_activeskillid(), target);
  }

  // optional string m_exclusiveskillid = 8;
  if (has_m_exclusiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_exclusiveskillid().data(), this->m_exclusiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_exclusiveskillid(), target);
  }

  // optional string m_passiveskillid = 9;
  if (has_m_passiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_passiveskillid().data(), this->m_passiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_passiveskillid(), target);
  }

  // optional int32 m_activeattribute = 10;
  if (has_m_activeattribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_activeattribute(), target);
  }

  // optional int32 m_growatt = 11;
  if (has_m_growatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_growatt(), target);
  }

  // optional float m_activeparama = 12;
  if (has_m_activeparama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->m_activeparama(), target);
  }

  // optional float m_growattparama = 13;
  if (has_m_growattparama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->m_growattparama(), target);
  }

  // optional float m_growstandarda = 14;
  if (has_m_growstandarda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->m_growstandarda(), target);
  }

  // optional float m_growstandardb = 15;
  if (has_m_growstandardb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->m_growstandardb(), target);
  }

  // optional float m_growstandard = 16;
  if (has_m_growstandard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->m_growstandard(), target);
  }

  // optional float m_growmin = 17;
  if (has_m_growmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->m_growmin(), target);
  }

  // optional float m_growmax = 18;
  if (has_m_growmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->m_growmax(), target);
  }

  // optional float m_growstar = 19;
  if (has_m_growstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->m_growstar(), target);
  }

  // optional int32 m_advanceattribute = 20;
  if (has_m_advanceattribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_advanceattribute(), target);
  }

  // optional int32 m_advancetype = 21;
  if (has_m_advancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_advancetype(), target);
  }

  // optional string m_pettagskill = 22;
  if (has_m_pettagskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pettagskill().data(), this->m_pettagskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->m_pettagskill(), target);
  }

  // optional int32 m_starattribute = 23;
  if (has_m_starattribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_starattribute(), target);
  }

  // optional int32 m_starpercent = 24;
  if (has_m_starpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_starpercent(), target);
  }

  // optional int32 m_starllimit = 25;
  if (has_m_starllimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->m_starllimit(), target);
  }

  // optional int64 m_staritem = 26;
  if (has_m_staritem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->m_staritem(), target);
  }

  // optional string m_starnum = 27;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->m_starnum(), target);
  }

  // optional int64 m_starpetid = 28;
  if (has_m_starpetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->m_starpetid(), target);
  }

  // optional string m_starpetnum = 29;
  if (has_m_starpetnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starpetnum().data(), this->m_starpetnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->m_starpetnum(), target);
  }

  // optional int32 m_weapon = 30;
  if (has_m_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->m_weapon(), target);
  }

  // optional int64 m_upattributeid = 31;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->m_upattributeid(), target);
  }

  // optional int32 m_fettersid = 32;
  if (has_m_fettersid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->m_fettersid(), target);
  }

  // repeated .proto_ff.E_PetDisplayMaterialDesc m_material = 33;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->m_material(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetDisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_isstar = 3;
    if (has_m_isstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isstar());
    }

    // optional string m_grade = 4;
    if (has_m_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_grade());
    }

    // optional int64 m_monsterid = 5;
    if (has_m_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_monsterid());
    }

    // optional string m_name = 6;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_activeskillid = 7;
    if (has_m_activeskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeskillid());
    }

    // optional string m_exclusiveskillid = 8;
    if (has_m_exclusiveskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_exclusiveskillid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_passiveskillid = 9;
    if (has_m_passiveskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_passiveskillid());
    }

    // optional int32 m_activeattribute = 10;
    if (has_m_activeattribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeattribute());
    }

    // optional int32 m_growatt = 11;
    if (has_m_growatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_growatt());
    }

    // optional float m_activeparama = 12;
    if (has_m_activeparama()) {
      total_size += 1 + 4;
    }

    // optional float m_growattparama = 13;
    if (has_m_growattparama()) {
      total_size += 1 + 4;
    }

    // optional float m_growstandarda = 14;
    if (has_m_growstandarda()) {
      total_size += 1 + 4;
    }

    // optional float m_growstandardb = 15;
    if (has_m_growstandardb()) {
      total_size += 1 + 4;
    }

    // optional float m_growstandard = 16;
    if (has_m_growstandard()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float m_growmin = 17;
    if (has_m_growmin()) {
      total_size += 2 + 4;
    }

    // optional float m_growmax = 18;
    if (has_m_growmax()) {
      total_size += 2 + 4;
    }

    // optional float m_growstar = 19;
    if (has_m_growstar()) {
      total_size += 2 + 4;
    }

    // optional int32 m_advanceattribute = 20;
    if (has_m_advanceattribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advanceattribute());
    }

    // optional int32 m_advancetype = 21;
    if (has_m_advancetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancetype());
    }

    // optional string m_pettagskill = 22;
    if (has_m_pettagskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_pettagskill());
    }

    // optional int32 m_starattribute = 23;
    if (has_m_starattribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starattribute());
    }

    // optional int32 m_starpercent = 24;
    if (has_m_starpercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starpercent());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 m_starllimit = 25;
    if (has_m_starllimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starllimit());
    }

    // optional int64 m_staritem = 26;
    if (has_m_staritem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_staritem());
    }

    // optional string m_starnum = 27;
    if (has_m_starnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

    // optional int64 m_starpetid = 28;
    if (has_m_starpetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_starpetid());
    }

    // optional string m_starpetnum = 29;
    if (has_m_starpetnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starpetnum());
    }

    // optional int32 m_weapon = 30;
    if (has_m_weapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weapon());
    }

    // optional int64 m_upattributeid = 31;
    if (has_m_upattributeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_upattributeid());
    }

    // optional int32 m_fettersid = 32;
    if (has_m_fettersid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fettersid());
    }

  }
  // repeated .proto_ff.E_PetDisplayMaterialDesc m_material = 33;
  total_size += 2 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetDisplay::MergeFrom(const E_PetDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_material_.MergeFrom(from.m_material_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_isstar()) {
      set_m_isstar(from.m_isstar());
    }
    if (from.has_m_grade()) {
      set_m_grade(from.m_grade());
    }
    if (from.has_m_monsterid()) {
      set_m_monsterid(from.m_monsterid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_activeskillid()) {
      set_m_activeskillid(from.m_activeskillid());
    }
    if (from.has_m_exclusiveskillid()) {
      set_m_exclusiveskillid(from.m_exclusiveskillid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_passiveskillid()) {
      set_m_passiveskillid(from.m_passiveskillid());
    }
    if (from.has_m_activeattribute()) {
      set_m_activeattribute(from.m_activeattribute());
    }
    if (from.has_m_growatt()) {
      set_m_growatt(from.m_growatt());
    }
    if (from.has_m_activeparama()) {
      set_m_activeparama(from.m_activeparama());
    }
    if (from.has_m_growattparama()) {
      set_m_growattparama(from.m_growattparama());
    }
    if (from.has_m_growstandarda()) {
      set_m_growstandarda(from.m_growstandarda());
    }
    if (from.has_m_growstandardb()) {
      set_m_growstandardb(from.m_growstandardb());
    }
    if (from.has_m_growstandard()) {
      set_m_growstandard(from.m_growstandard());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_growmin()) {
      set_m_growmin(from.m_growmin());
    }
    if (from.has_m_growmax()) {
      set_m_growmax(from.m_growmax());
    }
    if (from.has_m_growstar()) {
      set_m_growstar(from.m_growstar());
    }
    if (from.has_m_advanceattribute()) {
      set_m_advanceattribute(from.m_advanceattribute());
    }
    if (from.has_m_advancetype()) {
      set_m_advancetype(from.m_advancetype());
    }
    if (from.has_m_pettagskill()) {
      set_m_pettagskill(from.m_pettagskill());
    }
    if (from.has_m_starattribute()) {
      set_m_starattribute(from.m_starattribute());
    }
    if (from.has_m_starpercent()) {
      set_m_starpercent(from.m_starpercent());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_starllimit()) {
      set_m_starllimit(from.m_starllimit());
    }
    if (from.has_m_staritem()) {
      set_m_staritem(from.m_staritem());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_starpetid()) {
      set_m_starpetid(from.m_starpetid());
    }
    if (from.has_m_starpetnum()) {
      set_m_starpetnum(from.m_starpetnum());
    }
    if (from.has_m_weapon()) {
      set_m_weapon(from.m_weapon());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
    if (from.has_m_fettersid()) {
      set_m_fettersid(from.m_fettersid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetDisplay::CopyFrom(const E_PetDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetDisplay::IsInitialized() const {

  return true;
}

void E_PetDisplay::Swap(E_PetDisplay* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_isstar_, other->m_isstar_);
    std::swap(m_grade_, other->m_grade_);
    std::swap(m_monsterid_, other->m_monsterid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_activeskillid_, other->m_activeskillid_);
    std::swap(m_exclusiveskillid_, other->m_exclusiveskillid_);
    std::swap(m_passiveskillid_, other->m_passiveskillid_);
    std::swap(m_activeattribute_, other->m_activeattribute_);
    std::swap(m_growatt_, other->m_growatt_);
    std::swap(m_activeparama_, other->m_activeparama_);
    std::swap(m_growattparama_, other->m_growattparama_);
    std::swap(m_growstandarda_, other->m_growstandarda_);
    std::swap(m_growstandardb_, other->m_growstandardb_);
    std::swap(m_growstandard_, other->m_growstandard_);
    std::swap(m_growmin_, other->m_growmin_);
    std::swap(m_growmax_, other->m_growmax_);
    std::swap(m_growstar_, other->m_growstar_);
    std::swap(m_advanceattribute_, other->m_advanceattribute_);
    std::swap(m_advancetype_, other->m_advancetype_);
    std::swap(m_pettagskill_, other->m_pettagskill_);
    std::swap(m_starattribute_, other->m_starattribute_);
    std::swap(m_starpercent_, other->m_starpercent_);
    std::swap(m_starllimit_, other->m_starllimit_);
    std::swap(m_staritem_, other->m_staritem_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_starpetid_, other->m_starpetid_);
    std::swap(m_starpetnum_, other->m_starpetnum_);
    std::swap(m_weapon_, other->m_weapon_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_fettersid_, other->m_fettersid_);
    m_material_.Swap(&other->m_material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetDisplay_descriptor_;
  metadata.reflection = E_PetDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetDisplay::kEPetDisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetDisplay::Sheet_PetDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetDisplay::InitAsDefaultInstance() {
}

Sheet_PetDisplay::Sheet_PetDisplay(const Sheet_PetDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetDisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetDisplay::~Sheet_PetDisplay() {
  SharedDtor();
}

void Sheet_PetDisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetDisplay_descriptor_;
}

const Sheet_PetDisplay& Sheet_PetDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Sheet_PetDisplay* Sheet_PetDisplay::default_instance_ = NULL;

Sheet_PetDisplay* Sheet_PetDisplay::New() const {
  return new Sheet_PetDisplay;
}

void Sheet_PetDisplay::Clear() {
  e_petdisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetDisplay E_PetDisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetDisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petdisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetDisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetDisplay E_PetDisplay_List = 1;
  for (int i = 0; i < this->e_petdisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petdisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetDisplay E_PetDisplay_List = 1;
  for (int i = 0; i < this->e_petdisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petdisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetDisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetDisplay E_PetDisplay_List = 1;
  total_size += 1 * this->e_petdisplay_list_size();
  for (int i = 0; i < this->e_petdisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petdisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetDisplay::MergeFrom(const Sheet_PetDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petdisplay_list_.MergeFrom(from.e_petdisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetDisplay::CopyFrom(const Sheet_PetDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetDisplay::IsInitialized() const {

  return true;
}

void Sheet_PetDisplay::Swap(Sheet_PetDisplay* other) {
  if (other != this) {
    e_petdisplay_list_.Swap(&other->e_petdisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetDisplay_descriptor_;
  metadata.reflection = Sheet_PetDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetAttributetpyeAttributeDesc::kMTypeFieldNumber;
const int E_PetAttributetpyeAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_PetAttributetpyeAttributeDesc::E_PetAttributetpyeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetAttributetpyeAttributeDesc::InitAsDefaultInstance() {
}

E_PetAttributetpyeAttributeDesc::E_PetAttributetpyeAttributeDesc(const E_PetAttributetpyeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetAttributetpyeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetAttributetpyeAttributeDesc::~E_PetAttributetpyeAttributeDesc() {
  SharedDtor();
}

void E_PetAttributetpyeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetAttributetpyeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetAttributetpyeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetAttributetpyeAttributeDesc_descriptor_;
}

const E_PetAttributetpyeAttributeDesc& E_PetAttributetpyeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetAttributetpyeAttributeDesc* E_PetAttributetpyeAttributeDesc::default_instance_ = NULL;

E_PetAttributetpyeAttributeDesc* E_PetAttributetpyeAttributeDesc::New() const {
  return new E_PetAttributetpyeAttributeDesc;
}

void E_PetAttributetpyeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetAttributetpyeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetAttributetpyeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetAttributetpyeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetAttributetpyeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetAttributetpyeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetAttributetpyeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetAttributetpyeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetAttributetpyeAttributeDesc::MergeFrom(const E_PetAttributetpyeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetAttributetpyeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetAttributetpyeAttributeDesc::CopyFrom(const E_PetAttributetpyeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetAttributetpyeAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetAttributetpyeAttributeDesc::Swap(E_PetAttributetpyeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetAttributetpyeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetAttributetpyeAttributeDesc_descriptor_;
  metadata.reflection = E_PetAttributetpyeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetAttributetpye::kMIdFieldNumber;
const int E_PetAttributetpye::kMTpyeFieldNumber;
const int E_PetAttributetpye::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_PetAttributetpye::E_PetAttributetpye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetAttributetpye::InitAsDefaultInstance() {
}

E_PetAttributetpye::E_PetAttributetpye(const E_PetAttributetpye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetAttributetpye::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_tpye_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetAttributetpye::~E_PetAttributetpye() {
  SharedDtor();
}

void E_PetAttributetpye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetAttributetpye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetAttributetpye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetAttributetpye_descriptor_;
}

const E_PetAttributetpye& E_PetAttributetpye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetAttributetpye* E_PetAttributetpye::default_instance_ = NULL;

E_PetAttributetpye* E_PetAttributetpye::New() const {
  return new E_PetAttributetpye;
}

void E_PetAttributetpye::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_tpye_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetAttributetpye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_tpye;
        break;
      }

      // optional int32 m_tpye = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tpye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tpye_)));
          set_has_m_tpye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_PetAttributetpyeAttributeDesc m_attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetAttributetpye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_tpye = 2;
  if (has_m_tpye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_tpye(), output);
  }

  // repeated .proto_ff.E_PetAttributetpyeAttributeDesc m_attribute = 3;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetAttributetpye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_tpye = 2;
  if (has_m_tpye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_tpye(), target);
  }

  // repeated .proto_ff.E_PetAttributetpyeAttributeDesc m_attribute = 3;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetAttributetpye::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_tpye = 2;
    if (has_m_tpye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tpye());
    }

  }
  // repeated .proto_ff.E_PetAttributetpyeAttributeDesc m_attribute = 3;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetAttributetpye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetAttributetpye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetAttributetpye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetAttributetpye::MergeFrom(const E_PetAttributetpye& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_tpye()) {
      set_m_tpye(from.m_tpye());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetAttributetpye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetAttributetpye::CopyFrom(const E_PetAttributetpye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetAttributetpye::IsInitialized() const {

  return true;
}

void E_PetAttributetpye::Swap(E_PetAttributetpye* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_tpye_, other->m_tpye_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetAttributetpye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetAttributetpye_descriptor_;
  metadata.reflection = E_PetAttributetpye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetAttributetpye::kEPetAttributetpyeListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetAttributetpye::Sheet_PetAttributetpye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetAttributetpye::InitAsDefaultInstance() {
}

Sheet_PetAttributetpye::Sheet_PetAttributetpye(const Sheet_PetAttributetpye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetAttributetpye::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetAttributetpye::~Sheet_PetAttributetpye() {
  SharedDtor();
}

void Sheet_PetAttributetpye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetAttributetpye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetAttributetpye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetAttributetpye_descriptor_;
}

const Sheet_PetAttributetpye& Sheet_PetAttributetpye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Sheet_PetAttributetpye* Sheet_PetAttributetpye::default_instance_ = NULL;

Sheet_PetAttributetpye* Sheet_PetAttributetpye::New() const {
  return new Sheet_PetAttributetpye;
}

void Sheet_PetAttributetpye::Clear() {
  e_petattributetpye_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetAttributetpye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetAttributetpye E_PetAttributetpye_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetAttributetpye_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petattributetpye_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetAttributetpye_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetAttributetpye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetAttributetpye E_PetAttributetpye_List = 1;
  for (int i = 0; i < this->e_petattributetpye_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petattributetpye_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetAttributetpye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetAttributetpye E_PetAttributetpye_List = 1;
  for (int i = 0; i < this->e_petattributetpye_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petattributetpye_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetAttributetpye::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetAttributetpye E_PetAttributetpye_List = 1;
  total_size += 1 * this->e_petattributetpye_list_size();
  for (int i = 0; i < this->e_petattributetpye_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petattributetpye_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetAttributetpye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetAttributetpye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetAttributetpye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetAttributetpye::MergeFrom(const Sheet_PetAttributetpye& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petattributetpye_list_.MergeFrom(from.e_petattributetpye_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetAttributetpye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetAttributetpye::CopyFrom(const Sheet_PetAttributetpye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetAttributetpye::IsInitialized() const {

  return true;
}

void Sheet_PetAttributetpye::Swap(Sheet_PetAttributetpye* other) {
  if (other != this) {
    e_petattributetpye_list_.Swap(&other->e_petattributetpye_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetAttributetpye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetAttributetpye_descriptor_;
  metadata.reflection = Sheet_PetAttributetpye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetLvexp::kMIdFieldNumber;
const int E_PetLvexp::kMExpFieldNumber;
#endif  // !_MSC_VER

E_PetLvexp::E_PetLvexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetLvexp::InitAsDefaultInstance() {
}

E_PetLvexp::E_PetLvexp(const E_PetLvexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetLvexp::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetLvexp::~E_PetLvexp() {
  SharedDtor();
}

void E_PetLvexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetLvexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetLvexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetLvexp_descriptor_;
}

const E_PetLvexp& E_PetLvexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetLvexp* E_PetLvexp::default_instance_ = NULL;

E_PetLvexp* E_PetLvexp::New() const {
  return new E_PetLvexp;
}

void E_PetLvexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetLvexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int64 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetLvexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetLvexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetLvexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int64 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetLvexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetLvexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetLvexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetLvexp::MergeFrom(const E_PetLvexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetLvexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetLvexp::CopyFrom(const E_PetLvexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetLvexp::IsInitialized() const {

  return true;
}

void E_PetLvexp::Swap(E_PetLvexp* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetLvexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetLvexp_descriptor_;
  metadata.reflection = E_PetLvexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetLvexp::kEPetLvexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetLvexp::Sheet_PetLvexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetLvexp::InitAsDefaultInstance() {
}

Sheet_PetLvexp::Sheet_PetLvexp(const Sheet_PetLvexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetLvexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetLvexp::~Sheet_PetLvexp() {
  SharedDtor();
}

void Sheet_PetLvexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetLvexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetLvexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetLvexp_descriptor_;
}

const Sheet_PetLvexp& Sheet_PetLvexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Sheet_PetLvexp* Sheet_PetLvexp::default_instance_ = NULL;

Sheet_PetLvexp* Sheet_PetLvexp::New() const {
  return new Sheet_PetLvexp;
}

void Sheet_PetLvexp::Clear() {
  e_petlvexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetLvexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetLvexp E_PetLvexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetLvexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petlvexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetLvexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetLvexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetLvexp E_PetLvexp_List = 1;
  for (int i = 0; i < this->e_petlvexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petlvexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetLvexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetLvexp E_PetLvexp_List = 1;
  for (int i = 0; i < this->e_petlvexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petlvexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetLvexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetLvexp E_PetLvexp_List = 1;
  total_size += 1 * this->e_petlvexp_list_size();
  for (int i = 0; i < this->e_petlvexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petlvexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetLvexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetLvexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetLvexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetLvexp::MergeFrom(const Sheet_PetLvexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petlvexp_list_.MergeFrom(from.e_petlvexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetLvexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetLvexp::CopyFrom(const Sheet_PetLvexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetLvexp::IsInitialized() const {

  return true;
}

void Sheet_PetLvexp::Swap(Sheet_PetLvexp* other) {
  if (other != this) {
    e_petlvexp_list_.Swap(&other->e_petlvexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetLvexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetLvexp_descriptor_;
  metadata.reflection = Sheet_PetLvexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetAdvancelvAdvanceDesc::kMTypeFieldNumber;
const int E_PetAdvancelvAdvanceDesc::kMParamFieldNumber;
#endif  // !_MSC_VER

E_PetAdvancelvAdvanceDesc::E_PetAdvancelvAdvanceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetAdvancelvAdvanceDesc::InitAsDefaultInstance() {
}

E_PetAdvancelvAdvanceDesc::E_PetAdvancelvAdvanceDesc(const E_PetAdvancelvAdvanceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetAdvancelvAdvanceDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetAdvancelvAdvanceDesc::~E_PetAdvancelvAdvanceDesc() {
  SharedDtor();
}

void E_PetAdvancelvAdvanceDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetAdvancelvAdvanceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetAdvancelvAdvanceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetAdvancelvAdvanceDesc_descriptor_;
}

const E_PetAdvancelvAdvanceDesc& E_PetAdvancelvAdvanceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetAdvancelvAdvanceDesc* E_PetAdvancelvAdvanceDesc::default_instance_ = NULL;

E_PetAdvancelvAdvanceDesc* E_PetAdvancelvAdvanceDesc::New() const {
  return new E_PetAdvancelvAdvanceDesc;
}

void E_PetAdvancelvAdvanceDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetAdvancelvAdvanceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_m_param;
        break;
      }

      // optional float m_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetAdvancelvAdvanceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional float m_param = 2;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->m_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetAdvancelvAdvanceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional float m_param = 2;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->m_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetAdvancelvAdvanceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional float m_param = 2;
    if (has_m_param()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetAdvancelvAdvanceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetAdvancelvAdvanceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetAdvancelvAdvanceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetAdvancelvAdvanceDesc::MergeFrom(const E_PetAdvancelvAdvanceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetAdvancelvAdvanceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetAdvancelvAdvanceDesc::CopyFrom(const E_PetAdvancelvAdvanceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetAdvancelvAdvanceDesc::IsInitialized() const {

  return true;
}

void E_PetAdvancelvAdvanceDesc::Swap(E_PetAdvancelvAdvanceDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_param_, other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetAdvancelvAdvanceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetAdvancelvAdvanceDesc_descriptor_;
  metadata.reflection = E_PetAdvancelvAdvanceDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetAdvancelv::kMIdFieldNumber;
const int E_PetAdvancelv::kMAdvanceitemFieldNumber;
const int E_PetAdvancelv::kMAdvancenumFieldNumber;
const int E_PetAdvancelv::kMAdvanceFieldNumber;
#endif  // !_MSC_VER

E_PetAdvancelv::E_PetAdvancelv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetAdvancelv::InitAsDefaultInstance() {
}

E_PetAdvancelv::E_PetAdvancelv(const E_PetAdvancelv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetAdvancelv::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_advanceitem_ = 0;
  m_advancenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetAdvancelv::~E_PetAdvancelv() {
  SharedDtor();
}

void E_PetAdvancelv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetAdvancelv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetAdvancelv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetAdvancelv_descriptor_;
}

const E_PetAdvancelv& E_PetAdvancelv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetAdvancelv* E_PetAdvancelv::default_instance_ = NULL;

E_PetAdvancelv* E_PetAdvancelv::New() const {
  return new E_PetAdvancelv;
}

void E_PetAdvancelv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_advanceitem_ = 0;
    m_advancenum_ = 0;
  }
  m_advance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetAdvancelv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_advanceitem;
        break;
      }

      // optional int32 m_advanceitem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advanceitem_)));
          set_has_m_advanceitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_advancenum;
        break;
      }

      // optional int32 m_advancenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advancenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancenum_)));
          set_has_m_advancenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_advance;
        break;
      }

      // repeated .proto_ff.E_PetAdvancelvAdvanceDesc m_advance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_advance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_advance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_advance;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetAdvancelv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_advanceitem = 2;
  if (has_m_advanceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_advanceitem(), output);
  }

  // optional int32 m_advancenum = 3;
  if (has_m_advancenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_advancenum(), output);
  }

  // repeated .proto_ff.E_PetAdvancelvAdvanceDesc m_advance = 4;
  for (int i = 0; i < this->m_advance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_advance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetAdvancelv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_advanceitem = 2;
  if (has_m_advanceitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_advanceitem(), target);
  }

  // optional int32 m_advancenum = 3;
  if (has_m_advancenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_advancenum(), target);
  }

  // repeated .proto_ff.E_PetAdvancelvAdvanceDesc m_advance = 4;
  for (int i = 0; i < this->m_advance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_advance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetAdvancelv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_advanceitem = 2;
    if (has_m_advanceitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advanceitem());
    }

    // optional int32 m_advancenum = 3;
    if (has_m_advancenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancenum());
    }

  }
  // repeated .proto_ff.E_PetAdvancelvAdvanceDesc m_advance = 4;
  total_size += 1 * this->m_advance_size();
  for (int i = 0; i < this->m_advance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_advance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetAdvancelv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetAdvancelv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetAdvancelv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetAdvancelv::MergeFrom(const E_PetAdvancelv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_advance_.MergeFrom(from.m_advance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_advanceitem()) {
      set_m_advanceitem(from.m_advanceitem());
    }
    if (from.has_m_advancenum()) {
      set_m_advancenum(from.m_advancenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetAdvancelv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetAdvancelv::CopyFrom(const E_PetAdvancelv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetAdvancelv::IsInitialized() const {

  return true;
}

void E_PetAdvancelv::Swap(E_PetAdvancelv* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_advanceitem_, other->m_advanceitem_);
    std::swap(m_advancenum_, other->m_advancenum_);
    m_advance_.Swap(&other->m_advance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetAdvancelv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetAdvancelv_descriptor_;
  metadata.reflection = E_PetAdvancelv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetAdvancelv::kEPetAdvancelvListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetAdvancelv::Sheet_PetAdvancelv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetAdvancelv::InitAsDefaultInstance() {
}

Sheet_PetAdvancelv::Sheet_PetAdvancelv(const Sheet_PetAdvancelv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetAdvancelv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetAdvancelv::~Sheet_PetAdvancelv() {
  SharedDtor();
}

void Sheet_PetAdvancelv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetAdvancelv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetAdvancelv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetAdvancelv_descriptor_;
}

const Sheet_PetAdvancelv& Sheet_PetAdvancelv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Sheet_PetAdvancelv* Sheet_PetAdvancelv::default_instance_ = NULL;

Sheet_PetAdvancelv* Sheet_PetAdvancelv::New() const {
  return new Sheet_PetAdvancelv;
}

void Sheet_PetAdvancelv::Clear() {
  e_petadvancelv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetAdvancelv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetAdvancelv E_PetAdvancelv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetAdvancelv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petadvancelv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetAdvancelv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetAdvancelv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetAdvancelv E_PetAdvancelv_List = 1;
  for (int i = 0; i < this->e_petadvancelv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petadvancelv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetAdvancelv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetAdvancelv E_PetAdvancelv_List = 1;
  for (int i = 0; i < this->e_petadvancelv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petadvancelv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetAdvancelv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetAdvancelv E_PetAdvancelv_List = 1;
  total_size += 1 * this->e_petadvancelv_list_size();
  for (int i = 0; i < this->e_petadvancelv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petadvancelv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetAdvancelv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetAdvancelv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetAdvancelv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetAdvancelv::MergeFrom(const Sheet_PetAdvancelv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petadvancelv_list_.MergeFrom(from.e_petadvancelv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetAdvancelv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetAdvancelv::CopyFrom(const Sheet_PetAdvancelv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetAdvancelv::IsInitialized() const {

  return true;
}

void Sheet_PetAdvancelv::Swap(Sheet_PetAdvancelv* other) {
  if (other != this) {
    e_petadvancelv_list_.Swap(&other->e_petadvancelv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetAdvancelv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetAdvancelv_descriptor_;
  metadata.reflection = Sheet_PetAdvancelv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStarupUpattributeDesc::kMTypeFieldNumber;
const int E_PetStarupUpattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_PetStarupUpattributeDesc::E_PetStarupUpattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStarupUpattributeDesc::InitAsDefaultInstance() {
}

E_PetStarupUpattributeDesc::E_PetStarupUpattributeDesc(const E_PetStarupUpattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStarupUpattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStarupUpattributeDesc::~E_PetStarupUpattributeDesc() {
  SharedDtor();
}

void E_PetStarupUpattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStarupUpattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStarupUpattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStarupUpattributeDesc_descriptor_;
}

const E_PetStarupUpattributeDesc& E_PetStarupUpattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetStarupUpattributeDesc* E_PetStarupUpattributeDesc::default_instance_ = NULL;

E_PetStarupUpattributeDesc* E_PetStarupUpattributeDesc::New() const {
  return new E_PetStarupUpattributeDesc;
}

void E_PetStarupUpattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStarupUpattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStarupUpattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStarupUpattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStarupUpattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStarupUpattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStarupUpattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStarupUpattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStarupUpattributeDesc::MergeFrom(const E_PetStarupUpattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStarupUpattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStarupUpattributeDesc::CopyFrom(const E_PetStarupUpattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStarupUpattributeDesc::IsInitialized() const {

  return true;
}

void E_PetStarupUpattributeDesc::Swap(E_PetStarupUpattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStarupUpattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStarupUpattributeDesc_descriptor_;
  metadata.reflection = E_PetStarupUpattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStarup::kMIdFieldNumber;
const int E_PetStarup::kMUpattributeidFieldNumber;
const int E_PetStarup::kMStaridFieldNumber;
const int E_PetStarup::kMSkillidFieldNumber;
const int E_PetStarup::kMActiveskillidlvFieldNumber;
const int E_PetStarup::kMUpattributeFieldNumber;
#endif  // !_MSC_VER

E_PetStarup::E_PetStarup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStarup::InitAsDefaultInstance() {
}

E_PetStarup::E_PetStarup(const E_PetStarup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStarup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_upattributeid_ = GOOGLE_LONGLONG(0);
  m_starid_ = 0;
  m_skillid_ = 0;
  m_activeskillidlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStarup::~E_PetStarup() {
  SharedDtor();
}

void E_PetStarup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStarup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStarup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStarup_descriptor_;
}

const E_PetStarup& E_PetStarup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetStarup* E_PetStarup::default_instance_ = NULL;

E_PetStarup* E_PetStarup::New() const {
  return new E_PetStarup;
}

void E_PetStarup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_upattributeid_ = GOOGLE_LONGLONG(0);
    m_starid_ = 0;
    m_skillid_ = 0;
    m_activeskillidlv_ = 0;
  }
  m_upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStarup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_upattributeid;
        break;
      }

      // optional int64 m_upattributeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upattributeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_starid;
        break;
      }

      // optional int32 m_starid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_activeskillidlv;
        break;
      }

      // optional int32 m_activeskillidlv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeskillidlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeskillidlv_)));
          set_has_m_activeskillidlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_upattribute;
        break;
      }

      // repeated .proto_ff.E_PetStarupUpattributeDesc m_upattribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_upattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_upattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStarup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int64 m_upattributeid = 2;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_upattributeid(), output);
  }

  // optional int32 m_starid = 3;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_starid(), output);
  }

  // optional int32 m_skillid = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_skillid(), output);
  }

  // optional int32 m_activeskillidlv = 5;
  if (has_m_activeskillidlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_activeskillidlv(), output);
  }

  // repeated .proto_ff.E_PetStarupUpattributeDesc m_upattribute = 6;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStarup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int64 m_upattributeid = 2;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_upattributeid(), target);
  }

  // optional int32 m_starid = 3;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_starid(), target);
  }

  // optional int32 m_skillid = 4;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_skillid(), target);
  }

  // optional int32 m_activeskillidlv = 5;
  if (has_m_activeskillidlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_activeskillidlv(), target);
  }

  // repeated .proto_ff.E_PetStarupUpattributeDesc m_upattribute = 6;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStarup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int64 m_upattributeid = 2;
    if (has_m_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_upattributeid());
    }

    // optional int32 m_starid = 3;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starid());
    }

    // optional int32 m_skillid = 4;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_activeskillidlv = 5;
    if (has_m_activeskillidlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeskillidlv());
    }

  }
  // repeated .proto_ff.E_PetStarupUpattributeDesc m_upattribute = 6;
  total_size += 1 * this->m_upattribute_size();
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStarup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStarup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStarup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStarup::MergeFrom(const E_PetStarup& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_upattribute_.MergeFrom(from.m_upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_activeskillidlv()) {
      set_m_activeskillidlv(from.m_activeskillidlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStarup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStarup::CopyFrom(const E_PetStarup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStarup::IsInitialized() const {

  return true;
}

void E_PetStarup::Swap(E_PetStarup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_activeskillidlv_, other->m_activeskillidlv_);
    m_upattribute_.Swap(&other->m_upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStarup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStarup_descriptor_;
  metadata.reflection = E_PetStarup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetStarup::kEPetStarupListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetStarup::Sheet_PetStarup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetStarup::InitAsDefaultInstance() {
}

Sheet_PetStarup::Sheet_PetStarup(const Sheet_PetStarup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetStarup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetStarup::~Sheet_PetStarup() {
  SharedDtor();
}

void Sheet_PetStarup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetStarup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetStarup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetStarup_descriptor_;
}

const Sheet_PetStarup& Sheet_PetStarup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Sheet_PetStarup* Sheet_PetStarup::default_instance_ = NULL;

Sheet_PetStarup* Sheet_PetStarup::New() const {
  return new Sheet_PetStarup;
}

void Sheet_PetStarup::Clear() {
  e_petstarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetStarup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetStarup E_PetStarup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetStarup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petstarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetStarup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetStarup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetStarup E_PetStarup_List = 1;
  for (int i = 0; i < this->e_petstarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petstarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetStarup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetStarup E_PetStarup_List = 1;
  for (int i = 0; i < this->e_petstarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petstarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetStarup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetStarup E_PetStarup_List = 1;
  total_size += 1 * this->e_petstarup_list_size();
  for (int i = 0; i < this->e_petstarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petstarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetStarup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetStarup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetStarup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetStarup::MergeFrom(const Sheet_PetStarup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petstarup_list_.MergeFrom(from.e_petstarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetStarup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetStarup::CopyFrom(const Sheet_PetStarup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetStarup::IsInitialized() const {

  return true;
}

void Sheet_PetStarup::Swap(Sheet_PetStarup* other) {
  if (other != this) {
    e_petstarup_list_.Swap(&other->e_petstarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetStarup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetStarup_descriptor_;
  metadata.reflection = Sheet_PetStarup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetEggPetDesc::kMRandFieldNumber;
const int E_PetEggPetDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_PetEggPetDesc::E_PetEggPetDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetEggPetDesc::InitAsDefaultInstance() {
}

E_PetEggPetDesc::E_PetEggPetDesc(const E_PetEggPetDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetEggPetDesc::SharedCtor() {
  _cached_size_ = 0;
  m_rand_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetEggPetDesc::~E_PetEggPetDesc() {
  SharedDtor();
}

void E_PetEggPetDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetEggPetDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetEggPetDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetEggPetDesc_descriptor_;
}

const E_PetEggPetDesc& E_PetEggPetDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetEggPetDesc* E_PetEggPetDesc::default_instance_ = NULL;

E_PetEggPetDesc* E_PetEggPetDesc::New() const {
  return new E_PetEggPetDesc;
}

void E_PetEggPetDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rand_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetEggPetDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_rand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rand_)));
          set_has_m_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetEggPetDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_rand = 1;
  if (has_m_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rand(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetEggPetDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_rand = 1;
  if (has_m_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rand(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetEggPetDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_rand = 1;
    if (has_m_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rand());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetEggPetDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetEggPetDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetEggPetDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetEggPetDesc::MergeFrom(const E_PetEggPetDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rand()) {
      set_m_rand(from.m_rand());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetEggPetDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetEggPetDesc::CopyFrom(const E_PetEggPetDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetEggPetDesc::IsInitialized() const {

  return true;
}

void E_PetEggPetDesc::Swap(E_PetEggPetDesc* other) {
  if (other != this) {
    std::swap(m_rand_, other->m_rand_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetEggPetDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetEggPetDesc_descriptor_;
  metadata.reflection = E_PetEggPetDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetEgg::kMIdFieldNumber;
const int E_PetEgg::kMTimeFieldNumber;
const int E_PetEgg::kMPetFieldNumber;
#endif  // !_MSC_VER

E_PetEgg::E_PetEgg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetEgg::InitAsDefaultInstance() {
}

E_PetEgg::E_PetEgg(const E_PetEgg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetEgg::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetEgg::~E_PetEgg() {
  SharedDtor();
}

void E_PetEgg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetEgg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetEgg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetEgg_descriptor_;
}

const E_PetEgg& E_PetEgg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetEgg* E_PetEgg::default_instance_ = NULL;

E_PetEgg* E_PetEgg::New() const {
  return new E_PetEgg;
}

void E_PetEgg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_time_ = 0;
  }
  m_pet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_pet;
        break;
      }

      // repeated .proto_ff.E_PetEggPetDesc m_pet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_pet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_time(), output);
  }

  // repeated .proto_ff.E_PetEggPetDesc m_pet = 3;
  for (int i = 0; i < this->m_pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_pet(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetEgg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_time(), target);
  }

  // repeated .proto_ff.E_PetEggPetDesc m_pet = 3;
  for (int i = 0; i < this->m_pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_pet(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetEgg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_time = 2;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  // repeated .proto_ff.E_PetEggPetDesc m_pet = 3;
  total_size += 1 * this->m_pet_size();
  for (int i = 0; i < this->m_pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_pet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetEgg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetEgg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetEgg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetEgg::MergeFrom(const E_PetEgg& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_pet_.MergeFrom(from.m_pet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetEgg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetEgg::CopyFrom(const E_PetEgg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetEgg::IsInitialized() const {

  return true;
}

void E_PetEgg::Swap(E_PetEgg* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_time_, other->m_time_);
    m_pet_.Swap(&other->m_pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetEgg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetEgg_descriptor_;
  metadata.reflection = E_PetEgg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetEgg::kEPetEggListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetEgg::Sheet_PetEgg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetEgg::InitAsDefaultInstance() {
}

Sheet_PetEgg::Sheet_PetEgg(const Sheet_PetEgg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetEgg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetEgg::~Sheet_PetEgg() {
  SharedDtor();
}

void Sheet_PetEgg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetEgg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetEgg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetEgg_descriptor_;
}

const Sheet_PetEgg& Sheet_PetEgg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Sheet_PetEgg* Sheet_PetEgg::default_instance_ = NULL;

Sheet_PetEgg* Sheet_PetEgg::New() const {
  return new Sheet_PetEgg;
}

void Sheet_PetEgg::Clear() {
  e_petegg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetEgg E_PetEgg_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetEgg_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petegg_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetEgg_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetEgg E_PetEgg_List = 1;
  for (int i = 0; i < this->e_petegg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petegg_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetEgg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetEgg E_PetEgg_List = 1;
  for (int i = 0; i < this->e_petegg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petegg_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetEgg::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetEgg E_PetEgg_List = 1;
  total_size += 1 * this->e_petegg_list_size();
  for (int i = 0; i < this->e_petegg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petegg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetEgg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetEgg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetEgg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetEgg::MergeFrom(const Sheet_PetEgg& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petegg_list_.MergeFrom(from.e_petegg_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetEgg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetEgg::CopyFrom(const Sheet_PetEgg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetEgg::IsInitialized() const {

  return true;
}

void Sheet_PetEgg::Swap(Sheet_PetEgg* other) {
  if (other != this) {
    e_petegg_list_.Swap(&other->e_petegg_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetEgg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetEgg_descriptor_;
  metadata.reflection = Sheet_PetEgg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetDecomposeDecomposeDesc::kMBoxidFieldNumber;
const int E_PetDecomposeDecomposeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetDecomposeDecomposeDesc::E_PetDecomposeDecomposeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetDecomposeDecomposeDesc::InitAsDefaultInstance() {
}

E_PetDecomposeDecomposeDesc::E_PetDecomposeDecomposeDesc(const E_PetDecomposeDecomposeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetDecomposeDecomposeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_boxid_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetDecomposeDecomposeDesc::~E_PetDecomposeDecomposeDesc() {
  SharedDtor();
}

void E_PetDecomposeDecomposeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetDecomposeDecomposeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetDecomposeDecomposeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetDecomposeDecomposeDesc_descriptor_;
}

const E_PetDecomposeDecomposeDesc& E_PetDecomposeDecomposeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetDecomposeDecomposeDesc* E_PetDecomposeDecomposeDesc::default_instance_ = NULL;

E_PetDecomposeDecomposeDesc* E_PetDecomposeDecomposeDesc::New() const {
  return new E_PetDecomposeDecomposeDesc;
}

void E_PetDecomposeDecomposeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_boxid_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetDecomposeDecomposeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_boxid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetDecomposeDecomposeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_boxid = 1;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_boxid(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetDecomposeDecomposeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_boxid = 1;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_boxid(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetDecomposeDecomposeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_boxid = 1;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetDecomposeDecomposeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetDecomposeDecomposeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetDecomposeDecomposeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetDecomposeDecomposeDesc::MergeFrom(const E_PetDecomposeDecomposeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetDecomposeDecomposeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetDecomposeDecomposeDesc::CopyFrom(const E_PetDecomposeDecomposeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetDecomposeDecomposeDesc::IsInitialized() const {

  return true;
}

void E_PetDecomposeDecomposeDesc::Swap(E_PetDecomposeDecomposeDesc* other) {
  if (other != this) {
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetDecomposeDecomposeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetDecomposeDecomposeDesc_descriptor_;
  metadata.reflection = E_PetDecomposeDecomposeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetDecompose::kMIdFieldNumber;
const int E_PetDecompose::kMQualityFieldNumber;
const int E_PetDecompose::kMDecomposeFieldNumber;
#endif  // !_MSC_VER

E_PetDecompose::E_PetDecompose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetDecompose::InitAsDefaultInstance() {
}

E_PetDecompose::E_PetDecompose(const E_PetDecompose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetDecompose::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetDecompose::~E_PetDecompose() {
  SharedDtor();
}

void E_PetDecompose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetDecompose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetDecompose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetDecompose_descriptor_;
}

const E_PetDecompose& E_PetDecompose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetDecompose* E_PetDecompose::default_instance_ = NULL;

E_PetDecompose* E_PetDecompose::New() const {
  return new E_PetDecompose;
}

void E_PetDecompose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_quality_ = 0;
  }
  m_decompose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetDecompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_decompose;
        break;
      }

      // repeated .proto_ff.E_PetDecomposeDecomposeDesc m_decompose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_decompose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_decompose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_decompose;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetDecompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // repeated .proto_ff.E_PetDecomposeDecomposeDesc m_decompose = 3;
  for (int i = 0; i < this->m_decompose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_decompose(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetDecompose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // repeated .proto_ff.E_PetDecomposeDecomposeDesc m_decompose = 3;
  for (int i = 0; i < this->m_decompose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_decompose(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetDecompose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  // repeated .proto_ff.E_PetDecomposeDecomposeDesc m_decompose = 3;
  total_size += 1 * this->m_decompose_size();
  for (int i = 0; i < this->m_decompose_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_decompose(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetDecompose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetDecompose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetDecompose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetDecompose::MergeFrom(const E_PetDecompose& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_decompose_.MergeFrom(from.m_decompose_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetDecompose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetDecompose::CopyFrom(const E_PetDecompose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetDecompose::IsInitialized() const {

  return true;
}

void E_PetDecompose::Swap(E_PetDecompose* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    m_decompose_.Swap(&other->m_decompose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetDecompose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetDecompose_descriptor_;
  metadata.reflection = E_PetDecompose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetDecompose::kEPetDecomposeListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetDecompose::Sheet_PetDecompose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetDecompose::InitAsDefaultInstance() {
}

Sheet_PetDecompose::Sheet_PetDecompose(const Sheet_PetDecompose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetDecompose::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetDecompose::~Sheet_PetDecompose() {
  SharedDtor();
}

void Sheet_PetDecompose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetDecompose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetDecompose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetDecompose_descriptor_;
}

const Sheet_PetDecompose& Sheet_PetDecompose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Sheet_PetDecompose* Sheet_PetDecompose::default_instance_ = NULL;

Sheet_PetDecompose* Sheet_PetDecompose::New() const {
  return new Sheet_PetDecompose;
}

void Sheet_PetDecompose::Clear() {
  e_petdecompose_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetDecompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetDecompose E_PetDecompose_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetDecompose_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petdecompose_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetDecompose_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetDecompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetDecompose E_PetDecompose_List = 1;
  for (int i = 0; i < this->e_petdecompose_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petdecompose_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetDecompose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetDecompose E_PetDecompose_List = 1;
  for (int i = 0; i < this->e_petdecompose_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petdecompose_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetDecompose::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetDecompose E_PetDecompose_List = 1;
  total_size += 1 * this->e_petdecompose_list_size();
  for (int i = 0; i < this->e_petdecompose_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petdecompose_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetDecompose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetDecompose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetDecompose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetDecompose::MergeFrom(const Sheet_PetDecompose& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petdecompose_list_.MergeFrom(from.e_petdecompose_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetDecompose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetDecompose::CopyFrom(const Sheet_PetDecompose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetDecompose::IsInitialized() const {

  return true;
}

void Sheet_PetDecompose::Swap(Sheet_PetDecompose* other) {
  if (other != this) {
    e_petdecompose_list_.Swap(&other->e_petdecompose_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetDecompose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetDecompose_descriptor_;
  metadata.reflection = Sheet_PetDecompose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetFettersAttributeDesc::kMTypeFieldNumber;
const int E_PetFettersAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_PetFettersAttributeDesc::E_PetFettersAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetFettersAttributeDesc::InitAsDefaultInstance() {
}

E_PetFettersAttributeDesc::E_PetFettersAttributeDesc(const E_PetFettersAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetFettersAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetFettersAttributeDesc::~E_PetFettersAttributeDesc() {
  SharedDtor();
}

void E_PetFettersAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetFettersAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetFettersAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetFettersAttributeDesc_descriptor_;
}

const E_PetFettersAttributeDesc& E_PetFettersAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetFettersAttributeDesc* E_PetFettersAttributeDesc::default_instance_ = NULL;

E_PetFettersAttributeDesc* E_PetFettersAttributeDesc::New() const {
  return new E_PetFettersAttributeDesc;
}

void E_PetFettersAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetFettersAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetFettersAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetFettersAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetFettersAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetFettersAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetFettersAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetFettersAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetFettersAttributeDesc::MergeFrom(const E_PetFettersAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetFettersAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetFettersAttributeDesc::CopyFrom(const E_PetFettersAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetFettersAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetFettersAttributeDesc::Swap(E_PetFettersAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetFettersAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetFettersAttributeDesc_descriptor_;
  metadata.reflection = E_PetFettersAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetFetters::kMIdFieldNumber;
const int E_PetFetters::kMQualityFieldNumber;
const int E_PetFetters::kMPetidFieldNumber;
const int E_PetFetters::kMAtctiveSkillidFieldNumber;
const int E_PetFetters::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_PetFetters::E_PetFetters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetFetters::InitAsDefaultInstance() {
}

E_PetFetters::E_PetFetters(const E_PetFetters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetFetters::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetFetters::~E_PetFetters() {
  SharedDtor();
}

void E_PetFetters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetFetters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetFetters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetFetters_descriptor_;
}

const E_PetFetters& E_PetFetters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

E_PetFetters* E_PetFetters::default_instance_ = NULL;

E_PetFetters* E_PetFetters::New() const {
  return new E_PetFetters;
}

void E_PetFetters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_quality_ = 0;
  }
  m_petid_.Clear();
  m_atctive_skillid_.Clear();
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetFetters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_petid;
        break;
      }

      // repeated int32 m_petid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_m_petid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_petid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_petid;
        if (input->ExpectTag(32)) goto parse_m_atctive_skillid;
        break;
      }

      // repeated int32 m_atctive_skillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_atctive_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_m_atctive_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_atctive_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_atctive_skillid;
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_PetFettersAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetFetters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // repeated int32 m_petid = 3;
  for (int i = 0; i < this->m_petid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->m_petid(i), output);
  }

  // repeated int32 m_atctive_skillid = 4;
  for (int i = 0; i < this->m_atctive_skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->m_atctive_skillid(i), output);
  }

  // repeated .proto_ff.E_PetFettersAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetFetters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // repeated int32 m_petid = 3;
  for (int i = 0; i < this->m_petid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->m_petid(i), target);
  }

  // repeated int32 m_atctive_skillid = 4;
  for (int i = 0; i < this->m_atctive_skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->m_atctive_skillid(i), target);
  }

  // repeated .proto_ff.E_PetFettersAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetFetters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  // repeated int32 m_petid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_petid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_petid(i));
    }
    total_size += 1 * this->m_petid_size() + data_size;
  }

  // repeated int32 m_atctive_skillid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_atctive_skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_atctive_skillid(i));
    }
    total_size += 1 * this->m_atctive_skillid_size() + data_size;
  }

  // repeated .proto_ff.E_PetFettersAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetFetters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetFetters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetFetters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetFetters::MergeFrom(const E_PetFetters& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_petid_.MergeFrom(from.m_petid_);
  m_atctive_skillid_.MergeFrom(from.m_atctive_skillid_);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetFetters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetFetters::CopyFrom(const E_PetFetters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetFetters::IsInitialized() const {

  return true;
}

void E_PetFetters::Swap(E_PetFetters* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    m_petid_.Swap(&other->m_petid_);
    m_atctive_skillid_.Swap(&other->m_atctive_skillid_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetFetters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetFetters_descriptor_;
  metadata.reflection = E_PetFetters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetFetters::kEPetFettersListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetFetters::Sheet_PetFetters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetFetters::InitAsDefaultInstance() {
}

Sheet_PetFetters::Sheet_PetFetters(const Sheet_PetFetters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetFetters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetFetters::~Sheet_PetFetters() {
  SharedDtor();
}

void Sheet_PetFetters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetFetters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetFetters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetFetters_descriptor_;
}

const Sheet_PetFetters& Sheet_PetFetters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();
  return *default_instance_;
}

Sheet_PetFetters* Sheet_PetFetters::default_instance_ = NULL;

Sheet_PetFetters* Sheet_PetFetters::New() const {
  return new Sheet_PetFetters;
}

void Sheet_PetFetters::Clear() {
  e_petfetters_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetFetters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetFetters E_PetFetters_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetFetters_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petfetters_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetFetters_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetFetters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetFetters E_PetFetters_List = 1;
  for (int i = 0; i < this->e_petfetters_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petfetters_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetFetters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetFetters E_PetFetters_List = 1;
  for (int i = 0; i < this->e_petfetters_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petfetters_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetFetters::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetFetters E_PetFetters_List = 1;
  total_size += 1 * this->e_petfetters_list_size();
  for (int i = 0; i < this->e_petfetters_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petfetters_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetFetters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetFetters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetFetters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetFetters::MergeFrom(const Sheet_PetFetters& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petfetters_list_.MergeFrom(from.e_petfetters_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetFetters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetFetters::CopyFrom(const Sheet_PetFetters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetFetters::IsInitialized() const {

  return true;
}

void Sheet_PetFetters::Swap(Sheet_PetFetters* other) {
  if (other != this) {
    e_petfetters_list_.Swap(&other->e_petfetters_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetFetters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetFetters_descriptor_;
  metadata.reflection = Sheet_PetFetters_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
