// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: title.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "title.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* titletype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  titletype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_titletype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_titletype_reflection_ = NULL;
const ::google::protobuf::Descriptor* titletitleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  titletitleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* titletitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  titletitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_titletitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_titletitle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_title_2eproto() {
  protobuf_AddDesc_title_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "title.proto");
  GOOGLE_CHECK(file != NULL);
  titletype_descriptor_ = file->message_type(0);
  static const int titletype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletype, type_),
  };
  titletype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      titletype_descriptor_,
      titletype::default_instance_,
      titletype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(titletype));
  Sheet_titletype_descriptor_ = file->message_type(1);
  static const int Sheet_titletype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_titletype, titletype_list_),
  };
  Sheet_titletype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_titletype_descriptor_,
      Sheet_titletype::default_instance_,
      Sheet_titletype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_titletype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_titletype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_titletype));
  titletitleattributeDesc_descriptor_ = file->message_type(2);
  static const int titletitleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitleattributeDesc, value_),
  };
  titletitleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      titletitleattributeDesc_descriptor_,
      titletitleattributeDesc::default_instance_,
      titletitleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(titletitleattributeDesc));
  titletitle_descriptor_ = file->message_type(3);
  static const int titletitle_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, eventvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, addtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, attribute_),
  };
  titletitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      titletitle_descriptor_,
      titletitle::default_instance_,
      titletitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(titletitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(titletitle));
  Sheet_titletitle_descriptor_ = file->message_type(4);
  static const int Sheet_titletitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_titletitle, titletitle_list_),
  };
  Sheet_titletitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_titletitle_descriptor_,
      Sheet_titletitle::default_instance_,
      Sheet_titletitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_titletitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_titletitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_titletitle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_title_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    titletype_descriptor_, &titletype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_titletype_descriptor_, &Sheet_titletype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    titletitleattributeDesc_descriptor_, &titletitleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    titletitle_descriptor_, &titletitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_titletitle_descriptor_, &Sheet_titletitle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_title_2eproto() {
  delete titletype::default_instance_;
  delete titletype_reflection_;
  delete Sheet_titletype::default_instance_;
  delete Sheet_titletype_reflection_;
  delete titletitleattributeDesc::default_instance_;
  delete titletitleattributeDesc_reflection_;
  delete titletitle::default_instance_;
  delete titletitle_reflection_;
  delete Sheet_titletitle::default_instance_;
  delete Sheet_titletitle_reflection_;
}

void protobuf_AddDesc_title_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013title.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"+\n\ttitletype\022\036\n\004type\030\001 \001(\005B\020\302\377\024\014\347"
    "\247\260\345\217\267\347\261\273\345\236\213\"D\n\017Sheet_titletype\0221\n\016titlet"
    "ype_List\030\001 \003(\0132\023.proto_ff.titletypeB\004\210\301\024"
    "\024\"K\n\027titletitleattributeDesc\022\030\n\004type\030\001 \001"
    "(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\373"
    "\002\n\ntitletitle\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\347\247\260\345\217\267ID\022"
    "\"\n\004name\030\002 \001(\tB\024\302\377\024\014\347\247\260\345\217\267\345\220\215\347\247\260\220\301\024<\022\036\n\004t"
    "ype\030\003 \001(\005B\020\302\377\024\014\347\247\260\345\217\267\347\261\273\345\236\213\022\'\n\007subType\030\004"
    " \001(\005B\026\302\377\024\022\350\216\267\345\217\226\346\235\241\344\273\266\347\261\273\345\236\213\022+\n\neventVal"
    "ue\030\005 \001(\tB\027\302\377\024\017\350\216\267\345\217\226\346\235\241\344\273\266\345\200\274\220\301\024<\022,\n\010des"
    "cribe\030\006 \001(\tB\032\302\377\024\022\350\216\267\345\217\226\346\235\241\344\273\266\346\217\217\350\277\260\220\301\024x\022"
    "!\n\007addTime\030\007 \001(\005B\020\302\377\024\014\350\207\252\345\212\250\345\273\266\346\234\237\022\"\n\010li"
    "feTime\030\010 \001(\005B\020\302\377\024\014\347\224\237\346\225\210\346\227\266\351\227\264\022D\n\tattrib"
    "ute\030\t \003(\0132!.proto_ff.titletitleattribute"
    "DescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\004\"G\n\020Sheet_titletitle"
    "\0223\n\017titletitle_List\030\001 \003(\0132\024.proto_ff.tit"
    "letitleB\004\210\301\024x", 693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "title.proto", &protobuf_RegisterTypes);
  titletype::default_instance_ = new titletype();
  Sheet_titletype::default_instance_ = new Sheet_titletype();
  titletitleattributeDesc::default_instance_ = new titletitleattributeDesc();
  titletitle::default_instance_ = new titletitle();
  Sheet_titletitle::default_instance_ = new Sheet_titletitle();
  titletype::default_instance_->InitAsDefaultInstance();
  Sheet_titletype::default_instance_->InitAsDefaultInstance();
  titletitleattributeDesc::default_instance_->InitAsDefaultInstance();
  titletitle::default_instance_->InitAsDefaultInstance();
  Sheet_titletitle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_title_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_title_2eproto {
  StaticDescriptorInitializer_title_2eproto() {
    protobuf_AddDesc_title_2eproto();
  }
} static_descriptor_initializer_title_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int titletype::kTypeFieldNumber;
#endif  // !_MSC_VER

titletype::titletype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void titletype::InitAsDefaultInstance() {
}

titletype::titletype(const titletype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void titletype::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

titletype::~titletype() {
  SharedDtor();
}

void titletype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void titletype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* titletype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return titletype_descriptor_;
}

const titletype& titletype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

titletype* titletype::default_instance_ = NULL;

titletype* titletype::New() const {
  return new titletype;
}

void titletype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool titletype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void titletype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* titletype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int titletype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void titletype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const titletype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const titletype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void titletype::MergeFrom(const titletype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void titletype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void titletype::CopyFrom(const titletype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool titletype::IsInitialized() const {

  return true;
}

void titletype::Swap(titletype* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata titletype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = titletype_descriptor_;
  metadata.reflection = titletype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_titletype::kTitletypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_titletype::Sheet_titletype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_titletype::InitAsDefaultInstance() {
}

Sheet_titletype::Sheet_titletype(const Sheet_titletype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_titletype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_titletype::~Sheet_titletype() {
  SharedDtor();
}

void Sheet_titletype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_titletype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_titletype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_titletype_descriptor_;
}

const Sheet_titletype& Sheet_titletype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Sheet_titletype* Sheet_titletype::default_instance_ = NULL;

Sheet_titletype* Sheet_titletype::New() const {
  return new Sheet_titletype;
}

void Sheet_titletype::Clear() {
  titletype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_titletype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.titletype titletype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titletype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titletype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_titletype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_titletype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.titletype titletype_List = 1;
  for (int i = 0; i < this->titletype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->titletype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_titletype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.titletype titletype_List = 1;
  for (int i = 0; i < this->titletype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->titletype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_titletype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.titletype titletype_List = 1;
  total_size += 1 * this->titletype_list_size();
  for (int i = 0; i < this->titletype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titletype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_titletype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_titletype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_titletype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_titletype::MergeFrom(const Sheet_titletype& from) {
  GOOGLE_CHECK_NE(&from, this);
  titletype_list_.MergeFrom(from.titletype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_titletype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_titletype::CopyFrom(const Sheet_titletype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_titletype::IsInitialized() const {

  return true;
}

void Sheet_titletype::Swap(Sheet_titletype* other) {
  if (other != this) {
    titletype_list_.Swap(&other->titletype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_titletype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_titletype_descriptor_;
  metadata.reflection = Sheet_titletype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int titletitleattributeDesc::kTypeFieldNumber;
const int titletitleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

titletitleattributeDesc::titletitleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void titletitleattributeDesc::InitAsDefaultInstance() {
}

titletitleattributeDesc::titletitleattributeDesc(const titletitleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void titletitleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

titletitleattributeDesc::~titletitleattributeDesc() {
  SharedDtor();
}

void titletitleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void titletitleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* titletitleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return titletitleattributeDesc_descriptor_;
}

const titletitleattributeDesc& titletitleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

titletitleattributeDesc* titletitleattributeDesc::default_instance_ = NULL;

titletitleattributeDesc* titletitleattributeDesc::New() const {
  return new titletitleattributeDesc;
}

void titletitleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool titletitleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void titletitleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* titletitleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int titletitleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void titletitleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const titletitleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const titletitleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void titletitleattributeDesc::MergeFrom(const titletitleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void titletitleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void titletitleattributeDesc::CopyFrom(const titletitleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool titletitleattributeDesc::IsInitialized() const {

  return true;
}

void titletitleattributeDesc::Swap(titletitleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata titletitleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = titletitleattributeDesc_descriptor_;
  metadata.reflection = titletitleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int titletitle::kIdFieldNumber;
const int titletitle::kNameFieldNumber;
const int titletitle::kTypeFieldNumber;
const int titletitle::kSubTypeFieldNumber;
const int titletitle::kEventValueFieldNumber;
const int titletitle::kDescribeFieldNumber;
const int titletitle::kAddTimeFieldNumber;
const int titletitle::kLifeTimeFieldNumber;
const int titletitle::kAttributeFieldNumber;
#endif  // !_MSC_VER

titletitle::titletitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void titletitle::InitAsDefaultInstance() {
}

titletitle::titletitle(const titletitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void titletitle::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  subtype_ = 0;
  eventvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addtime_ = 0;
  lifetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

titletitle::~titletitle() {
  SharedDtor();
}

void titletitle::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (eventvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete eventvalue_;
  }
  if (describe_ != &::google::protobuf::internal::kEmptyString) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void titletitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* titletitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return titletitle_descriptor_;
}

const titletitle& titletitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

titletitle* titletitle::default_instance_ = NULL;

titletitle* titletitle::New() const {
  return new titletitle;
}

void titletitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    subtype_ = 0;
    if (has_eventvalue()) {
      if (eventvalue_ != &::google::protobuf::internal::kEmptyString) {
        eventvalue_->clear();
      }
    }
    if (has_describe()) {
      if (describe_ != &::google::protobuf::internal::kEmptyString) {
        describe_->clear();
      }
    }
    addtime_ = 0;
    lifetime_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool titletitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_subType;
        break;
      }

      // optional int32 subType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_eventValue;
        break;
      }

      // optional string eventValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventvalue().data(), this->eventvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_describe;
        break;
      }

      // optional string describe = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_addTime;
        break;
      }

      // optional int32 addTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtime_)));
          set_has_addtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lifeTime;
        break;
      }

      // optional int32 lifeTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lifeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.titletitleattributeDesc attribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void titletitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 subType = 4;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->subtype(), output);
  }

  // optional string eventValue = 5;
  if (has_eventvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventvalue().data(), this->eventvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->eventvalue(), output);
  }

  // optional string describe = 6;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->describe(), output);
  }

  // optional int32 addTime = 7;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->addtime(), output);
  }

  // optional int32 lifeTime = 8;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lifetime(), output);
  }

  // repeated .proto_ff.titletitleattributeDesc attribute = 9;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* titletitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 subType = 4;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->subtype(), target);
  }

  // optional string eventValue = 5;
  if (has_eventvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventvalue().data(), this->eventvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->eventvalue(), target);
  }

  // optional string describe = 6;
  if (has_describe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->describe(), target);
  }

  // optional int32 addTime = 7;
  if (has_addtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->addtime(), target);
  }

  // optional int32 lifeTime = 8;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lifetime(), target);
  }

  // repeated .proto_ff.titletitleattributeDesc attribute = 9;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int titletitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 subType = 4;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional string eventValue = 5;
    if (has_eventvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventvalue());
    }

    // optional string describe = 6;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // optional int32 addTime = 7;
    if (has_addtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtime());
    }

    // optional int32 lifeTime = 8;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lifetime());
    }

  }
  // repeated .proto_ff.titletitleattributeDesc attribute = 9;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void titletitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const titletitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const titletitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void titletitle::MergeFrom(const titletitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_eventvalue()) {
      set_eventvalue(from.eventvalue());
    }
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_addtime()) {
      set_addtime(from.addtime());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void titletitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void titletitle::CopyFrom(const titletitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool titletitle::IsInitialized() const {

  return true;
}

void titletitle::Swap(titletitle* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(subtype_, other->subtype_);
    std::swap(eventvalue_, other->eventvalue_);
    std::swap(describe_, other->describe_);
    std::swap(addtime_, other->addtime_);
    std::swap(lifetime_, other->lifetime_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata titletitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = titletitle_descriptor_;
  metadata.reflection = titletitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_titletitle::kTitletitleListFieldNumber;
#endif  // !_MSC_VER

Sheet_titletitle::Sheet_titletitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_titletitle::InitAsDefaultInstance() {
}

Sheet_titletitle::Sheet_titletitle(const Sheet_titletitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_titletitle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_titletitle::~Sheet_titletitle() {
  SharedDtor();
}

void Sheet_titletitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_titletitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_titletitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_titletitle_descriptor_;
}

const Sheet_titletitle& Sheet_titletitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_title_2eproto();
  return *default_instance_;
}

Sheet_titletitle* Sheet_titletitle::default_instance_ = NULL;

Sheet_titletitle* Sheet_titletitle::New() const {
  return new Sheet_titletitle;
}

void Sheet_titletitle::Clear() {
  titletitle_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_titletitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.titletitle titletitle_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titletitle_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titletitle_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_titletitle_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_titletitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.titletitle titletitle_List = 1;
  for (int i = 0; i < this->titletitle_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->titletitle_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_titletitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.titletitle titletitle_List = 1;
  for (int i = 0; i < this->titletitle_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->titletitle_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_titletitle::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.titletitle titletitle_List = 1;
  total_size += 1 * this->titletitle_list_size();
  for (int i = 0; i < this->titletitle_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titletitle_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_titletitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_titletitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_titletitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_titletitle::MergeFrom(const Sheet_titletitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  titletitle_list_.MergeFrom(from.titletitle_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_titletitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_titletitle::CopyFrom(const Sheet_titletitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_titletitle::IsInitialized() const {

  return true;
}

void Sheet_titletitle::Swap(Sheet_titletitle* other) {
  if (other != this) {
    titletitle_list_.Swap(&other->titletitle_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_titletitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_titletitle_descriptor_;
  metadata.reflection = Sheet_titletitle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
