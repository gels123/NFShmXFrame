// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Com.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Com.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPair64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPair64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPairBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPairBool_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EAttrGroup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECreatureAttr_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Com_2eproto() {
  protobuf_AddDesc_Com_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Com.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyMessage_descriptor_ = file->message_type(0);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMessage));
  Vector3PB_descriptor_ = file->message_type(1);
  static const int Vector3PB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, z_),
  };
  Vector3PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3PB_descriptor_,
      Vector3PB::default_instance_,
      Vector3PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3PB));
  Vector2PB_descriptor_ = file->message_type(2);
  static const int Vector2PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, y_),
  };
  Vector2PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2PB_descriptor_,
      Vector2PB::default_instance_,
      Vector2PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2PB));
  ComPair_descriptor_ = file->message_type(3);
  static const int ComPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, value_),
  };
  ComPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPair_descriptor_,
      ComPair::default_instance_,
      ComPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPair));
  ComPair64_descriptor_ = file->message_type(4);
  static const int ComPair64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, value_),
  };
  ComPair64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPair64_descriptor_,
      ComPair64::default_instance_,
      ComPair64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPair64));
  ComPairBool_descriptor_ = file->message_type(5);
  static const int ComPairBool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, value_),
  };
  ComPairBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPairBool_descriptor_,
      ComPairBool::default_instance_,
      ComPairBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPairBool));
  EAttrGroup_descriptor_ = file->enum_type(0);
  ECreatureAttr_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Com_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3PB_descriptor_, &Vector3PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2PB_descriptor_, &Vector2PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPair_descriptor_, &ComPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPair64_descriptor_, &ComPair64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPairBool_descriptor_, &ComPairBool::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Com_2eproto() {
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete Vector3PB::default_instance_;
  delete Vector3PB_reflection_;
  delete Vector2PB::default_instance_;
  delete Vector2PB_reflection_;
  delete ComPair::default_instance_;
  delete ComPair_reflection_;
  delete ComPair64::default_instance_;
  delete ComPair64_reflection_;
  delete ComPairBool::default_instance_;
  delete ComPairBool_reflection_;
}

void protobuf_AddDesc_Com_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tCom.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\032\017ComDefine.proto\"\016\n\014EmptyMessage\",\n"
    "\tVector3PB\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 "
    "\001(\002\"!\n\tVector2PB\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"%"
    "\n\007ComPair\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\"\'\n"
    "\tComPair64\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\004\")"
    "\n\013ComPairBool\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001("
    "\010*c\n\nEAttrGroup\022\024\n\020EAttrGroup_Level\020\001\022\024\n"
    "\020EAttrGroup_Skill\020\002\022\023\n\017EAttrGroup_Buff\020\003"
    "\022\024\n\020EAttrGroup_Equip\020\004*\340\023\n\rECreatureAttr"
    "\022\n\n\006A_NONE\020\000\022\020\n\014A_HP_RECOVER\020\001\022\013\n\007A_SPEE"
    "D\020\002\022\014\n\010A_MAX_HP\020\003\022\t\n\005A_ATK\020\004\022\t\n\005A_DEF\020\005\022"
    "\014\n\010A_PIERCE\020\006\022\020\n\014A_DIVINE_ATK\020\007\022\020\n\014A_DIV"
    "INE_DEF\020\010\022\t\n\005A_HIT\020\t\022\013\n\007A_DODGE\020\n\022\n\n\006A_C"
    "RIT\020\013\022\013\n\007A_TOUGH\020\014\022\n\n\006A_KILL\020\r\022\013\n\007A_PARR"
    "Y\020\016\022\016\n\nA_HIT_RATE\020\017\022\020\n\014A_DODGE_RATE\020\020\022\017\n"
    "\013A_CRIT_RATE\020\021\022\020\n\014A_TOUGH_RATE\020\022\022\017\n\013A_KI"
    "LL_RATE\020\023\022\020\n\014A_PARRY_RATE\020\024\022\016\n\nA_CRIT_DA"
    "M\020\025\022\017\n\013A_CRIT_REDU\020\026\022\016\n\nA_KILL_DAM\020\027\022\017\n\013"
    "A_KILL_REDU\020\030\022\r\n\tA_DAM_ADD\020\031\022\016\n\nA_DAM_RE"
    "DU\020\032\022\r\n\tA_PVP_DAM\020\033\022\017\n\013A_PVP_ARMOR\020\034\022\021\n\r"
    "A_MON_DAM_ADD\020\035\022\022\n\016A_MON_DAM_REDU\020\036\022\022\n\016A"
    "_BOSS_DAM_ADD\020\037\022\023\n\017A_BOSS_DAM_REDU\020 \022\021\n\r"
    "A_CONTROL_ADD\020!\022\022\n\016A_CONTROL_REDU\020\"\022\020\n\014A"
    "_MAX_HP_ADD\020#\022\r\n\tA_ATK_ADD\020$\022\r\n\tA_DEF_AD"
    "D\020%\022\020\n\014A_PIERCE_ADD\020&\022\021\n\rA_DIV_ATK_ADD\020\'"
    "\022\021\n\rA_DIV_DEF_ADD\020(\022\r\n\tA_HIT_ADD\020)\022\017\n\013A_"
    "DODGE_ADD\020*\022\016\n\nA_CRIT_ADD\020+\022\017\n\013A_TOUGH_A"
    "DD\020,\022\016\n\nA_KILL_ADD\020-\022\017\n\013A_PARRY_ADD\020.\022\013\n"
    "\007A_BA_HP\020/\022\014\n\010A_BA_ATK\0200\022\014\n\010A_BA_DEF\0201\022\017"
    "\n\013A_BA_PIERCE\0202\022\014\n\010A_EQU_HP\0203\022\r\n\tA_EQU_A"
    "TK\0204\022\r\n\tA_EQU_DEF\0205\022\020\n\014A_EQU_PIERCE\0206\022\r\n"
    "\tA_SUP_ATK\0207\022\020\n\014A_SUP_PIERCE\0208\022\022\n\016A_PAR_"
    "ATTR_ADD\0209\022\020\n\014A_PAR_HP_ADD\020:\022\021\n\rA_PAR_AT"
    "K_ADD\020;\022\021\n\rA_PAR_DEF_ADD\020<\022\022\n\016A_PAR_PIER"
    "_ADD\020=\022\022\n\016A_STR_ATTR_ADD\020>\022\023\n\017A_WING_ATT"
    "R_ADD\020\?\022\022\n\016A_MAG_ATTR_ADD\020@\022\022\n\016A_ART_ATT"
    "R_ADD\020A\022\025\n\021A_ATKART_ATTR_ADD\020B\022\024\n\020A_HPAR"
    "T_ATTR_ADD\020C\022\026\n\022A_CRITART_ATTR_ADD\020D\022\026\n\022"
    "A_KILLART_ATTR_ADD\020E\022\022\n\016A_FAI_ATTR_ADD\020F"
    "\022\020\n\014A_FAI_HP_ADD\020G\022\021\n\rA_FAI_ATK_ADD\020H\022\021\n"
    "\rA_FAI_DEF_ADD\020I\022\022\n\016A_FAI_PIER_ADD\020J\022\017\n\013"
    "A_SPEED_ADD\020K\022\r\n\tA_EXP_ADD\020L\022\017\n\013A_DROP_R"
    "ATE\020M\022\023\n\017A_SKILL_DAM_ADD\020N\022\024\n\020A_SKILL_DA"
    "M_REDU\020O\022\017\n\013A_FIGHT_END\020d\022\013\n\007A_FIGHT\020e\022\t"
    "\n\005A_EXP\020f\022\014\n\010A_CUR_HP\020g\022\n\n\006A_PROF\020h\022\n\n\006A"
    "_GOLD\020i\022\r\n\tA_DIAMOND\020j\022\022\n\016A_DIAMOND_BIND"
    "\020k\022\t\n\005A_SEX\020l\022\013\n\007A_LEVEL\020m\022\020\n\014A_OCCUPATI"
    "ON\020n\022\016\n\nA_APTITUDE\020o\022\016\n\nA_WING_EXP\020p\022\017\n\013"
    "A_USE_TITLE\020q\022\022\n\016A_DUPLICATE_ID\020r\022\r\n\tA_T"
    "EAM_ID\020s\022\021\n\rA_TEAM_LEADER\020t\022\020\n\014A_ARENA_C"
    "OIN\020u\022\022\n\016A_STAR_ESSENCE\020v\022\016\n\nA_STAR_EXP\020"
    "w\022\023\n\017A_STAR_FRAGMENT\020x\022\016\n\nA_UNION_ID\020y\022\022"
    "\n\016A_UNION_LEADER\020z\022\017\n\013A_ESCORT_ID\020{\022\021\n\rA"
    "_HANGUP_TIME\020|\022\020\n\014A_UNION_DUTY\020}\022\021\n\rA_UN"
    "ION_LEVEL\020~\022\020\n\014A_ACTIVE_NUM\020\177\022\024\n\017A_CLONE"
    "SS_LEVEL\020\200\001\022\020\n\013A_VIP_LEVEL\020\201\001\022\024\n\017A_WORLD"
    "_EXP_ADD\020\202\001\022\023\n\016A_SMALL_SPIRIT\020\203\001\022\021\n\014A_BI"
    "G_SPIRIT\020\204\001\022\022\n\rA_GODHOOD_EXP\020\205\001\022\016\n\tA_CAM"
    "P_ID\020\206\001\022\035\n\030A_RECHARGE_DISCOUNT_DATE\020\207\001\022\023"
    "\n\016A_FRIEND_COUNT\020\210\001\022\020\n\013A_FIELD_EXP\020\211\001\022\025\n"
    "\020A_COMBAT_TEAM_ID\020\212\001\022\021\n\014A_SOLO_SCORE\020\213\001\022"
    "\025\n\020A_SOLO_PRV_SCORE\020\214\001\022\023\n\016A_TEAM_EXP_ADD"
    "\020\215\001\022\031\n\024A_MARRY_TEAM_EXP_ADD\020\216\001\022\022\n\rA_DUP_"
    "EXP_ADD\020\217\001\022\030\n\023A_CONTINUS_KILL_NUM\020\220\001\022\022\n\r"
    "A_DRAGONS_NUM\020\221\001\022\027\n\022A_VIP_CARD_DIAMOND\020\222"
    "\001\022\023\n\016A_HOLY_DIAMOND\020\223\001\022\024\n\017A_GOLD_JUAN_NU"
    "M\020\224\001\022\026\n\021A_SILVER_JUAN_NUM\020\225\001\022\021\n\014A_RELIVE"
    "_NUM\020\226\001\022\027\n\022A_LAST_RELIVE_TIME\020\227\001\022\022\n\rA_DE"
    "AD_MAP_ID\020\230\001\022\026\n\021A_DEAD_STATIC_NUM\020\231\001\022\016\n\t"
    "A_DEAD_CD\020\232\001\022\021\n\014A_FUSHI_TIME\020\233\001\022\021\n\014A_STA"
    "R_STONE\020\234\001\022\016\n\tA_VOUCHER\020\235\001\022\016\n\tA_WAIGUAN\020"
    "\236\001\022\021\n\014A_COMMON_END\020\220\003\022\n\n\005A_MAX\020\270\027", 2913);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Com.proto", &protobuf_RegisterTypes);
  EmptyMessage::default_instance_ = new EmptyMessage();
  Vector3PB::default_instance_ = new Vector3PB();
  Vector2PB::default_instance_ = new Vector2PB();
  ComPair::default_instance_ = new ComPair();
  ComPair64::default_instance_ = new ComPair64();
  ComPairBool::default_instance_ = new ComPairBool();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  Vector3PB::default_instance_->InitAsDefaultInstance();
  Vector2PB::default_instance_->InitAsDefaultInstance();
  ComPair::default_instance_->InitAsDefaultInstance();
  ComPair64::default_instance_->InitAsDefaultInstance();
  ComPairBool::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Com_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Com_2eproto {
  StaticDescriptorInitializer_Com_2eproto() {
    protobuf_AddDesc_Com_2eproto();
  }
} static_descriptor_initializer_Com_2eproto_;
const ::google::protobuf::EnumDescriptor* EAttrGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAttrGroup_descriptor_;
}
bool EAttrGroup_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECreatureAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECreatureAttr_descriptor_;
}
bool ECreatureAttr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 400:
    case 3000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMessage::EmptyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyMessage::InitAsDefaultInstance() {
}

EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMessage::~EmptyMessage() {
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New() const {
  return new EmptyMessage;
}

void EmptyMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {

  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3PB::kXFieldNumber;
const int Vector3PB::kYFieldNumber;
const int Vector3PB::kZFieldNumber;
#endif  // !_MSC_VER

Vector3PB::Vector3PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3PB::InitAsDefaultInstance() {
}

Vector3PB::Vector3PB(const Vector3PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3PB::~Vector3PB() {
  SharedDtor();
}

void Vector3PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3PB_descriptor_;
}

const Vector3PB& Vector3PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Vector3PB* Vector3PB::default_instance_ = NULL;

Vector3PB* Vector3PB::New() const {
  return new Vector3PB;
}

void Vector3PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3PB::MergeFrom(const Vector3PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3PB::CopyFrom(const Vector3PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3PB::IsInitialized() const {

  return true;
}

void Vector3PB::Swap(Vector3PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3PB_descriptor_;
  metadata.reflection = Vector3PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2PB::kXFieldNumber;
const int Vector2PB::kYFieldNumber;
#endif  // !_MSC_VER

Vector2PB::Vector2PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector2PB::InitAsDefaultInstance() {
}

Vector2PB::Vector2PB(const Vector2PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector2PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2PB::~Vector2PB() {
  SharedDtor();
}

void Vector2PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2PB_descriptor_;
}

const Vector2PB& Vector2PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Vector2PB* Vector2PB::default_instance_ = NULL;

Vector2PB* Vector2PB::New() const {
  return new Vector2PB;
}

void Vector2PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector2PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector2PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector2PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2PB::MergeFrom(const Vector2PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2PB::CopyFrom(const Vector2PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2PB::IsInitialized() const {

  return true;
}

void Vector2PB::Swap(Vector2PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2PB_descriptor_;
  metadata.reflection = Vector2PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPair::kKeyFieldNumber;
const int ComPair::kValueFieldNumber;
#endif  // !_MSC_VER

ComPair::ComPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPair::InitAsDefaultInstance() {
}

ComPair::ComPair(const ComPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPair::~ComPair() {
  SharedDtor();
}

void ComPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPair_descriptor_;
}

const ComPair& ComPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPair* ComPair::default_instance_ = NULL;

ComPair* ComPair::New() const {
  return new ComPair;
}

void ComPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPair::MergeFrom(const ComPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPair::CopyFrom(const ComPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPair::IsInitialized() const {

  return true;
}

void ComPair::Swap(ComPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPair_descriptor_;
  metadata.reflection = ComPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPair64::kKeyFieldNumber;
const int ComPair64::kValueFieldNumber;
#endif  // !_MSC_VER

ComPair64::ComPair64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPair64::InitAsDefaultInstance() {
}

ComPair64::ComPair64(const ComPair64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPair64::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPair64::~ComPair64() {
  SharedDtor();
}

void ComPair64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPair64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPair64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPair64_descriptor_;
}

const ComPair64& ComPair64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPair64* ComPair64::default_instance_ = NULL;

ComPair64* ComPair64::New() const {
  return new ComPair64;
}

void ComPair64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPair64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPair64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPair64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPair64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPair64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPair64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPair64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPair64::MergeFrom(const ComPair64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPair64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPair64::CopyFrom(const ComPair64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPair64::IsInitialized() const {

  return true;
}

void ComPair64::Swap(ComPair64* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPair64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPair64_descriptor_;
  metadata.reflection = ComPair64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPairBool::kKeyFieldNumber;
const int ComPairBool::kValueFieldNumber;
#endif  // !_MSC_VER

ComPairBool::ComPairBool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPairBool::InitAsDefaultInstance() {
}

ComPairBool::ComPairBool(const ComPairBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPairBool::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPairBool::~ComPairBool() {
  SharedDtor();
}

void ComPairBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPairBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPairBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPairBool_descriptor_;
}

const ComPairBool& ComPairBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPairBool* ComPairBool::default_instance_ = NULL;

ComPairBool* ComPairBool::New() const {
  return new ComPairBool;
}

void ComPairBool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPairBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPairBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional bool value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPairBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional bool value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPairBool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPairBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPairBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPairBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPairBool::MergeFrom(const ComPairBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPairBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPairBool::CopyFrom(const ComPairBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPairBool::IsInitialized() const {

  return true;
}

void ComPairBool::Swap(ComPairBool* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPairBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPairBool_descriptor_;
  metadata.reflection = ComPairBool_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
